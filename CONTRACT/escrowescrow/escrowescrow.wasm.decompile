(data (i32.const 8192) "transfer\00")
(data (i32.const 8201) "string is too long to be a valid name\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8325) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8392) "character is not in allowed character set for names\00")
(data (i32.const 8444) "Memo must contain a valid deal ID\00")
(data (i32.const 8478) "Invalid character in symbol name. Expected only digits\00")
(data (i32.const 8533) "Cannot find deal ID: \00")
(data (i32.const 8555) "The deal is expired\00")
(data (i32.const 8575) "The deal is already funded\00")
(data (i32.const 8602) "The deal is not accepted yet by both parties\00")
(data (i32.const 8647) "The deal can only funded by buyer\00")
(data (i32.const 8681) "Invalid amount or currency. Expected \00")
(data (i32.const 8719) " via \00%lu\00")
(data (i32.const 8729) "funded\00")
(data (i32.const 8736) "Deal is funded\00%llu\00")
(data (i32.const 8756) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8807) "error reading iterator\00")
(data (i32.const 8830) "read\00")
(data (i32.const 8835) "get\00")
(data (i32.const 8839) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 8898) "-%lld.%s %s\00")
(data (i32.const 8910) "%lld.%s %s\00")
(data (i32.const 8924) "\e0\"\00\00")
(data (i32.const 8928) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 8961) "object passed to modify is not in multi_index\00")
(data (i32.const 9007) "cannot modify objects in table of another contract\00")
(data (i32.const 9058) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9117) "write\00")
(data (i32.const 9123) "active\00")
(data (i32.const 9130) "notify\00")
(data (i32.const 9137) "wipeexpired\00")
(data (i32.const 9149) "Contact name cannot be empty\00")
(data (i32.const 9178) "Email cannot be empty\00")
(data (i32.const 9200) "ISO country code must be 2 letters\00")
(data (i32.const 9235) "Invalid character in ISO country code\00")
(data (i32.const 9273) "cannot create objects in table of another contract\00")
(data (i32.const 9324) "Cannot find the arbiter\00")
(data (i32.const 9348) "This arbiter is already marked for deletion\00")
(data (i32.const 9392) "description cannot be empty\00")
(data (i32.const 9420) "tkcontract account does not exist\00")
(data (i32.const 9454) "invalid quantity\00")
(data (i32.const 9471) "must specify a positive quantity\00")
(data (i32.const 9504) "buyer account does not exist\00")
(data (i32.const 9533) "seller account does not exist\00")
(data (i32.const 9563) "arbiter account does not exist\00")
(data (i32.const 9594) "Buyer, seller and arbiter must be different accounts\00")
(data (i32.const 9647) "delivery term should be a positive number of days\00")
(data (i32.const 9697) "Invalid currency or the buyer has no funds\00")
(data (i32.const 9740) "This arbiter marked as inactive\00")
(data (i32.const 9772) "read_transaction failed\00")
(data (i32.const 9796) "new\00")
(data (i32.const 9800) "New deal created\00")
(data (i32.const 9817) "Cannot find deal_id\00")
(data (i32.const 9837) "Buyer has already accepted this deal\00")
(data (i32.const 9874) "Seller has already accepted this deal\00")
(data (i32.const 9912) "Deal can only be accepted by either seller or buyer\00")
(data (i32.const 9964) "accepted\00")
(data (i32.const 9973) "Deal is fully accepted\00")
(data (i32.const 9996) "The deal is in arbitration\00")
(data (i32.const 10023) "Only seller or buyer can cancel the deal\00")
(data (i32.const 10064) "The deal is already delivered, cannot cancel\00")
(data (i32.const 10109) "The deal is funded, so only seller can cancel it\00")
(data (i32.const 10158) "Deal \00")
(data (i32.const 10164) ": canceled by seller\00")
(data (i32.const 10185) "refunded\00")
(data (i32.const 10194) "Deal canceled by seller, buyer got refunded\00")
(data (i32.const 10238) "canceled\00")
(data (i32.const 10247) "The deal is canceled\00")
(data (i32.const 10268) "cannot pass end iterator to erase\00")
(data (i32.const 10302) "cannot increment end iterator\00")
(data (i32.const 10332) "object passed to erase is not in multi_index\00")
(data (i32.const 10377) "cannot erase objects in table of another contract\00")
(data (i32.const 10427) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10480) "The deal is not funded yet\00")
(data (i32.const 10507) "The deal is already marked as delivered\00")
(data (i32.const 10547) "Only seller can mark a deal as delivered\00")
(data (i32.const 10588) "delivered\00")
(data (i32.const 10598) "Deal is marked as delivered\00")
(data (i32.const 10626) "Only buyer can sign-off Goods Received\00")
(data (i32.const 10665) ": goods received, deal closed\00")
(data (i32.const 10695) "closed\00")
(data (i32.const 10702) "Goods received, deal closed\00")
(data (i32.const 10730) "Only buyer can extend a deal\00")
(data (i32.const 10759) "extended\00")
(data (i32.const 10768) "Deal extended by \00")
(data (i32.const 10786) " more days\00")
(data (i32.const 10797) "The deal is not open for arbitration\00")
(data (i32.const 10834) ": canceled by arbitration\00")
(data (i32.const 10860) "arbrefund\00")
(data (i32.const 10870) "Deal canceled by arbitration, buyer got refunded\00")
(data (i32.const 10919) ": enforced by arbitration\00")
(data (i32.const 10945) "arbenforce\00")
(data (i32.const 10956) "Deal enforced by arbitration, seller got paid\00")
(data (i32.const 11002) "arbdeleted\00")
(data (i32.const 11013) "There are no expired transactions or inactive arbiters\00")
(data (i32.const 11068) "arbitration\00")
(data (i32.const 11080) "Goods Received was not issued on time. The deal is open for arbitration\00")
(data (i32.const 11152) " expired\00")
(data (i32.const 11161) "refund\00")
(data (i32.const 11168) " refunded\00")
(data (i32.const 11178) "expired\00")
(data (i32.const 19616) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$5 (result i64)))
(import "env" "require_recipient" (func $fimport$6 (param i64)))
(import "env" "require_auth" (func $fimport$7 (param i64)))
(import "env" "is_account" (func $fimport$8 (param i64) (result i32)))
(import "env" "transaction_size" (func $fimport$9 (result i32)))
(import "env" "read_transaction" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$11 (param i32 i32 i32)))
(import "env" "has_auth" (func $fimport$12 (param i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$14 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$15 (result i64)))
(import "env" "db_update_i64" (func $fimport$16 (param i32 i64 i32 i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$18 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$19 (param i32 i64 i32)))
(import "env" "send_inline" (func $fimport$20 (param i32 i32)))
(import "env" "send_deferred" (func $fimport$21 (param i32 i64 i32 i32 i32)))
(import "env" "db_store_i64" (func $fimport$22 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$23 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$24 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$25 (param i32)))
(import "env" "db_idx64_next" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "abort" (func $fimport$27))
(import "env" "memset" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$30 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$39 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$40 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$41 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$42 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$43 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$45 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$46 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$47 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$48 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$49 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $104))
(export "_Znwj" (func $102))
(export "_Znaj" (func $103))
(export "_ZdaPv" (func $105))
(export "_ZnwjSt11align_val_t" (func $106))
(export "_ZnajSt11align_val_t" (func $107))
(export "_ZdlPvSt11align_val_t" (func $108))
(export "_ZdaPvSt11align_val_t" (func $109))
(table $0 17 17 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $11 $13 $14 $15 $17 $19 $20 $21 $23 $25 $127 $129)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19696))
(global $global$2 i32 (i32.const 19696))


void .FUNC $98 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = ($global$0 - [96])
	$global$0 = $8
	$0 = *($0 + [4])
	$9 = *($0 + [4])
	$10 = (*($0) + int_32($9 >> [1]))
	$0 = *($0)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($10) + $0))
	
.LABEL $label$1
	$7 = CALL $111($8, $7)
	$6 = CALL $111(($8 + [16]), $6)
	$5 = CALL $111(($8 + [32]), $5)
	$4 = CALL $111(($8 + [48]), $4)
	$3 = CALL $111(($8 + [64]), $3)
	$2 = CALL $111(($8 + [80]), $2)
	CALL void $10((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_32 $7), (int_32 $0))
	if ( (*($7) & [1]) ){ goto $label$12 }
	if ( (*($6) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($6 + [8]))
	$0 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$0 = [1]
	if ( (*($5) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($4) & $0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & $0) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($4 + [8]))
	$0 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($3) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($2) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($2) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($2 + [8]))
	$global$0 = ($8 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($8 + [96])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*($0) + [48])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [56])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = ($0 + [64])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($0 + [72])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [8830])
	$3 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($0, $3, [4])
	*(($1 = ($1 + [4]))) = (*($1) + [4])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [88])
	if ( (CALL $131(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [116])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)5371980716848447488, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [116]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [72])
	if ( (CALL $131((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [120]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)5371980716848447489, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [120])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [88])
	if ( (CALL $131(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [116])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)5371980716848447488, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [116]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [72])
	if ( (CALL $131((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [120]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)5371980716848447489, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [120])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($5 = $4) + [48]) = $2
	if ( ((int_32)*($1 + [108]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8961])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9007])
	
.LABEL $label$2
	*($5 + [32]) = *($1 + [88])
	*($5 + [40]) = *($1 + [72])
	*($1 + [88]) = [0]
	*($1 + [92]) = (*($1 + [92]) | *(*($3) + [36]))
	$6 = *($1)
	*($5 + [24]) = $6
	$3 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [78])
	$8 = (CASTING uint_64)(uint_32 $7)
	$9 = ($1 + [16])
	$10 = ($1 + [92])
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$7 = *($1 + [96])
	$7 = ( *(($1 + [100])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	$11 = ($1 + [96])
	$7 = ($0 + [36])
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $135($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [56]) = ($5 + [8])
	*($5 + [72]) = $9
	*($5 + [104]) = $10
	*($5 + [108]) = $11
	*($5 + [64]) = $1
	*($5 + [68]) = ($1 + [8])
	*($5 + [76]) = ($1 + [32])
	*($5 + [80]) = ($1 + [56])
	*($5 + [84]) = ($1 + [64])
	*($5 + [88]) = ($1 + [72])
	*($5 + [92]) = ($1 + [80])
	*($5 + [96]) = ($1 + [84])
	*($5 + [100]) = ($1 + [88])
	CALL $63(($5 + [64]), ($5 + [56]))
	CALL db_update_i64(*($1 + [112]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL $138($4)
	$6 = *($5 + [24])
	
.LABEL $label$7
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [68]) = $1
	*($5 + [64]) = $0
	*($5 + [76]) = $1
	*($5 + [72]) = ($5 + [32])
	*($5 + [80]) = ($5 + [24])
	*($5 + [84]) = ($5 + [48])
	*($5 + [56]) = ($5 + [64])
	CALL $97(($5 + [56]), $7, ($7 + [1]))
	$global$0 = ($5 + [112])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [88])
	if ( (CALL $131(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [116])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)5371980716848447488, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [116]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [72])
	if ( (CALL $131((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [120]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)5371980716848447489, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [120])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $123($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [88])
	if ( (CALL $131(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [116])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)5371980716848447488, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [116]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [72])
	if ( (CALL $131((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [120]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)5371980716848447489, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [120])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [88])
	if ( (CALL $131(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [116])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)5371980716848447488, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [116]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [72])
	if ( (CALL $131((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [120]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)5371980716848447489, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [120])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9117])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9117])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9117])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9117])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	CALL $73(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $138 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19592])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19400]
	$3 = (((int_32)$1 * (int_32)[12]) + [19400])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $123 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $116($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $122 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $115(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $130(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8751], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $115(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $115(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $126([16], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $131 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $132 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $124())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $134($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $135($1)
	
.LABEL $label$2
	*(CALL $124()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $135(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $138($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $115(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $130(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8725], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $115(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $115(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $137($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [8239])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $137 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11200]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11204])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11200]) = [1]
	$2 = ($2 << [16])
	*([0] + [11204]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11204])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11204]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11200]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11200]) = [1]
	$3 = ($3 << [16])
	*([0] + [11204]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11204])
	
.LABEL $label$10
	*([0] + [11204]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $119($0, $1, $2, CALL $132($2))
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [9273])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([104]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56 align=4]) = (int_64)0
	*($3 + [64 align=4]) = (int_64)0
	*($3 + [72 align=4]) = (int_64)0
	*($3 + [80]) = [0]
	*($3 + [88]) = $1
	CALL $84(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [92])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $85(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $39($3)
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [15] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $128($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $128($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $128($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $128($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19616]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $128($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $128($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $128($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $72($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $114($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $114($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $110($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [108]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10332])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10377])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [10427])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [104])))
	
.LABEL $label$13
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($6 + [24])))
	
.LABEL $label$14
	CALL _ZdlPv($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$15:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$16 }
	if ( ((*($9 + [96]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($9 + [104])))
	
.LABEL $label$17
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($9 + [24])))
	
.LABEL $label$18
	CALL _ZdlPv($9)
	
.LABEL $label$16
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$15 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [112]))
	$9 = *($1 + [116])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$20 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5371980716848447488, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL db_idx64_remove($9)
	
.LABEL $label$19
	$9 = *(($1 + [120]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$22 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5371980716848447489, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$21 }
	
.LABEL $label$22
	CALL db_idx64_remove($9)
	
.LABEL $label$21
	$global$0 = ($2 + [16])
}

void .FUNC $125 (int_32 $0)
{
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8807])
	
.LABEL $label$5
	$2 = CALL $135($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8830])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [8830])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	$8 = *($3 + [24])
	*(($5 + [8])) = $8
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	*($3 + [24]) = $8
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $8
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $90(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $138($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $111(($2 + [16]), ($1 + [8]))
	*(($5 = ($2 + [8]))) = *(($1 + [40]))
	*($2) = *($1 + [32])
	$6 = *($1 + [24])
	$7 = *($1 + [48])
	$8 = *($1 + [56])
	$9 = *($1 + [64])
	$10 = *($1 + [72])
	*((($2 + [32]) + [8])) = *($5)
	*($2 + [32]) = *($2)
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*($0) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$5 = CALL $111(($2 + [48]), $4)
	CALL void $0((int_32 $3), (int_64 $5), (int_32 $6), (int_64 ($2 + [32])), (int_32 $7), (int_64 $8), (int_64 $9), (int_64 $10), (int_32 $1))
	if ( (*($2 + [48]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8830])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	CALL $49(*($1), ($4 + [8]))
	$3 = ($4 + [24])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8830])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8830])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8830])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($4 + [40])) = *($2 + [8])
	*($5) = (*($5) + [8])
	*($2) = $4
	CALL $99($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [88]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8961])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9007])
	
.LABEL $label$2
	$6 = *($1 + [84])
	*($1 + [84]) = [0]
	*($5 + [24]) = $6
	$6 = *($1)
	*($5 + [32]) = [0]
	*($5 + [8]) = ($5 + [32])
	$7 = ($1 + [8])
	*($5 + [44]) = $7
	*($5 + [40]) = $1
	$8 = ($1 + [20])
	*($5 + [48]) = $8
	$9 = ($1 + [32])
	*($5 + [52]) = $9
	$10 = ($1 + [44])
	*($5 + [56]) = $10
	$11 = ($1 + [56])
	*($5 + [60]) = $11
	$12 = ($1 + [68])
	*($5 + [64]) = $12
	$13 = ($1 + [80])
	*($5 + [68]) = $13
	$14 = ($1 + [84])
	*($5 + [72]) = $14
	CALL $86(($5 + [40]), ($5 + [8]))
	$15 = *($5 + [32])
	if ( ($15 <= [513]) ){ goto $label$4 }
	$4 = CALL $135($15)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($15 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $15)
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $7
	*($5 + [48]) = $8
	*($5 + [52]) = $9
	*($5 + [56]) = $10
	*($5 + [60]) = $11
	*($5 + [64]) = $12
	*($5 + [68]) = $13
	*($5 + [72]) = $14
	*($5 + [40]) = $1
	CALL $87(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $15)
	if ( ($15 <= [513]) ){ goto $label$5 }
	CALL $138($4)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [40]) = *($14)
	if ( (CALL $131(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$4 = ($1 + [96])
	$1 = *($4)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3877296548261920768, ($5 + [32]), $6)
	*($4) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($5 + [40]))
	
.LABEL $label$7
	$global$0 = ($5 + [80])
}

void .FUNC $47 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [176])
	$global$0 = $4
	$5 = *($0)
	*($4 + [80]) = [9123]
	*($4 + [84]) = CALL $132([9123])
	*($4 + [8]) = *($4 + [80])
	$6 = *(CALL $2(($4 + [88]), ($4 + [8])))
	$7 = *($2 + [16])
	*($4 + [64]) = [8192]
	*($4 + [68]) = CALL $132([8192])
	*($4) = *($4 + [64])
	$8 = CALL $2(($4 + [72]), $4)
	*((($4 + [16]) + [24])) = *(($2 + [8]))
	*($4 + [24]) = $1
	*($4 + [16]) = *($0)
	*($4 + [32]) = *($2)
	$0 = CALL $111((($4 + [16]) + [32]), $3)
	*($4 + [96]) = $7
	*($4 + [104]) = *($8)
	*(($2 = CALL _Znwj([16]))) = $5
	*($2 + [8]) = $6
	*((($4 + [96]) + [36])) = [0]
	$3 = ($2 + [16])
	*((($4 + [96]) + [24])) = $3
	*(($4 + [116])) = $3
	*($4 + [112]) = $2
	*($4 + [124 align=4]) = (int_64)0
	$2 = *($0)
	$3 = ( *((($4 + [16]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($3 + [32])
	$1 = (CASTING uint_64)(uint_32 $3)
	$8 = ($4 + [124])
	$3 = (($4 + [16]) + [16])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$1 }
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $59($8, $2)
	$8 = *(($4 + [128]))
	$2 = *(($4 + [124]))
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	$2 = [0]
	
.LABEL $label$2
	*($4 + [140]) = $2
	*($4 + [136]) = $2
	*($4 + [144]) = $8
	*($4 + [152]) = ($4 + [136])
	*($4 + [164]) = ($4 + [24])
	*($4 + [168]) = $3
	*($4 + [172]) = $0
	*($4 + [160]) = ($4 + [16])
	CALL $93(($4 + [160]), ($4 + [152]))
	CALL $60(($4 + [96]))
	$2 = *($4 + [124])
	if ( ($2 == 0) ){ goto $label$4 }
	*(($4 + [128])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$2 = *($4 + [112])
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [116])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( ((*($0) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [56])))
	
.LABEL $label$6
	$global$0 = ($4 + [176])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($5 = $4) + [48]) = $2
	if ( ((int_32)*($1 + [108]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8961])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9007])
	
.LABEL $label$2
	*($5 + [32]) = *($1 + [88])
	*($5 + [40]) = *($1 + [72])
	*($1 + [92]) = *(*($3))
	$6 = *($1)
	*($5 + [24]) = $6
	*($1 + [88]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [259200])
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [9058])
	
.LABEL $label$3
	$7 = ($1 + [92])
	$8 = ($0 + [36])
	$3 = *($1 + [16])
	$9 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($9 + [78])
	$10 = (CASTING uint_64)(uint_32 $9)
	$9 = ($1 + [16])
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	$11 = *($1 + [96])
	$11 = ( *(($1 + [100])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$3 = ($11 + $3)
	$10 = (CASTING uint_64)(uint_32 $11)
	$11 = ($1 + [96])
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($3 <= [513]) ){ goto $label$7 }
	$4 = CALL $135($3)
	goto $label$6 
	
.LABEL $label$7
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$6
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [56]) = ($5 + [8])
	*($5 + [72]) = $9
	*($5 + [104]) = $7
	*($5 + [108]) = $11
	*($5 + [64]) = $1
	*($5 + [68]) = ($1 + [8])
	*($5 + [76]) = ($1 + [32])
	*($5 + [80]) = ($1 + [56])
	*($5 + [84]) = ($1 + [64])
	*($5 + [88]) = ($1 + [72])
	*($5 + [92]) = ($1 + [80])
	*($5 + [96]) = ($1 + [84])
	*($5 + [100]) = ($1 + [88])
	CALL $63(($5 + [64]), ($5 + [56]))
	CALL db_update_i64(*($1 + [112]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL $138($4)
	$6 = *($5 + [24])
	
.LABEL $label$8
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($5 + [68]) = $1
	*($5 + [64]) = $0
	*($5 + [76]) = $1
	*($5 + [72]) = ($5 + [32])
	*($5 + [80]) = ($5 + [24])
	*($5 + [84]) = ($5 + [48])
	*($5 + [56]) = ($5 + [64])
	CALL $91(($5 + [56]), $8, ($8 + [1]))
	$global$0 = ($5 + [112])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($5 = $4) + [48]) = $2
	if ( ((int_32)*($1 + [108]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8961])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9007])
	
.LABEL $label$2
	*($5 + [32]) = *($1 + [88])
	*($5 + [40]) = *($1 + [72])
	*($1 + [92]) = *(*($3))
	$6 = *($1)
	*($5 + [24]) = $6
	$3 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [78])
	$8 = (CASTING uint_64)(uint_32 $7)
	$9 = ($1 + [16])
	$10 = ($1 + [92])
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$7 = *($1 + [96])
	$7 = ( *(($1 + [100])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	$11 = ($1 + [96])
	$7 = ($0 + [36])
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $135($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [56]) = ($5 + [8])
	*($5 + [72]) = $9
	*($5 + [104]) = $10
	*($5 + [108]) = $11
	*($5 + [64]) = $1
	*($5 + [68]) = ($1 + [8])
	*($5 + [76]) = ($1 + [32])
	*($5 + [80]) = ($1 + [56])
	*($5 + [84]) = ($1 + [64])
	*($5 + [88]) = ($1 + [72])
	*($5 + [92]) = ($1 + [80])
	*($5 + [96]) = ($1 + [84])
	*($5 + [100]) = ($1 + [88])
	CALL $63(($5 + [64]), ($5 + [56]))
	CALL db_update_i64(*($1 + [112]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL $138($4)
	$6 = *($5 + [24])
	
.LABEL $label$7
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [68]) = $1
	*($5 + [64]) = $0
	*($5 + [76]) = $1
	*($5 + [72]) = ($5 + [32])
	*($5 + [80]) = ($5 + [24])
	*($5 + [84]) = ($5 + [48])
	*($5 + [56]) = ($5 + [64])
	CALL $92(($5 + [56]), $7, ($7 + [1]))
	$global$0 = ($5 + [112])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [9273])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([128])) + [8]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24]) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [84 align=4]) = (int_64)0
	*($3 + [96 align=4]) = (int_64)0
	*($3 + [104]) = [0]
	*($3 + [108]) = $1
	CALL $89(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [112])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $70(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [104])))
	
.LABEL $label$5
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

int_32 .FUNC $124 ()
{
	return [11192]
}

int_32 .FUNC $128 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [256])
	$global$0 = $3
	*(($4 = $3) + [200]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [136])) = (int_64)0
	*((($4 + [120]) + [24])) = (int_64)0
	*(($4 + [160])) = (int_64)0
	*((($4 + [120]) + [48])) = (int_64)0
	*((($4 + [120]) + [64])) = (int_64)0
	*((($4 + [120]) + [72])) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [108]) = $2
	*($4 + [104]) = $2
	*($4 + [112]) = ($2 + $5)
	*($4 + [240]) = ($4 + [104])
	*($4 + [24]) = ($4 + [120])
	CALL $34(($4 + [24]), ($4 + [240]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [112])
	*($4 + [8]) = *($4 + [104])
	$3 = *($3)
	*((($4 + [208]) + [8])) = $3
	*(($6 = (($4 + [224]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [224]) = $7
	*($4 + [208]) = $7
	$3 = *($6)
	*((($4 + [240]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [224])
	*($4 + [40]) = $1
	*($4 + [240]) = $1
	*((($4 + [24]) + [48])) = $0
	*(($4 + [80])) = (int_64)-1
	*(($3 = (($4 + [24]) + [64]))) = (int_64)0
	*((($4 + [24]) + [72])) = [0]
	*(($4 + [100])) = [0]
	*($4 + [52 align=4]) = (int_64)2251816993685505
	*($4 + [60]) = [196624]
	*($4 + [64]) = $0
	*($4 + [244]) = ($4 + [200])
	*($4 + [240]) = ($4 + [24])
	CALL $35(($4 + [240]), ($4 + [120]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $138($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [92])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$10
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($2)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$8 }
	$2 = *(($4 + [88]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( (*($4 + [188]) & [1]) ){ goto $label$22 }
	if ( (*($4 + [176]) & [1]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL _ZdlPv(*(($4 + [196])))
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv(*(($4 + [184])))
	$2 = [1]
	if ( ((*($4 + [164]) & [1]) == 0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$2 = [1]
	if ( (*($4 + [164]) & [1]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( (*($4 + [152]) & $2) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*(($4 + [172])))
	if ( ((*($4 + [152]) & $2) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($4 + [160])))
	$2 = [1]
	if ( ((*($4 + [140]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$2 = [1]
	if ( (*($4 + [140]) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( ((*($4 + [128]) & $2) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	CALL _ZdlPv(*(($4 + [148])))
	if ( ((*($4 + [128]) & $2) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [136])))
	
.LABEL $label$12
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = ($0 + [40])
	$5 = *(($0 + [68]))
	$4 = *(($0 + [64]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	if ( ((int_32)*($7 + [108]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [8756])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [48])), (int_64)5371980716848447488, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $29($3, $6)
	if ( ((int_32)*($7 + [108]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [8756])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9817])
	CALL eosio_assert(((*($0 + [36]) & *($7 + [92])) == 0), [9996])
	$8 = CALL current_time()
	CALL eosio_assert(((uint_32)*($7 + [88]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000))), [8555])
	$6 = *($7 + [92])
	if ( (((*($0 + [32]) & $6) & [65535]) == 0) ){ goto $label$16 }
	CALL eosio_assert(((*($0 + [34]) & $6) == 0), [10064])
	CALL eosio_assert(CALL $fimport$12(*($7 + [64])), [10109])
	$8 = *($7 + [56])
	*(($2 + [104])) = [0]
	*($2 + [96]) = (int_64)0
	$6 = CALL $132([10158])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$12 }
	$4 = ($7 + [32])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$15 }
	*($2 + [96]) = ($6 << [1])
	$5 = (($2 + [96]) | [1])
	if ( $6 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$6 = [1]
	if ( CALL has_auth(*($7 + [56])) ){ goto $label$17 }
	$6 = CALL has_auth(*($7 + [64]))
	
.LABEL $label$17
	CALL eosio_assert($6, [10023])
	goto $label$6 
	
.LABEL $label$15
	$9 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($2 + [96]) = ($9 | [1])
	*($2 + [104]) = $5
	*($2 + [100]) = $6
	
.LABEL $label$14
	CALL memcpy($5, [10158], $6)
	
.LABEL $label$13
	*(($5 + $6)) = [0]
	CALL $122(($2 + [80]), *($7))
	$6 = *($2 + [80])
	$5 = ($6 & [1])
	$6 = CALL $118(($2 + [96]), ( *($2 + [88]) ? (($2 + [80]) | [1]) : $5 ), ( *($2 + [84]) ? uint_32($6 >> [1]) : $5 ))
	$5 = ($6 + [8])
	*((($2 + [112]) + [8])) = *($5)
	*($2 + [112]) = *($6)
	*($6) = (int_64)0
	*($5) = [0]
	$6 = CALL $117(($2 + [112]), [10164])
	$5 = ($6 + [8])
	*((($2 + [128]) + [8])) = *($5)
	*($2 + [128]) = *($6)
	*($6) = (int_64)0
	*($5) = [0]
	CALL $47($0, $8, $4, ($2 + [128]))
	if ( (*($2 + [128]) & [1]) ){ goto $label$19 }
	if ( (*($2 + [112]) & [1]) ){ goto $label$18 }
	goto $label$11 
	
.LABEL $label$19
	CALL _ZdlPv(*($2 + [136]))
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$18
	CALL _ZdlPv(*($2 + [120]))
	$6 = [1]
	if ( ((*($2 + [80]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	CALL $110(($2 + [96]))
	
.LABEL $label$11
	$6 = [1]
	if ( (*($2 + [80]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( ((*($2 + [96]) & $6) == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	CALL _ZdlPv(*(($2 + [88])))
	if ( ((*($2 + [96]) & $6) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($2 + [104]))
	
.LABEL $label$7
	*($2 + [64]) = [10185]
	*($2 + [68]) = CALL $132([10185])
	*($2 + [8]) = *($2 + [64])
	$4 = CALL $2(($2 + [72]), ($2 + [8]))
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	$6 = CALL $132([10194])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$22 }
	*($2 + [48]) = ($6 << [1])
	$5 = (($2 + [48]) | [1])
	if ( $6 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$9 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($2 + [48]) = ($9 | [1])
	*($2 + [56]) = $5
	*($2 + [52]) = $6
	
.LABEL $label$21
	CALL memcpy($5, [10194], $6)
	
.LABEL $label$20
	*(($5 + $6)) = [0]
	CALL $32($0, *($4), ($2 + [48]), $7)
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($2 + [56]))
	
.LABEL $label$6
	*($2 + [32]) = [10238]
	*($2 + [36]) = CALL $132([10238])
	*($2) = *($2 + [32])
	$4 = CALL $2(($2 + [40]), $2)
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$6 = CALL $132([10247])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$26 }
	*($2 + [16]) = ($6 << [1])
	$5 = (($2 + [16]) | [1])
	if ( $6 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$9 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($2 + [16]) = ($9 | [1])
	*($2 + [24]) = $5
	*($2 + [20]) = $6
	
.LABEL $label$25
	CALL memcpy($5, [10247], $6)
	
.LABEL $label$24
	*(($5 + $6)) = [0]
	CALL $32($0, *($4), ($2 + [16]), $7)
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*($2 + [24]))
	
.LABEL $label$27
	if ( $7 ){ goto $label$28 }
	CALL eosio_assert([0], [10268])
	CALL eosio_assert([0], [10302])
	
.LABEL $label$28
	$6 = CALL db_next_i64(*($7 + [112]), ($2 + [112]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$29 }
	CALL $29($3, $6)
	
.LABEL $label$29
	CALL $48($3, $7)
	CALL $33($0, $1)
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$23
	CALL $110(($2 + [16]))
	
.LABEL $label$5
	CALL $110(($2 + [48]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [136])) = [0]
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [108]) = $2
	*($4 + [104]) = $2
	*($4 + [112]) = ($2 + $7)
	$3 = $2
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8830])
	$3 = *($4 + [108])
	
.LABEL $label$4
	CALL memcpy(($4 + [120]), $3, [8])
	*($4 + [108]) = ($3 + [8])
	$8 = (($4 + [120]) + [8])
	CALL $49(($4 + [104]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *((($4 + [104]) + [8]))
	*($4 + [8]) = *($4 + [104])
	$3 = *($3)
	*((($4 + [144]) + [8])) = $3
	*(($9 = (($4 + [160]) + [8]))) = $3
	$10 = *($4 + [8])
	*($4 + [160]) = $10
	*($4 + [144]) = $10
	$3 = *($9)
	*((($4 + [176]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [160])
	*($4 + [40]) = $1
	*($4 + [176]) = $1
	*(($4 + [72])) = $0
	*(($4 + [80])) = (int_64)-1
	*(($4 + [88])) = (int_64)0
	*(($4 + [96])) = [0]
	*(($4 + [100])) = [0]
	*($4 + [52 align=4]) = (int_64)2251816993685505
	*($4 + [60]) = [196624]
	*($4 + [64]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [120])
	$8 = CALL $111(($4 + [160]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$5 = CALL $111(($4 + [176]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [176]) & [1]) ){ goto $label$14 }
	if ( (*($4 + [160]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	
.LABEL $label$11
	$3 = *(($4 + [88]))
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $138($2)
	$3 = *(($4 + [88]))
	if ( ($3 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$5 = ($4 + [92])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$18 }
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$19
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$20
	CALL _ZdlPv($2)
	
.LABEL $label$18
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$17 }
	$2 = *(($4 + [88]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $3
	
.LABEL $label$15
	*($5) = $3
	CALL _ZdlPv($2)
	$2 = [1]
	if ( (*($4 + [128]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = [1]
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [136])))
	
.LABEL $label$6
	$global$0 = ($4 + [192])
	return $2
}

void .FUNC $7 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	$8 = ($global$0 - [96])
	$global$0 = $8
	*($8 + [88]) = $1
	CALL require_auth($1)
	$9 = *($2)
	if ( ($9 & [1]) ){ goto $label$2 }
	$9 = uint_32($9 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$9 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9149])
	$9 = *($3)
	if ( ($9 & [1]) ){ goto $label$4 }
	$9 = uint_32($9 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$9 = *($3 + [4])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9178])
	$9 = *($7)
	$10 = ($9 & [1])
	if ( $10 ){ goto $label$8 }
	if ( (uint_32($9 >> [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( *($7 + [4]) ){ goto $label$6 }
	$15 = [1]
	goto $label$5 
	
.LABEL $label$7
	$15 = [1]
	goto $label$5 
	
.LABEL $label$6
	if ( $10 ){ goto $label$10 }
	$11 = ($7 + [4])
	$9 = uint_32($9 >> [1])
	goto $label$9 
	
.LABEL $label$10
	$11 = ($7 + [4])
	$9 = *($7 + [4])
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$9 == (int_32)[2]), [9200])
	$12 = ($7 + [1])
	$9 = [0]
	$13 = ($7 + [8])
	$10 = *($7)
	$14 = ($10 & [1])
	if ( $14 ){ goto $label$11 }
	$15 = [18]
	goto $label$5 
	
.LABEL $label$11
	$15 = [0]
	
.LABEL $label$5
	
.LOOP $label$12:
	goto $label$40 
	
.LABEL $label$44
	CALL eosio_assert((((*(($10 + $9)) + [-65]) & [255]) <= [26]), [9235])
	$9 = ($9 + [1])
	$10 = *($7)
	$14 = ($10 & [1])
	if ( $14 ){ goto $label$25 }
	$15 = [18]
	goto $label$12 
	
.LABEL $label$43
	if ( ((uint_32)$9 >= (uint_32)uint_32($10 >> [1])) ){ goto $label$23 }
	$15 = [15]
	goto $label$12 
	
.LABEL $label$42
	$10 = $12
	if ( ($14 == 0) ){ goto $label$14 }
	$15 = [16]
	goto $label$12 
	
.LABEL $label$41
	$10 = *($13)
	goto $label$13 
	
.LABEL $label$40
	if ( ($9 <= *($11)) ){ goto $label$24 }
	$15 = [1]
	goto $label$12 
	
.LABEL $label$39
	*($8 + [60]) = $2
	*($8 + [64]) = $3
	*($8 + [68]) = $4
	*($8 + [72]) = $5
	*($8 + [76]) = $6
	*($8 + [80]) = $7
	*($8 + [56]) = ($8 + [88])
	*(($8 + [48])) = [0]
	*($8 + [32]) = (int_64)-1
	*($8 + [40]) = (int_64)0
	*($8 + [52]) = [0]
	$16 = *($0)
	*($8 + [16]) = $16
	*($8 + [24]) = $16
	$9 = CALL db_find_i64($16, $16, (int_64)3877296548261920768, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$22 }
	$15 = [2]
	goto $label$12 
	
.LABEL $label$38
	$9 = CALL $36(($8 + [16]), $9)
	if ( ((int_32)*($9 + [88]) == (int_32)($8 + [16])) ){ goto $label$21 }
	$15 = [3]
	goto $label$12 
	
.LABEL $label$37
	CALL eosio_assert([0], [8756])
	$15 = [4]
	goto $label$12 
	
.LABEL $label$36
	CALL $37(($8 + [16]), $9, *($8 + [88]), ($8 + [56]))
	$14 = *($8 + [40])
	if ( $14 ){ goto $label$19 }
	$15 = [13]
	goto $label$12 
	
.LABEL $label$35
	$global$0 = ($8 + [96])
	return 
	
.LABEL $label$34
	CALL $38(($8 + [8]), ($8 + [16]), *($8 + [88]), ($8 + [56]))
	$14 = *($8 + [40])
	if ( ($14 == 0) ){ goto $label$20 }
	$15 = [5]
	goto $label$12 
	
.LABEL $label$33
	$7 = ($8 + [44])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$18 }
	$15 = [6]
	goto $label$12 
	
.LABEL $label$32
	$15 = [7]
	goto $label$12 
	
.LABEL $label$31
	$9 = ($9 + [-24])
	$10 = *($9)
	*($9) = [0]
	if ( ($10 == 0) ){ goto $label$16 }
	$15 = [8]
	goto $label$12 
	
.LABEL $label$30
	CALL $39($10)
	CALL _ZdlPv($10)
	$15 = [9]
	goto $label$12 
	
.LABEL $label$29
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$17 }
	$15 = [10]
	goto $label$12 
	
.LABEL $label$28
	$9 = *(($8 + [40]))
	goto $label$15 
	
.LABEL $label$27
	$9 = $14
	$15 = [11]
	goto $label$12 
	
.LABEL $label$26
	*($7) = $14
	CALL _ZdlPv($9)
	$global$0 = ($8 + [96])
	return 
	
.LABEL $label$25
	$15 = [0]
	goto $label$12 
	
.LABEL $label$24
	$15 = [15]
	goto $label$12 
	
.LABEL $label$23
	$15 = [1]
	goto $label$12 
	
.LABEL $label$22
	$15 = [14]
	goto $label$12 
	
.LABEL $label$21
	$15 = [4]
	goto $label$12 
	
.LABEL $label$20
	$15 = [13]
	goto $label$12 
	
.LABEL $label$19
	$15 = [5]
	goto $label$12 
	
.LABEL $label$18
	$15 = [12]
	goto $label$12 
	
.LABEL $label$17
	$15 = [7]
	goto $label$12 
	
.LABEL $label$16
	$15 = [9]
	goto $label$12 
	
.LABEL $label$15
	$15 = [11]
	goto $label$12 
	
.LABEL $label$14
	$15 = [17]
	goto $label$12 
	
.LABEL $label$13
	$15 = [17]
	goto $label$12 
	$15
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [224])
	$global$0 = $3
	*(($4 = $3) + [168]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [120]) + [24])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [128]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [108]) = $2
	*($4 + [104]) = $2
	*($4 + [112]) = ($2 + $5)
	*($4 + [208]) = ($4 + [104])
	*($4 + [24]) = ($4 + [120])
	CALL $27(($4 + [24]), ($4 + [208]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [112])
	*($4 + [8]) = *($4 + [104])
	$3 = *($3)
	*((($4 + [176]) + [8])) = $3
	*(($6 = (($4 + [192]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [192]) = $7
	*($4 + [176]) = $7
	$3 = *($6)
	*((($4 + [208]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [192])
	*($4 + [40]) = $1
	*($4 + [208]) = $1
	*(($4 + [72])) = $0
	*(($4 + [80])) = (int_64)-1
	*(($3 = ($4 + [88]))) = (int_64)0
	*(($4 + [96])) = [0]
	*(($4 + [100])) = [0]
	*($4 + [52 align=4]) = (int_64)2251816993685505
	*($4 + [60]) = [196624]
	*($4 + [64]) = $0
	*($4 + [212]) = ($4 + [168])
	*($4 + [208]) = ($4 + [24])
	CALL $28(($4 + [208]), ($4 + [120]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $138($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [92])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$10
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($2)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$8 }
	$2 = *(($4 + [88]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [160])))
	
.LABEL $label$12
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $5 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = ($0 + [40])
	$6 = *(($0 + [68]))
	$5 = *(($0 + [64]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	if ( ((int_32)*($8 + [108]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [8756])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [48])), (int_64)5371980716848447488, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $29($4, $7)
	if ( ((int_32)*($8 + [108]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [8756])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9817])
	$9 = CALL current_time()
	CALL eosio_assert(((uint_32)*($8 + [88]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$9 / (uint_64)(int_64)1000000))), [8555])
	CALL eosio_assert((*($0 + [32]) & *($8 + [92])), [10480])
	CALL eosio_assert(((*($0 + [34]) & *($8 + [92])) == 0), [10507])
	CALL eosio_assert(CALL $fimport$12(*($8 + [64])), [10547])
	$9 = *($8 + [64])
	*($3 + [44]) = $2
	*($3 + [40]) = $0
	CALL $50($4, $8, $9, ($3 + [40]))
	*($3 + [24]) = [10588]
	*($3 + [28]) = CALL $132([10588])
	*($3) = *($3 + [24])
	$5 = CALL $2(($3 + [32]), $3)
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$7 = CALL $132([10598])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [8]) = ($7 << [1])
	$6 = (($3 + [8]) | [1])
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($4)
	*($3 + [8]) = ($4 | [1])
	*($3 + [16]) = $6
	*($3 + [12]) = $7
	
.LABEL $label$7
	CALL memcpy($6, [10598], $7)
	
.LABEL $label$6
	*(($6 + $7)) = [0]
	CALL $32($0, *($5), ($3 + [8]), $8)
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($3 + [16]))
	
.LABEL $label$9
	CALL require_recipient(*($8 + [56]))
	CALL $33($0, $1)
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$5
	CALL $110(($3 + [8]))
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [8201])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [8392])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8325])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8392])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$5 = ($global$0 - [144])
	$global$0 = $5
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$2 }
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$4 }
	$7 = ($4 + [4])
	$8 = uint_32($6 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$7 = ($4 + [4])
	$8 = *($4 + [4])
	
.LABEL $label$3
	$6 = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8444])
	$9 = ($4 + [1])
	$2 = (int_64)0
	$10 = ($4 + [8])
	$8 = *($4)
	$11 = ($8 & [1])
	if ( $11 ){ goto $label$5 }
	$12 = [69]
	goto $label$1 
	
.LABEL $label$5
	$12 = [0]
	goto $label$1 
	
.LABEL $label$2
	$12 = [46]
	
.LABEL $label$1
	
.LOOP $label$6:
	goto $label$126 
	
.LABEL $label$130
	$8 = *(($8 + $6))
	CALL eosio_assert(((($8 + [-48]) & [255]) <= [10]), [8478])
	$2 = ((int_64)((int_64)((int_64)$2 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	$6 = ($6 + [1])
	$8 = *($4)
	$11 = ($8 & [1])
	if ( $11 ){ goto $label$60 }
	$12 = [69]
	goto $label$6 
	
.LABEL $label$129
	if ( ((uint_32)$6 >= (uint_32)uint_32($8 >> [1])) ){ goto $label$58 }
	$12 = [66]
	goto $label$6 
	
.LABEL $label$128
	$8 = $9
	if ( ($11 == 0) ){ goto $label$8 }
	$12 = [67]
	goto $label$6 
	
.LABEL $label$127
	$8 = *($10)
	goto $label$7 
	
.LABEL $label$126
	if ( ($6 <= *($7)) ){ goto $label$59 }
	$12 = [1]
	goto $label$6 
	
.LABEL $label$125
	$7 = ($0 + [40])
	$8 = *(($0 + [68]))
	$4 = *(($0 + [64]))
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$57 }
	$12 = [2]
	goto $label$6 
	
.LABEL $label$124
	$12 = [3]
	goto $label$6 
	
.LABEL $label$123
	$6 = ($8 + [-24])
	$11 = *($6)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$54 }
	$12 = [4]
	goto $label$6 
	
.LABEL $label$122
	$8 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$55 }
	goto $label$56 
	
.LABEL $label$121
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$53 }
	$12 = [64]
	goto $label$6 
	
.LABEL $label$120
	if ( ((int_32)*($11 + [108]) == (int_32)$7) ){ goto $label$50 }
	$12 = [65]
	goto $label$6 
	
.LABEL $label$119
	CALL eosio_assert([0], [8756])
	goto $label$49 
	
.LABEL $label$118
	$11 = [0]
	$6 = CALL db_find_i64(*($7), *(($0 + [48])), (int_64)5371980716848447488, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$52 }
	$12 = [6]
	goto $label$6 
	
.LABEL $label$117
	$11 = CALL $29($7, $6)
	if ( ((int_32)*($11 + [108]) == (int_32)$7) ){ goto $label$51 }
	$12 = [7]
	goto $label$6 
	
.LABEL $label$116
	CALL eosio_assert([0], [8756])
	$12 = [8]
	goto $label$6 
	
.LABEL $label$115
	*(($5 + [120])) = [0]
	*($5 + [112]) = (int_64)0
	$6 = CALL $132([8533])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$48 }
	$12 = [9]
	goto $label$6 
	
.LABEL $label$114
	$4 = ((int_32)$11 != (int_32)[0])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$47 }
	$12 = [61]
	goto $label$6 
	
.LABEL $label$113
	*($5 + [112]) = ($6 << [1])
	$8 = (($5 + [112]) | [1])
	if ( $6 ){ goto $label$45 }
	goto $label$46 
	
.LABEL $label$112
	$9 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [112]) = ($9 | [1])
	*($5 + [120]) = $8
	*($5 + [116]) = $6
	$12 = [11]
	goto $label$6 
	
.LABEL $label$111
	CALL memcpy($8, [8533], $6)
	$12 = [12]
	goto $label$6 
	
.LABEL $label$110
	*(($8 + $6)) = [0]
	CALL $122(($5 + [96]), $2)
	$6 = *($5 + [96])
	$9 = ($6 & [1])
	$6 = CALL $118(($5 + [112]), ( *($5 + [104]) ? (($5 + [96]) | [1]) : $9 ), ( *($5 + [100]) ? uint_32($6 >> [1]) : $9 ))
	$9 = ($6 + [8])
	*(($8 = (($5 + [128]) + [8]))) = *($9)
	*($5 + [128]) = *($6)
	*($6) = (int_64)0
	*($9) = [0]
	CALL eosio_assert($4, ( *($8) ? (($5 + [128]) | [1]) : (*($5 + [128]) & [1]) ))
	if ( (*($5 + [128]) & [1]) ){ goto $label$44 }
	$12 = [60]
	goto $label$6 
	
.LABEL $label$109
	if ( (*($5 + [96]) & [1]) ){ goto $label$43 }
	$12 = [59]
	goto $label$6 
	
.LABEL $label$108
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$41 }
	$12 = [15]
	goto $label$6 
	
.LABEL $label$107
	CALL _ZdlPv(*($5 + [120]))
	$12 = [16]
	goto $label$6 
	
.LABEL $label$106
	$13 = CALL current_time()
	CALL eosio_assert(((uint_32)*($11 + [88]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$13 / (uint_64)(int_64)1000000))), [8555])
	CALL eosio_assert(((*($0 + [32]) & *($11 + [92])) == 0), [8575])
	$6 = *($0 + [38])
	CALL eosio_assert(((int_32)($6 & *($11 + [92])) == (int_32)$6), [8602])
	CALL eosio_assert(((int_64)*($11 + [56]) == (int_64)$1), [8647])
	$9 = ($11 + [32])
	$13 = *($0 + [8])
	$1 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)*(($11 + [40]))) ){ goto $label$38 }
	$12 = [17]
	goto $label$6 
	
.LABEL $label$105
	CALL eosio_assert([0], [8839])
	$12 = [18]
	goto $label$6 
	
.LABEL $label$104
	$10 = [0]
	if ( ((int_64)$1 != (int_64)*($9)) ){ goto $label$37 }
	$12 = [58]
	goto $label$6 
	
.LABEL $label$103
	$10 = ((int_64)$13 == (int_64)*(($11 + [48])))
	$12 = [19]
	goto $label$6 
	
.LABEL $label$102
	*(($5 + [88])) = [0]
	*($5 + [80]) = (int_64)0
	$6 = CALL $132([8681])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$36 }
	$12 = [20]
	goto $label$6 
	
.LABEL $label$101
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$35 }
	$12 = [56]
	goto $label$6 
	
.LABEL $label$100
	*($5 + [80]) = ($6 << [1])
	$4 = (($5 + [80]) | [1])
	if ( $6 ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$99
	CALL _ZdlPv(*($8))
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$42 }
	$12 = [14]
	goto $label$6 
	
.LABEL $label$98
	CALL _ZdlPv(*(($5 + [104])))
	if ( (*($5 + [112]) & [1]) ){ goto $label$39 }
	goto $label$40 
	
.LABEL $label$97
	$8 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($8)
	*($5 + [80]) = ($8 | [1])
	*($5 + [88]) = $4
	*($5 + [84]) = $6
	$12 = [22]
	goto $label$6 
	
.LABEL $label$96
	CALL memcpy($4, [8681], $6)
	$12 = [23]
	goto $label$6 
	
.LABEL $label$95
	$8 = [0]
	*(($4 + $6)) = [0]
	CALL $30(($5 + [64]), $9)
	$6 = *($5 + [64])
	$4 = ($6 & [1])
	$6 = CALL $118(($5 + [80]), ( *($5 + [72]) ? (($5 + [64]) | [1]) : $4 ), ( *($5 + [68]) ? uint_32($6 >> [1]) : $4 ))
	$4 = ($6 + [8])
	*((($5 + [96]) + [8])) = *($4)
	*($5 + [96]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	$6 = CALL $117(($5 + [96]), [8719])
	$4 = ($6 + [8])
	*((($5 + [112]) + [8])) = *($4)
	*($5 + [112]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	$1 = *(($11 + [48]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$32 }
	$12 = [24]
	goto $label$6 
	
.LABEL $label$94
	$4 = *([0] + [8924])
	$12 = [25]
	goto $label$6 
	
.LABEL $label$93
	*((($5 + [128]) + ($6 = $8))) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$30 }
	$12 = [26]
	goto $label$6 
	
.LABEL $label$92
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$31 }
	$12 = [27]
	goto $label$6 
	
.LABEL $label$91
	*(($5 + [56])) = [0]
	*($5 + [48]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$29 }
	$12 = [54]
	goto $label$6 
	
.LABEL $label$90
	*($5 + [48]) = ($8 << [1])
	$4 = (($5 + [48]) | [1])
	goto $label$28 
	
.LABEL $label$89
	*((($5 + [48]) + [8])) = [0]
	*($5 + [48]) = (int_64)0
	*($5 + [48]) = [0]
	$6 = (($5 + [48]) | [1])
	$8 = $6
	goto $label$26 
	
.LABEL $label$88
	$9 = (($8 + [16]) & [-16])
	$4 = CALL _Znwj($9)
	*($5 + [48]) = ($9 | [1])
	*($5 + [56]) = $4
	*($5 + [52]) = $8
	$12 = [29]
	goto $label$6 
	
.LABEL $label$87
	$9 = ($6 + [1])
	$6 = [0]
	$12 = [30]
	goto $label$6 
	
.LABEL $label$86
	*(($4 + $6)) = *((($5 + [128]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$27 }
	$12 = [31]
	goto $label$6 
	
.LABEL $label$85
	$8 = ($4 + $8)
	$6 = (($5 + [48]) | [1])
	$12 = [32]
	goto $label$6 
	
.LABEL $label$84
	*($8) = [0]
	$4 = *($5 + [48])
	$9 = ($4 & [1])
	$6 = CALL $118(($5 + [112]), ( *($5 + [56]) ? $6 : $9 ), ( *($5 + [52]) ? uint_32($4 >> [1]) : $9 ))
	$4 = ($6 + [8])
	*(($8 = (($5 + [128]) + [8]))) = *($4)
	*($5 + [128]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	CALL eosio_assert($10, ( *($8) ? (($5 + [128]) | [1]) : (*($5 + [128]) & [1]) ))
	if ( (*($5 + [128]) & [1]) ){ goto $label$25 }
	$12 = [53]
	goto $label$6 
	
.LABEL $label$83
	if ( (*($5 + [48]) & [1]) ){ goto $label$24 }
	$12 = [52]
	goto $label$6 
	
.LABEL $label$82
	$6 = [1]
	if ( (*($5 + [112]) & [1]) ){ goto $label$22 }
	$12 = [51]
	goto $label$6 
	
.LABEL $label$81
	if ( (*($5 + [96]) & $6) ){ goto $label$20 }
	$12 = [50]
	goto $label$6 
	
.LABEL $label$80
	$6 = [1]
	if ( (*($5 + [64]) & [1]) ){ goto $label$18 }
	$12 = [49]
	goto $label$6 
	
.LABEL $label$79
	if ( ((*($5 + [80]) & $6) == 0) ){ goto $label$16 }
	$12 = [38]
	goto $label$6 
	
.LABEL $label$78
	CALL _ZdlPv(*($5 + [88]))
	$12 = [39]
	goto $label$6 
	
.LABEL $label$77
	$1 = *($0)
	*($5 + [128]) = $0
	CALL $31($7, $11, $1, ($5 + [128]))
	*($5 + [32]) = [8729]
	*($5 + [36]) = CALL $132([8729])
	*($5 + [8]) = *($5 + [32])
	$4 = CALL $2(($5 + [40]), ($5 + [8]))
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$6 = CALL $132([8736])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$13 }
	$12 = [40]
	goto $label$6 
	
.LABEL $label$76
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$12 }
	$12 = [47]
	goto $label$6 
	
.LABEL $label$75
	*($5 + [16]) = ($6 << [1])
	$8 = (($5 + [16]) | [1])
	if ( $6 ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$74
	CALL _ZdlPv(*($8))
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$23 }
	$12 = [34]
	goto $label$6 
	
.LABEL $label$73
	CALL _ZdlPv(*(($5 + [56])))
	$6 = [1]
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$21 }
	$12 = [35]
	goto $label$6 
	
.LABEL $label$72
	CALL _ZdlPv(*($5 + [120]))
	if ( ((*($5 + [96]) & $6) == 0) ){ goto $label$19 }
	$12 = [36]
	goto $label$6 
	
.LABEL $label$71
	CALL _ZdlPv(*($5 + [104]))
	$6 = [1]
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$17 }
	$12 = [37]
	goto $label$6 
	
.LABEL $label$70
	CALL _ZdlPv(*(($5 + [72])))
	if ( (*($5 + [80]) & $6) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$69
	$9 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [16]) = ($9 | [1])
	*($5 + [24]) = $8
	*($5 + [20]) = $6
	$12 = [42]
	goto $label$6 
	
.LABEL $label$68
	CALL memcpy($8, [8736], $6)
	$12 = [43]
	goto $label$6 
	
.LABEL $label$67
	*(($8 + $6)) = [0]
	CALL $32($0, *($4), ($5 + [16]), $11)
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$9 }
	$12 = [44]
	goto $label$6 
	
.LABEL $label$66
	CALL _ZdlPv(*($5 + [24]))
	$12 = [45]
	goto $label$6 
	
.LABEL $label$65
	CALL require_recipient(*($11 + [64]))
	CALL $33($0, $2)
	$12 = [46]
	goto $label$6 
	
.LABEL $label$64
	$global$0 = ($5 + [144])
	return (unreachable)
	
.LABEL $label$63
	CALL $110(($5 + [112]))
	
.LABEL $label$62
	CALL $110(($5 + [80]))
	
.LABEL $label$61
	CALL $110(($5 + [16]))
	
.LABEL $label$60
	$12 = [0]
	goto $label$6 
	
.LABEL $label$59
	$12 = [66]
	goto $label$6 
	
.LABEL $label$58
	$12 = [1]
	goto $label$6 
	
.LABEL $label$57
	$12 = [5]
	goto $label$6 
	
.LABEL $label$56
	$12 = [5]
	goto $label$6 
	
.LABEL $label$55
	$12 = [3]
	goto $label$6 
	
.LABEL $label$54
	$12 = [63]
	goto $label$6 
	
.LABEL $label$53
	$12 = [5]
	goto $label$6 
	
.LABEL $label$52
	$12 = [8]
	goto $label$6 
	
.LABEL $label$51
	$12 = [8]
	goto $label$6 
	
.LABEL $label$50
	$12 = [8]
	goto $label$6 
	
.LABEL $label$49
	$12 = [8]
	goto $label$6 
	
.LABEL $label$48
	$12 = [62]
	goto $label$6 
	
.LABEL $label$47
	$12 = [10]
	goto $label$6 
	
.LABEL $label$46
	$12 = [12]
	goto $label$6 
	
.LABEL $label$45
	$12 = [11]
	goto $label$6 
	
.LABEL $label$44
	$12 = [13]
	goto $label$6 
	
.LABEL $label$43
	$12 = [14]
	goto $label$6 
	
.LABEL $label$42
	$12 = [59]
	goto $label$6 
	
.LABEL $label$41
	$12 = [16]
	goto $label$6 
	
.LABEL $label$40
	$12 = [16]
	goto $label$6 
	
.LABEL $label$39
	$12 = [15]
	goto $label$6 
	
.LABEL $label$38
	$12 = [18]
	goto $label$6 
	
.LABEL $label$37
	$12 = [19]
	goto $label$6 
	
.LABEL $label$36
	$12 = [57]
	goto $label$6 
	
.LABEL $label$35
	$12 = [21]
	goto $label$6 
	
.LABEL $label$34
	$12 = [23]
	goto $label$6 
	
.LABEL $label$33
	$12 = [22]
	goto $label$6 
	
.LABEL $label$32
	$12 = [55]
	goto $label$6 
	
.LABEL $label$31
	$12 = [25]
	goto $label$6 
	
.LABEL $label$30
	$12 = [27]
	goto $label$6 
	
.LABEL $label$29
	$12 = [28]
	goto $label$6 
	
.LABEL $label$28
	$12 = [29]
	goto $label$6 
	
.LABEL $label$27
	$12 = [30]
	goto $label$6 
	
.LABEL $label$26
	$12 = [32]
	goto $label$6 
	
.LABEL $label$25
	$12 = [33]
	goto $label$6 
	
.LABEL $label$24
	$12 = [34]
	goto $label$6 
	
.LABEL $label$23
	$12 = [52]
	goto $label$6 
	
.LABEL $label$22
	$12 = [35]
	goto $label$6 
	
.LABEL $label$21
	$12 = [51]
	goto $label$6 
	
.LABEL $label$20
	$12 = [36]
	goto $label$6 
	
.LABEL $label$19
	$12 = [50]
	goto $label$6 
	
.LABEL $label$18
	$12 = [37]
	goto $label$6 
	
.LABEL $label$17
	$12 = [49]
	goto $label$6 
	
.LABEL $label$16
	$12 = [39]
	goto $label$6 
	
.LABEL $label$15
	$12 = [39]
	goto $label$6 
	
.LABEL $label$14
	$12 = [38]
	goto $label$6 
	
.LABEL $label$13
	$12 = [48]
	goto $label$6 
	
.LABEL $label$12
	$12 = [41]
	goto $label$6 
	
.LABEL $label$11
	$12 = [43]
	goto $label$6 
	
.LABEL $label$10
	$12 = [42]
	goto $label$6 
	
.LABEL $label$9
	$12 = [45]
	goto $label$6 
	
.LABEL $label$8
	$12 = [68]
	goto $label$6 
	
.LABEL $label$7
	$12 = [68]
	goto $label$6 
	$12
	(unreachable)
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL memory()
	*($3 + [240]) = [8192]
	*($3 + [244]) = CALL $132([8192])
	*($3 + [120]) = *($3 + [240])
	CALL $2(($3 + [248]), ($3 + [120]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [1]
	*($3 + [8]) = *($3 + [232])
	CALL $4($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)3877222896539697151) ){ goto $label$14 }
	if ( ((int_64)$2 <= (int_64)5377979230734106623) ){ goto $label$13 }
	if ( ((int_64)$2 > (int_64)6301285350484475903) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)5377979230734106624) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)5378122223364603904) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [2]
	*($3 + [56]) = *($3 + [184])
	CALL $6($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$14
	if ( ((int_64)$2 > (int_64)-2041637551902912001) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-7297919256715329536) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-7119375207604682752) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-4417349958796722176) ){ goto $label$1 }
	*($3 + [228]) = [0]
	*($3 + [224]) = [3]
	*($3 + [16]) = *($3 + [224])
	CALL $8($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)3877222896539697152) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)3877446650310426624) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)4730614985703555072) ){ goto $label$1 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [4]
	*($3 + [48]) = *($3 + [192])
	CALL $10($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-2041637551902912000) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)3607571197753032704) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)3877200454296420352) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [5]
	*($3 + [112]) = *($3 + [128])
	CALL $12($1, $1, ($3 + [112]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)6301285350484475904) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)7289247920602742784) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [6]
	*($3 + [64]) = *($3 + [176])
	CALL $10($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [220]) = [0]
	*($3 + [216]) = [7]
	*($3 + [24]) = *($3 + [216])
	CALL $12($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [212]) = [0]
	*($3 + [208]) = [8]
	*($3 + [32]) = *($3 + [208])
	CALL $16($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [140]) = [0]
	*($3 + [136]) = [9]
	*($3 + [104]) = *($3 + [136])
	CALL $18($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [156]) = [0]
	*($3 + [152]) = [10]
	*($3 + [88]) = *($3 + [152])
	CALL $10($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [164]) = [0]
	*($3 + [160]) = [11]
	*($3 + [80]) = *($3 + [160])
	CALL $10($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [148]) = [0]
	*($3 + [144]) = [12]
	*($3 + [96]) = *($3 + [144])
	CALL $22($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [204]) = [0]
	*($3 + [200]) = [13]
	*($3 + [40]) = *($3 + [200])
	CALL $24($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [172]) = [0]
	*($3 + [168]) = [14]
	*($3 + [72]) = *($3 + [168])
	CALL $26($1, $1, ($3 + [72]))
	
.LABEL $label$1
	CALL $125([0])
	$global$0 = ($3 + [256])
}

void .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth($1)
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [44]) = [0]
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)3877296548261920768, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $36(($2 + [8]), $4)
	if ( ((int_32)*($0 + [88]) == (int_32)($2 + [8])) ){ goto $label$1 }
	CALL eosio_assert([0], [8756])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [9324])
	CALL eosio_assert(*($0 + [84]), [9348])
	CALL $40(($2 + [8]), $0, $1, $2)
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $39($4)
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($2 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_64 $5, int_64 $6, int_64 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$9 = ($global$0 - [352])
	$global$0 = $9
	*(($10 = $9) + [336]) = $3
	*($10 + [344]) = $1
	*($10 + [328]) = $5
	*($10 + [320]) = $6
	*($10 + [312]) = $7
	*($10 + [308]) = $8
	CALL require_auth($1)
	$11 = *($2)
	if ( ($11 & [1]) ){ goto $label$2 }
	$11 = uint_32($11 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$11 = *($2 + [4])
	
.LABEL $label$1
	$12 = [0]
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [9392])
	CALL eosio_assert(CALL $fimport$8($3), [9420])
	$13 = [0]
	if ( ((uint_64)((int_64)*($4) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$1 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$14 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$1 = $14
	$13 = [1]
	$15 = $11
	$11 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$1 = $14
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$13 = ((int_32)$11 < (int_32)[6])
	$15 = ($11 + [1])
	$11 = $15
	if ( $13 ){ goto $label$7 }
	$13 = [1]
	$11 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$13 = [0]
	
.LABEL $label$3
	CALL eosio_assert($13, [9454])
	CALL eosio_assert(((int_64)*($4) > (int_64)0), [9471])
	CALL eosio_assert(CALL $fimport$8($5), [9504])
	CALL eosio_assert(CALL $fimport$8($6), [9533])
	CALL eosio_assert(CALL $fimport$8($7), [9563])
	CALL eosio_assert((((int_64)$6 != (int_64)$7) & (((int_64)$5 != (int_64)$7) & ((int_64)$5 != (int_64)$6))), [9594])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9647])
	*((($10 + [264]) + [32])) = [0]
	*($10 + [272]) = $5
	*($10 + [280]) = (int_64)-1
	*($10 + [288]) = (int_64)0
	$1 = *($4 + [8])
	*($10 + [264]) = $3
	$11 = CALL db_find_i64($3, $5, (int_64)3607749779137757184, (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_32)$11) < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $43(($10 + [264]), $11)
	if ( ((int_32)*($11 + [16]) == (int_32)($10 + [264])) ){ goto $label$9 }
	CALL eosio_assert([0], [8756])
	
.LABEL $label$9
	$12 = ((int_64)*($11) > (int_64)0)
	
.LABEL $label$8
	CALL eosio_assert($12, [9697])
	$11 = [0]
	*((($10 + [224]) + [32])) = [0]
	*($10 + [240]) = (int_64)-1
	*($10 + [248]) = (int_64)0
	*($10 + [260]) = [0]
	$1 = *($0)
	*($10 + [224]) = $1
	*($10 + [232]) = $1
	$13 = CALL db_find_i64($1, $1, (int_64)3877296548261920768, *($10 + [312]))
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	$11 = CALL $36(($10 + [224]), $13)
	if ( ((int_32)*($11 + [88]) == (int_32)($10 + [224])) ){ goto $label$10 }
	CALL eosio_assert([0], [8756])
	goto $label$10 
	
.LABEL $label$11
	CALL eosio_assert([0], [9324])
	
.LABEL $label$10
	*($10 + [136]) = *($11)
	$15 = CALL $111((($10 + [136]) + [8]), ($11 + [8]))
	$8 = CALL $111((($10 + [136]) + [20]), ($11 + [20]))
	$12 = CALL $111((($10 + [136]) + [32]), ($11 + [32]))
	$16 = CALL $111((($10 + [136]) + [44]), ($11 + [44]))
	$17 = CALL $111((($10 + [136]) + [56]), ($11 + [56]))
	$18 = CALL $111((($10 + [136]) + [68]), ($11 + [68]))
	*($10 + [220]) = *(($11 + [84]))
	*($10 + [216]) = *($11 + [80])
	CALL eosio_assert(*($10 + [220]), [9740])
	*($10 + [128]) = (int_64)0
	$19 = $9
	$11 = CALL transaction_size()
	$13 = ($9 - (($11 + [15]) & [-16]))
	$global$0 = $13
	$9 = CALL read_transaction($13, $11)
	CALL eosio_assert(((int_32)$11 == (int_32)$9), [9772])
	CALL sha256($13, $9, ($10 + [96]))
	*($10 + [128]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($10 + [128]) << (int_64)8) | (int_64)*($10 + [96])) << (int_64)8) | (int_64)*($10 + [97])) << (int_64)8) | (int_64)*($10 + [98])) << (int_64)8) | (int_64)*($10 + [99]))
	$1 = *($10 + [344])
	*($10 + [56]) = $2
	*($10 + [64]) = $4
	*($10 + [84]) = $0
	*($10 + [52]) = ($10 + [344])
	*($10 + [48]) = ($10 + [128])
	*($10 + [60]) = ($10 + [336])
	*($10 + [68]) = ($10 + [328])
	*($10 + [72]) = ($10 + [320])
	*($10 + [76]) = ($10 + [312])
	*($10 + [80]) = ($10 + [308])
	CALL $44(($10 + [88]), ($0 + [40]), $1, ($10 + [48]))
	*($10 + [32]) = [9796]
	*($10 + [36]) = CALL $132([9796])
	*($10 + [8]) = *($10 + [32])
	$4 = CALL $2(($10 + [40]), ($10 + [8]))
	*((($10 + [16]) + [8])) = [0]
	*($10 + [16]) = (int_64)0
	$11 = CALL $132([9800])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$29 }
	*($10 + [16]) = ($11 << [1])
	$13 = (($10 + [16]) | [1])
	if ( $11 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$9 = (($11 + [16]) & [-16])
	$13 = CALL _Znwj($9)
	*($10 + [16]) = ($9 | [1])
	*($10 + [24]) = $13
	*($10 + [20]) = $11
	
.LABEL $label$28
	CALL memcpy($13, [9800], $11)
	
.LABEL $label$27
	*(($13 + $11)) = [0]
	CALL $32($0, *($4), ($10 + [16]), *($10 + [92]))
	if ( ((*($10 + [16]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*($10 + [24]))
	
.LABEL $label$30
	CALL require_recipient(*($10 + [328]))
	CALL require_recipient(*($10 + [320]))
	CALL require_recipient(*($10 + [312]))
	CALL $33($0, *($10 + [128]))
	$19
	if ( (*($18) & [1]) ){ goto $label$32 }
	$11 = [1]
	if ( (*($17) & [1]) ){ goto $label$31 }
	goto $label$25 
	
.LABEL $label$32
	CALL _ZdlPv(*(($10 + [212])))
	$11 = [1]
	if ( ((*($17) & [1]) == 0) ){ goto $label$25 }
	
.LABEL $label$31
	CALL _ZdlPv(*(($10 + [200])))
	if ( ((*($16) & $11) == 0) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	CALL $110(($10 + [16]))
	
.LABEL $label$25
	if ( (*($16) & $11) ){ goto $label$23 }
	
.LABEL $label$24
	$11 = [1]
	if ( (*($12) & [1]) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL _ZdlPv(*(($10 + [188])))
	$11 = [1]
	if ( ((*($12) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($10 + [176])))
	if ( ((*($8) & $11) == 0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( (*($8) & $11) ){ goto $label$19 }
	
.LABEL $label$20
	if ( (*($15) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*(($10 + [164])))
	if ( ((*($15) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($10 + [152])))
	$15 = *($10 + [248])
	if ( $15 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$15 = *($10 + [248])
	if ( ($15 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$0 = ($10 + [252])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$15) ){ goto $label$14 }
	
.LOOP $label$33:
	$11 = ($11 + [-24])
	$13 = *($11)
	*($11) = [0]
	if ( ($13 == 0) ){ goto $label$34 }
	CALL $39($13)
	CALL _ZdlPv($13)
	
.LABEL $label$34
	if ( ((int_32)$15 != (int_32)$11) ){ goto $label$33 }
	$11 = *(($10 + [248]))
	*($0) = $15
	CALL _ZdlPv($11)
	$15 = *($10 + [288])
	if ( $15 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$15 = *($10 + [288])
	if ( ($15 == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	*($0) = $15
	CALL _ZdlPv($15)
	$15 = *($10 + [288])
	if ( ($15 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$0 = ($10 + [292])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$15) ){ goto $label$36 }
	
.LOOP $label$37:
	$11 = ($11 + [-24])
	$13 = *($11)
	*($11) = [0]
	if ( ($13 == 0) ){ goto $label$38 }
	CALL _ZdlPv($13)
	
.LABEL $label$38
	if ( ((int_32)$15 != (int_32)$11) ){ goto $label$37 }
	$11 = *(($10 + [288]))
	goto $label$35 
	
.LABEL $label$36
	$11 = $15
	
.LABEL $label$35
	*($0) = $15
	CALL _ZdlPv($11)
	$global$0 = ($10 + [352])
	return 
	
.LABEL $label$12
	$global$0 = ($10 + [352])
	(unreachable)
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [256])
	$global$0 = $3
	*(($4 = $3) + [200]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [136])) = [0]
	*(($4 + [160])) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [192]) = [0]
	*($4 + [108]) = $2
	*($4 + [104]) = $2
	*($4 + [112]) = ($2 + $5)
	*($4 + [240]) = ($4 + [104])
	*($4 + [24]) = ($4 + [120])
	CALL $41(($4 + [24]), ($4 + [240]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [112])
	*($4 + [8]) = *($4 + [104])
	$3 = *($3)
	*((($4 + [208]) + [8])) = $3
	*(($6 = (($4 + [224]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [224]) = $7
	*($4 + [208]) = $7
	$3 = *($6)
	*((($4 + [240]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [224])
	*($4 + [40]) = $1
	*($4 + [240]) = $1
	*(($4 + [72])) = $0
	*(($4 + [80])) = (int_64)-1
	*(($3 = ($4 + [88]))) = (int_64)0
	*(($4 + [96])) = [0]
	*(($4 + [100])) = [0]
	*($4 + [52 align=4]) = (int_64)2251816993685505
	*($4 + [60]) = [196624]
	*($4 + [64]) = $0
	*($4 + [244]) = ($4 + [200])
	*($4 + [240]) = ($4 + [24])
	CALL $42(($4 + [240]), ($4 + [120]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $138($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [92])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$10
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($2)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$8 }
	$2 = *(($4 + [88]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [136])))
	
.LABEL $label$12
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_32 $5, int_64 $6, int_32 $7, int_64 $8, int_64 $9, int_64 $10, int_32 $11, int_32 $12)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [96])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [88]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8830])
	
.LABEL $label$5
	CALL memcpy(($4 + [88]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = $3
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [36 align=4]) = (int_64)2251816993685505
	*($4 + [44]) = [196624]
	*($4 + [48]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	if ( ($5 & [1]) ){ goto $label$10 }
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL void $3((int_32 $0), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $138($2)
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$3 = ($4 + [76])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$14 }
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$15
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$16
	CALL _ZdlPv($2)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$13 }
	$2 = *(($4 + [72]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [96])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [96])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [88]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8830])
	
.LABEL $label$5
	CALL memcpy(($4 + [88]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = $3
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [36 align=4]) = (int_64)2251816993685505
	*($4 + [44]) = [196624]
	*($4 + [48]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	if ( ($5 & [1]) ){ goto $label$10 }
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL void $3((int_32 $0), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $138($2)
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$3 = ($4 + [76])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$14 }
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$15
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$16
	CALL _ZdlPv($2)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$13 }
	$2 = *(($4 + [72]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [96])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = ($0 + [40])
	$5 = *(($0 + [68]))
	$4 = *(($0 + [64]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	if ( ((int_32)*($7 + [108]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [8756])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [48])), (int_64)5371980716848447488, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $29($3, $6)
	if ( ((int_32)*($7 + [108]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [8756])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9817])
	CALL eosio_assert((*($0 + [32]) & *($7 + [92])), [10480])
	CALL eosio_assert(CALL $fimport$12(*($7 + [56])), [10626])
	$8 = *($7 + [64])
	*(($2 + [72])) = [0]
	*($2 + [64]) = (int_64)0
	$6 = CALL $132([10158])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$10 }
	$4 = ($7 + [32])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$13 }
	*($2 + [64]) = ($6 << [1])
	$5 = (($2 + [64]) | [1])
	if ( $6 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$9 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($2 + [64]) = ($9 | [1])
	*($2 + [72]) = $5
	*($2 + [68]) = $6
	
.LABEL $label$12
	CALL memcpy($5, [10158], $6)
	
.LABEL $label$11
	*(($5 + $6)) = [0]
	CALL $122(($2 + [48]), *($7))
	$6 = *($2 + [48])
	$5 = ($6 & [1])
	$6 = CALL $118(($2 + [64]), ( *($2 + [56]) ? (($2 + [48]) | [1]) : $5 ), ( *($2 + [52]) ? uint_32($6 >> [1]) : $5 ))
	$5 = ($6 + [8])
	*((($2 + [80]) + [8])) = *($5)
	*($2 + [80]) = *($6)
	*($6) = (int_64)0
	*($5) = [0]
	$6 = CALL $117(($2 + [80]), [10665])
	$5 = ($6 + [8])
	*((($2 + [96]) + [8])) = *($5)
	*($2 + [96]) = *($6)
	*($6) = (int_64)0
	*($5) = [0]
	CALL $47($0, $8, $4, ($2 + [96]))
	if ( (*($2 + [96]) & [1]) ){ goto $label$15 }
	if ( (*($2 + [80]) & [1]) ){ goto $label$14 }
	goto $label$9 
	
.LABEL $label$15
	CALL _ZdlPv(*($2 + [104]))
	if ( ((*($2 + [80]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$14
	CALL _ZdlPv(*($2 + [88]))
	$6 = [1]
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	CALL $110(($2 + [64]))
	
.LABEL $label$9
	$6 = [1]
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((*($2 + [64]) & $6) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL _ZdlPv(*(($2 + [56])))
	if ( ((*($2 + [64]) & $6) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($2 + [72]))
	
.LABEL $label$5
	*($2 + [32]) = [10695]
	*($2 + [36]) = CALL $132([10695])
	*($2 + [8]) = *($2 + [32])
	$4 = CALL $2(($2 + [40]), ($2 + [8]))
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$6 = CALL $132([10702])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$19 }
	*($2 + [16]) = ($6 << [1])
	$5 = (($2 + [16]) | [1])
	if ( $6 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$9 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($2 + [16]) = ($9 | [1])
	*($2 + [24]) = $5
	*($2 + [20]) = $6
	
.LABEL $label$18
	CALL memcpy($5, [10702], $6)
	
.LABEL $label$17
	*(($5 + $6)) = [0]
	CALL $32($0, *($4), ($2 + [16]), $7)
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($2 + [24]))
	
.LABEL $label$20
	if ( ((*($0 + [36]) & *(($7 + [92]))) == 0) ){ goto $label$21 }
	CALL require_recipient(*($7 + [72]))
	
.LABEL $label$21
	if ( $7 ){ goto $label$22 }
	CALL eosio_assert([0], [10268])
	CALL eosio_assert([0], [10302])
	
.LABEL $label$22
	$6 = CALL db_next_i64(*($7 + [112]), ($2 + [80]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$23 }
	CALL $29($3, $6)
	
.LABEL $label$23
	CALL $48($3, $7)
	CALL $33($0, $1)
	$global$0 = ($2 + [112])
	return (unreachable)
	
.LABEL $label$16
	CALL $110(($2 + [16]))
	(unreachable)
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $79(CALL $78($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9117])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9117])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [288])
	$global$0 = $3
	*(($4 = $3) + [232]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [128])) = [0]
	*((($4 + [112]) + [48])) = [0]
	*((($4 + [112]) + [72])) = (int_64)0
	*(($4 + [224])) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [200]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $5)
	*($4 + [272]) = ($4 + [96])
	*($4 + [16]) = ($4 + [112])
	CALL $61(($4 + [16]), ($4 + [272]))
	*(($3 = ($4 + [8]))) = *($4 + [104])
	*($4) = *($4 + [96])
	$3 = *($3)
	*((($4 + [240]) + [8])) = $3
	*(($6 = (($4 + [256]) + [8]))) = $3
	$7 = *($4)
	*($4 + [256]) = $7
	*($4 + [240]) = $7
	$3 = *($6)
	*((($4 + [272]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [256])
	*($4 + [32]) = $1
	*($4 + [272]) = $1
	*((($4 + [16]) + [48])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($3 = ($4 + [80]))) = (int_64)0
	*((($4 + [16]) + [72])) = [0]
	*(($4 + [92])) = [0]
	*($4 + [44 align=4]) = (int_64)2251816993685505
	*($4 + [52]) = [196624]
	*($4 + [56]) = $0
	*($4 + [276]) = ($4 + [232])
	*($4 + [272]) = ($4 + [16])
	CALL $62(($4 + [272]), ($4 + [112]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $138($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [84])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$10
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($2)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$8 }
	$2 = *(($4 + [80]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( (*($4 + [220]) & [1]) ){ goto $label$16 }
	if ( (*($4 + [152]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [228])))
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($4 + [160])))
	$2 = [1]
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$2 = [1]
	if ( (*($4 + [120]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	$global$0 = ($4 + [288])
	return $2
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [128])))
	$global$0 = ($4 + [288])
	return $2
}

void .FUNC $19 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = ($0 + [40])
	$5 = *(($0 + [68]))
	$4 = *(($0 + [64]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	if ( ((int_32)*($7 + [108]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [8756])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [48])), (int_64)5371980716848447488, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $29($3, $6)
	if ( ((int_32)*($7 + [108]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [8756])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9817])
	CALL eosio_assert((*($0 + [36]) & *($7 + [92])), [10797])
	CALL require_auth(*($7 + [72]))
	*((($2 + [104]) + [32])) = [0]
	*($2 + [120]) = (int_64)-1
	*($2 + [128]) = (int_64)0
	*($2 + [140]) = [0]
	$8 = *($0)
	*($2 + [104]) = $8
	*($2 + [112]) = $8
	$6 = [0]
	$5 = CALL db_find_i64($8, $8, (int_64)3877296548261920768, *($7 + [72]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $36(($2 + [104]), $5)
	if ( ((int_32)*($6 + [88]) == (int_32)($2 + [104])) ){ goto $label$5 }
	CALL eosio_assert([0], [8756])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9324])
	CALL $53(($2 + [104]), $6, *($0), ($2 + [72]))
	$8 = *($7 + [64])
	*(($2 + [64])) = [0]
	*($2 + [56]) = (int_64)0
	$6 = CALL $132([10158])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$11 }
	$4 = ($7 + [32])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$14 }
	*($2 + [56]) = ($6 << [1])
	$5 = (($2 + [56]) | [1])
	if ( $6 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$9 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($2 + [56]) = ($9 | [1])
	*($2 + [64]) = $5
	*($2 + [60]) = $6
	
.LABEL $label$13
	CALL memcpy($5, [10158], $6)
	
.LABEL $label$12
	*(($5 + $6)) = [0]
	CALL $122(($2 + [40]), *($7))
	$6 = *($2 + [40])
	$5 = ($6 & [1])
	$6 = CALL $118(($2 + [56]), ( *($2 + [48]) ? (($2 + [40]) | [1]) : $5 ), ( *($2 + [44]) ? uint_32($6 >> [1]) : $5 ))
	$5 = ($6 + [8])
	*((($2 + [72]) + [8])) = *($5)
	*($2 + [72]) = *($6)
	*($6) = (int_64)0
	*($5) = [0]
	$6 = CALL $117(($2 + [72]), [10919])
	$5 = ($6 + [8])
	*((($2 + [88]) + [8])) = *($5)
	*($2 + [88]) = *($6)
	*($6) = (int_64)0
	*($5) = [0]
	CALL $47($0, $8, $4, ($2 + [88]))
	if ( (*($2 + [88]) & [1]) ){ goto $label$16 }
	if ( (*($2 + [72]) & [1]) ){ goto $label$15 }
	goto $label$10 
	
.LABEL $label$16
	CALL _ZdlPv(*($2 + [96]))
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$15
	CALL _ZdlPv(*($2 + [80]))
	$6 = [1]
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	CALL $110(($2 + [56]))
	
.LABEL $label$10
	$6 = [1]
	if ( (*($2 + [40]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((*($2 + [56]) & $6) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	CALL _ZdlPv(*(($2 + [48])))
	if ( ((*($2 + [56]) & $6) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($2 + [64]))
	
.LABEL $label$6
	*($2 + [24]) = [10945]
	*($2 + [28]) = CALL $132([10945])
	*($2) = *($2 + [24])
	$4 = CALL $2(($2 + [32]), $2)
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$6 = CALL $132([10956])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$20 }
	*($2 + [8]) = ($6 << [1])
	$5 = (($2 + [8]) | [1])
	if ( $6 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$9 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($2 + [8]) = ($9 | [1])
	*($2 + [16]) = $5
	*($2 + [12]) = $6
	
.LABEL $label$19
	CALL memcpy($5, [10956], $6)
	
.LABEL $label$18
	*(($5 + $6)) = [0]
	CALL $32($0, *($4), ($2 + [8]), $7)
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($2 + [16]))
	
.LABEL $label$21
	CALL require_recipient(*($7 + [56]))
	if ( $7 ){ goto $label$22 }
	CALL eosio_assert([0], [10268])
	CALL eosio_assert([0], [10302])
	
.LABEL $label$22
	$6 = CALL db_next_i64(*($7 + [112]), ($2 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$23 }
	CALL $29($3, $6)
	
.LABEL $label$23
	CALL $48($3, $7)
	CALL $33($0, $1)
	$5 = *($2 + [128])
	if ( ($5 == 0) ){ goto $label$24 }
	$4 = ($2 + [132])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$26 }
	
.LOOP $label$27:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$28 }
	CALL $39($7)
	CALL _ZdlPv($7)
	
.LABEL $label$28
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$27 }
	$6 = *(($2 + [128]))
	goto $label$25 
	
.LABEL $label$26
	$6 = $5
	
.LABEL $label$25
	*($4) = $5
	CALL _ZdlPv($6)
	
.LABEL $label$24
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$17
	CALL $110(($2 + [8]))
	(unreachable)
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [88]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10332])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [10377])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [10427])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $39($6)
	CALL _ZdlPv($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $39($9)
	CALL _ZdlPv($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [92]))
	$9 = *(($1 + [96]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$16 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3877296548261920768, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($9)
	
.LABEL $label$15
	$global$0 = ($2 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $123($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($5 = $4) + [48]) = $2
	if ( ((int_32)*($1 + [108]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8961])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9007])
	
.LABEL $label$2
	*($5 + [32]) = *($1 + [88])
	*($5 + [40]) = *($1 + [72])
	$6 = *($1)
	*($5 + [24]) = $6
	$7 = *($3)
	*($1 + [88]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [259200])
	*($1 + [92]) = (*($1 + [92]) | *($7 + [34]))
	$8 = ($1 + [96])
	CALL $112($8, *($3 + [4]))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [9058])
	
.LABEL $label$3
	$9 = ($1 + [92])
	$7 = ($0 + [36])
	$3 = *($1 + [16])
	$10 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($10 + [78])
	$11 = (CASTING uint_64)(uint_32 $10)
	$10 = ($1 + [16])
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	$12 = *(($1 + [96]))
	$12 = ( *(($1 + [100])) ? uint_32($12 >> [1]) : ($12 & [1]) )
	$3 = ($12 + $3)
	$11 = (CASTING uint_64)(uint_32 $12)
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	if ( ($3 <= [513]) ){ goto $label$7 }
	$4 = CALL $135($3)
	goto $label$6 
	
.LABEL $label$7
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$6
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [56]) = ($5 + [8])
	*($5 + [72]) = $10
	*($5 + [104]) = $9
	*($5 + [108]) = $8
	*($5 + [64]) = $1
	*($5 + [68]) = ($1 + [8])
	*($5 + [76]) = ($1 + [32])
	*($5 + [80]) = ($1 + [56])
	*($5 + [84]) = ($1 + [64])
	*($5 + [88]) = ($1 + [72])
	*($5 + [92]) = ($1 + [80])
	*($5 + [96]) = ($1 + [84])
	*($5 + [100]) = ($1 + [88])
	CALL $63(($5 + [64]), ($5 + [56]))
	CALL db_update_i64(*($1 + [112]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL $138($4)
	$6 = *($5 + [24])
	
.LABEL $label$8
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($5 + [68]) = $1
	*($5 + [64]) = $0
	*($5 + [76]) = $1
	*($5 + [72]) = ($5 + [32])
	*($5 + [80]) = ($5 + [24])
	*($5 + [84]) = ($5 + [48])
	*($5 + [56]) = ($5 + [64])
	CALL $94(($5 + [56]), $7, ($7 + [1]))
	$global$0 = ($5 + [112])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($5 = $4) + [48]) = $2
	if ( ((int_32)*($1 + [108]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8961])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9007])
	
.LABEL $label$2
	*($5 + [32]) = *($1 + [88])
	*($5 + [40]) = *($1 + [72])
	$3 = (*($1 + [80]) + *(*($3)))
	*($1 + [80]) = $3
	*($1 + [88]) = (*($1 + [84]) + ((int_32)$3 * (int_32)[86400]))
	$6 = *($1)
	*($5 + [24]) = $6
	$3 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [78])
	$8 = (CASTING uint_64)(uint_32 $7)
	$9 = ($1 + [16])
	$10 = ($1 + [80])
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$7 = *($1 + [96])
	$7 = ( *(($1 + [100])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	$11 = ($1 + [96])
	$7 = ($0 + [36])
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $135($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [56]) = ($5 + [8])
	*($5 + [72]) = $9
	*($5 + [92]) = $10
	*($5 + [108]) = $11
	*($5 + [64]) = $1
	*($5 + [68]) = ($1 + [8])
	*($5 + [76]) = ($1 + [32])
	*($5 + [80]) = ($1 + [56])
	*($5 + [84]) = ($1 + [64])
	*($5 + [88]) = ($1 + [72])
	*($5 + [96]) = ($1 + [84])
	*($5 + [100]) = ($1 + [88])
	*($5 + [104]) = ($1 + [92])
	CALL $63(($5 + [64]), ($5 + [56]))
	CALL db_update_i64(*($1 + [112]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL $138($4)
	$6 = *($5 + [24])
	
.LABEL $label$7
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [68]) = $1
	*($5 + [64]) = $0
	*($5 + [76]) = $1
	*($5 + [72]) = ($5 + [32])
	*($5 + [80]) = ($5 + [24])
	*($5 + [84]) = ($5 + [48])
	*($5 + [56]) = ($5 + [64])
	CALL $95(($5 + [56]), $7, ($7 + [1]))
	$global$0 = ($5 + [112])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [88]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8961])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9007])
	
.LABEL $label$2
	*($1 + [80]) = (*($1 + [80]) + [1])
	*($5 + [24]) = *($1 + [84])
	$6 = *($1)
	*($5 + [32]) = [0]
	*($5 + [8]) = ($5 + [32])
	$7 = ($1 + [8])
	*($5 + [44]) = $7
	*($5 + [40]) = $1
	$8 = ($1 + [20])
	*($5 + [48]) = $8
	$9 = ($1 + [32])
	*($5 + [52]) = $9
	$10 = ($1 + [44])
	*($5 + [56]) = $10
	$11 = ($1 + [56])
	*($5 + [60]) = $11
	$12 = ($1 + [68])
	*($5 + [64]) = $12
	$13 = ($1 + [80])
	*($5 + [68]) = $13
	$14 = ($1 + [84])
	*($5 + [72]) = $14
	CALL $86(($5 + [40]), ($5 + [8]))
	$15 = *($5 + [32])
	if ( ($15 <= [513]) ){ goto $label$4 }
	$4 = CALL $135($15)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($15 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $15)
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $7
	*($5 + [48]) = $8
	*($5 + [52]) = $9
	*($5 + [56]) = $10
	*($5 + [60]) = $11
	*($5 + [64]) = $12
	*($5 + [68]) = $13
	*($5 + [72]) = $14
	*($5 + [40]) = $1
	CALL $87(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $15)
	if ( ($15 <= [513]) ){ goto $label$5 }
	CALL $138($4)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [40]) = *($14)
	if ( (CALL $131(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$4 = ($1 + [96])
	$1 = *($4)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3877296548261920768, ($5 + [32]), $6)
	*($4) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($5 + [40]))
	
.LABEL $label$7
	$global$0 = ($5 + [80])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [88]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8961])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9007])
	
.LABEL $label$2
	*($1 + [80]) = (*($1 + [80]) + [1])
	*($5 + [24]) = *($1 + [84])
	$6 = *($1)
	*($5 + [32]) = [0]
	*($5 + [8]) = ($5 + [32])
	$7 = ($1 + [8])
	*($5 + [44]) = $7
	*($5 + [40]) = $1
	$8 = ($1 + [20])
	*($5 + [48]) = $8
	$9 = ($1 + [32])
	*($5 + [52]) = $9
	$10 = ($1 + [44])
	*($5 + [56]) = $10
	$11 = ($1 + [56])
	*($5 + [60]) = $11
	$12 = ($1 + [68])
	*($5 + [64]) = $12
	$13 = ($1 + [80])
	*($5 + [68]) = $13
	$14 = ($1 + [84])
	*($5 + [72]) = $14
	CALL $86(($5 + [40]), ($5 + [8]))
	$15 = *($5 + [32])
	if ( ($15 <= [513]) ){ goto $label$4 }
	$4 = CALL $135($15)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($15 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $15)
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $7
	*($5 + [48]) = $8
	*($5 + [52]) = $9
	*($5 + [56]) = $10
	*($5 + [60]) = $11
	*($5 + [64]) = $12
	*($5 + [68]) = $13
	*($5 + [72]) = $14
	*($5 + [40]) = $1
	CALL $87(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $15)
	if ( ($15 <= [513]) ){ goto $label$5 }
	CALL $138($4)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [40]) = *($14)
	if ( (CALL $131(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$4 = ($1 + [96])
	$1 = *($4)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3877296548261920768, ($5 + [32]), $6)
	*($4) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($5 + [40]))
	
.LABEL $label$7
	$global$0 = ($5 + [80])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)5371980716848447488, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [108]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [8756])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $29($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)5371980716848447488, $6))
	if ( ((int_32)*($4 + [108]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [8756])
	
.LABEL $label$2
	*($4 + [116]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	CALL $49(*($1), ($3 + [8]))
	CALL $49(*($1), ($3 + [20]))
	CALL $49(*($1), ($3 + [32]))
	CALL $49(*($1), ($3 + [44]))
	CALL $49(*($1), ($3 + [56]))
	CALL $49(*($1), ($3 + [68]))
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)3877296548261920768, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [88]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [8756])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $36($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)3877296548261920768, $6))
	if ( ((int_32)*($4 + [88]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [8756])
	
.LABEL $label$2
	*($4 + [96]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [96])
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [10302])
	$2 = *(($0 + [4]))
	$3 = *($2 + [96])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)3877296548261920768, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [96]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = [0]
	$5 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$6 = *($1 + [8])
	$2 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$8:
	$3 = ($2 + [-24])
	$4 = *($3)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$7 }
	$2 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)*($4 + [88]) == (int_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8756])
	goto $label$5 
	
.LABEL $label$6
	$4 = [0]
	$3 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)3877296548261920768, $6)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $36($7, $3)
	if ( ((int_32)*($4 + [88]) == (int_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8756])
	
.LABEL $label$5
	*($4 + [96]) = $5
	
.LABEL $label$4
	*(($0 + [4])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $132($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $113($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	$1 = CALL $111($2, ($1 + [68]))
	$7 = CALL $111(($2 + [16]), ($1 + [56]))
	$6 = CALL $111(($2 + [32]), ($1 + [44]))
	$5 = CALL $111(($2 + [48]), ($1 + [32]))
	$4 = CALL $111(($2 + [64]), ($1 + [20]))
	$3 = CALL $111(($2 + [80]), ($1 + [8]))
	CALL $98($0, *($1), $3, $4, $5, $6, $7, $1)
	if ( (*($1) & [1]) ){ goto $label$11 }
	if ( (*($7) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($7 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($5) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($3) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [96])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $113($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $110 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $113($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $119 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $113($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8807])
	
.LABEL $label$5
	$4 = CALL $135($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL _Znwj([128])) + [8]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [84 align=4]) = (int_64)0
	*($5 + [96 align=4]) = (int_64)0
	*($5 + [104]) = [0]
	*($5 + [108]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [56])
	*($3 + [52]) = ($5 + [64])
	*($3 + [56]) = ($5 + [72])
	*($3 + [60]) = ($5 + [80])
	*($3 + [64]) = ($5 + [84])
	*($3 + [68]) = ($5 + [88])
	*($3 + [72]) = ($5 + [92])
	*($3 + [76]) = ($5 + [96])
	CALL $69(($3 + [32]), ($3 + [24]))
	*($5 + [112]) = $1
	*($5 + [116 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $70(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $138($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [104])))
	
.LABEL $label$11
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $111(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $111(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [208])
	$global$0 = $2
	if ( ((*($0 + [34]) & *($1 + [92])) == 0) ){ goto $label$12 }
	$3 = *($0)
	*($2 + [160]) = $0
	CALL $96(($0 + [40]), $1, $3, ($2 + [160]))
	*($2 + [192]) = [11068]
	*($2 + [196]) = CALL $132([11068])
	*($2 + [24]) = *($2 + [192])
	$4 = CALL $2(($2 + [200]), ($2 + [24]))
	*(($2 + [184])) = [0]
	*($2 + [176]) = (int_64)0
	$5 = CALL $132([11080])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$11 }
	*($2 + [176]) = ($5 << [1])
	$6 = (($2 + [176]) | [1])
	if ( $5 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	*(($2 + [136])) = [0]
	*($2 + [128]) = (int_64)0
	$5 = CALL $132([10158])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($2 + [128]) = ($5 << [1])
	$6 = (($2 + [128]) | [1])
	if ( $5 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$11
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($2 + [176]) = ($7 | [1])
	*($2 + [184]) = $6
	*($2 + [180]) = $5
	
.LABEL $label$10
	CALL memcpy($6, [11080], $5)
	
.LABEL $label$9
	*(($6 + $5)) = [0]
	CALL $32($0, *($4), ($2 + [176]), $1)
	if ( ((*($2 + [176]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($2 + [184]))
	
.LABEL $label$13
	CALL require_recipient(*($1 + [64]))
	CALL require_recipient(*($1 + [56]))
	CALL require_recipient(*($1 + [72]))
	$global$0 = ($2 + [208])
	return (unreachable)
	
.LABEL $label$8
	$4 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($4)
	*($2 + [128]) = ($4 | [1])
	*($2 + [136]) = $6
	*($2 + [132]) = $5
	
.LABEL $label$7
	CALL memcpy($6, [10158], $5)
	
.LABEL $label$6
	*(($6 + $5)) = [0]
	CALL $122(($2 + [112]), *($1))
	$5 = *($2 + [112])
	$6 = ($5 & [1])
	$5 = CALL $118(($2 + [128]), ( *($2 + [120]) ? (($2 + [112]) | [1]) : $6 ), ( *($2 + [116]) ? uint_32($5 >> [1]) : $6 ))
	$6 = ($5 + [8])
	*((($2 + [144]) + [8])) = *($6)
	*($2 + [144]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	$5 = CALL $117(($2 + [144]), [11152])
	$6 = ($5 + [8])
	*((($2 + [160]) + [8])) = *($6)
	*($2 + [160]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	if ( (*($2 + [144]) & [1]) ){ goto $label$15 }
	if ( (*($2 + [112]) & [1]) ){ goto $label$14 }
	goto $label$3 
	
.LABEL $label$15
	CALL _ZdlPv(*($2 + [152]))
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($2 + [120])))
	if ( (*($2 + [128]) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $110(($2 + [176]))
	
.LABEL $label$4
	CALL $110(($2 + [128]))
	
.LABEL $label$3
	if ( ((*($2 + [128]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($2 + [136]))
	
.LABEL $label$1
	$3 = *($1 + [56])
	if ( ((*($0 + [32]) & *(($1 + [92]))) == 0) ){ goto $label$25 }
	$5 = CALL $111(($2 + [96]), ($2 + [160]))
	CALL $47($0, $3, ($1 + [32]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$26
	*($2 + [80]) = [11161]
	*($2 + [84]) = CALL $132([11161])
	*($2 + [16]) = *($2 + [80])
	$4 = CALL $2(($2 + [88]), ($2 + [16]))
	*(($2 + [136])) = [0]
	*($2 + [128]) = (int_64)0
	$5 = CALL $132([10158])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$24 }
	*($2 + [128]) = ($5 << [1])
	$6 = (($2 + [128]) | [1])
	if ( $5 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	CALL require_recipient($3)
	goto $label$16 
	
.LABEL $label$24
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($2 + [128]) = ($7 | [1])
	*($2 + [136]) = $6
	*($2 + [132]) = $5
	
.LABEL $label$23
	CALL memcpy($6, [10158], $5)
	
.LABEL $label$22
	*(($6 + $5)) = [0]
	CALL $122(($2 + [112]), *($1))
	$5 = *($2 + [112])
	$6 = ($5 & [1])
	$5 = CALL $118(($2 + [128]), ( *($2 + [120]) ? (($2 + [112]) | [1]) : $6 ), ( *($2 + [116]) ? uint_32($5 >> [1]) : $6 ))
	$6 = ($5 + [8])
	*((($2 + [144]) + [8])) = *($6)
	*($2 + [144]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	$5 = CALL $117(($2 + [144]), [11168])
	$6 = ($5 + [8])
	*((($2 + [64]) + [8])) = *($6)
	*($2 + [64]) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	CALL $32($0, *($4), ($2 + [64]), $1)
	if ( (*($2 + [64]) & [1]) ){ goto $label$28 }
	if ( (*($2 + [144]) & [1]) ){ goto $label$27 }
	goto $label$20 
	
.LABEL $label$28
	CALL _ZdlPv(*($2 + [72]))
	if ( ((*($2 + [144]) & [1]) == 0) ){ goto $label$20 }
	
.LABEL $label$27
	CALL _ZdlPv(*($2 + [152]))
	$5 = [1]
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	CALL $110(($2 + [128]))
	
.LABEL $label$20
	$5 = [1]
	if ( (*($2 + [112]) & [1]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((*($2 + [128]) & $5) == 0) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$18
	CALL _ZdlPv(*(($2 + [120])))
	if ( ((*($2 + [128]) & $5) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*($2 + [136]))
	
.LABEL $label$16
	CALL require_recipient(*($1 + [64]))
	*($2 + [48]) = [11178]
	*($2 + [52]) = CALL $132([11178])
	*($2 + [8]) = *($2 + [48])
	$6 = CALL $2(($2 + [56]), ($2 + [8]))
	$5 = CALL $111(($2 + [32]), ($2 + [160]))
	CALL $32($0, *($6), $5, $1)
	if ( ((*($5) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$29
	CALL $48(($0 + [40]), $1)
	if ( ((*($2 + [160]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*($2 + [168]))
	
.LABEL $label$30
	$global$0 = ($2 + [208])
	(unreachable)
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $133(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [11188])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $133(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	$2 = ($global$0 - [176])
	$global$0 = $2
	$3 = CALL current_time()
	$4 = ($0 + [40])
	*($2 + [160]) = $4
	*($2 + [112]) = (int_64)1
	$3 = ((uint_64)$3 / (uint_64)(int_64)1000000)
	CALL $54(($2 + [152]), ($2 + [160]), ($2 + [112]))
	$5 = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	$5 = [0]
	$6 = *($2 + [156])
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $3)
	$5 = [0]
	
.LOOP $label$2:
	if ( ((uint_32)*($6 + [88]) > (uint_32)$7) ){ goto $label$1 }
	CALL $55($0, $6)
	*($2 + [56]) = (int_64)1
	CALL $54(($2 + [112]), ($2 + [160]), ($2 + [56]))
	$3 = *($2 + [112])
	*($2 + [152]) = $3
	$1 = ($1 + [-1])
	if ( (($1 & [65535]) == 0) ){ goto $label$3 }
	$5 = [1]
	$6 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( $6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = [1]
	
.LABEL $label$1
	*(($2 + [144])) = [0]
	*($2 + [128]) = (int_64)-1
	*($2 + [136]) = (int_64)0
	*($2 + [148]) = [0]
	$3 = *($0)
	*($2 + [112]) = $3
	*($2 + [120]) = $3
	*($2 + [104]) = ($2 + [112])
	*($2 + [56]) = (int_64)0
	CALL $56(($2 + [96]), ($2 + [104]), ($2 + [56]))
	$6 = *($2 + [100])
	if ( ($6 == 0) ){ goto $label$4 }
	$8 = ($2 + [84])
	$9 = ($0 + [40])
	$10 = ($0 + [48])
	$11 = ($0 + [68])
	$12 = ($0 + [64])
	
.LOOP $label$5:
	if ( *($6 + [84]) ){ goto $label$4 }
	$13 = *($6)
	*($2 + [56]) = (int_64)0
	*($2 + [168]) = $13
	$14 = CALL db_idx64_lowerbound(*($9), *($10), (int_64)5371980716848447489, ($2 + [168]), ($2 + [56]))
	if ( ((int_32)$14 <= (int_32)[-1]) ){ goto $label$6 }
	$3 = *($2 + [56])
	$1 = *($11)
	$15 = *($12)
	if ( ((int_32)$15 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$11:
	$6 = ($1 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$10 }
	$1 = $6
	if ( ((int_32)$15 != (int_32)$6) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$15 == (int_32)$1) ){ goto $label$9 }
	if ( ((int_32)*($7 + [108]) != (int_32)$4) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$7 = [0]
	$6 = CALL db_find_i64(*($9), *($10), (int_64)5371980716848447488, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $29($4, $6)
	if ( ((int_32)*($7 + [108]) == (int_32)$4) ){ goto $label$7 }
	
.LABEL $label$8
	CALL eosio_assert([0], [8756])
	
.LABEL $label$7
	*(($7 + [120])) = $14
	if ( ($7 == 0) ){ goto $label$6 }
	if ( ((int_64)*($7 + [72]) != (int_64)$13) ){ goto $label$6 }
	CALL $57(($2 + [96]))
	$6 = *($2 + [100])
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($2 + [96])
	*($2 + [56]) = $3
	$6 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( $6) ){ goto $label$12 }
	CALL eosio_assert([0], [10268])
	$6 = *($2 + [60])
	
.LABEL $label$12
	CALL $57(($2 + [56]))
	CALL $58(*($2 + [104]), $6)
	$3 = *($0)
	*($2 + [40]) = [9123]
	*($2 + [44]) = CALL $132([9123])
	*($2 + [16]) = *($2 + [40])
	CALL $2(($2 + [48]), ($2 + [16]))
	$16 = *($0)
	*($2 + [24]) = [11002]
	$17 = *($2 + [48])
	*($2 + [28]) = CALL $132([11002])
	*($2 + [8]) = *($2 + [24])
	CALL $2(($2 + [32]), ($2 + [8]))
	*((($2 + [56]) + [8])) = *($2 + [32])
	*($2 + [168]) = $13
	*($2 + [56]) = $16
	$6 = CALL _Znwj([16])
	*((($2 + [56]) + [16])) = $6
	*($6) = $3
	*($6 + [8]) = $17
	*(($1 = ($2 + [84]))) = (int_64)0
	*(($2 + [92])) = [0]
	$6 = ($6 + [16])
	*(($2 + [80])) = $6
	*(($2 + [76])) = $6
	CALL $59($8, [8])
	$6 = *($1)
	if ( ((int_32)(*(($2 + [88])) - $6) > (int_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [9117])
	
.LABEL $label$13
	CALL memcpy($6, ($2 + [168]), [8])
	CALL $60(($2 + [56]))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$14 }
	*(($2 + [88])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$14
	$6 = *(($2 + [72]))
	if ( ($6 == 0) ){ goto $label$15 }
	*(($2 + [76])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$15
	$5 = [1]
	
.LABEL $label$4
	CALL eosio_assert(($5 & [1]), [11013])
	$7 = *($2 + [136])
	if ( ($7 == 0) ){ goto $label$16 }
	$15 = ($2 + [140])
	$6 = *($15)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$6 = ($6 + [-24])
	$1 = *($6)
	*($6) = [0]
	if ( ($1 == 0) ){ goto $label$20 }
	CALL $39($1)
	CALL _ZdlPv($1)
	
.LABEL $label$20
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$19 }
	$6 = *(($2 + [136]))
	goto $label$17 
	
.LABEL $label$18
	$6 = $7
	
.LABEL $label$17
	*($15) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$16
	$global$0 = ($2 + [176])
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = ($0 + [40])
	$5 = *(($0 + [68]))
	$4 = *(($0 + [64]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	if ( ((int_32)*($7 + [108]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [8756])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [48])), (int_64)5371980716848447488, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $29($3, $6)
	if ( ((int_32)*($7 + [108]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [8756])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9817])
	CALL eosio_assert((*($0 + [36]) & *($7 + [92])), [10797])
	CALL require_auth(*($7 + [72]))
	*((($2 + [104]) + [32])) = [0]
	*($2 + [120]) = (int_64)-1
	*($2 + [128]) = (int_64)0
	*($2 + [140]) = [0]
	$8 = *($0)
	*($2 + [104]) = $8
	*($2 + [112]) = $8
	$6 = [0]
	$5 = CALL db_find_i64($8, $8, (int_64)3877296548261920768, *($7 + [72]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $36(($2 + [104]), $5)
	if ( ((int_32)*($6 + [88]) == (int_32)($2 + [104])) ){ goto $label$5 }
	CALL eosio_assert([0], [8756])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9324])
	CALL $52(($2 + [104]), $6, *($0), ($2 + [72]))
	$8 = *($7 + [56])
	*(($2 + [64])) = [0]
	*($2 + [56]) = (int_64)0
	$6 = CALL $132([10158])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$11 }
	$4 = ($7 + [32])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$14 }
	*($2 + [56]) = ($6 << [1])
	$5 = (($2 + [56]) | [1])
	if ( $6 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$9 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($2 + [56]) = ($9 | [1])
	*($2 + [64]) = $5
	*($2 + [60]) = $6
	
.LABEL $label$13
	CALL memcpy($5, [10158], $6)
	
.LABEL $label$12
	*(($5 + $6)) = [0]
	CALL $122(($2 + [40]), *($7))
	$6 = *($2 + [40])
	$5 = ($6 & [1])
	$6 = CALL $118(($2 + [56]), ( *($2 + [48]) ? (($2 + [40]) | [1]) : $5 ), ( *($2 + [44]) ? uint_32($6 >> [1]) : $5 ))
	$5 = ($6 + [8])
	*((($2 + [72]) + [8])) = *($5)
	*($2 + [72]) = *($6)
	*($6) = (int_64)0
	*($5) = [0]
	$6 = CALL $117(($2 + [72]), [10834])
	$5 = ($6 + [8])
	*((($2 + [88]) + [8])) = *($5)
	*($2 + [88]) = *($6)
	*($6) = (int_64)0
	*($5) = [0]
	CALL $47($0, $8, $4, ($2 + [88]))
	if ( (*($2 + [88]) & [1]) ){ goto $label$16 }
	if ( (*($2 + [72]) & [1]) ){ goto $label$15 }
	goto $label$10 
	
.LABEL $label$16
	CALL _ZdlPv(*($2 + [96]))
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$15
	CALL _ZdlPv(*($2 + [80]))
	$6 = [1]
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	CALL $110(($2 + [56]))
	
.LABEL $label$10
	$6 = [1]
	if ( (*($2 + [40]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((*($2 + [56]) & $6) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	CALL _ZdlPv(*(($2 + [48])))
	if ( ((*($2 + [56]) & $6) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($2 + [64]))
	
.LABEL $label$6
	*($2 + [24]) = [10860]
	*($2 + [28]) = CALL $132([10860])
	*($2) = *($2 + [24])
	$4 = CALL $2(($2 + [32]), $2)
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$6 = CALL $132([10870])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$20 }
	*($2 + [8]) = ($6 << [1])
	$5 = (($2 + [8]) | [1])
	if ( $6 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$9 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($2 + [8]) = ($9 | [1])
	*($2 + [16]) = $5
	*($2 + [12]) = $6
	
.LABEL $label$19
	CALL memcpy($5, [10870], $6)
	
.LABEL $label$18
	*(($5 + $6)) = [0]
	CALL $32($0, *($4), ($2 + [8]), $7)
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($2 + [16]))
	
.LABEL $label$21
	CALL require_recipient(*($7 + [64]))
	if ( $7 ){ goto $label$22 }
	CALL eosio_assert([0], [10268])
	CALL eosio_assert([0], [10302])
	
.LABEL $label$22
	$6 = CALL db_next_i64(*($7 + [112]), ($2 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$23 }
	CALL $29($3, $6)
	
.LABEL $label$23
	CALL $48($3, $7)
	CALL $33($0, $1)
	$5 = *($2 + [128])
	if ( ($5 == 0) ){ goto $label$24 }
	$4 = ($2 + [132])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$26 }
	
.LOOP $label$27:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$28 }
	CALL $39($7)
	CALL _ZdlPv($7)
	
.LABEL $label$28
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$27 }
	$6 = *(($2 + [128]))
	goto $label$25 
	
.LABEL $label$26
	$6 = $5
	
.LABEL $label$25
	*($4) = $5
	CALL _ZdlPv($6)
	
.LABEL $label$24
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$17
	CALL $110(($2 + [8]))
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth($1)
	$4 = ($0 + [40])
	$6 = *(($0 + [68]))
	$5 = *(($0 + [64]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	if ( ((int_32)*($8 + [108]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [8756])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [48])), (int_64)5371980716848447488, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $29($4, $7)
	if ( ((int_32)*($8 + [108]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [8756])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9817])
	$7 = *($8 + [92])
	*($3 + [46]) = $7
	$9 = CALL current_time()
	CALL eosio_assert(((uint_32)*($8 + [88]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$9 / (uint_64)(int_64)1000000))), [8555])
	if ( ((int_64)*($8 + [56]) != (int_64)$1) ){ goto $label$11 }
	CALL eosio_assert(((*($0 + [28]) & *(($8 + [92]))) == 0), [9837])
	$7 = ($7 | *($0 + [28]))
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_64)*($8 + [64]) != (int_64)$1) ){ goto $label$9 }
	CALL eosio_assert(((*($0 + [30]) & *(($8 + [92]))) == 0), [9874])
	$7 = ($7 | *($0 + [30]))
	
.LABEL $label$10
	*($3 + [46]) = $7
	$6 = *($0 + [38])
	if ( ((int_32)($6 & $7) != (int_32)$6) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL eosio_assert([0], [9912])
	$6 = *($0 + [38])
	if ( ((int_32)($6 & $7) == (int_32)$6) ){ goto $label$7 }
	
.LABEL $label$8
	*($3 + [40]) = ($3 + [46])
	CALL $45($4, $8, $1, ($3 + [40]))
	goto $label$6 
	
.LABEL $label$7
	*($3 + [40]) = ($3 + [46])
	CALL $46($4, $8, $1, ($3 + [40]))
	*($3 + [24]) = [9964]
	*($3 + [28]) = CALL $132([9964])
	*($3) = *($3 + [24])
	$5 = CALL $2(($3 + [32]), $3)
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$7 = CALL $132([9973])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$14 }
	*($3 + [8]) = ($7 << [1])
	$6 = (($3 + [8]) | [1])
	if ( $7 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$4 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($4)
	*($3 + [8]) = ($4 | [1])
	*($3 + [16]) = $6
	*($3 + [12]) = $7
	
.LABEL $label$13
	CALL memcpy($6, [9973], $7)
	
.LABEL $label$12
	*(($6 + $7)) = [0]
	CALL $32($0, *($5), ($3 + [8]), $8)
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($3 + [16]))
	
.LABEL $label$15
	CALL require_recipient(*($8 + [64]))
	CALL require_recipient(*(($8 + [56])))
	
.LABEL $label$6
	CALL $33($0, $2)
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$5
	CALL $110(($3 + [8]))
}

int_32 .FUNC $22 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [96])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [88]) = [0]
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [8830])
	
.LABEL $label$4
	CALL memcpy(($4 + [88]), $2, [2])
	*(($4 + [28])) = ($2 + [2])
	*(($4 + [32])) = $3
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [36 align=4]) = (int_64)2251816993685505
	*($4 + [44]) = [196624]
	*($4 + [48]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [88])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($8 & [65535])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $138($2)
	
.LABEL $label$6
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$7 }
	$6 = ($4 + [76])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$12
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$13
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$10 }
	$2 = *(($4 + [72]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $5
	
.LABEL $label$8
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$global$0 = ($4 + [96])
	return [1]
}

void .FUNC $25 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [76]) = $2
	$4 = ($0 + [40])
	$6 = *(($0 + [68]))
	$5 = *(($0 + [64]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($6 + [-24])
	$7 = *($2)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$6 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	if ( ((int_32)*($7 + [108]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [8756])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$2 = CALL db_find_i64(*($4), *(($0 + [48])), (int_64)5371980716848447488, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $29($4, $2)
	if ( ((int_32)*($7 + [108]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [8756])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9817])
	$8 = CALL current_time()
	CALL eosio_assert(((uint_32)*($7 + [88]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000))), [8555])
	CALL eosio_assert((*($0 + [32]) & *($7 + [92])), [10480])
	CALL eosio_assert(CALL $fimport$12(*($7 + [56])), [10730])
	$8 = *($0)
	*($3 + [24]) = ($3 + [76])
	CALL $51($4, $7, $8, ($3 + [24]))
	*($3 + [56]) = [10759]
	*($3 + [60]) = CALL $132([10759])
	*($3) = *($3 + [56])
	$6 = CALL $2(($3 + [64]), $3)
	CALL $121(($3 + [8]), *($3 + [76]))
	$2 = CALL $120(($3 + [8]), [0], [10768])
	$5 = ($2 + [8])
	*((($3 + [24]) + [8])) = *($5)
	*($3 + [24]) = *($2)
	*($2) = (int_64)0
	*($5) = [0]
	$2 = CALL $117(($3 + [24]), [10786])
	$5 = ($2 + [8])
	*((($3 + [40]) + [8])) = *($5)
	*($3 + [40]) = *($2)
	*($2) = (int_64)0
	*($5) = [0]
	CALL $32($0, *($6), ($3 + [40]), $7)
	if ( (*($3 + [40]) & [1]) ){ goto $label$9 }
	if ( (*($3 + [24]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($3 + [48]))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($3 + [32]))
	if ( (*($3 + [8]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($3 + [16]))
	
.LABEL $label$5
	CALL require_recipient(*($7 + [64]))
	CALL $33($0, $1)
	$global$0 = ($3 + [80])
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [96])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8830])
	
.LABEL $label$5
	$3 = ($2 + $7)
	$8 = (($4 + [80]) + [8])
	CALL memcpy(($4 + [80]), $2, [8])
	$9 = ($2 + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8830])
	
.LABEL $label$6
	CALL memcpy($8, $9, [8])
	*(($4 + [24])) = $3
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*($4 + [16]) = $2
	*(($4 + [20])) = ($2 + [16])
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [28 align=4]) = (int_64)2251816993685505
	*($4 + [36]) = [196624]
	*($4 + [40]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *((($4 + [80]) + [8]))
	$1 = *($4 + [80])
	if ( ($5 & [1]) ){ goto $label$11 }
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL void $3((int_32 $1), (int_64 $0), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $138($2)
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$3 = ($4 + [68])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$16
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$17
	CALL _ZdlPv($2)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$14 }
	$2 = *(($4 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$global$0 = ($4 + [96])
	return [1]
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8830])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8830])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8830])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8830])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $49(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [96])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [88]) = [0]
	*($4 + [80]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8830])
	
.LABEL $label$4
	$3 = ($2 + $7)
	$8 = (($4 + [80]) + [8])
	CALL memcpy(($4 + [80]), $2, [8])
	$9 = ($2 + [8])
	if ( ((int_32)($7 & [-4]) != (int_32)[8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8830])
	
.LABEL $label$5
	CALL memcpy($8, $9, [4])
	*(($4 + [24])) = $3
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*($4 + [16]) = $2
	*(($4 + [20])) = ($2 + [12])
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [28 align=4]) = (int_64)2251816993685505
	*($4 + [36]) = [196624]
	*($4 + [40]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *(($4 + [88]))
	$0 = *($4 + [80])
	if ( ($5 & [1]) ){ goto $label$10 }
	CALL void $3((int_32 $0), (int_64 $8), (int_32 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL void $3((int_32 $0), (int_64 $8), (int_32 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $138($2)
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$3 = ($4 + [68])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$14 }
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$15
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$16
	CALL _ZdlPv($2)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$13 }
	$2 = *(($4 + [64]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [96])
	return [1]
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $135 (int_32 $0)
{
	return CALL $136([11208], $0)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $49(*($1), *($0 + [8]))
	CALL $71(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [24])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [28])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$6
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [32])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$7
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [36])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$8 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$8
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [40])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[1]) ){ goto $label$9 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$9
	CALL memcpy($2, $4, [2])
	*(($3 = ($3 + [4]))) = (*($3) + [2])
	CALL $49(*($1), *($0 + [44]))
}

int_32 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $138($0)
	
.LABEL $label$1
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [24]) = [0]
	*($2 + [8]) = ($2 + [24])
	$4 = ($1 + [8])
	*($2 + [36]) = $4
	*($2 + [32]) = $1
	$5 = ($1 + [24])
	*($2 + [40]) = $5
	$6 = ($1 + [32])
	*($2 + [44]) = $6
	$7 = ($1 + [40])
	*($2 + [48]) = $7
	$8 = ($1 + [56])
	*($2 + [52]) = $8
	$9 = ($1 + [64])
	*($2 + [56]) = $9
	$10 = ($1 + [80])
	*($2 + [60]) = $10
	$11 = ($1 + [88])
	*($2 + [64]) = $11
	$12 = ($1 + [96])
	*($2 + [68]) = $12
	$13 = ($1 + [104])
	*($2 + [72]) = $13
	$14 = ($1 + [108])
	*($2 + [76]) = $14
	CALL $76(($2 + [32]), ($2 + [8]))
	$15 = *($2 + [24])
	if ( ($15 == 0) ){ goto $label$2 }
	CALL $59($0, $15)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [12]) = $0
	*($2 + [8]) = $0
	*($2 + [16]) = $3
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = $4
	*($2 + [32]) = $1
	*($2 + [40]) = $5
	*($2 + [44]) = $6
	*($2 + [48]) = $7
	*($2 + [52]) = $8
	*($2 + [56]) = $9
	*($2 + [60]) = $10
	*($2 + [64]) = $11
	*($2 + [68]) = $12
	*($2 + [72]) = $13
	*($2 + [76]) = $14
	CALL $77(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [80])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [88])
	if ( (CALL $131(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [116])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)5371980716848447488, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [116]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [72])
	if ( (CALL $131((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [120]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)5371980716848447489, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [120])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = [0]
	CALL $80(($4 + [16]), $0)
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $59($4, $6)
	$5 = *($4 + [4])
	$6 = *($4)
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $6
	*($4 + [16]) = $6
	*($4 + [24]) = $5
	CALL $81(($4 + [16]), $0)
	$0 = *($4)
	CALL send_deferred($1, $2, $0, (*($4 + [4]) - $0), $3)
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$3 }
	*($4 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($4 + [32])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $123($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $59(($6 + [28]), [4])
	$2 = ((int_32)$8 * (int_32)[40])
	$8 = *($6 + [28])
	if ( ((int_32)(*(($6 + [32])) - $8) > (int_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [9117])
	
.LABEL $label$5
	$9 = ($5 + $2)
	CALL memcpy($8, $4, [4])
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$7 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$8:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$8 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$6 
	
.LABEL $label$7
	$5 = $2
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$11 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$12 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ($5 == 0) ){ goto $label$13 }
	CALL _ZdlPv($5)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8830])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	CALL $49(*($1), ($4 + [8]))
	$3 = ($4 + [24])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8830])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8830])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	*($2 + [8]) = $4
	CALL $100(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $59($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $75(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9117])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9117])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $73(*($1), *($0 + [8]))
	CALL $74(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9117])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9117])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [24])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9117])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [28])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [9117])
	$4 = *(($3 + [4]))
	
.LABEL $label$6
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [32])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [9117])
	$4 = *(($3 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [36])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$8 }
	CALL eosio_assert([0], [9117])
	$4 = *(($3 + [4]))
	
.LABEL $label$8
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [40])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[1]) ){ goto $label$9 }
	CALL eosio_assert([0], [9117])
	$4 = *(($3 + [4]))
	
.LABEL $label$9
	CALL memcpy($4, $2, [2])
	*(($3 = ($3 + [4]))) = (*($3) + [2])
	CALL $73(*($1), *($0 + [44]))
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $111(($2 + [48]), ($1 + [8]))
	$5 = *($1 + [32])
	$6 = *($1 + [24])
	$7 = CALL $111(($2 + [32]), ($1 + [40]))
	*(($8 = (($2 + [16]) + [8]))) = *(($1 + [72]))
	*($2 + [16]) = *($1 + [64])
	$9 = *($1 + [56])
	$10 = *($1 + [80])
	$11 = *($1 + [88])
	$12 = *($1 + [96])
	$13 = *($1 + [104])
	$1 = CALL $111($2, ($1 + [108]))
	*((($2 + [64]) + [8])) = *($8)
	*($2 + [64]) = *($2 + [16])
	$0 = *($0 + [4])
	$14 = *($0 + [4])
	$8 = (*($0) + int_32($14 >> [1]))
	$0 = *($0)
	if ( (($14 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($8) + $0))
	
.LABEL $label$1
	$16 = CALL $111(($2 + [80]), $1)
	$15 = CALL $111(($2 + [96]), $7)
	$14 = CALL $111(($2 + [112]), $4)
	CALL void $8((int_32 $3), (int_64 $14), (int_32 $6), (int_64 $5), (int_64 $15), (int_32 $9), (int_64 ($2 + [64])), (int_32 $10), (int_64 $11), (int_64 $12), (int_64 $13), (int_32 $16), (int_32 $0))
	if ( (*($2 + [80]) & [1]) ){ goto $label$12 }
	if ( (*($2 + [96]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($16 + [8]))
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($15 + [8]))
	$0 = [1]
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$0 = [1]
	if ( (*($2 + [112]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($1) & $0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($14 + [8]))
	if ( ((*($1) & $0) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($1 + [8]))
	$1 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($7) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($4) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($4) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [128])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [128])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*($0) + [88])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [96])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = ($0 + [104])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $49(*($1), ($0 + [108]))
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $49(*($1), (*($0) + [40]))
	$3 = *($0)
	$4 = ($3 + [56])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8830])
	$5 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$4 = ($3 + [64])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8830])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8830])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*(($3 + [72])) = *($2 + [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$4 = ($3 + [80])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8830])
	$5 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	*($2) = $3
	CALL $101($2, $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $135($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11188])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $135($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $138($0)
	
.LABEL $label$1
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	$6 = *($4 + [36])
	$7 = ($1 + [16])
	CALL $112($7, *($4 + [8]))
	*(($1 + [48])) = *(*($4 + [12]))
	$8 = *($4 + [16])
	*(($1 + [40])) = *(($8 + [8]))
	*($1 + [32]) = *($8)
	*($1 + [56]) = *(*($4 + [20]))
	*($1 + [64]) = *(*($4 + [24]))
	*($1 + [72]) = *(*($4 + [28]))
	*($1 + [80]) = *(*($4 + [32]))
	*($1 + [88]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [259200])
	*($1 + [92]) = [0]
	$8 = ($1 + [92])
	$9 = *(*($4 + [4]))
	if ( ((int_64)$9 != (int_64)*(*($4 + [20]))) ){ goto $label$3 }
	$4 = ($6 + [28])
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)$9 != (int_64)*(*(($4 + [24])))) ){ goto $label$1 }
	$4 = ($6 + [30])
	
.LABEL $label$2
	*($8) = *($4)
	
.LABEL $label$1
	$6 = ($1 + [80])
	$4 = *(($1 + [16]))
	$10 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($10 + [78])
	$9 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$4:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	$10 = *($1 + [96])
	$10 = ( *(($1 + [100])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$4 = ($10 + $4)
	$9 = (CASTING uint_64)(uint_32 $10)
	$10 = ($1 + [96])
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	if ( ($4 <= [513]) ){ goto $label$7 }
	$2 = CALL $135($4)
	goto $label$6 
	
.LABEL $label$7
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$6
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $7
	*($3 + [44]) = ($1 + [32])
	*($3 + [48]) = ($1 + [56])
	*($3 + [52]) = ($1 + [64])
	*($3 + [56]) = ($1 + [72])
	*($3 + [60]) = $6
	*($3 + [64]) = ($1 + [84])
	*($3 + [68]) = ($1 + [88])
	*($3 + [72]) = $8
	*($3 + [76]) = $10
	CALL $63(($3 + [32]), ($3 + [24]))
	$9 = *($1)
	*($1 + [112]) = CALL db_store_i64(*($5 + [8]), (int_64)5371980716848447488, *(*($0 + [8])), $9, $2, $4)
	if ( ($4 <= [513]) ){ goto $label$8 }
	CALL $138($2)
	
.LABEL $label$8
	if ( (uint_64)($9 <= *($5 + [16])) ){ goto $label$9 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$4 = ($5 + [8])
	$9 = *($4)
	$2 = *(($0 + [8]))
	$11 = *($2)
	$12 = *($1)
	*($3 + [32]) = *(($1 + [88]))
	*($1 + [116]) = CALL db_idx64_store($9, (int_64)5371980716848447488, $11, $12, ($3 + [32]))
	$9 = *($2)
	$11 = *($4)
	$12 = *($1)
	*($3 + [32]) = *(($1 + [72]))
	*(($1 + [120])) = CALL db_idx64_store($11, (int_64)5371980716848447489, $9, $12, ($3 + [32]))
	$global$0 = ($3 + [80])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $49(*($1), *($0 + [4]))
	CALL $49(*($1), *($0 + [8]))
	CALL $49(*($1), *($0 + [12]))
	CALL $49(*($1), *($0 + [16]))
	CALL $49(*($1), *($0 + [20]))
	CALL $49(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [8830])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$3 = *($0 + [32])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$1) ){ goto $label$3 }
	CALL eosio_assert([0], [8830])
	$1 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $1, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9117])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $73(*($1), *($0 + [4]))
	CALL $73(*($1), *($0 + [8]))
	CALL $73(*($1), *($0 + [12]))
	CALL $73(*($1), *($0 + [16]))
	CALL $73(*($1), *($0 + [20]))
	CALL $73(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [9117])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$3 = *($0 + [32])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert([0], [9117])
	$1 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($1, $3, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [8])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$4 = *($3)
	$3 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$6
	$4 = *($3)
	$3 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$8 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$8
	$4 = *($3)
	$3 = *($0 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$9:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$9 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$10 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$10
	$3 = *($0)
	$0 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$11:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$11 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$12 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$12
	*($2) = ($1 + [5])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $123($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $39($1)
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$5 = ($1 + [8])
	CALL $112($5, *($3 + [4]))
	$6 = ($1 + [20])
	CALL $112($6, *($3 + [8]))
	$7 = ($1 + [32])
	CALL $112($7, *($3 + [12]))
	$8 = ($1 + [44])
	CALL $112($8, *($3 + [16]))
	$9 = ($1 + [56])
	CALL $112($9, *($3 + [20]))
	$10 = ($1 + [68])
	CALL $112($10, *($3 + [24]))
	*($1 + [84]) = [1]
	*(($3 = $2) + [16]) = [0]
	*($3) = ($3 + [16])
	*($3 + [28]) = $5
	*($3 + [24]) = $1
	*($3 + [32]) = $6
	*($3 + [36]) = $7
	*($3 + [40]) = $8
	*($3 + [44]) = $9
	*($3 + [48]) = $10
	$11 = ($1 + [80])
	*($3 + [52]) = $11
	$12 = ($1 + [84])
	*($3 + [56]) = $12
	CALL $86(($3 + [24]), $3)
	$13 = *($3 + [16])
	if ( ($13 <= [513]) ){ goto $label$2 }
	$2 = CALL $135($13)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($13 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $13)
	*($3 + [16]) = $3
	*($3 + [28]) = $5
	*($3 + [24]) = $1
	*($3 + [32]) = $6
	*($3 + [36]) = $7
	*($3 + [40]) = $8
	*($3 + [44]) = $9
	*($3 + [48]) = $10
	*($3 + [52]) = $11
	*($3 + [56]) = $12
	CALL $87(($3 + [24]), ($3 + [16]))
	$14 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($4 + [8]), (int_64)3877296548261920768, *(*($0 + [8])), $14, $2, $13)
	if ( ($13 <= [513]) ){ goto $label$3 }
	CALL $138($2)
	
.LABEL $label$3
	if ( (uint_64)($14 <= *($4 + [16])) ){ goto $label$4 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$14 = *(($4 + [8]))
	$15 = *(*(($0 + [8])))
	$16 = *($1)
	*($3 + [24]) = *(($1 + [84]))
	*($1 + [96]) = CALL db_idx64_store($14, (int_64)3877296548261920768, $15, $16, ($3 + [24]))
	$global$0 = ($3 + [64])
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9117])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$7 = ($0 + [4])
	$1 = ($0 + [8])
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$5 }
	$8 = [2]
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	goto $label$3 
	
.LABEL $label$4
	$8 = [3]
	
.LABEL $label$3
	
.LOOP $label$6:
	goto $label$10 
	
.LABEL $label$12
	$4 = *($7)
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$7 }
	$8 = [2]
	goto $label$6 
	
.LABEL $label$11
	CALL eosio_assert([0], [9117])
	$4 = *($7)
	$8 = [0]
	goto $label$6 
	
.LABEL $label$10
	CALL memcpy($4, $6, [2])
	*($7) = (*($7) + [2])
	CALL $79($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$8 = [3]
	goto $label$6 
	
.LABEL $label$9
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$8
	$8 = [1]
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	goto $label$6 
	return $8
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [9117])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [4])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [9117])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [2])
	$4 = (*($3) + [2])
	*($3) = $4
	$3 = ($1 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9117])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [4])
	$3 = (*($4) + [4])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [12])
	$8 = ($0 + [8])
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [9117])
	$3 = *($4)
	
.LABEL $label$5
	CALL memcpy($3, ($2 + [14]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$4 }
	$4 = ($1 + [16])
	$8 = ($0 + [8])
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [9117])
	$3 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $4, [1])
	$3 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [20])
	
.LOOP $label$7:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [9117])
	$3 = *($4)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$7 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $82($0, $1)
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9117])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [14]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *(($1 + [28]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $75($0, $6)
	$6 = ($6 + [40])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [40])) - *($1 + [36])) / (int_32)[40]))
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$5:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [9117])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$5 }
	$6 = *(($1 + [40]))
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $75($0, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = CALL $83($0, ($1 + [48]))
	$global$0 = ($2 + [16])
	return $4
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8835])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $59($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8830])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9117])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [9117])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $123($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [104])))
	
.LABEL $label$11
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8830])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8830])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*($1 + [8]) = *($2 + [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8830])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	*(($3 = ($0 + [4]))) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [8])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [16])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$1 = ($1 + [52])
	*($2) = $1
	$3 = *($0)
	$0 = *($0 + [44])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9117])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $73(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9117])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9117])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $73(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9117])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9117])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9117])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9117])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9117])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [36])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9117])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [40])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$10 }
	CALL eosio_assert([0], [9117])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	CALL $73(*($1), *($0 + [44]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9117])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *($1 + [8])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9117])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9117])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [8])
	*(($3 = ($0 + [4]))) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $39 (int_32 $0)
{
	int_32 $1
	if ( (*($0 + [68]) & [1]) ){ goto $label$11 }
	if ( (*($0 + [56]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($0 + [76])))
	if ( ((*($0 + [56]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($0 + [64])))
	$1 = [1]
	if ( ((*($0 + [44]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($0 + [44]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($0 + [32]) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($0 + [52])))
	if ( ((*($0 + [32]) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($0 + [40])))
	$1 = [1]
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($0 + [20]) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($0 + [8]) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*(($0 + [28])))
	if ( ((*($0 + [8]) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($0 + [16])))
	return $0
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8807])
	
.LABEL $label$5
	$4 = CALL $135($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL _Znwj([104]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [80]) = [0]
	*($5 + [88]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [20])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [44])
	*($3 + [60]) = ($5 + [56])
	*($3 + [64]) = ($5 + [68])
	*($3 + [68]) = ($5 + [80])
	*($3 + [72]) = ($5 + [84])
	CALL $88(($3 + [40]), ($3 + [32]))
	*($5 + [96]) = [-1]
	*($5 + [92]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $85(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $138($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $39($1)
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [88]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8961])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9007])
	
.LABEL $label$2
	*($5 + [24]) = *($1 + [84])
	$6 = *($1)
	*($1) = *(*($3))
	$7 = ($1 + [8])
	CALL $112($7, *($3 + [4]))
	$8 = ($1 + [20])
	CALL $112($8, *($3 + [8]))
	$9 = ($1 + [32])
	CALL $112($9, *($3 + [12]))
	$10 = ($1 + [44])
	CALL $112($10, *($3 + [16]))
	$11 = ($1 + [56])
	CALL $112($11, *($3 + [20]))
	$12 = ($1 + [68])
	CALL $112($12, *($3 + [24]))
	*($1 + [84]) = [1]
	$13 = ($1 + [84])
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [9058])
	
.LABEL $label$3
	*($5 + [32]) = [0]
	*($5 + [8]) = ($5 + [32])
	*($5 + [44]) = $7
	*($5 + [48]) = $8
	*($5 + [52]) = $9
	*($5 + [56]) = $10
	*($5 + [60]) = $11
	*($5 + [64]) = $12
	*($5 + [72]) = $13
	*($5 + [40]) = $1
	$14 = ($1 + [80])
	*($5 + [68]) = $14
	CALL $86(($5 + [40]), ($5 + [8]))
	$15 = *($5 + [32])
	if ( ($15 <= [513]) ){ goto $label$5 }
	$3 = CALL $135($15)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($4 - (($15 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$4
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $15)
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $7
	*($5 + [48]) = $8
	*($5 + [52]) = $9
	*($5 + [56]) = $10
	*($5 + [60]) = $11
	*($5 + [64]) = $12
	*($5 + [68]) = $14
	*($5 + [72]) = $13
	*($5 + [40]) = $1
	CALL $87(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [92]), $2, $3, $15)
	if ( ($15 <= [513]) ){ goto $label$6 }
	CALL $138($3)
	
.LABEL $label$6
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($5 + [40]) = *($13)
	if ( (CALL $131(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$8 }
	$3 = ($1 + [96])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$9 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3877296548261920768, ($5 + [32]), $6)
	*($3) = $1
	
.LABEL $label$9
	CALL db_idx64_update($1, $2, ($5 + [40]))
	
.LABEL $label$8
	$global$0 = ($5 + [80])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9117])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9117])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9117])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9117])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9117])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [208])
	$global$0 = $4
	$5 = *($0)
	*($4 + [152]) = [9123]
	*($4 + [156]) = CALL $132([9123])
	*($4 + [8]) = *($4 + [152])
	$6 = *(CALL $2(($4 + [160]), ($4 + [8])))
	$7 = *($0)
	*($4 + [136]) = [9130]
	*($4 + [140]) = CALL $132([9130])
	*($4) = *($4 + [136])
	$0 = CALL $2(($4 + [144]), $4)
	*($4 + [16]) = $1
	$2 = CALL $111(($4 + [24]), $2)
	*($4 + [40]) = *($3)
	*($4 + [48]) = *($3 + [8])
	$8 = CALL $111((($4 + [16]) + [40]), ($3 + [16]))
	*(($4 + [88])) = *(($3 + [40]))
	*($4 + [72]) = *(($3 + [48]))
	*($4 + [80]) = *($3 + [32])
	*($4 + [96]) = *($3 + [56])
	*($4 + [104]) = *($3 + [64])
	*($4 + [112]) = *($3 + [72])
	*($4 + [120]) = *($3 + [80])
	$9 = CALL $111(($4 + [124]), ($3 + [96]))
	*($4 + [168]) = $7
	*($4 + [176]) = *($0)
	*(($3 = CALL _Znwj([16]))) = $5
	*($3 + [8]) = $6
	$0 = ($3 + [16])
	*(($4 + [192])) = $0
	*(($4 + [188])) = $0
	*($4 + [184]) = $3
	CALL $65(($4 + [196]), ($4 + [16]))
	CALL $60(($4 + [168]))
	$3 = *($4 + [196])
	if ( ($3 == 0) ){ goto $label$1 }
	*(($4 + [200])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$3 = *($4 + [184])
	if ( ($3 == 0) ){ goto $label$2 }
	*(($4 + [188])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	if ( (*($9) & [1]) ){ goto $label$7 }
	if ( (*($8) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [132])))
	if ( ((*($8) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [64])))
	if ( ((*($2) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( (*($2) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	$global$0 = ($4 + [208])
	return 
	
.LABEL $label$3
	CALL _ZdlPv(*(($4 + [32])))
	$global$0 = ($4 + [208])
}

void .FUNC $33 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = ($global$0 - [160])
	$global$0 = $2
	$3 = CALL current_time()
	*($2 + [152]) = ($0 + [40])
	*($2 + [80]) = (int_64)1
	CALL $54(($2 + [144]), ($2 + [152]), ($2 + [80]))
	$4 = *($2 + [148])
	if ( ($4 == 0) ){ goto $label$1 }
	if ( ((uint_32)*($4 + [88]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000))) ){ goto $label$1 }
	$3 = CALL current_time()
	*(($2 + [108])) = (int_64)0
	*(($2 + [124])) = (int_64)0
	*(($2 + [132])) = (int_64)0
	*($2 + [92]) = [0]
	*($2 + [96]) = [0]
	*($2 + [100 align=4]) = (int_64)0
	*($2 + [116 align=4]) = (int_64)0
	*($2 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [60])
	$3 = *($0)
	*($2 + [48]) = [9123]
	*($2 + [52]) = CALL $132([9123])
	*($2 + [16]) = *($2 + [48])
	$4 = CALL $2(($2 + [56]), ($2 + [16]))
	*($2 + [64]) = $3
	*($2 + [72]) = *($4)
	*($2 + [32]) = [9137]
	*($2 + [36]) = CALL $132([9137])
	*($2 + [8]) = *($2 + [32])
	$4 = CALL $2(($2 + [40]), ($2 + [8]))
	*($2 + [24]) = [3]
	CALL $66(($2 + [116]), ($2 + [64]), $0, $4, ($2 + [24]))
	$3 = *($0)
	*($2 + [100]) = [10]
	*($2 + [72]) = (int_64)0
	*($2 + [64]) = $1
	CALL $67(($2 + [80]), ($2 + [64]), $3, [0])
	CALL $68(($2 + [80]))
	
.LABEL $label$1
	$global$0 = ($2 + [160])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$11 = $10
	$global$0 = $11
	*(($12 = ($10 + $5))) = [0]
	$13 = *($1)
	$2 = ((int_64)$13 < (int_64)0)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : $2 ) * (int_64)((int_64)$13 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($12 + [-1])
	
.LOOP $label$5:
	$14 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$14 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $14
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ( [8898] ? [8910] : $2 )
	$9 = ((int_64)$13 / (int_64)$9)
	$15 = ($5 + [32])
	$11 = ($11 - (($5 + [47]) & [496]))
	$global$0 = $11
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*($3 + [8]) = $10
	*($3) = $9
	*($3 + [12]) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	CALL $130($11, $15, $12, $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $132($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $110($0)
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($5 = $4) + [48]) = $2
	if ( ((int_32)*($1 + [108]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8961])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9007])
	
.LABEL $label$2
	*($5 + [32]) = *($1 + [88])
	*($5 + [40]) = *($1 + [72])
	$6 = *($1)
	*($5 + [24]) = $6
	$3 = *($3)
	$7 = CALL current_time()
	$8 = (CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000))
	*($1 + [88]) = (((int_32)*($1 + [80]) * (int_32)[86400]) + $8)
	*($1 + [84]) = $8
	*($1 + [92]) = (*($1 + [92]) | *($3 + [32]))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [9058])
	
.LABEL $label$3
	$9 = ($1 + [92])
	$10 = ($1 + [80])
	$8 = ($0 + [36])
	$3 = *($1 + [16])
	$11 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($11 + [78])
	$7 = (CASTING uint_64)(uint_32 $11)
	$11 = ($1 + [16])
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	$12 = *($1 + [96])
	$12 = ( *(($1 + [100])) ? uint_32($12 >> [1]) : ($12 & [1]) )
	$3 = ($12 + $3)
	$7 = (CASTING uint_64)(uint_32 $12)
	$12 = ($1 + [96])
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	if ( ($3 <= [513]) ){ goto $label$7 }
	$4 = CALL $135($3)
	goto $label$6 
	
.LABEL $label$7
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$6
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [56]) = ($5 + [8])
	*($5 + [72]) = $11
	*($5 + [92]) = $10
	*($5 + [104]) = $9
	*($5 + [108]) = $12
	*($5 + [64]) = $1
	*($5 + [68]) = ($1 + [8])
	*($5 + [76]) = ($1 + [32])
	*($5 + [80]) = ($1 + [56])
	*($5 + [84]) = ($1 + [64])
	*($5 + [88]) = ($1 + [72])
	*($5 + [96]) = ($1 + [84])
	*($5 + [100]) = ($1 + [88])
	CALL $63(($5 + [64]), ($5 + [56]))
	CALL db_update_i64(*($1 + [112]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL $138($4)
	$6 = *($5 + [24])
	
.LABEL $label$8
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($5 + [68]) = $1
	*($5 + [64]) = $0
	*($5 + [76]) = $1
	*($5 + [72]) = ($5 + [32])
	*($5 + [80]) = ($5 + [24])
	*($5 + [84]) = ($5 + [48])
	*($5 + [56]) = ($5 + [64])
	CALL $64(($5 + [56]), $8, ($8 + [1]))
	$global$0 = ($5 + [112])
}

void .FUNC $129 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}