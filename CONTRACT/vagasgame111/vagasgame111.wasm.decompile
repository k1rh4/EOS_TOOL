(data (i32.const 4) "`h\00\00")
(data (i32.const 16) "read flag error: too large\00")
(data (i32.const 48) "read flag error: char < 0\00")
(data (i32.const 80) "read flag error: char > 9\00")
(data (i32.const 128) "-\00")
(data (i32.const 144) "eosio.token\00")
(data (i32.const 160) "transfer\00")
(data (i32.const 176) "bl\00")
(data (i32.const 192) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 256) "cannot pass end iterator to erase\00")
(data (i32.const 304) "cannot increment end iterator\00")
(data (i32.const 336) "object passed to erase is not in multi_index\00")
(data (i32.const 384) "cannot erase objects in table of another contract\00")
(data (i32.const 448) "attempt to remove object that was not in multi_index\00")
(data (i32.const 512) "error reading iterator\00")
(data (i32.const 544) "read\00")
(data (i32.const 560) "cannot create objects in table of another contract\00")
(data (i32.const 624) "write\00")
(data (i32.const 640) "owner\00")
(data (i32.const 656) "cannot pass end iterator to modify\00")
(data (i32.const 704) "object passed to modify is not in multi_index\00")
(data (i32.const 752) "cannot modify objects in table of another contract\00")
(data (i32.const 816) "updater cannot change primary key when modifying an object\00")
(data (i32.const 880) "active\00")
(data (i32.const 896) "reveal\00")
(data (i32.const 912) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 976) "invalid symbol name\00")
(data (i32.const 1008) "fund unlock error\00")
(data (i32.const 1040) "unable to find key\00")
(data (i32.const 1072) "get\00")
(data (i32.const 1088) " player: \00")
(data (i32.const 1104) " \e5\b9\b3\e5\b1\80!\00")
(data (i32.const 1116) "`\04\00\00")
(data (i32.const 1120) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 1168) "0\00")
(data (i32.const 1184) "error: build_transfer\00")
(data (i32.const 1216) " \e8\83\9c\e5\87\ba!\00")
(data (i32.const 1232) "lockgame\00")
(data (i32.const 1248) "check pay out error\00")
(data (i32.const 1280) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1344) "error: game is locked\00")
(data (i32.const 1376) "error-0-message:memo params error\00")
(data (i32.const 1424) "error-1-message:less than 0.1 EOS\00")
(data (i32.const 1472) "error-2-message:large than 5 EOS\00")
(data (i32.const 1520) "1\00")
(data (i32.const 1536) "2\00")
(data (i32.const 1552) "3\00")
(data (i32.const 1568) "divide by zero\00")
(data (i32.const 1584) "signed division overflow\00")
(data (i32.const 1616) "error-3-message:too large\00")
(data (i32.const 1648) "vagasprofi11\00")
(data (i32.const 1664) "\e5\a5\96\e6\b1\a0\e6\ba\a2\e5\87\ba=>\e5\88\86\e7\ba\a2\e6\b1\a0\00")
(data (i32.const 1696) "vagasminep11\00")
(data (i32.const 1712) "mine\00")
(data (i32.const 1728) "mining\00")
(data (i32.const 1744) "VAGAS\e5\9b\a2\e9\98\9f\e6\84\9f\e8\b0\a2\e6\82\a8\e7\9a\84\e6\94\af\e6\8c\81\00")
(data (i32.const 1776) "VAGAS\e6\8e\a8\e5\b9\bf\e7\ba\a2\e5\88\a9\00")
(data (i32.const 1808) "reveal1\00")
(data (i32.const 1824) "fund pool overdraw\00")
(data (i32.const 10240) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$6 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$7 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$8 (param i32 i64 i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$13 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$14 (param i32)))
(import "env" "memcpy" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$19 (param i64)))
(import "env" "require_auth2" (func $fimport$20 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$21 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$22 (param i32 i32)))
(import "env" "sha256" (func $fimport$23 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$24 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$25 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z23read_uint64_from_stringNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $5))
(export "_Z16uint64_to_stringy" (func $6))
(export "_Z10parse_memoRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEE" (func $8))
(export "apply" (func $10))
(export "malloc" (func $123))
(export "free" (func $126))
(export "memchr" (func $139))
(export "memcmp" (func $140))
(export "strlen" (func $141))
(table $0 8 8 anyfunc)
(elem (i32.const 0) $142 $11 $13 $19 $16 $21 $15 $18)



void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $127([56])
	CALL $99($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [48])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $100(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $128($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	*($0 + [24]) = (int_64)0
	*(($4 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [912])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [976])
	*($0 + [44]) = $1
	$4 = *($2 + [4])
	*($0) = *(*($4))
	$5 = *($2)
	$1 = *($4 + [4])
	*($0 + [24]) = *($1)
	*(($0 + [32])) = *(($1 + [8]))
	*($0 + [8]) = *(*($4 + [8]))
	*($0 + [16]) = *(*($4 + [12]))
	*($0 + [40]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($6 + [56]) = ($6 + [44])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	*($6 + [64]) = ($6 + [48])
	*($6 + [76]) = ($0 + [8])
	*($6 + [72]) = $0
	*($6 + [80]) = ($0 + [16])
	*($6 + [84]) = ($0 + [24])
	*($6 + [88]) = ($0 + [40])
	CALL $101(($6 + [72]), ($6 + [64]))
	$3 = *($0)
	*($0 + [48]) = CALL db_store_i64(*($5 + [8]), (int_64)-2849807356034285568, *(*($2 + [8])), $3, $6, [44])
	if ( (uint_64)($3 <= *($5 + [16])) ){ goto $label$6 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [96])
	return $0
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $42($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [624])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [624])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $46(CALL $47($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_64 .FUNC $95 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [192])
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = *($3)
	goto $label$1 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2852345010218888704, (int_64)-2852345010218888704)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $103($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [192])
	$1 = *($3)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $2
	CALL $107($4, $0, $1, ($4 + [8]))
	$1 = *(*($4 + [4]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $1
}

void .FUNC $96 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [192])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2852345010218888704, (int_64)-2852345010218888704)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $103($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [192])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [656])
	CALL $104($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $105($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [512])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $127([56])) + [32]) = (int_64)1398362884
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [912])
	$3 = ($4 + [24])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [976])
	*($4 + [44]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($4 + [8])
	*($8 + [40]) = $4
	*($8 + [48]) = ($4 + [16])
	*($8 + [52]) = $3
	*($8 + [56]) = ($4 + [40])
	CALL $102(($8 + [40]), ($8 + [32]))
	*($4 + [48]) = $1
	*($8 + [32]) = $4
	$7 = *($4)
	*($8 + [40]) = $7
	$6 = *($4 + [48])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [32]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $100($2, ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $128($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $4
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$2 = *($0)
	$3 = *(*($0 + [4]))
	*($1) = *($3)
	*(($4 = ($1 + [16]))) = *(($3 + [16]))
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [624])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy(($6 | [8]), $5, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy(($6 + [16]), $4, [8])
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-2857509471394696576, *(*($0 + [8])), (int_64)-2857509471394696576, $6, [24])
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)-2857509471394696576) ){ goto $label$1 }
	*(($2 + [16])) = (int_64)-2857509471394696575
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $127([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [1116]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $138($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $132($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	*($10 + [40]) = $2
	*($10 + [32]) = $3
	*($10) = (int_64)0
	$8 = ($1 + [8])
	*($10) = ((int_64)CALL $95($8, *($1), $10) + (int_64)1)
	CALL $96($8, $10, *($1))
	$3 = *($10)
	*($10 + [24]) = $3
	$5 = *(($1 + [72]))
	$9 = *(($1 + [76]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$3) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($1 + [48])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$5 }
	$7 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)$8), [192])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = CALL db_find_i64(*(($1 + [48])), *(($1 + [56])), (int_64)-2849807356034285568, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $97($8, $7) + [44]) == (int_32)$8), [192])
	
.LABEL $label$4
	CALL eosio_assert([0], [1184])
	
.LABEL $label$3
	$3 = *($1)
	*($10 + [4]) = $4
	*($10) = ($10 + [24])
	*($10 + [8]) = ($10 + [32])
	*($10 + [12]) = ($10 + [40])
	CALL $98(($10 + [16]), $8, $3, $10)
	CALL _Z16uint64_to_stringy($0, *($10 + [24]))
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $74(*($1), ($0 + [32]))
}

int_32 .FUNC $138 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $127($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $124([1844], $0)
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$8 = ($5 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $127(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	*(($9 = ($8 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $127([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($9 + [32])) = [0]
	*(($9 + [36])) = [0]
	$5 = ($8 + ((int_32)$7 * (int_32)[40]))
	$6 = ($9 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($7 = ($9 + [-16]))) = [0]
	$8 = ($2 + [-4])
	*($1) = *($8)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($7) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($8) = (int_64)0
	*(($7 = ($9 + [-4]))) = [0]
	$8 = ($2 + [8])
	*($1) = *($8)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($7) = *($1)
	*($1) = [0]
	*($8) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$8 }
	$1 = ([0] - $7)
	$9 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($9 + [16])) = $2
	CALL $128($2)
	
.LABEL $label$10
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($9 + [4])) = $2
	CALL $128($2)
	
.LABEL $label$11
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$12 }
	CALL $128($7)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $122 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $127(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $127([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $42(($8 + [28]), [57])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [12]) = $1
	*($9 + [8]) = $1
	*($9 + [16]) = $2
	*($9 + [24]) = ($9 + [8])
	*($9 + [32]) = $4
	*($9 + [36]) = ($4 + [8])
	*($9 + [40]) = ($4 + [16])
	*($9 + [44]) = ($4 + [24])
	*($9 + [48]) = ($4 + [40])
	*($9 + [52]) = ($4 + [48])
	*($9 + [56]) = ($4 + [56])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $48(($9 + [32]), ($9 + [24]))
	$4 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	$6 = ([0] - $4)
	$4 = ($2 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($4 + [-12]))
	*(($8 + [-40])) = *(($4 + [-20]))
	*(($2 = ($8 + [-24]))) = (int_64)0
	*(($1 = ($8 + [-16]))) = [0]
	$7 = ($4 + [-4])
	*($2) = *($7)
	*(($8 + [-20])) = *($4)
	$2 = ($4 + [4])
	*($1) = *($2)
	*($2) = [0]
	*(($2 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$7 = ($4 + [8])
	*($2) = *($7)
	*(($8 + [-8])) = *(($4 + [12]))
	$2 = ($4 + [16])
	*($1) = *($2)
	*($2) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$8 = ($4 + [-24])
	
.LOOP $label$9:
	$4 = *(($8 + [12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $4
	CALL $128($4)
	
.LABEL $label$10
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $4
	CALL $128($4)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $2) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $128($1)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [64])
	(unreachable)
}

int_32 .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $131($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $127($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $128($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $127(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $128($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $131($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	return CALL $133($0, $1, CALL $141($1))
}

int_64 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = (int_64)0
	$7 = ($0 + [8])
	*($9 + [16]) = ((int_64)CALL $36($7, *($0), ($9 + [16])) + (int_64)1)
	CALL $37($7, ($9 + [16]), *($0))
	$6 = *($9 + [16])
	$8 = CALL current_time()
	*(($9 + [44])) = [0]
	*(($9 + [48])) = [0]
	*($9 + [28]) = [0]
	*($9 + [32]) = [0]
	*($9 + [36]) = [0]
	*($9 + [40]) = [0]
	*($9 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*($9 + [52]) = [0]
	*(($9 + [56])) = [0]
	*(($9 + [60])) = [0]
	*($9 + [64]) = [0]
	*(($9 + [68])) = [0]
	*(($9 + [72])) = [0]
	CALL $122(($9 + [52]), $2, $3, $4, $5)
	*($9 + [36]) = $1
	$8 = *($0)
	*($9 + [8]) = (int_64)0
	*($9) = $6
	CALL $39(($9 + [80]), ($9 + [16]))
	$0 = *($9 + [80])
	CALL send_deferred($9, $8, $0, (*($9 + [84]) - $0), [0])
	$0 = *($9 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($9 + [84]) = $0
	CALL $128($0)
	
.LABEL $label$1
	CALL $40(($9 + [16]))
	*([0] + [4]) = ($9 + [96])
	return $6
}

void .FUNC $136 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $127($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $74(*($1), ($0 + [32]))
	CALL $74(*($1), ($0 + [44]))
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $127(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $127([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $42(($8 + [28]), [57])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [12]) = $1
	*($9 + [8]) = $1
	*($9 + [16]) = $2
	*($9 + [24]) = ($9 + [8])
	*($9 + [32]) = $4
	*($9 + [36]) = ($4 + [8])
	*($9 + [40]) = ($4 + [16])
	*($9 + [44]) = ($4 + [24])
	*($9 + [48]) = ($4 + [40])
	*($9 + [52]) = ($4 + [48])
	*($9 + [56]) = ($4 + [56])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $48(($9 + [32]), ($9 + [24]))
	$4 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	$6 = ([0] - $4)
	$4 = ($2 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($4 + [-12]))
	*(($8 + [-40])) = *(($4 + [-20]))
	*(($2 = ($8 + [-24]))) = (int_64)0
	*(($1 = ($8 + [-16]))) = [0]
	$7 = ($4 + [-4])
	*($2) = *($7)
	*(($8 + [-20])) = *($4)
	$2 = ($4 + [4])
	*($1) = *($2)
	*($2) = [0]
	*(($2 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$7 = ($4 + [8])
	*($2) = *($7)
	*(($8 + [-8])) = *(($4 + [12]))
	$2 = ($4 + [16])
	*($1) = *($2)
	*($2) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$8 = ($4 + [-24])
	
.LOOP $label$9:
	$4 = *(($8 + [12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $4
	CALL $128($4)
	
.LABEL $label$10
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $4
	CALL $128($4)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $2) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $128($1)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [64])
	(unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10228])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10036]
	$1 = (((int_32)$2 * (int_32)[12]) + [10036])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [512])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $127([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [544])
	CALL memcpy($5, $6, [8])
	*($5 + [12]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)3617211063646814208
	$6 = *($5 + [12])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)3617211063646814208
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $52(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $128($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [624])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $125 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10326]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10328])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10326]) = [1]
	$7 = ($7 << [16])
	*([0] + [10328]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10328])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10328]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10326]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10326]) = [1]
	$3 = ($3 << [16])
	*([0] + [10328]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10328])
	
.LABEL $label$8
	*([0] + [10328]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [624])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [624])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [624])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [624])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $127($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $136($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $128($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $128($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $128($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $128($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $128($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $128($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $128($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $128($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $128($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [624])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [624])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [624])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [624])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [624])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [624])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [624])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $46($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [624])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [624])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [624])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $46(CALL $47($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $125($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10240])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $128 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC _Z10parse_memoRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [32])
	*([0] + [4]) = $14
	*(($14 + [24])) = [0]
	*($14 + [16]) = (int_64)0
	$5 = CALL strlen([128])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$4 }
	*($14 + [16]) = ($5 << [1])
	$10 = (($14 + [16]) | [1])
	$8 = $10
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$13 = (($5 + [16]) & [-16])
	$8 = CALL $127($13)
	*($14 + [16]) = ($13 | [1])
	*($14 + [24]) = $8
	*($14 + [20]) = $5
	$10 = (($14 + [16]) | [1])
	
.LABEL $label$3
	CALL memcpy($8, [128], $5)
	
.LABEL $label$2
	*(($8 + $5)) = [0]
	$2 = ($0 + [1])
	$13 = *($14 + [20])
	$5 = *($14 + [16])
	$9 = ($0 + [4])
	$11 = [0]
	$12 = [0]
	
.LOOP $label$6:
	$7 = ($8 & [1])
	$8 = *($0)
	$6 = ( *($9) ? uint_32($8 >> [1]) : $7 )
	if ( ($6 <= $11) ){ goto $label$5 }
	$8 = $11
	$4 = ($5 & [1])
	$5 = ( $13 ? uint_32(($5 & [254]) >> [1]) : $4 )
	if ( ($5 == 0) ){ goto $label$7 }
	$13 = ($3 + $11)
	$3 = ( *(($0 + [8])) ? $2 : $7 )
	$6 = ($3 + $6)
	$8 = ($6 - $13)
	if ( ((int_32)$8 < (int_32)$5) ){ goto $label$5 }
	$4 = ( *((($14 + [16]) + [8])) ? $10 : $4 )
	$7 = *($4)
	
.LOOP $label$8:
	$8 = (($8 - $5) + [1])
	if ( ($8 == 0) ){ goto $label$5 }
	$8 = CALL memchr($13, $7, $8)
	if ( ($8 == 0) ){ goto $label$5 }
	if ( (CALL memcmp($8, $4, $5) == 0) ){ goto $label$9 }
	$13 = ($8 + [1])
	$8 = ($6 - $13)
	if ( ((int_32)$8 >= (int_32)$5) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$9
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$5 }
	$8 = ($8 - $3)
	
.LABEL $label$7
	if ( ((int_32)$8 == (int_32)[-1]) ){ goto $label$5 }
	CALL $138($14, $0, $11, ($8 - $11), $0)
	$5 = ($1 + [4])
	$13 = *($5)
	if ( ((uint_32)$13 >= (uint_32)*(($1 + [8]))) ){ goto $label$11 }
	*($13) = *($14)
	$13 = ($14 + [8])
	*(($13 + [8])) = *($13)
	*($13) = [0]
	*($14) = [0]
	*($14 + [4]) = [0]
	*($5) = (*($5) + [12])
	goto $label$10 
	
.LABEL $label$11
	CALL $9($1, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$10 }
	CALL $128(*(($14 + [8])))
	
.LABEL $label$10
	$12 = [1]
	$5 = *($14 + [16])
	$13 = *($14 + [20])
	$11 = (( $13 ? uint_32($5 >> [1]) : ($5 & [1]) ) + $8)
	goto $label$6 
	
.LABEL $label$5
	if ( (($12 & [1]) == 0) ){ goto $label$12 }
	CALL $138($14, $0, $11, [-1], $0)
	$5 = ($1 + [4])
	$8 = *($5)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [8]))) ){ goto $label$13 }
	*($8) = *($14)
	$8 = ($14 + [8])
	*(($8 + [8])) = *($8)
	*($8) = [0]
	*($14) = [0]
	*($14 + [4]) = [0]
	*($5) = (*($5) + [12])
	goto $label$12 
	
.LABEL $label$13
	CALL $9($1, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$12 }
	CALL $128(*($14 + [8]))
	
.LABEL $label$12
	if ( ((*($14 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL $128(*(($14 + [24])))
	
.LABEL $label$14
	*([0] + [4]) = ($14 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $129(($14 + [16]))
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $127(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $128(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $128($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _Z16uint64_to_stringy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL strlen([112])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	$4 = $5
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($3 + [16]) & [-16])
	$4 = CALL $127($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	$5 = ($0 + [1])
	
.LABEL $label$3
	CALL memcpy($4, [112], $3)
	
.LABEL $label$2
	*(($4 + $3)) = [0]
	$4 = ($0 + [4])
	
.LOOP $label$5:
	$3 = (CASTING uint_32)(uint_64 ((uint_64)$1 % (uint_64)(int_64)10))
	CALL $7($6, ( ($3 | [48]) ? ($3 + [55]) : ($3 <= [10]) ), $0)
	$2 = ((uint_64)$1 / (uint_64)(int_64)10)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($5) = [0]
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*($4) = [0]
	
.LABEL $label$6
	CALL $132($0, [0])
	*(($0 + [8])) = *(($6 + [8]))
	*($0) = *($6)
	$3 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $2
	if ( $3 ){ goto $label$5 }
	*([0] + [4]) = ($6 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $129($0)
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($5 + [15]) = $1
	$1 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($3 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = (($3 + [17]) & [-16])
	$1 = CALL $127($4)
	*($0) = ($4 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($5 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $133($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $3)
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $129($0)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_64 .FUNC _Z23read_uint64_from_stringNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	if ( (*($0) & [1]) ){ goto $label$3 }
	$0 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$0 = *($0 + [8])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = CALL strlen($0)
	CALL eosio_assert(((int_32)$2 < (int_32)[20]), [16])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	$3 = (int_64)0
	
.LOOP $label$5:
	$1 = *($0)
	CALL eosio_assert(((int_64)$1 > (int_64)47), [48])
	CALL eosio_assert(((int_64)$1 < (int_64)58), [80])
	$0 = ($0 + [1])
	$3 = ((int_64)((int_64)$1 + (int_64)((int_64)$3 * (int_64)10)) + (int_64)-48)
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	return $3
	
.LABEL $label$4
	return (int_64)0
	
.LABEL $label$1
	return (int_64)0
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = (*([0] + [4]) - [192])
	$5 = $3
	*([0] + [4]) = $3
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	CALL $54($5, $3, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	CALL memcpy(($5 + [64]), $5, [64])
	CALL memcpy(($5 + [128]), ($5 + [64]), [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$4 = *((*($1) + $4))
	
.LABEL $label$6
	CALL void $1((int_32 ($5 + [128])), (int_32 $4))
	*([0] + [4]) = ($5 + [192])
	return [1]
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	$3 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [880]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($3, $7)
	*(($9 + [56])) = (int_64)-1
	$6 = (int_64)0
	*(($9 + [64])) = (int_64)0
	$3 = *($0)
	*(($9 + [48])) = $3
	*($9 + [32]) = $3
	*($9 + [40]) = $3
	*(($9 + [72])) = [0]
	$5 = (int_64)59
	$4 = [880]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$12 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	*($9 + [24]) = $7
	*($9 + [16]) = $3
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [896]
	$7 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$18 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$2 = ($2 + [165])
	goto $label$16 
	
.LABEL $label$18
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$14
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$13 }
	*($9 + [8]) = $7
	CALL $35(($9 + [32]), [2], ($9 + [16]), $0, ($9 + [8]), $1)
	$0 = *(($9 + [64]))
	if ( ($0 == 0) ){ goto $label$19 }
	$1 = ($9 + [68])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$21 }
	
.LOOP $label$22:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$23 }
	CALL $128($2)
	
.LABEL $label$23
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$22 }
	$4 = *(($9 + [64]))
	goto $label$20 
	
.LABEL $label$21
	$4 = $0
	
.LABEL $label$20
	*($1) = $0
	CALL $128($4)
	
.LABEL $label$19
	*([0] + [4]) = ($9 + [80])
}

void .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [32])) = (int_64)-1
	*(($2 = ($5 + [40]))) = (int_64)0
	$3 = *($0)
	*(($5 + [24])) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = $3
	*(($5 + [48])) = [0]
	*($5 + [56]) = (int_64)0
	$0 = ($5 + [16])
	CALL $28($0, $3, ($5 + [56]))
	*($5 + [56]) = (int_64)1
	CALL $29($0, ($5 + [56]), *($5 + [8]))
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($5 + [44])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $128($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($5 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $128($0)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [240])
	*([0] + [4]) = $9
	*(($9 + [128])) = $0
	*(($9 + [136])) = (int_64)-1
	$6 = (int_64)0
	*(($9 + [144])) = (int_64)0
	*(($9 + [152])) = [0]
	*($9 + [120]) = $0
	*($9 + [112]) = $0
	*(($9 + [156])) = [0]
	*($9 + [160]) = $0
	*(($9 + [168])) = $0
	*(($9 + [176])) = (int_64)-1
	*(($9 + [184])) = [0]
	*(($9 + [188])) = [0]
	*(($9 + [192])) = [0]
	*($9 + [200]) = $0
	*(($9 + [208])) = $0
	*(($9 + [216])) = (int_64)-1
	*(($9 + [224])) = [0]
	*(($9 + [228])) = [0]
	*(($9 + [232])) = [0]
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$9 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [160]
	$7 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$15 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$3 = ($3 + [165])
	goto $label$13 
	
.LABEL $label$15
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$11
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$10 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$9 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [1]
	*($9) = *($9 + [104])
	CALL $12(($9 + [112]), $9)
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $22(($9 + [112]))
	*([0] + [4]) = ($9 + [240])
	return (unreachable)
	
.LABEL $label$7
	if ( ((int_64)$2 > (int_64)-4992623623903641601) ){ goto $label$21 }
	if ( ((int_64)$2 == (int_64)-8281831529777201152) ){ goto $label$20 }
	if ( ((int_64)$2 == (int_64)-4997502823789756416) ){ goto $label$19 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$16 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [2]
	*($9 + [8 align=4]) = *($9 + [96])
	CALL $14(($9 + [112]), ($9 + [8]))
	goto $label$16 
	
.LABEL $label$21
	if ( ((int_64)$2 == (int_64)-4992623623903641600) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)-3106564269734199296) ){ goto $label$17 }
	if ( ((int_64)$2 != (int_64)3626083795288981504) ){ goto $label$16 }
	*($9 + [68]) = [0]
	*($9 + [64]) = [3]
	*($9 + [40 align=4]) = *($9 + [64])
	CALL $20(($9 + [112]), ($9 + [40]))
	goto $label$16 
	
.LABEL $label$20
	*($9 + [84]) = [0]
	*($9 + [80]) = [4]
	*($9 + [24 align=4]) = *($9 + [80])
	CALL $17(($9 + [112]), ($9 + [24]))
	goto $label$16 
	
.LABEL $label$19
	*($9 + [60]) = [0]
	*($9 + [56]) = [5]
	*($9 + [48 align=4]) = *($9 + [56])
	CALL $20(($9 + [112]), ($9 + [48]))
	goto $label$16 
	
.LABEL $label$18
	*($9 + [92]) = [0]
	*($9 + [88]) = [6]
	*($9 + [16 align=4]) = *($9 + [88])
	CALL $14(($9 + [112]), ($9 + [16]))
	goto $label$16 
	
.LABEL $label$17
	*($9 + [76]) = [0]
	*($9 + [72]) = [7]
	*($9 + [32 align=4]) = *($9 + [72])
	CALL $17(($9 + [112]), ($9 + [32]))
	
.LABEL $label$16
	CALL eosio_exit([0])
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$5 = *($3 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$2:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$1 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$4 }
	
.LABEL $label$3
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$2 }
	if ( ((int_64)$5 != (int_64)1397703940) ){ goto $label$1 }
	$6 = *($0)
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$5 }
	*(($7 = (($8 + [80]) + [8]))) = *(($3 + [8]))
	*($8 + [80]) = *($3)
	CALL $137(($8 + [64]), $4)
	*(($8 + [8])) = *($7)
	*($8) = *($8 + [80])
	CALL $110($0, $1, $2, $8, ($8 + [64]))
	if ( ((*($8 + [64]) & [1]) == 0) ){ goto $label$1 }
	CALL $128(*($8 + [72]))
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$1 }
	*(($7 = (($8 + [48]) + [8]))) = *(($3 + [8]))
	*($8 + [48]) = *($3)
	CALL $137(($8 + [32]), $4)
	*((($8 + [16]) + [8])) = *($7)
	*($8 + [16]) = *($8 + [48])
	CALL $111($0, $1, $2, ($8 + [16]), ($8 + [32]))
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL $128(*($8 + [40]))
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [96])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [912])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [976])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $108(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $109(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $128(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [400])
	*([0] + [4]) = $16
	$2 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [880]
	$12 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($9)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($2, $12)
	$2 = CALL current_time()
	$3 = (CASTING int_64)(int_32 CALL tapos_block_prefix())
	$4 = (CASTING int_64)(int_32 CALL tapos_block_num())
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [144]
	$12 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$12 }
	$5 = *($9)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$8
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$7 }
	$11 = *($0)
	$5 = [32]
	*((($16 + [144]) + [32])) = [0]
	*($16 + [152]) = $11
	*($16 + [144]) = $12
	*($16 + [160]) = (int_64)-1
	*($16 + [168]) = (int_64)0
	CALL $67(($16 + [144]), (int_64)5459781, [1040])
	$15 = *($16 + [168])
	if ( ($15 == 0) ){ goto $label$13 }
	$14 = ($16 + [172])
	$9 = *($14)
	if ( ((int_32)$9 == (int_32)$15) ){ goto $label$15 }
	
.LOOP $label$16:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$17 }
	CALL $128($6)
	
.LABEL $label$17
	if ( ((int_32)$15 != (int_32)$9) ){ goto $label$16 }
	$9 = *(($16 + [168]))
	goto $label$14 
	
.LABEL $label$15
	$9 = $15
	
.LABEL $label$14
	*($14) = $15
	CALL $128($9)
	
.LABEL $label$13
	$11 = *($1 + [56])
	*($16 + [144]) = ((int_64))(((int_64)((int_64)((int_64)$4 * (int_64)$3) + (int_64)$2) + (int_64)*($1 + [8])) - $11) + (int_64)((int_64)$11 * (int_64)*($1)))
	CALL sha256(($16 + [144]), [4], ($16 + [320]))
	*(($9 = (($16 + [288]) + [24]))) = *((($16 + [320]) + [24]))
	*(($6 = (($16 + [288]) + [16]))) = *((($16 + [320]) + [16]))
	*($16 + [296]) = *($16 + [328])
	*($16 + [288]) = *($16 + [320])
	*((($16 + [144]) + [24])) = *($9)
	*((($16 + [144]) + [16])) = *($6)
	*($16 + [152]) = *($16 + [296])
	*($16 + [144]) = *($16 + [288])
	$15 = [0]
	$14 = [0]
	
.LOOP $label$21:
	$6 = *(((($16 + [144]) + $5) + [-1]))
	$9 = ($6 & [15])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	$7 = ($14 & [255])
	if ( ($7 == 0) ){ goto $label$26 }
	if ( ((int_32)$7 == (int_32)[1]) ){ goto $label$20 }
	
.LABEL $label$27
	$9 = $15
	if ( ((uint_32)$6 <= (uint_32)[159]) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$14 = [1]
	if ( ((uint_32)$6 > (uint_32)[159]) ){ goto $label$24 }
	
.LABEL $label$25
	$15 = uint_32($6 >> [4])
	$6 = ($14 & [255])
	if ( ($6 == 0) ){ goto $label$23 }
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$19 }
	
.LABEL $label$24
	$15 = $9
	goto $label$22 
	
.LABEL $label$23
	$14 = [1]
	
.LABEL $label$22
	$5 = ($5 + [-1])
	if ( ((int_32)$5 > (int_32)[0]) ){ goto $label$21 }
	goto $label$18 
	
.LABEL $label$20
	$15 = ((((int_32)$9 * (int_32)[10]) & [254]) + ($15 & [255]))
	goto $label$18 
	
.LABEL $label$19
	$15 = (($9 & [255]) + (((int_32)$15 * (int_32)[10]) & [254]))
	
.LABEL $label$18
	*(($9 = (($16 + [240]) + [24]))) = *((($16 + [320]) + [24]))
	*(($5 = (($16 + [240]) + [16]))) = *((($16 + [320]) + [16]))
	*($16 + [248]) = *($16 + [328])
	*($16 + [240]) = *($16 + [320])
	*((($16 + [32]) + [24])) = *($9)
	*((($16 + [32]) + [16])) = *($5)
	*($16 + [32]) = *($16 + [240])
	*($16 + [40]) = *($16 + [248])
	CALL $56(($16 + [272]), $0, ($16 + [32]))
	$9 = *($1 + [48])
	CALL eosio_assert(($9 <= [4]), [112])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [112])
	$6 = [1]
	CALL eosio_assert([1], [112])
	CALL eosio_assert([1], [112])
	$5 = ($15 & [255])
	$5 = ( [1] ? ( [2] ? [3] : ($5 <= [67]) ) : ($5 <= [34]) )
	if ( ((int_32)$5 != (int_32)[2]) ){ goto $label$29 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$28 }
	
.LABEL $label$29
	if ( ((int_32)$5 != (int_32)[3]) ){ goto $label$30 }
	if ( ((int_32)$9 == (int_32)[2]) ){ goto $label$28 }
	
.LABEL $label$30
	$15 = ($15 & [255])
	if ( ((uint_32)$15 > (uint_32)[33]) ){ goto $label$31 }
	if ( ((int_32)$9 == (int_32)[3]) ){ goto $label$28 }
	
.LABEL $label$31
	$6 = ([0] - ((((int_32)$5 == (int_32)[3]) & ((int_32)$9 == (int_32)[1])) | ((($15 <= [34]) & ((int_32)$9 == (int_32)[2])) | (((int_32)$5 == (int_32)[2]) & ((int_32)$9 == (int_32)[3])))))
	
.LABEL $label$28
	*($16 + [239]) = $6
	CALL eosio_assert([1], [912])
	$11 = (int_64)5459781
	$9 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$35 }
	
.LOOP $label$36:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$33 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$36 }
	
.LABEL $label$35
	$5 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$5 = [0]
	
.LABEL $label$32
	CALL eosio_assert($5, [976])
	*((($16 + [144]) + [24])) = (int_64)-1
	*((($16 + [144]) + [32])) = (int_64)0
	$11 = *($0)
	*(($16 + [160])) = $11
	*($16 + [144]) = $11
	*($16 + [152]) = $11
	$9 = [0]
	*(($16 + [184])) = [0]
	*($16 + [192]) = $11
	*(($16 + [200])) = $11
	*(($16 + [208])) = (int_64)-1
	*(($16 + [216])) = [0]
	*(($16 + [220])) = [0]
	*(($16 + [224])) = [0]
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$38 }
	$13 = *(($1 + [32]))
	$8 = (CASTING float_64)(int_64 *($1 + [24]))
	$10 = (Rounds 0)(((float_64)$8 + (float_64)((float_64)$8 * (float_64)(float_64)0.95)))
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [912])
	$15 = ($1 + [24])
	$11 = (uint_64)$13 >> (uint_64)(int_64)8)
	
.LOOP $label$40:
	$5 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$39 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$41 }
	
.LOOP $label$42:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$42 }
	
.LABEL $label$41
	$5 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	CALL eosio_assert($5, [976])
	*($16 + [128]) = $10
	*($16 + [136]) = $13
	$11 = *(($1 + [8]))
	CALL $57(($16 + [112]), $0, $1)
	*(($16 + [8])) = *($16 + [136])
	*($16) = *($16 + [128])
	CALL $58(($16 + [144]), $11, $16, ($16 + [112]))
	if ( ((*($16 + [112]) & [1]) == 0) ){ goto $label$37 }
	CALL $128(*($16 + [120]))
	goto $label$37 
	
.LABEL $label$38
	$15 = ($1 + [24])
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$37 }
	*($16 + [104]) = (int_64)1397703940
	*($16 + [96]) = *(($1 + [24]))
	$11 = *(($1 + [8]))
	CALL $59(($16 + [80]), $0, $1)
	*((($16 + [16]) + [8])) = *($16 + [104])
	*($16 + [16]) = *($16 + [96])
	CALL $58(($16 + [144]), $11, ($16 + [16]), ($16 + [80]))
	if ( ((*($16 + [80]) & [1]) == 0) ){ goto $label$37 }
	CALL $128(*($16 + [88]))
	
.LABEL $label$37
	*(($16 + [392])) = (int_64)0
	*(($9 = (($16 + [376]) + [8]))) = (int_64)0
	*($16 + [376]) = (int_64)0
	$5 = ($0 + [48])
	CALL $60(($16 + [352]), $5, *($0), ($16 + [376]))
	$11 = (int_64)
	*($16 + [368]) = $11(*($16 + [368]) - *($15)))
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [1008])
	CALL $61($5, ($16 + [352]), *($0))
	*($9) = (int_64)0
	*($16 + [376]) = (int_64)0
	$9 = ($0 + [88])
	CALL $62(($16 + [352]), $9, *($0), ($16 + [376]))
	*($16 + [352]) = ((int_64)*($16 + [352]) + (int_64)1)
	$11 = ((int_64)*($16 + [360]) + (int_64)1)
	*($16 + [360]) = ( (int_64)1 ? $11 : ((uint_64)$11 > (uint_64)(int_64)1000) )
	CALL $63($9, ($16 + [352]), *($0))
	*($16 + [72]) = *($16 + [352])
	$11 = *($16 + [360])
	*($16 + [64]) = $11
	if ( ((int_64)$11 != (int_64)0) ){ goto $label$43 }
	*($16 + [64]) = (int_64)1000
	$11 = (int_64)1000
	
.LABEL $label$43
	$14 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$14) ){ goto $label$44 }
	$9 = ($6 + [-24])
	$15 = ([0] - $14)
	
.LOOP $label$45:
	if ( ((int_64)*(*($9)) == (int_64)$11) ){ goto $label$44 }
	$6 = $9
	$5 = ($9 + [-24])
	$9 = $5
	if ( ((int_32)($5 + $15) != (int_32)[-24]) ){ goto $label$45 }
	
.LABEL $label$44
	$9 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$14) ){ goto $label$49 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [76]) == (int_32)$9), [192])
	if ( $5 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$5 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4992623611911714304, $11)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$47 }
	$5 = CALL $64($9, $5)
	CALL eosio_assert(((int_32)*($5 + [76]) == (int_32)$9), [192])
	
.LABEL $label$48
	*($16 + [384]) = $1
	*($16 + [380]) = ($16 + [72])
	*($16 + [376]) = ($16 + [64])
	*($16 + [388]) = ($16 + [239])
	*($16 + [392]) = ($16 + [272])
	CALL eosio_assert([1], [656])
	CALL $65($9, $5, (int_64)0, ($16 + [376]))
	goto $label$46 
	
.LABEL $label$47
	$11 = *($0)
	*($16 + [384]) = $1
	*($16 + [380]) = ($16 + [72])
	*($16 + [376]) = ($16 + [64])
	*($16 + [388]) = ($16 + [239])
	*($16 + [392]) = ($16 + [272])
	CALL $66(($16 + [352]), $9, $11, ($16 + [376]))
	
.LABEL $label$46
	$6 = *(($16 + [216]))
	if ( ($6 == 0) ){ goto $label$50 }
	$15 = ($16 + [220])
	$9 = *($15)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$52 }
	
.LOOP $label$53:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$54 }
	CALL $128($5)
	
.LABEL $label$54
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$53 }
	$9 = *(($16 + [216]))
	goto $label$51 
	
.LABEL $label$52
	$9 = $6
	
.LABEL $label$51
	*($15) = $6
	CALL $128($9)
	
.LABEL $label$50
	$6 = *(($16 + [176]))
	if ( ($6 == 0) ){ goto $label$55 }
	$15 = ($16 + [180])
	$9 = *($15)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$57 }
	
.LOOP $label$58:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$59 }
	CALL $128($5)
	
.LABEL $label$59
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$58 }
	$9 = *(($16 + [176]))
	goto $label$56 
	
.LABEL $label$57
	$9 = $6
	
.LABEL $label$56
	*($15) = $6
	CALL $128($9)
	
.LABEL $label$55
	if ( ((*($16 + [272]) & [1]) == 0) ){ goto $label$60 }
	CALL $128(*($16 + [280]))
	
.LABEL $label$60
	*([0] + [4]) = ($16 + [400])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [16])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [84])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-4992623611911714304, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [84]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [32])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [88]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-4992623611911714303, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [88])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $18 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$1 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [640]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($1, $7)
	*(($9 + [32])) = (int_64)-1
	*(($4 = ($9 + [40]))) = (int_64)0
	$6 = *($0)
	*(($9 + [24])) = $6
	*($9 + [8]) = $6
	*($9 + [16]) = $6
	*(($9 + [48])) = [0]
	*($9 + [56]) = (int_64)0
	$2 = ($9 + [16])
	CALL $28($2, $6, ($9 + [56]))
	*($9 + [56]) = (int_64)0
	CALL $29($2, ($9 + [56]), *($9 + [8]))
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$7 }
	$3 = ($9 + [44])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $128($2)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($9 + [40]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $0
	
.LABEL $label$8
	*($3) = $0
	CALL $128($4)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $19 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	$2 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [176]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)1) ){ goto $label$6 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($2, $8)
	*(($10 + [32])) = (int_64)-1
	*(($10 + [40])) = (int_64)0
	$7 = *($0)
	*(($10 + [24])) = $7
	*($10 + [8]) = $7
	*($10 + [16]) = $7
	*(($10 + [48])) = [0]
	*($10 + [72]) = $1
	$5 = ($10 + [16])
	$3 = CALL db_find_i64($7, $7, (int_64)4342138543854845952, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $24($5, $3) + [8]) == (int_32)$5), [192])
	goto $label$7 
	
.LABEL $label$8
	*($10 + [64]) = ($10 + [72])
	CALL $27(($10 + [56]), $5, $7, ($10 + [64]))
	
.LABEL $label$7
	$0 = *(($10 + [40]))
	if ( ($0 == 0) ){ goto $label$9 }
	$4 = ($10 + [44])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	CALL $128($3)
	
.LABEL $label$13
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$12 }
	$5 = *(($10 + [40]))
	goto $label$10 
	
.LABEL $label$11
	$5 = $0
	
.LABEL $label$10
	*($4) = $0
	CALL $128($5)
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [80])
}

void .FUNC $58 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [208])
	*([0] + [4]) = $14
	*(($14 + [168])) = [0]
	*($14 + [160]) = (int_64)0
	$7 = CALL strlen([128])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$5 }
	*($14 + [160]) = ($7 << [1])
	$5 = (($14 + [160]) | [1])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($7 + [16]) & [-16])
	$5 = CALL $127($4)
	*($14 + [160]) = ($4 | [1])
	*($14 + [168]) = $5
	*($14 + [164]) = $7
	
.LABEL $label$4
	CALL memcpy($5, [128], $7)
	
.LABEL $label$3
	*(($5 + $7)) = [0]
	*(($14 + [152])) = [0]
	*($14 + [144]) = (int_64)0
	$7 = CALL strlen([1168])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$8 }
	*($14 + [144]) = ($7 << [1])
	$5 = (($14 + [144]) | [1])
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = (($7 + [16]) & [-16])
	$5 = CALL $127($4)
	*($14 + [144]) = ($4 | [1])
	*($14 + [152]) = $5
	*($14 + [148]) = $7
	
.LABEL $label$7
	CALL memcpy($5, [1168], $7)
	
.LABEL $label$6
	*(($5 + $7)) = [0]
	$7 = *($14 + [160])
	$5 = ($7 & [1])
	$4 = (($14 + [160]) | [1])
	CALL $133(($14 + [144]), ( *($14 + [168]) ? $4 : $5 ), ( *($14 + [164]) ? uint_32($7 >> [1]) : $5 ))
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [144]
	$10 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$14 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$5 = ($5 + [165])
	goto $label$12 
	
.LABEL $label$14
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$10
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$9 }
	$9 = *(($2 + [8]))
	*((($14 + [112]) + [8])) = $9
	$11 = *($2)
	*((($14 + [8]) + [8])) = $9
	*($14 + [112]) = $11
	*($14 + [12]) = *($14 + [116])
	*($14 + [8]) = *($14 + [112])
	CALL $92(($14 + [128]), $0, $10, $1, ($14 + [8]))
	$7 = *($14 + [128])
	$5 = ($7 & [1])
	CALL $133(($14 + [144]), ( *($14 + [136]) ? (($14 + [128]) | [1]) : $5 ), ( *($14 + [132]) ? uint_32($7 >> [1]) : $5 ))
	$7 = *($14 + [160])
	$5 = ($7 & [1])
	CALL $133(($14 + [144]), ( *((($14 + [160]) + [8])) ? $4 : $5 ), ( *($14 + [164]) ? uint_32($7 >> [1]) : $5 ))
	$7 = *($3)
	$5 = ($7 & [1])
	CALL $133(($14 + [144]), ( *($3 + [8]) ? ($3 + [1]) : $5 ), ( *($3 + [4]) ? uint_32($7 >> [1]) : $5 ))
	$6 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [880]
	$10 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$20 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$5 = ($5 + [165])
	goto $label$18 
	
.LABEL $label$20
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$16
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$15 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [144]
	$12 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$26 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$5 = ($5 + [165])
	goto $label$24 
	
.LABEL $label$26
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$22
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$12 = ((int_64)$11 | (int_64)$12)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$21 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [160]
	$13 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$32 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$5 = ($5 + [165])
	goto $label$30 
	
.LABEL $label$32
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$28
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$27 }
	*((($14 + [24]) + [28])) = *(($2 + [12]))
	*((($14 + [24]) + [24])) = *(($2 + [8]))
	*((($14 + [24]) + [20])) = *(($2 + [4]))
	*($14 + [32]) = $1
	*($14 + [24]) = $6
	*($14 + [40]) = *($2)
	CALL $137((($14 + [24]) + [32]), ($14 + [144]))
	*($14 + [80]) = $13
	*($14 + [72]) = $12
	*(($7 = CALL $127([16]))) = $6
	*($7 + [8]) = $10
	*((($14 + [72]) + [32])) = [0]
	$5 = ($7 + [16])
	*((($14 + [72]) + [24])) = $5
	*((($14 + [72]) + [20])) = $5
	*($14 + [88]) = $7
	*($14 + [100]) = [0]
	*((($14 + [72]) + [36])) = [0]
	$7 = *($14 + [56])
	$5 = ( *((($14 + [24]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [32])
	$9 = (CASTING uint_64)(uint_32 $5)
	$5 = (($14 + [72]) + [28])
	
.LOOP $label$33:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$33 }
	if ( ($7 == 0) ){ goto $label$35 }
	CALL $42($5, $7)
	$5 = *(($14 + [104]))
	$7 = *(($14 + [100]))
	goto $label$34 
	
.LABEL $label$35
	$5 = [0]
	$7 = [0]
	
.LABEL $label$34
	*($14 + [196]) = $7
	*($14 + [192]) = $7
	*($14 + [200]) = $5
	*($14 + [176]) = ($14 + [192])
	*($14 + [184]) = ($14 + [24])
	CALL $93(($14 + [184]), ($14 + [176]))
	CALL $94(($14 + [192]), ($14 + [72]))
	$7 = *($14 + [192])
	CALL send_inline($7, (*($14 + [196]) - $7))
	$7 = *($14 + [192])
	if ( ($7 == 0) ){ goto $label$36 }
	*($14 + [196]) = $7
	CALL $128($7)
	
.LABEL $label$36
	$7 = *($14 + [100])
	if ( ($7 == 0) ){ goto $label$37 }
	*(($14 + [104])) = $7
	CALL $128($7)
	
.LABEL $label$37
	$7 = *($14 + [88])
	if ( ($7 == 0) ){ goto $label$38 }
	*(($14 + [92])) = $7
	CALL $128($7)
	
.LABEL $label$38
	if ( ((*($14 + [56]) & [1]) == 0) ){ goto $label$39 }
	CALL $128(*(($14 + [64])))
	
.LABEL $label$39
	if ( ((*($14 + [128]) & [1]) == 0) ){ goto $label$40 }
	CALL $128(*(($14 + [136])))
	
.LABEL $label$40
	if ( ((*($14 + [144]) & [1]) == 0) ){ goto $label$41 }
	CALL $128(*($14 + [152]))
	
.LABEL $label$41
	if ( ((*($14 + [160]) & [1]) == 0) ){ goto $label$42 }
	CALL $128(*(($14 + [168])))
	
.LABEL $label$42
	*([0] + [4]) = ($14 + [208])
	return (unreachable)
	
.LABEL $label$2
	CALL $129(($14 + [160]))
	
.LABEL $label$1
	CALL $129(($14 + [144]))
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL strlen([1088])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $127($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($5, [1088], $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	*($6 + [8]) = *($2 + [8])
	CALL $91(($6 + [16]), ($6 + [8]))
	$3 = *($6 + [16])
	$5 = ($3 & [1])
	CALL $133($0, ( *($6 + [24]) ? (($6 + [16]) | [1]) : $5 ), ( *($6 + [20]) ? uint_32($3 >> [1]) : $5 ))
	CALL $134($0, [1104])
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $128(*(($6 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $129($0)
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	*($1) = *(*($3))
	CALL eosio_assert([1], [816])
	CALL eosio_assert([1], [624])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)3617211063646814208) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)3617211063646814209
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*(($4 = CALL $127([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [624])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)3617211063646814208, $2, (int_64)3617211063646814208, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3617211063646814208) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3617211063646814209
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)3617211063646814208
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3617211063646814208
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $52(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $128($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $127(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $128($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $128($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*(($4 = CALL $127([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [624])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)3617211063646814208, $2, (int_64)3617211063646814208, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3617211063646814208) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3617211063646814209
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)3617211063646814208
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3617211063646814208
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $52(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $128($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	$4 = [0]
	*((($0 = CALL memset($0, [0], [64])) + [32])) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [912])
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [976])
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [32]) = $0
	*($6 + [36]) = ($0 + [8])
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [24])
	*($6 + [48]) = ($0 + [40])
	*($6 + [52]) = ($0 + [48])
	*($6 + [56]) = ($0 + [56])
	CALL $55(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*(($4 = CALL $127([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [624])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)4918969584758816768, $2, (int_64)4918969584758816768, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4918969584758816768) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4918969584758816769
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)4918969584758816768
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4918969584758816768
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $33(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $128($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	$7 = [0]
	$3 = CALL memset($6, [0], [65])
	$6 = $3
	
.LOOP $label$1:
	$4 = *(($2 + $7))
	$5 = ($4 & [15])
	*(($6 + [1])) = ( ($5 | [48]) ? ($5 + [55]) : ($5 <= [10]) )
	$5 = uint_32($4 >> [4])
	*($6) = ( ($5 | [48]) ? ($5 + [55]) : ($4 <= [160]) )
	$6 = ($6 + [2])
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)[32]) ){ goto $label$1 }
	*($0) = [0]
	*(($0 + [4])) = (int_64)0
	*($3 + [64]) = [0]
	$6 = CALL strlen($3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($6 << [1])
	$7 = ($0 + [1])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($6 + [16]) & [-16])
	$7 = CALL $127($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $7
	*($0 + [4]) = $6
	
.LABEL $label$4
	CALL memcpy($7, $3, $6)
	
.LABEL $label$3
	*(($7 + $6)) = [0]
	*([0] + [4]) = ($3 + [80])
	return (unreachable)
	
.LABEL $label$2
	CALL $129($0)
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL strlen([1088])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $127($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($5, [1088], $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	*($6 + [8]) = *($2 + [8])
	CALL $91(($6 + [16]), ($6 + [8]))
	$3 = *($6 + [16])
	$5 = ($3 & [1])
	CALL $133($0, ( *($6 + [24]) ? (($6 + [16]) | [1]) : $5 ), ( *($6 + [20]) ? uint_32($3 >> [1]) : $5 ))
	CALL $134($0, [1216])
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $128(*(($6 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $129($0)
}

int_32 .FUNC $116 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	CALL $137(($11 + [8]), $4)
	if ( (*($11 + [8]) & [1]) ){ goto $label$4 }
	$4 = (($11 + [8]) | [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($11 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = CALL strlen($4)
	CALL eosio_assert(((int_32)$8 < (int_32)[20]), [16])
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$2 }
	$9 = (int_64)0
	
.LOOP $label$5:
	$7 = *($4)
	CALL eosio_assert(((int_64)$7 > (int_64)47), [48])
	CALL eosio_assert(((int_64)$7 < (int_64)58), [80])
	$4 = ($4 + [1])
	$9 = ((int_64)((int_64)$7 + (int_64)((int_64)$9 * (int_64)10)) + (int_64)-48)
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)0
	
.LABEL $label$1
	if ( ((*($11 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $128(*($11 + [16]))
	
.LABEL $label$6
	$7 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$5 = *(($0 + [72]))
	$10 = *(($0 + [76]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$7 }
	$4 = ($10 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$8:
	if ( ((int_64)*(*($4)) == (int_64)$9) ){ goto $label$7 }
	$10 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = ($0 + [48])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$12 }
	$4 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)$6), [192])
	if ( $4 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$4 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-2849807356034285568, $9)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$10 }
	$4 = CALL $97($6, $4)
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)$6), [192])
	
.LABEL $label$11
	$8 = [-1]
	if ( ((int_64)$9 != (int_64)*($4)) ){ goto $label$9 }
	$8 = [-2]
	if ( ((int_64)*($4 + [8]) != (int_64)$2) ){ goto $label$9 }
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($4 + [32]))), [1280])
	$8 = [-3]
	if ( ((int_64)*($3) != (int_64)*($4 + [24])) ){ goto $label$9 }
	$8 = [-4]
	$0 = *($4 + [40])
	$10 = (CASTING uint_32)(uint_64 $7)
	if ( ($10 <= $0) ){ goto $label$9 }
	$8 = [-5]
	if ( ((uint_32)($10 - $0) > (uint_32)[2]) ){ goto $label$9 }
	$8 = [-6]
	if ( ((int_64)*($4 + [16]) != (int_64)$1) ){ goto $label$9 }
	CALL eosio_assert([1], [256])
	CALL eosio_assert([1], [304])
	$8 = [0]
	$10 = CALL db_next_i64(*($4 + [48]), ($11 + [24]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$13 }
	CALL $97($6, $10)
	
.LABEL $label$13
	CALL $117($6, $4)
	goto $label$9 
	
.LABEL $label$10
	$8 = [-33]
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [32])
	return $8
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [384])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [448])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $128($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $128($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
}

int_64 .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	*($8 + [16]) = (int_64)0
	$6 = ($0 + [8])
	*($8 + [16]) = ((int_64)CALL $36($6, *($0), ($8 + [16])) + (int_64)1)
	CALL $37($6, ($8 + [16]), *($0))
	$5 = *($8 + [16])
	$7 = CALL current_time()
	*(($8 + [44])) = [0]
	*(($8 + [48])) = [0]
	*($8 + [28]) = [0]
	*($8 + [32]) = [0]
	*($8 + [36]) = [0]
	*($8 + [40]) = [0]
	*($8 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*($8 + [52]) = [0]
	*(($8 + [56])) = [0]
	*(($8 + [60])) = [0]
	*($8 + [64]) = [0]
	*(($8 + [68])) = [0]
	*(($8 + [72])) = [0]
	CALL $115(($8 + [52]), $1, $2, $3, $4)
	$7 = *($0)
	*($8 + [8]) = (int_64)0
	*($8) = $5
	CALL $39(($8 + [80]), ($8 + [16]))
	$0 = *($8 + [80])
	CALL send_deferred($8, $7, $0, (*($8 + [84]) - $0), [0])
	$0 = *($8 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($8 + [84]) = $0
	CALL $128($0)
	
.LABEL $label$1
	CALL $40(($8 + [16]))
	*([0] + [4]) = ($8 + [96])
	return $5
}

int_64 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = (int_64)0
	$7 = ($0 + [8])
	*($9 + [16]) = ((int_64)CALL $36($7, *($0), ($9 + [16])) + (int_64)1)
	CALL $37($7, ($9 + [16]), *($0))
	$6 = *($9 + [16])
	$8 = CALL current_time()
	*(($9 + [44])) = [0]
	*(($9 + [48])) = [0]
	*($9 + [28]) = [0]
	*($9 + [32]) = [0]
	*($9 + [36]) = [0]
	*($9 + [40]) = [0]
	*($9 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*($9 + [52]) = [0]
	*(($9 + [56])) = [0]
	*(($9 + [60])) = [0]
	*($9 + [64]) = [0]
	*(($9 + [68])) = [0]
	*(($9 + [72])) = [0]
	CALL $38(($9 + [52]), $2, $3, $4, $5)
	*($9 + [36]) = $1
	$8 = *($0)
	*($9 + [8]) = (int_64)0
	*($9) = $6
	CALL $39(($9 + [80]), ($9 + [16]))
	$0 = *($9 + [80])
	CALL send_deferred($9, $8, $0, (*($9 + [84]) - $0), [0])
	$0 = *($9 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($9 + [84]) = $0
	CALL $128($0)
	
.LABEL $label$1
	CALL $40(($9 + [16]))
	*([0] + [4]) = ($9 + [96])
	return $6
}

void .FUNC $112 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	$3 = *($0)
	*(($5 + [24])) = $3
	*(($5 + [32])) = (int_64)-1
	*(($0 = ($5 + [40]))) = (int_64)0
	*($5 + [8]) = $3
	*($5 + [16]) = $3
	*(($5 + [48])) = [0]
	*($5 + [56]) = (int_64)0
	CALL eosio_assert((int_64)(CALL $28(($5 + [16]), $3, ($5 + [56])) == 0), [1344])
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($5 + [44])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $128($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($5 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $128($0)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $113 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	$4 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [880]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($4, $9)
	*($12 + [88]) = [0]
	*($12 + [80]) = (int_64)0
	CALL _Z10parse_memoRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEE($3, ($12 + [80]))
	$11 = [-16]
	$3 = *($12 + [80])
	if ( (((int_32)(*($12 + [84]) - $3) / (int_32)[12]) <= [2]) ){ goto $label$7 }
	CALL $137(($12 + [64]), $3)
	$11 = [-18]
	if ( CALL $135(($12 + [64]), [1168]) ){ goto $label$8 }
	CALL $137(($12 + [48]), (*($12 + [80]) + [12]))
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [144]
	$9 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$14 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$5 = ($5 + [165])
	goto $label$12 
	
.LABEL $label$14
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$9 }
	*(($6 = (($12 + [32]) + [8]))) = *(($2 + [8]))
	*($12 + [32]) = *($2)
	CALL $137(($12 + [16]), ($12 + [48]))
	*(($12 + [8])) = *($6)
	*($12) = *($12 + [32])
	$11 = CALL $116($0, $9, $1, $12, ($12 + [16]))
	if ( ((*($12 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL $128(*($12 + [24]))
	
.LABEL $label$15
	if ( ((*($12 + [48]) & [1]) == 0) ){ goto $label$8 }
	CALL $128(*($12 + [56]))
	
.LABEL $label$8
	if ( ((*($12 + [64]) & [1]) == 0) ){ goto $label$16 }
	CALL $128(*($12 + [72]))
	
.LABEL $label$16
	$3 = *($12 + [80])
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$17 }
	$6 = *($12 + [84])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$19 }
	$5 = ([0] - $3)
	$6 = ($6 + [-12])
	
.LOOP $label$20:
	if ( ((*($6) & [1]) == 0) ){ goto $label$21 }
	CALL $128(*(($6 + [8])))
	
.LABEL $label$21
	$6 = ($6 + [-12])
	if ( ((int_32)($6 + $5) != (int_32)[-12]) ){ goto $label$20 }
	$6 = *($12 + [80])
	goto $label$18 
	
.LABEL $label$19
	$6 = $3
	
.LABEL $label$18
	*($12 + [84]) = $3
	CALL $128($6)
	
.LABEL $label$17
	*([0] + [4]) = ($12 + [96])
	return $11
}

void .FUNC $110 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$20 = (*([0] + [4]) - [432])
	*([0] + [4]) = $20
	CALL require_auth($1)
	$15 = *($3)
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$15 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [112])
	*($20 + [384]) = [0]
	*($20 + [376]) = (int_64)0
	CALL _Z10parse_memoRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEE($4, ($20 + [376]))
	*(($20 + [312])) = (int_64)-1
	*(($9 = ($20 + [320]))) = (int_64)0
	$13 = *($0)
	*(($20 + [304])) = $13
	*($20 + [288]) = $13
	*($20 + [296]) = $13
	*(($20 + [328])) = [0]
	*($20 + [336]) = $13
	*(($20 + [344])) = $13
	*(($20 + [352])) = (int_64)-1
	*(($20 + [360])) = [0]
	*(($20 + [364])) = [0]
	*(($20 + [368])) = [0]
	$4 = *($20 + [376])
	if ( (((int_32)(*($20 + [380]) - $4) / (int_32)[12]) <= [2]) ){ goto $label$4 }
	CALL $137(($20 + [272]), $4)
	if ( CALL $135(($20 + [272]), [1168]) ){ goto $label$5 }
	CALL $137(($20 + [256]), (*($20 + [376]) + [12]))
	CALL eosio_assert(((uint_32)((int_32)(*($20 + [380]) - *($20 + [376])) / (int_32)[12]) > (uint_32)[3]), [1376])
	CALL $137(($20 + [240]), (*($20 + [376]) + [24]))
	$4 = ($4 & [1])
	$4 = *($20 + [240])
	if ( (( *($20 + [244]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$7 }
	$4 = ( *($20 + [248]) ? (($20 + [240]) | [1]) : $4 )
	$8 = [-1]
	
.LOOP $label$8:
	$7 = ($4 + $8)
	$5 = ($8 + [1])
	$8 = $5
	if ( *(($7 + [1])) ){ goto $label$8 }
	$16 = (CASTING uint_64)(uint_32 $5)
	$13 = (int_64)0
	$12 = (int_64)59
	$6 = (int_64)0
	
.LOOP $label$9:
	$14 = (int_64)0
	if ( ((uint_64)$13 >= (uint_64)$16) ){ goto $label$10 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$8 = ($8 + [165])
	goto $label$11 
	
.LABEL $label$12
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$14 }
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	goto $label$13 
	
.LABEL $label$14
	$14 = ((int_64)$14 & (int_64)15)
	
.LABEL $label$13
	$4 = ($4 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$6 = ((int_64)$14 | (int_64)$6)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$7
	$6 = (int_64)0
	
.LABEL $label$6
	CALL $137(($20 + [224]), (*($20 + [376]) + [36]))
	CALL $137(($20 + [208]), ($20 + [224]))
	if ( (*($20 + [208]) & [1]) ){ goto $label$18 }
	$4 = (($20 + [208]) | [1])
	goto $label$17 
	
.LABEL $label$18
	$4 = *($20 + [216])
	if ( ($4 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	$8 = CALL strlen($4)
	CALL eosio_assert(((int_32)$8 < (int_32)[20]), [16])
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$16 }
	$12 = (int_64)0
	
.LOOP $label$19:
	$13 = *($4)
	CALL eosio_assert(((int_64)$13 > (int_64)47), [48])
	CALL eosio_assert(((int_64)$13 < (int_64)58), [80])
	$4 = ($4 + [1])
	$12 = ((int_64)((int_64)$13 + (int_64)((int_64)$12 * (int_64)10)) + (int_64)-48)
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$19 }
	goto $label$15 
	
.LABEL $label$16
	$12 = (int_64)0
	
.LABEL $label$15
	if ( ((*($20 + [208]) & [1]) == 0) ){ goto $label$20 }
	CALL $128(*($20 + [216]))
	
.LABEL $label$20
	CALL eosio_assert(((int_64)$15 > (int_64)999), [1424])
	CALL eosio_assert(((int_64)$15 < (int_64)50001), [1472])
	if ( (CALL $135(($20 + [256]), [1520]) == 0) ){ goto $label$22 }
	if ( (CALL $135(($20 + [256]), [1536]) == 0) ){ goto $label$22 }
	if ( CALL $135(($20 + [256]), [1552]) ){ goto $label$21 }
	
.LABEL $label$22
	$13 = *($0)
	*(($20 + [80])) = $13
	*(($20 + [88])) = (int_64)-1
	*(($4 = ($20 + [96]))) = (int_64)0
	*($20 + [64]) = $13
	*($20 + [72]) = $13
	$5 = [0]
	*(($20 + [104])) = [0]
	$8 = CALL db_find_i64($13, $13, (int_64)4342138543854845952, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$23 }
	$7 = ($20 + [72])
	$5 = CALL $24($7, $8)
	CALL eosio_assert(((int_32)*($5 + [8]) == (int_32)$7), [192])
	
.LABEL $label$23
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$24 }
	$10 = ($20 + [100])
	$4 = *($10)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$26 }
	
.LOOP $label$27:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$28 }
	CALL $128($8)
	
.LABEL $label$28
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$27 }
	$4 = *(($20 + [96]))
	goto $label$25 
	
.LABEL $label$26
	$4 = $7
	
.LABEL $label$25
	*($10) = $7
	CALL $128($4)
	
.LABEL $label$24
	if ( $5 ){ goto $label$21 }
	CALL $112($0)
	CALL $118(($20 + [192]), $0)
	$13 = *($20 + [192])
	$14 = *($20 + [200])
	CALL eosio_assert([1], [1568])
	CALL eosio_assert([1], [1584])
	CALL eosio_assert(((int_64)$14 == (int_64)*($3 + [8])), [1280])
	CALL eosio_assert(((int_64)$15 <= (int_64)((int_64)$13 / (int_64)20)), [1616])
	$17 = *($20 + [192])
	if ( ((int_64)$17 < (int_64)5000001) ){ goto $label$29 }
	$18 = ((int_64)$17 + (int_64)-5000000)
	$13 = (int_64)0
	$14 = (int_64)59
	$4 = [1648]
	$15 = (int_64)0
	
.LOOP $label$30:
	$16 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$31 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$8 = ($8 + [165])
	goto $label$32 
	
.LABEL $label$33
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$31
	$4 = ($4 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$30 }
	*($20 + [184]) = (int_64)1397703940
	*($20 + [176]) = $18
	CALL eosio_assert((uint_64)(((int_64)$17 + (int_64)4611686018422387903) <= (int_64)9223372036854775807), [912])
	$13 = (uint_64)*($20 + [184]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$36:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$35 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	
.LOOP $label$38:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$35 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$38 }
	
.LABEL $label$37
	$8 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	$8 = [0]
	
.LABEL $label$34
	CALL eosio_assert($8, [976])
	*(($20 + [168])) = [0]
	*($20 + [160]) = (int_64)0
	$4 = CALL strlen([1664])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$41 }
	*($20 + [160]) = ($4 << [1])
	$8 = (($20 + [160]) | [1])
	if ( $4 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$7 = (($4 + [16]) & [-16])
	$8 = CALL $127($7)
	*($20 + [160]) = ($7 | [1])
	*($20 + [168]) = $8
	*($20 + [164]) = $4
	
.LABEL $label$40
	CALL memcpy($8, [1664], $4)
	
.LABEL $label$39
	*(($8 + $4)) = [0]
	*(($20 + [8])) = *((($20 + [176]) + [8]))
	*($20) = *($20 + [176])
	CALL $58(($20 + [288]), $15, $20, ($20 + [160]))
	if ( ((*($20 + [160]) & [1]) == 0) ){ goto $label$29 }
	CALL $128(*($20 + [168]))
	
.LABEL $label$29
	$13 = (int_64)0
	$14 = (int_64)59
	$4 = [1696]
	$15 = (int_64)0
	
.LOOP $label$42:
	$16 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$43 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$8 = ($8 + [165])
	goto $label$44 
	
.LABEL $label$45
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$43
	$4 = ($4 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$42 }
	$13 = (int_64)0
	$16 = (int_64)59
	$4 = [1712]
	$17 = (int_64)0
	
.LOOP $label$46:
	if ( ((uint_64)$13 > (uint_64)(int_64)3) ){ goto $label$51 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$8 = ($8 + [165])
	goto $label$49 
	
.LABEL $label$51
	$14 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$50
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$48
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$47
	$4 = ($4 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$17 = ((int_64)$14 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$46 }
	$13 = (int_64)0
	$14 = (int_64)59
	$4 = [1696]
	$18 = (int_64)0
	
.LOOP $label$52:
	$16 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$53 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$55 }
	$8 = ($8 + [165])
	goto $label$54 
	
.LABEL $label$55
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$54
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$53
	$4 = ($4 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$18 = ((int_64)$16 | (int_64)$18)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$52 }
	$13 = (int_64)0
	$16 = (int_64)59
	$4 = [1728]
	$19 = (int_64)0
	
.LOOP $label$56:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$61 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$8 = ($8 + [165])
	goto $label$59 
	
.LABEL $label$61
	$14 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$60
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$58
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$57
	$4 = ($4 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$19 = ((int_64)$14 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$56 }
	*(($20 + [152])) = [0]
	*($20 + [144]) = (int_64)0
	$4 = CALL strlen([1744])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$64 }
	*($20 + [144]) = ($4 << [1])
	$8 = (($20 + [144]) | [1])
	if ( $4 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$64
	$7 = (($4 + [16]) & [-16])
	$8 = CALL $127($7)
	*($20 + [144]) = ($7 | [1])
	*($20 + [152]) = $8
	*($20 + [148]) = $4
	
.LABEL $label$63
	CALL memcpy($8, [1744], $4)
	
.LABEL $label$62
	*(($8 + $4)) = [0]
	*(($20 + [136])) = [0]
	*($20 + [128]) = (int_64)0
	$4 = CALL strlen([1776])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$67 }
	*($20 + [128]) = ($4 << [1])
	$8 = (($20 + [128]) | [1])
	if ( $4 ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$67
	$7 = (($4 + [16]) & [-16])
	$8 = CALL $127($7)
	*($20 + [128]) = ($7 | [1])
	*($20 + [136]) = $8
	*($20 + [132]) = $4
	
.LABEL $label$66
	CALL memcpy($8, [1776], $4)
	
.LABEL $label$65
	$7 = [0]
	*(($8 + $4)) = [0]
	*((($20 + [64]) + [28])) = *(($3 + [12]))
	*((($20 + [64]) + [24])) = *(($3 + [8]))
	*((($20 + [64]) + [20])) = *(($3 + [4]))
	*($20 + [72]) = $6
	*($20 + [64]) = $1
	*($20 + [80]) = *($3)
	$4 = (($20 + [144]) + [8])
	*(($20 + [104])) = *($4)
	*($20 + [96]) = *($20 + [144])
	*($20 + [144]) = [0]
	*($20 + [148]) = [0]
	*($4) = [0]
	$4 = (($20 + [128]) + [8])
	*(($20 + [116])) = *($4)
	$13 = *($20 + [128])
	*($20 + [128]) = [0]
	*($20 + [108 align=4]) = $13
	*($20 + [132]) = [0]
	*($4) = [0]
	*($20 + [16]) = $18
	*($20 + [24]) = $19
	*($20 + [32]) = [0]
	*(($8 = (($20 + [16]) + [20]))) = [0]
	*(($5 = (($20 + [16]) + [24]))) = [0]
	*(($4 = CALL $127([16]))) = $15
	*($4 + [8]) = $17
	*(($11 = ($20 + [48]))) = [0]
	$10 = ($4 + [16])
	*($5) = $10
	*($8) = $10
	*($20 + [32]) = $4
	*($20 + [44]) = [0]
	*(($20 + [52])) = [0]
	*($20 + [392]) = [0]
	*($20 + [400]) = ($20 + [392])
	*($20 + [408]) = ($20 + [64])
	CALL $119(($20 + [408]), ($20 + [400]))
	$4 = *($20 + [392])
	if ( ($4 == 0) ){ goto $label$69 }
	$8 = (($20 + [16]) + [28])
	CALL $42($8, $4)
	$7 = *($11)
	$4 = *($8)
	goto $label$68 
	
.LABEL $label$69
	$4 = [0]
	
.LABEL $label$68
	*($20 + [412]) = $4
	*($20 + [408]) = $4
	*($20 + [416]) = $7
	*($20 + [392]) = ($20 + [408])
	*($20 + [400]) = ($20 + [64])
	CALL $120(($20 + [400]), ($20 + [392]))
	CALL $94(($20 + [408]), ($20 + [16]))
	$4 = *($20 + [408])
	CALL send_inline($4, (*($20 + [412]) - $4))
	$4 = *($20 + [408])
	if ( ($4 == 0) ){ goto $label$70 }
	*($20 + [412]) = $4
	CALL $128($4)
	
.LABEL $label$70
	$4 = *($20 + [44])
	if ( ($4 == 0) ){ goto $label$71 }
	*(($20 + [48])) = $4
	CALL $128($4)
	
.LABEL $label$71
	$4 = *($20 + [32])
	if ( ($4 == 0) ){ goto $label$72 }
	*(($20 + [36])) = $4
	CALL $128($4)
	
.LABEL $label$72
	if ( ((*(($20 + [108])) & [1]) == 0) ){ goto $label$73 }
	CALL $128(*(($20 + [116])))
	
.LABEL $label$73
	if ( ((*(($20 + [96])) & [1]) == 0) ){ goto $label$74 }
	CALL $128(*(($20 + [104])))
	
.LABEL $label$74
	if ( ((*($20 + [128]) & [1]) == 0) ){ goto $label$75 }
	CALL $128(*(($20 + [136])))
	
.LABEL $label$75
	if ( ((*($20 + [144]) & [1]) == 0) ){ goto $label$76 }
	CALL $128(*(($20 + [152])))
	
.LABEL $label$76
	*(($20 + [80])) = (int_64)0
	*((($20 + [64]) + [8])) = (int_64)0
	*($20 + [64]) = (int_64)0
	$4 = ($0 + [48])
	CALL $60(($20 + [16]), $4, *($0), ($20 + [64]))
	*($20 + [24]) = ((int_64)*($20 + [24]) + (int_64)1)
	CALL $61($4, ($20 + [16]), *($0))
	$13 = *($20 + [24])
	*(($20 + [100])) = *(($3 + [12]))
	*(($20 + [96])) = *(($3 + [8]))
	*(($20 + [92])) = *(($3 + [4]))
	*($20 + [72]) = $1
	*($20 + [64]) = $13
	*($20 + [80]) = $6
	*($20 + [88]) = *($3)
	*($20 + [104]) = $12
	*($20 + [112]) = [0]
	*($20 + [120]) = CALL current_time()
	if ( (CALL $135(($20 + [256]), [1520]) == 0) ){ goto $label$80 }
	if ( (CALL $135(($20 + [256]), [1536]) == 0) ){ goto $label$79 }
	if ( CALL $135(($20 + [256]), [1552]) ){ goto $label$77 }
	$8 = [3]
	goto $label$78 
	
.LABEL $label$80
	$8 = [1]
	goto $label$78 
	
.LABEL $label$79
	$8 = [2]
	
.LABEL $label$78
	*((($20 + [64]) + [48])) = $8
	
.LABEL $label$77
	$13 = (int_64)0
	*(($8 = ($20 + [32]))) = (int_64)0
	*(($20 + [24])) = (int_64)0
	*($20 + [16]) = (int_64)0
	CALL $60(($20 + [408]), $4, *($0), ($20 + [16]))
	*($20 + [424]) = ((int_64)*($20 + [424]) + (int_64)*($3))
	CALL $61($4, ($20 + [408]), *($0))
	*(($20 + [40])) = (int_64)-1
	*(($20 + [48])) = (int_64)0
	$16 = *($0)
	*($8) = $16
	*($20 + [16]) = $16
	*($20 + [24]) = $16
	*(($20 + [56])) = [0]
	$14 = (int_64)59
	$4 = [880]
	$6 = (int_64)0
	
.LOOP $label$81:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$86 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$85 }
	$8 = ($8 + [165])
	goto $label$84 
	
.LABEL $label$86
	$12 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$85
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$84
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$83
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$82
	$4 = ($4 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$6 = ((int_64)$12 | (int_64)$6)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$81 }
	*($20 + [416]) = $6
	*($20 + [408]) = $16
	$13 = (int_64)0
	$14 = (int_64)59
	$4 = [1808]
	$6 = (int_64)0
	
.LOOP $label$87:
	if ( ((uint_64)$13 > (uint_64)(int_64)6) ){ goto $label$92 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$91 }
	$8 = ($8 + [165])
	goto $label$90 
	
.LABEL $label$92
	$12 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$91
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$90
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$89
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$88
	$4 = ($4 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$6 = ((int_64)$12 | (int_64)$6)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$87 }
	*($20 + [144]) = $6
	CALL $121(($20 + [16]), [1], ($20 + [408]), $0, ($20 + [144]), ($20 + [64]))
	$7 = *(($20 + [48]))
	if ( ($7 == 0) ){ goto $label$21 }
	$5 = ($20 + [52])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$94 }
	
.LOOP $label$95:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$96 }
	CALL $128($8)
	
.LABEL $label$96
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$95 }
	$4 = *(($20 + [48]))
	goto $label$93 
	
.LABEL $label$94
	$4 = $7
	
.LABEL $label$93
	*($5) = $7
	CALL $128($4)
	
.LABEL $label$21
	if ( ((*($20 + [224]) & [1]) == 0) ){ goto $label$97 }
	CALL $128(*($20 + [232]))
	
.LABEL $label$97
	if ( ((*($20 + [240]) & [1]) == 0) ){ goto $label$98 }
	CALL $128(*($20 + [248]))
	
.LABEL $label$98
	if ( ((*($20 + [256]) & [1]) == 0) ){ goto $label$5 }
	CALL $128(*($20 + [264]))
	
.LABEL $label$5
	if ( ((*($20 + [272]) & [1]) == 0) ){ goto $label$99 }
	CALL $128(*($20 + [280]))
	
.LABEL $label$99
	$7 = *(($20 + [360]))
	if ( ($7 == 0) ){ goto $label$4 }
	$5 = ($20 + [364])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$101 }
	
.LOOP $label$102:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$103 }
	CALL $128($8)
	
.LABEL $label$103
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$102 }
	$4 = *(($20 + [360]))
	goto $label$100 
	
.LABEL $label$101
	$4 = $7
	
.LABEL $label$100
	*($5) = $7
	CALL $128($4)
	
.LABEL $label$4
	$7 = *($9)
	if ( ($7 == 0) ){ goto $label$104 }
	$5 = ($20 + [324])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$106 }
	
.LOOP $label$107:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$108 }
	CALL $128($8)
	
.LABEL $label$108
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$107 }
	$4 = *(($20 + [320]))
	goto $label$105 
	
.LABEL $label$106
	$4 = $7
	
.LABEL $label$105
	*($5) = $7
	CALL $128($4)
	
.LABEL $label$104
	$7 = *($20 + [376])
	if ( ($7 == 0) ){ goto $label$109 }
	$4 = *($20 + [380])
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$111 }
	$8 = ([0] - $7)
	$4 = ($4 + [-12])
	
.LOOP $label$112:
	if ( ((*($4) & [1]) == 0) ){ goto $label$113 }
	CALL $128(*(($4 + [8])))
	
.LABEL $label$113
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $8) != (int_32)[-12]) ){ goto $label$112 }
	$4 = *($20 + [376])
	goto $label$110 
	
.LABEL $label$111
	$4 = $7
	
.LABEL $label$110
	*($20 + [380]) = $7
	CALL $128($4)
	
.LABEL $label$109
	*([0] + [4]) = ($20 + [432])
	return (unreachable)
	
.LABEL $label$3
	CALL $129(($20 + [144]))
	
.LABEL $label$2
	CALL $129(($20 + [128]))
	
.LABEL $label$1
	CALL $129(($20 + [160]))
	(unreachable)
	(unreachable)
}

void .FUNC $111 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [224])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [880]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($1, $9)
	CALL $112($0)
	*(($11 + [160])) = (int_64)-1
	*(($11 + [168])) = (int_64)0
	$8 = *($0)
	*(($11 + [152])) = $8
	*($11 + [136]) = $8
	*($11 + [144]) = $8
	*(($11 + [176])) = [0]
	*($11 + [184]) = $8
	*(($11 + [192])) = $8
	*(($11 + [200])) = (int_64)-1
	*(($11 + [208])) = [0]
	*(($11 + [212])) = [0]
	*(($11 + [216])) = [0]
	*(($6 = (($11 + [120]) + [8]))) = *(($3 + [8]))
	*($11 + [120]) = *($3)
	CALL $137(($11 + [104]), $4)
	*((($11 + [8]) + [8])) = *($6)
	*($11 + [8]) = *($11 + [120])
	$3 = CALL $113(($11 + [136]), $2, ($11 + [8]), ($11 + [104]))
	if ( ((*($11 + [104]) & [1]) == 0) ){ goto $label$7 }
	CALL $128(*($11 + [112]))
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$8 }
	$1 = *($0)
	*(($11 + [72])) = $1
	*(($11 + [80])) = (int_64)-1
	$8 = (int_64)0
	*(($11 + [88])) = (int_64)0
	*($11 + [56]) = $1
	*($11 + [64]) = $1
	*(($11 + [96])) = [0]
	$7 = (int_64)59
	$6 = [880]
	$9 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$14 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$5 = ($5 + [165])
	goto $label$12 
	
.LABEL $label$14
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$9 }
	*($11 + [48]) = $9
	*($11 + [40]) = $1
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1232]
	$9 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$20 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$5 = ($5 + [165])
	goto $label$18 
	
.LABEL $label$20
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$16
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$15 }
	*($11 + [32]) = $9
	CALL $114(($11 + [56]), ($11 + [40]), $0, ($11 + [32]), ($11 + [24]))
	$0 = *(($11 + [88]))
	if ( ($0 == 0) ){ goto $label$8 }
	$4 = ($11 + [92])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$22 }
	
.LOOP $label$23:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$24 }
	CALL $128($5)
	
.LABEL $label$24
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$23 }
	$6 = *(($11 + [88]))
	goto $label$21 
	
.LABEL $label$22
	$6 = $0
	
.LABEL $label$21
	*($4) = $0
	CALL $128($6)
	
.LABEL $label$8
	CALL eosio_assert(($3 == 0), [1248])
	$0 = *(($11 + [208]))
	if ( ($0 == 0) ){ goto $label$25 }
	$3 = ($11 + [212])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$27 }
	
.LOOP $label$28:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$29 }
	CALL $128($5)
	
.LABEL $label$29
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$28 }
	$6 = *(($11 + [208]))
	goto $label$26 
	
.LABEL $label$27
	$6 = $0
	
.LABEL $label$26
	*($3) = $0
	CALL $128($6)
	
.LABEL $label$25
	$0 = *(($11 + [168]))
	if ( ($0 == 0) ){ goto $label$30 }
	$3 = ($11 + [172])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$32 }
	
.LOOP $label$33:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$34 }
	CALL $128($5)
	
.LABEL $label$34
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$33 }
	$6 = *(($11 + [168]))
	goto $label$31 
	
.LABEL $label$32
	$6 = $0
	
.LABEL $label$31
	*($3) = $0
	CALL $128($6)
	
.LABEL $label$30
	*([0] + [4]) = ($11 + [224])
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [144]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$6 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$1 }
	$7 = *($1)
	*(($10 + [56])) = [0]
	*($10 + [32]) = $7
	*($10 + [24]) = $8
	*($10 + [40]) = (int_64)-1
	*($10 + [48]) = (int_64)0
	$5 = CALL $67(($10 + [24]), (int_64)5459781, [1040])
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$3 = *($10 + [48])
	if ( ($3 == 0) ){ goto $label$7 }
	$4 = ($10 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $128($2)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($10 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $3
	
.LABEL $label$8
	*($4) = $3
	CALL $128($5)
	
.LABEL $label$7
	*(($10 + [40])) = (int_64)0
	*((($10 + [24]) + [8])) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL $60($10, ($1 + [48]), *($1), ($10 + [24]))
	$7 = (int_64)
	*($0) = $7(*($0) - *($10 + [16])))
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [1824])
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	*(($2 = *($1))) = (*($2) + [8])
	$2 = *($0)
	*(($0 = *($1))) = (*($0) + [8])
	*(($0 = *($1))) = (*($0) + [16])
	$0 = *($2 + [32])
	$5 = (CASTING uint_64)(uint_32 ( *(($2 + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $0
	$4 = *(($2 + [32]))
	$4 = ( *(($2 + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$2 }
	*($3) = ($4 + $0)
	
.LABEL $label$2
	$0 = *($2 + [44])
	$5 = (CASTING uint_64)(uint_32 ( *(($2 + [48])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$1 = *($1)
	$0 = *($1)
	
.LOOP $label$3:
	$0 = ($0 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($1) = $0
	$2 = *(($2 + [44]))
	$2 = ( *(($2 + [48])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($1) = ($2 + $0)
	
.LABEL $label$4
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [192])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4918969584758816768, (int_64)4918969584758816768)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $30($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [192])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [656])
	CALL $31($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $32($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_64 .FUNC $28 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [192])
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = *($3)
	goto $label$1 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4918969584758816768, (int_64)4918969584758816768)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $30($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [192])
	$1 = *($3)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $2
	CALL $34($4, $0, $1, ($4 + [8]))
	$1 = *(*($4 + [4]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $1
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [544])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [544])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $107 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*(($4 = CALL $127([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [624])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-2852345010218888704, $2, (int_64)-2852345010218888704, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-2852345010218888704) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-2852345010218888703
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)-2852345010218888704
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-2852345010218888704
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $106(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $128($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $127(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $128($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $128($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$2 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [176]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)1) ){ goto $label$6 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($2, $8)
	*(($10 + [24])) = (int_64)-1
	*(($5 = ($10 + [32]))) = (int_64)0
	$7 = *($0)
	*(($10 + [16])) = $7
	*($10) = $7
	*($10 + [8]) = $7
	*(($10 + [40])) = [0]
	CALL $23($10, $1)
	$0 = *($5)
	if ( ($0 == 0) ){ goto $label$7 }
	$4 = ($10 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	CALL $128($3)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($10 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $0
	
.LABEL $label$8
	*($4) = $0
	CALL $128($5)
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [544])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $23 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$5 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$5), [192])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4342138543854845952, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $24($5, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$5), [192])
	
.LABEL $label$4
	CALL eosio_assert([1], [256])
	CALL eosio_assert([1], [304])
	$6 = CALL db_next_i64(*($4 + [12]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $24($5, $6)
	
.LABEL $label$6
	CALL $25($5, $4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [116])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $128($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $128($4)
	
.LABEL $label$1
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $128($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [72]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $128($4)
	
.LABEL $label$6
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$16 }
	CALL $128(*(($2 + [72])))
	
.LABEL $label$16
	CALL $128($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $128($4)
	
.LABEL $label$11
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [384])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [448])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $128($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $128($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [512])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $127([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [544])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $26(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $128($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*(($4 = CALL $127([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [624])
	CALL memcpy(($8 + [16]), $4, [8])
	$5 = *($4)
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)4342138543854845952, $2, $5, ($8 + [16]), [8])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [8]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [12])
	*($8 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [8]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $26(($1 + [24]), ($8 + [8]), ($8 + [16]), ($8 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $128($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $127(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $128($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $128($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $137(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $137(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $128(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $128(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = *($0)
	$3 = ($5 & [1])
	if ( $3 ){ goto $label$2 }
	$5 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	if ( $3 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$4 = ((uint_32)$5 > (uint_32)$2)
	$3 = ( $2 ? $5 : $4 )
	if ( ($3 == 0) ){ goto $label$7 }
	$0 = CALL memcmp($0, $1, $3)
	if ( $0 ){ goto $label$6 }
	
.LABEL $label$7
	$0 = ( [-1] ? $4 : ($5 <= $2) )
	
.LABEL $label$6
	return $0
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [912])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [976])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [544])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [512])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $127([32])
	$6 = CALL $69($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $70(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $128($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [544])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [544])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [544])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $77(*($1), ($0 + [32]))
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_32 $16
	$14 = (*([0] + [4]) - [96])
	*([0] + [4]) = $14
	*(($16 = $14) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [76]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	*($16 + [24]) = *($1 + [16])
	*($16 + [32]) = *($1 + [32])
	$15 = *($1)
	*($16 + [16]) = $15
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]) + [8])
	*($1 + [24]) = *(*($3 + [8]) + [16])
	*($1 + [40]) = *(*($3 + [8]) + [24])
	*($1 + [32]) = *(*($3 + [8]) + [40])
	*($1 + [48]) = *(*($3 + [8]) + [48])
	*($1 + [49]) = *(*($3 + [12]))
	$11 = ($1 + [64])
	CALL $130($11, *($3 + [16]))
	*($1 + [56]) = *(*($3 + [8]) + [56])
	CALL eosio_assert(((int_64)$15 == (int_64)*($1)), [816])
	$3 = *($1 + [64])
	$12 = ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($12 + [58])
	$13 = (CASTING uint_64)(uint_32 $12)
	$12 = ($1 + [56])
	$10 = ($1 + [49])
	$9 = ($1 + [48])
	$8 = ($1 + [40])
	$7 = ($1 + [24])
	$6 = ($1 + [8])
	$5 = ($1 + [32])
	$4 = ($1 + [16])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$14 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$14 = ($14 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $14
	
.LABEL $label$2
	*($16 + [4]) = $14
	*($16) = $14
	*($16 + [8]) = ($14 + $3)
	*($16 + [48]) = $16
	*($16 + [60]) = $6
	*($16 + [64]) = $4
	*($16 + [68]) = $7
	*($16 + [72]) = $5
	*($16 + [76]) = $8
	*($16 + [80]) = $9
	*($16 + [56]) = $1
	*($16 + [84]) = $10
	*($16 + [88]) = $12
	*($16 + [92]) = $11
	CALL $73(($16 + [56]), ($16 + [48]))
	CALL db_update_i64(*($1 + [80]), $2, $14, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($14)
	$15 = *($16 + [16])
	
.LABEL $label$4
	$3 = ($0 + [36])
	if ( (uint_64)($15 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($16 + [60]) = $1
	*($16 + [56]) = $0
	*($16 + [68]) = $1
	*($16 + [64]) = ($16 + [24])
	*($16 + [72]) = ($16 + [16])
	*($16 + [76]) = ($16 + [40])
	*($16 + [48]) = ($16 + [56])
	CALL $75(($16 + [48]), $3, ($3 + [1]))
	*([0] + [4]) = ($16 + [96])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [512])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $127([96])) + [72]) = [0]
	*($6 + [64 align=4]) = (int_64)0
	*($6 + [76]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [32])
	*($8 + [60]) = ($6 + [40])
	*($8 + [64]) = ($6 + [48])
	*($8 + [68]) = ($6 + [49])
	*($8 + [72]) = ($6 + [56])
	*($8 + [76]) = ($6 + [64])
	CALL $76(($8 + [40]), ($8 + [32]))
	*($6 + [84]) = [-1]
	*($6 + [80]) = $1
	*($6 + [88]) = [-1]
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [80])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $72(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL $128(*(($4 + [72])))
	
.LABEL $label$10
	CALL $128($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

int_32 .FUNC $67 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [192])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $68($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [192])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $127([96])) + [72]) = [0]
	*($3 + [64 align=4]) = (int_64)0
	*($3 + [76]) = $1
	CALL $71(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [80])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$4 }
	CALL $128(*(($3 + [72])))
	
.LABEL $label$4
	CALL $128($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$0), [192])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2857509471394696576, (int_64)-2857509471394696576)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $84($0, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$0), [192])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [656])
	CALL $85($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $86($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *(($1 + [28]))
	if ( ((int_32)$4 == (int_32)*($1 + [24])) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [192])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-2857509471394696576, (int_64)-2857509471394696576)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $84($1, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [192])
	
.LABEL $label$3
	*($0) = *($4)
	*(($0 + [16])) = *(($4 + [16]))
	*(($0 + [8])) = *(($4 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($5 + [8]) = $3
	CALL $89($5, $1, $2, ($5 + [8]))
	$1 = *($5 + [4])
	*($0) = *($1)
	*(($0 + [20])) = *(($1 + [20]))
	*(($0 + [16])) = *(($1 + [16]))
	*(($0 + [12])) = *(($1 + [12]))
	*(($0 + [8])) = *(($1 + [8]))
	*(($0 + [4])) = *(($1 + [4]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$0), [192])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4992623614660948480, (int_64)-4992623614660948480)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $79($0, $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$0), [192])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [656])
	CALL $80($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $81($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *(($1 + [28]))
	if ( ((int_32)$4 == (int_32)*($1 + [24])) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$1), [192])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4992623614660948480, (int_64)-4992623614660948480)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $79($1, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$1), [192])
	
.LABEL $label$3
	*($0) = *($4)
	*(($0 + [8])) = *(($4 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($5 + [8]) = $3
	CALL $83($5, $1, $2, ($5 + [8]))
	$1 = *($5 + [4])
	*($0) = *($1)
	*(($0 + [12])) = *(($1 + [12]))
	*(($0 + [8])) = *(($1 + [8]))
	*(($0 + [4])) = *(($1 + [4]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [624])
	CALL memcpy(*($2 + [4]), $0, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $127(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $128($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $128($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [512])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $127([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [544])
	CALL memcpy($5, $6, [8])
	*($5 + [12]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)-2852345010218888704
	$6 = *($5 + [12])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)-2852345010218888704
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $106(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $128($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [544])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [544])
	CALL memcpy($0, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

void .FUNC $105 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*(($4 = CALL $127([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [624])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-2852345010218888704, $2, (int_64)-2852345010218888704, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-2852345010218888704) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-2852345010218888703
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)-2852345010218888704
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-2852345010218888704
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $106(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $128($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	*($1) = *(*($3))
	CALL eosio_assert([1], [816])
	CALL eosio_assert([1], [624])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-2852345010218888704) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-2852345010218888703
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $127([40])) + [24]) = $1
	CALL $90(($7 + [16]), $3)
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)-2857509471394696576
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)-2857509471394696576
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $88(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $128($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $127(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $128($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $128($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$2 = *($0)
	$3 = *(*($0 + [4]))
	*($1) = *($3)
	*(($4 = ($1 + [16]))) = *(($3 + [16]))
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [624])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy(($6 | [8]), $5, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy(($6 + [16]), $4, [8])
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-2857509471394696576, *(*($0 + [8])), (int_64)-2857509471394696576, $6, [24])
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)-2857509471394696576) ){ goto $label$1 }
	*(($2 + [16])) = (int_64)-2857509471394696575
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $127([40])) + [24]) = $1
	CALL $87(($7 + [16]), $3)
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)-2857509471394696576
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)-2857509471394696576
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $88(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $128($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	$3 = *($3)
	*($1) = *($3)
	*(($4 = ($1 + [16]))) = *(($3 + [16]))
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [816])
	CALL eosio_assert([1], [624])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy(($6 | [8]), $5, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy(($6 + [16]), $4, [8])
	CALL db_update_i64(*($1 + [28]), $2, $6, [24])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-2857509471394696576) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-2857509471394696575
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [512])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $127([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [544])
	CALL memcpy($5, $6, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [544])
	CALL memcpy(($5 + [8]), ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [544])
	CALL memcpy(($5 + [16]), ($6 + [16]), [8])
	*($5 + [28]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)-2857509471394696576
	$6 = *($5 + [28])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)-2857509471394696576
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $88(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $128($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*(($4 = CALL $127([32])) + [16]) = $1
	$3 = *($3)
	*($4) = *($3)
	*(($4 + [12])) = *(($3 + [12]))
	*(($5 = ($4 + [8]))) = *(($3 + [8]))
	*(($4 + [4])) = *(($3 + [4]))
	CALL eosio_assert([1], [624])
	CALL memcpy(($7 + [16]), $4, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy((($7 + [16]) | [8]), $5, [8])
	*($4 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-4992623614660948480, $2, (int_64)-4992623614660948480, ($7 + [16]), [16])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4992623614660948480) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-4992623614660948479
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)-4992623614660948480
	$5 = *($4 + [20])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-4992623614660948480
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $82(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $128($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $127(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $128($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $128($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*(($4 = CALL $127([32])) + [16]) = $1
	$3 = *($3)
	*($4) = *($3)
	*(($4 + [12])) = *(($3 + [12]))
	*(($5 = ($4 + [8]))) = *(($3 + [8]))
	*(($4 + [4])) = *(($3 + [4]))
	CALL eosio_assert([1], [624])
	CALL memcpy(($7 + [16]), $4, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy((($7 + [16]) | [8]), $5, [8])
	*($4 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-4992623614660948480, $2, (int_64)-4992623614660948480, ($7 + [16]), [16])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4992623614660948480) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-4992623614660948479
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)-4992623614660948480
	$5 = *($4 + [20])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-4992623614660948480
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $82(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $128($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	$3 = *($3)
	*($1) = *($3)
	*(($4 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [816])
	CALL eosio_assert([1], [624])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy(($5 | [8]), $4, [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4992623614660948480) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-4992623614660948479
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $142 ()
{
	(unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $127(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL $128(*(($1 + [72])))
	
.LABEL $label$11
	CALL $128($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $128($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [624])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [624])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $74(*($1), *($0 + [36]))
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $127(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $128($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $128($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$16 = (*([0] + [4]) - [64])
	$17 = $16
	*([0] + [4]) = $16
	$14 = *($0 + [4])
	*($1) = *(*($14))
	$2 = *($0)
	*($1 + [8]) = *(*($14 + [4]))
	*($1 + [16]) = *(*($14 + [8]) + [8])
	*($1 + [24]) = *(*($14 + [8]) + [16])
	*($1 + [40]) = *(*($14 + [8]) + [24])
	*($1 + [32]) = *(*($14 + [8]) + [40])
	*($1 + [48]) = *(*($14 + [8]) + [48])
	*($1 + [49]) = *(*($14 + [12]))
	$10 = ($1 + [64])
	CALL $130($10, *($14 + [16]))
	*($1 + [56]) = *(*($14 + [8]) + [56])
	$14 = *($1 + [64])
	$11 = ( *(($1 + [68])) ? uint_32($14 >> [1]) : ($14 & [1]) )
	$14 = ($11 + [58])
	$15 = (CASTING uint_64)(uint_32 $11)
	$11 = ($1 + [56])
	$9 = ($1 + [49])
	$8 = ($1 + [48])
	$7 = ($1 + [32])
	$6 = ($1 + [40])
	$5 = ($1 + [24])
	$4 = ($1 + [16])
	$3 = ($1 + [8])
	
.LOOP $label$1:
	$14 = ($14 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$1 }
	if ( ($14 <= [513]) ){ goto $label$3 }
	$16 = CALL malloc($14)
	goto $label$2 
	
.LABEL $label$3
	$16 = ($16 - (($14 + [15]) & [-16]))
	*([0] + [4]) = $16
	
.LABEL $label$2
	*($17 + [4]) = $16
	*($17) = $16
	*($17 + [8]) = ($16 + $14)
	*($17 + [16]) = $17
	*($17 + [28]) = $3
	*($17 + [24]) = $1
	*($17 + [32]) = $4
	*($17 + [36]) = $5
	*($17 + [40]) = $7
	*($17 + [44]) = $6
	*($17 + [48]) = $8
	*($17 + [52]) = $9
	*($17 + [56]) = $11
	*($17 + [60]) = $10
	CALL $73(($17 + [24]), ($17 + [16]))
	$15 = *($1)
	*($1 + [80]) = CALL db_store_i64(*($2 + [8]), (int_64)-4992623611911714304, *(*($0 + [8])), $15, $16, $14)
	if ( ($14 <= [513]) ){ goto $label$4 }
	CALL free($16)
	
.LABEL $label$4
	if ( (uint_64)($15 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$14 = ($2 + [8])
	$15 = *($14)
	$16 = *(($0 + [8]))
	$12 = *($16)
	$13 = *($1)
	*($17 + [24]) = *(($1 + [16]))
	*($1 + [84]) = CALL db_idx64_store($15, (int_64)-4992623611911714304, $12, $13, ($17 + [24]))
	$15 = *($16)
	$12 = *($14)
	$13 = *($1)
	*($17 + [24]) = *(($1 + [32]))
	*(($1 + [88])) = CALL db_idx64_store($12, (int_64)-4992623611911714303, $15, $13, ($17 + [24]))
	*([0] + [4]) = ($17 + [64])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [544])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [544])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [544])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $77(*($1), *($0 + [36]))
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $78($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $132($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $127($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $132($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $128($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $129($7)
	return (unreachable)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [624])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [624])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $41($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $42($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $43($4, $1)
	CALL $45(CALL $44(CALL $44($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_64 .FUNC $36 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [192])
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = *($3)
	goto $label$1 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3617211063646814208, (int_64)3617211063646814208)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $49($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [192])
	$1 = *($3)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $2
	CALL $53($4, $0, $1, ($4 + [8]))
	$1 = *(*($4 + [4]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $1
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [192])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3617211063646814208, (int_64)3617211063646814208)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $49($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [192])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [656])
	CALL $50($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $51($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1072])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $42($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [544])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [512])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $127([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [544])
	CALL memcpy($5, $6, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [544])
	CALL memcpy(($5 + [8]), ($6 + [8]), [8])
	*($5 + [20]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)-4992623614660948480
	$6 = *($5 + [20])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)-4992623614660948480
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $82(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $128($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [560])
	*(($4 = CALL $127([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [624])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)4918969584758816768, $2, (int_64)4918969584758816768, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4918969584758816768) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4918969584758816769
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)4918969584758816768
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4918969584758816768
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $33(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $128($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $127(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $136($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $128($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $128($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [512])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $127([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [544])
	CALL memcpy($5, $6, [8])
	*($5 + [12]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)4918969584758816768
	$6 = *($5 + [12])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)4918969584758816768
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $33(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $128($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	*($1) = *(*($3))
	CALL eosio_assert([1], [816])
	CALL eosio_assert([1], [624])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4918969584758816768) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4918969584758816769
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $129 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $127 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10332])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}