(data (i32.const 8192) "Fee recipient is not valid account\00unexpected asset symbol input\00")
(data (i32.const 8257) "Exchange is already initialized\00invalid sell\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8388) "Proxy is not valid account\00invalid conversion\00")
(data (i32.const 8434) "Contract account cannot buy!\00")
(data (i32.const 8463) "Invalid ttl!\00")
(data (i32.const 8476) "OTE order should have force_buy = True!\00")
(data (i32.const 8520) "\04EOS\00\00\00\00")
(data (i32.const 8528) "The value must be in EOS.\00")
(data (i32.const 8554) "EOS quantity must be positive.\00")
(data (i32.const 8585) "Contract account cannot sell!\00")
(data (i32.const 8615) "OTE order shoud have force_sell = True!\00")
(data (i32.const 8656) "\00RAM\00\00\00\00")
(data (i32.const 8664) "The value must be in RAM.\00")
(data (i32.const 8690) "RAM quantity must be positive.\00")
(data (i32.const 8721) "Order doesn\'t exists\00")
(data (i32.const 8742) "Cancel order fee\00")
(data (i32.const 8759) "Order was canceled\00")
(data (i32.const 8778) "Trade fee\00")
(data (i32.const 8788) "Order has expired\00")
(data (i32.const 8806) "Token transfer fee\00")
(data (i32.const 8825) "Cannot transfer invalid amount!\00")
(data (i32.const 8857) "The value must be in EOS or RAM!\00")
(data (i32.const 8890) "Trade value does not satisfy min trade amount!\00")
(data (i32.const 8937) "Returning excess amount\00")
(data (i32.const 8961) "handle_expired_order: Order has not expired!\00")
(data (i32.const 9006) "RAM token issuance fee\00")
(data (i32.const 9029) "Issuing RAM token: \00")
(data (i32.const 9049) "Burning RAM token: \00")
(data (i32.const 9069) "Invalid action call!\00")
(data (i32.const 9090) "insorderexec action\'s are only valid from the contract\'s account\00")
(data (i32.const 9155) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 9219) "Invalid quantity in transfer\00")
(data (i32.const 9248) "Transferred quantity must be positive value\00")
(data (i32.const 9292) "Burn RAM token fee\00")
(data (i32.const 9311) "on_order_expired: Order does not exists!\00")
(data (i32.const 9352) "Missing required authority\00")
(data (i32.const 9379) "RAM token exchange is stopped!\00")
(data (i32.const 9410) "Invalid symbol name\00")
(data (i32.const 9430) "Invalid quantity.\00")
(data (i32.const 9448) "memo_cmd_make_order: Invalid TTL!\00")
(data (i32.const 9482) ",\00")
(data (i32.const 9484) "convert\00")
(data (i32.const 9492) "Invalid EOS asset!\00")
(data (i32.const 9511) "Invalid RAM asset!\00")
(data (i32.const 9530) "Order doesn\'t exist\00")
(data (i32.const 9550) "error reading iterator\00")
(data (i32.const 9573) "read\00")
(data (i32.const 9578) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9629) "ram_market: Could not find eosiosystem rammarket!\00")
(data (i32.const 9679) "Can\'t compare amount of different assets\00")
(data (i32.const 9720) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9769) "invalid symbol name\00")
(data (i32.const 9789) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9848) "ram_market::get_ramprice: Could not calculate valid RAM price!\00")
(data (i32.const 9911) "multiplication overflow\00")
(data (i32.const 9935) "multiplication underflow\00")
(data (i32.const 9960) "divide by zero\00")
(data (i32.const 9975) "signed division overflow\00")
(data (i32.const 10000) "Bought\00")
(data (i32.const 10007) "Sold\00")
(data (i32.const 10012) " RAM tokens @\00")
(data (i32.const 10026) "/KiB\00")
(data (i32.const 10031) "attempt to subtract asset with different symbol\00")
(data (i32.const 10079) "subtraction underflow\00")
(data (i32.const 10101) "subtraction overflow\00")
(data (i32.const 10122) "write\00")
(data (i32.const 10128) "Cannot modify index_queue element, invalid iterator!\00")
(data (i32.const 10181) "cannot pass end iterator to modify\00")
(data (i32.const 10216) "object passed to modify is not in multi_index\00")
(data (i32.const 10262) "cannot modify objects in table of another contract\00")
(data (i32.const 10313) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10372) " \00")
(data (i32.const 10376) "\8c(\00\00")
(data (i32.const 10380) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 10413) "get_txid: read_transaction failed!\00")
(data (i32.const 10448) "Invlid ttl!\00")
(data (i32.const 10460) "Cannot push element to queue, seq is at max limit\00")
(data (i32.const 10510) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10564) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10612) "cannot create objects in table of another contract\00")
(data (i32.const 10663) "Queue element was not erased properly!\00")
(data (i32.const 10702) "cannot pass end iterator to erase\00")
(data (i32.const 10736) "cannot increment end iterator\00")
(data (i32.const 10766) "object passed to erase is not in multi_index\00")
(data (i32.const 10811) "cannot erase objects in table of another contract\00")
(data (i32.const 10861) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10914) "get\00")
(data (i32.const 10918) ".\00")
(data (i32.const 10920) "memo_parser: memo has more than 256 bytes\00")
(data (i32.const 10962) "memo_parser: Invalid arg delimiter!\00")
(data (i32.const 10998) "cancel\00")
(data (i32.const 11005) ":\00")
(data (i32.const 11007) "singleton does not exist\00")
(data (i32.const 11032) "memo_cmd_make_order: Invalid memo!\00")
(data (i32.const 11067) "memo_cmd_make_order: Invalid arg delim!\00")
(data (i32.const 11107) "memo_cmd_make_order: Invalid argument!\00")
(data (i32.const 11146) "OTE order requires arg \'convert\'\00")
(data (i32.const 11179) "Invalid number\00")
(data (i32.const 11194) "memo_cmd_cancel_order: Invalid transaction id!\00")
(data (i32.const 11241) "Invalid hex string\00")
(data (i32.const 11260) "Invalid hex character!\00")
(data (i32.const 19712) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 19728) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 19744) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "has_auth" (func $fimport$0 (param i64) (result i32)))
(import "env" "current_time" (func $fimport$1 (result i64)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "is_account" (func $fimport$3 (param i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$4 (param i32 i32)))
(import "env" "require_auth2" (func $fimport$5 (param i64 i64)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "cancel_deferred" (func $fimport$7 (param i32) (result i32)))
(import "env" "transaction_size" (func $fimport$8 (result i32)))
(import "env" "read_transaction" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$10 (param i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$11 (result i32)))
(import "env" "read_action_data" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "send_deferred" (func $fimport$13 (param i32 i64 i32 i32 i32)))
(import "env" "abort" (func $fimport$14))
(import "env" "memset" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$16 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$19 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$20 (result i64)))
(import "env" "db_update_i64" (func $fimport$21 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$22 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$23 (param i32 i64 i32)))
(import "env" "db_store_i64" (func $fimport$24 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$25 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$28 (param i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$30 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$31 (param i32)))
(import "env" "memmove" (func $fimport$32 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$33 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$40 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$41 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$42 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$43 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$44 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$45 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$46 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$47 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$48 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$49 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$50 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$51 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$52 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $128))
(export "_ZdlPv" (func $254))
(export "_Znwj" (func $252))
(export "_Znaj" (func $253))
(export "_ZdaPv" (func $255))
(export "_ZnwjSt11align_val_t" (func $256))
(export "_ZnajSt11align_val_t" (func $257))
(export "_ZdlPvSt11align_val_t" (func $258))
(export "_ZdaPvSt11align_val_t" (func $259))
(table $0 17 17 anyfunc)
(elem (i32.const 1) $94 $96 $85 $56 $100 $55 $122 $14 $20 $24 $35 $21 $121 $123 $124 $34)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19760))
(global $global$2 i32 (i32.const 19760))


void .FUNC $220 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	*(($6 = ($5 + [-12]))) = (int_64)0
	*(($7 = ($5 + [-4]))) = [0]
	$8 = ($2 + [-12])
	*($6) = *($8)
	$6 = ($2 + [-4])
	*($7) = *($6)
	$2 = ($2 + [-16])
	*(($5 + [-16])) = *($2)
	*($6) = [0]
	*($8) = (int_64)0
	$5 = (*($4) + [-16])
	*($4) = $5
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($2 = ($1 + [4]))) = $3
	$5 = ($0 + [4])
	$4 = *($5)
	*($5) = *($1 + [8])
	*($1 + [8]) = $4
	$5 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $5
	*($1) = *($2)
}

int_32 .FUNC $284 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11296]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11300])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11296]) = [1]
	$2 = ($2 << [16])
	*([0] + [11300]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11300])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11300]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11296]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11296]) = [1]
	$3 = ($3 << [16])
	*([0] + [11300]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11300])
	
.LABEL $label$10
	*([0] + [11300]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $285 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19688])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19496]
	$3 = (((int_32)$1 * (int_32)[12]) + [19496])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = (*($0 + [4]) - $2)
	$4 = (*($1 + [4]) - $3)
	*($1 + [4]) = $4
	if ( ((int_32)$3 <= (int_32)[0]) ){ goto $label$1 }
	CALL memcpy($4, $2, $3)
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	$3 = *($0)
	*($0) = $4
	*(($4 = ($1 + [4]))) = $3
	$3 = ($0 + [4])
	$2 = *($3)
	*($3) = *($1 + [8])
	*($1 + [8]) = $2
	$3 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $3
	*($1) = *($4)
}

void .FUNC $6 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	*(($0 + [28])) = $1
	$5 = ($0 + [44])
	$1 = *($5)
	if ( ((int_32)*(($0 + [48])) == (int_32)$1) ){ goto $label$1 }
	*($4) = *($1 + [8])
	*($4 + [8]) = *($0)
	CALL $13(($0 + [8]), $4, $2, $3)
	$global$0 = ($4 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $269($5)
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0) = (*($0) + [16])
	$0 = CALL $180($0, ($1 + [16]))
	$3 = *($1 + [28])
	$2 = *(($1 + [32]))
	$1 = (($2 + *($0)) - $3)
	$4 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $1
	return $0
}

int_32 .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $179(CALL $178($0, ($1 + [16])), ($1 + [28]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10122])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $176($2, $1)
	CALL $173($0, *($2))
	$3 = *($0)
	*($2) = $3
	*($2 + [4]) = $3
	*($2 + [8]) = *($0 + [4])
	CALL $177($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$6 = ($4 - $5)
	$7 = ($6 + $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = ($0 + [8])
	$3 = ($3 - $5)
	if ( ((uint_32)$3 >= (uint_32)[1073741823]) ){ goto $label$5 }
	*(($2 + [24])) = $4
	$4 = [0]
	*($2 + [20]) = [0]
	$3 = ($3 << [1])
	$3 = ( $7 ? $3 : ($3 <= $7) )
	if ( $3 ){ goto $label$4 }
	$3 = [0]
	goto $label$3 
	
.LABEL $label$6
	$3 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = [0]
	$4 = (*($3) + [1])
	*($3) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$5
	*(($2 + [24])) = $4
	*($2 + [20]) = [0]
	$3 = [2147483647]
	
.LABEL $label$4
	$4 = CALL _Znwj($3)
	
.LABEL $label$3
	*($2 + [8]) = $4
	*(($2 + [20])) = ($4 + $3)
	$4 = ($4 + $6)
	*($2 + [16]) = $4
	*($2 + [12]) = $4
	$3 = ($2 + [16])
	
.LOOP $label$8:
	*($4) = [0]
	$4 = (*($3) + [1])
	*($3) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	CALL $174($0, ($2 + [8]))
	$4 = *($2 + [12])
	$1 = ($2 + [16])
	if ( ((int_32)*($1) == (int_32)$4) ){ goto $label$9 }
	*($1) = $4
	
.LABEL $label$9
	$1 = *($2 + [8])
	if ( ($1 == 0) ){ goto $label$2 }
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $268($0)
}

void .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $175(*($1), ($0 + [16]))
}

int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($2 + [-16])
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$5 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$2 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $246 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10736])
	$3 = CALL db_next_i64(*(*($0 + [4]) + [32]), ($1 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $201(*($0), $3)
	
.LABEL $label$1
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = int_32((*($1 + [4]) - *($1)) >> [4])
	CALL $181($0, ($2 + [8]))
	$4 = *($1 + [4])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *($0 + [4])
	$1 = ($0 + [4])
	
.LOOP $label$2:
	$6 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[7]), [10122])
	CALL memcpy(*($1), $3, [8])
	$5 = (*($1) + [8])
	*($1) = $5
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[7]), [10122])
	CALL memcpy(*($1), ($3 + [8]), [8])
	$5 = (*($1) + [8])
	*($1) = $5
	$3 = ($3 + [16])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $4 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [8]) = $2
	*($3) = $1
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = [0]
	CALL $10(($3 + [16]), [1])
	*(($4 = *($3 + [20]))) = *($3)
	*(($4 + [8])) = *($3 + [8])
	*($3 + [20]) = ($4 + [16])
	CALL $11($0, ($3 + [16]))
	$4 = *($3 + [16])
	if ( ($4 == 0) ){ goto $label$1 }
	*($3 + [20]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

int_64 .FUNC $276 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $221 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-16])
	*($3) = $4
	$5 = *(($1 + [-12]))
	if ( ($5 == 0) ){ goto $label$3 }
	*(($1 + [-8])) = $5
	CALL _ZdlPv($5)
	$4 = *($3)
	
.LABEL $label$3
	$1 = $4
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	return $0
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [48])
	$global$0 = $5
	$0 = ($0 + [44])
	$6 = *($0)
	if ( ((int_32)*(($0 + [48])) == (int_32)$6) ){ goto $label$1 }
	*($6 + [8]) = $2
	*($6) = $1
	*(($5 + [24])) = *(($4 + [8]))
	*($5 + [8]) = *($3)
	*($5 + [16]) = *($4)
	$0 = [0]
	
.LOOP $label$2:
	*(($4 + $0)) = [0]
	$0 = ($0 + [4])
	if ( ((int_32)$0 != (int_32)[12]) ){ goto $label$2 }
	CALL $12(($5 + [32]), ($5 + [8]))
	$0 = *($6 + [28])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [32])) = $0
	CALL _ZdlPv($0)
	*(($0 = ($6 + [36]))) = [0]
	*($6 + [28 align=4]) = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$0 = ($6 + [36])
	
.LABEL $label$3
	*(($6 + [28])) = *($5 + [32])
	*($0) = *($5 + [40])
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = [0]
	if ( ((*(($5 + [16])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$5
	$global$0 = ($5 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $269($0)
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [8]
	CALL $189($2, ($1 + [8]))
	CALL $173($0, *($2))
	$3 = *($0)
	*($2) = $3
	*($2 + [4]) = $3
	*($2 + [8]) = *($0 + [4])
	*($2 + [16]) = $2
	*($2 + [24]) = $1
	CALL $249(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $3 (int_32 $0, int_64 $1)
{
	int_32 $2
	*($0) = $1
	$1 = CALL current_time()
	*(($0 + [20])) = [0]
	*(($0 + [24])) = [0]
	*(($0 + [28])) = (int_64)0
	*(($0 + [36])) = (int_64)0
	*(($2 = ($0 + [44]))) = (int_64)0
	*(($0 + [52])) = (int_64)0
	*(($0 + [60])) = (int_64)0
	*($0 + [8]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	CALL $9($2, [1])
	return $0
}

int_32 .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = *($1)
	$3 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	$2 = *($0)
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$1 = *($1)
	$1 = ( *(($1 + [4])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$2 }
	*($0) = ($1 + $2)
	
.LABEL $label$2
	return $0
}

void .FUNC $188 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$4 }
	$4 = [0]
	$5 = *([0] + [10376])
	
.LOOP $label$6:
	*((($2 + [3]) + ($1 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$1 == (int_32)[12]) )))))
	$4 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[11]) ){ goto $label$5 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	*($0) = [0]
	$1 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$2
	$0 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$7:
	*(($5 + $1)) = *((($2 + [3]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$7 }
	$1 = ($5 + $4)
	
.LABEL $label$1
	*($1) = [0]
	$global$0 = ($2 + [16])
}

void .FUNC $49 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [144])
	$global$0 = $5
	$6 = *($2)
	$7 = *($2 + [8])
	if ( ((int_64)$7 != (int_64)1397703940) ){ goto $label$2 }
	CALL eosio_assert([1], [9492])
	$8 = (int_64)6138663591592764928
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$7 == (int_64)1296126464), [9511])
	$8 = (int_64)-5069476200169789136
	
.LABEL $label$1
	*($5 + [120]) = $6
	*($5 + [128]) = $7
	*($5 + [136]) = $8
	if ( CALL $62($8, $1, (uint_64)$7 >> (uint_64)(int_64)8)) ){ goto $label$4 }
	$6 = *((($5 + [120]) + [8]))
	*((($5 + [72]) + [8])) = $6
	*(($5 + [8])) = $6
	$6 = *($5 + [120])
	*($5) = $6
	*($5 + [72]) = $6
	CALL $63(($5 + [88]), $5)
	$6 = *($5 + [88])
	*($5 + [120]) = $6
	if ( ((int_64)$6 < (int_64)1) ){ goto $label$9 }
	$8 = *($5 + [104])
	$7 = *(($5 + [112]))
	if ( ((int_64)$7 != (int_64)1397703940) ){ goto $label$8 }
	CALL eosio_assert([1], [9492])
	$9 = (int_64)6138663591592764928
	goto $label$7 
	
.LABEL $label$9
	$7 = *($0)
	$8 = CALL $22($0)
	$9 = *($5 + [104])
	$6 = *(($5 + [112]))
	if ( ((int_64)$6 != (int_64)1397703940) ){ goto $label$6 }
	CALL eosio_assert([1], [9492])
	$10 = (int_64)6138663591592764928
	goto $label$5 
	
.LABEL $label$8
	CALL eosio_assert(((int_64)$7 == (int_64)1296126464), [9511])
	$9 = (int_64)-5069476200169789136
	
.LABEL $label$7
	*($5 + [56]) = $7
	*($5 + [48]) = $8
	*($5 + [64]) = $9
	CALL $64($0, $1, ($5 + [48]), [1])
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert(((int_64)$6 == (int_64)1296126464), [9511])
	$10 = (int_64)-5069476200169789136
	
.LABEL $label$5
	*(($5 + [40])) = [0]
	*($5 + [56]) = $6
	*($5 + [48]) = $9
	*($5 + [64]) = $10
	*($5 + [32]) = (int_64)0
	$2 = CALL $279([8806])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$12 }
	*($5 + [32]) = ($2 << [1])
	$11 = (($5 + [32]) | [1])
	if ( $2 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$12 = (($2 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($5 + [32]) = ($12 | [1])
	*($5 + [40]) = $11
	*($5 + [36]) = $2
	
.LABEL $label$11
	CALL memcpy($11, [8806], $2)
	
.LABEL $label$10
	*(($11 + $2)) = [0]
	CALL $28($0, $7, $8, ($5 + [48]), ($5 + [32]), $4)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($5 + [40]))
	
.LABEL $label$13
	$6 = *($5 + [120])
	
.LABEL $label$4
	if ( ((int_64)$6 < (int_64)1) ){ goto $label$14 }
	*((($5 + [16]) + [8])) = *(($3 + [8]))
	*($5 + [16]) = *($3)
	$6 = *($0)
	$2 = [0]
	
.LOOP $label$15:
	*(($3 + $2)) = [0]
	$2 = ($2 + [4])
	if ( ((int_32)$2 != (int_32)[12]) ){ goto $label$15 }
	CALL $28($0, $6, $1, ($5 + [120]), ($5 + [16]), $4)
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($5 + [24]))
	
.LABEL $label$14
	$global$0 = ($5 + [144])
	return (unreachable)
	
.LABEL $label$3
	CALL $260(($5 + [32]))
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = *($1 + [8])
	*((($3 + [32]) + [8])) = [0]
	*($3 + [32]) = (int_64)0
	if ( ((int_64)$4 != (int_64)1397703940) ){ goto $label$2 }
	*($3 + [32]) = [12]
	CALL memcpy((($3 + [32]) | [1]), [10000], [6])
	$1 = (($3 + [32]) | [7])
	goto $label$1 
	
.LABEL $label$2
	*($3 + [32]) = [8]
	CALL memcpy((($3 + [32]) | [1]), [10007], [4])
	$1 = (($3 + [32]) | [5])
	
.LABEL $label$1
	*($1) = [0]
	$5 = CALL _Znwj([16])
	CALL memcpy($5, [10012], [13])
	*($5 + [13]) = [0]
	$6 = CALL $265(($3 + [32]), $5, [13])
	*((($3 + [48]) + [8])) = *(($6 + [8]))
	*($3 + [48]) = *($6)
	$1 = [0]
	
.LOOP $label$3:
	*(($6 + $1)) = [0]
	$1 = ($1 + [4])
	if ( ((int_32)$1 != (int_32)[12]) ){ goto $label$3 }
	CALL $74(($3 + [16]), $2)
	$1 = *($3 + [16])
	$6 = ($1 & [1])
	$6 = CALL $265(($3 + [48]), ( *($3 + [24]) ? (($3 + [16]) | [1]) : $6 ), ( *($3 + [20]) ? uint_32($1 >> [1]) : $6 ))
	*((($3 + [64]) + [8])) = *(($6 + [8]))
	*($3 + [64]) = *($6)
	$1 = [0]
	
.LOOP $label$4:
	*(($6 + $1)) = [0]
	$1 = ($1 + [4])
	if ( ((int_32)$1 != (int_32)[12]) ){ goto $label$4 }
	*($3) = (int_64)0
	*($3) = [8]
	*(($1 = ($3 + [8]))) = [0]
	$6 = ($3 | [1])
	CALL memcpy($6, [10026], [4])
	*($3 + [5]) = [0]
	$1 = *($3)
	$2 = ($1 & [1])
	$6 = CALL $265(($3 + [64]), ( *($1) ? $6 : $2 ), ( *($3 + [4]) ? uint_32($1 >> [1]) : $2 ))
	*($0) = *($6)
	*(($0 + [8])) = *(($6 + [8]))
	$1 = [0]
	
.LOOP $label$5:
	*(($6 + $1)) = [0]
	$1 = ($1 + [4])
	if ( ((int_32)$1 != (int_32)[12]) ){ goto $label$5 }
	if ( ((*($3) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$6
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($3 + [72]))
	
.LABEL $label$7
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$8
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($3 + [56]))
	
.LABEL $label$9
	CALL _ZdlPv($5)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($3 + [40]))
	
.LABEL $label$10
	$global$0 = ($3 + [80])
}

int_32 .FUNC $264 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $279($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $262($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC memory ()
{
}

int_32 .FUNC $266 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $262($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

void .FUNC $236 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $237(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $238($0, $9)
	CALL $239($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $268($0)
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $72(($2 + [8]), $1, (int_64)4995142087184830980)
	$3 = [0]
	CALL eosio_assert(((int_32)*($2 + [12]) != (int_32)[0]), [9629])
	$1 = *($2 + [12])
	*(($0 + [8])) = *(($1 + [48]))
	$4 = *($1 + [40])
	*($0) = $4
	CALL eosio_assert(((int_64)$4 < (int_64)4503599627370496), [9911])
	CALL eosio_assert(((int_64)$4 > (int_64)-4503599627370496), [9935])
	*($0) = ((int_64)$4 << (int_64)10)
	CALL $73($0, *($1 + [16]))
	if ( ((uint_64)((int_64)*($0) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	*($2 + [8]) = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$3 = CALL $29(($2 + [8]))
	
.LABEL $label$1
	CALL eosio_assert($3, [9848])
	$global$0 = ($2 + [16])
}

void .FUNC $42 (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = $1
	CALL $41(($2 + [16]), $0, ($2 + [24]))
	if ( (*($2 + [20]) == 0) ){ goto $label$1 }
	*($2 + [8]) = *($2 + [16])
	*($2) = *($2 + [8])
	CALL $125(($2 + [24]), $0, $2)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3) = $1
	CALL $146(($3 + [8]), $3, $2)
	$4 = *($3 + [12])
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((int_64)*($2) != (int_64)*($4 + [8])) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$1), [9578])
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [416])
	$global$0 = $4
	$5 = *($2 + [40])
	if ( ($5 == 0) ){ goto $label$2 }
	$5 = ((uint_32)$5 <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)))
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [8961])
	CALL $42($1, *($2 + [8]))
	if ( (*($2 + [44]) == 0) ){ goto $label$10 }
	$6 = *($2 + [16])
	if ( ((int_64)$6 < (int_64)1) ){ goto $label$4 }
	$1 = ($2 + [16])
	*((($4 + [312]) + [32])) = [0]
	*($4 + [320]) = (int_64)6138663577826885632
	*($4 + [312]) = (int_64)6138663577826885632
	*($4 + [328]) = (int_64)-1
	*($4 + [336]) = (int_64)0
	CALL $43(($4 + [296]), ($4 + [312]))
	if ( ((int_64)*(($2 + [24])) != (int_64)1397703940) ){ goto $label$9 }
	$3 = ($1 + [8])
	$7 = *($3)
	*((($4 + [264]) + [8])) = $7
	$6 = *($1)
	*((($4 + [48]) + [8])) = $7
	*($4 + [48]) = $6
	*($4 + [264]) = $6
	CALL $44(($4 + [128]), ($4 + [48]))
	*(($5 = (($4 + [280]) + [8]))) = *((($4 + [128]) + [8]))
	*($4 + [280]) = *($4 + [128])
	$6 = *($5)
	*((($4 + [232]) + [8])) = $6
	*((($4 + [32]) + [8])) = $6
	$6 = *($4 + [280])
	*($4 + [32]) = $6
	*($4 + [232]) = $6
	CALL $45(($4 + [248]), ($4 + [312]), ($4 + [32]))
	$8 = *($3)
	*((($4 + [216]) + [8])) = $8
	$6 = *($0)
	$7 = *($1)
	*((($4 + [16]) + [8])) = $8
	*($4 + [216]) = $7
	*($4 + [16]) = $7
	CALL $46($6, $6, ($4 + [16]))
	CALL $47($0, ($4 + [248]))
	$6 = *((($4 + [296]) + [8]))
	*((($4 + [184]) + [8])) = $6
	$7 = *($2 + [32])
	*(($4 + [8])) = $6
	$6 = *($4 + [296])
	*($4 + [184]) = $6
	*($4) = $6
	CALL $48(($4 + [200]), $1, $4)
	*((($4 + [168]) + [8])) = [0]
	*($4 + [168]) = (int_64)0
	$1 = CALL $279([9006])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$8 }
	*($4 + [168]) = ($1 << [1])
	$3 = (($4 + [168]) | [1])
	if ( $1 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$10
	*((($4 + [80]) + [8])) = *(($3 + [8]))
	*($4 + [80]) = *($3)
	$6 = *($2 + [32])
	$1 = [0]
	
.LOOP $label$11:
	*(($3 + $1)) = [0]
	$1 = ($1 + [4])
	if ( ((int_32)$1 != (int_32)[12]) ){ goto $label$11 }
	CALL $49($0, $6, ($2 + [16]), ($4 + [80]), [0])
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($4 + [88]))
	goto $label$4 
	
.LABEL $label$9
	CALL $50(*($0), (CASTING uint_32)(uint_64 $6))
	CALL $51($0, $1)
	*((($4 + [128]) + [32])) = [0]
	$6 = *($2 + [32])
	$7 = *($0)
	$8 = *((($4 + [296]) + [8]))
	*((($4 + [64]) + [8])) = $8
	*((($4 + [96]) + [8])) = $8
	*($4 + [144]) = (int_64)-1
	*($4 + [152]) = (int_64)0
	*($4 + [128]) = $7
	*($4 + [136]) = $7
	$7 = *($4 + [296])
	*($4 + [64]) = $7
	*($4 + [96]) = $7
	CALL $48(($4 + [112]), $1, ($4 + [64]))
	*($4 + [384]) = $6
	$7 = *(( ($4 + [384]) ? $0 : CALL has_auth($6) ))
	*((($4 + [368]) + [8])) = *((($4 + [112]) + [8]))
	*($4 + [368]) = *($4 + [112])
	$1 = [0]
	
.LOOP $label$12:
	*((($4 + [112]) + $1)) = [0]
	$1 = ($1 + [4])
	if ( ((int_32)$1 != (int_32)[12]) ){ goto $label$12 }
	*(($4 + [408])) = *(($4 + [376]))
	*($4 + [392]) = $6
	*($4 + [384]) = (int_64)0
	*($4 + [400]) = *($4 + [368])
	$1 = [0]
	
.LOOP $label$13:
	*((($4 + [368]) + $1)) = [0]
	$1 = ($1 + [4])
	if ( ((int_32)$1 != (int_32)[12]) ){ goto $label$13 }
	CALL $52(($4 + [128]), ($4 + [384]), $7)
	if ( ((*(($4 + [400])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [408])))
	
.LABEL $label$14
	if ( ((*($4 + [368]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($4 + [376]))
	
.LABEL $label$15
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($4 + [120]))
	
.LABEL $label$16
	CALL $53(($4 + [152]))
	goto $label$5 
	
.LABEL $label$8
	$2 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($2)
	*($4 + [168]) = ($2 | [1])
	*($4 + [176]) = $3
	*($4 + [172]) = $1
	
.LABEL $label$7
	CALL memcpy($3, [9006], $1)
	
.LABEL $label$6
	*(($3 + $1)) = [0]
	*(($3 = (($4 + [352]) + [8]))) = *((($4 + [248]) + [8]))
	*($4 + [352]) = *($4 + [248])
	*(($1 = (($4 + [368]) + [8]))) = *($3)
	*($4 + [368]) = *($4 + [352])
	*(($3 = (($4 + [384]) + [8]))) = *($1)
	*($4 + [384]) = (int_64)0
	CALL eosio_assert([1], [9789])
	if ( ((int_64)*($4 + [368]) <= (int_64)-1) ){ goto $label$18 }
	CALL $39(($4 + [368]), ($4 + [384]))
	goto $label$17 
	
.LABEL $label$18
	*($3) = *($1)
	*($4 + [384]) = *($4 + [368])
	*($4 + [368]) = (int_64)0
	
.LABEL $label$17
	*((($4 + [128]) + [8])) = *((($4 + [368]) + [8]))
	$3 = (($4 + [384]) + [8])
	*(($1 = ($4 + [152]))) = *($3)
	*($4 + [128]) = *($4 + [368])
	*($4 + [144]) = *($4 + [384])
	$6 = *($4 + [144])
	if ( ((int_64)$6 < (int_64)1) ){ goto $label$19 }
	$9 = *($0)
	$10 = CALL $22($0)
	$8 = *($1)
	if ( ((int_64)$8 != (int_64)1397703940) ){ goto $label$21 }
	CALL eosio_assert([1], [9492])
	$11 = (int_64)6138663591592764928
	goto $label$20 
	
.LABEL $label$21
	CALL eosio_assert(((int_64)$8 == (int_64)1296126464), [9511])
	$11 = (int_64)-5069476200169789136
	
.LABEL $label$20
	*((($4 + [368]) + [8])) = *((($4 + [168]) + [8]))
	*($4 + [392]) = $8
	*($4 + [384]) = $6
	*($4 + [400]) = $11
	*($4 + [368]) = *($4 + [168])
	$1 = [0]
	
.LOOP $label$22:
	*((($4 + [168]) + $1)) = [0]
	$1 = ($1 + [4])
	if ( ((int_32)$1 != (int_32)[12]) ){ goto $label$22 }
	CALL $28($0, $9, $10, ($4 + [384]), ($4 + [368]), [0])
	if ( ((*($4 + [368]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($4 + [376]))
	
.LABEL $label$19
	*($3) = *((($4 + [200]) + [8]))
	*($4 + [384]) = *($4 + [200])
	$1 = [0]
	
.LOOP $label$23:
	*((($4 + [200]) + $1)) = [0]
	$1 = ($1 + [4])
	if ( ((int_32)$1 != (int_32)[12]) ){ goto $label$23 }
	CALL $49($0, $7, ($4 + [128]), ($4 + [384]), [0])
	if ( ((*($4 + [384]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($4 + [392]))
	
.LABEL $label$24
	if ( ((*($4 + [168]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($4 + [176]))
	
.LABEL $label$25
	if ( ((*($4 + [200]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($4 + [208]))
	
.LABEL $label$5
	CALL $54(($4 + [336]))
	
.LABEL $label$4
	$global$0 = ($4 + [416])
	return (unreachable)
	
.LABEL $label$3
	CALL $260(($4 + [168]))
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [96])
	$global$0 = $2
	CALL $74(($2 + [48]), $1)
	$3 = CALL $267(($2 + [48]), [0], [9029])
	*((($2 + [80]) + [8])) = *(($3 + [8]))
	*($2 + [80]) = *($3)
	$4 = [0]
	
.LOOP $label$1:
	*(($3 + $4)) = [0]
	$4 = ($4 + [4])
	if ( ((int_32)$4 != (int_32)[12]) ){ goto $label$1 }
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($2 + [56]))
	
.LABEL $label$2
	*($2 + [56]) = (int_64)3617214756542218240
	*($2 + [64]) = (int_64)0
	*($2 + [72]) = [0]
	*($2 + [48]) = *($0)
	CALL $10(($2 + [64]), [1])
	*(($4 = *($2 + [68]))) = *($2 + [48])
	*(($4 + [8])) = *($2 + [56])
	*(($2 + [40])) = *((($2 + [80]) + [8]))
	*((($2 + [8]) + [16])) = *(($1 + [8]))
	*($2 + [68]) = ($4 + [16])
	*($2 + [32]) = *($2 + [80])
	*($2 + [8]) = *($0)
	*($2 + [16]) = *($1)
	$4 = [0]
	
.LOOP $label$3:
	*((($2 + [80]) + $4)) = [0]
	$4 = ($4 + [4])
	if ( ((int_32)$4 != (int_32)[12]) ){ goto $label$3 }
	CALL $89((int_64)-5069476200169789136, (int_64)8516769789752901632, ($2 + [64]), ($2 + [8]))
	if ( ((*(($2 + [32])) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($2 + [40])))
	
.LABEL $label$4
	$4 = *($2 + [64])
	if ( ($4 == 0) ){ goto $label$5 }
	*($2 + [68]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((*($2 + [80]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($2 + [88]))
	
.LABEL $label$6
	$global$0 = ($2 + [96])
}

void .FUNC $46 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($3 + [72]) = (int_64)3617214756542218240
	*($3 + [64]) = $0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = [0]
	CALL $10(($3 + [80]), [1])
	*(($4 = *($3 + [84]))) = *($3 + [64])
	*(($4 + [8])) = *($3 + [72])
	$5 = *(($2 + [8]))
	$6 = *($2)
	*(($3 + [16])) = $6
	*(($3 + [8])) = $1
	*((($3 + [32]) + [24])) = $5
	*(($3 + [24])) = $5
	*($3 + [84]) = ($4 + [16])
	*($3 + [32]) = $0
	*($3 + [40]) = $1
	*($3) = $0
	*($3 + [48]) = $6
	CALL $75((int_64)6138663577826885632, (int_64)4520896354024685568, ($3 + [80]), $3)
	$2 = *($3 + [80])
	if ( ($2 == 0) ){ goto $label$1 }
	*($3 + [84]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($3 + [96])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL $72(($3 + [32]), $1, (int_64)4995142087184830980)
	CALL eosio_assert(((int_32)*($3 + [36]) != (int_32)[0]), [9629])
	CALL memcpy(($3 + [32]), *($3 + [36]), [64])
	$4 = *(($2 + [8]))
	*((($3 + [16]) + [8])) = $4
	$5 = *($2)
	*(($3 + [8])) = $4
	*($3) = $5
	*($3 + [16]) = $5
	CALL $251($0, ($3 + [32]), $3, [8656])
	$global$0 = ($3 + [96])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$4 = ($1 + [8])
	*(($3 = ($2 + [8]))) = *($4)
	$5 = ((int_64)((int_64)*($1) + (int_64)199) / (int_64)200)
	*($2) = $5
	CALL eosio_assert([1], [9789])
	if ( ((int_64)$5 <= (int_64)*($1)) ){ goto $label$2 }
	$5 = *($1)
	*($1) = (int_64)0
	*($3) = *($4)
	*($2) = $5
	goto $label$1 
	
.LABEL $label$2
	CALL $39($1, $2)
	
.LABEL $label$1
	*($0 + [16]) = *($2)
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	*(($0 + [24])) = *(($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $222 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = [0]
	CALL $204($0, ($2 + [8]))
	CALL $223($1, *($2 + [8]))
	$4 = *($1 + [4])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *($0 + [4])
	$1 = ($0 + [4])
	
.LOOP $label$2:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $5) > (uint_32)[7]), [9573])
	CALL memcpy($3, *($1), [8])
	$5 = (*($1) + [8])
	*($1) = $5
	CALL eosio_assert(((uint_32)(*($6) - $5) > (uint_32)[7]), [9573])
	CALL memcpy(($3 + [8]), *($1), [8])
	$5 = (*($1) + [8])
	*($1) = $5
	$3 = ($3 + [16])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $267 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $266($0, $1, $2, CALL $279($2))
}

int_32 .FUNC $234 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9550])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$2 = CALL $282($4)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [24]) = $0
	CALL $235(($3 + [32]), $5)
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-4157503053760561152
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-4157503053760561152
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $236(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	
.LABEL $label$7
	if ( ($4 <= [513]) ){ goto $label$9 }
	CALL $285($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $233 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $191(*($1), (*($0) + [8]))
}

void .FUNC $249 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2 + [8]) = *(*($0))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $191(*($1), (*($0) + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $226 (int_32 $0, int_32 $1)
{
	CALL $229(CALL $228(CALL $228($0, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	return CALL $227($0, $1)
}

void .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	$6 = ($2 + [-24])
	$7 = *($6)
	*($6) = [0]
	*(($5 + [-24])) = $7
	*(($5 + [-8])) = *(($2 + [-8]))
	*(($5 + [-16])) = *(($2 + [-16]))
	$5 = (*($4) + [-24])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

int_32 .FUNC $166 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL _Znwj(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $165 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $166(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $167($0, $9)
	CALL $168($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $268($0)
}

int_32 .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9550])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$2 = CALL $282($4)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL $151(($3 + [32]), $5)
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [16]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $165(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	
.LABEL $label$7
	if ( ($4 <= [513]) ){ goto $label$9 }
	CALL $285($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $163 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($2)
	
.LABEL $label$1
	return $0
}

void .FUNC $162 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	if ( ((int_64)(uint_64)*(*($5) + [8]) >> (uint_64)(int_64)8) == (int_64)$2) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [9578])
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)3607749779137757184, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $164($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [9578])
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	
.LABEL $label$1
	*($0) = $1
}

int_32 .FUNC $161 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	return $0
}

void .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	$6 = ($2 + [-24])
	$7 = *($6)
	*($6) = [0]
	*(($5 + [-24])) = $7
	*(($5 + [-8])) = *(($2 + [-8]))
	*(($5 + [-16])) = *(($2 + [-16]))
	$5 = (*($4) + [-24])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

int_32 .FUNC $230 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$3 = *($1)
	$2 = *($1 + [4])
	$4 = (CASTING uint_64)(uint_32 ((int_32)($2 - $3) / (int_32)[40]))
	$1 = *($0)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $1
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $176($0, $3)
	$3 = ($3 + [40])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $244 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = (*($1 + [4]) - *($1))
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $245($0, $2)
	$3 = *($1)
	$1 = (*(($1 + [4])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$1 }
	$2 = ($0 + [4])
	CALL memcpy(*($2), $3, $1)
	*($2) = (*($2) + $1)
	
.LABEL $label$1
	return $0
}

void .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	CALL $171($0, [32])
	$3 = *($0 + [4])
	$0 = *($0)
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	*($2 + [16]) = $2
	*($2 + [24]) = $1
	CALL $172(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $168 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	return $0
}

void .FUNC $245 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = CALL _Znwj($1)
	*($0) = $2
	*($0 + [4]) = $2
	*($0 + [8]) = ($2 + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $268($0)
}

int_32 .FUNC $279 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *($1 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10122])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $242 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $175(*($1), ($4 + [16]))
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10122])
	CALL memcpy(*($0 + [4]), ($4 + [32]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	*($2 + [15]) = *($4 + [36])
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [10122])
	CALL memcpy(*($1 + [4]), ($2 + [15]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $243 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	CALL $175(*($1), ($3 + [8]))
	CALL $191(*($1), ($3 + [24]))
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL $60(($3 + [8]), $2, (int_64)0)
	$4 = *($3 + [8])
	*($3 + [56]) = $4
	if ( ((int_64)*($1 + [16]) < (int_64)1) ){ goto $label$1 }
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ($5) == 0) ){ goto $label$1 }
	CALL memcpy(($3 + [8]), $5, [48])
	CALL $66(($3 + [56]))
	if ( (CALL $57($0, $2, ($3 + [8])) == 0) ){ goto $label$1 }
	CALL $67($0, $1, ($3 + [8]))
	if ( (CALL $59($2, ($3 + [8])) == 0) ){ goto $label$1 }
	*($3 + [72]) = *(($3 + [16]))
	*($3 + [64]) = (int_64)-6497942740231541079
	CALL cancel_deferred(($3 + [64]))
	
.LABEL $label$1
	$global$0 = ($3 + [80])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [96])
	$global$0 = $2
	if ( ((int_64)*($1 + [16]) < (int_64)1) ){ goto $label$2 }
	CALL memcpy(($2 + [48]), $1, [48])
	CALL $65($0, CALL $fimport$6($2, ($2 + [48]), [48]), (int_64)0)
	$1 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $42($0, *($1 + [8]))
	$1 = [1]
	
.LABEL $label$1
	$global$0 = ($2 + [96])
	return $1
}

int_32 .FUNC $271 ()
{
	return [11288]
}

int_32 .FUNC $270 (int_32 $0)
{
	return ( ($0 | [32]) ? $0 : (($0 + [-65]) <= [26]) )
}

int_32 .FUNC $277 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $240 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10122])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [16])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [10122])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

int_64 .FUNC $275 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC $274 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $276($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $273($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [19728])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [19712]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [19744]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $275($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

void .FUNC $50 (int_64 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [40]) = (int_64)3617214756542218240
	*($2 + [32]) = $0
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = [0]
	CALL $10(($2 + [48]), [1])
	*(($3 = *($2 + [52]))) = *($2 + [32])
	*(($3 + [8])) = *($2 + [40])
	$4 = (CASTING uint_64)(uint_32 $1)
	*(($2 + [8])) = $4
	*($2 + [52]) = ($3 + [16])
	*($2 + [16]) = $0
	*($2 + [24]) = $4
	*($2) = $0
	CALL $90((int_64)6138663577826885632, (int_64)-4421660059835039744, ($2 + [48]), $2)
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$1 }
	*($2 + [52]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL $74(($2 + [32]), $1)
	$3 = CALL $267(($2 + [32]), [0], [9049])
	*((($2 + [64]) + [8])) = *(($3 + [8]))
	*($2 + [64]) = *($3)
	$4 = [0]
	
.LOOP $label$1:
	*(($3 + $4)) = [0]
	$4 = ($4 + [4])
	if ( ((int_32)$4 != (int_32)[12]) ){ goto $label$1 }
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($2 + [40]))
	
.LABEL $label$2
	*($2 + [40]) = (int_64)3617214756542218240
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = [0]
	*($2 + [32]) = *($0)
	CALL $10(($2 + [48]), [1])
	*(($4 = *($2 + [52]))) = *($2 + [32])
	*(($4 + [8])) = *($2 + [40])
	*(($2 + [24])) = *((($2 + [64]) + [8]))
	*(($2 + [8])) = *(($1 + [8]))
	*($2 + [52]) = ($4 + [16])
	*($2 + [16]) = *($2 + [64])
	*($2) = *($1)
	$4 = [0]
	
.LOOP $label$3:
	*((($2 + [64]) + $4)) = [0]
	$4 = ($4 + [4])
	if ( ((int_32)$4 != (int_32)[12]) ){ goto $label$3 }
	CALL $78((int_64)-5069476200169789136, (int_64)4516881727834030080, ($2 + [48]), $2)
	if ( ((*(($2 + [16])) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$4
	$4 = *($2 + [48])
	if ( ($4 == 0) ){ goto $label$5 }
	*($2 + [52]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($2 + [72]))
	
.LABEL $label$6
	$global$0 = ($2 + [80])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = (int_64)0
	CALL $117(($3 + [24]), $0, (int_64)0)
	if ( (*($3 + [28]) == 0) ){ goto $label$1 }
	*($3 + [28]) = [0]
	*($3 + [24]) = $0
	$4 = ((int_64)*(*(CALL $197(($3 + [24])) + [4])) + (int_64)1)
	*($3 + [16]) = $4
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [10460])
	
.LABEL $label$1
	*($3 + [24]) = $1
	*($3 + [28]) = ($3 + [16])
	CALL $198(($3 + [8]), $0, $2, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($2)
	
.LABEL $label$1
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	CALL $35($0, ((int_64)((int_64)((int_64)*($1 + [8]) ^ (int_64)*($1)) ^ (int_64)*($1 + [16])) ^ (int_64)*($1 + [24])))
}

void .FUNC $56 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [240])
	$global$0 = $2
	$3 = CALL $37($0, $1)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8721])
	CALL $38(($2 + [184]), $3, $1)
	$4 = ( ($0 + [72]) ? ($0 + [32]) : ((int_64)*($3 + [8]) == (int_64)6138663591592764928) )
	if ( (CALL $57($0, $3, ($2 + [184])) == 0) ){ goto $label$1 }
	CALL $58($0, ($2 + [184]), $4)
	
.LABEL $label$1
	*($2 + [232]) = $1
	CALL $41(($2 + [112]), $3, ($2 + [232]))
	if ( (*($2 + [116]) == 0) ){ goto $label$2 }
	if ( (CALL $59($3, ($2 + [184])) == 0) ){ goto $label$3 }
	*($2 + [120]) = *($2 + [192])
	*($2 + [112]) = (int_64)-6497942740231541079
	CALL cancel_deferred(($2 + [112]))
	goto $label$2 
	
.LABEL $label$3
	CALL $60(($2 + [112]), $4, (int_64)0)
	if ( (*($2 + [116]) == 0) ){ goto $label$4 }
	$3 = CALL $3(($2 + [112]), *($2 + [192]))
	$1 = *($2 + [216])
	*($2 + [232]) = $1
	CALL $4($3, *(( ($2 + [232]) ? $0 : CALL $fimport$0($1) )), (int_64)3617214756542218240)
	CALL $61($3, *($0), (int_64)6292795672933810176, ($2 + [192]))
	$1 = *($2 + [216])
	*($2 + [232]) = $1
	CALL $6($3, [1], *(( ($2 + [232]) ? $0 : CALL $fimport$0($1) )), [0])
	CALL $7(($3 + [56]))
	CALL $8(($3 + [44]))
	CALL $8(($3 + [32]))
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)*($2 + [224]) != (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(($2 + [64]), ($2 + [184]), [48])
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	*($2 + [48]) = [0]
	$4 = CALL memcpy($2, ($2 + [64]), [48])
	CALL $40($0, $3, $4, ($4 + [48]))
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($4 + [56]))
	
.LABEL $label$2
	$global$0 = ($2 + [240])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [432])
	$global$0 = $3
	$4 = *($2 + [40])
	if ( ($4 <= [2]) ){ goto $label$5 }
	if ( ((uint_32)$4 <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$4 }
	
.LABEL $label$5
	$4 = [1]
	if ( ((int_64)*(($2 + [24])) != (int_64)1397703940) ){ goto $label$1 }
	if ( CALL $62((int_64)-5069476200169789136, *($2 + [32]), (int_64)5062994) ){ goto $label$1 }
	$5 = *(($2 + [24]))
	*((($3 + [312]) + [8])) = $5
	$6 = *($2 + [16])
	*((($3 + [88]) + [8])) = $5
	*($3 + [312]) = $6
	*($3 + [88]) = $6
	CALL $63(($3 + [328]), ($3 + [88]))
	$5 = *($3 + [328])
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$1 }
	*(($3 + [304])) = [0]
	$6 = *($0)
	$4 = (($3 + [328]) + [24])
	$7 = *($4)
	*((($3 + [72]) + [8])) = $7
	*((($3 + [256]) + [8])) = $7
	*($3 + [280]) = (int_64)6138663577826885632
	*($3 + [272]) = (int_64)6138663577826885632
	*($3 + [288]) = (int_64)-1
	*($3 + [296]) = (int_64)0
	$7 = *($3 + [344])
	*($3 + [72]) = $7
	*($3 + [256]) = $7
	CALL $46($6, $6, ($3 + [72]))
	$6 = *($4)
	*((($3 + [200]) + [8])) = $6
	*((($3 + [56]) + [8])) = $6
	$6 = *($3 + [344])
	*($3 + [56]) = $6
	*($3 + [200]) = $6
	CALL $45(($3 + [216]), ($3 + [272]), ($3 + [56]))
	$7 = *($3 + [216])
	$6 = *($3 + [224])
	if ( ((int_64)$6 != (int_64)1397703940) ){ goto $label$3 }
	CALL eosio_assert([1], [9492])
	$8 = (int_64)6138663591592764928
	goto $label$2 
	
.LABEL $label$4
	*($3 + [280]) = *($2 + [8])
	*($3 + [272]) = (int_64)-6497942740231541079
	CALL cancel_deferred(($3 + [272]))
	CALL memcpy(($3 + [376]), $2, [48])
	$2 = CALL _Znwj([32])
	*($3 + [368]) = $2
	*($3 + [360]) = (int_64)73014444065
	CALL memcpy($2, [8788], [17])
	$4 = [0]
	*($2 + [17]) = [0]
	CALL memcpy(($3 + [104]), ($3 + [376]), [48])
	CALL $40($0, $1, ($3 + [104]), ($3 + [360]))
	if ( ((*($3 + [360]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [368])))
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$6 == (int_64)1296126464), [9511])
	$8 = (int_64)-5069476200169789136
	
.LABEL $label$2
	*($3 + [240]) = $6
	*($3 + [232]) = $7
	*($3 + [248]) = $8
	$4 = [0]
	$9 = ($2 + [32])
	CALL $64($0, *($9), ($3 + [232]), [0])
	*(($2 + [16])) = $5
	CALL memcpy(($3 + [152]), $2, [48])
	$6 = *($9)
	*($3 + [424]) = $6
	$6 = *(( ($3 + [424]) ? $0 : CALL has_auth($6) ))
	CALL memcpy(($3 + [8]), ($3 + [152]), [48])
	CALL $65($1, ($3 + [8]), $6)
	CALL $54(($3 + [296]))
	
.LABEL $label$1
	$global$0 = ($3 + [432])
	return $4
}

void .FUNC $247 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [10766])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$20()), [10811])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10861])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [32]))
}

void .FUNC $173 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = (*($0 + [4]) - $2)
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$1 }
	CALL $171($0, ($1 - $3))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$3 <= (uint_32)$1) ){ goto $label$2 }
	*(($0 + [4])) = ($2 + $1)
	
.LABEL $label$2
}

int_32 .FUNC $152 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL _Znwj(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	$6 = ($2 + [-24])
	$7 = *($6)
	*($6) = [0]
	*(($5 + [-24])) = $7
	*(($5 + [-8])) = *(($2 + [-8]))
	*(($5 + [-16])) = *(($2 + [-16]))
	$5 = (*($4) + [-24])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

void .FUNC $150 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $152(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $153($0, $9)
	CALL $154($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $268($0)
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9573])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9573])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($1 + [8]) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $156 (int_32 $0, int_32 $1)
{
	return CALL $158(CALL $158(CALL $151($0, $1), ($1 + [16])), ($1 + [40]))
}

void .FUNC $157 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $159(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $160($0, $9)
	CALL $161($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $268($0)
}

int_32 .FUNC $154 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	return $0
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9550])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$2 = CALL $282($4)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)4602678819172646912
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)4602678819172646912
	*($5 + [64]) = $0
	CALL $156(($3 + [32]), $5)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5 + [8])
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $157(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	
.LABEL $label$7
	if ( ($4 <= [513]) ){ goto $label$9 }
	CALL $285($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	$0 = CALL $151($0, $1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9573])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL _Znwj(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_64 .FUNC $273 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

void .FUNC $272 (int_32 $0)
{
}

int_32 .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (*($1 + [4]) - *($1))
	CALL $181($0, ($2 + [8]))
	$3 = *($1)
	$1 = (*($1 + [4]) - $3)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) >= (int_32)$1), [10122])
	CALL memcpy(*($0 + [4]), $3, $1)
	*($0 + [4]) = (*($0 + [4]) + $1)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $224 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	if ( ((uint_32)int_32(($3 - $4) >> [4]) >= (uint_32)$1) ){ goto $label$3 }
	$5 = *($0)
	$4 = int_32(($4 - $5) >> [4])
	$6 = ($4 + $1)
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = ($0 + [8])
	$8 = [268435455]
	$3 = ($3 - $5)
	if ( ((uint_32)int_32($3 >> [4]) > (uint_32)[134217726]) ){ goto $label$4 }
	$3 = int_32($3 >> [3])
	$8 = ( $6 ? $3 : ($3 <= $6) )
	
.LABEL $label$4
	$4 = CALL $186(($2 + [8]), $8, $4, $7)
	$5 = *($4 + [8])
	$3 = $5
	$8 = $1
	
.LOOP $label$5:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [16])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$5 }
	*(($3 = ($4 + [8]))) = ($5 + ($1 << [4]))
	CALL $187($0, $4)
	$0 = *($4 + [4])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$6 }
	*($3) = ($8 + (((int_32)(($8 + [-16]) - $0) ^ (int_32)[-1]) & [-16]))
	
.LABEL $label$6
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$2 }
	CALL _ZdlPv($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = $4
	$8 = $1
	
.LOOP $label$7:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [16])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$7 }
	*(($0 + [4])) = ($4 + ($1 << [4]))
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $268($0)
}

void .FUNC $183 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = int_32((*($0 + [4]) - $3) >> [4])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$6 = ($0 + [8])
	$7 = [268435455]
	$3 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($3 >> [4]) > (uint_32)[134217726]) ){ goto $label$2 }
	$7 = int_32($3 >> [3])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	
.LABEL $label$2
	*(($3 = *(($7 = CALL $186(($2 + [8]), $7, $4, $6)) + [8]))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	*($7 + [8]) = (*($7 + [8]) + [16])
	CALL $187($0, $7)
	$1 = *($7 + [4])
	$0 = *($7 + [8])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	*(($7 + [8])) = ($0 + (((int_32)(($0 + [-16]) - $1) ^ (int_32)[-1]) & [-16]))
	
.LABEL $label$3
	$7 = *($7)
	if ( ($7 == 0) ){ goto $label$4 }
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $268($0)
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL $72(($3 + [32]), $1, (int_64)4995142087184830980)
	CALL eosio_assert(((int_32)*($3 + [36]) != (int_32)[0]), [9629])
	CALL memcpy(($3 + [32]), *($3 + [36]), [64])
	$4 = *(($2 + [8]))
	*((($3 + [16]) + [8])) = $4
	$5 = *($2)
	*(($3 + [8])) = $4
	*($3) = $5
	*($3 + [16]) = $5
	CALL $251($0, ($3 + [32]), $3, [8520])
	$global$0 = ($3 + [96])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	CALL $171($0, [8])
	$0 = *($0)
	CALL eosio_assert(((int_32)(*($0 + [4]) - $0) > (int_32)[7]), [10122])
	CALL memcpy($0, $1, [8])
}

int_32 .FUNC $248 (int_32 $0)
{
	int_32 $1
	$1 = ($0 + [-48])
	if ( (($1 & [255]) <= [10]) ){ goto $label$1 }
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$2 }
	$1 = ($0 + [-87])
	goto $label$1 
	
.LABEL $label$2
	if ( ((uint_32)(($0 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$3 }
	$1 = ($0 + [-55])
	goto $label$1 
	
.LABEL $label$3
	$1 = [0]
	CALL eosio_assert([0], [11260])
	
.LABEL $label$1
	return ($1 & [255])
}

int_32 .FUNC $225 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	CALL $231(CALL $230(CALL $230($0, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	return *($0) = $2
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [208])
	$global$0 = $3
	*($3 + [152]) = *($1 + [8])
	CALL $41(($3 + [48]), $0, ($3 + [152]))
	$4 = *($3 + [48])
	$3 = CALL memcpy($3, $1, [48])
	CALL memcpy(($3 + [56]), $3, [48])
	CALL memcpy(($3 + [104]), ($3 + [56]), [48])
	CALL memcpy(($3 + [152]), ($3 + [104]), [48])
	CALL eosio_assert(((uint_64)$4 > (uint_64)(int_64)4294967295), [10128])
	*($3 + [200]) = ($3 + [152])
	$1 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$1) != (int_32)[0]), [10181])
	CALL $77($0, $1, $2, ($3 + [200]))
	$global$0 = ($3 + [208])
}

void .FUNC $64 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = *($2 + [8])
	if ( ((int_64)$5 == (int_64)1397703940) ){ goto $label$2 }
	if ( ((int_64)$5 != (int_64)1296126464) ){ goto $label$1 }
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $51($0, $2)
	
.LABEL $label$3
	$6 = *($2 + [16])
	*($4 + [72]) = (int_64)3617214756542218240
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = [0]
	*($4 + [64]) = *($0)
	CALL $10(($4 + [128]), [1])
	*(($3 = *($4 + [132]))) = *($4 + [64])
	*(($3 + [8])) = *($4 + [72])
	$5 = *($0)
	$7 = *(($2 + [8]))
	*((($4 + [8]) + [8])) = $7
	*((($4 + [8]) + [16])) = $5
	*($4 + [132]) = ($3 + [16])
	*($4 + [104]) = $1
	*($4 + [8]) = $1
	*($4 + [112]) = $7
	*($4 + [120]) = $5
	CALL $76($6, (int_64)-6533262907872903168, ($4 + [128]), ($4 + [8]))
	$2 = *($4 + [128])
	if ( ($2 == 0) ){ goto $label$1 }
	*($4 + [132]) = $2
	CALL _ZdlPv($2)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)CALL $23($0) != (int_64)0) ){ goto $label$1 }
	*(($4 + [96])) = [0]
	$1 = *($0)
	$5 = *($2)
	$6 = *(($2 + [8]))
	*((($4 + [32]) + [8])) = $6
	*((($4 + [48]) + [8])) = $6
	*($4 + [72]) = (int_64)6138663577826885632
	*($4 + [64]) = (int_64)6138663577826885632
	*($4 + [80]) = (int_64)-1
	*($4 + [88]) = (int_64)0
	*($4 + [48]) = $5
	*($4 + [32]) = $5
	CALL $46($1, $1, ($4 + [32]))
	CALL $54(($4 + [88]))
	
.LABEL $label$1
	$global$0 = ($4 + [144])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [336])
	$global$0 = $3
	*(($3 + [264])) = [0]
	*(($4 = (($3 + [216]) + [8]))) = *(($2 + [24]))
	*($3 + [240]) = (int_64)6138663577826885632
	*($3 + [232]) = (int_64)6138663577826885632
	*($3 + [248]) = (int_64)-1
	*($3 + [256]) = (int_64)0
	*($3 + [216]) = *($2 + [16])
	*(($5 = (($3 + [288]) + [8]))) = *($4)
	*($3 + [288]) = *($3 + [216])
	if ( ((int_64)*(($1 + [24])) != (int_64)1397703940) ){ goto $label$2 }
	$6 = *($5)
	*((($3 + [304]) + [8])) = $6
	*((($3 + [72]) + [8])) = $6
	$6 = *($3 + [288])
	*($3 + [72]) = $6
	*($3 + [304]) = $6
	CALL $69(($3 + [320]), ($3 + [232]), ($3 + [72]))
	*($5) = *((($3 + [320]) + [8]))
	*($3 + [288]) = *($3 + [320])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($5)
	*((($3 + [304]) + [8])) = $6
	*((($3 + [88]) + [8])) = $6
	$6 = *($3 + [288])
	*($3 + [88]) = $6
	*($3 + [304]) = $6
	CALL $45(($3 + [320]), ($3 + [232]), ($3 + [88]))
	*($5) = *((($3 + [320]) + [8]))
	*($3 + [288]) = *($3 + [320])
	
.LABEL $label$1
	$7 = ($1 + [16])
	$8 = ($2 + [16])
	$6 = *($3 + [288])
	$9 = *($3 + [296])
	$5 = ($1 + [24])
	CALL eosio_assert(((int_64)*($5) == (int_64)$9), [9679])
	$10 = *(($1 + [16]))
	$5 = CALL $70(($3 + [200]), ( $6 ? $10 : ((int_64)$6 < (int_64)$10) ), *($5))
	CALL eosio_assert(((int_64)$9 == (int_64)*($5 + [8])), [9789])
	if ( ((int_64)$6 != (int_64)*($5)) ){ goto $label$4 }
	*((($3 + [320]) + [8])) = *(($8 + [8]))
	*($3 + [320]) = *($8)
	goto $label$3 
	
.LABEL $label$4
	*(($11 = (($3 + [272]) + [8]))) = *(($7 + [8]))
	*($3 + [272]) = *($7)
	*(($4 = (($3 + [288]) + [8]))) = *($11)
	*($3 + [288]) = *($3 + [272])
	if ( ((int_64)*(($2 + [24])) != (int_64)1397703940) ){ goto $label$6 }
	$6 = *($4)
	*((($3 + [304]) + [8])) = $6
	*((($3 + [40]) + [8])) = $6
	$6 = *($3 + [288])
	*($3 + [40]) = $6
	*($3 + [304]) = $6
	CALL $69(($3 + [320]), ($3 + [232]), ($3 + [40]))
	*($4) = *((($3 + [320]) + [8]))
	*($3 + [288]) = *($3 + [320])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($4)
	*((($3 + [304]) + [8])) = $6
	*((($3 + [56]) + [8])) = $6
	$6 = *($3 + [288])
	*($3 + [56]) = $6
	*($3 + [304]) = $6
	CALL $45(($3 + [320]), ($3 + [232]), ($3 + [56]))
	*($4) = *((($3 + [320]) + [8]))
	*($3 + [288]) = *($3 + [320])
	
.LABEL $label$5
	*((($3 + [320]) + [8])) = *((($3 + [288]) + [8]))
	*($3 + [320]) = *($3 + [288])
	
.LABEL $label$3
	CALL $43(($3 + [304]), ($3 + [232]))
	$6 = *((($3 + [304]) + [8]))
	*((($3 + [168]) + [8])) = $6
	$9 = *($1 + [32])
	*((($3 + [24]) + [8])) = $6
	$6 = *($3 + [304])
	*($3 + [168]) = $6
	*($3 + [24]) = $6
	CALL $48(($3 + [184]), $5, ($3 + [24]))
	*((($3 + [152]) + [8])) = [0]
	*($3 + [152]) = (int_64)0
	$1 = CALL $279([8778])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$11 }
	*($3 + [152]) = ($1 << [1])
	$4 = (($3 + [152]) | [1])
	if ( $1 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$11 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($11)
	*($3 + [152]) = ($11 | [1])
	*($3 + [160]) = $4
	*($3 + [156]) = $1
	
.LABEL $label$10
	CALL memcpy($4, [8778], $1)
	
.LABEL $label$9
	*(($4 + $1)) = [0]
	CALL $71($0, $9, ($3 + [320]), ($3 + [184]), ($3 + [152]))
	if ( ((*($3 + [152]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($3 + [160]))
	
.LABEL $label$12
	if ( ((*($3 + [184]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($3 + [192]))
	
.LABEL $label$13
	$6 = *((($3 + [304]) + [8]))
	*((($3 + [120]) + [8])) = $6
	$9 = *($2 + [32])
	*((($3 + [8]) + [8])) = $6
	$6 = *($3 + [304])
	*($3 + [120]) = $6
	*($3 + [8]) = $6
	CALL $48(($3 + [136]), ($3 + [320]), ($3 + [8]))
	*((($3 + [104]) + [8])) = [0]
	*($3 + [104]) = (int_64)0
	$1 = CALL $279([8778])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$16 }
	*($3 + [104]) = ($1 << [1])
	$2 = (($3 + [104]) | [1])
	if ( $1 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$4 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($4)
	*($3 + [104]) = ($4 | [1])
	*($3 + [112]) = $2
	*($3 + [108]) = $1
	
.LABEL $label$15
	CALL memcpy($2, [8778], $1)
	
.LABEL $label$14
	*(($2 + $1)) = [0]
	CALL $71($0, $9, $5, ($3 + [136]), ($3 + [104]))
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($3 + [112]))
	
.LABEL $label$17
	if ( ((*($3 + [136]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($3 + [144]))
	
.LABEL $label$18
	CALL $39($7, $5)
	CALL $39($8, ($3 + [320]))
	CALL $54(($3 + [256]))
	$global$0 = ($3 + [336])
	return (unreachable)
	
.LABEL $label$8
	CALL $260(($3 + [152]))
	
.LABEL $label$7
	CALL $260(($3 + [104]))
	(unreachable)
}

int_32 .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10736])
	$3 = CALL db_next_i64(*(*($0 + [4]) + [52]), ($1 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $148(*($0), $3)
	
.LABEL $label$1
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $61 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = ($0 + [44])
	$0 = *($5)
	if ( ((int_32)*(($0 + [48])) == (int_32)$0) ){ goto $label$1 }
	*($0 + [8]) = $2
	*($0) = $1
	*($4 + [8]) = *($3)
	CALL $68(($4 + [16]), ($4 + [8]))
	$3 = *($0 + [28])
	if ( ($3 == 0) ){ goto $label$3 }
	*(($0 + [32])) = $3
	CALL _ZdlPv($3)
	*(($3 = ($0 + [36]))) = [0]
	*($0 + [28 align=4]) = (int_64)0
	goto $label$2 
	
.LABEL $label$3
	$3 = ($0 + [36])
	
.LABEL $label$2
	*(($0 + [28])) = *($4 + [16])
	*($3) = *($4 + [24])
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $269($5)
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($1), *($1 + [8]), (int_64)-6497942614757605376, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $148($1, $4)
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [112])
	$global$0 = $2
	$4 = *(($1 + [8]))
	*(($3 = (($2 + [24]) + [8]))) = $4
	*($2 + [24]) = *($1)
	if ( ((int_64)$4 != (int_64)1397703940) ){ goto $label$2 }
	*(($2 + [104])) = [0]
	*($2 + [80]) = (int_64)6138663577826885632
	*($2 + [72]) = (int_64)6138663577826885632
	*($2 + [88]) = (int_64)-1
	*($2 + [96]) = (int_64)0
	$5 = CALL $70(($2 + [40]), (int_64)250, (int_64)1296126464)
	*((($2 + [8]) + [8])) = *(($5 + [8]))
	*($2 + [8]) = *($5)
	CALL $69(($2 + [56]), ($2 + [72]), ($2 + [8]))
	*($3) = *((($2 + [56]) + [8]))
	*($2 + [24]) = *($2 + [56])
	CALL $54(($2 + [96]))
	$4 = *($3)
	$6 = *($2 + [24])
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)250
	*($2 + [24]) = (int_64)250
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1 + [8])), [9789])
	if ( ((int_64)$6 <= (int_64)*($1)) ){ goto $label$4 }
	$4 = *($1)
	*($1) = (int_64)0
	*((($2 + [24]) + [8])) = *(($1 + [8]))
	*($2 + [24]) = $4
	goto $label$3 
	
.LABEL $label$4
	CALL $39($1, ($2 + [24]))
	
.LABEL $label$3
	*($0 + [16]) = *($2 + [24])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	*(($0 + [24])) = *((($2 + [24]) + [8]))
	$global$0 = ($2 + [112])
}

int_32 .FUNC $62 (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	CALL $162($3, ($3 + [8]), $2)
	$4 = *($3 + [4])
	CALL $163(($3 + [32]))
	$global$0 = ($3 + [48])
	return ((int_32)$4 != (int_32)[0])
}

int_32 .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = [-1]
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	$3 = $1
	$5 = *(($2 + [4]))
	if ( ($5 == 0) ){ goto $label$1 }
	$0 = ($6 + $1)
	$6 = *($0)
	$4 = ($6 + $4)
	$3 = ($4 - $0)
	if ( ((int_32)$3 < (int_32)$5) ){ goto $label$3 }
	$7 = *($2)
	$2 = *($7)
	
.LOOP $label$4:
	$3 = (($3 - $5) + [1])
	if ( ($3 == 0) ){ goto $label$3 }
	$3 = CALL $277($0, $2, $3)
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (CALL $278($3, $7, $5) == 0) ){ goto $label$2 }
	$0 = ($3 + [1])
	$3 = ($4 - $0)
	if ( ((int_32)$3 >= (int_32)$5) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = $4
	
.LABEL $label$2
	$3 = ( [-1] ? ($3 - $6) : ((int_32)$3 == (int_32)$4) )
	
.LABEL $label$1
	return ((int_32)$3 == (int_32)$1)
}

int_32 .FUNC $227 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $181($0, ($1 + [20]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10122])
	CALL memcpy(*($0 + [4]), $1, [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [10122])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [10122])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $181($0, ($1 + [12]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [10122])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [1])
	return *($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $228 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40])
	CALL $181($0, ($2 + [8]))
	$1 = *($1 + [4])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	
.LOOP $label$2:
	CALL $177($0, $3)
	$3 = ($3 + [40])
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $229 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [8]) = int_32((*($1 + [4]) - *($1)) >> [4])
	CALL $181($0, ($2 + [8]))
	$1 = *($1 + [4])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	
.LOOP $label$2:
	*($2 + [16]) = $0
	*($2 + [24]) = $3
	CALL $232(($2 + [24]), ($2 + [16]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $89 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [64])
	$global$0 = $4
	$2 = CALL $79(($4 + [8]), $2)
	$5 = *($2)
	*($2) = [0]
	$6 = *($2 + [8])
	*($2 + [4 align=4]) = (int_64)0
	*(($4 + [48])) = $6
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $5
	CALL $91(($4 + [52]), $3)
	CALL $33(($4 + [24]))
	$3 = *($4 + [52])
	if ( ($3 == 0) ){ goto $label$1 }
	*(($4 + [56])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$3 = *($4 + [40])
	if ( ($3 == 0) ){ goto $label$2 }
	*(($4 + [44])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$3 }
	*(($2 + [4])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	if ( ((int_64)*($3) < (int_64)1) ){ goto $label$1 }
	$5 = CALL _Znwj([32])
	*($4 + [8]) = $5
	*($4) = (int_64)98784247841
	CALL memcpy($5, [8937], [23])
	*($5 + [23]) = [0]
	CALL $49($0, $2, $3, $4, [0])
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$1
	CALL $35($0, ((int_64)((int_64)((int_64)*($1 + [8]) ^ (int_64)*($1)) ^ (int_64)*($1 + [16])) ^ (int_64)*($1 + [24])))
	$global$0 = ($4 + [16])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = (int_64)0
	CALL $60(($3 + [24]), $0, (int_64)0)
	if ( (*($3 + [28]) == 0) ){ goto $label$1 }
	*($3 + [28]) = [0]
	*($3 + [24]) = $0
	$4 = ((int_64)*(*(CALL $192(($3 + [24])) + [4])) + (int_64)1)
	*($3 + [16]) = $4
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [10460])
	
.LABEL $label$1
	*($3 + [24]) = $1
	*($3 + [28]) = ($3 + [16])
	CALL $193(($3 + [8]), $0, $2, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	$7 = ($global$0 - [128])
	$global$0 = $7
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert((($5 == 0) | ((int_32)$5 > (int_32)[59])), [10448])
	if ( ($5 == 0) ){ goto $label$2 }
	$8 = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + $5)
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([1], [10448])
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	$8 = [1]
	
.LABEL $label$1
	*($7 + [72]) = $3
	$9 = *(( ($7 + [72]) ? $0 : CALL has_auth($3) ))
	*(($7 + [96])) = *($4 + [8])
	*(($7 + [119])) = *(($7 + [127]))
	*($7 + [72]) = (int_64)0
	*($7 + [80]) = $2
	*($7 + [104]) = $3
	*($7 + [112]) = $8
	*($7 + [116]) = $6
	*($7 + [88]) = *($4)
	*($7 + [117 align=1]) = *($7 + [125 align=1])
	CALL memcpy(($7 + [8]), ($7 + [72]), [48])
	CALL $87($1, ($7 + [8]), $9)
	$4 = CALL _Znwj([32])
	*($7 + [64]) = $4
	*($7 + [56]) = (int_64)73014444065
	CALL memcpy($4, [8788], [17])
	*($4 + [17]) = [0]
	CALL $2($0, $2, $5, $3, ($7 + [56]))
	if ( ((*($7 + [56]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($7 + [64])))
	
.LABEL $label$4
	CALL $56($0, $2)
	$global$0 = ($7 + [128])
}

void .FUNC $85 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	CALL require_auth(*($0))
	$6 = *($3 + [8])
	if ( ((int_64)$6 == (int_64)1296126464) ){ goto $label$2 }
	if ( ((int_64)$6 != (int_64)1397703940) ){ goto $label$1 }
	CALL $86($0, ($0 + [32]), $1, $2, $3, $4, $5)
	return 
	
.LABEL $label$2
	CALL $86($0, ($0 + [72]), $1, $2, $3, $4, $5)
	
.LABEL $label$1
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	CALL $171($0, [37])
	$3 = *($0 + [4])
	$0 = *($0)
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	*($2 + [16]) = $2
	*($2 + [24]) = $1
	CALL $242(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [32])
}

void .FUNC $83 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [64])
	$global$0 = $4
	$2 = CALL $79(($4 + [8]), $2)
	$5 = *($2)
	*($2) = [0]
	$6 = *($2 + [8])
	*($2 + [4 align=4]) = (int_64)0
	*(($4 + [48])) = $6
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $5
	CALL $84(($4 + [52]), $3)
	CALL $33(($4 + [24]))
	$3 = *($4 + [52])
	if ( ($3 == 0) ){ goto $label$1 }
	*(($4 + [56])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$3 = *($4 + [40])
	if ( ($3 == 0) ){ goto $label$2 }
	*(($4 + [44])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$3 }
	*(($2 + [4])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC $82 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = CALL transaction_size()
	$1 = $global$0
	$3 = ($1 - (($2 + [15]) & [-16]))
	$global$0 = $3
	CALL eosio_assert(((int_32)$2 == (int_32)CALL $fimport$9($3, $2)), [10413])
	CALL sha256($3, $2, $0)
	$global$0 = $1
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(CALL $36($0), [9379])
	CALL require_auth($2)
	*($4 + [144]) = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	CALL eosio_assert(CALL $29(($4 + [144])), [9410])
	$5 = *($3 + [8])
	CALL eosio_assert((((int_64)$5 == (int_64)1397703940) | ((int_64)$5 == (int_64)1296126464)), [8857])
	$6 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	*($4 + [144]) = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$6 = CALL $29(($4 + [144]))
	
.LABEL $label$1
	CALL eosio_assert($6, [9430])
	if ( ((int_64)*(($3 + [8])) != (int_64)1296126464) ){ goto $label$3 }
	CALL $70(($4 + [112]), (int_64)250, (int_64)1296126464)
	goto $label$2 
	
.LABEL $label$3
	*(($4 + [176])) = [0]
	*($4 + [152]) = (int_64)6138663577826885632
	*($4 + [144]) = (int_64)6138663577826885632
	*($4 + [160]) = (int_64)-1
	*($4 + [168]) = (int_64)0
	$6 = CALL $70(($4 + [128]), (int_64)250, (int_64)1296126464)
	*((($4 + [40]) + [8])) = *(($6 + [8]))
	*($4 + [40]) = *($6)
	CALL $69(($4 + [112]), ($4 + [144]), ($4 + [40]))
	CALL $54(($4 + [168]))
	
.LABEL $label$2
	$6 = ($3 + [8])
	CALL eosio_assert(((int_64)*($6) == (int_64)*($4 + [120])), [9789])
	CALL eosio_assert(((int_64)*($3) >= (int_64)*($4 + [112])), [8890])
	CALL $82(($4 + [144]))
	$7 = *($4 + [168])
	$8 = *($4 + [160])
	$9 = *($4 + [152])
	$10 = *($4 + [144])
	$5 = *($0)
	*($4 + [152]) = (int_64)3617214756542218240
	*($4 + [144]) = $5
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = [0]
	CALL $10(($4 + [96]), [1])
	*(($0 = *($4 + [100]))) = *($4 + [144])
	*(($0 + [8])) = *($4 + [152])
	*(($4 + [80])) = *($6)
	*($4 + [100]) = ($0 + [16])
	*($4 + [56]) = ((int_64)$7 ^ (int_64)((int_64)$8 ^ (int_64)((int_64)$9 ^ (int_64)$10)))
	*($4 + [64]) = $2
	*($4 + [72]) = *($3)
	*($4 + [88]) = *($1)
	*($4 + [92]) = *($1 + [4])
	$4 = CALL memcpy($4, ($4 + [56]), [40])
	CALL $83($5, (int_64)8426599551293936768, ($4 + [96]), $4)
	$3 = *($4 + [96])
	if ( ($3 == 0) ){ goto $label$4 }
	*($4 + [100]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [192])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	CALL $171($0, [24])
	$3 = *($0 + [4])
	$0 = *($0)
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	*($2 + [16]) = $2
	*($2 + [24]) = $1
	CALL $241(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10122])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $175($0, ($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [10122])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [44])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [10122])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9573])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9573])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $151($0, ($1 + [16]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9573])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [9573])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9573])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [44]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9550])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$2 = CALL $282($4)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = $0
	CALL $149(($3 + [32]), $5)
	*($5 + [56]) = [-1]
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $150(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	
.LABEL $label$7
	if ( ($4 <= [513]) ){ goto $label$9 }
	CALL $285($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$2 }
	*($0 + [4]) = $2
	CALL _ZdlPv($2)
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$2 = ($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	$2 = ($0 + [8])
	
.LABEL $label$1
	*($0) = *($1)
	*($2) = *($1 + [8])
	*($1 + [8]) = [0]
	*($1) = (int_64)0
}

int_32 .FUNC $144 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	*($3) = ($1 + [-40])
	$4 = *(($1 + [-12]))
	if ( ($4 == 0) ){ goto $label$3 }
	*(($1 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$4 = *(($1 + [-24]))
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [-20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdlPv($1)
	
.LABEL $label$5
	return $0
}

void .FUNC $147 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$1), [9578])
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-6497942614757605376, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $148($1, $5)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$1), [9578])
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	
.LABEL $label$1
	*($0) = $1
}

void .FUNC $146 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = *($2)
	$2 = *($1)
	$2 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6497942614757605376, ($3 + [16]), ($3 + [24]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $147(($3 + [8]), *($1), *($3 + [24]))
	$4 = *($3 + [12])
	*($0 + [4]) = $4
	*(($4 + [56])) = $2
	goto $label$1 
	
.LABEL $label$2
	*($0 + [4]) = [0]
	
.LABEL $label$1
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	if ( ((uint_32)((int_32)($3 - $4) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$3 }
	$5 = *($0)
	$4 = ((int_32)($4 - $5) / (int_32)[40])
	$6 = ($4 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$1 }
	$7 = ($0 + [8])
	$8 = [107374182]
	$3 = ((int_32)($3 - $5) / (int_32)[40])
	if ( ((uint_32)$3 > (uint_32)[53687090]) ){ goto $label$4 }
	$3 = ($3 << [1])
	$8 = ( $6 ? $3 : ($3 <= $6) )
	
.LABEL $label$4
	$4 = CALL $142(($2 + [8]), $8, $4, $7)
	$5 = *($4 + [8])
	$3 = $5
	$8 = $1
	
.LOOP $label$5:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	$3 = ($3 + [40])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$5 }
	*(($4 + [8])) = ($5 + ((int_32)$1 * (int_32)[40]))
	CALL $143($0, $4)
	CALL $144($4)
	goto $label$2 
	
.LABEL $label$3
	$3 = $4
	$8 = $1
	
.LOOP $label$6:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	$3 = ($3 + [40])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$6 }
	*(($0 + [4])) = ($4 + ((int_32)$1 * (int_32)[40]))
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $268($0)
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $261(($2 + [8]), ($1 + [8]))
	*($2 + [40]) = $3
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$4 = CALL $261(($2 + [24]), $1)
	CALL void $5((int_32 ($2 + [40])), (int_32 $4), (int_32 $0))
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$2
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	*(($5 + [-32])) = *(($2 + [-32]))
	$6 = ($2 + [-40])
	*(($5 + [-40])) = *($6)
	*(($7 = ($5 + [-24]))) = (int_64)0
	*(($8 = ($5 + [-16]))) = [0]
	$9 = ($2 + [-24])
	*($7) = *($9)
	$7 = ($2 + [-16])
	*($8) = *($7)
	*($7) = [0]
	*(($7 = ($5 + [-12]))) = (int_64)0
	*(($5 = ($5 + [-4]))) = [0]
	$8 = ($2 + [-12])
	*($7) = *($8)
	*($9) = (int_64)0
	$2 = ($2 + [-4])
	*($5) = *($2)
	*($2) = [0]
	*($8) = (int_64)0
	$5 = (*($4) + [-40])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[107374183]) ){ goto $label$1 }
	$4 = CALL _Znwj(((int_32)$1 * (int_32)[40]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[40]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[40]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	if ( ((int_64)*(*($5) + [8]) == (int_64)$2) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$1), [9578])
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-5069606918720847872, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $155($1, $5)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$1), [9578])
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	
.LABEL $label$1
	*($0) = $1
}

int_32 .FUNC $73 (int_32 $0, int_64 $1)
{
	CALL eosio_assert(((int_64)$1 != (int_64)0), [9960])
	CALL eosio_assert((((int_64)$1 != (int_64)-1) | ((int_64)*($0) != (int_64)-9223372036854775808)), [9975])
	*($0) = ((int_64)*($0) / (int_64)$1)
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $2
	*($0) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9720])
	*($3 + [8]) = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	CALL eosio_assert(CALL $29(($3 + [8])), [9769])
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $71 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$5 = ($global$0 - [128])
	$global$0 = $5
	*(($6 = (($5 + [64]) + [8]))) = *(($2 + [8]))
	*($5 + [64]) = *($2)
	*(($2 = (($5 + [112]) + [8]))) = *($6)
	*($5 + [112]) = *($5 + [64])
	*(($6 = (($5 + [40]) + [8]))) = *($2)
	$7 = ((int_64)((int_64)*($5 + [112]) + (int_64)999) / (int_64)1000)
	$7 = ( $7 ? (int_64)1 : ((int_64)$7 > (int_64)1) )
	*($5 + [40]) = $7
	CALL eosio_assert([1], [9789])
	if ( ((int_64)$7 <= (int_64)*($5 + [112])) ){ goto $label$2 }
	*($6) = *($2)
	*($5 + [40]) = *($5 + [112])
	*($5 + [112]) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	CALL $39(($5 + [112]), ($5 + [40]))
	
.LABEL $label$1
	*((($5 + [80]) + [8])) = *((($5 + [112]) + [8]))
	*(($2 = ($5 + [104]))) = *((($5 + [40]) + [8]))
	*($5 + [80]) = *($5 + [112])
	*($5 + [96]) = *($5 + [40])
	$7 = *($5 + [96])
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$3 }
	$8 = *($0)
	$9 = CALL $22($0)
	$10 = *($2)
	if ( ((int_64)$10 != (int_64)1397703940) ){ goto $label$5 }
	CALL eosio_assert([1], [9492])
	$11 = (int_64)6138663591592764928
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert(((int_64)$10 == (int_64)1296126464), [9511])
	$11 = (int_64)-5069476200169789136
	
.LABEL $label$4
	*((($5 + [24]) + [8])) = *(($4 + [8]))
	*($5 + [48]) = $10
	*($5 + [40]) = $7
	*($5 + [56]) = $11
	*($5 + [24]) = *($4)
	$2 = [0]
	
.LOOP $label$6:
	*(($4 + $2)) = [0]
	$2 = ($2 + [4])
	if ( ((int_32)$2 != (int_32)[12]) ){ goto $label$6 }
	CALL $28($0, $8, $9, ($5 + [40]), ($5 + [24]), [0])
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($5 + [32]))
	
.LABEL $label$3
	*((($5 + [8]) + [8])) = *(($3 + [8]))
	*($5 + [8]) = *($3)
	$2 = [0]
	
.LOOP $label$7:
	*(($3 + $2)) = [0]
	$2 = ($2 + [4])
	if ( ((int_32)$2 != (int_32)[12]) ){ goto $label$7 }
	CALL $49($0, $1, ($5 + [80]), ($5 + [8]), [0])
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($5 + [16]))
	
.LABEL $label$8
	$global$0 = ($5 + [128])
}

void .FUNC $76 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [64])
	$global$0 = $4
	$2 = CALL $79(($4 + [8]), $2)
	$5 = *($2)
	*($2) = [0]
	$6 = *($2 + [8])
	*($2 + [4 align=4]) = (int_64)0
	*(($4 + [48])) = $6
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $5
	CALL $80(($4 + [52]), $3)
	CALL $33(($4 + [24]))
	$3 = *($4 + [52])
	if ( ($3 == 0) ){ goto $label$1 }
	*(($4 + [56])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$3 = *($4 + [40])
	if ( ($3 == 0) ){ goto $label$2 }
	*(($4 + [44])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$3 }
	*(($2 + [4])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [10216])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$20()), [10262])
	*($4 + [72]) = *($1 + [8])
	$5 = *($1)
	*(($1 = CALL memcpy($1, *($3), [45]))) = $5
	CALL eosio_assert([1], [10313])
	*($4 + [64]) = ($4 + [45])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	CALL $182(($4 + [56]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [45])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [88]) = *(($1 + [8]))
	if ( (CALL $278(($4 + [72]), ($4 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6497942614757605376, ($4 + [80]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [88]))
	
.LABEL $label$2
	$global$0 = ($4 + [96])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$4 = ((int_64)$6 + (int_64)1)
	$8 = (int_64)1
	
.LOOP $label$3:
	$8 = ((int_64)$8 * (int_64)10)
	$4 = ((int_64)$4 + (int_64)-1)
	if ( ((int_64)$4 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)1
	
.LABEL $label$1
	$9 = ($5 & [255])
	$10 = ($2 - (($9 + [16]) & [496]))
	$global$0 = $10
	*(($2 = ($10 + $9))) = [0]
	$11 = *($1)
	if ( $7 ){ goto $label$4 }
	$6 = ((int_64)$6 + (int_64)1)
	$4 = ((int_64)$11 % (int_64)$8)
	$2 = ($2 + [-1])
	
.LOOP $label$5:
	$12 = ((int_64)$4 / (int_64)10)
	*($2) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$12 * (int_64)10))) + [48])
	$2 = ($2 + [-1])
	$4 = $12
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	CALL $30($0, (CASTING uint_32)(uint_64 ((int_64)$11 / (int_64)$8)))
	if ( ($9 == 0) ){ goto $label$6 }
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$9 }
	*($3) = ($5 << [1])
	$2 = ($3 | [1])
	if ( $9 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = (($9 + [16]) & [496])
	$2 = CALL _Znwj($5)
	*($3) = ($5 | [1])
	*($3 + [8]) = $2
	*($3 + [4]) = $9
	
.LABEL $label$8
	CALL memcpy($2, $10, $9)
	
.LABEL $label$7
	*(($2 + $9)) = [0]
	$9 = CALL $267($3, [0], [10918])
	*((($3 + [16]) + [8])) = *(($9 + [8]))
	*($3 + [16]) = *($9)
	$2 = [0]
	
.LOOP $label$10:
	*(($9 + $2)) = [0]
	$2 = ($2 + [4])
	if ( ((int_32)$2 != (int_32)[12]) ){ goto $label$10 }
	$2 = *($3 + [16])
	$9 = ($2 & [1])
	CALL $265($0, ( *($3 + [24]) ? (($3 + [16]) | [1]) : $9 ), ( *($3 + [20]) ? uint_32($2 >> [1]) : $9 ))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$11
	if ( ((*($3) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$6
	$4 = *(($1 + [8]))
	$2 = [0]
	*(($3 + [22])) = [0]
	*(($3 + [20])) = [0]
	*($3 + [16]) = [0]
	
.LOOP $label$16:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	$9 = (CASTING uint_32)(uint_64 $4)
	if ( (($9) & [255]) == 0) ){ goto $label$15 }
	*((($3 + [16]) + $2)) = $9
	$2 = ($2 + [1])
	if ( ($2 <= [7]) ){ goto $label$16 }
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$2 > (uint_32)[10]) ){ goto $label$14 }
	*($3) = ($2 << [1])
	$9 = ($3 | [1])
	goto $label$13 
	
.LABEL $label$15
	$1 = [0]
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = ($2 << [1])
	$9 = ($3 | [1])
	if ( $2 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$1 = (($2 + [16]) & [-16])
	$9 = CALL _Znwj($1)
	*($3) = ($1 | [1])
	*($3 + [8]) = $9
	*($3 + [4]) = $2
	
.LABEL $label$13
	CALL memcpy($9, ($3 + [16]), $2)
	$1 = $2
	
.LABEL $label$12
	*(($9 + $1)) = [0]
	$9 = CALL $267($3, [0], [10372])
	*((($3 + [16]) + [8])) = *(($9 + [8]))
	*($3 + [16]) = *($9)
	$2 = [0]
	
.LOOP $label$17:
	*(($9 + $2)) = [0]
	$2 = ($2 + [4])
	if ( ((int_32)$2 != (int_32)[12]) ){ goto $label$17 }
	$2 = *($3 + [16])
	$9 = ($2 & [1])
	CALL $265($0, ( *($3 + [24]) ? (($3 + [16]) | [1]) : $9 ), ( *($3 + [20]) ? uint_32($2 >> [1]) : $9 ))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$18
	if ( ((*($3) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$19
	$global$0 = ($3 + [32])
}

void .FUNC $75 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [64])
	$global$0 = $4
	$2 = CALL $79(($4 + [8]), $2)
	$5 = *($2)
	*($2) = [0]
	$6 = *($2 + [8])
	*($2 + [4 align=4]) = (int_64)0
	*(($4 + [48])) = $6
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $5
	CALL $169(($4 + [52]), $3)
	CALL $33(($4 + [24]))
	$3 = *($4 + [52])
	if ( ($3 == 0) ){ goto $label$1 }
	*(($4 + [56])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$3 = *($4 + [40])
	if ( ($3 == 0) ){ goto $label$2 }
	*(($4 + [44])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$3 }
	*(($2 + [4])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC $78 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [64])
	$global$0 = $4
	$2 = CALL $79(($4 + [8]), $2)
	$5 = *($2)
	*($2) = [0]
	$6 = *($2 + [8])
	*($2 + [4 align=4]) = (int_64)0
	*(($4 + [48])) = $6
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $5
	CALL $92(($4 + [52]), $3)
	CALL $33(($4 + [24]))
	$3 = *($4 + [52])
	if ( ($3 == 0) ){ goto $label$1 }
	*(($4 + [56])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$3 = *($4 + [40])
	if ( ($3 == 0) ){ goto $label$2 }
	*(($4 + [44])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$3 }
	*(($2 + [4])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = (*($1 + [4]) - *($1))
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $10($0, int_32($2 >> [4]))
	$3 = *($1)
	$1 = (*(($1 + [4])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$1 }
	$2 = ($0 + [4])
	CALL memcpy(*($2), $3, $1)
	*($2) = (*($2) + $1)
	
.LABEL $label$1
	return $0
}

void .FUNC $241 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	$0 = *($0)
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $285($0)
	
.LABEL $label$1
}

void .FUNC $223 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = int_32((*($0 + [4]) - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$1 }
	CALL $224($0, ($1 - $3))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$3 <= (uint_32)$1) ){ goto $label$2 }
	*(($0 + [4])) = ($2 + ($1 << [4]))
	
.LABEL $label$2
}

void .FUNC $268 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $251 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	float_64 $9
	$4 = ($global$0 - [112])
	$global$0 = $4
	$5 = *(($1 + [48]))
	$6 = *(($1 + [24]))
	$7 = *($2 + [8])
	if ( ((int_64)$7 != (int_64)*($1 + [8])) ){ goto $label$10 }
	$7 = *($3)
	if ( ((int_64)$7 != (int_64)$6) ){ goto $label$9 }
	$8 = ($2 + [8])
	$7 = *($8)
	*((($4 + [80]) + [8])) = $7
	$6 = *($2)
	*((($4 + [16]) + [8])) = $7
	*($4 + [80]) = $6
	*($4 + [16]) = $6
	CALL $250(($4 + [96]), $1, ($1 + [16]), ($4 + [16]))
	*($8) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$7 != (int_64)$6) ){ goto $label$8 }
	$7 = *($1)
	$8 = ($1 + [16])
	$6 = *($2)
	$9 = CALL $274(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$6))) + (float_64)(float_64)1), *(($1 + [32])))
	*($8) = ((int_64)$6 + (int_64)*($8))
	$9 = !(float_64)((float_64)(float_64))((float_64)1 - $9) * (float_64)(CASTING float_64)(int_64 $7)
	if ( ((float_64)(float_64)|$9)| < (float_64)(float_64)9223372036854775808) ){ goto $label$7 }
	$6 = (int_64)-9223372036854775808
	goto $label$6 
	
.LABEL $label$9
	if ( ((int_64)$7 != (int_64)$5) ){ goto $label$5 }
	$8 = ($2 + [8])
	$7 = *($8)
	*((($4 + [64]) + [8])) = $7
	$6 = *($2)
	*((($4 + [32]) + [8])) = $7
	*($4 + [64]) = $6
	*($4 + [32]) = $6
	CALL $250(($4 + [96]), $1, ($1 + [40]), ($4 + [32]))
	*($8) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$7 != (int_64)$5) ){ goto $label$4 }
	$7 = *($1)
	$8 = ($1 + [40])
	$6 = *($2)
	$9 = CALL $274(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$6))) + (float_64)(float_64)1), *(($1 + [56])))
	*($8) = ((int_64)$6 + (int_64)*($8))
	$9 = !(float_64)((float_64)(float_64))((float_64)1 - $9) * (float_64)(CASTING float_64)(int_64 $7)
	if ( ((float_64)(float_64)|$9)| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$6 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$7
	$6 = (Rounds 0)($9)
	
.LABEL $label$6
	*($1) = ((int_64)*($1) + (int_64)$6)
	CALL $70(($4 + [96]), $6, *(($1 + [8])))
	*(($2 + [8])) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	goto $label$1 
	
.LABEL $label$5
	CALL eosio_assert([0], [8415])
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [8289])
	goto $label$1 
	
.LABEL $label$3
	$6 = (Rounds 0)($9)
	
.LABEL $label$2
	*($1) = ((int_64)*($1) + (int_64)$6)
	CALL $70(($4 + [96]), $6, *(($1 + [8])))
	*(($2 + [8])) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	
.LABEL $label$1
	$8 = ($2 + [8])
	if ( ((int_64)*($3) != (int_64)*($8)) ){ goto $label$12 }
	*($0) = *($2)
	*(($0 + [8])) = *($8)
	goto $label$11 
	
.LABEL $label$12
	$7 = *($8)
	*((($4 + [48]) + [8])) = $7
	$6 = *($2)
	*(($4 + [8])) = $7
	*($4 + [48]) = $6
	*($4) = $6
	CALL $251($0, $1, $4, $3)
	
.LABEL $label$11
	$global$0 = ($4 + [112])
}

void .FUNC $250 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	float_64 $6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($1 + [8])), [8227])
	$4 = *($2)
	$5 = *($3)
	$6 = CALL $274(((float_64)((float_64)(CASTING float_64)(int_64 $5) / (float_64)(CASTING float_64)(int_64 (int_64))(*($1) - $5))) + (float_64)(float_64)1), ((float_64)(float_64)1 / (float_64)*($2 + [16])))
	*($1) = (int_64))(*($1) - $5)
	$6 = ((float_64)((float_64)$6 + (float_64)(float_64)-1) * (float_64)(CASTING float_64)(int_64 $4))
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$5 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$5 = (Rounds 0)($6)
	
.LABEL $label$1
	*($2) = (int_64))(*($2) - $5)
	CALL $70($0, $5, *($2 + [8]))
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $282($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11284])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $282($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $285($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $280(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [11284])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $280(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $98 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [240])
	$global$0 = $3
	*(($4 = $3) + [184]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $282($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [144]) + [24])) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [176]) = [0]
	*($4 + [180]) = [0]
	*($4 + [132]) = $2
	*($4 + [128]) = $2
	*($4 + [136]) = ($2 + $5)
	*($4 + [224]) = ($4 + [128])
	*($4 + [16]) = ($4 + [144])
	CALL $107(($4 + [16]), ($4 + [224]))
	*(($3 = ($4 + [8]))) = *($4 + [136])
	*($4) = *($4 + [128])
	$3 = *($3)
	*((($4 + [192]) + [8])) = $3
	*(($6 = (($4 + [208]) + [8]))) = $3
	$7 = *($4)
	*($4 + [208]) = $7
	*($4 + [192]) = $7
	$3 = *($6)
	*((($4 + [224]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [208])
	*($4 + [32]) = $1
	*($4 + [224]) = $1
	*(($4 + [56])) = (int_64)6138663591592764928
	*(($4 + [64])) = (int_64)-1
	*(($3 = ($4 + [72]))) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = (int_64)-5069476200169789136
	*(($4 + [104])) = (int_64)-1
	*(($6 = ($4 + [112]))) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [124])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [228]) = ($4 + [184])
	*($4 + [224]) = ($4 + [16])
	CALL $108(($4 + [224]), ($4 + [144]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $285($2)
	
.LABEL $label$4
	CALL $104($6)
	CALL $104($3)
	$global$0 = ($4 + [240])
	return [1]
}

int_32 .FUNC $99 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $282($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9573])
	CALL memcpy(($4 + [120]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = (int_64)6138663591592764928
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = (int_64)-5069476200169789136
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [120])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $285($2)
	
.LABEL $label$5
	CALL $104(($4 + [104]))
	CALL $104(($4 + [64]))
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $239 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	return $0
}

void .FUNC $238 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	$6 = ($2 + [-24])
	$7 = *($6)
	*($6) = [0]
	*(($5 + [-24])) = $7
	*(($5 + [-8])) = *(($2 + [-8]))
	*(($5 + [-16])) = *(($2 + [-16]))
	$5 = (*($4) + [-24])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

void .FUNC $94 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$5 = ($global$0 - [304])
	$global$0 = $5
	if ( ((int_64)$1 <= (int_64)6138663590285202591) ){ goto $label$6 }
	if ( ((int_64)$1 > (int_64)6138663591134630911) ){ goto $label$5 }
	if ( ((int_64)$1 == (int_64)6138663590285202592) ){ goto $label$2 }
	if ( ((int_64)$1 == (int_64)6138663590826845888) ){ goto $label$2 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_64)$1 == (int_64)6138663581940940800) ){ goto $label$2 }
	if ( ((int_64)$1 == (int_64)6138663588137709568) ){ goto $label$2 }
	if ( ((int_64)$1 == (int_64)6138663590285017088) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_64)$1 == (int_64)6138663591134630912) ){ goto $label$2 }
	if ( ((int_64)$1 == (int_64)6138663592678359040) ){ goto $label$2 }
	
.LABEL $label$4
	if ( ((int_64)CALL $22($0) == (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$7 }
	$6 = [0]
	$2 = *($3)
	if ( ((uint_64)((int_64)$2 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$8 }
	*($5 + [144]) = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$6 = CALL $29(($5 + [144]))
	
.LABEL $label$8
	CALL eosio_assert($6, [9219])
	CALL eosio_assert(((int_64)$2 > (int_64)0), [9248])
	*((($5 + [200]) + [8])) = *(($3 + [8]))
	*((($5 + [184]) + [8])) = *(($4 + [8]))
	*($5 + [200]) = *($3)
	*($5 + [184]) = *($4)
	$3 = [0]
	
.LOOP $label$9:
	*(($4 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$9 }
	*((($5 + [24]) + [8])) = *((($5 + [200]) + [8]))
	*($5 + [24]) = *($5 + [200])
	CALL $105($0, $1, ($5 + [24]), ($5 + [184]))
	if ( ((*($5 + [184]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($5 + [192]))
	goto $label$2 
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)6138663590285017088) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$2 }
	*(($5 + [176])) = [0]
	*($5 + [160]) = (int_64)-1
	*($5 + [168]) = (int_64)0
	$1 = *($0)
	*($5 + [144]) = $1
	*($5 + [152]) = $1
	CALL $106(($5 + [104]), ($5 + [144]))
	if ( (*($5 + [136]) == 0) ){ goto $label$10 }
	$2 = *(($3 + [8]))
	*((($5 + [72]) + [8])) = $2
	$1 = *($3)
	*((($5 + [8]) + [8])) = $2
	*($5 + [8]) = $1
	*($5 + [72]) = $1
	CALL $44(($5 + [256]), ($5 + [8]))
	*((($5 + [88]) + [8])) = *((($5 + [256]) + [8]))
	*($5 + [88]) = *($5 + [256])
	$1 = *($5 + [112])
	$4 = CALL $261(($5 + [56]), ($5 + [120]))
	*((($5 + [40]) + [8])) = [0]
	*($5 + [40]) = (int_64)0
	$3 = CALL $279([9292])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$13 }
	*($5 + [40]) = ($3 << [1])
	$6 = (($5 + [40]) | [1])
	if ( $3 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$7 = (($3 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($5 + [40]) = ($7 | [1])
	*($5 + [48]) = $6
	*($5 + [44]) = $3
	
.LABEL $label$12
	CALL memcpy($6, [9292], $3)
	
.LABEL $label$11
	*(($6 + $3)) = [0]
	*(($6 = (($5 + [240]) + [8]))) = *((($5 + [88]) + [8]))
	*($5 + [240]) = *($5 + [88])
	*(($3 = (($5 + [288]) + [8]))) = *($6)
	*($5 + [288]) = *($5 + [240])
	*(($6 = (($5 + [216]) + [8]))) = *($3)
	*($5 + [216]) = (int_64)0
	CALL eosio_assert([1], [9789])
	if ( ((int_64)*($5 + [288]) <= (int_64)-1) ){ goto $label$15 }
	CALL $39(($5 + [288]), ($5 + [216]))
	goto $label$14 
	
.LABEL $label$15
	*($6) = *($3)
	*($5 + [216]) = *($5 + [288])
	*($5 + [288]) = (int_64)0
	
.LABEL $label$14
	*((($5 + [256]) + [8])) = *((($5 + [288]) + [8]))
	$6 = (($5 + [216]) + [8])
	*(($3 = ($5 + [280]))) = *($6)
	*($5 + [256]) = *($5 + [288])
	*($5 + [272]) = *($5 + [216])
	$2 = *($5 + [272])
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$16 }
	$8 = *($0)
	$9 = CALL $22($0)
	$10 = *($3)
	if ( ((int_64)$10 != (int_64)1397703940) ){ goto $label$18 }
	CALL eosio_assert([1], [9492])
	$11 = (int_64)6138663591592764928
	goto $label$17 
	
.LABEL $label$18
	CALL eosio_assert(((int_64)$10 == (int_64)1296126464), [9511])
	$11 = (int_64)-5069476200169789136
	
.LABEL $label$17
	*((($5 + [288]) + [8])) = *((($5 + [40]) + [8]))
	*($5 + [224]) = $10
	*($5 + [216]) = $2
	*($5 + [232]) = $11
	*($5 + [288]) = *($5 + [40])
	$3 = [0]
	
.LOOP $label$19:
	*((($5 + [40]) + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$19 }
	CALL $28($0, $8, $9, ($5 + [216]), ($5 + [288]), [1])
	if ( ((*($5 + [288]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($5 + [296]))
	
.LABEL $label$16
	*($6) = *(($4 + [8]))
	*($5 + [216]) = *($4)
	$3 = [0]
	
.LOOP $label$20:
	*((($5 + [56]) + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$20 }
	CALL $49($0, $1, ($5 + [256]), ($5 + [216]), [1])
	if ( ((*($5 + [216]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($5 + [224]))
	
.LABEL $label$21
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($5 + [48]))
	
.LABEL $label$22
	if ( ((*($4) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$23
	if ( (*(($5 + [136])) == 0) ){ goto $label$10 }
	if ( ((*($5 + [120]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [128])))
	
.LABEL $label$10
	CALL $53(($5 + [168]))
	
.LABEL $label$2
	$global$0 = ($5 + [304])
	return (unreachable)
	
.LABEL $label$1
	CALL $260(($5 + [40]))
}

int_32 .FUNC $95 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [256])
	$global$0 = $3
	*(($4 = $3) + [200]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $282($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [176])) = (int_64)0
	*(($4 + [192])) = [0]
	*($4 + [160]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [184]) = (int_64)0
	$3 = [32]
	
.LOOP $label$4:
	*((($4 + [152]) + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[44]) ){ goto $label$4 }
	*($4 + [140]) = $2
	*($4 + [136]) = $2
	*($4 + [144]) = ($2 + $5)
	*($4 + [240]) = ($4 + [136])
	*($4 + [24]) = ($4 + [152])
	CALL $102(($4 + [24]), ($4 + [240]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [144])
	*($4 + [8]) = *($4 + [136])
	$3 = *($3)
	*((($4 + [208]) + [8])) = $3
	*(($6 = (($4 + [224]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [224]) = $7
	*($4 + [208]) = $7
	$3 = *($6)
	*((($4 + [240]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [224])
	*($4 + [40]) = $1
	*($4 + [240]) = $1
	*(($4 + [64])) = (int_64)6138663591592764928
	*(($4 + [72])) = (int_64)-1
	*(($3 = ($4 + [80]))) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = (int_64)-5069476200169789136
	*(($4 + [112])) = (int_64)-1
	*(($6 = ($4 + [120]))) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [244]) = ($4 + [200])
	*($4 + [240]) = ($4 + [24])
	CALL $103(($4 + [240]), ($4 + [152]))
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $285($2)
	
.LABEL $label$5
	CALL $104($6)
	CALL $104($3)
	if ( ((*(($4 + [184])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [192])))
	
.LABEL $label$6
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $96 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [160])
	$global$0 = $3
	$4 = CALL $37($0, $1)
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9311])
	CALL $38(($3 + [112]), $4, $1)
	$5 = [1]
	if ( CALL has_auth(*($3 + [144])) ){ goto $label$1 }
	$5 = CALL has_auth(*($0))
	
.LABEL $label$1
	CALL eosio_assert($5, [9352])
	CALL memcpy(($3 + [64]), ($3 + [112]), [48])
	*((($3 + [48]) + [8])) = *(($2 + [8]))
	*($3 + [48]) = *($2)
	$5 = [0]
	
.LOOP $label$2:
	*(($2 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$2 }
	$5 = CALL memcpy($3, ($3 + [64]), [48])
	CALL $40($0, $4, $5, ($5 + [48]))
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($5 + [56]))
	
.LABEL $label$3
	$global$0 = ($5 + [160])
}

int_32 .FUNC $97 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [224])
	$global$0 = $3
	*(($4 = $3) + [168]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $282($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [160])) = [0]
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	$3 = [8]
	
.LOOP $label$4:
	*((($4 + [144]) + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[20]) ){ goto $label$4 }
	*($4 + [132]) = $2
	*($4 + [128]) = $2
	*($4 + [136]) = ($2 + $5)
	*($4 + [208]) = ($4 + [128])
	*($4 + [16]) = ($4 + [144])
	CALL $109(($4 + [16]), ($4 + [208]))
	*(($3 = ($4 + [8]))) = *($4 + [136])
	*($4) = *($4 + [128])
	$3 = *($3)
	*((($4 + [176]) + [8])) = $3
	*(($6 = (($4 + [192]) + [8]))) = $3
	$7 = *($4)
	*($4 + [192]) = $7
	*($4 + [176]) = $7
	$3 = *($6)
	*((($4 + [208]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [192])
	*($4 + [32]) = $1
	*($4 + [208]) = $1
	*(($4 + [56])) = (int_64)6138663591592764928
	*(($4 + [64])) = (int_64)-1
	*(($3 = ($4 + [72]))) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = (int_64)-5069476200169789136
	*(($4 + [104])) = (int_64)-1
	*(($6 = ($4 + [112]))) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [124])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [212]) = ($4 + [168])
	*($4 + [208]) = ($4 + [16])
	CALL $110(($4 + [208]), ($4 + [144]))
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $285($2)
	
.LABEL $label$5
	CALL $104($6)
	CALL $104($3)
	if ( ((*((($4 + [144]) + [8])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [160])))
	
.LABEL $label$6
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $90 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [64])
	$global$0 = $4
	$2 = CALL $79(($4 + [8]), $2)
	$5 = *($2)
	*($2) = [0]
	$6 = *($2 + [8])
	*($2 + [4 align=4]) = (int_64)0
	*(($4 + [48])) = $6
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $5
	CALL $195(($4 + [52]), $3)
	CALL $33(($4 + [24]))
	$3 = *($4 + [52])
	if ( ($3 == 0) ){ goto $label$1 }
	*(($4 + [56])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$3 = *($4 + [40])
	if ( ($3 == 0) ){ goto $label$2 }
	*(($4 + [44])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$3 }
	*(($2 + [4])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [24]
	CALL $189($2, ($1 + [24]))
	CALL $173($0, *($2))
	$3 = *($0)
	*($2) = $3
	*($2 + [4]) = $3
	*($2 + [8]) = *($0 + [4])
	*($2 + [16]) = $2
	*($2 + [24]) = $1
	CALL $243(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [32])
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [16]
	$3 = ($1 + [16])
	CALL $189($2, $3)
	CALL $173($0, *($2))
	$4 = *($0)
	*($2) = $4
	*($2 + [4]) = $4
	*($2 + [8]) = *($0 + [4])
	CALL $175($2, $1)
	CALL $191($2, $3)
	$global$0 = ($2 + [16])
}

void .FUNC $93 (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	if ( ((int_64)$2 <= (int_64)-3617168760277827585) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)8426599551293936768) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)6292795672933810176) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$1 != (int_64)$0), [9069])
	if ( ((int_64)$1 == (int_64)6138663591592764928) ){ goto $label$6 }
	if ( ((int_64)$1 != (int_64)-5069476200169789136) ){ goto $label$1 }
	
.LABEL $label$6
	*($3 + [76]) = [0]
	*($3 + [72]) = [1]
	*($3) = *($3 + [72])
	CALL $95($0, $1, $3)
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$2 == (int_64)-6569208335818555392) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-6497942740231541079) ){ goto $label$1 }
	if ( ((int_64)$0 != (int_64)$1) ){ goto $label$1 }
	*($3 + [52]) = [0]
	*($3 + [48]) = [2]
	*($3 + [24]) = *($3 + [48])
	CALL $97($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$1 == (int_64)$0), [9090])
	*($3 + [60]) = [0]
	*($3 + [56]) = [3]
	*($3 + [16]) = *($3 + [56])
	CALL $98($0, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)$0 != (int_64)$1) ){ goto $label$1 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [8]) = *($3 + [64])
	CALL $99($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$1 == (int_64)6138663577826885632), [9155])
	*($3 + [44]) = [0]
	*($3 + [40]) = [5]
	*($3 + [32]) = *($3 + [40])
	CALL $101($0, $1, ($3 + [32]))
	
.LABEL $label$1
	$global$0 = ($3 + [80])
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$1 = CALL $261($2, $1)
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$4 = (*($0) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($4) + $0))
	
.LABEL $label$1
	$3 = CALL $261(($2 + [16]), $1)
	CALL void $4((int_32 $3), (int_32 $0))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$2
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$3
	$global$0 = ($2 + [32])
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9573])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $137(*($1), (*($0) + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $269 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $130 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $282($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = (int_64)6138663591592764928
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = (int_64)-5069476200169789136
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $285($2)
	
.LABEL $label$5
	CALL $104(($4 + [96]))
	CALL $104(($4 + [56]))
	$global$0 = ($4 + [112])
	return [1]
}

int_32 .FUNC $131 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $282($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9573])
	CALL memcpy(($4 + [120]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = (int_64)6138663591592764928
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = (int_64)-5069476200169789136
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [120])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $285($2)
	
.LABEL $label$5
	CALL $104(($4 + [104]))
	CALL $104(($4 + [64]))
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $132 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [240])
	$global$0 = $3
	*(($4 = $3) + [184]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $282($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [168])) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [176]) = [0]
	*($4 + [180]) = [0]
	*($4 + [140]) = $2
	*($4 + [136]) = $2
	*($4 + [144]) = ($2 + $5)
	*($4 + [224]) = ($4 + [136])
	*($4 + [24]) = ($4 + [152])
	CALL $135(($4 + [24]), ($4 + [224]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [144])
	*($4 + [8]) = *($4 + [136])
	$3 = *($3)
	*((($4 + [192]) + [8])) = $3
	*(($6 = (($4 + [208]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [208]) = $7
	*($4 + [192]) = $7
	$3 = *($6)
	*((($4 + [224]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [208])
	*($4 + [40]) = $1
	*($4 + [224]) = $1
	*(($4 + [64])) = (int_64)6138663591592764928
	*(($4 + [72])) = (int_64)-1
	*(($3 = ($4 + [80]))) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = (int_64)-5069476200169789136
	*(($4 + [112])) = (int_64)-1
	*(($6 = ($4 + [120]))) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [228]) = ($4 + [184])
	*($4 + [224]) = ($4 + [24])
	CALL $136(($4 + [224]), ($4 + [152]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $285($2)
	
.LABEL $label$4
	CALL $104($6)
	CALL $104($3)
	$global$0 = ($4 + [240])
	return [1]
}

int_32 .FUNC $133 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [224])
	$global$0 = $3
	*(($4 = $3) + [168]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $282($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [160])) = [0]
	*($4 + [152]) = (int_64)0
	$3 = [0]
	
.LOOP $label$4:
	*((($4 + [152]) + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$4 }
	*($4 + [140]) = $2
	*($4 + [136]) = $2
	*($4 + [144]) = ($2 + $5)
	CALL $137(($4 + [136]), ($4 + [152]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [144])
	*($4 + [8]) = *($4 + [136])
	$3 = *($3)
	*((($4 + [176]) + [8])) = $3
	*(($6 = (($4 + [192]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [192]) = $7
	*($4 + [176]) = $7
	$3 = *($6)
	*((($4 + [208]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [192])
	*($4 + [40]) = $1
	*($4 + [208]) = $1
	*(($4 + [64])) = (int_64)6138663591592764928
	*(($4 + [72])) = (int_64)-1
	*(($3 = ($4 + [80]))) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = (int_64)-5069476200169789136
	*(($4 + [112])) = (int_64)-1
	*(($6 = ($4 + [120]))) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [212]) = ($4 + [168])
	*($4 + [208]) = ($4 + [24])
	CALL $138(($4 + [208]), ($4 + [152]))
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $285($2)
	
.LABEL $label$5
	CALL $104($6)
	CALL $104($3)
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($4 + [160]))
	
.LABEL $label$6
	$global$0 = ($4 + [224])
	return [1]
}

int_32 .FUNC $134 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [224])
	$global$0 = $3
	*(($4 = $3) + [168]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $282($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [160])) = [0]
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	$3 = [8]
	
.LOOP $label$4:
	*((($4 + [144]) + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[20]) ){ goto $label$4 }
	*($4 + [132]) = $2
	*($4 + [128]) = $2
	*($4 + [136]) = ($2 + $5)
	*($4 + [208]) = ($4 + [128])
	*($4 + [16]) = ($4 + [144])
	CALL $139(($4 + [16]), ($4 + [208]))
	*(($3 = ($4 + [8]))) = *($4 + [136])
	*($4) = *($4 + [128])
	$3 = *($3)
	*((($4 + [176]) + [8])) = $3
	*(($6 = (($4 + [192]) + [8]))) = $3
	$7 = *($4)
	*($4 + [192]) = $7
	*($4 + [176]) = $7
	$3 = *($6)
	*((($4 + [208]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [192])
	*($4 + [32]) = $1
	*($4 + [208]) = $1
	*(($4 + [56])) = (int_64)6138663591592764928
	*(($4 + [64])) = (int_64)-1
	*(($3 = ($4 + [72]))) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = (int_64)-5069476200169789136
	*(($4 + [104])) = (int_64)-1
	*(($6 = ($4 + [112]))) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [124])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [212]) = ($4 + [168])
	*($4 + [208]) = ($4 + [16])
	CALL $140(($4 + [208]), ($4 + [144]))
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $285($2)
	
.LABEL $label$5
	CALL $104($6)
	CALL $104($3)
	if ( ((*((($4 + [144]) + [8])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [160])))
	
.LABEL $label$6
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9573])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	CALL $151(*($1), ($0 + [8]))
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9573])
	CALL memcpy(($0 + [24]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [9573])
	CALL memcpy(($2 + [15]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	*($0 + [28]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = (($2 + [16]) + [8]))) = *(($1 + [16]))
	*($2 + [16]) = *($1 + [8])
	$4 = *($1)
	$5 = *($1 + [24])
	$6 = *($1 + [28])
	*((($2 + [32]) + [8])) = *($3)
	*($2 + [32]) = *($2 + [16])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$7 = *((($2 + [32]) + [8]))
	*((($2 + [48]) + [8])) = $7
	*(($2 + [8])) = $7
	$7 = *($2 + [32])
	*($2) = $7
	*($2 + [48]) = $7
	CALL void $0((int_32 $4), (int_64 $2), (int_32 $5), (int_32 ((int_32)($6 & [255]) != (int_32)[0])), (int_32 $1))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $111($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$7 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$6 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$5 
	
.LABEL $label$7
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = [0]
	
.LOOP $label$8:
	*(($2 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$8 }
	if ( (*($1) & [1]) ){ goto $label$4 }
	*($1) = [0]
	goto $label$3 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$5
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $263($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = [0]
	
.LOOP $label$12:
	*(($2 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$12 }
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($2 + [8]))
	goto $label$2 
	
.LABEL $label$4
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$3
	CALL $263($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = [0]
	
.LOOP $label$13:
	*(($2 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$13 }
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$2
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$14 }
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$14
	$global$0 = ($2 + [32])
	return $0
	
.LABEL $label$1
	CALL $260($2)
	return (unreachable)
}

void .FUNC $260 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $261 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $213 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = [0]
	CALL $204($0, ($2 + [8]))
	CALL $9($1, *($2 + [8]))
	$1 = *($1 + [4])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	
.LOOP $label$2:
	CALL $217($0, $3)
	$3 = ($3 + [40])
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $262 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $283 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $284($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8302])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $263 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $265 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $262($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $208 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $191($0, ($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10122])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $209 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *(($1 + [4]))
	$3 = *($1)
	$1 = *($0 + [4])
	if ( ($1 & [1]) ){ goto $label$3 }
	$1 = uint_32($1 >> [1])
	$4 = (($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = *(($0 + [8]))
	$4 = *(($0 + [12]))
	if ( $2 ){ goto $label$1 }
	
.LABEL $label$2
	return [1]
	
.LABEL $label$1
	$5 = ($4 + $1)
	if ( ((int_32)$1 < (int_32)$2) ){ goto $label$5 }
	$6 = *($3)
	$0 = $4
	
.LOOP $label$6:
	$1 = (($1 - $2) + [1])
	if ( ($1 == 0) ){ goto $label$5 }
	$1 = CALL $277($0, $6, $1)
	if ( ($1 == 0) ){ goto $label$5 }
	if ( (CALL $278($1, $3, $2) == 0) ){ goto $label$4 }
	$0 = ($1 + [1])
	$1 = ($5 - $0)
	if ( ((int_32)$1 >= (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$5
	$1 = $5
	
.LABEL $label$4
	return (((int_32)$1 == (int_32)$4) & ((int_32)$1 != (int_32)$5))
}

int_32 .FUNC $202 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16 align=4]) = (int_64)0
	*(($0 + [24])) = [0]
	$3 = [16]
	
.LOOP $label$1:
	*(($0 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[28]) ){ goto $label$1 }
	*($0 + [28]) = $1
	CALL $203(*($2 + [4]), $0)
	*($0 + [32]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $203 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $137($0, ($1 + [16]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9573])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9573])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $200 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $205(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $206($0, $9)
	CALL $207($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $268($0)
}

int_32 .FUNC $201 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$6 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9550])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL $282($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([40])
	$6 = CALL $202($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [32])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $200(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $285($4)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $206 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	$6 = ($2 + [-24])
	$7 = *($6)
	*($6) = [0]
	*(($5 + [-24])) = $7
	*(($5 + [-8])) = *(($2 + [-8]))
	*(($5 + [-16])) = *(($2 + [-16]))
	$5 = (*($4) + [-24])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

int_32 .FUNC $207 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdlPv($1)
	
.LABEL $label$5
	return $0
}

int_32 .FUNC $204 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10914])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	*($1) = $4
	return $0
}

int_32 .FUNC $205 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL _Znwj(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $282 (int_32 $0)
{
	return CALL $283([11304], $0)
}

int_32 .FUNC $181 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1)
	$5 = ($0 + [8])
	$1 = ($0 + [4])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$7 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $3) > (int_32)[0]), [10122])
	CALL memcpy(*($1), ($2 + [15]), [1])
	$3 = (*($1) + [1])
	*($1) = $3
	if ( $7 ){ goto $label$1 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $129 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $282($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [112]) + [24]))) = (int_64)0
	*(($8 = (($4 + [112]) + [16]))) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[31]), [9573])
	CALL memcpy(($4 + [112]), $2, [32])
	*(($4 + [20])) = ($2 + [32])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = (int_64)6138663591592764928
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = (int_64)-5069476200169789136
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*(($9 = (($4 + [144]) + [24]))) = *($3)
	*(($3 = (($4 + [144]) + [16]))) = *($8)
	*($4 + [152]) = *($4 + [120])
	*($4 + [144]) = *($4 + [112])
	*((($4 + [176]) + [24])) = *($9)
	*((($4 + [176]) + [16])) = *($3)
	*($4 + [184]) = *($4 + [152])
	*($4 + [176]) = *($4 + [144])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [176])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $285($2)
	
.LABEL $label$5
	CALL $104(($4 + [96]))
	CALL $104(($4 + [56]))
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$9 }
	if ( ((int_64)$2 <= (int_64)4520488125973135359) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)4930993844168339327) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)4520488125973135360) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)4730614985703555072) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)4730614989978557584) ){ goto $label$9 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [6]
	*($3 + [32]) = *($3 + [136])
	CALL $129($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 <= (int_64)-4417085844536426497) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-4417085844536426496) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-4157529991795441664) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4149697620714979328) ){ goto $label$9 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [7]
	*($3 + [48]) = *($3 + [120])
	CALL $130($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)4930993844168339328) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)4931243290507870208) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$9 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [8]
	*($3) = *($3 + [168])
	CALL $131($1, $1, $3)
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)-4421672816961650688) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-4417269088573478400) ){ goto $label$9 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [9]
	*($3 + [56]) = *($3 + [112])
	CALL $131($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$9
	CALL $93($0, $1, $2)
	goto $label$1 
	
.LABEL $label$8
	*($3 + [164]) = [0]
	*($3 + [160]) = [10]
	*($3 + [8]) = *($3 + [160])
	CALL $132($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [148]) = [0]
	*($3 + [144]) = [11]
	*($3 + [24]) = *($3 + [144])
	CALL $99($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [108]) = [0]
	*($3 + [104]) = [12]
	*($3 + [64]) = *($3 + [104])
	CALL $131($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [132]) = [0]
	*($3 + [128]) = [13]
	*($3 + [40]) = *($3 + [128])
	CALL $130($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [100]) = [0]
	*($3 + [96]) = [14]
	*($3 + [72]) = *($3 + [96])
	CALL $133($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [92]) = [0]
	*($3 + [88]) = [15]
	*($3 + [80]) = *($3 + [88])
	CALL $134($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [156]) = [0]
	*($3 + [152]) = [16]
	*($3 + [16]) = *($3 + [152])
	CALL $132($1, $1, ($3 + [16]))
	
.LABEL $label$1
	CALL $272([0])
	$global$0 = ($3 + [176])
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *(($2 + [-12]))
	if ( ($3 == 0) ){ goto $label$5 }
	*(($2 + [-8])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$3 = ($2 + [-40])
	$4 = *(($2 + [-24]))
	if ( ($4 == 0) ){ goto $label$6 }
	*(($2 + [-20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$2 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($2)
	
.LABEL $label$1
	return $0
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[40])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$1 }
	CALL $141($0, ($1 - $4))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$4 <= (uint_32)$1) ){ goto $label$2 }
	$3 = ($3 + ((int_32)$1 * (int_32)[40]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	$1 = *(($2 + [-12]))
	if ( ($1 == 0) ){ goto $label$5 }
	*(($2 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1 = ($2 + [-40])
	$4 = *(($2 + [-24]))
	if ( ($4 == 0) ){ goto $label$6 }
	*(($2 + [-20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$2 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	*(($0 + [4])) = $3
	
.LABEL $label$2
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL $60(($2 + [40]), ($0 + [32]), (int_64)0)
	if ( (*($2 + [44]) == 0) ){ goto $label$1 }
	$3 = CALL $261(($2 + [24]), $1)
	CALL $124($0, [8520], $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$1
	CALL $60(($2 + [40]), ($0 + [72]), (int_64)0)
	if ( (*($2 + [44]) == 0) ){ goto $label$2 }
	$1 = CALL $261(($2 + [8]), $1)
	CALL $124($0, [8656], $1)
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

void .FUNC $122 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [80])
	$global$0 = $1
	CALL require_auth2(*($0), (int_64)3631283935532548096)
	*(($1 + [64])) = [0]
	*($1 + [48]) = (int_64)-1
	*($1 + [56]) = (int_64)0
	$2 = *($0)
	*($1 + [32]) = $2
	*($1 + [40]) = $2
	CALL $15(($1 + [72]), ($1 + [32]), (int_64)-4157503053760561152)
	CALL eosio_assert(((int_32)*($1 + [76]) != (int_32)[0]), [11007])
	$3 = *($1 + [76])
	*((($1 + [8]) + [8])) = *(($3 + [8]))
	*(($4 = (($1 + [8]) + [16]))) = *(($3 + [16]))
	*($1 + [8]) = *($3)
	*($4) = [0]
	CALL $16(($1 + [32]), ($1 + [8]), *($0))
	CALL $17(($1 + [56]))
	$global$0 = ($1 + [80])
}

void .FUNC $121 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [80])
	$global$0 = $1
	CALL require_auth2(*($0), (int_64)3631283935532548096)
	*(($1 + [64])) = [0]
	*($1 + [48]) = (int_64)-1
	*($1 + [56]) = (int_64)0
	$2 = *($0)
	*($1 + [32]) = $2
	*($1 + [40]) = $2
	CALL $15(($1 + [72]), ($1 + [32]), (int_64)-4157503053760561152)
	CALL eosio_assert(((int_32)*($1 + [76]) != (int_32)[0]), [11007])
	$3 = *($1 + [76])
	*((($1 + [8]) + [8])) = *(($3 + [8]))
	*(($4 = (($1 + [8]) + [16]))) = *(($3 + [16]))
	*($1 + [8]) = *($3)
	*($4) = [1]
	CALL $16(($1 + [32]), ($1 + [8]), *($0))
	CALL $17(($1 + [56]))
	$global$0 = ($1 + [80])
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $225($2, $1)
	CALL $173($0, *($2))
	$3 = *($0)
	*($2) = $3
	*($2 + [4]) = $3
	*($2 + [8]) = *($0 + [4])
	CALL $226($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $2 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [96])
	$global$0 = $5
	*($5 + [80]) = $1
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$1 }
	$6 = CALL $3(($5 + [8]), $1)
	*($5 + [88]) = $3
	CALL $4($6, *(( ($5 + [88]) ? $0 : CALL $fimport$0($3) )), (int_64)3617214756542218240)
	CALL $5($6, *($0), (int_64)-6497942740231541079, ($5 + [80]), $4)
	*($5 + [88]) = $3
	CALL $6($6, $2, *(( ($5 + [88]) ? $0 : CALL $fimport$0($3) )), [0])
	CALL $7(($6 + [56]))
	CALL $8(($6 + [44]))
	CALL $8(($6 + [32]))
	
.LABEL $label$1
	$global$0 = ($5 + [96])
}

void .FUNC $126 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [48])
	$global$0 = $5
	$0 = ($0 + [44])
	$6 = *($0)
	if ( ((int_32)*(($0 + [48])) == (int_32)$6) ){ goto $label$1 }
	*($6 + [8]) = $2
	*($6) = $1
	*(($5 + [24])) = *(($4 + [8]))
	*($5 + [8]) = *($3)
	*($5 + [16]) = *($4)
	$0 = [0]
	
.LOOP $label$2:
	*(($4 + $0)) = [0]
	$0 = ($0 + [4])
	if ( ((int_32)$0 != (int_32)[12]) ){ goto $label$2 }
	CALL $127(($5 + [32]), ($5 + [8]))
	$0 = *($6 + [28])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [32])) = $0
	CALL _ZdlPv($0)
	*(($0 = ($6 + [36]))) = [0]
	*($6 + [28 align=4]) = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$0 = ($6 + [36])
	
.LABEL $label$3
	*(($6 + [28])) = *($5 + [32])
	*($0) = *($5 + [40])
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = [0]
	if ( ((*(($5 + [16])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$5
	$global$0 = ($5 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $269($0)
}

void .FUNC $125 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($2)
	*($3 + [8]) = $4
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$5) != (int_32)[0]), [10702])
	CALL $66(($3 + [8]))
	CALL $194($1, $5)
	$4 = *($3 + [8])
	CALL eosio_assert(((int_32)*($2 + [4]) != (int_32)[0]), [10663])
	*($0) = $4
	$global$0 = ($3 + [16])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL require_auth2(*($0), (int_64)3631283935532548096)
	$4 = ( ($0 + [32]) ? ($0 + [72]) : ((int_64)*($1) == (int_64)1397703940) )
	CALL $60(($3 + [16]), $4, (int_64)0)
	$5 = *($3 + [20])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = *($3 + [16])
	$7 = [8]
	
.LOOP $label$2:
	*(($8 = (($3 + [96]) + [8]))) = *(($2 + [8]))
	*($3 + [96]) = *($2)
	$9 = *($5 + [32])
	$10 = [0]
	
.LOOP $label$3:
	*(($2 + $10)) = [0]
	$10 = ($10 + [4])
	if ( ((int_32)$10 != (int_32)[12]) ){ goto $label$3 }
	CALL $49($0, $9, ($5 + [16]), ($3 + [96]), [0])
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$4
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $6))
	*($3 + [8]) = $9
	*($3 + [16]) = $9
	CALL $125(($3 + [88]), $4, ($3 + [8]))
	$5 = *($3 + [92])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = *($3 + [88])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$2 }
	
.LABEL $label$1
	CALL $60(($3 + [16]), $4, (int_64)0)
	if ( (*($3 + [20]) == 0) ){ goto $label$5 }
	$10 = CALL $3(($3 + [16]), *($1))
	CALL $4($10, *($0), (int_64)3631283935532548096)
	CALL $126($10, *($0), (int_64)4931243290507870208, $1, $2)
	CALL $6($10, [5], *($0), [0])
	CALL $7(($10 + [56]))
	CALL $8(($10 + [44]))
	CALL $8(($10 + [32]))
	
.LABEL $label$5
	$global$0 = ($3 + [112])
}

void .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$3($1), [8192])
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$3 = *($0)
	*($2 + [24]) = $3
	*($2 + [32]) = $3
	CALL $15($2, ($2 + [24]), (int_64)-4157503053760561152)
	CALL eosio_assert((*($2 + [4]) == 0), [8257])
	*($2 + [8]) = (int_64)0
	*($2) = $1
	*($2 + [16]) = [0]
	CALL $16(($2 + [24]), $2, *($0))
	CALL $17(($2 + [48]))
	$global$0 = ($2 + [64])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_64)$2 == (int_64)-4157503053760561152) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + ((int_32)((int_32)((uint_32)(($3 + [-24]) - $4) / (uint_32)[24]) ^ (int_32)[-1]) * (int_32)[24]))
	
.LABEL $label$1
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$1), [9578])
	*($0 + [4]) = $3
	goto $label$2 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4157503053760561152, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$4 }
	$3 = CALL $234($1, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$1), [9578])
	*($0 + [4]) = $3
	goto $label$2 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	
.LABEL $label$2
	*($0) = $1
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL $15(($3 + [24]), $0, (int_64)-4157503053760561152)
	if ( (*($3 + [28]) == 0) ){ goto $label$2 }
	$4 = *($3 + [28])
	*($3 + [8]) = $1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [10181])
	CALL $18($0, $4, $2, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [16]) = $1
	CALL $19(($3 + [8]), $0, $2, ($3 + [16]))
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($2)
	
.LABEL $label$1
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( ((uint_32)$1 >= (uint_32)[268435456]) ){ goto $label$1 }
	$2 = ($1 << [4])
	$1 = CALL _Znwj($2)
	*($0) = $1
	*($0 + [4]) = $1
	*($0 + [8]) = ($1 + $2)
	return (unreachable)
	
.LABEL $label$1
	CALL $268($0)
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($0 + [44])
	$0 = *($2)
	if ( ((int_32)*(($0 + [48])) == (int_32)$0) ){ goto $label$1 }
	CALL $145(($0 + [16]), $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $269($2)
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [8]
	CALL $189($2, ($1 + [8]))
	CALL $173($0, *($2))
	$3 = *($0)
	*($2) = $3
	*($2 + [4]) = $3
	*($2 + [8]) = *($0 + [4])
	*($2 + [16]) = $2
	*($2 + [24]) = $1
	CALL $233(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [32])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL $120($4, $0)
	$0 = *($4)
	CALL send_deferred($1, $2, $0, (*($4 + [4]) - $0), $3)
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$1 }
	*($4 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [32]
	CALL $189($2, ($1 + [32]))
	CALL $173($0, *($2))
	$3 = *($0)
	*($2) = $3
	*($2 + [4]) = $3
	*($2 + [8]) = *($0 + [4])
	*($2 + [16]) = $2
	*($2 + [24]) = $1
	CALL $190(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $281 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $282($1)
	
.LABEL $label$2
	*(CALL $271()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $282(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $285($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10216])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$20()), [10262])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [16])) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	CALL eosio_assert([1], [10313])
	*($4 + [40]) = ($4 + [17])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	CALL $240(($4 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $4, [17])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4157503053760561152) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-4157503053760561151
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$20()), [10612])
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [24]) = $1
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *(($3 + [8]))
	*($5 + [16]) = *(($3 + [16]))
	*($4 + [56]) = (($4 + [16]) + [17])
	*($4 + [52]) = ($4 + [16])
	*($4 + [48]) = ($4 + [16])
	CALL $240(($4 + [48]), $5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4157503053760561152, $2, (int_64)-4157503053760561152, ($4 + [16]), [17])
	*($5 + [28]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4157503053760561152) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-4157503053760561151
	
.LABEL $label$1
	*($4 + [48]) = $5
	*($4 + [16]) = (int_64)-4157503053760561152
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-4157503053760561152
	*($3 + [16]) = $6
	*($4 + [48]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $236(($1 + [24]), ($4 + [48]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [48])
	*($4 + [48]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [64])
}

void .FUNC $184 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [40]) = $1
	CALL $188(($3 + [8]), ($3 + [40]))
	$4 = CALL $264(($3 + [8]), [10372])
	*((($3 + [24]) + [8])) = *(($4 + [8]))
	*($3 + [24]) = *($4)
	$5 = [0]
	
.LOOP $label$1:
	*(($4 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$1 }
	$5 = *($2)
	$4 = ($5 & [1])
	$4 = CALL $265(($3 + [24]), ( *($2 + [8]) ? ($2 + [1]) : $4 ), ( *($2 + [4]) ? uint_32($5 >> [1]) : $4 ))
	*($0) = *($4)
	*(($0 + [8])) = *(($4 + [8]))
	$5 = [0]
	
.LOOP $label$2:
	*(($4 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$2 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($3 + [32]))
	
.LABEL $label$3
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($3 + [16]))
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = (*($0 + [4]) - $2)
	$4 = (*($1 + [4]) - $3)
	*($1 + [4]) = $4
	if ( ((int_32)$3 <= (int_32)[0]) ){ goto $label$1 }
	CALL memcpy($4, $2, $3)
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	$3 = *($0)
	*($0) = $4
	*(($4 = ($1 + [4]))) = $3
	$3 = ($0 + [4])
	$2 = *($3)
	*($3) = *($1 + [8])
	*($1 + [8]) = $2
	$3 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $3
	*($1) = *($4)
}

void .FUNC $218 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	if ( ((uint_32)int_32(($3 - $4) >> [4]) >= (uint_32)$1) ){ goto $label$3 }
	$5 = *($0)
	$4 = int_32(($4 - $5) >> [4])
	$6 = ($4 + $1)
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = ($0 + [8])
	$8 = [268435455]
	$3 = ($3 - $5)
	if ( ((uint_32)int_32($3 >> [4]) > (uint_32)[134217726]) ){ goto $label$4 }
	$3 = int_32($3 >> [3])
	$8 = ( $6 ? $3 : ($3 <= $6) )
	
.LABEL $label$4
	$4 = CALL $219(($2 + [8]), $8, $4, $7)
	$5 = *($4 + [8])
	$3 = $5
	$8 = $1
	
.LOOP $label$5:
	*($3) = [0]
	*(($3 + [4])) = (int_64)0
	*(($3 + [12])) = [0]
	$3 = ($3 + [16])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$5 }
	*(($4 + [8])) = ($5 + ($1 << [4]))
	CALL $220($0, $4)
	CALL $221($4)
	goto $label$2 
	
.LABEL $label$3
	$3 = $4
	$8 = $1
	
.LOOP $label$6:
	*($3) = [0]
	*(($3 + [4])) = (int_64)0
	*(($3 + [12])) = [0]
	$3 = ($3 + [16])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$6 }
	*(($0 + [4])) = ($4 + ($1 << [4]))
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $268($0)
}

int_32 .FUNC $186 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[268435456]) ){ goto $label$1 }
	$4 = CALL _Znwj(($1 << [4]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ($2 << [4]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ($1 << [4]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = *($1)
	$2 = *($1 + [4])
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$1 = *($0)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$1 = (((($4 + [-16]) & [-16]) + $1) + [16])
	
.LABEL $label$2
	*($0) = $1
	return $0
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($2) + [64]) == (int_32)( *($1 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )), [11194])
	$4 = [0]
	$2 = *($2)
	$5 = ($5 & [1])
	$5 = *($1)
	if ( ((int_32)( *($1 + [4]) ? uint_32($5 >> [1]) : $5 ) == (int_32)$2) ){ goto $label$1 }
	$7 = ($1 + [1])
	$6 = ($1 + [8])
	$4 = (( *($6) ? $7 : $5 ) + $2)
	$8 = [0]
	
.LOOP $label$2:
	$10 = (CALL $248(*($4)) << [4])
	*(($8 = ($3 + ($9 = $8)))) = $10
	$12 = uint_32($12 >> [1])
	$13 = ($1 + [4])
	$14 = *($13)
	$12 = *($1)
	$2 = ($12 & [1])
	$11 = *($6)
	$5 = ($4 + [1])
	if ( ((int_32)$5 == (int_32)(( $11 ? $7 : $2 ) + ( $14 ? $12 : $2 ))) ){ goto $label$3 }
	*($8) = (CALL $248(*(($4 + [1]))) | $10)
	$5 = ($4 + [2])
	$2 = *($1)
	$12 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$14 = *($13)
	$11 = *($6)
	
.LABEL $label$3
	if ( ((int_32)$9 == (int_32)[31]) ){ goto $label$4 }
	$8 = ($9 + [1])
	$4 = $5
	if ( ((int_32)$5 != (int_32)(( $11 ? $7 : $2 ) + ( $14 ? $12 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$4
	$4 = ((int_32)$9 == (int_32)[31])
	
.LABEL $label$1
	CALL eosio_assert($4, [11241])
	*(($0 + [24])) = *(($3 + [24]))
	*(($0 + [16])) = *(($3 + [16]))
	*(($0 + [8])) = *($3 + [8])
	*($0) = *($3)
	$global$0 = ($3 + [32])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($1), *($1 + [8]), (int_64)-6150061881577247232, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $201($1, $4)
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0 + [4 align=4]) = (int_64)0
	*(($0 + [12])) = [0]
	$2 = ($0 + [4])
	$3 = [4]
	
.LOOP $label$1:
	*(($0 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[16]) ){ goto $label$1 }
	*($0 + [16]) = [0]
	$3 = *($1)
	if ( ($3 & [1]) ){ goto $label$3 }
	$3 = uint_32($3 >> [1])
	goto $label$2 
	
.LABEL $label$3
	$3 = *($1 + [4])
	
.LABEL $label$2
	CALL eosio_assert(($3 <= [257]), [10920])
	$4 = *($1)
	if ( ($4 & [1]) ){ goto $label$5 }
	$3 = ($1 + [1])
	$4 = ($3 + uint_32($4 >> [1]))
	goto $label$4 
	
.LABEL $label$5
	$3 = *($1 + [8])
	$4 = ($3 + *($1 + [4]))
	
.LABEL $label$4
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	*($3) = CALL $270(*($3))
	$3 = ($3 + [1])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$7 }
	
.LABEL $label$6
	if ( (*($2) & [1]) ){ goto $label$9 }
	*($2) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*(($0 + [12]))) = [0]
	*(($0 + [8])) = [0]
	
.LABEL $label$8
	CALL $263($2, [0])
	*(($2 + [8])) = *(($1 + [8]))
	*($2) = *($1)
	$3 = [0]
	
.LOOP $label$10:
	*(($1 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$10 }
	CALL $119($0)
	return $0
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL eosio_assert([1], [9448])
	$4 = [0]
	*($0 + [4]) = [0]
	*($0) = [-1]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 == 0) ){ goto $label$2 }
	$7 = (int_64)0
	$8 = ($1 + [1])
	$6 = ( *($1 + [8]) ? $8 : $6 )
	$9 = *($6)
	if ( ((int_32)$9 == (int_32)[43]) ){ goto $label$4 }
	if ( ((int_32)$9 != (int_32)[45]) ){ goto $label$3 }
	$7 = (int_64)-1
	
.LABEL $label$4
	$4 = [1]
	
.LABEL $label$3
	$10 = (int_64)0
	$9 = [0]
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$5 }
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$10 > (uint_64)(int_64)429496729) ){ goto $label$6 }
	$11 = *(($6 + $4))
	$12 = ((int_64)$11 + (int_64)-48)
	if ( ((uint_64)$12 > (uint_64)(int_64)9) ){ goto $label$6 }
	$13 = ((int_64)$10 * (int_64)10)
	if ( ((uint_64)$13 > (uint_64)(int_64))((int_64)4294967343 - $11)) ){ goto $label$6 }
	$10 = ((int_64)$12 + (int_64)$13)
	$4 = ($4 + [1])
	if ( ($4 <= $5) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$9 = [1]
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$9 }
	if ( ($9 == 0) ){ goto $label$1 }
	$5 = [0]
	if ( (uint_64)(((int_64)*(($6 + $4)) + (int_64)-48) <= (int_64)10) ){ goto $label$8 }
	
.LABEL $label$9
	$5 = ((uint_64)$10 <= (uint_64)( (int_64)2147483647 ? (int_64)2147483648 : (int_64)($7 == 0) ))
	
.LABEL $label$8
	CALL eosio_assert($5, [11179])
	CALL $26($0, ((int_32)(CASTING uint_32)(uint_64 (int_64))(((int_64)$10 ^ (int_64)$7) - $7)) * (int_32)[60]))
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [11032])
	$5 = ($5 & [1])
	$5 = *($1)
	$6 = ($1 + [4])
	$9 = ( *($6) ? uint_32($5 >> [1]) : $5 )
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$10 }
	CALL eosio_assert([1], [11067])
	CALL eosio_assert(((int_32)*($0) != (int_32)[0]), [11146])
	goto $label$2 
	
.LABEL $label$10
	*($3 + [48]) = [9482]
	*($3 + [60]) = $9
	$9 = ($1 + [8])
	*($3 + [56]) = ( *($9) ? $8 : $5 )
	*($3 + [52]) = [1]
	*($3 + [16]) = *($3 + [48])
	*($3 + [24]) = *($3 + [56])
	CALL eosio_assert(CALL $1(($3 + [24]), $4, ($3 + [16])), [11067])
	*($3 + [32]) = [9484]
	*($3 + [36]) = [7]
	$5 = *($1)
	$9 = ($5 & [1])
	*($3 + [40]) = ( *($9) ? $8 : $9 )
	*($3 + [44]) = ( *($6) ? uint_32($5 >> [1]) : $9 )
	*($3) = *($3 + [32])
	*($3 + [8]) = *($3 + [40])
	if ( (CALL $1(($3 + [8]), ($4 + [1]), $3) == 0) ){ goto $label$12 }
	$4 = *($1)
	CALL eosio_assert(((int_32)($4 + [8]) == (int_32)( *(($1 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )), [11107])
	goto $label$11 
	
.LABEL $label$12
	CALL eosio_assert([0], [11107])
	
.LABEL $label$11
	*(($0 + [4])) = ((int_32)uint_32(*($0) >> [31]) ^ (int_32)[1])
	
.LABEL $label$2
	$global$0 = ($3 + [64])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2) = *($1)
	*($2 + [8]) = *(($1 + [8]))
	$3 = CALL $244(($2 + [16]), ($1 + [16]))
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*($0) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*($2 + [40]) = *($2 + [8])
	*($2 + [32]) = *($2)
	CALL $244(($2 + [48]), $3)
	CALL void $0((int_32 ($2 + [32])), (int_32 $1))
	$1 = *($2 + [48])
	if ( ($1 == 0) ){ goto $label$2 }
	*(($2 + [52])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$3 }
	*(($2 + [20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($2 + [64])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = CALL current_time()
	*($0 + [12]) = [0]
	*($0 + [16]) = [0]
	*($0 + [20 align=4]) = (int_64)0
	*($0 + [36 align=4]) = (int_64)0
	*(($0 + [28])) = (int_64)0
	*(($0 + [44])) = (int_64)0
	*(($0 + [52])) = (int_64)0
	*($0) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	CALL $211($3, $0)
	$global$0 = ($3 + [16])
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $261($2, ($1 + [8]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$4 = CALL $261(($2 + [16]), $1)
	CALL void $5((int_32 $3), (int_64 $4), (int_32 $0))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$2
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$3
	$global$0 = ($2 + [32])
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = [0]
	CALL $204($0, ($2 + [8]))
	CALL $173($1, *($2 + [8]))
	$3 = *($1)
	$1 = (*($1 + [4]) - $3)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) >= (uint_32)$1), [9573])
	CALL memcpy($3, *($0 + [4]), $1)
	*($0 + [4]) = (*($0 + [4]) + $1)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $237 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL _Znwj(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($2)
	*($3 + [8]) = $4
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$5) != (int_32)[0]), [10702])
	CALL $246(($3 + [8]))
	CALL $247($1, $5)
	$4 = *($3 + [8])
	CALL eosio_assert(((int_32)*($2 + [4]) != (int_32)[0]), [10663])
	*($0) = $4
	$global$0 = ($3 + [16])
}

void .FUNC $119 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [28]) = [6]
	*($1 + [24]) = [10998]
	*($1 + [8]) = *($1 + [24])
	if ( (CALL $209($0, ($1 + [8])) == 0) ){ goto $label$4 }
	*($1 + [16]) = [11005]
	*($1 + [20]) = [1]
	*($1) = *($1 + [16])
	CALL eosio_assert(CALL $210($0, $1, [6]), [10962])
	*($0 + [16]) = [7]
	*($0) = [-861475615]
	$2 = *($0 + [4])
	if ( ($2 & [1]) ){ goto $label$3 }
	$2 = uint_32($2 >> [1])
	goto $label$2 
	
.LABEL $label$4
	*($0) = [12594658]
	goto $label$1 
	
.LABEL $label$3
	$2 = *(($0 + [8]))
	
.LABEL $label$2
	*(($0 + [16])) = ( $2 ? [7] : ($2 <= [7]) )
	
.LABEL $label$1
	$global$0 = ($1 + [32])
}

int_32 .FUNC $29 (int_32 $0)
{
	int_64 $1
	int_64 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	$0 = [0]
	
.LOOP $label$2:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $2
	$3 = $0
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$1 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $4 ){ goto $label$5 }
	
.LABEL $label$3
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$2 }
	return [1]
	
.LABEL $label$1
	return [0]
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = ($global$0 - [368])
	$global$0 = $6
	$7 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	*($6 + [208]) = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$7 = CALL $29(($6 + [208]))
	
.LABEL $label$1
	CALL eosio_assert($7, [8825])
	$8 = (int_64)0
	if ( ((int_64)*($0) == (int_64)$2) ){ goto $label$2 }
	if ( ((int_64)CALL $22($0) == (int_64)$2) ){ goto $label$2 }
	$8 = CALL $23($0)
	
.LABEL $label$2
	if ( ($5 == 0) ){ goto $label$4 }
	$0 = CALL has_auth($2)
	*((($6 + [144]) + [16])) = *(($3 + [16]))
	*((($6 + [144]) + [8])) = *(($3 + [8]))
	*((($6 + [128]) + [8])) = *(($4 + [8]))
	*($6 + [144]) = *($3)
	*($6 + [128]) = *($4)
	$3 = [0]
	
.LOOP $label$5:
	*(($4 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$5 }
	*(($3 = (($6 + [168]) + [16]))) = *((($6 + [144]) + [16]))
	*(($4 = (($6 + [168]) + [8]))) = *((($6 + [144]) + [8]))
	*($6 + [168]) = *($6 + [144])
	*(($7 = (($6 + [288]) + [8]))) = *($4)
	*(($4 = (($6 + [288]) + [16]))) = *($3)
	*($6 + [320]) = (int_64)3617214756542218240
	*($6 + [312]) = $1
	*($6 + [288]) = *($6 + [168])
	$3 = CALL $261(($6 + [272]), ($6 + [128]))
	*((($6 + [32]) + [8])) = *($6 + [320])
	*((($6 + [8]) + [8])) = *($7)
	*((($6 + [8]) + [16])) = *($4)
	*($6 + [32]) = *($6 + [312])
	*($6 + [8]) = *($6 + [288])
	CALL $31(($6 + [328]), $8, ($6 + [32]), $1, $2, ($6 + [8]), $3)
	$2 = ( $2 ? $1 : $0 )
	if ( ((*($6 + [272]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$6
	$1 = CALL current_time()
	*(($6 + [236])) = (int_64)0
	*(($6 + [252])) = (int_64)0
	*(($6 + [260])) = (int_64)0
	*($6 + [220]) = [0]
	*($6 + [224]) = [0]
	*($6 + [228 align=4]) = (int_64)0
	*($6 + [244 align=4]) = (int_64)0
	*($6 + [208]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	$3 = ($6 + [244])
	CALL $32($3, ($6 + [328]))
	*($6 + [200]) = $2
	*($6 + [192]) = (int_64)5374672172227614672
	CALL $13(($6 + [208]), ($6 + [192]), $2, [1])
	CALL $7(($6 + [256]))
	CALL $8($3)
	CALL $8(($6 + [232]))
	$3 = *($6 + [356])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($6 + [360])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$3 = *($6 + [344])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($6 + [348])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	if ( ((*($6 + [128]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($6 + [136]))
	goto $label$3 
	
.LABEL $label$4
	*((($6 + [104]) + [16])) = *(($3 + [16]))
	*((($6 + [104]) + [8])) = *(($3 + [8]))
	*((($6 + [88]) + [8])) = *(($4 + [8]))
	*($6 + [104]) = *($3)
	*($6 + [88]) = *($4)
	$3 = [0]
	
.LOOP $label$9:
	*(($4 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$9 }
	*(($3 = (($6 + [288]) + [16]))) = *((($6 + [104]) + [16]))
	*(($4 = (($6 + [288]) + [8]))) = *((($6 + [104]) + [8]))
	*($6 + [288]) = *($6 + [104])
	*(($0 = (($6 + [328]) + [8]))) = *($4)
	*(($4 = (($6 + [328]) + [16]))) = *($3)
	*($6 + [176]) = (int_64)3617214756542218240
	*($6 + [168]) = $1
	*($6 + [328]) = *($6 + [288])
	$3 = CALL $261(($6 + [312]), ($6 + [88]))
	*((($6 + [72]) + [8])) = *($6 + [176])
	*((($6 + [48]) + [8])) = *($0)
	*((($6 + [48]) + [16])) = *($4)
	*($6 + [72]) = *($6 + [168])
	*($6 + [48]) = *($6 + [328])
	CALL $31(($6 + [208]), $8, ($6 + [72]), $1, $2, ($6 + [48]), $3)
	if ( ((*($6 + [312]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$10
	CALL $33(($6 + [208]))
	$3 = *($6 + [236])
	if ( ($3 == 0) ){ goto $label$11 }
	*(($6 + [240])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$3 = *($6 + [224])
	if ( ($3 == 0) ){ goto $label$12 }
	*(($6 + [228])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$12
	if ( ((*($6 + [88]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($6 + [96]))
	
.LABEL $label$3
	$global$0 = ($6 + [368])
}

int_32 .FUNC $235 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9573])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9573])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9573])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [16]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $278 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $21 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth2(*($0), (int_64)-6402241254016417792)
	if ( (int_64)($1 == 0) ){ goto $label$2 }
	$3 = CALL is_account($1)
	goto $label$1 
	
.LABEL $label$2
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [8388])
	*(($2 + [64])) = [0]
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	$4 = *($0)
	*($2 + [32]) = $4
	*($2 + [40]) = $4
	CALL $15(($2 + [72]), ($2 + [32]), (int_64)-4157503053760561152)
	CALL eosio_assert(((int_32)*($2 + [76]) != (int_32)[0]), [11007])
	$3 = *($2 + [76])
	*(($5 = (($2 + [8]) + [8]))) = *(($3 + [8]))
	*((($2 + [8]) + [16])) = *(($3 + [16]))
	*($2 + [8]) = *($3)
	*($5) = $1
	CALL $16(($2 + [32]), ($2 + [8]), *($0))
	CALL $17(($2 + [56]))
	$global$0 = ($2 + [80])
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth2(*($0), (int_64)-6402241254016417792)
	CALL eosio_assert(CALL $fimport$3($1), [8192])
	*(($2 + [64])) = [0]
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	$3 = *($0)
	*($2 + [32]) = $3
	*($2 + [40]) = $3
	CALL $15(($2 + [72]), ($2 + [32]), (int_64)-4157503053760561152)
	CALL eosio_assert(((int_32)*($2 + [76]) != (int_32)[0]), [11007])
	$4 = *($2 + [76])
	*((($2 + [8]) + [8])) = *(($4 + [8]))
	*((($2 + [8]) + [16])) = *(($4 + [16]))
	*($2 + [8]) = *($4)
	*($2 + [8]) = $1
	CALL $16(($2 + [32]), ($2 + [8]), *($0))
	CALL $17(($2 + [56]))
	$global$0 = ($2 + [80])
}

int_64 .FUNC $23 (int_32 $0)
{
	int_32 $1
	int_64 $2
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	*($1 + [24]) = (int_64)0
	$2 = *($0)
	*($1) = $2
	*($1 + [8]) = $2
	CALL $15(($1 + [40]), $1, (int_64)-4157503053760561152)
	CALL eosio_assert(((int_32)*($1 + [44]) != (int_32)[0]), [11007])
	$2 = *(*($1 + [44]) + [8])
	CALL $17(($1 + [24]))
	$global$0 = ($1 + [48])
	return $2
}

int_64 .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_64 $2
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	*($1 + [24]) = (int_64)0
	$2 = *($0)
	*($1) = $2
	*($1 + [8]) = $2
	CALL $15(($1 + [40]), $1, (int_64)-4157503053760561152)
	CALL eosio_assert(((int_32)*($1 + [44]) != (int_32)[0]), [11007])
	$2 = *(*($1 + [44]))
	CALL $17(($1 + [24]))
	$global$0 = ($1 + [48])
	return $2
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	CALL eosio_assert(CALL $29(($3 + [8])), [9410])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*($1)), $2)
	$2 = [0]
	if ( ((uint_64)((int_64)*($0) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	*($3 + [8]) = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)
	$2 = CALL $29(($3 + [8]))
	
.LABEL $label$1
	CALL eosio_assert($2, [9430])
	$global$0 = ($3 + [16])
}

void .FUNC $24 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$5 = ($global$0 - [64])
	$global$0 = $5
	CALL require_auth($1)
	CALL eosio_assert(((int_64)*($0) != (int_64)$1), [8434])
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$6 = (($3 == 0) | ((int_32)$3 > (int_32)[59]))
	goto $label$1 
	
.LABEL $label$2
	$6 = [1]
	
.LABEL $label$1
	CALL eosio_assert($6, [8463])
	CALL eosio_assert((((int_32)$3 != (int_32)[0]) | $4), [8476])
	CALL $25($2, [8520], [8528])
	$7 = *($2)
	CALL eosio_assert(((int_64)$7 > (int_64)0), [8554])
	CALL $26(($5 + [24]), $3)
	*($5 + [28]) = (((int_32)*($5 + [24]) > (int_32)[-1]) & $4)
	CALL $27(($5 + [48]), ($5 + [24]))
	$8 = *($0)
	$9 = *($2 + [8])
	CALL eosio_assert(((int_64)$9 == (int_64)1397703940), [9492])
	*((($5 + [8]) + [8])) = *((($5 + [48]) + [8]))
	*($5 + [32]) = $9
	*($5 + [24]) = $7
	*($5 + [40]) = (int_64)6138663591592764928
	*($5 + [8]) = *($5 + [48])
	$3 = [0]
	
.LOOP $label$3:
	*((($5 + [48]) + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$3 }
	CALL $28($0, $1, $8, ($5 + [24]), ($5 + [8]), [1])
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($5 + [16]))
	
.LABEL $label$4
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($5 + [56]))
	
.LABEL $label$5
	$global$0 = ($5 + [64])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	*($0) = [0]
	$3 = *($1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	CALL $30($2, $3)
	$3 = *($2)
	$4 = ($3 & [1])
	CALL $265($0, ( *($2 + [8]) ? ($2 | [1]) : $4 ), ( *($2 + [4]) ? uint_32($3 >> [1]) : $4 ))
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$2
	if ( (*($1 + [4]) == 0) ){ goto $label$1 }
	CALL $265($0, [9482], [1])
	CALL $265($0, [9484], [7])
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$2 = (($1 == 0) | ((int_32)$1 > (int_32)[59]))
	goto $label$1 
	
.LABEL $label$2
	$2 = [1]
	
.LABEL $label$1
	CALL eosio_assert($2, [9448])
	$2 = ((int_32)$1 > (int_32)[-1])
	*($0) = ( $1 ? [-1] : $2 )
	*($0 + [4]) = ($2 & ((int_32)*($0 + [4]) != (int_32)[0]))
}

void .FUNC $232 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [10122])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	CALL $179(*($1), (*($0) + [4]))
}

int_32 .FUNC $280 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $271())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $281($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $101 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [240])
	$global$0 = $3
	*(($4 = $3) + [184]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $282($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($6 = (($4 + [144]) + [24]))) = (int_64)0
	*(($3 = (($4 + [144]) + [16]))) = (int_64)0
	*($6) = [0]
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [136]) = ($2 + $5)
	*($4 + [128]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[15]), [9573])
	CALL memcpy(($4 + [144]), $2, [16])
	*($4 + [132]) = ($2 + [16])
	CALL $111(($4 + [128]), $3)
	*(($6 = ($4 + [8]))) = *($4 + [136])
	*($4) = *($4 + [128])
	$6 = *($6)
	*((($4 + [192]) + [8])) = $6
	*(($7 = (($4 + [208]) + [8]))) = $6
	$8 = *($4)
	*($4 + [208]) = $8
	*($4 + [192]) = $8
	$6 = *($7)
	*((($4 + [224]) + [8])) = $6
	*((($4 + [16]) + [24])) = $6
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [208])
	*($4 + [32]) = $1
	*($4 + [224]) = $1
	*(($4 + [56])) = (int_64)6138663591592764928
	*(($4 + [64])) = (int_64)-1
	*(($6 = ($4 + [72]))) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = (int_64)-5069476200169789136
	*(($4 + [104])) = (int_64)-1
	*(($7 = ($4 + [112]))) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [124])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [228]) = ($4 + [184])
	*($4 + [224]) = ($4 + [16])
	CALL $112(($4 + [224]), ($4 + [144]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $285($2)
	
.LABEL $label$4
	CALL $104($7)
	CALL $104($6)
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [164])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [240])
	return [1]
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($1)
	$4 = *(($1 + [8]))
	$5 = CALL $37($0, $4)
	if ( ($5 == 0) ){ goto $label$3 }
	*($2 + [8]) = $4
	CALL $41(($2 + [72]), $5, ($2 + [8]))
	$4 = *(*($2 + [76]) + [32])
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)$3 == (int_64)4931243290507870208) ){ goto $label$4 }
	if ( ((int_64)$3 != (int_64)5374672172227614672) ){ goto $label$1 }
	
.LABEL $label$4
	$4 = ( $4 ? *($0) : ((int_64)$3 == (int_64)5374672172227614672) )
	
.LABEL $label$2
	if ( CALL has_auth($4) ){ goto $label$5 }
	$4 = *($0)
	
.LABEL $label$5
	$0 = *($1 + [16])
	CALL $113(($2 + [8]), $0, (*(($1 + [20])) - $0))
	*($2 + [28]) = [5]
	CALL $13(($2 + [8]), $1, $4, [1])
	CALL $7(($2 + [56]))
	CALL $8(($2 + [44]))
	CALL $8(($2 + [32]))
	
.LABEL $label$1
	$global$0 = ($2 + [80])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $261(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $261(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$2
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$3
	$global$0 = ($2 + [96])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9573])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9573])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $151(*($1), ($0 + [16]))
	CALL $137(*($1), ($0 + [32]))
}

void .FUNC $105 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = *($2 + [8])
	if ( ((int_64)$5 == (int_64)1397703940) ){ goto $label$2 }
	if ( ((int_64)$5 != (int_64)1296126464) ){ goto $label$1 }
	
.LABEL $label$2
	*((($4 + [40]) + [8])) = *(($3 + [8]))
	*($4 + [40]) = *($3)
	$6 = [0]
	
.LOOP $label$3:
	*(($3 + $6)) = [0]
	$6 = ($6 + [4])
	if ( ((int_32)$6 != (int_32)[12]) ){ goto $label$3 }
	$6 = CALL $114(($4 + [56]), ($4 + [40]))
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($4 + [48]))
	
.LABEL $label$4
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)[-861475615]) ){ goto $label$7 }
	if ( ((int_32)$3 != (int_32)[12594658]) ){ goto $label$6 }
	$3 = ($6 + [4])
	CALL $115($4, $3, ($6 + [16]))
	CALL $81($0, $4, $1, $2)
	goto $label$5 
	
.LABEL $label$7
	$3 = ($6 + [4])
	CALL $116($4, $3, ($6 + [16]))
	CALL $88($0, $4, $1, $2)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($6 + [4])
	
.LABEL $label$5
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($6 + [12])))
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

int_32 .FUNC $104 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($2)
	
.LABEL $label$1
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9573])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9573])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $151(*($1), ($4 + [16]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9573])
	CALL memcpy(($4 + [32]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [9573])
	CALL memcpy(($2 + [15]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	*($4 + [36]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [32]) = [0]
	*($0) = [0]
	CALL $117(($2 + [24]), $1, (int_64)0)
	$3 = *($2 + [28])
	if ( ($3 == 0) ){ goto $label$1 }
	*($0) = *($3)
	*($0 + [8]) = *($3 + [8])
	CALL $261(($0 + [16]), ($3 + [16]))
	*(($0 + [32])) = [1]
	*($2 + [16]) = *($2 + [24])
	*($2) = *($2 + [16])
	CALL $118(($2 + [8]), $1, $2)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9573])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $137(*($1), (*($0) + [8]))
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*(($3 = ($2 + [8]))) = *(($1 + [24]))
	*($2) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = *($1 + [32])
	$7 = *($1 + [36])
	*((($2 + [16]) + [8])) = *($3)
	*($2 + [16]) = *($2)
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 $5), (int_64 $4), (int_64 ($2 + [16])), (int_32 $6), (int_32 ((int_32)($7 & [255]) != (int_32)[0])), (int_32 $1))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $212 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $204($0, ($1 + [20]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9573])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [9573])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9573])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $204($0, ($1 + [12]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9573])
	CALL memcpy(($1 + [16]), *($0 + [4]), [1])
	return *($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $231 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = *($1)
	$2 = *($1 + [4])
	$4 = (CASTING uint_64)(uint_32 int_32(($2 - $3) >> [4]))
	$1 = *($0)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $1
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	$6 = *($3 + [4])
	$5 = *(($3 + [8]))
	$1 = ((($1 + $5) + [2]) - $6)
	$4 = (CASTING uint_64)(uint_32 ($5 - $6))
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$4 }
	$3 = ($3 + [16])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$3 }
	*($0) = $1
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $219 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[268435456]) ){ goto $label$1 }
	$4 = CALL _Znwj(($1 << [4]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ($2 << [4]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ($1 << [4]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = $2
	CALL $41($3, $1, ($3 + [8]))
	CALL eosio_assert(((int_32)*($3 + [4]) != (int_32)[0]), [9530])
	CALL memcpy($0, *($3 + [4]), [48])
	$global$0 = ($3 + [16])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_64 $2
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*($0 + [8])), [10031])
	$2 = (int_64)
	*($0) = $2(*($0) - *($1)))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [10079])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [10101])
	return $0
}

int_32 .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_64 $2
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	*($1 + [24]) = (int_64)0
	$2 = *($0)
	*($1) = $2
	*($1 + [8]) = $2
	CALL $15(($1 + [40]), $1, (int_64)-4157503053760561152)
	CALL eosio_assert(((int_32)*($1 + [44]) != (int_32)[0]), [11007])
	$0 = *(*($1 + [44]) + [16])
	CALL $17(($1 + [24]))
	$global$0 = ($1 + [48])
	return ((int_32)$0 != (int_32)[0])
}

int_32 .FUNC $37 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $1
	$3 = ($0 + [32])
	CALL $41(($2 + [8]), $3, $2)
	if ( *($2 + [12]) ){ goto $label$1 }
	*($2) = $1
	$0 = ($0 + [72])
	CALL $41(($2 + [8]), $0, $2)
	$3 = ( $0 ? [0] : *($2 + [12]) )
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $3
}

void .FUNC $34 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$5 = ($global$0 - [64])
	$global$0 = $5
	CALL require_auth($1)
	CALL eosio_assert(((int_64)*($0) != (int_64)$1), [8585])
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$6 = (($3 == 0) | ((int_32)$3 > (int_32)[59]))
	goto $label$1 
	
.LABEL $label$2
	$6 = [1]
	
.LABEL $label$1
	CALL eosio_assert($6, [8463])
	CALL eosio_assert((((int_32)$3 != (int_32)[0]) | $4), [8615])
	CALL $25($2, [8656], [8664])
	$7 = *($2)
	CALL eosio_assert(((int_64)$7 > (int_64)0), [8690])
	CALL $26(($5 + [24]), $3)
	*($5 + [28]) = (((int_32)*($5 + [24]) > (int_32)[-1]) & $4)
	CALL $27(($5 + [48]), ($5 + [24]))
	$8 = *($0)
	$9 = *($2 + [8])
	CALL eosio_assert(((int_64)$9 == (int_64)1296126464), [9511])
	*((($5 + [8]) + [8])) = *((($5 + [48]) + [8]))
	*($5 + [32]) = $9
	*($5 + [24]) = $7
	*($5 + [40]) = (int_64)-5069476200169789136
	*($5 + [8]) = *($5 + [48])
	$3 = [0]
	
.LOOP $label$3:
	*((($5 + [48]) + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$3 }
	CALL $28($0, $1, $8, ($5 + [24]), ($5 + [8]), [1])
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($5 + [16]))
	
.LABEL $label$4
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($5 + [56]))
	
.LABEL $label$5
	$global$0 = ($5 + [64])
}

void .FUNC $35 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [256])
	$global$0 = $2
	CALL eosio_assert(CALL $36($0), [9379])
	$3 = CALL $37($0, $1)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8721])
	CALL $38(($2 + [192]), $3, $1)
	CALL require_auth(*($2 + [224]))
	*(($4 = (($2 + [160]) + [8]))) = *(($2 + [216]))
	*($2 + [160]) = *($2 + [208])
	*(($5 = (($2 + [240]) + [8]))) = *($4)
	*($2 + [240]) = *($2 + [160])
	$6 = *($5)
	$7 = *($2 + [240])
	$8 = ((int_64)((int_64)$7 + (int_64)999) / (int_64)1000)
	$8 = ( $8 ? (int_64)1 : ((int_64)$8 > (int_64)1) )
	CALL eosio_assert((uint_64)($8 <= (int_64)2305843009213693952), [9911])
	CALL eosio_assert([1], [9935])
	$8 = ((int_64)$8 << (int_64)1)
	$4 = *($2 + [232])
	if ( ($4 == 0) ){ goto $label$2 }
	$8 = ( $8 ? (int_64)0 : ((uint_32)$4 > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) )
	$9 = *($5)
	$7 = *($2 + [240])
	goto $label$1 
	
.LABEL $label$2
	$9 = $6
	
.LABEL $label$1
	$5 = ($2 + [208])
	*($2 + [136]) = $6
	*($2 + [128]) = $8
	CALL eosio_assert(((int_64)$6 == (int_64)$9), [9789])
	if ( ((int_64)$8 <= (int_64)$7) ){ goto $label$4 }
	*((($2 + [128]) + [8])) = *((($2 + [240]) + [8]))
	*($2 + [128]) = *($2 + [240])
	*($2 + [240]) = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	CALL $39(($2 + [240]), ($2 + [128]))
	
.LABEL $label$3
	*(($4 = (($2 + [176]) + [8]))) = *((($2 + [240]) + [8]))
	*($2 + [176]) = *($2 + [240])
	$6 = *((($2 + [128]) + [8]))
	$8 = *($2 + [128])
	*(($5 + [8])) = *($4)
	*($5) = *($2 + [176])
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$5 }
	$7 = *($0)
	$9 = CALL $22($0)
	if ( ((int_64)$6 != (int_64)1397703940) ){ goto $label$7 }
	CALL eosio_assert([1], [9492])
	$10 = (int_64)6138663591592764928
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert(((int_64)$6 == (int_64)1296126464), [9511])
	$10 = (int_64)-5069476200169789136
	
.LABEL $label$6
	*($2 + [136]) = $6
	*($2 + [128]) = $8
	*($2 + [144]) = $10
	$5 = CALL _Znwj([32])
	*($2 + [120]) = $5
	*($2 + [112]) = (int_64)68719476769
	CALL memcpy($5, [8742], [16])
	*($5 + [16]) = [0]
	CALL $28($0, $7, $9, ($2 + [128]), ($2 + [112]), [0])
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($2 + [120])))
	
.LABEL $label$5
	$5 = [0]
	$4 = ($2 + [232])
	$11 = *($4)
	if ( ($11 == 0) ){ goto $label$8 }
	$5 = ((uint_32)$11 <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)))
	
.LABEL $label$8
	*($2 + [236]) = ($5 & *($2 + [236]))
	*($4) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($2 + [136]) = $1
	*($2 + [128]) = (int_64)-6497942740231541079
	CALL cancel_deferred(($2 + [128]))
	CALL memcpy(($2 + [64]), ($2 + [192]), [48])
	$5 = CALL _Znwj([32])
	*($2 + [56]) = $5
	*($2 + [48]) = (int_64)77309411361
	CALL memcpy($5, [8759], [18])
	*($5 + [18]) = [0]
	$2 = CALL memcpy($2, ($2 + [64]), [48])
	CALL $40($0, $3, $2, ($2 + [48]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [56])))
	
.LABEL $label$9
	$global$0 = ($2 + [256])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $3) / (int_32)[40])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$1 }
	$6 = ($0 + [8])
	$7 = [107374182]
	$3 = ((int_32)(*($0 + [8]) - $3) / (int_32)[40])
	if ( ((uint_32)$3 > (uint_32)[53687090]) ){ goto $label$2 }
	$7 = ($3 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	
.LABEL $label$2
	$3 = CALL $142(($2 + [8]), $7, $4, $6)
	$8 = *(($1 + [8]))
	$9 = *($1)
	*(($7 = *($3 + [8])) + [16 align=4]) = (int_64)0
	*($7) = $9
	*(($7 + [8])) = $8
	*(($4 = ($7 + [24]))) = [0]
	*($7 + [16]) = *($1 + [16])
	*(($7 + [20])) = *(($1 + [20]))
	$5 = ($1 + [24])
	*($4) = *($5)
	*($5) = [0]
	*($7 + [28 align=4]) = (int_64)0
	*(($4 = ($7 + [36]))) = [0]
	*($7 + [28 align=4]) = *($1 + [28 align=4])
	*($1 + [16 align=4]) = (int_64)0
	$7 = ($1 + [36])
	*($4) = *($7)
	*($7) = [0]
	*($1 + [28 align=4]) = (int_64)0
	*($3 + [8]) = (*($3 + [8]) + [40])
	CALL $143($0, $3)
	CALL $144($3)
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $268($0)
}

void .FUNC $33 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $170($1, $0)
	$0 = *($1)
	CALL send_inline($0, (*($1 + [4]) - $0))
	$0 = *($1)
	if ( ($0 == 0) ){ goto $label$1 }
	*($1 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = [0]
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$1 }
	$2 = ( [2] ? [1] : ((int_32)$1 == (int_32)[-2147483648]) )
	$1 = ([0] - (uint_32($2 >> [1]) + $1))
	
.LABEL $label$1
	$3 = [1]
	if ( ($1 <= [10]) ){ goto $label$2 }
	$4 = $1
	$3 = [1]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$5 = ((uint_32)$4 > (uint_32)[99])
	$4 = ((uint_32)$4 / (uint_32)[10])
	if ( $5 ){ goto $label$3 }
	
.LABEL $label$2
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = ($3 + ((int_32)$2 != (int_32)[0]))
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($4 << [1])
	$6 = ($0 + [1])
	$3 = $6
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$5 = (($4 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $4
	$6 = ($0 + [1])
	
.LABEL $label$6
	CALL memset($3, [48], $4)
	
.LABEL $label$5
	*(($3 + $4)) = [0]
	$4 = *($0)
	$3 = ($4 & [1])
	$4 = ((( *($0 + [8]) ? $6 : $3 ) + ( *($0 + [4]) ? uint_32($4 >> [1]) : $3 )) + [-1])
	
.LOOP $label$8:
	$3 = ((int_32)$1 / (int_32)[10])
	*($4) = (($1 - ((int_32)$3 * (int_32)[10])) + [48])
	$4 = ($4 + [-1])
	$5 = ((int_32)$1 > (int_32)[9])
	$1 = $3
	if ( $5 ){ goto $label$8 }
	if ( ($2 == 0) ){ goto $label$9 }
	*($4) = [45]
	if ( (($2 & [2]) == 0) ){ goto $label$9 }
	$1 = *($0)
	if ( ($1 & [1]) ){ goto $label$11 }
	$4 = uint_32($1 >> [1])
	$1 = ($6 + $4)
	$4 = (($0 + $4) + [1])
	goto $label$10 
	
.LABEL $label$11
	$1 = (*(($0 + [8])) + *(($0 + [4])))
	$4 = $1
	
.LABEL $label$10
	*(($1 + [-1])) = (*(($4 + [-1])) + [1])
	
.LABEL $label$9
	return (unreachable)
	
.LABEL $label$4
	CALL $260($0)
}

void .FUNC $31 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	$7 = ($global$0 - [64])
	$global$0 = $7
	*($0 + [16]) = (int_64)0
	*($0 + [8]) = (int_64)-3617168760277827584
	*(($0 + [24])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*($0) = *($5 + [16])
	CALL $183(($0 + [16]), $2)
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$4 }
	CALL $184(($7 + [16]), $4, $6)
	if ( (*($6) & [1]) ){ goto $label$3 }
	*($6) = [0]
	goto $label$2 
	
.LABEL $label$4
	$1 = $4
	goto $label$1 
	
.LABEL $label$3
	*(*($6 + [8])) = [0]
	*($6 + [4]) = [0]
	
.LABEL $label$2
	CALL $263($6, [0])
	*(($6 + [8])) = *((($7 + [16]) + [8]))
	*($6) = *($7 + [16])
	$2 = [0]
	
.LOOP $label$5:
	*((($7 + [16]) + $2)) = [0]
	$2 = ($2 + [4])
	if ( ((int_32)$2 != (int_32)[12]) ){ goto $label$5 }
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($7 + [24]))
	
.LABEL $label$1
	*(($7 + [40])) = *(($5 + [8]))
	*(($7 + [56])) = *(($6 + [8]))
	*($7 + [24]) = $1
	*($7 + [16]) = $3
	*($7 + [32]) = *($5)
	*($7 + [48]) = *($6)
	$2 = [0]
	
.LOOP $label$6:
	*(($6 + $2)) = [0]
	$2 = ($2 + [4])
	if ( ((int_32)$2 != (int_32)[12]) ){ goto $label$6 }
	CALL $185($7, ($7 + [16]))
	if ( ((*(($7 + [48])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($7 + [56])))
	
.LABEL $label$7
	$2 = *($0 + [28])
	if ( ($2 == 0) ){ goto $label$8 }
	*(($0 + [32])) = $2
	CALL _ZdlPv($2)
	*(($0 + [36])) = [0]
	*(($0 + [28])) = (int_64)0
	
.LABEL $label$8
	*(($0 + [28])) = *($7)
	*(($0 + [36])) = *($7 + [8])
	$global$0 = ($7 + [64])
}

void .FUNC $215 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [4])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$1 }
	CALL $218($0, ($1 - $4))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$4 <= (uint_32)$1) ){ goto $label$2 }
	$3 = ($3 + ($1 << [4]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	$1 = ($2 + [-16])
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$5 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$2 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	*(($0 + [4])) = $3
	
.LABEL $label$2
}

int_32 .FUNC $214 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [8]) = [0]
	CALL $204($0, ($2 + [8]))
	CALL $215($1, *($2 + [8]))
	$1 = *($1 + [4])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	
.LOOP $label$2:
	*($2 + [16]) = $0
	*($2 + [24]) = $3
	CALL $216(($2 + [24]), ($2 + [16]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $217 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $111(CALL $222($0, ($1 + [16])), ($1 + [28]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9573])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9573])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $216 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [9573])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	CALL $111(*($1), (*($0) + [4]))
}

int_32 .FUNC $211 (int_32 $0, int_32 $1)
{
	CALL $214(CALL $213(CALL $213($0, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	return CALL $212($0, $1)
}

int_32 .FUNC $210 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($0 + [4])
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$0 = (($0 + [4]) + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *(($0 + [8]))
	$0 = *(($0 + [12]))
	
.LABEL $label$1
	*($3 + [28]) = $4
	*($3 + [24]) = $0
	$5 = *($1)
	*($3) = $5
	*($3 + [16]) = $5
	*($3 + [8]) = *($3 + [24])
	$0 = CALL $1(($3 + [8]), $2, $3)
	$global$0 = ($3 + [32])
	return $0
}

void .FUNC $198 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$20()), [10612])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*(($5 + [24])) = [0]
	$3 = [16]
	
.LOOP $label$1:
	*(($5 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[28]) ){ goto $label$1 }
	*($5 + [28]) = $1
	CALL $199(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$6 = *($5 + [32])
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($4 + [32]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $200(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $199 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	*($1 + [8]) = *($5 + [8])
	$6 = ($1 + [16])
	$7 = ($5 + [16])
	$8 = *($0)
	if ( (*($1 + [16]) & [1]) ){ goto $label$2 }
	*($6) = [0]
	goto $label$1 
	
.LABEL $label$2
	*(*(($1 + [24]))) = [0]
	*(($1 + [20])) = [0]
	
.LABEL $label$1
	CALL $263($6, [0])
	*(($6 + [8])) = *(($7 + [8]))
	*($6) = *($7)
	$7 = ($5 + [16])
	$5 = [0]
	
.LOOP $label$3:
	*(($7 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$3 }
	*($1) = *(*($4 + [4]))
	*($3) = [16]
	CALL $189($3, $6)
	$7 = *($3)
	if ( ($7 <= [513]) ){ goto $label$5 }
	$5 = CALL $282($7)
	goto $label$4 
	
.LABEL $label$5
	$5 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$4
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $7)
	CALL $208($3, $1)
	$9 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($8 + [8]), (int_64)-6150061881577247232, *(*($0 + [8])), $9, $5, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $285($5)
	
.LABEL $label$6
	if ( (uint_64)($9 <= *($8 + [16])) ){ goto $label$7 }
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$global$0 = ($3 + [16])
}

void .FUNC $196 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $197 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [32]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10564])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6150061881577247232)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10510])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10510])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $201(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $194 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [10766])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$20()), [10811])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10861])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [52]))
	$6 = *(($1 + [56]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6497942614757605376, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $195 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	CALL $171($0, [16])
	$3 = *($0 + [4])
	$0 = *($0)
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	*($2 + [16]) = $2
	*($2 + [24]) = $1
	CALL $196(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $192 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10564])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6497942614757605376)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10510])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10510])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $148(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $193 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$20()), [10612])
	*(($5 = CALL _Znwj([64])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = $1
	*(($5 = CALL memcpy($5, *($3), [45]))) = *(*($3 + [4]))
	*($4 + [64]) = ($4 + [45])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	CALL $182(($4 + [56]), $5)
	$6 = *($5)
	*($5 + [52]) = CALL db_store_i64(*($1 + [8]), (int_64)-6497942614757605376, $2, $6, $4, [45])
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$6 = *(($1 + [8]))
	$7 = *($5)
	*($4 + [72]) = *($5 + [8])
	*($5 + [56]) = CALL db_idx64_store($6, (int_64)-6497942614757605376, $2, $7, ($4 + [72]))
	*($4 + [56]) = $5
	$2 = *($5)
	*($4) = $2
	$8 = *(($5 + [52]))
	*($4 + [72]) = $8
	$9 = ($1 + [28])
	$3 = *($9)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $2
	*($3 + [16]) = $8
	*($4 + [56]) = [0]
	*($3) = $5
	*($9) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $150(($1 + [24]), ($4 + [56]), $4, ($4 + [72]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $190 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10122])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $175(*($1), ($0 + [16]))
	CALL $191(*($1), ($0 + [32]))
}

int_32 .FUNC $191 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2 + [8]) = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	CALL $181($0, ($2 + [8]))
	$4 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $4 )
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = *($1 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) >= (int_32)$3), [10122])
	CALL memcpy(*($0 + [4]), ( $5 ? ($1 + [1]) : $4 ), $3)
	*($0 + [4]) = (*($0 + [4]) + $3)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $0
}