(data (i32.const 8192) "base symbol is not valid\00")
(data (i32.const 8217) "quote symbol is not valid\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8329) "quote must be positive\00")
(data (i32.const 8352) "volume must be positive\00")
(data (i32.const 8376) "account is not whitelisted\00")
(data (i32.const 8403) "you need to wait 60 seconds\00")
(data (i32.const 8431) "no quote discovered\00")
(data (i32.const 8451) "active\00")
(data (i32.const 8458) "cannot decrement end iterator when the index is empty\00")
(data (i32.const 8512) "cannot decrement iterator at beginning of index\00")
(data (i32.const 8560) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8611) "error reading iterator\00")
(data (i32.const 8634) "get\00")
(data (i32.const 8638) "read\00")
(data (i32.const 8643) "cannot increment end iterator\00")
(data (i32.const 8673) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8722) "invalid symbol name\00")
(data (i32.const 8742) "string is too long to be a valid name\00")
(data (i32.const 8780) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8847) "character is not in allowed character set for names\00")
(data (i32.const 8899) "cannot create objects in table of another contract\00")
(data (i32.const 8950) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9002) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9056) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9104) "write\00")
(data (i32.const 9110) "cannot pass end iterator to erase\00")
(data (i32.const 9144) "object passed to erase is not in multi_index\00")
(data (i32.const 9189) "cannot erase objects in table of another contract\00")
(data (i32.const 9239) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9292) "cannot pass end iterator to modify\00")
(data (i32.const 9327) "object passed to modify is not in multi_index\00")
(data (i32.const 9373) "cannot modify objects in table of another contract\00")
(data (i32.const 9424) "updater cannot change primary key when modifying an object\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "current_time" (func $fimport$2 (result i64)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$6 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$8 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$10 (result i32)))
(import "env" "read_action_data" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "db_idx64_previous" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_idx64_end" (func $fimport$13 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$15 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$17 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$19 (param i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$20 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$21 (param i32)))
(import "env" "send_inline" (func $fimport$22 (param i32 i32)))
(import "env" "abort" (func $fimport$23))
(import "env" "memset" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$26 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $20))
(export "_ZdlPv" (func $41))
(export "_Znwj" (func $39))
(export "_Znaj" (func $40))
(export "_ZdaPv" (func $42))
(export "_ZnwjSt11align_val_t" (func $43))
(export "_ZnajSt11align_val_t" (func $44))
(export "_ZdlPvSt11align_val_t" (func $45))
(export "_ZdaPvSt11align_val_t" (func $46))
(table $0 3 3 anyfunc)
(elem (i32.const 1) $1 $18)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17900))
(global $global$2 i32 (i32.const 17900))


void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8611])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $58($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [44 align=4]) = (int_64)0
	*($5 + [52]) = [0]
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = $0
	CALL $26(($3 + [32]), $5)
	*($5 + [68]) = $1
	*($5 + [72 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $61($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [52])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $58($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9484])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $58($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $52($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8634])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $29($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8638])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $58($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [64]) + [24])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [112]) = [0]
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [160]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $23(($4 + [16]), ($4 + [160]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($6 = (($4 + [144]) + [8]))) = $3
	$7 = *($4)
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [144])
	*($4 + [32]) = $0
	*($4 + [160]) = $0
	*($4 + [44]) = [5436]
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [16])
	CALL $24(($4 + [160]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $61($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [104])))
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)3952310351948677120) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)3626362328917737472) ){ goto $label$1 }
	*($3 + [28]) = [0]
	*($3 + [24]) = [1]
	*($3) = *($3 + [24])
	CALL $21($1, $1, $3)
	goto $label$1 
	
.LABEL $label$2
	*($3 + [20]) = [0]
	*($3 + [16]) = [2]
	*($3 + [8]) = *($3 + [16])
	CALL $22($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $54([0])
	$global$0 = ($3 + [32])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8638])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8638])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8638])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8638])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $27(*($1), ($0 + [32]))
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8638])
	CALL memcpy(($0 + [44]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8638])
	CALL memcpy(($0 + [48]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $22 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $58($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [96]))) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = [0]
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [144]) = ($4 + [64])
	*($4 + [32]) = ($4 + [80])
	CALL $25(($4 + [32]), ($4 + [144]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [72])
	*($4 + [16]) = *($4 + [64])
	$10 = *($9)
	*(($3 = (($4 + [112]) + [8]))) = $10
	*(($9 = (($4 + [128]) + [8]))) = $10
	$11 = *($4 + [16])
	*($4 + [128]) = $11
	*($4 + [112]) = $11
	$10 = *($9)
	*((($4 + [144]) + [8])) = $10
	*(($4 + [56])) = $10
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [128])
	*($4 + [48]) = $0
	*($4 + [144]) = $0
	*($4 + [60]) = [5436]
	*($3) = *($8)
	*($4 + [112]) = *($4 + [88])
	$0 = *($4 + [80])
	$8 = *($4 + [104])
	*($9) = *($3)
	*($4 + [128]) = *($4 + [112])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$1 = *((($4 + [128]) + [8]))
	*((($4 + [144]) + [8])) = $1
	*(($4 + [8])) = $1
	$1 = *($4 + [128])
	*($4) = $1
	*($4 + [144]) = $1
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $61($2)
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8638])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8638])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8638])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8638])
	CALL memcpy(($0 + [24]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = CALL $48(($2 + [16]), ($1 + [32]))
	$7 = *($1 + [48])
	$8 = *($1 + [44])
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($9 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$3 = CALL $48(($2 + [64]), $6)
	*(($2 + [8])) = *($9)
	*($2) = *($2 + [80])
	CALL void $0((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $3), (int_32 $8), (int_32 $7), (int_32 $1))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($6) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $28($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $51($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $51($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $47($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8638])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8638])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($1 + [8]) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8638])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8638])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [8638])
	CALL memcpy(($1 + [36]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [8638])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [8638])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $27($0, ($1 + [44]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8638])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $50($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $56(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9484])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $56(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $61($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $47 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $61($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9496]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9500])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9496]) = [1]
	$2 = ($2 << [16])
	*([0] + [9500]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9500])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9500]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9496]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9496]) = [1]
	$3 = ($3 << [16])
	*([0] + [9500]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9500])
	
.LABEL $label$10
	*([0] + [9500]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [9144])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9189])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9239])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [52])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [44]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [52])))
	
.LABEL $label$13
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [68]))
	$6 = *(($1 + [72]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6224682770514313216, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$6 = *(($1 + [76]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$17 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6224682770514313215, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL db_idx64_remove($6)
	
.LABEL $label$16
	$global$0 = ($2 + [16])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [224])
	$global$0 = $3
	$4 = [0]
	*(($3 + [168])) = [0]
	*($3 + [152]) = (int_64)-1
	*($3 + [160]) = (int_64)0
	*($3 + [172]) = [0]
	*($3 + [136]) = *($0)
	$5 = (uint_64)$1 >> (uint_64)(int_64)8
	*($3 + [144]) = $5)
	*($3 + [128]) = ($3 + [136])
	*($3 + [64]) = (int_64)0
	CALL $11(($3 + [120]), ($3 + [128]), ($3 + [64]))
	*($3 + [116]) = [0]
	*($3 + [112]) = ($3 + [128])
	*($3 + [64]) = (int_64)0
	CALL $11(($3 + [104]), ($3 + [128]), ($3 + [64]))
	$6 = *($3 + [104])
	*($3 + [64]) = $6
	if ( (uint_64)($6 <= (int_64)4294967296) ){ goto $label$1 }
	$4 = [0]
	
.LOOP $label$2:
	$4 = ($4 + [1])
	CALL $12(($3 + [64]))
	if ( *($3 + [68]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$4 != (int_32)*($0 + [29])) ){ goto $label$3 }
	CALL $12(($3 + [120]))
	CALL $12(($3 + [120]))
	CALL $12(($3 + [120]))
	CALL $12(($3 + [120]))
	CALL $13(($3 + [112]))
	CALL $13(($3 + [112]))
	CALL $13(($3 + [112]))
	CALL $13(($3 + [112]))
	
.LABEL $label$3
	$6 = (int_64)0
	$7 = (int_64)0
	$4 = *($3 + [124])
	if ( ((int_32)$4 == (int_32)*($3 + [116])) ){ goto $label$4 }
	$7 = (int_64)0
	$6 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)((int_64)*(($4 + [24])) ^ (int_64)$2) > (uint_64)(int_64)255) ){ goto $label$6 }
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)*($4 + [16]) + (int_64)$7)
	
.LABEL $label$6
	CALL $12(($3 + [120]))
	$4 = *($3 + [124])
	if ( ((int_32)$4 != (int_32)*($3 + [116])) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert((((int_64)$6 != (int_64)0) & ((int_64)$7 != (int_64)0)), [8431])
	$8 = ((uint_64)$7 / (uint_64)$6)
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8673])
	$4 = [0]
	$9 = (uint_64)$2 >> (uint_64)(int_64)8
	$6 = $9)
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $7
	$10 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$10 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $10 ){ goto $label$11 }
	$10 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	
.LABEL $label$7
	CALL eosio_assert($10, [8722])
	$4 = [0]
	*(($3 + [96])) = [0]
	*($3 + [80]) = (int_64)-1
	*($3 + [88]) = (int_64)0
	$6 = *($0)
	*($3 + [64]) = $6
	*($3 + [72]) = $5
	$10 = CALL db_find_i64($6, $5, (int_64)5093418686634766208, $9)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$4 = CALL $14(($3 + [64]), $10)
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)($3 + [64])), [8560])
	
.LABEL $label$12
	$10 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	if ( ($4 == 0) ){ goto $label$14 }
	CALL eosio_assert([1], [9292])
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)($3 + [64])), [9327])
	CALL eosio_assert(((int_64)*($3 + [64]) == (int_64)CALL $fimport$3()), [9373])
	*($4) = $1
	*($4 + [8]) = $8
	*($4 + [24]) = $10
	$11 = ($4 + [16])
	$6 = *($11)
	*($11) = $2
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$6) == (int_64)$9), [9424])
	*($3 + [48]) = *($4)
	CALL eosio_assert([1], [9104])
	CALL memcpy(($3 + [176]), ($3 + [48]), [8])
	CALL eosio_assert([1], [9104])
	CALL memcpy((($3 + [176]) | [8]), ($4 + [8]), [8])
	*($3 + [48]) = *($11)
	CALL eosio_assert([1], [9104])
	CALL memcpy((($3 + [176]) + [16]), ($3 + [48]), [8])
	CALL eosio_assert([1], [9104])
	CALL memcpy((($3 + [176]) + [24]), ($4 + [24]), [4])
	CALL db_update_i64(*($4 + [32]), (int_64)0, ($3 + [176]), [28])
	$4 = (($3 + [64]) + [16])
	if ( (uint_64)($6 <= *($4)) ){ goto $label$13 }
	*($4) = ((int_64)$6 + (int_64)1)
	goto $label$13 
	
.LABEL $label$14
	$7 = *($0)
	CALL eosio_assert(((int_64)*($3 + [64]) == (int_64)CALL $fimport$3()), [8899])
	$4 = CALL _Znwj([40])
	CALL current_time()
	*($4 + [28]) = ($3 + [64])
	*($4 + [8]) = $8
	*($4) = $1
	*($4 + [16]) = $2
	*($4 + [24]) = $10
	*($3 + [48]) = $1
	CALL eosio_assert([1], [9104])
	CALL memcpy(($3 + [176]), ($3 + [48]), [8])
	CALL eosio_assert([1], [9104])
	CALL memcpy((($3 + [176]) | [8]), ($4 + [8]), [8])
	*($3 + [48]) = *($4 + [16])
	CALL eosio_assert([1], [9104])
	CALL memcpy((($3 + [176]) + [16]), ($3 + [48]), [8])
	CALL eosio_assert([1], [9104])
	CALL memcpy((($3 + [176]) + [24]), ($4 + [24]), [4])
	$6 = (uint_64)*($4 + [16]) >> (uint_64)(int_64)8
	$12 = CALL db_store_i64(*((($3 + [64]) + [8])), (int_64)5093418686634766208, $7, $6), ($3 + [176]), [28]
	*($4 + [32]) = $12)
	$11 = (($3 + [64]) + [16])
	if ( (uint_64)($6 <= *($11)) ){ goto $label$15 }
	*($11) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$15
	*($3 + [48]) = $4
	$6 = (uint_64)*(($4 + [16])) >> (uint_64)(int_64)8
	*($3 + [176]) = $6)
	*($3 + [208]) = $12
	$11 = *((($3 + [64]) + [28]))
	if ( ((uint_32)$11 >= (uint_32)*(($3 + [96]))) ){ goto $label$17 }
	*($11 + [8]) = $6
	*($11 + [16]) = $12
	*($3 + [48]) = [0]
	*($11) = $4
	*(($3 + [92])) = ($11 + [24])
	$4 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( $4 ){ goto $label$16 }
	goto $label$13 
	
.LABEL $label$17
	CALL $15(($3 + [88]), ($3 + [48]), ($3 + [176]), ($3 + [208]))
	$4 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	
.LABEL $label$16
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$6 = *($0)
	*($3 + [48]) = [8451]
	*($3 + [52]) = CALL $55([8451])
	*($3 + [40]) = *($3 + [48])
	*($3 + [56]) = *(CALL $16(($3 + [176]), ($3 + [40])))
	*($3 + [48]) = $6
	*((($4 = CALL _Znwj([16])) + [8])) = *($3 + [56])
	*($4) = *($3 + [48])
	*((($3 + [176]) + [16])) = $2
	*((($3 + [8]) + [8])) = $8
	*((($3 + [8]) + [16])) = $2
	*($3 + [200]) = $10
	*(($3 + [32])) = *($3 + [200])
	$10 = ($4 + [16])
	*($3 + [212]) = $10
	*($3 + [208]) = $4
	*($3 + [216]) = $10
	*($3 + [176]) = $1
	*($3 + [184]) = $8
	*($3 + [8]) = $1
	CALL $17($6, (int_64)3952310351948677120, ($3 + [208]), ($3 + [8]))
	$4 = *($3 + [208])
	if ( ($4 == 0) ){ goto $label$18 }
	*($3 + [212]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$18
	$11 = *($3 + [88])
	if ( ($11 == 0) ){ goto $label$19 }
	$0 = ($3 + [92])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$21 }
	
.LOOP $label$22:
	$4 = ($4 + [-24])
	$10 = *($4)
	*($4) = [0]
	if ( ($10 == 0) ){ goto $label$23 }
	CALL _ZdlPv($10)
	
.LABEL $label$23
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$22 }
	$4 = *(($3 + [88]))
	goto $label$20 
	
.LABEL $label$21
	$4 = $11
	
.LABEL $label$20
	*($0) = $11
	CALL _ZdlPv($4)
	
.LABEL $label$19
	$11 = *($3 + [160])
	if ( ($11 == 0) ){ goto $label$24 }
	$0 = ($3 + [164])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$26 }
	
.LOOP $label$27:
	$4 = ($4 + [-24])
	$10 = *($4)
	*($4) = [0]
	if ( ($10 == 0) ){ goto $label$28 }
	if ( ((*($10 + [44]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($10 + [52])))
	
.LABEL $label$29
	CALL _ZdlPv($10)
	
.LABEL $label$28
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$27 }
	$4 = *(($3 + [160]))
	goto $label$25 
	
.LABEL $label$26
	$4 = $11
	
.LABEL $label$25
	*($0) = $11
	CALL _ZdlPv($4)
	
.LABEL $label$24
	$global$0 = ($3 + [224])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $52($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [52])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [8643])
	$2 = *($0 + [4])
	$3 = *($2 + [72])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-6224682770514313216, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [72]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [8560])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $19($6, CALL $fimport$4(*($6), *($6 + [8]), (int_64)-6224682770514313216, $5))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [8560])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [72])) = $4
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = (int_64)0
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$3 = *($2 + [72])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$3 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-6224682770514313216, $1, *($2))
	*(*(($0 + [4])) + [72]) = $3
	
.LABEL $label$3
	$4 = CALL db_idx64_previous($3, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8512])
	goto $label$1 
	
.LABEL $label$2
	$2 = *(*($0))
	$2 = CALL db_idx64_end(*($2), *($2 + [8]), (int_64)-6224682770514313216)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8458])
	$4 = CALL db_idx64_previous($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8458])
	
.LABEL $label$1
	$5 = *($1 + [8])
	$3 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$7:
	$2 = ($3 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$6 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [8560])
	goto $label$4 
	
.LABEL $label$5
	$8 = CALL $19($6, CALL $fimport$4(*($6), *($6 + [8]), (int_64)-6224682770514313216, $5))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [8560])
	
.LABEL $label$4
	*(($0 + [4])) = $8
	*(($8 + [72])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-6224682770514313216, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $19($6, $8)
	*($3 + [12]) = [0]
	*($3 + [8]) = $6
	$7 = *(*(CALL $31(($3 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [8950])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	$6 = *($5 + [8])
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [16]) = *($6)
	*($1 + [32]) = *(*($5 + [12]))
	*($1 + [36]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [56]) = *(*($5 + [20]))
	*($1 + [40]) = *(*($5 + [16]))
	CALL $49(($1 + [44]), *($5 + [24]))
	$5 = *($1 + [44])
	$6 = ( *(($1 + [48])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [52])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ($5 <= [513]) ){ goto $label$5 }
	$6 = CALL $58($5)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $5)
	CALL $32(($3 + [8]), $1)
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-6224682770514313216, *(*($0 + [8])), $7, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $61($6)
	
.LABEL $label$6
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$7 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$5 = ($4 + [8])
	$7 = *($5)
	$6 = *(($0 + [8]))
	$9 = *($6)
	$10 = *($1)
	*($3 + [24]) = *(($1 + [36]))
	*($1 + [72]) = CALL db_idx64_store($7, (int_64)-6224682770514313216, $9, $10, ($3 + [24]))
	$7 = *($6)
	$9 = *($5)
	$10 = *($1)
	*($3 + [24]) = *($1 + [16])
	*(($1 + [76])) = CALL db_idx64_store($9, (int_64)-6224682770514313215, $7, $10, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $2 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [8]) == (int_32)$0), [8560])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-8380745907745849344, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $10($0, $4)
	CALL eosio_assert(((int_32)*($5 + [8]) == (int_32)$0), [8560])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6224682770514313216, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [8560])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $19($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)-6224682770514313216, $6))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [8560])
	
.LABEL $label$2
	*(($4 + [72])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$7 = ($global$0 - [192])
	$global$0 = $7
	*($7 + [144]) = $1
	*($7 + [132]) = $5
	*($7 + [128]) = $6
	*($7 + [136]) = $2
	CALL require_auth($1)
	$6 = [0]
	$8 = (uint_64)$2 >> (uint_64)(int_64)8
	$2 = $8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $9
	$5 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [8192])
	$5 = [0]
	$11 = *($3)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $9
	$5 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $5 ){ goto $label$10 }
	$5 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [8217])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [8329])
	CALL eosio_assert([1], [8352])
	CALL eosio_assert([1], [8329])
	*(($12 = ($7 + [120]))) = [0]
	*($7 + [88]) = (int_64)-7309438284152285936
	*($7 + [104]) = (int_64)-1
	*($7 + [112]) = (int_64)0
	*($7 + [96]) = *($0)
	CALL $2(($7 + [88]), $1, [8376])
	$10 = *($7 + [112])
	if ( ($10 == 0) ){ goto $label$11 }
	$13 = ($7 + [116])
	$6 = *($13)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$13 }
	
.LOOP $label$14:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL _ZdlPv($5)
	
.LABEL $label$15
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$14 }
	$6 = *(($7 + [112]))
	goto $label$12 
	
.LABEL $label$13
	$6 = $10
	
.LABEL $label$12
	*($13) = $10
	CALL _ZdlPv($6)
	$8 = (uint_64)*($7 + [136]) >> (uint_64)(int_64)8)
	
.LABEL $label$11
	*($12) = [0]
	*($7 + [96]) = $8
	*($7 + [104]) = (int_64)-1
	*($7 + [112]) = (int_64)0
	*($7 + [124]) = [0]
	*($7 + [88]) = *($0)
	*($7 + [80]) = ($7 + [88])
	*(($7 + [64])) = [0]
	*(($5 = ($7 + [72]))) = [0]
	*($7 + [60]) = ($7 + [80])
	*($7 + [68]) = ($7 + [80])
	*($7 + [24]) = (int_64)0
	CALL $3(($7 + [160]), ($7 + [80]), ($7 + [24]))
	if ( (*($7 + [164]) == 0) ){ goto $label$16 }
	$6 = ($7 + [68])
	$10 = ($0 + [28])
	
.LOOP $label$17:
	*($7 + [24]) = *($6)
	if ( ((uint_32)*(*(CALL $4(($7 + [24])) + [4]) + [36]) <= (uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$2() / (uint_64)(int_64)1000000)) - *($10))) ){ goto $label$16 }
	*($7 + [24]) = *($6)
	if ( ((int_64)*(*(CALL $4(($7 + [24])) + [4]) + [56]) != (int_64)*($7 + [144])) ){ goto $label$18 }
	CALL eosio_assert([0], [8403])
	
.LABEL $label$18
	CALL $4($6)
	*($7 + [24]) = (int_64)0
	CALL $3(($7 + [160]), ($7 + [80]), ($7 + [24]))
	if ( ((int_32)*($5) != (int_32)*($7 + [164])) ){ goto $label$17 }
	
.LABEL $label$16
	$2 = *($7 + [144])
	*($7 + [32]) = $3
	*($7 + [48]) = $4
	*($7 + [28]) = ($7 + [136])
	*($7 + [24]) = ($7 + [88])
	*($7 + [36]) = ($7 + [128])
	*($7 + [40]) = ($7 + [132])
	*($7 + [44]) = ($7 + [144])
	*($7 + [184]) = $2
	CALL eosio_assert(((int_64)*($7 + [88]) == (int_64)CALL $fimport$3()), [8899])
	*($7 + [164]) = ($7 + [24])
	*($7 + [160]) = ($7 + [88])
	*($7 + [168]) = ($7 + [184])
	*(($6 = CALL _Znwj([80])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [44 align=4]) = (int_64)0
	*($6 + [52]) = [0]
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = ($7 + [88])
	CALL $5(($7 + [160]), $6)
	*($7 + [176]) = $6
	$2 = *($6)
	*($7 + [160]) = $2
	$10 = *($6 + [68])
	*($7 + [156]) = $10
	$4 = ($7 + [116])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($7 + [120]))) ){ goto $label$21 }
	*($5 + [8]) = $2
	*($5 + [16]) = $10
	*($7 + [176]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$5 = *($7 + [176])
	$6 = [0]
	*($7 + [176]) = [0]
	if ( ($5 == 0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	CALL $6(($7 + [112]), ($7 + [176]), ($7 + [160]), ($7 + [156]))
	$5 = *($7 + [176])
	$6 = [0]
	*($7 + [176]) = [0]
	if ( ($5 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	if ( ((*($5 + [44]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($5 + [52])))
	
.LABEL $label$22
	CALL _ZdlPv($5)
	
.LABEL $label$19
	*($7 + [24]) = (int_64)0
	CALL $3(($7 + [16]), ($7 + [80]), ($7 + [24]))
	$2 = *($7 + [16])
	*($7 + [24]) = $2
	if ( (uint_64)($2 <= (int_64)4294967296) ){ goto $label$23 }
	$6 = [0]
	
.LOOP $label$24:
	$6 = ($6 + [1])
	CALL $7(($7 + [24]))
	if ( *($7 + [28]) ){ goto $label$24 }
	
.LABEL $label$23
	if ( ((int_32)$6 < (int_32)*($0 + [29])) ){ goto $label$25 }
	*($7 + [24]) = (int_64)0
	CALL $3(($7 + [8]), ($7 + [80]), ($7 + [24]))
	$2 = *($7 + [8])
	*($7 + [24]) = $2
	$6 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [9110])
	CALL $7(($7 + [24]))
	CALL $8(*($7 + [80]), $6)
	
.LABEL $label$25
	CALL $9($0, *($7 + [136]), *($3 + [8]))
	$10 = *($7 + [112])
	if ( ($10 == 0) ){ goto $label$26 }
	$0 = ($7 + [116])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$28 }
	
.LOOP $label$29:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$30 }
	if ( ((*($5 + [44]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($5 + [52])))
	
.LABEL $label$31
	CALL _ZdlPv($5)
	
.LABEL $label$30
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$29 }
	$6 = *(($7 + [112]))
	goto $label$27 
	
.LABEL $label$28
	$6 = $10
	
.LABEL $label$27
	*($0) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$26
	$global$0 = ($7 + [192])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8611])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $58($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	$6 = CALL current_time()
	*($5 + [28]) = $0
	*($5 + [24]) = ((uint_64)$6 / (uint_64)(int_64)1000000)
	CALL $34(($3 + [32]), $5)
	*($5 + [32]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [16]) >> (uint_64)(int_64)8
	*($3 + [16]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $15(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $61($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $52($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8742])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8847])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8780])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8847])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $17 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $29((($4 + [24]) + [28]), [28])
	$7 = *(($4 + [56]))
	$2 = *($4 + [52])
	*($4 + [84]) = $2
	*($4 + [80]) = $2
	*($4 + [88]) = $7
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $35(($4 + [72]), ($4 + [64]))
	CALL $36(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $52(($4 + [8]))
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8611])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $58($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8638])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $30(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $61($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6224682770514313215, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [8560])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $19($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)-6224682770514313216, $6))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [8560])
	
.LABEL $label$2
	*(($4 + [76])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $12 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [8643])
	$2 = *($0 + [4])
	$3 = *(($2 + [76]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-6224682770514313215, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [76])) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [8560])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $19($6, CALL $fimport$4(*($6), *($6 + [8]), (int_64)-6224682770514313216, $5))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [8560])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [76])) = $4
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = (int_64)0
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$3 = *(($2 + [76]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$3 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-6224682770514313215, $1, *($2))
	*((*(($0 + [4])) + [76])) = $3
	
.LABEL $label$3
	$4 = CALL db_idx64_previous($3, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8512])
	goto $label$1 
	
.LABEL $label$2
	$2 = *(*($0))
	$2 = CALL db_idx64_end(*($2), *($2 + [8]), (int_64)-6224682770514313215)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8458])
	$4 = CALL db_idx64_previous($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8458])
	
.LABEL $label$1
	$5 = *($1 + [8])
	$3 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$7:
	$2 = ($3 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$6 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [8560])
	goto $label$4 
	
.LABEL $label$5
	$8 = CALL $19($6, CALL $fimport$4(*($6), *($6 + [8]), (int_64)-6224682770514313216, $5))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [8560])
	
.LABEL $label$4
	*(($0 + [4])) = $8
	*(($8 + [76])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $29($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9104])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9104])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $38(CALL $37($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9104])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9104])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9104])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8638])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($1) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8638])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8638])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [8638])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2 + [8]) = *(*($0))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9104])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9104])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = *(($0 + [16]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9104])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9104])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9104])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *($1 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9104])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9104])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9104])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9104])
	CALL memcpy(*($0 + [4]), ($1 + [36]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9104])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9104])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $33($0, ($1 + [44]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9104])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9104])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9104])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $52($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [68]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9056])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6224682770514313216)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9002])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9002])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $19(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $58 (int_32 $0)
{
	return CALL $59([9504], $0)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $60($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8243])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17888])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17696]
	$3 = (((int_32)$1 * (int_32)[12]) + [17696])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9104])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9104])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $52 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $53 ()
{
	return [9488]
}

void .FUNC $54 (int_32 $0)
{
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $53())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $57($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $58($1)
	
.LABEL $label$2
	*(CALL $53()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $58(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $61($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}