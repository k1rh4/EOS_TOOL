(data (i32.const 8192) "length of fund_name should not exceed 256\00")
(data (i32.const 8234) "length of manager_name should not exceed 256\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8365) "length of raising_address should not exceed 256\00")
(data (i32.const 8413) "start_time must be before end_time\00")
(data (i32.const 8448) "cannot add ended fund\00")
(data (i32.const 8470) "fund_size should not be negative\00")
(data (i32.const 8503) "fund_size is invalid\00")
(data (i32.const 8524) "BTC\00")
(data (i32.const 8528) "USDT\00")
(data (i32.const 8533) "ETH\00")
(data (i32.const 8537) "EOS\00")
(data (i32.const 8541) "unknown fund_size symbol\00")
(data (i32.const 8566) "fund does not exist\00")
(data (i32.const 8586) "cannot delete fund with recorded nav\00")
(data (i32.const 8623) "subscription should not be negative\00")
(data (i32.const 8659) "subscription is invalid\00")
(data (i32.const 8683) "inconsistent symbol\00")
(data (i32.const 8703) "cannot update size of fund with recorded nav\00")
(data (i32.const 8748) "nav can only be recorded after fund starts\00")
(data (i32.const 8791) "nav can only be recorded within 7 days after fund ends\00")
(data (i32.const 8846) "nav should not be negative\00")
(data (i32.const 8873) "nav is too large\00")
(data (i32.const 8890) "valuation_time should be in the past\00")
(data (i32.const 8927) "valuation_time should be at least 6 hours after fund starts\00")
(data (i32.const 8987) "non-final nav should be calculated at least 6 hours before fund ends\00")
(data (i32.const 9056) "non-final nav must be recorded within 1 day after calculated\00")
(data (i32.const 9117) "a gap of 6 hours is required\00")
(data (i32.const 9146) "no nav to delete\00")
(data (i32.const 9163) "nav can only be deleted within 1 day after recorded\00")
(data (i32.const 9215) "string is too long to be a valid symbol_code\00")
(data (i32.const 9260) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9313) "cannot create objects in table of another contract\00")
(data (i32.const 9364) "write\00")
(data (i32.const 9370) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9421) "error reading iterator\00")
(data (i32.const 9444) "read\00")
(data (i32.const 9449) "get\00")
(data (i32.const 9453) "cannot pass end iterator to erase\00")
(data (i32.const 9487) "cannot increment end iterator\00")
(data (i32.const 9517) "object passed to erase is not in multi_index\00")
(data (i32.const 9562) "cannot erase objects in table of another contract\00")
(data (i32.const 9612) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9665) "cannot pass end iterator to modify\00")
(data (i32.const 9700) "object passed to modify is not in multi_index\00")
(data (i32.const 9746) "cannot modify objects in table of another contract\00")
(data (i32.const 9797) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9856) "attempt to add asset with different symbol\00")
(data (i32.const 9899) "addition underflow\00")
(data (i32.const 9918) "addition overflow\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "publication_time" (func $fimport$1 (result i64)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$6 (result i32)))
(import "env" "read_action_data" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$11 (param i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "abort" (func $fimport$13))
(import "env" "memset" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$16 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$24 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$27 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$28 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$31 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$33 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$34 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$35 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $14))
(export "_Znwj" (func $34))
(export "_ZdlPv" (func $36))
(export "_Znaj" (func $35))
(export "_ZdaPv" (func $37))
(export "_ZnwjSt11align_val_t" (func $38))
(export "_ZnajSt11align_val_t" (func $39))
(export "_ZdlPvSt11align_val_t" (func $40))
(export "_ZdaPvSt11align_val_t" (func $41))
(table $0 6 6 anyfunc)
(elem (i32.const 1) $12 $1 $10 $5 $8)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18352))
(global $global$2 i32 (i32.const 18352))


int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $53($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [56]) + [16]))) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9444])
	CALL memcpy(($4 + [56]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [9444])
	CALL memcpy((($4 + [56]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [9444])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4 + [64])
	$0 = *($4 + [56])
	*((($4 + [96]) + [8])) = *($8)
	*($4 + [96]) = *($4 + [80])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [96]) + [8]))
	*((($4 + [112]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [96])
	*($4 + [8]) = $1
	*($4 + [112]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $56($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $29($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $46($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $46($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $42($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9449])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $30($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9444])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9449])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = ((int_32)($5 - $2) / (int_32)[24])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $31($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ((int_32)$7 * (int_32)[24]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$6 = *($7)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [9444])
	CALL memcpy($2, *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [9444])
	CALL memcpy(($2 + [8]), *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [9444])
	CALL memcpy(($2 + [16]), *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	$2 = ($2 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $43(($2 + [64]), ($1 + [8]))
	$5 = CALL $43(($2 + [48]), ($1 + [20]))
	$6 = CALL $43(($2 + [32]), ($1 + [32]))
	$7 = *($1 + [64])
	$8 = *($1 + [56])
	$9 = *($1 + [48])
	$10 = *($1 + [72])
	$11 = *(($1 + [80]))
	*(($2 + [8])) = $11
	*((($2 + [16]) + [8])) = $11
	*($2 + [16]) = $10
	*($2) = $10
	CALL $33($0, $3, $4, $5, $6, $9, $8, $7, $2)
	if ( (*($6) & [1]) ){ goto $label$5 }
	if ( (*($5) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($4) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [80])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9444])
	CALL memcpy(($3 + [48]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9444])
	CALL memcpy(($4 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9444])
	CALL memcpy(($4 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9444])
	CALL memcpy(($4 + [72]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [9444])
	CALL memcpy(($2 + [8]), *($1 + [4]), [8])
	*(($4 + [80])) = *($2 + [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9364])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $24(*($1), *($0 + [4]))
	CALL $24(*($1), *($0 + [8]))
	CALL $24(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9364])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9364])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9364])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9364])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9364])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $25(*($1), *($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [8])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$4 = *($3)
	$3 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$6
	$1 = ($1 + [40])
	*($2) = $1
	$0 = *($0)
	$0 = *($0 + [32])
	$3 = *($0 + [4])
	$4 = ($3 - $0)
	$5 = (CASTING uint_64)(uint_32 ((int_32)$4 / (int_32)[24]))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$8 }
	$1 = ((((int_32)((uint_32)($4 + [-24]) / (uint_32)[24]) * (int_32)[24]) + $1) + [24])
	
.LABEL $label$8
	*($2) = $1
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9364])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9364])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9364])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9364])
	CALL memcpy(*($6), ($7 + [16]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9364])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9364])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9444])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $19(*($1), *($0 + [4]))
	CALL $19(*($1), *($0 + [8]))
	CALL $19(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9444])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9444])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9444])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9444])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9444])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $28(*($1), *($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = *($1 + [88])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [92])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($1 + [40])))
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($1 + [28])))
	if ( (*($1 + [8]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	return $0
}

void .FUNC $49 (int_32 $0)
{
}

int_32 .FUNC $48 ()
{
	return [9940]
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $42 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $56($0)
	
.LABEL $label$1
}

void .FUNC $47 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $45($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $48())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $52($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [64])
	$global$0 = $3
	$4 = [0]
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$5 = *($0)
	*($3 + [24]) = $5
	*($3 + [32]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)6820297015373594624, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $6(($3 + [24]), $7)
	CALL eosio_assert(((int_32)*($6 + [100]) == (int_32)($3 + [24])), [9370])
	
.LABEL $label$1
	CALL publication_time()
	$8 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($8, [8566])
	$5 = *($2)
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8623])
	$9 = *($2 + [8])
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$5 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$1 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$5 = $1
	$4 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $1
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $4 ){ goto $label$6 }
	$4 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	CALL eosio_assert($4, [8659])
	CALL eosio_assert(((int_64)$9 == (int_64)*(($6 + [80]))), [8683])
	CALL require_auth(*($6 + [48]))
	CALL eosio_assert(((int_32)*($6 + [88]) == (int_32)*(($6 + [92]))), [8703])
	$5 = *($0)
	*((($3 + [8]) + [8])) = *(($2 + [8]))
	*($3 + [8]) = *($2)
	CALL eosio_assert($8, [9665])
	CALL $9(($3 + [24]), $6, $5, ($3 + [8]))
	CALL $4(($3 + [48]))
	$global$0 = ($3 + [64])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [9700])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9746])
	$5 = *($1)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [80]))), [9856])
	$6 = ((int_64)*($1 + [72]) + (int_64)*($3))
	*($1 + [72]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9899])
	CALL eosio_assert(((int_64)*($1 + [72]) < (int_64)4611686018427387904), [9918])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9797])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$7 = ($1 + [8])
	*($3 + [28]) = $7
	*($3 + [24]) = $1
	$8 = ($1 + [20])
	*($3 + [32]) = $8
	$9 = ($1 + [32])
	*($3 + [36]) = $9
	$10 = ($1 + [48])
	*($3 + [40]) = $10
	$11 = ($1 + [56])
	*($3 + [44]) = $11
	$12 = ($1 + [64])
	*($3 + [48]) = $12
	$13 = ($1 + [72])
	*($3 + [52]) = $13
	$14 = ($1 + [88])
	*($3 + [56]) = $14
	CALL $22(($3 + [24]), $3)
	$15 = *($3 + [16])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$4 = CALL $53($15)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($15 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $15)
	*($3 + [16]) = $3
	*($3 + [28]) = $7
	*($3 + [32]) = $8
	*($3 + [36]) = $9
	*($3 + [40]) = $10
	*($3 + [44]) = $11
	*($3 + [48]) = $12
	*($3 + [52]) = $13
	*($3 + [56]) = $14
	*($3 + [24]) = $1
	CALL $23(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [104]), $2, $4, $15)
	if ( ((uint_32)$15 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $56($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9421])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $53($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [48]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88 align=4]) = (int_64)0
	*($5 + [96]) = [0]
	*($5 + [100]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [20])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [72])
	*($3 + [72]) = ($5 + [88])
	CALL $27(($3 + [40]), ($3 + [32]))
	*($5 + [104]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $3(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $56($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [88])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [92])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( (*($1 + [32]) & [1]) ){ goto $label$15 }
	if ( (*($1 + [20]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [40])))
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [28])))
	if ( (*($1 + [8]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [9517])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9562])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9612])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [88])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [92])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($3 + [28])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$16:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$17 }
	$8 = *($5 + [88])
	if ( ($8 == 0) ){ goto $label$18 }
	*(($5 + [92])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$18
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($5 + [40])))
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($5 + [28])))
	if ( (*($5 + [8]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$19
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$16 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [104]))
}

int_32 .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [88])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [92])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [28])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$7
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $5 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)6820297015373594624, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $6($2, $4)
	CALL eosio_assert(((int_32)*($0 + [100]) == (int_32)$2), [9370])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [8566])
	CALL eosio_assert(((int_32)*($0 + [88]) == (int_32)*(($0 + [92]))), [8586])
	CALL eosio_assert($4, [9453])
	CALL eosio_assert($4, [9487])
	$4 = CALL db_next_i64(*($0 + [104]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $6($2, $4)
	
.LABEL $label$2
	CALL $7($2, $0)
	CALL $4(($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$5 = ($1 + [8])
	CALL $44($5, *($3 + [4]))
	$6 = ($1 + [20])
	CALL $44($6, *($3 + [8]))
	$7 = ($1 + [32])
	CALL $44($7, *($3 + [12]))
	*($1 + [48]) = *(*($3 + [16]))
	*($1 + [56]) = *(*($3 + [20]))
	*($1 + [64]) = *(*($3 + [24]))
	$3 = *($3 + [28])
	*(($1 + [80])) = *(($3 + [8]))
	*($1 + [72]) = *($3)
	*(($3 = $2) + [16]) = [0]
	*($3) = ($3 + [16])
	*($3 + [28]) = $5
	*($3 + [24]) = $1
	*($3 + [32]) = $6
	*($3 + [36]) = $7
	$8 = ($1 + [48])
	*($3 + [40]) = $8
	$9 = ($1 + [56])
	*($3 + [44]) = $9
	$10 = ($1 + [64])
	*($3 + [48]) = $10
	$11 = ($1 + [72])
	*($3 + [52]) = $11
	$12 = ($1 + [88])
	*($3 + [56]) = $12
	CALL $22(($3 + [24]), $3)
	$13 = *($3 + [16])
	if ( ($13 <= [513]) ){ goto $label$2 }
	$2 = CALL $53($13)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($13 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $13)
	*($3 + [16]) = $3
	*($3 + [28]) = $5
	*($3 + [24]) = $1
	*($3 + [32]) = $6
	*($3 + [36]) = $7
	*($3 + [40]) = $8
	*($3 + [44]) = $9
	*($3 + [48]) = $10
	*($3 + [52]) = $11
	*($3 + [56]) = $12
	CALL $23(($3 + [24]), ($3 + [16]))
	$14 = *($1)
	*($1 + [104]) = CALL db_store_i64(*($4 + [8]), (int_64)6820297015373594624, *(*($0 + [8])), $14, $2, $13)
	if ( ((uint_32)$13 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$14 >= (uint_64)*($4 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $56($2)
	if ( (uint_64)($14 <= *($4 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $26(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5, int_64 $6, int_64 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$9 = ($global$0 - [144])
	$global$0 = $9
	*($9 + [88]) = $1
	*($9 + [96]) = $5
	*($9 + [80]) = $6
	*($9 + [72]) = $7
	CALL require_auth(*($0))
	$5 = CALL publication_time()
	$10 = *($2)
	if ( ($10 & [1]) ){ goto $label$2 }
	$10 = uint_32($10 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$10 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($10 <= [257]), [8192])
	$10 = *($3)
	if ( ($10 & [1]) ){ goto $label$4 }
	$10 = uint_32($10 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$10 = *($3 + [4])
	
.LABEL $label$3
	CALL eosio_assert(($10 <= [257]), [8234])
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$6 }
	$10 = uint_32($10 >> [1])
	goto $label$5 
	
.LABEL $label$6
	$10 = *($4 + [4])
	
.LABEL $label$5
	CALL eosio_assert(($10 <= [257]), [8365])
	CALL eosio_assert((uint_64)($6 <= $7), [8413])
	CALL eosio_assert((uint_64)($5 <= $7), [8448])
	$7 = *($8)
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8470])
	$11 = [0]
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$7 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $6
	$11 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $11 ){ goto $label$11 }
	$11 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$11 = [0]
	
.LABEL $label$7
	CALL eosio_assert($11, [8503])
	$10 = CALL $50([8524])
	if ( ($10 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9215])
	goto $label$14 
	
.LABEL $label$15
	if ( ($10 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$7 = (int_64)0
	
.LOOP $label$16:
	$11 = *(($10 + [8523]))
	if ( ((($11 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9260])
	
.LABEL $label$17
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$13
	$7 = (int_64)0
	
.LABEL $label$12
	if ( ((int_64)*($8 + [8]) != (int_64)((int_64)((int_64)$7 << (int_64)8) | (int_64)8)) ){ goto $label$19 }
	CALL eosio_assert([1], [8541])
	goto $label$18 
	
.LABEL $label$19
	$10 = CALL $50([8528])
	if ( ($10 <= [8]) ){ goto $label$23 }
	CALL eosio_assert([0], [9215])
	goto $label$22 
	
.LABEL $label$23
	if ( ($10 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	$7 = (int_64)0
	
.LOOP $label$24:
	$11 = *(($10 + [8527]))
	if ( ((($11 + [-65]) & [255]) <= [26]) ){ goto $label$25 }
	CALL eosio_assert([0], [9260])
	
.LABEL $label$25
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$24 }
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)8)
	goto $label$20 
	
.LABEL $label$21
	$7 = (int_64)8
	
.LABEL $label$20
	if ( ((int_64)*(($8 + [8])) != (int_64)$7) ){ goto $label$26 }
	CALL eosio_assert([1], [8541])
	goto $label$18 
	
.LABEL $label$26
	$10 = CALL $50([8533])
	if ( ($10 <= [8]) ){ goto $label$30 }
	CALL eosio_assert([0], [9215])
	goto $label$29 
	
.LABEL $label$30
	if ( ($10 == 0) ){ goto $label$28 }
	
.LABEL $label$29
	$7 = (int_64)0
	
.LOOP $label$31:
	$11 = *(($10 + [8532]))
	if ( ((($11 + [-65]) & [255]) <= [26]) ){ goto $label$32 }
	CALL eosio_assert([0], [9260])
	
.LABEL $label$32
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$31 }
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)9)
	goto $label$27 
	
.LABEL $label$28
	$7 = (int_64)9
	
.LABEL $label$27
	if ( ((int_64)*(($8 + [8])) != (int_64)$7) ){ goto $label$33 }
	CALL eosio_assert([1], [8541])
	goto $label$18 
	
.LABEL $label$33
	$10 = CALL $50([8537])
	if ( ($10 <= [8]) ){ goto $label$37 }
	CALL eosio_assert([0], [9215])
	goto $label$36 
	
.LABEL $label$37
	if ( ($10 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	$7 = (int_64)0
	
.LOOP $label$38:
	$11 = *(($10 + [8536]))
	if ( ((($11 + [-65]) & [255]) <= [26]) ){ goto $label$39 }
	CALL eosio_assert([0], [9260])
	
.LABEL $label$39
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$38 }
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$34 
	
.LABEL $label$35
	$7 = (int_64)4
	
.LABEL $label$34
	CALL eosio_assert(((int_64)*(($8 + [8])) == (int_64)$7), [8541])
	
.LABEL $label$18
	*(($12 = ($9 + [64]))) = [0]
	*($9 + [48]) = (int_64)-1
	*($9 + [56]) = (int_64)0
	$7 = *($0)
	*($9 + [32]) = $7
	*($9 + [40]) = $7
	*($9 + [4]) = $2
	*($9 + [8]) = $3
	*($9 + [12]) = $4
	*($9 + [28]) = $8
	*($9) = ($9 + [88])
	*($9 + [16]) = ($9 + [96])
	*($9 + [20]) = ($9 + [80])
	*($9 + [24]) = ($9 + [72])
	*($9 + [136]) = $7
	CALL eosio_assert(((int_64)$7 == (int_64)CALL $fimport$3()), [9313])
	*($9 + [116]) = $9
	*($9 + [112]) = ($9 + [32])
	*($9 + [120]) = ($9 + [136])
	*(($10 = CALL _Znwj([112])) + [8 align=4]) = (int_64)0
	*($10 + [16 align=4]) = (int_64)0
	*($10 + [24 align=4]) = (int_64)0
	*($10 + [32 align=4]) = (int_64)0
	*($10 + [40]) = [0]
	*($10 + [48]) = (int_64)0
	*($10 + [72]) = (int_64)0
	*($10 + [80]) = (int_64)0
	*($10 + [88 align=4]) = (int_64)0
	*($10 + [96]) = [0]
	*($10 + [100]) = ($9 + [32])
	CALL $2(($9 + [112]), $10)
	*($9 + [128]) = $10
	$7 = *($10)
	*($9 + [112]) = $7
	$8 = *($10 + [104])
	*($9 + [108]) = $8
	$3 = ($9 + [60])
	$11 = *($3)
	if ( ((uint_32)$11 >= (uint_32)*($12)) ){ goto $label$42 }
	*($11 + [8]) = $7
	*($11 + [16]) = $8
	*($9 + [128]) = [0]
	*($11) = $10
	*($3) = ($11 + [24])
	$10 = *($9 + [128])
	*($9 + [128]) = [0]
	if ( ($10 == 0) ){ goto $label$40 }
	goto $label$41 
	
.LABEL $label$42
	CALL $3(($9 + [56]), ($9 + [128]), ($9 + [112]), ($9 + [108]))
	$10 = *($9 + [128])
	*($9 + [128]) = [0]
	if ( ($10 == 0) ){ goto $label$40 }
	
.LABEL $label$41
	$11 = *($10 + [88])
	if ( ($11 == 0) ){ goto $label$43 }
	*(($10 + [92])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$43
	if ( (*($10 + [32]) & [1]) ){ goto $label$48 }
	if ( (*($10 + [20]) & [1]) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	CALL _ZdlPv(*(($10 + [40])))
	if ( ((*($10 + [20]) & [1]) == 0) ){ goto $label$46 }
	
.LABEL $label$47
	CALL _ZdlPv(*(($10 + [28])))
	if ( (*($10 + [8]) & [1]) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	if ( ((*($10 + [8]) & [1]) == 0) ){ goto $label$44 }
	
.LABEL $label$45
	CALL _ZdlPv(*(($10 + [16])))
	
.LABEL $label$44
	CALL _ZdlPv($10)
	
.LABEL $label$40
	CALL $4(($9 + [56]))
	$global$0 = ($9 + [144])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)3626298663912865791) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)3626298663912865792) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)5378050748940173312) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)5378050752903643136) ){ goto $label$1 }
	*($3 + [44]) = [0]
	*($3 + [40]) = [1]
	*($3 + [32]) = *($3 + [40])
	CALL $15($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$2 == (int_64)-3075276113594122240) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)3626168788933672960) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [2]
	*($3) = *($3 + [72])
	CALL $16($1, $1, $3)
	goto $label$1 
	
.LABEL $label$4
	*($3 + [52]) = [0]
	*($3 + [48]) = [3]
	*($3 + [24]) = *($3 + [48])
	CALL $17($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [8]) = *($3 + [64])
	CALL $15($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [60]) = [0]
	*($3 + [56]) = [5]
	*($3 + [16]) = *($3 + [56])
	CALL $18($1, $1, ($3 + [16]))
	
.LABEL $label$1
	CALL $49([0])
	$global$0 = ($3 + [80])
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $53($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9444])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $56($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$5 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$5 = CALL $53($2)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	CALL read_action_data($5, $2)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*((($4 + [64]) + [24])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [144])) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [52]) = $5
	*($4 + [48]) = $5
	*($4 + [56]) = ($5 + $2)
	*($4 + [176]) = ($4 + [48])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [9444])
	CALL memcpy(($4 + [64]), *($4 + [52]), [8])
	*($4 + [52]) = (*($4 + [52]) + [8])
	CALL $19(($4 + [48]), (($4 + [64]) + [8]))
	CALL $19(($4 + [48]), ($4 + [84]))
	CALL $19(($4 + [48]), ($4 + [96]))
	*($4 + [16]) = ($4 + [64])
	CALL $20(($4 + [16]), ($4 + [176]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [160]) + [8]))) = *($3)
	*($4 + [160]) = *($4)
	$3 = *($6)
	*((($4 + [176]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [160])
	*($4 + [32]) = $0
	*($4 + [176]) = $0
	*($4 + [180]) = ($4 + [152])
	*($4 + [176]) = ($4 + [16])
	CALL $21(($4 + [176]), ($4 + [64]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$10 }
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $56($5)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [104])))
	if ( ((*($4 + [84]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($4 + [84]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [72]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [92])))
	$2 = [1]
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [80])))
	$global$0 = ($4 + [192])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [192])
	return $2
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $53($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9444])
	CALL memcpy(($4 + [40]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [9444])
	CALL memcpy((($4 + [40]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [9444])
	CALL memcpy((($4 + [40]) + [16]), ($2 + [16]), [8])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [56])
	$1 = *($4 + [48])
	$8 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $56($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$5 = *($0)
	*($4 + [24]) = $5
	*($4 + [32]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)6820297015373594624, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $6(($4 + [24]), $7)
	CALL eosio_assert(((int_32)*($6 + [100]) == (int_32)($4 + [24])), [9370])
	
.LABEL $label$1
	$5 = CALL publication_time()
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [8566])
	CALL eosio_assert((uint_64)(*($6 + [56]) <= $5), [8748])
	CALL eosio_assert(((uint_64)$5 <= (uint_64)((int_64)*($6 + [64]) + (int_64)604800000000)), [8791])
	CALL eosio_assert([1], [8846])
	CALL eosio_assert((uint_64)($2 <= (int_64)4294967296), [8873])
	CALL eosio_assert(((uint_64)$5 >= (uint_64)$3), [8890])
	CALL eosio_assert(((uint_64)((int_64)*($6 + [56]) + (int_64)21600000000) <= (uint_64)$3), [8927])
	$1 = *($6 + [64])
	if ( ((int_64)$1 == (int_64)$3) ){ goto $label$2 }
	CALL eosio_assert(((uint_64)((int_64)$1 + (int_64)-21600000000) >= (uint_64)$3), [8987])
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)-86400000000) <= $3), [9056])
	
.LABEL $label$2
	$8 = *(($6 + [92]))
	if ( ((int_32)$8 == (int_32)*($6 + [88])) ){ goto $label$3 }
	CALL eosio_assert(((uint_64)((int_64)*(($8 + [-16])) + (int_64)21600000000) <= (uint_64)$3), [9117])
	
.LABEL $label$3
	CALL require_auth(*($6 + [48]))
	$1 = *($0)
	*($4 + [8]) = $3
	*($4) = $2
	*($4 + [16]) = $5
	CALL eosio_assert($7, [9665])
	CALL $11(($4 + [24]), $6, $1, $4)
	CALL $4(($4 + [48]))
	$global$0 = ($4 + [64])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [9700])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9746])
	$5 = *(($3 + [16]))
	$6 = *($1)
	$7 = *($3)
	*(($8 = $4) + [32]) = *(($3 + [8]))
	*($8 + [24]) = $7
	*($8 + [40]) = $5
	$9 = ($1 + [92])
	$3 = *($9)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [96]))) ){ goto $label$2 }
	*($3) = *($8 + [24])
	*(($3 + [16])) = *((($8 + [24]) + [16]))
	*(($3 + [8])) = *((($8 + [24]) + [8]))
	*($9) = (*($9) + [24])
	$10 = ($1 + [88])
	goto $label$1 
	
.LABEL $label$2
	$10 = ($1 + [88])
	CALL $32($10, ($8 + [24]))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9797])
	*($8 + [16]) = [0]
	*($8) = ($8 + [16])
	$11 = ($1 + [8])
	*($8 + [28]) = $11
	*($8 + [24]) = $1
	$12 = ($1 + [20])
	*($8 + [32]) = $12
	$13 = ($1 + [32])
	*($8 + [36]) = $13
	$14 = ($1 + [48])
	*($8 + [40]) = $14
	$15 = ($1 + [56])
	*($8 + [44]) = $15
	$16 = ($1 + [64])
	*($8 + [48]) = $16
	$17 = ($1 + [72])
	*($8 + [52]) = $17
	*($8 + [56]) = $10
	CALL $22(($8 + [24]), $8)
	$9 = *($8 + [16])
	if ( ($9 <= [513]) ){ goto $label$4 }
	$3 = CALL $53($9)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($8 + [4]) = $3
	*($8) = $3
	*($8 + [8]) = ($3 + $9)
	*($8 + [16]) = $8
	*($8 + [28]) = $11
	*($8 + [32]) = $12
	*($8 + [36]) = $13
	*($8 + [40]) = $14
	*($8 + [44]) = $15
	*($8 + [48]) = $16
	*($8 + [52]) = $17
	*($8 + [56]) = $10
	*($8 + [24]) = $1
	CALL $23(($8 + [24]), ($8 + [16]))
	CALL db_update_i64(*($1 + [104]), $2, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $56($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($8 + [64])
	return 
	
.LABEL $label$5
	$global$0 = ($8 + [64])
}

void .FUNC $12 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)6820297015373594624, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $6(($2 + [8]), $5)
	CALL eosio_assert(((int_32)*($4 + [100]) == (int_32)($2 + [8])), [9370])
	
.LABEL $label$1
	$3 = CALL publication_time()
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [8566])
	CALL require_auth(*($4 + [48]))
	$6 = ($4 + [92])
	CALL eosio_assert(((int_32)*($6) != (int_32)*($4 + [88])), [9146])
	CALL eosio_assert((uint_64)($3 <= ((int_64)*((*($6) + [-8])) + (int_64)86400000000)), [9163])
	$3 = *($0)
	CALL eosio_assert($5, [9665])
	CALL $13(($2 + [8]), $4, $3)
	CALL $4(($2 + [32]))
	$global$0 = ($2 + [48])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [9700])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9746])
	*(($4 = ($1 + [92]))) = (*($4) + [-24])
	$5 = *($1)
	CALL eosio_assert([1], [9797])
	*(($4 = $3) + [16]) = [0]
	*($4) = ($4 + [16])
	$6 = ($1 + [8])
	*($4 + [28]) = $6
	*($4 + [24]) = $1
	$7 = ($1 + [20])
	*($4 + [32]) = $7
	$8 = ($1 + [32])
	*($4 + [36]) = $8
	$9 = ($1 + [48])
	*($4 + [40]) = $9
	$10 = ($1 + [56])
	*($4 + [44]) = $10
	$11 = ($1 + [64])
	*($4 + [48]) = $11
	$12 = ($1 + [72])
	*($4 + [52]) = $12
	$13 = ($1 + [88])
	*($4 + [56]) = $13
	CALL $22(($4 + [24]), $4)
	$14 = *($4 + [16])
	if ( ($14 <= [513]) ){ goto $label$2 }
	$3 = CALL $53($14)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($14 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($3 + $14)
	*($4 + [16]) = $4
	*($4 + [28]) = $6
	*($4 + [32]) = $7
	*($4 + [36]) = $8
	*($4 + [40]) = $9
	*($4 + [44]) = $10
	*($4 + [48]) = $11
	*($4 + [52]) = $12
	*($4 + [56]) = $13
	*($4 + [24]) = $1
	CALL $23(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [104]), $2, $3, $14)
	if ( ((uint_32)$14 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $56($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $56($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $53($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9936])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $53($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[24]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	*(($4 = ($5 + ((int_32)$4 * (int_32)[24])))) = *($1)
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($5 + ((int_32)$6 * (int_32)[24]))
	$4 = ($4 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $33 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5, int_64 $6, int_64 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$9 = ($global$0 - [80])
	$global$0 = $9
	$0 = *($0 + [4])
	$10 = *($0 + [4])
	$11 = (*($0) + int_32($10 >> [1]))
	$12 = *($0)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$12 = *((*($11) + $12))
	
.LABEL $label$1
	$0 = CALL $43(($9 + [64]), $2)
	$2 = CALL $43(($9 + [48]), $3)
	$3 = CALL $43(($9 + [32]), $4)
	$13 = *(($8 + [8]))
	*((($9 + [16]) + [8])) = $13
	$14 = *($8)
	*(($9 + [8])) = $13
	*($9) = $14
	*($9 + [16]) = $14
	CALL void $11((int_32 $1), (int_64 $0), (int_32 $2), (int_32 $3), (int_32 $5), (int_64 $6), (int_64 $7), (int_64 $9), (int_32 $12))
	if ( (*($3) & [1]) ){ goto $label$6 }
	if ( (*($2) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($2 + [8]))
	if ( ((*($0) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($0) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($9 + [80])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($0 + [8]))
	$global$0 = ($9 + [80])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $47($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[24])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$3 }
	$3 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [24])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $47($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[24]))
	$5 = ($2 + ((int_32)$5 * (int_32)[24]))
	$3 = $5
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[24]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $51(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9936])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $51(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $53($1)
	
.LABEL $label$2
	*(CALL $48()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $53(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $56($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $53 (int_32 $0)
{
	return CALL $54([9956], $0)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $55($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8279])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9948]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9952])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9948]) = [1]
	$2 = ($2 << [16])
	*([0] + [9952]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9952])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9952]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9948]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9948]) = [1]
	$3 = ($3 << [16])
	*([0] + [9952]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9952])
	
.LABEL $label$10
	*([0] + [9952]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18340])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18148]
	$3 = (((int_32)$1 * (int_32)[12]) + [18148])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}