(data (i32.const 8192) "\04EOS\00\00\00\00\04WE\00\00\00\00\00\04DICE\00\00\00")
(data (i32.const 16644) "invalid token type\00")
(data (i32.const 16663) "eosio.token\00")
(data (i32.const 16675) "transfer\00stoull\00")
(data (i32.const 16691) "eostransfer\00")
(data (i32.const 16703) "wetransfer\00")
(data (i32.const 16714) "dicetransfer\00")
(data (i32.const 16727) "failed to get player id\00")
(data (i32.const 16752) "tpdappincome\00")
(data (i32.const 16765) "welovecasino\00")
(data (i32.const 16778) "from not exists\00")
(data (i32.const 16794) "unexpected err in register\00")
(data (i32.const 16821) "invite bonus https://wedice.one\00")
(data (i32.const 16853) "invalid account type\00")
(data (i32.const 16874) "invalid inviter\00")
(data (i32.const 16890) "at leas 0.1000 EOS\00")
(data (i32.const 16909) "A single bet should not exceed 100.00 EOS\00")
(data (i32.const 16951) "not exist\00")
(data (i32.const 16961) "been revealed\00")
(data (i32.const 16975) "should be revealed\00")
(data (i32.const 17008) "\05\00\00\00\00\00\00\00\01\00\00\00\06\00\00\00\02\00\00\00\01\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\02\00\00\00\03\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\01\00\00\00\03\00\00\00\02\00\00\00\01\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\02\00\00\00\03\00\00\00\01\00\00\00")
(data (i32.const 17104) "dice\00: no conversion\00")
(data (i32.const 17136) "\e1z\14\aeG\e1\n@\cd\cc\cc\cc\cc\cc\12@\85\ebQ\b8\1e\85\17@\\\8f\c2\f5(\\\1f@\85\ebQ\b8\1e\85\'@\85\ebQ\b8\1e\85\'@\85\ebQ\b8\1e\857@")
(data (i32.const 17192) "\f0\9f\98\8b Congratulations\f0\9f\92\90 you win -- Wedice: https://wedice.one \f0\9f\98\8b\00: out of range\00")
(data (i32.const 17275) "horse\00")
(data (i32.const 17281) "game type should be horse\00")
(data (i32.const 17307) "\f0\9f\98\8b Happy play in Wedice: https://wedice.one \f0\9f\98\8b\00")
(data (i32.const 17358) "dump result\00")
(data (i32.const 17370) "horseresult\00")
(data (i32.const 17382) "wait to come\00")
(data (i32.const 17395) "only dice supported\00")
(data (i32.const 17415) "invalid token\00")
(data (i32.const 17429) "large or equal than 10 DICE\00")
(data (i32.const 17457) "invalid memo\00")
(data (i32.const 17470) "only eos\00")
(data (i32.const 17479) "invalid type\00")
(data (i32.const 17492) "buydice\00")
(data (i32.const 17500) "dau\00")
(data (i32.const 17504) "only WE supported\00")
(data (i32.const 17522) "at least 10 WE\00")
(data (i32.const 17537) "vote\00")
(data (i32.const 17542) "invalid vote candidate.\00")
(data (i32.const 17566) "invalid vote candidate!\00")
(data (i32.const 17590) "bet must be in [1, 10, 20 ,50]\00")
(data (i32.const 17621) "number must be in [2, 96]\00")
(data (i32.const 17647) "invalid params\00")
(data (i32.const 17662) "diceresult\00")
(data (i32.const 17673) ",\00")
(data (i32.const 17675) "ids param is error\00")
(data (i32.const 17694) "seed_hashs param is error\00")
(data (i32.const 17720) "sigs param is error\00")
(data (i32.const 17740) "sig_hashs param is error\00")
(data (i32.const 17765) "random size error\00")
(data (i32.const 17783) "invalid number\00")
(data (i32.const 17798) "no qualification to buy dice\00")
(data (i32.const 17827) "invalid eos amount\00")
(data (i32.const 17846) "dice trade bonus\00")
(data (i32.const 17863) "purplusnow45\00")
(data (i32.const 17876) "eostown11114\00")
(data (i32.const 17889) "hellomushie1\00")
(data (i32.const 17902) "vote at less 50 WE\00")
(data (i32.const 17921) "wediceheaven\00")
(data (i32.const 17934) "vote to heaven\00")
(data (i32.const 17949) "invalid user type\00")
(data (i32.const 17967) "invalid arguments\00")
(data (i32.const 17985) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18034) "invalid symbol name\00")
(data (i32.const 18054) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18105) "error reading iterator\00")
(data (i32.const 18128) "get\00")
(data (i32.const 18132) "read\00")
(data (i32.const 18137) "cannot pass end iterator to modify\00")
(data (i32.const 18172) "object passed to modify is not in multi_index\00")
(data (i32.const 18218) "cannot modify objects in table of another contract\00")
(data (i32.const 18269) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18328) "write\00")
(data (i32.const 18334) "cannot create objects in table of another contract\00")
(data (i32.const 18385) "invalid amonut to unlock\00")
(data (i32.const 18410) "sig_hash error\00")
(data (i32.const 18425) "offset error\00")
(data (i32.const 18438) "Should be a valid number\00")
(data (i32.const 18463) "stake is locked now\00")
(data (i32.const 18483) "token not enough\00")
(data (i32.const 18500) "unsupported token\00")
(data (i32.const 18518) "had not stake before\00")
(data (i32.const 18539) "unstake amount larger then staked amount\00")
(data (i32.const 18580) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 18634) "cannot decrement iterator at beginning of table\00")
(data (i32.const 18682) "unstake record not found\00")
(data (i32.const 18707) "this one had been released or restaked\00")
(data (i32.const 18746) "unexpected err in restake\00")
(data (i32.const 18772) "cannot pass end iterator to erase\00")
(data (i32.const 18806) "cannot increment end iterator\00")
(data (i32.const 18836) "object passed to erase is not in multi_index\00")
(data (i32.const 18881) "cannot erase objects in table of another contract\00")
(data (i32.const 18931) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18984) "unstaked asset are locked\00")
(data (i32.const 19010) "invalid percent\00")
(data (i32.const 19026) "stage is wrong\00")
(data (i32.const 19041) "stake is not locked now\00")
(data (i32.const 19065) "unexpected err in distribute\00")
(data (i32.const 19094) "dodistribute\00")
(data (i32.const 19107) "no stake info for this account\00")
(data (i32.const 19138) "stake bonus https://wedice.one\00")
(data (i32.const 19169) "unable to find key\00")
(data (i32.const 19200) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 19457) "\00\01\02\04\07\03\06\05\00")
(data (i32.const 19466) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "read_action_data" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "memset" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$6 (param i64)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "current_time" (func $fimport$10 (result i64)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$12 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "send_deferred" (func $fimport$13 (param i32 i64 i32 i32 i32)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$17))
(import "env" "memmove" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$19 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$21 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$22 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$23 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$24 (param i32 i64 i32)))
(import "env" "db_idx64_next" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$26 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$27 (param i32)))
(import "env" "__unordtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$38 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$39 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$40 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$42 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$44 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$45 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$46 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $4))
(export "_Znwj" (func $293))
(export "_ZdlPv" (func $295))
(export "_Znaj" (func $294))
(export "_ZdaPv" (func $296))
(table $0 27 27 anyfunc)
(elem (i32.const 1) $6 $8 $10 $12 $14 $16 $18 $20 $21 $23 $24 $26 $28 $29 $30 $32 $33 $35 $36 $37 $39 $40 $41 $42 $44 $45)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19552))
(global $global$2 i32 (i32.const 19552))


int_32 .FUNC $220 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $284 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [124]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [132])))
	if ( ((*($1 + [112]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($1 + [112]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [120])))
	if ( ((*($1 + [100]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [100]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [108])))
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [96])))
	$4 = *($1 + [60])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = *($1 + [60])
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	*(($1 + [64])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$13 }
	CALL _ZdlPv($1)
	
.LABEL $label$13
	return $0
}

void .FUNC $285 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$1 = (*($2) + [57])
	*(($2 = *($1))) = $1
	$3 = *($3)
	$3 = *($0 + [28])
	$4 = *($3 + [4])
	$5 = ($4 - $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$1 = (( $1 ? ($5 + $1) : ((int_32)$3 == (int_32)$4) ) + [16])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [36])
	$6 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$2:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$3
	$4 = *($3)
	$3 = *($0 + [40])
	$6 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$4 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$5 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$5
	$4 = *($3)
	$3 = *($0 + [44])
	$6 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$6:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$6 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$7
	$3 = *($0)
	$0 = *($0 + [48])
	$6 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$8:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$8 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$9 }
	*($2) = ($0 + $1)
	
.LABEL $label$9
}

void .FUNC $317 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

void .FUNC $174 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	*($1 + [8]) = ((int_64)*(*($3 + [4])) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [18269])
	CALL eosio_assert([1], [18328])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18328])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = *($1)
	$4 = *($1 + [8])
	$0 = [0]
	$1 = *([0] + [8216])
	CALL $81($2, $1)
	if ( ((int_64)$4 == (int_64)4544260) ){ goto $label$3 }
	if ( ((int_64)$4 == (int_64)1397703940) ){ goto $label$1 }
	if ( ((int_64)$4 != (int_64)297481618436) ){ goto $label$2 }
	$0 = [2]
	goto $label$1 
	
.LABEL $label$3
	$0 = [1]
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [16644])
	$0 = [276447231]
	
.LABEL $label$1
	$0 = ($0 << [3])
	CALL eosio_assert(((uint_64)*((*($2) + $0)) >= (uint_64)$3), [18385])
	*(($0 = (*($2) + $0))) = (int_64))(*($0) - $3)
	CALL $82(($1 + [8]), $2, *($1))
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$4 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($2 + [16])
}

void .FUNC $176 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [18054])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $175($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [18054])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18137])
	CALL $192($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $193($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = ($0 + [88])
	$4 = *($1)
	$6 = *(($0 + [116]))
	$5 = *(($0 + [112]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [136]) == (int_32)$3), [18054])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($3), *(($0 + [96])), (int_64)5445041065490907136, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $178($3, $7) + [136]) == (int_32)$3), [18054])
	
.LABEL $label$2
	CALL eosio_assert([0], [17358])
	
.LABEL $label$1
	$4 = *($0)
	*($2 + [48]) = $1
	*($2 + [64]) = $4
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$8()), [18334])
	*($2 + [8]) = $3
	*($2 + [12]) = ($2 + [48])
	*($2 + [16]) = ($2 + [64])
	$7 = CALL _Znwj([152])
	CALL $55($7)
	*($7 + [136]) = $3
	CALL $179(($2 + [8]), $7)
	*($2 + [56]) = $7
	$4 = *($7)
	*($2 + [8]) = $4
	$5 = *($7 + [140])
	*($2 + [52]) = $5
	$8 = ($0 + [116])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [120]))) ){ goto $label$10 }
	*($6 + [8]) = $4
	*($6 + [16]) = $5
	*($2 + [56]) = [0]
	*($6) = $7
	*($8) = ($6 + [24])
	$7 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $180(($0 + [112]), ($2 + [56]), ($2 + [8]), ($2 + [52]))
	$7 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $7 ){ goto $label$8 }
	
.LABEL $label$9
	$4 = *($1)
	if ( (uint_64)($4 <= (int_64)151) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( (*($7 + [124]) & [1]) ){ goto $label$19 }
	if ( (*($7 + [112]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*(($7 + [132])))
	if ( ((*($7 + [112]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($7 + [120])))
	$6 = [1]
	if ( ((*($7 + [100]) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$6 = [1]
	if ( (*($7 + [100]) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( (*($7 + [88]) & $6) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*(($7 + [108])))
	if ( ((*($7 + [88]) & $6) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($7 + [96])))
	$6 = *($7 + [60])
	if ( $6 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$6 = *($7 + [60])
	if ( ($6 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	*(($7 + [64])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	CALL _ZdlPv($7)
	$4 = *($1)
	if ( (uint_64)($4 <= (int_64)151) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = ((int_64)$4 + (int_64)-150)
	$5 = *(($0 + [116]))
	$8 = *(($0 + [112]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$21 }
	
.LOOP $label$23:
	$7 = ($5 + [-24])
	$6 = *($7)
	if ( ((int_64)*($6) == (int_64)$4) ){ goto $label$22 }
	$5 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$21 }
	CALL eosio_assert(((int_32)*($6 + [136]) == (int_32)$3), [18054])
	if ( ($6 == 0) ){ goto $label$6 }
	$8 = ($0 + [96])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($0 + [96])
	$7 = CALL db_find_i64(*(($0 + [88])), *($8), (int_64)5445041065490907136, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $178($3, $7)
	CALL eosio_assert(((int_32)*($6 + [136]) == (int_32)$3), [18054])
	
.LABEL $label$20
	$7 = [0]
	$4 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$5 = CALL db_lowerbound_i64(*($3), *($8), (int_64)5445041065490907136, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$24 }
	$7 = CALL $178($3, $5)
	
.LABEL $label$24
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	if ( (uint_64)((int_64))(((int_64)$4 & (int_64)4294967295) - *($7 + [16])) <= (int_64)11) ){ goto $label$6 }
	
.LOOP $label$25:
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [18772])
	CALL eosio_assert($5, [18806])
	$5 = CALL db_next_i64(*($7 + [140]), ($2 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$26 }
	CALL $178($3, $5)
	
.LABEL $label$26
	CALL $181($3, $7)
	$7 = [0]
	$5 = CALL db_lowerbound_i64(*($3), *($8), (int_64)5445041065490907136, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$27 }
	$7 = CALL $178($3, $5)
	
.LABEL $label$27
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$25 }
	
.LABEL $label$6
	$9 = *($0)
	$4 = (int_64)6
	
.LOOP $label$28:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$28 }
	$4 = (int_64)0
	$10 = (int_64)59
	$7 = [17662]
	$11 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$4 > (uint_64)(int_64)9) ){ goto $label$34 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [-91])
	goto $label$32 
	
.LABEL $label$34
	$12 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$30
	$7 = ($7 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$29 }
	*($2 + [16]) = $11
	*($2 + [8]) = $9
	*(($7 = CALL _Znwj([16]))) = $9
	*($7 + [8]) = (int_64)3617214756542218240
	$3 = ($7 + [16])
	*(($2 + [32])) = $3
	*(($2 + [28])) = $3
	*($2 + [24]) = $7
	CALL $182(($2 + [36]), $1)
	CALL $108(($2 + [64]), ($2 + [8]))
	$7 = *($2 + [64])
	CALL send_inline($7, (*($2 + [68]) - $7))
	$7 = *($2 + [64])
	if ( ($7 == 0) ){ goto $label$35 }
	*($2 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$35
	$7 = *($2 + [36])
	if ( ($7 == 0) ){ goto $label$36 }
	*(($2 + [40])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$36
	$7 = *($2 + [24])
	if ( ($7 == 0) ){ goto $label$37 }
	*(($2 + [28])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$37
	$global$0 = ($2 + [80])
}

int_32 .FUNC $170 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18806])
	$2 = *($0 + [4])
	$3 = *($2 + [48])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-2110714446663909376, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [48]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [18054])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $167($6, CALL $fimport$7(*($6), *($6 + [8]), (int_64)-2110714446663909376, $5))
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [18054])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [48])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [18836])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18881])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18931])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [44]))
	$6 = *(($1 + [48]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2110714446663909376, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $172 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [18269])
	CALL eosio_assert([1], [18328])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18328])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $324($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $80(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $327($2)
	
.LABEL $label$5
	*(($1 = (($3 + [32]) + [8]))) = *((($3 + [16]) + [8]))
	*($3 + [32]) = *($3 + [16])
	*((($3 + [48]) + [8])) = *($1)
	*($3 + [48]) = *($3 + [32])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$6 = *((($3 + [48]) + [8]))
	*((($3 + [64]) + [8])) = $6
	*(($3 + [8])) = $6
	$6 = *($3 + [48])
	*($3) = $6
	*($3 + [64]) = $6
	CALL void $1((int_32 $3), (int_32 $5))
	$global$0 = ($3 + [80])
	return [1]
}

void .FUNC $246 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([152])
	CALL $55($5)
	*($5 + [136]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [56])
	*($3 + [68]) = ($5 + [60])
	*($3 + [72]) = ($5 + [72])
	*($3 + [76]) = ($5 + [88])
	*($3 + [80]) = ($5 + [100])
	*($3 + [84]) = ($5 + [112])
	*($3 + [88]) = ($5 + [124])
	CALL $56(($3 + [40]), ($3 + [32]))
	*($5 + [140]) = $1
	*($5 + [144 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $180(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [124]) & [1]) ){ goto $label$18 }
	if ( (*($1 + [112]) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*(($1 + [132])))
	if ( ((*($1 + [112]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($1 + [120])))
	$4 = [1]
	if ( ((*($1 + [100]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$4 = [1]
	if ( (*($1 + [100]) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( (*($1 + [88]) & $4) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [108])))
	if ( ((*($1 + [88]) & $4) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [96])))
	$4 = *($1 + [60])
	if ( $4 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$4 = *($1 + [60])
	if ( ($4 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	*(($1 + [64])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [752])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [16663]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$6 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$8 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [16675]
	$7 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$14 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$8 = ($8 + [-91])
	goto $label$12 
	
.LABEL $label$14
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$10
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$9 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [16691]
	$2 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$20 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$8 = ($8 + [-91])
	goto $label$18 
	
.LABEL $label$20
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$16
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$2 = ((int_64)$9 | (int_64)$2)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$15 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)$1 == (int_64)8580649359541278000) ){ goto $label$21 }
	if ( ((int_64)$1 != (int_64)4229609169547957552) ){ goto $label$7 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [16675]
	$7 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$27 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$8 = ($8 + [-91])
	goto $label$25 
	
.LABEL $label$27
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$23
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$22 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [16714]
	$2 = (int_64)0
	
.LOOP $label$28:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$29 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$8 = ($8 + [-91])
	goto $label$30 
	
.LABEL $label$31
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$29
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$2 = ((int_64)$5 | (int_64)$2)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$28 }
	goto $label$7 
	
.LABEL $label$21
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [16675]
	$7 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$37 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$8 = ($8 + [-91])
	goto $label$35 
	
.LABEL $label$37
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$33
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$32 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [16703]
	$2 = (int_64)0
	
.LOOP $label$38:
	if ( ((uint_64)$4 > (uint_64)(int_64)9) ){ goto $label$43 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$8 = ($8 + [-91])
	goto $label$41 
	
.LABEL $label$43
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$39
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$2 = ((int_64)$9 | (int_64)$2)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$38 }
	
.LABEL $label$7
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [16663]
	$7 = (int_64)0
	
.LOOP $label$44:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$49 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$8 = ($8 + [-91])
	goto $label$47 
	
.LABEL $label$49
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$45
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$44 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$52 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [16691]
	$7 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$58 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$8 = ($8 + [-91])
	goto $label$56 
	
.LABEL $label$58
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$54
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$53 }
	if ( ((int_64)$2 == (int_64)$7) ){ goto $label$51 }
	
.LABEL $label$52
	if ( ((int_64)$1 == (int_64)8580649359541278000) ){ goto $label$60 }
	if ( ((int_64)$1 != (int_64)4229609169547957552) ){ goto $label$59 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [16714]
	$7 = (int_64)0
	
.LOOP $label$61:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$62 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$64 }
	$8 = ($8 + [-91])
	goto $label$63 
	
.LABEL $label$64
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$63
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$62
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$61 }
	if ( ((int_64)$2 == (int_64)$7) ){ goto $label$51 }
	goto $label$59 
	
.LABEL $label$60
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [16703]
	$7 = (int_64)0
	
.LOOP $label$65:
	if ( ((uint_64)$4 > (uint_64)(int_64)9) ){ goto $label$70 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$8 = ($8 + [-91])
	goto $label$68 
	
.LABEL $label$70
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$69
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$67
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$66
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$65 }
	if ( ((int_64)$2 == (int_64)$7) ){ goto $label$51 }
	
.LABEL $label$59
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$50 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [16714]
	$7 = (int_64)0
	
.LOOP $label$71:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$72 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$74 }
	$8 = ($8 + [-91])
	goto $label$73 
	
.LABEL $label$74
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$73
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$72
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$71 }
	if ( ((int_64)$2 == (int_64)$7) ){ goto $label$50 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [16691]
	$7 = (int_64)0
	
.LOOP $label$75:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$80 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$79 }
	$8 = ($8 + [-91])
	goto $label$78 
	
.LABEL $label$80
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$79
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$78
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$77
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$76
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$75 }
	if ( ((int_64)$2 == (int_64)$7) ){ goto $label$50 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [16703]
	$7 = (int_64)0
	
.LOOP $label$81:
	if ( ((uint_64)$4 > (uint_64)(int_64)9) ){ goto $label$86 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$85 }
	$8 = ($8 + [-91])
	goto $label$84 
	
.LABEL $label$86
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$85
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$84
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$83
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$82
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$81 }
	if ( ((int_64)$2 == (int_64)$7) ){ goto $label$50 }
	
.LABEL $label$51
	$6 = CALL $5(($3 + [416]), $0)
	if ( ((int_64)$2 > (int_64)-3073298666878926849) ){ goto $label$112 }
	if ( ((int_64)$2 <= (int_64)-4992623611555610625) ){ goto $label$111 }
	if ( ((int_64)$2 <= (int_64)-4157661383434960897) ){ goto $label$109 }
	if ( ((int_64)$2 > (int_64)-3102536759825661953) ){ goto $label$105 }
	if ( ((int_64)$2 == (int_64)-4157661383434960896) ){ goto $label$103 }
	if ( ((int_64)$2 != (int_64)-3106564276286914560) ){ goto $label$87 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [1]
	*($3 + [176]) = *($3 + [232])
	CALL $7($6, ($3 + [176]))
	goto $label$87 
	
.LABEL $label$112
	if ( ((int_64)$2 <= (int_64)4921564810347675647) ){ goto $label$110 }
	if ( ((int_64)$2 <= (int_64)5454311842506244095) ){ goto $label$108 }
	if ( ((int_64)$2 > (int_64)6138858854829174271) ){ goto $label$104 }
	if ( ((int_64)$2 == (int_64)5454311842506244096) ){ goto $label$102 }
	if ( ((int_64)$2 != (int_64)5553761217329148576) ){ goto $label$87 }
	*($3 + [372]) = [0]
	*($3 + [368]) = [2]
	*($3 + [40]) = *($3 + [368])
	CALL $9($6, ($3 + [40]))
	goto $label$87 
	
.LABEL $label$111
	if ( ((int_64)$2 > (int_64)-4998252997944279041) ){ goto $label$107 }
	if ( ((int_64)$2 == (int_64)-8281838239757631488) ){ goto $label$101 }
	if ( ((int_64)$2 == (int_64)-5894534441266577408) ){ goto $label$100 }
	if ( ((int_64)$2 != (int_64)-4998252998346932224) ){ goto $label$87 }
	*($3 + [340]) = [0]
	*($3 + [336]) = [3]
	*($3 + [72]) = *($3 + [336])
	CALL $11($6, ($3 + [72]))
	goto $label$87 
	
.LABEL $label$110
	if ( ((int_64)$2 > (int_64)-2111217016976850945) ){ goto $label$106 }
	if ( ((int_64)$2 == (int_64)-3073298666878926848) ){ goto $label$99 }
	if ( ((int_64)$2 == (int_64)-3020375782817005568) ){ goto $label$98 }
	if ( ((int_64)$2 != (int_64)-2115976827699724288) ){ goto $label$87 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [4]
	*($3 + [192]) = *($3 + [216])
	CALL $13($6, ($3 + [192]))
	goto $label$87 
	
.LABEL $label$109
	if ( ((int_64)$2 == (int_64)-4992623611555610624) ){ goto $label$97 }
	if ( ((int_64)$2 == (int_64)-4992121834821386240) ){ goto $label$96 }
	if ( ((int_64)$2 != (int_64)-4165152184356306944) ){ goto $label$87 }
	*($3 + [324]) = [0]
	*($3 + [320]) = [5]
	*($3 + [88]) = *($3 + [320])
	CALL $15($6, ($3 + [88]))
	goto $label$87 
	
.LABEL $label$108
	if ( ((int_64)$2 == (int_64)4921564810347675648) ){ goto $label$95 }
	if ( ((int_64)$2 == (int_64)5445040700864217088) ){ goto $label$94 }
	if ( ((int_64)$2 != (int_64)5445042013936473456) ){ goto $label$87 }
	*($3 + [404]) = [0]
	*($3 + [400]) = [6]
	*($3 + [8]) = *($3 + [400])
	CALL $17($6, ($3 + [8]))
	goto $label$87 
	
.LABEL $label$107
	if ( ((int_64)$2 == (int_64)-4998252997944279040) ){ goto $label$93 }
	if ( ((int_64)$2 == (int_64)-4994048603321270272) ){ goto $label$92 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$87 }
	*($3 + [292]) = [0]
	*($3 + [288]) = [7]
	*($3 + [120]) = *($3 + [288])
	CALL $19($6, ($3 + [120]))
	goto $label$87 
	
.LABEL $label$106
	if ( ((int_64)$2 == (int_64)-2111217016976850944) ){ goto $label$91 }
	if ( ((int_64)$2 == (int_64)3724085270811770880) ){ goto $label$90 }
	if ( ((int_64)$2 != (int_64)4297296061627629568) ){ goto $label$87 }
	*($3 + [276]) = [0]
	*($3 + [272]) = [8]
	*($3 + [136]) = *($3 + [272])
	CALL $15($6, ($3 + [136]))
	goto $label$87 
	
.LABEL $label$105
	if ( ((int_64)$2 == (int_64)-3102536759825661952) ){ goto $label$89 }
	if ( ((int_64)$2 != (int_64)-3075276113672257536) ){ goto $label$87 }
	*($3 + [268]) = [0]
	*($3 + [264]) = [9]
	*($3 + [144]) = *($3 + [264])
	CALL $22($6, ($3 + [144]))
	goto $label$87 
	
.LABEL $label$104
	if ( ((int_64)$2 == (int_64)8428183963073163264) ){ goto $label$88 }
	if ( ((int_64)$2 != (int_64)6138858854829174272) ){ goto $label$87 }
	*($3 + [412]) = [0]
	*($3 + [408]) = [10]
	*($3) = *($3 + [408])
	CALL $17($6, $3)
	goto $label$87 
	
.LABEL $label$103
	*($3 + [356]) = [0]
	*($3 + [352]) = [11]
	*($3 + [56]) = *($3 + [352])
	CALL $25($6, ($3 + [56]))
	goto $label$87 
	
.LABEL $label$102
	*($3 + [380]) = [0]
	*($3 + [376]) = [12]
	*($3 + [32]) = *($3 + [376])
	CALL $27($6, ($3 + [32]))
	goto $label$87 
	
.LABEL $label$101
	*($3 + [244]) = [0]
	*($3 + [240]) = [13]
	*($3 + [168]) = *($3 + [240])
	CALL $7($6, ($3 + [168]))
	goto $label$87 
	
.LABEL $label$100
	*($3 + [316]) = [0]
	*($3 + [312]) = [14]
	*($3 + [96]) = *($3 + [312])
	CALL $15($6, ($3 + [96]))
	goto $label$87 
	
.LABEL $label$99
	*($3 + [212]) = [0]
	*($3 + [208]) = [15]
	*($3 + [200]) = *($3 + [208])
	CALL $31($6, ($3 + [200]))
	goto $label$87 
	
.LABEL $label$98
	*($3 + [260]) = [0]
	*($3 + [256]) = [16]
	*($3 + [152]) = *($3 + [256])
	CALL $22($6, ($3 + [152]))
	goto $label$87 
	
.LABEL $label$97
	*($3 + [284]) = [0]
	*($3 + [280]) = [17]
	*($3 + [128]) = *($3 + [280])
	CALL $34($6, ($3 + [128]))
	goto $label$87 
	
.LABEL $label$96
	*($3 + [252]) = [0]
	*($3 + [248]) = [18]
	*($3 + [160]) = *($3 + [248])
	CALL $25($6, ($3 + [160]))
	goto $label$87 
	
.LABEL $label$95
	*($3 + [308]) = [0]
	*($3 + [304]) = [19]
	*($3 + [104]) = *($3 + [304])
	CALL $11($6, ($3 + [104]))
	goto $label$87 
	
.LABEL $label$94
	*($3 + [396]) = [0]
	*($3 + [392]) = [20]
	*($3 + [16]) = *($3 + [392])
	CALL $38($6, ($3 + [16]))
	goto $label$87 
	
.LABEL $label$93
	*($3 + [332]) = [0]
	*($3 + [328]) = [21]
	*($3 + [80]) = *($3 + [328])
	CALL $11($6, ($3 + [80]))
	goto $label$87 
	
.LABEL $label$92
	*($3 + [364]) = [0]
	*($3 + [360]) = [22]
	*($3 + [48]) = *($3 + [360])
	CALL $11($6, ($3 + [48]))
	goto $label$87 
	
.LABEL $label$91
	*($3 + [388]) = [0]
	*($3 + [384]) = [23]
	*($3 + [24]) = *($3 + [384])
	CALL $17($6, ($3 + [24]))
	goto $label$87 
	
.LABEL $label$90
	*($3 + [228]) = [0]
	*($3 + [224]) = [24]
	*($3 + [184]) = *($3 + [224])
	CALL $43($6, ($3 + [184]))
	goto $label$87 
	
.LABEL $label$89
	*($3 + [348]) = [0]
	*($3 + [344]) = [25]
	*($3 + [64]) = *($3 + [344])
	CALL $25($6, ($3 + [64]))
	goto $label$87 
	
.LABEL $label$88
	*($3 + [300]) = [0]
	*($3 + [296]) = [26]
	*($3 + [112]) = *($3 + [296])
	CALL $11($6, ($3 + [112]))
	
.LABEL $label$87
	CALL $46($6)
	
.LABEL $label$50
	CALL $314([0])
	$global$0 = ($3 + [752])
}

void .FUNC $276 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18132])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $261(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18132])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18132])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $69(*($1), *($0 + [36]))
	CALL $69(*($1), *($0 + [40]))
	CALL $69(*($1), *($0 + [44]))
	CALL $69(*($1), *($0 + [48]))
}

int_32 .FUNC $221 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [18328])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [18328])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [18328])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [18328])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18328])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18328])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $5 (int_32 $0, int_64 $1)
{
	int_32 $2
	*($0 + [8]) = $1
	*($0) = $1
	*($0 + [48]) = $1
	*($0 + [88]) = $1
	*(($0 + [16])) = $1
	*(($0 + [24])) = (int_64)-1
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = [0]
	*(($0 + [56])) = $1
	*(($0 + [64])) = (int_64)-1
	*(($0 + [72])) = (int_64)0
	*(($0 + [80])) = [0]
	*(($0 + [84])) = [0]
	*(($0 + [96])) = $1
	*(($0 + [104])) = (int_64)-1
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = [0]
	*(($0 + [124])) = [0]
	*(($0 + [136])) = $1
	*($0 + [128]) = $1
	*(($0 + [144])) = (int_64)-1
	*(($0 + [152])) = (int_64)0
	*(($0 + [160])) = [0]
	*(($0 + [164])) = [0]
	*($0 + [168]) = $1
	*(($0 + [176])) = $1
	*(($0 + [184])) = $1
	*(($0 + [192])) = (int_64)-1
	*(($0 + [200])) = (int_64)0
	*(($0 + [208])) = [0]
	*(($0 + [216])) = $1
	*(($0 + [224])) = $1
	*(($0 + [232])) = (int_64)-1
	*(($0 + [240])) = (int_64)0
	*(($0 + [248])) = [0]
	*(($0 + [252])) = [0]
	*(($0 + [264])) = $1
	*(($0 + [256])) = $1
	*(($0 + [272])) = (int_64)-1
	*(($0 + [280])) = (int_64)0
	*(($0 + [288])) = [0]
	*(($0 + [292])) = [0]
	*(($0 + [296])) = $1
	*(($0 + [304])) = $1
	*(($0 + [312])) = (int_64)-1
	*(($0 + [320])) = (int_64)0
	*(($0 + [328])) = [0]
	*(($2 = CALL _Znwj([168])) + [24]) = (int_64)-1
	*($2 + [32 align=4]) = (int_64)0
	*($2 + [40]) = [0]
	*($2 + [64]) = (int_64)-1
	*($2 + [72 align=4]) = (int_64)0
	*($2 + [80]) = [0]
	*($2 + [104]) = (int_64)-1
	*($2 + [112 align=4]) = (int_64)0
	*($2 + [120]) = [0]
	$1 = *($0)
	*($2) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = $1
	*($2 + [88]) = $1
	*($2 + [96]) = $1
	*($2 + [128]) = $1
	*($2 + [144]) = (int_64)-1
	*($2 + [136]) = $1
	*($2 + [152 align=4]) = (int_64)0
	*($2 + [160]) = [0]
	*([0] + [8216]) = $2
	*(($2 = CALL _Znwj([224])) + [24]) = (int_64)-1
	*($2 + [32 align=4]) = (int_64)0
	*($2 + [40]) = [0]
	*($2 + [64]) = (int_64)-1
	*($2 + [72 align=4]) = (int_64)0
	*($2 + [80]) = [0]
	*($2 + [104]) = (int_64)-1
	*($2 + [112 align=4]) = (int_64)0
	*($2 + [120]) = [0]
	$1 = *($0)
	*($2) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = $1
	*($2 + [88]) = $1
	*($2 + [96]) = $1
	*($2 + [128]) = $1
	*($2 + [144]) = (int_64)-1
	*($2 + [136]) = $1
	*($2 + [152 align=4]) = (int_64)0
	*($2 + [160]) = [0]
	*($2 + [164]) = [0]
	*($2 + [168]) = $1
	*($2 + [176]) = $1
	*($2 + [184]) = (int_64)-1
	*($2 + [192 align=4]) = (int_64)0
	*($2 + [200]) = [0]
	*($2 + [208 align=4]) = (int_64)0
	*($2 + [216]) = [0]
	*([0] + [8220]) = $2
	*(($2 = CALL _Znwj([88])) + [24]) = (int_64)-1
	*($2 + [32 align=4]) = (int_64)0
	*($2 + [40]) = [0]
	*($2 + [64]) = (int_64)-1
	*($2 + [72 align=4]) = (int_64)0
	*($2 + [80]) = [0]
	*([0] + [8224]) = $2
	$1 = *($0)
	*($2) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = $1
	return $0
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [18132])
	CALL memcpy($4, $2, [8])
	*($4 + [12]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)5374672172221612032
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)5374672172221612032
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $228(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $312($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $189 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	$6 = *($1)
	*((*($1 + [8]) + (*(*($3)) << [3]))) = *(*($3 + [4]))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [18269])
	$3 = [8]
	$7 = ($1 + [8])
	$9 = *($1 + [8])
	$8 = *(($1 + [12]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$2 }
	$3 = (($10 & [-8]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $324($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [18328])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	CALL $216($5, $7)
	CALL db_update_i64(*($1 + [24]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $327($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_32 .FUNC $188 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18132])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $211(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $244(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	$2 = *($0)
	$3 = uint_32($2 >> [1])
	$4 = *($0 + [12])
	$5 = ($2 & [1])
	if ( $5 ){ goto $label$4 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$3 }
	$6 = ($0 + [12])
	
.LOOP $label$5:
	if ( ((int_32)*((($0 + $4) + [1])) != (int_32)[32]) ){ goto $label$3 }
	$4 = ($4 + [1])
	*($6) = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$6 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$3 }
	$7 = ($0 + [8])
	$8 = ($0 + [12])
	
.LOOP $label$6:
	if ( ((int_32)*((*($7) + $4)) != (int_32)[32]) ){ goto $label$3 }
	$4 = ($4 + [1])
	*($8) = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$3
	if ( ($5 == 0) ){ goto $label$7 }
	$3 = *(($0 + [4]))
	
.LABEL $label$7
	$7 = [-1]
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$9 }
	$5 = ($0 + [1])
	$8 = ($0 + [12])
	$9 = ($0 + [8])
	$10 = ($0 + [4])
	$7 = ($2 & [1])
	if ( $7 ){ goto $label$10 }
	$11 = [5]
	goto $label$8 
	
.LABEL $label$10
	$11 = [0]
	goto $label$8 
	
.LABEL $label$9
	$11 = [11]
	
.LABEL $label$8
	
.LOOP $label$11:
	goto $label$37 
	
.LABEL $label$42
	CALL $304($1, int_32(($4 << [24]) >> [24]))
	$4 = *($8)
	$2 = *($0)
	$7 = ($2 & [1])
	if ( $7 ){ goto $label$25 }
	$11 = [5]
	goto $label$11 
	
.LABEL $label$41
	if ( ((int_32)$4 == (int_32)uint_32(($2 & [254]) >> [1])) ){ goto $label$23 }
	$11 = [1]
	goto $label$11 
	
.LABEL $label$40
	$6 = ($4 + [1])
	*($8) = $6
	$3 = $5
	if ( ($7 == 0) ){ goto $label$22 }
	$11 = [2]
	goto $label$11 
	
.LABEL $label$39
	$3 = *($9)
	$11 = [3]
	goto $label$11 
	
.LABEL $label$38
	$4 = *(($3 + $4))
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$37
	if ( ((int_32)$4 != (int_32)*($10)) ){ goto $label$24 }
	$11 = [6]
	goto $label$11 
	
.LABEL $label$36
	$6 = $4
	$11 = [7]
	goto $label$11 
	
.LABEL $label$35
	if ( $7 ){ goto $label$19 }
	$11 = [13]
	goto $label$11 
	
.LABEL $label$34
	$7 = [0]
	$3 = uint_32(($2 & [254]) >> [1])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$16 }
	$11 = [14]
	goto $label$11 
	
.LABEL $label$33
	$4 = ($6 + [1])
	$7 = [0]
	$3 = ([0] - $3)
	$6 = ($0 + [12])
	$11 = [15]
	goto $label$11 
	
.LABEL $label$32
	if ( ((int_32)*(($0 + $4)) != (int_32)[32]) ){ goto $label$15 }
	$11 = [16]
	goto $label$11 
	
.LABEL $label$31
	*($6) = $4
	$4 = ($4 + [1])
	if ( ((int_32)($3 + $4) != (int_32)[1]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$30
	$7 = [0]
	$4 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$18 }
	$11 = [9]
	goto $label$11 
	
.LABEL $label$29
	$3 = ($0 + [8])
	$0 = ($0 + [12])
	$11 = [10]
	goto $label$11 
	
.LABEL $label$28
	if ( ((int_32)*((*($3) + $6)) != (int_32)[32]) ){ goto $label$12 }
	$11 = [12]
	goto $label$11 
	
.LABEL $label$27
	$6 = ($6 + [1])
	*($0) = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$17 }
	$11 = [11]
	goto $label$11 
	
.LABEL $label$26
	return $7
	
.LABEL $label$25
	$11 = [0]
	goto $label$11 
	
.LABEL $label$24
	$11 = [1]
	goto $label$11 
	
.LABEL $label$23
	$11 = [6]
	goto $label$11 
	
.LABEL $label$22
	$11 = [3]
	goto $label$11 
	
.LABEL $label$21
	$11 = [7]
	goto $label$11 
	
.LABEL $label$20
	$11 = [4]
	goto $label$11 
	
.LABEL $label$19
	$11 = [8]
	goto $label$11 
	
.LABEL $label$18
	$11 = [11]
	goto $label$11 
	
.LABEL $label$17
	$11 = [10]
	goto $label$11 
	
.LABEL $label$16
	$11 = [11]
	goto $label$11 
	
.LABEL $label$15
	$11 = [11]
	goto $label$11 
	
.LABEL $label$14
	$11 = [11]
	goto $label$11 
	
.LABEL $label$13
	$11 = [15]
	goto $label$11 
	
.LABEL $label$12
	$11 = [11]
	goto $label$11 
	return $11
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $298(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $298(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $264 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = ($global$0 - [48])
	$global$0 = $6
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$8 = (*(*($0)) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($8) + $0))
	
.LABEL $label$1
	$5 = CALL $298($6, $5)
	$4 = CALL $298(($6 + [16]), $4)
	$3 = CALL $298(($6 + [32]), $3)
	CALL void $8((int_32 $1), (int_64 $2), (int_64 $3), (int_32 $4), (int_32 $5), (int_32 $0))
	if ( (*($5) & [1]) ){ goto $label$6 }
	if ( (*($4) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($3) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($6 + [48])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($6 + [48])
}

void .FUNC memory ()
{
}

void .FUNC $266 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $312($0)
}

void .FUNC $236 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	CALL $216(*($1), *($0))
	CALL $216(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $324($5)
	CALL read_action_data($2, $5)
	CALL $327($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

void .FUNC $42 (int_32 $0)
{
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$5 = ($global$0 - [144])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	$2 = *($3 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)4544260), [17504])
	$7 = [0]
	$8 = *($3)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$2 = $6
	$7 = [1]
	$10 = $9
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$2 = $6
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$9 < (int_32)[6])
	$10 = ($9 + [1])
	$9 = $10
	if ( $7 ){ goto $label$6 }
	$7 = [1]
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [17415])
	CALL eosio_assert(((int_64)$8 > (int_64)99999), [17522])
	CALL $298(($5 + [128]), $4)
	*($5 + [140]) = [0]
	*($5 + [120]) = [0]
	*($5 + [112]) = (int_64)0
	CALL eosio_assert((CALL $49(($5 + [128]), ($5 + [112])) == 0), [17479])
	$9 = *($5 + [112])
	$7 = CALL $323([16675])
	if ( ((int_32)$7 != (int_32)( *($5 + [116]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$10 }
	if ( (CALL $305(($5 + [112]), [0], [-1], [16675], $7) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$9 = *($5 + [112])
	$7 = CALL $323([17537])
	if ( ((int_32)$7 != (int_32)( *($5 + [116]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$13 }
	if ( (CALL $305(($5 + [112]), [0], [-1], [17537], $7) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$9 = *($5 + [112])
	$7 = CALL $323([17104])
	if ( ((int_32)$7 != (int_32)( *($5 + [116]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$14 }
	if ( (CALL $305(($5 + [112]), [0], [-1], [17104], $7) == 0) ){ goto $label$11 }
	
.LABEL $label$14
	$9 = *($5 + [112])
	$7 = CALL $323([17275])
	if ( ((int_32)$7 != (int_32)( *($5 + [116]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$9 }
	if ( CALL $305(($5 + [112]), [0], [-1], [17275], $7) ){ goto $label$9 }
	CALL require_auth($1)
	*(($7 = (($5 + [48]) + [8]))) = *(($3 + [8]))
	*($5 + [48]) = *($3)
	$9 = CALL $298(($5 + [32]), $4)
	*((($5 + [16]) + [8])) = *($7)
	*($5 + [16]) = *($5 + [48])
	CALL $53(($0 + [168]), $1, $2, ($5 + [16]), $9)
	if ( ((*($9) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($9 + [8]))
	$9 = [1]
	if ( (*($5 + [112]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$12
	*($5 + [104]) = [0]
	*($5 + [96]) = (int_64)0
	CALL eosio_assert((CALL $49(($5 + [128]), ($5 + [96])) == 0), [17542])
	$0 = ($9 & [1])
	$9 = *($5 + [96])
	$10 = ( *($5 + [100]) ? uint_32($9 >> [1]) : $0 )
	if ( ((uint_32)$10 > (uint_32)[12]) ){ goto $label$16 }
	if ( ($10 == 0) ){ goto $label$18 }
	$3 = ( *(($5 + [104])) ? (($5 + [96]) | [1]) : $0 )
	$9 = [0]
	
.LOOP $label$19:
	$7 = *(($3 + $9))
	if ( ((($7 + [-97]) & [255]) <= [26]) ){ goto $label$20 }
	if ( (($7 + [-49]) <= [5]) ){ goto $label$20 }
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$17 }
	
.LABEL $label$20
	$9 = ($9 + [1])
	if ( ($9 <= $10) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$9 = [0]
	
.LABEL $label$17
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$16 }
	$9 = ( *(($5 + [104])) ? (($5 + [96]) | [1]) : $0 )
	$7 = [0]
	
.LOOP $label$21:
	$10 = ($9 + $7)
	$3 = ($7 + [1])
	$7 = $3
	if ( *($10) ){ goto $label$21 }
	$11 = (CASTING uint_64)(uint_32 ($3 + [-1]))
	$2 = (int_64)0
	$6 = (int_64)59
	$12 = (int_64)0
	
.LOOP $label$22:
	$13 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$11) ){ goto $label$23 }
	$7 = *($9)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$7 = ($7 + [-91])
	goto $label$24 
	
.LABEL $label$25
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$27 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$26 
	
.LABEL $label$27
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$26
	$9 = ($9 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$22 }
	goto $label$15 
	
.LABEL $label$16
	CALL eosio_assert([0], [17566])
	
.LABEL $label$15
	CALL $58($9, $1, $12, $8)
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($5 + [104])))
	goto $label$9 
	
.LABEL $label$11
	*(($7 = (($5 + [80]) + [8]))) = *(($3 + [8]))
	*($5 + [80]) = *($3)
	$9 = CALL $298(($5 + [64]), $4)
	*(($5 + [8])) = *($7)
	*($5) = *($5 + [80])
	CALL $52($0, $1, $2, $5, $9)
	if ( ((*($9) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($9 + [8]))
	$9 = [1]
	if ( (*($5 + [112]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$9 = [1]
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($5 + [120])))
	
.LABEL $label$7
	if ( ((*($5 + [128]) & $9) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($5 + [136]))
	
.LABEL $label$1
	$global$0 = ($5 + [144])
}

void .FUNC $40 (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
	CALL $60(*([0] + [8220]), $1)
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [18132])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $69(*($1), ($0 + [32]))
}

int_32 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	CALL $327(*([0] + [8216]))
	CALL $327(*([0] + [8220]))
	CALL $327(*([0] + [8224]))
	CALL $85(($0 + [168]))
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [156])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$6
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$4 = *(($0 + [152]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$1
	CALL $86(($0 + [112]))
	CALL $87(($0 + [72]))
	$5 = *(($0 + [32]))
	if ( ($5 == 0) ){ goto $label$8 }
	$1 = ($0 + [36])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	$4 = *(($0 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$4 = $5
	
.LABEL $label$9
	*($1) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$8
	return $0
}

void .FUNC $45 (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
	CALL $68(*([0] + [8224]), $1)
}

void .FUNC $44 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth($1)
	$4 = *($2)
	$5 = *(($2 + [8]))
	*(($3 + [8])) = $5
	*((($3 + [16]) + [8])) = $5
	*($3) = $4
	*($3 + [16]) = $4
	CALL $62(*([0] + [8220]), $1, $3)
	$global$0 = ($3 + [32])
}

int_32 .FUNC $222 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18328])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18328])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18328])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $224(CALL $225($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $267 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = (*($2) + [48])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [16])
	*($2) = $1
	$3 = *($3)
	$3 = *($0 + [32])
	$4 = *($3 + [4])
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	$1 = ( $1 ? ($6 + $1) : ((int_32)$3 == (int_32)$4) )
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [36])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$4 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$5 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$5
	$4 = *($3)
	$3 = *($0 + [40])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$6:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$6 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$7
	$3 = *($0)
	$0 = *($0 + [44])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$8:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$8 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$9 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$9
	*($2) = ($1 + [1])
}

void .FUNC $234 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [12])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [16])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$12 }
	*($1 + [4]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $233 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	CALL $211(*($1), *($0))
	CALL $211(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $249 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	$6 = *($3)
	*($1) = *($6)
	$3 = [8]
	$7 = ($1 + [8])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$1 }
	CALL $215($7, *($6 + [8]), *(($6 + [12])))
	
.LABEL $label$1
	*($1 + [20 align=4]) = *($6 + [20 align=4])
	*(($1 + [28])) = *(($6 + [28]))
	CALL eosio_assert([1], [18269])
	$8 = ($1 + [20])
	$9 = *($1 + [8])
	$6 = *(($1 + [12]))
	$10 = ($6 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$3 }
	$3 = (($10 & [-8]) + $3)
	
.LABEL $label$3
	$6 = ($3 + [10])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$3 = CALL $324($6)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$4
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	*($5 + [16]) = $5
	*($5 + [28]) = $7
	*($5 + [32]) = $8
	*($5 + [24]) = $1
	*($5 + [36]) = ($1 + [21])
	*($5 + [40]) = ($1 + [24])
	CALL $252(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [36]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)-2121395625386200416) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $327($3)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-2121395625386200416) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = (int_64)-2121395625386200415
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [48])
}

void .FUNC $226 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	*($1) = *(*($3))
	CALL eosio_assert([1], [18269])
	CALL eosio_assert([1], [18328])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)5374672172221612032) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)5374672172221612033
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [40]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	CALL $245(($3 + [40]), ($3 + [32]))
	*($5 + [48]) = [-1]
	*($5 + [44]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $246(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $166 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	*($4 + [56]) = *($1 + [8])
	*($1 + [16]) = *(*($3))
	$5 = *($1)
	$6 = CALL current_time()
	*($1 + [32]) = [0]
	*($1 + [24]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [18269])
	*($4 + [48]) = ($4 + [33])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [64]) = ($4 + [40])
	$3 = ($1 + [8])
	*($4 + [76]) = $3
	*($4 + [72]) = $1
	*($4 + [80]) = ($1 + [16])
	*($4 + [84]) = ($1 + [24])
	*($4 + [88]) = ($1 + [32])
	CALL $248(($4 + [72]), ($4 + [64]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [33])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [72]) = *($3)
	if ( (CALL $322(($4 + [56]), ($4 + [72]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [48])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2110714446663909376, ($4 + [64]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [72]))
	
.LABEL $label$2
	$global$0 = ($4 + [96])
}

void .FUNC $165 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	*($1 + [8]) = (int_64))(*(*($3)) - *(*($3 + [4])))
	$5 = *($1)
	CALL eosio_assert([1], [18269])
	CALL eosio_assert([1], [18328])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18328])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $164 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18334])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $243(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $244(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [12])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $163 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18334])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $241($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $242(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $162 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	*($1 + [8]) = ((int_64)*(*($3 + [4])) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [18269])
	CALL eosio_assert([1], [18328])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18328])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $161 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-2110714446663909376, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [18054])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $167($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-2110714446663909376, $6))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [18054])
	
.LABEL $label$2
	*(($4 + [48])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18132])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18132])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $242(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $289 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $69(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18132])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18132])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18132])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $69(*($1), *($0 + [40]))
	CALL $69(*($1), *($0 + [44]))
	CALL $69(*($1), *($0 + [48]))
	$3 = *($0 + [52])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18132])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $230 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = (*($1 + [4]) - *($1))
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = int_32($2 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$2 }
	$2 = CALL _Znwj($2)
	*(($4 = ($0 + [4]))) = $2
	*(($0 + [8])) = ($2 + ($3 << [3]))
	*($0) = $2
	$5 = *($1)
	$3 = (*(($1 + [4])) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($2, $5, $3)
	*($4) = (*($4) + $3)
	
.LABEL $label$3
	*($0 + [12 align=4]) = (int_64)0
	*(($0 + [20])) = [0]
	$2 = (*(($1 + [16])) - *($1 + [12]))
	if ( ($2 == 0) ){ goto $label$4 }
	$4 = int_32($2 >> [3])
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$2 = CALL _Znwj($2)
	*(($0 + [12])) = $2
	*(($0 + [20])) = ($2 + ($4 << [3]))
	*(($4 = ($0 + [16]))) = $2
	$5 = *(($1 + [12]))
	$3 = (*(($1 + [16])) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $5, $3)
	*($4) = (*($4) + $3)
	
.LABEL $label$4
	*($0 + [24]) = *($1 + [24])
	*(($0 + [40])) = *(($1 + [40]))
	*(($0 + [32])) = *(($1 + [32]))
	return $0
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	CALL $312(($0 + [12]))
	(unreachable)
	return (unreachable)
}

void .FUNC $244 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $169 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18334])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [40]) = $1
	CALL $247(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $246(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $168 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18634])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-2110714446663909376)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18580])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18580])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $167(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $245 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18132])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $279 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $269(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18328])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $217(*($1), *($0 + [36]))
	CALL $217(*($1), *($0 + [40]))
	CALL $217(*($1), *($0 + [44]))
	CALL $217(*($1), *($0 + [48]))
}

int_32 .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [18132])
	CALL memcpy($4, $2, [8])
	*($4 + [12]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $290(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $242 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $288 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($0 + [48 align=4]) = (int_64)0
	*($0 + [64]) = (int_64)0
	$4 = [0]
	*(($0 + [56])) = [0]
	*(($5 = ($0 + [72]))) = (int_64)1398362884
	CALL eosio_assert([1], [17985])
	$6 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$5 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [18034])
	*($0 + [84 align=4]) = (int_64)0
	*(($0 + [92])) = (int_64)0
	*(($0 + [100])) = (int_64)0
	*($0 + [108 align=4]) = (int_64)0
	*(($0 + [116])) = [0]
	*($0 + [124]) = $1
	*($3) = *($2 + [4])
	*($3 + [12]) = ($0 + [8])
	*($3 + [8]) = $0
	*($3 + [16]) = ($0 + [16])
	*($3 + [20]) = ($0 + [24])
	*($3 + [24]) = ($0 + [32])
	*($3 + [28]) = ($0 + [40])
	*($3 + [32]) = ($0 + [48])
	*($3 + [36]) = ($0 + [64])
	*($3 + [40]) = ($0 + [80])
	*($3 + [44]) = ($0 + [81])
	*($3 + [48]) = ($0 + [84])
	*($3 + [52]) = ($0 + [96])
	*($3 + [56]) = ($0 + [108])
	*($3 + [60]) = ($0 + [120])
	CALL $289(($3 + [8]), $3)
	*($0 + [128]) = *(*($2 + [8]))
	*($0 + [132]) = [-1]
	$global$0 = ($3 + [64])
	return $0
}

void .FUNC $243 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1) = *(*(*($0 + [4])))
	$4 = [8]
	$5 = ($1 + [8])
	$6 = *($0)
	$9 = *($1 + [8])
	$7 = ($1 + [12])
	$8 = *($7)
	$10 = int_32(($8 - $9) >> [3])
	if ( ((uint_32)$10 > (uint_32)[2]) ){ goto $label$2 }
	$9 = ([2] - $10)
	*($3) = (int_64)0
	$10 = ($1 + [16])
	if ( ((uint_32)$8 >= (uint_32)*($10)) ){ goto $label$3 }
	$11 = [2]
	goto $label$1 
	
.LABEL $label$3
	$11 = [0]
	goto $label$1 
	
.LABEL $label$2
	$11 = [4]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$29 
	
.LABEL $label$31
	$9 = ($9 + [-1])
	$8 = *($7)
	*($3) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)*($10)) ){ goto $label$15 }
	$11 = [2]
	goto $label$4 
	
.LABEL $label$30
	*($8) = (int_64)0
	*($7) = ($8 + [8])
	if ( $9 ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$29
	CALL $3($5, $3)
	if ( $9 ){ goto $label$14 }
	$11 = [3]
	goto $label$4 
	
.LABEL $label$28
	$9 = *(($1 + [8]))
	$8 = *(($1 + [12]))
	$10 = int_32(($8 - $9) >> [3])
	$11 = [4]
	goto $label$4 
	
.LABEL $label$27
	$12 = (CASTING uint_64)(uint_32 $10)
	$11 = [5]
	goto $label$4 
	
.LABEL $label$26
	$4 = ($4 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$11 }
	$11 = [6]
	goto $label$4 
	
.LABEL $label$25
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$10 }
	$11 = [7]
	goto $label$4 
	
.LABEL $label$24
	$4 = ((($8 - $9) & [-8]) + $4)
	$11 = [8]
	goto $label$4 
	
.LABEL $label$23
	if ( ($4 <= [513]) ){ goto $label$9 }
	$11 = [15]
	goto $label$4 
	
.LABEL $label$22
	$8 = CALL $324($4)
	goto $label$8 
	
.LABEL $label$21
	$8 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $8
	$11 = [10]
	goto $label$4 
	
.LABEL $label$20
	*($3) = $8
	*($3 + [8]) = ($8 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [18328])
	CALL memcpy($8, $1, [8])
	*($3 + [4]) = ($8 + [8])
	CALL $216($3, $5)
	$12 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($6 + [8]), (int_64)-2111744841675901568, *(*($0 + [8])), $12, $8, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	$11 = [11]
	goto $label$4 
	
.LABEL $label$19
	if ( ((uint_64)$12 >= (uint_64)*($6 + [16])) ){ goto $label$6 }
	$11 = [13]
	goto $label$4 
	
.LABEL $label$18
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$17
	CALL $327($8)
	if ( (uint_64)($12 <= *($6 + [16])) ){ goto $label$5 }
	$11 = [12]
	goto $label$4 
	
.LABEL $label$16
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$15
	$11 = [0]
	goto $label$4 
	
.LABEL $label$14
	$11 = [1]
	goto $label$4 
	
.LABEL $label$13
	$11 = [3]
	goto $label$4 
	
.LABEL $label$12
	$11 = [1]
	goto $label$4 
	
.LABEL $label$11
	$11 = [5]
	goto $label$4 
	
.LABEL $label$10
	$11 = [8]
	goto $label$4 
	
.LABEL $label$9
	$11 = [9]
	goto $label$4 
	
.LABEL $label$8
	$11 = [10]
	goto $label$4 
	
.LABEL $label$7
	$11 = [14]
	goto $label$4 
	
.LABEL $label$6
	$11 = [12]
	goto $label$4 
	
.LABEL $label$5
	$11 = [13]
	goto $label$4 
	$11
}

void .FUNC $58 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL require_auth($1)
	CALL eosio_assert(((uint_64)$3 > (uint_64)(int_64)499999), [17902])
	$5 = *([0] + [8216])
	$1 = (int_64)0
	$6 = (int_64)59
	$7 = [17921]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$2 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$10 = ($10 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$1 }
	*($4 + [40]) = (int_64)4544260
	*($4 + [32]) = $3
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17985])
	$1 = (int_64)17751
	$7 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$1 = $6
	$10 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$1 = $6
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $10 ){ goto $label$9 }
	$10 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$10 = [0]
	
.LABEL $label$5
	CALL eosio_assert($10, [18034])
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	$7 = CALL $323([17934])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$13 }
	*($4 + [16]) = ($7 << [1])
	$10 = (($4 + [16]) | [1])
	if ( $7 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$11 = (($7 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($4 + [16]) = ($11 | [1])
	*($4 + [24]) = $10
	*($4 + [20]) = $7
	
.LABEL $label$12
	CALL memcpy($10, [17934], $7)
	
.LABEL $label$11
	*(($10 + $7)) = [0]
	*(($4 + [8])) = *((($4 + [32]) + [8]))
	*($4) = *($4 + [32])
	CALL $54($5, $8, $4, ($4 + [16]))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($4 + [24]))
	
.LABEL $label$14
	CALL $158(*([0] + [8216]), $2, $3)
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$10
	CALL $297(($4 + [16]))
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	float_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	float_64 $18
	int_32 $19
	float_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL $135(($4 + [176]), $0)
	CALL $146(($4 + [144]), $0)
	*($4 + [136]) = [0]
	*($4 + [128]) = (int_64)0
	$5 = [2]
	$6 = [0]
	*($4 + [64]) = (int_64)0
	if ( ((uint_32)[0] >= (uint_32)[0]) ){ goto $label$2 }
	$8 = [2]
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$106 
	
.LABEL $label$108
	$5 = ($5 + [-1])
	$7 = *((($4 + [128]) + [8]))
	$6 = *($4 + [132])
	*($4 + [64]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)$7) ){ goto $label$47 }
	$8 = [2]
	goto $label$3 
	
.LABEL $label$107
	*($6) = (int_64)0
	*($4 + [132]) = ($6 + [8])
	if ( $5 ){ goto $label$44 }
	goto $label$45 
	
.LABEL $label$106
	CALL $3(($4 + [128]), ($4 + [64]))
	if ( $5 ){ goto $label$46 }
	$8 = [3]
	goto $label$3 
	
.LABEL $label$105
	CALL eosio_assert(((int_32)*($4 + [165]) == (int_32)$1), [19026])
	$5 = *($4 + [164])
	if ( ($1 == 0) ){ goto $label$43 }
	$8 = [4]
	goto $label$3 
	
.LABEL $label$104
	CALL eosio_assert($5, [19041])
	$6 = *($4 + [152])
	*(($5 = *($4 + [128]))) = *($6)
	*($5 + [8]) = *($6 + [8])
	*($5 + [16]) = *($6 + [16])
	$9 = ($0 + [8])
	$10 = *($4 + [144])
	goto $label$42 
	
.LABEL $label$103
	CALL eosio_assert(($5 == 0), [18463])
	$5 = *(( ($4 + [176]) ? ($4 + [188]) : $2 ))
	$10 = ((int_64)((uint_64)*($5) / (uint_64)(int_64)100) * (int_64)$3)
	*(($6 = *($4 + [128]))) = $10
	*($5) = (int_64))(*($5) - $10)
	$10 = ((int_64)((uint_64)*($5 + [8]) / (uint_64)(int_64)100) * (int_64)$3)
	*($6 + [8]) = $10
	*($5 + [8]) = (int_64))(*($5 + [8]) - $10)
	$10 = ((int_64)((uint_64)*($5 + [16]) / (uint_64)(int_64)100) * (int_64)$3)
	*($6 + [16]) = $10
	*($5 + [16]) = (int_64))(*($5 + [16]) - $10)
	CALL $136(($0 + [88]), ($4 + [176]), *($0))
	$6 = *($4 + [128])
	*(($5 = *($4 + [152]))) = *($6)
	*($5 + [8]) = *($6 + [8])
	*($5 + [16]) = *($6 + [16])
	*(($4 + [165])) = [0]
	$9 = ($0 + [8])
	$5 = CALL $160($9, CALL $fimport$15(*($0 + [8]), *(($0 + [16])), (int_64)-2111744841804152832, (int_64)0))
	*(($4 + [164])) = [1]
	$10 = *($5)
	*($4 + [144]) = $10
	$8 = [5]
	goto $label$3 
	
.LABEL $label$102
	$11 = *($4 + [208])
	$6 = *(($0 + [36]))
	$7 = *(($0 + [32]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$41 }
	$8 = [6]
	goto $label$3 
	
.LABEL $label$101
	$8 = [7]
	goto $label$3 
	
.LABEL $label$100
	$5 = ($6 + [-24])
	$12 = *($5)
	if ( ((int_64)*($12) == (int_64)$10) ){ goto $label$38 }
	$8 = [8]
	goto $label$3 
	
.LABEL $label$99
	$6 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$39 }
	goto $label$40 
	
.LABEL $label$98
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$37 }
	$8 = [59]
	goto $label$3 
	
.LABEL $label$97
	CALL eosio_assert(((int_32)*($12 + [16]) == (int_32)$9), [18054])
	goto $label$35 
	
.LABEL $label$96
	$12 = [0]
	$5 = CALL db_find_i64(*($0 + [8]), *(($0 + [16])), (int_64)-2111744841804152832, $10)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$36 }
	$8 = [10]
	goto $label$3 
	
.LABEL $label$95
	$12 = CALL $160($9, $5)
	CALL eosio_assert(((int_32)*($12 + [16]) == (int_32)$9), [18054])
	$8 = [11]
	goto $label$3 
	
.LABEL $label$94
	$13 = [0]
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [19065])
	$7 = ($0 + [48])
	$14 = (CASTING float_64)(uint_64 $11)
	$15 = ($0 + [76])
	$16 = ($0 + [72])
	$17 = ($0 + [56])
	$8 = [12]
	goto $label$3 
	
.LABEL $label$93
	if ( ($12 == 0) ){ goto $label$31 }
	$8 = [13]
	goto $label$3 
	
.LABEL $label$92
	$10 = *($12 + [8])
	if ( ((int_64)$10 == (int_64)0) ){ goto $label$30 }
	$8 = [14]
	goto $label$3 
	
.LABEL $label$91
	$18 = (CASTING float_64)(uint_64 $10)
	$10 = *($12)
	$1 = *($15)
	$19 = *($16)
	if ( ((int_32)$19 == (int_32)$1) ){ goto $label$27 }
	$8 = [15]
	goto $label$3 
	
.LABEL $label$90
	$5 = ($1 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$10) ){ goto $label$26 }
	$8 = [16]
	goto $label$3 
	
.LABEL $label$89
	$1 = $5
	if ( ((int_32)$19 != (int_32)$5) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$88
	CALL eosio_assert([1], [18806])
	$5 = *($12 + [20])
	$12 = [0]
	$5 = CALL db_next_i64($5, ($4 + [64]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$18 }
	$8 = [57]
	goto $label$3 
	
.LABEL $label$87
	$12 = CALL $160($9, $5)
	$13 = ($13 + [1])
	if ( ($13 <= [200]) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$86
	if ( ((int_32)$19 == (int_32)$1) ){ goto $label$25 }
	$8 = [55]
	goto $label$3 
	
.LABEL $label$85
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$7), [18054])
	goto $label$23 
	
.LABEL $label$84
	$6 = [0]
	$5 = CALL db_find_i64(*($7), *($17), (int_64)-2111744841675901568, $10)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$24 }
	$8 = [18]
	goto $label$3 
	
.LABEL $label$83
	$6 = CALL $188($7, $5)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$7), [18054])
	$8 = [19]
	goto $label$3 
	
.LABEL $label$82
	$20 = ((float_64)$18 / (float_64)$14)
	$5 = [0]
	*($4) = [0]
	$1 = ((int_32)$6 != (int_32)[0])
	$8 = [20]
	goto $label$3 
	
.LABEL $label$81
	$5 = ($5 << [3])
	$10 = *((*(($6 + [8])) + $5))
	$18 = ((float_64)$20 * (float_64)(CASTING float_64)(uint_64 *((*($4 + [128]) + $5))))
	if ( (((float_64)$18 < (float_64)(float_64)18446744073709551615) & ((float_64)$18 >= (float_64)(float_64)0)) ){ goto $label$21 }
	$8 = [53]
	goto $label$3 
	
.LABEL $label$80
	$11 = (int_64)0
	goto $label$20 
	
.LABEL $label$79
	$11 = (Rounds 0)($18)
	$8 = [22]
	goto $label$3 
	
.LABEL $label$78
	*($4 + [64]) = ((int_64)$10 + (int_64)$11)
	$10 = *($0)
	*($4 + [20]) = ($4 + [64])
	*($4 + [16]) = $4
	CALL eosio_assert($1, [18137])
	CALL $189($7, $6, $10, ($4 + [16]))
	$5 = (*($4) + [1])
	*($4) = $5
	if ( ($5 <= [3]) ){ goto $label$22 }
	$8 = [23]
	goto $label$3 
	
.LABEL $label$77
	CALL eosio_assert([1], [18806])
	$5 = *($12 + [20])
	$12 = [0]
	$5 = CALL db_next_i64($5, ($4 + [64]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$19 }
	$8 = [24]
	goto $label$3 
	
.LABEL $label$76
	$12 = CALL $160($9, $5)
	$8 = [25]
	goto $label$3 
	
.LABEL $label$75
	$13 = ($13 + [1])
	if ( ($13 <= [200]) ){ goto $label$34 }
	$8 = [26]
	goto $label$3 
	
.LABEL $label$74
	if ( ($12 == 0) ){ goto $label$17 }
	$8 = [27]
	goto $label$3 
	
.LABEL $label$73
	*(($5 = ($4 + [165]))) = (*($5) + [1])
	*($4 + [144]) = *($12)
	$10 = CALL current_time()
	*(($4 + [92])) = (int_64)0
	*(($4 + [108])) = (int_64)0
	*(($4 + [116])) = (int_64)0
	*($4 + [76]) = [0]
	*($4 + [80]) = [0]
	*($4 + [84 align=4]) = (int_64)0
	*($4 + [100 align=4]) = (int_64)0
	*($4 + [64]) = ((CASTING uint_32)(uint_64 ((uint_64)$10 / (uint_64)(int_64)1000000)) + [60])
	$7 = ($4 + [100])
	$21 = *($0)
	$10 = (int_64)6
	$8 = [28]
	goto $label$3 
	
.LABEL $label$72
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$16 }
	$8 = [29]
	goto $label$3 
	
.LABEL $label$71
	$10 = (int_64)0
	$11 = (int_64)59
	$5 = [19094]
	$22 = (int_64)0
	$8 = [30]
	goto $label$3 
	
.LABEL $label$70
	$23 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$14 }
	$8 = [48]
	goto $label$3 
	
.LABEL $label$69
	$6 = *($5)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = [51]
	goto $label$3 
	
.LABEL $label$68
	$6 = ($6 + [-91])
	goto $label$4 
	
.LABEL $label$67
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	$8 = [50]
	goto $label$3 
	
.LABEL $label$66
	$23 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	$8 = [31]
	goto $label$3 
	
.LABEL $label$65
	$5 = ($5 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$22 = ((int_64)$23 | (int_64)$22)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$15 }
	$8 = [32]
	goto $label$3 
	
.LABEL $label$64
	*($4 + [1]) = $2
	*($4 + [8]) = $3
	*($4 + [16]) = $21
	*($4 + [24]) = $22
	*($4) = *(($4 + [165]))
	*(($5 = CALL _Znwj([16]))) = $21
	*($5 + [8]) = (int_64)3617214756542218240
	*(($4 + [52])) = [0]
	$6 = ($5 + [16])
	*(($4 + [40])) = $6
	*(($4 + [36])) = $6
	*($4 + [32]) = $5
	*($4 + [44 align=4]) = (int_64)0
	CALL $106(($4 + [44]), [10])
	$5 = *($4 + [44])
	$1 = ($4 + [48])
	$6 = (*($1) - $5)
	CALL eosio_assert(((int_32)$6 > (int_32)[0]), [18328])
	CALL memcpy($5, $4, [1])
	CALL eosio_assert(((int_32)($6 + [-1]) > (int_32)[0]), [18328])
	CALL memcpy(($5 + [1]), ($4 | [1]), [1])
	CALL eosio_assert(((int_32)($6 + [-2]) > (int_32)[7]), [18328])
	CALL memcpy(($5 + [2]), ($4 + [8]), [8])
	CALL $123($7, ($4 + [16]))
	$5 = *($4 + [44])
	if ( ($5 == 0) ){ goto $label$13 }
	$8 = [33]
	goto $label$3 
	
.LABEL $label$63
	*($1) = $5
	CALL _ZdlPv($5)
	$8 = [34]
	goto $label$3 
	
.LABEL $label$62
	$5 = *($4 + [32])
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = [35]
	goto $label$3 
	
.LABEL $label$61
	*(($4 + [36])) = $5
	CALL _ZdlPv($5)
	$8 = [36]
	goto $label$3 
	
.LABEL $label$60
	*(($4 + [84])) = [0]
	$10 = CALL $124(*([0] + [8216]))
	*($4 + [24]) = (int_64)0
	*($4 + [16]) = $10
	$10 = *($0)
	CALL $125($4, ($4 + [64]))
	$5 = *($4)
	CALL send_deferred(($4 + [16]), $10, $5, (*($4 + [4]) - $5), [0])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$11 }
	$8 = [37]
	goto $label$3 
	
.LABEL $label$59
	*($4 + [4]) = $5
	CALL _ZdlPv($5)
	$8 = [38]
	goto $label$3 
	
.LABEL $label$58
	CALL $126(($4 + [64]))
	goto $label$10 
	
.LABEL $label$57
	*(($4 + [164])) = [0]
	*($4 + [144]) = (int_64)0
	*($4 + [168]) = ((int_64)*($4 + [168]) + (int_64)1)
	$8 = [39]
	goto $label$3 
	
.LABEL $label$56
	CALL $190(($0 + [168]), ($4 + [144]), *($0))
	$5 = *($4 + [128])
	if ( ($5 == 0) ){ goto $label$9 }
	$8 = [40]
	goto $label$3 
	
.LABEL $label$55
	*($4 + [132]) = $5
	CALL _ZdlPv($5)
	$8 = [41]
	goto $label$3 
	
.LABEL $label$54
	$5 = *($4 + [152])
	if ( ($5 == 0) ){ goto $label$8 }
	$8 = [42]
	goto $label$3 
	
.LABEL $label$53
	*(($4 + [156])) = $5
	CALL _ZdlPv($5)
	$8 = [43]
	goto $label$3 
	
.LABEL $label$52
	$5 = *($4 + [188])
	if ( ($5 == 0) ){ goto $label$7 }
	$8 = [44]
	goto $label$3 
	
.LABEL $label$51
	*(($4 + [192])) = $5
	CALL _ZdlPv($5)
	$8 = [45]
	goto $label$3 
	
.LABEL $label$50
	$5 = *($4 + [176])
	if ( ($5 == 0) ){ goto $label$6 }
	$8 = [46]
	goto $label$3 
	
.LABEL $label$49
	*($4 + [180]) = $5
	CALL _ZdlPv($5)
	$8 = [47]
	goto $label$3 
	
.LABEL $label$48
	$global$0 = ($4 + [224])
	return 
	
.LABEL $label$47
	$8 = [0]
	goto $label$3 
	
.LABEL $label$46
	$8 = [1]
	goto $label$3 
	
.LABEL $label$45
	$8 = [3]
	goto $label$3 
	
.LABEL $label$44
	$8 = [1]
	goto $label$3 
	
.LABEL $label$43
	$8 = [60]
	goto $label$3 
	
.LABEL $label$42
	$8 = [5]
	goto $label$3 
	
.LABEL $label$41
	$8 = [9]
	goto $label$3 
	
.LABEL $label$40
	$8 = [9]
	goto $label$3 
	
.LABEL $label$39
	$8 = [7]
	goto $label$3 
	
.LABEL $label$38
	$8 = [58]
	goto $label$3 
	
.LABEL $label$37
	$8 = [9]
	goto $label$3 
	
.LABEL $label$36
	$8 = [11]
	goto $label$3 
	
.LABEL $label$35
	$8 = [11]
	goto $label$3 
	
.LABEL $label$34
	$8 = [12]
	goto $label$3 
	
.LABEL $label$33
	$8 = [12]
	goto $label$3 
	
.LABEL $label$32
	$8 = [26]
	goto $label$3 
	
.LABEL $label$31
	$8 = [52]
	goto $label$3 
	
.LABEL $label$30
	$8 = [56]
	goto $label$3 
	
.LABEL $label$29
	$8 = [17]
	goto $label$3 
	
.LABEL $label$28
	$8 = [15]
	goto $label$3 
	
.LABEL $label$27
	$8 = [17]
	goto $label$3 
	
.LABEL $label$26
	$8 = [54]
	goto $label$3 
	
.LABEL $label$25
	$8 = [17]
	goto $label$3 
	
.LABEL $label$24
	$8 = [19]
	goto $label$3 
	
.LABEL $label$23
	$8 = [19]
	goto $label$3 
	
.LABEL $label$22
	$8 = [20]
	goto $label$3 
	
.LABEL $label$21
	$8 = [21]
	goto $label$3 
	
.LABEL $label$20
	$8 = [22]
	goto $label$3 
	
.LABEL $label$19
	$8 = [25]
	goto $label$3 
	
.LABEL $label$18
	$8 = [25]
	goto $label$3 
	
.LABEL $label$17
	$8 = [52]
	goto $label$3 
	
.LABEL $label$16
	$8 = [28]
	goto $label$3 
	
.LABEL $label$15
	$8 = [30]
	goto $label$3 
	
.LABEL $label$14
	$8 = [31]
	goto $label$3 
	
.LABEL $label$13
	$8 = [34]
	goto $label$3 
	
.LABEL $label$12
	$8 = [36]
	goto $label$3 
	
.LABEL $label$11
	$8 = [38]
	goto $label$3 
	
.LABEL $label$10
	$8 = [39]
	goto $label$3 
	
.LABEL $label$9
	$8 = [41]
	goto $label$3 
	
.LABEL $label$8
	$8 = [43]
	goto $label$3 
	
.LABEL $label$7
	$8 = [45]
	goto $label$3 
	
.LABEL $label$6
	$8 = [47]
	goto $label$3 
	
.LABEL $label$5
	$8 = [49]
	goto $label$3 
	
.LABEL $label$4
	$8 = [50]
	goto $label$3 
	$8
}

int_32 .FUNC $271 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($0 + [48 align=4]) = (int_64)0
	*($0 + [64]) = (int_64)0
	$4 = [0]
	*(($0 + [56])) = [0]
	*(($5 = ($0 + [72]))) = (int_64)1398362884
	CALL eosio_assert([1], [17985])
	$6 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$5 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [18034])
	*($0 + [80 align=4]) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*(($0 + [96])) = (int_64)0
	*($0 + [104 align=4]) = (int_64)0
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = (int_64)0
	*($0 + [132]) = $1
	*($3) = *($2 + [4])
	*($3 + [12]) = ($0 + [8])
	*($3 + [8]) = $0
	*($3 + [16]) = ($0 + [16])
	*($3 + [20]) = ($0 + [24])
	*($3 + [24]) = ($0 + [32])
	*($3 + [28]) = ($0 + [40])
	*($3 + [32]) = ($0 + [48])
	*($3 + [36]) = ($0 + [64])
	*($3 + [40]) = ($0 + [80])
	*($3 + [44]) = ($0 + [92])
	*($3 + [48]) = ($0 + [104])
	*($3 + [52]) = ($0 + [116])
	*($3 + [56]) = ($0 + [128])
	CALL $272(($3 + [8]), $3)
	*($0 + [136]) = *(*($2 + [8]))
	*($0 + [140]) = [-1]
	$global$0 = ($3 + [64])
	return $0
}

int_32 .FUNC $270 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [116]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [124])))
	if ( ((*($1 + [104]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [104]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [112])))
	if ( ((*($1 + [92]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [92]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [100])))
	$4 = *($1 + [80])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = *($1 + [80])
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	*(($1 + [84])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $277 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [124]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [132])))
	if ( ((*($1 + [112]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($1 + [112]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [120])))
	if ( ((*($1 + [100]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [100]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [108])))
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [96])))
	$4 = *($1 + [56])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = *($1 + [56])
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	*(($1 + [60])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$13 }
	CALL _ZdlPv($1)
	
.LABEL $label$13
	return $0
}

void .FUNC $240 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [18328])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $275 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $274 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = *($0 + [12])
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = uint_32($3 >> [1])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$1 }
	$4 = ($0 + [12])
	
.LOOP $label$3:
	if ( ((int_32)*((($0 + $2) + [1])) != (int_32)[32]) ){ goto $label$1 }
	$2 = ($2 + [1])
	*($4) = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$1 }
	$4 = ($0 + [8])
	$5 = ($0 + [12])
	
.LOOP $label$4:
	if ( ((int_32)*((*($4) + $2)) != (int_32)[32]) ){ goto $label$1 }
	$2 = ($2 + [1])
	*($5) = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$4 }
	
.LABEL $label$1
	$6 = ($0 + [1])
	$7 = ($0 + [12])
	$8 = ($0 + [8])
	$9 = ($0 + [4])
	*($1) = (int_64)0
	$10 = *($0)
	$5 = ($10 & [1])
	if ( $5 ){ goto $label$6 }
	$11 = [5]
	goto $label$5 
	
.LABEL $label$6
	$11 = [0]
	
.LABEL $label$5
	
.LOOP $label$7:
	goto $label$33 
	
.LABEL $label$38
	CALL eosio_assert(((($3 + [-48]) & [255]) <= [10]), [18438])
	$2 = *($7)
	*($1) = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56) + (int_64)((int_64)*($1) * (int_64)10)) + (int_64)-48)
	$10 = *($0)
	$5 = ($10 & [1])
	if ( $5 ){ goto $label$21 }
	$11 = [5]
	goto $label$7 
	
.LABEL $label$37
	if ( ((int_32)$2 == (int_32)uint_32($10 >> [1])) ){ goto $label$19 }
	$11 = [1]
	goto $label$7 
	
.LABEL $label$36
	$4 = ($2 + [1])
	*($7) = $4
	$3 = $6
	if ( ($5 == 0) ){ goto $label$18 }
	$11 = [2]
	goto $label$7 
	
.LABEL $label$35
	$3 = *($8)
	$11 = [3]
	goto $label$7 
	
.LABEL $label$34
	$3 = *(($3 + $2))
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$33
	if ( ((int_32)$2 != (int_32)*($9)) ){ goto $label$20 }
	$11 = [6]
	goto $label$7 
	
.LABEL $label$32
	$4 = $2
	$11 = [7]
	goto $label$7 
	
.LABEL $label$31
	if ( $5 ){ goto $label$15 }
	$11 = [13]
	goto $label$7 
	
.LABEL $label$30
	$3 = uint_32($10 >> [1])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$11 }
	$11 = [14]
	goto $label$7 
	
.LABEL $label$29
	$2 = ($4 + [1])
	$3 = ([0] - $3)
	$4 = ($0 + [12])
	$11 = [15]
	goto $label$7 
	
.LABEL $label$28
	if ( ((int_32)*(($0 + $2)) != (int_32)[32]) ){ goto $label$10 }
	$11 = [16]
	goto $label$7 
	
.LABEL $label$27
	*($4) = $2
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[1]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$26
	$2 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$14 }
	$11 = [9]
	goto $label$7 
	
.LABEL $label$25
	$3 = ($0 + [8])
	$0 = ($0 + [12])
	$11 = [10]
	goto $label$7 
	
.LABEL $label$24
	if ( ((int_32)*((*($3) + $4)) != (int_32)[32]) ){ goto $label$12 }
	$11 = [12]
	goto $label$7 
	
.LABEL $label$23
	$4 = ($4 + [1])
	*($0) = $4
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$13 }
	$11 = [11]
	goto $label$7 
	
.LABEL $label$22
	return 
	
.LABEL $label$21
	$11 = [0]
	goto $label$7 
	
.LABEL $label$20
	$11 = [1]
	goto $label$7 
	
.LABEL $label$19
	$11 = [6]
	goto $label$7 
	
.LABEL $label$18
	$11 = [3]
	goto $label$7 
	
.LABEL $label$17
	$11 = [7]
	goto $label$7 
	
.LABEL $label$16
	$11 = [4]
	goto $label$7 
	
.LABEL $label$15
	$11 = [8]
	goto $label$7 
	
.LABEL $label$14
	$11 = [11]
	goto $label$7 
	
.LABEL $label$13
	$11 = [10]
	goto $label$7 
	
.LABEL $label$12
	$11 = [11]
	goto $label$7 
	
.LABEL $label$11
	$11 = [11]
	goto $label$7 
	
.LABEL $label$10
	$11 = [11]
	goto $label$7 
	
.LABEL $label$9
	$11 = [11]
	goto $label$7 
	
.LABEL $label$8
	$11 = [15]
	goto $label$7 
	$11
}

void .FUNC $51 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	float_64 $12
	$4 = ($global$0 - [128])
	$global$0 = $4
	*($4 + [79]) = $2
	*($4 + [80]) = $1
	*($4 + [64]) = $3
	CALL require_auth($1)
	CALL eosio_assert(((($2 + [-1]) & [255]) <= [100]), [17783])
	$5 = *([0] + [8216])
	$6 = ($5 + [88])
	$8 = *(($5 + [116]))
	$7 = *(($5 + [112]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	
.LOOP $label$6:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$5 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$6), [18054])
	if ( $10 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$9 = CALL db_find_i64(*($6), *(($5 + [96])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	$10 = CALL $110($6, $9)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$6), [18054])
	
.LABEL $label$3
	$1 = *($10 + [8])
	goto $label$1 
	
.LABEL $label$2
	$1 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert(((uint_64)$1 > (uint_64)(int_64)9999999), [17798])
	$5 = ($0 + [128])
	$8 = *(($0 + [156]))
	$7 = *(($0 + [152]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$15 }
	
.LOOP $label$17:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_32)*($10) == (int_32)$2) ){ goto $label$16 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$5), [18054])
	goto $label$14 
	
.LABEL $label$15
	$9 = CALL db_find_i64(*($5), *(($0 + [136])), (int_64)-2120381602870940160, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$13 }
	$10 = CALL $149($5, $9)
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$5), [18054])
	
.LABEL $label$14
	if ( (uint_64)((int_64))(((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($10 + [40])) <= (int_64)31536001) ){ goto $label$18 }
	CALL eosio_assert(((uint_64)$3 > (uint_64)(int_64)49999), [17827])
	$1 = *($0)
	*($4 + [100]) = ($4 + [64])
	*($4 + [96]) = ($4 + [80])
	CALL eosio_assert([1], [18137])
	CALL $150($5, $10, $1, ($4 + [96]))
	$global$0 = ($4 + [128])
	return (unreachable)
	
.LABEL $label$18
	CALL eosio_assert(((float_64)((float_64)(CASTING float_64)(uint_64 *($10 + [48])) * (float_64)(float_64)1.05) <= (float_64)(CASTING float_64)(uint_64 $3)), [17827])
	$11 = *($10 + [8])
	*($4 + [40]) = (int_64)1397703940
	$12 = ((float_64)(CASTING float_64)(uint_64 *($10 + [48])) * (float_64)(float_64)1.04)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$12 }
	$1 = (int_64)-9223372036854775808
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert(((uint_64)$3 > (uint_64)(int_64)49999), [17827])
	$1 = *($0)
	*($4 + [52]) = ($4 + [80])
	*($4 + [48]) = ($4 + [79])
	*($4 + [56]) = ($4 + [64])
	*($4 + [120]) = $1
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$8()), [18334])
	*($4 + [96]) = $5
	*($4 + [100]) = ($4 + [48])
	*($4 + [104]) = ($4 + [120])
	*(($9 = CALL _Znwj([72])) + [16 align=4]) = (int_64)0
	*($9 + [24 align=4]) = (int_64)0
	*($9 + [32 align=4]) = (int_64)0
	*($9 + [56]) = $5
	CALL $151(($4 + [96]), $9)
	*($4 + [112]) = $9
	$1 = *($9)
	*($4 + [96]) = $1
	$2 = *($9 + [60])
	*($4 + [92]) = $2
	$10 = ($0 + [156])
	$8 = *($10)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [160]))) ){ goto $label$10 }
	*($8 + [8]) = $1
	*($8 + [16]) = $2
	*($4 + [112]) = [0]
	*($8) = $9
	*($10) = ($8 + [24])
	$9 = *($4 + [112])
	*($4 + [112]) = [0]
	if ( ($9 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$12
	$1 = (Rounds 0)($12)
	
.LABEL $label$11
	*($4 + [32]) = $1
	$7 = *([0] + [8216])
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17985])
	$1 = (int_64)5459781
	$9 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$1 = $3
	$8 = [1]
	$2 = $9
	$9 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$1 = $3
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$9 < (int_32)[6])
	$2 = ($9 + [1])
	$9 = $2
	if ( $8 ){ goto $label$23 }
	$8 = [1]
	$9 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$8 = [0]
	
.LABEL $label$19
	CALL eosio_assert($8, [18034])
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	$9 = CALL $323([17846])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$26 }
	*($4 + [16]) = ($9 << [1])
	$8 = (($4 + [16]) | [1])
	if ( $9 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$2 = (($9 + [16]) & [-16])
	$8 = CALL _Znwj($2)
	*($4 + [16]) = ($2 | [1])
	*($4 + [24]) = $8
	*($4 + [20]) = $9
	
.LABEL $label$25
	CALL memcpy($8, [17846], $9)
	
.LABEL $label$24
	*(($8 + $9)) = [0]
	*(($4 + [8])) = *((($4 + [32]) + [8]))
	*($4) = *($4 + [32])
	CALL $54($7, $11, $4, ($4 + [16]))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*($4 + [24]))
	
.LABEL $label$27
	$1 = *($0)
	*($4 + [100]) = ($4 + [64])
	*($4 + [96]) = ($4 + [80])
	CALL eosio_assert([1], [18137])
	CALL $152($5, $10, $1, ($4 + [96]))
	goto $label$8 
	
.LABEL $label$10
	CALL $153(($0 + [152]), ($4 + [112]), ($4 + [96]), ($4 + [92]))
	$9 = *($4 + [112])
	*($4 + [112]) = [0]
	if ( $9 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	CALL $297(($4 + [16]))
	
.LABEL $label$8
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$7
	$8 = *($9 + [28])
	if ( ($8 == 0) ){ goto $label$28 }
	*(($9 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$28
	$8 = *($9 + [16])
	if ( ($8 == 0) ){ goto $label$29 }
	*(($9 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$29
	CALL _ZdlPv($9)
	$global$0 = ($4 + [128])
}

void .FUNC $52 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	float_64 $19
	$5 = ($global$0 - [208])
	$global$0 = $5
	CALL require_auth($1)
	$4 = CALL $298(($5 + [136]), $4)
	CALL $154($4, $4, ($5 + [171]), ($5 + [170]), ($5 + [160]), ($5 + [152]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$1
	$6 = [0]
	$7 = *([0] + [8216])
	$8 = ($7 + [88])
	$10 = *(($7 + [116]))
	$9 = *(($7 + [112]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($10 + [-24])
	$11 = *($4)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$5 }
	$10 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$8), [18054])
	if ( $11 ){ goto $label$3 }
	$6 = [0]
	goto $label$2 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($8), *(($7 + [96])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$11 = CALL $110($8, $4)
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$8), [18054])
	
.LABEL $label$3
	$6 = *($11 + [24])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)($6 & [255]) != (int_32)[2]), [16853])
	$6 = [0]
	$7 = *([0] + [8216])
	$8 = ($7 + [88])
	$12 = *($5 + [152])
	$10 = *(($7 + [116]))
	$9 = *(($7 + [112]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$9 }
	
.LOOP $label$11:
	$4 = ($10 + [-24])
	$11 = *($4)
	if ( ((int_64)*($11) == (int_64)$12) ){ goto $label$10 }
	$10 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$8), [18054])
	if ( $11 ){ goto $label$8 }
	$6 = [0]
	goto $label$7 
	
.LABEL $label$9
	$4 = CALL db_find_i64(*($8), *(($7 + [96])), (int_64)-3020371635640205312, $12)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$11 = CALL $110($8, $4)
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$8), [18054])
	
.LABEL $label$8
	$6 = *($11 + [24])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)($6 & [255]) != (int_32)[2]), [16853])
	$9 = *($5 + [170])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [17647])
	CALL eosio_assert(((int_64)$12 != (int_64)$1), [16874])
	CALL $95(*([0] + [8224]), $1, $12)
	$13 = *($3)
	$14 = ((int_64)$13 / (int_64)(CASTING uint_64)(uint_32 $9))
	CALL eosio_assert(((int_64)$14 > (int_64)999), [16890])
	$15 = *($3 + [8])
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17985])
	$4 = [0]
	$16 = (uint_64)$15 >> (uint_64)(int_64)8
	$17 = $16)
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $17) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$18 = (uint_64)$17 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$17 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$17 = $18
	$10 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$17 = $18
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$17 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$17 = (uint_64)$17 >> (uint_64)(int_64)8)
	$10 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $10 ){ goto $label$16 }
	$10 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$10 = [0]
	
.LABEL $label$12
	CALL eosio_assert($10, [18034])
	$7 = *($5 + [171])
	$19 = ((float_64)((float_64)(float_64)98 / (float_64)((float_64)(CASTING float_64)(uint_32 $7) + (float_64)(float_64)-1)) * (float_64)(CASTING float_64)(int_64 $14))
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)9223372036854775808) ){ goto $label$18 }
	$17 = (int_64)-9223372036854775808
	goto $label$17 
	
.LABEL $label$18
	$17 = (Rounds 0)($19)
	
.LABEL $label$17
	CALL eosio_assert((uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17985])
	$4 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$17 = (uint_64)$16 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$16 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$16 = $17
	$10 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$16 = $17
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$16 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8)
	$10 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $10 ){ goto $label$23 }
	$10 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$10 = [0]
	
.LABEL $label$19
	CALL eosio_assert($10, [18034])
	$10 = [0]
	$4 = *([0] + [8216])
	CALL $81(($5 + [8]), $4)
	if ( ((int_64)$15 == (int_64)4544260) ){ goto $label$26 }
	if ( ((int_64)$15 == (int_64)1397703940) ){ goto $label$24 }
	if ( ((int_64)$15 != (int_64)297481618436) ){ goto $label$25 }
	$10 = [2]
	goto $label$24 
	
.LABEL $label$26
	$10 = [1]
	goto $label$24 
	
.LABEL $label$25
	CALL eosio_assert([0], [16644])
	$10 = [276447231]
	
.LABEL $label$24
	*(($10 = (*($5 + [8]) + ($10 << [3])))) = ((int_64)*($10) + (int_64)$13)
	CALL $82(($4 + [8]), ($5 + [8]), *($4))
	$4 = *($5 + [8])
	if ( ($4 == 0) ){ goto $label$27 }
	*($5 + [12]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$27
	$16 = CALL $155($0)
	$17 = CALL $88(*([0] + [8224]), $1)
	*($5 + [8]) = $16
	*($5 + [16]) = *($5 + [160])
	$16 = CALL current_time()
	*($5 + [32]) = $17
	*($5 + [40]) = $1
	*($5 + [48]) = $12
	*($5 + [24]) = ((int_64)((uint_64)$16 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $94((($5 + [8]) + [48]), *([0] + [8224]), $1)
	*(($5 + [100])) = (int_64)0
	*(($5 + [108])) = (int_64)0
	*(($5 + [124])) = [0]
	*(($5 + [80])) = *(($3 + [8]))
	*($5 + [88]) = $7
	*($5 + [89]) = $9
	*($5 + [92 align=4]) = (int_64)0
	*($5 + [116 align=4]) = (int_64)0
	*($5 + [128]) = [0]
	*($5 + [72]) = *($3)
	$16 = *($0)
	*($5) = ($5 + [8])
	*($5 + [200]) = $16
	CALL eosio_assert(((int_64)*($0 + [48]) == (int_64)CALL $fimport$8()), [18334])
	$3 = ($0 + [48])
	*($5 + [176]) = $3
	*($5 + [180]) = $5
	*($5 + [184]) = ($5 + [200])
	*(($9 = CALL _Znwj([136])) + [56]) = [0]
	*($9 + [48 align=4]) = (int_64)0
	*($9 + [64]) = (int_64)0
	*($9 + [72]) = (int_64)1398362884
	CALL eosio_assert([1], [17985])
	$16 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$17 = (uint_64)$16 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$16 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$16 = $17
	$10 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$16 = $17
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$16 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8)
	$10 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $10 ){ goto $label$32 }
	$10 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$10 = [0]
	
.LABEL $label$28
	CALL eosio_assert($10, [18034])
	*($9 + [84 align=4]) = (int_64)0
	*($9 + [92 align=4]) = (int_64)0
	*($9 + [100 align=4]) = (int_64)0
	*($9 + [108 align=4]) = (int_64)0
	*($9 + [116]) = [0]
	*($9 + [124]) = $3
	CALL $156(($5 + [176]), $9)
	*($5 + [192]) = $9
	$16 = *($9)
	*($5 + [176]) = $16
	$10 = *($9 + [128])
	*($5 + [172]) = $10
	$11 = ($0 + [76])
	$4 = *($11)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [80]))) ){ goto $label$35 }
	*($4 + [8]) = $16
	*($4 + [16]) = $10
	*($5 + [192]) = [0]
	*($4) = $9
	*($11) = ($4 + [24])
	$4 = *($5 + [192])
	*($5 + [192]) = [0]
	if ( ($4 == 0) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	CALL $157(($0 + [72]), ($5 + [192]), ($5 + [176]), ($5 + [172]))
	$4 = *($5 + [192])
	*($5 + [192]) = [0]
	if ( ($4 == 0) ){ goto $label$33 }
	
.LABEL $label$34
	if ( (*($4 + [108]) & [1]) ){ goto $label$42 }
	if ( (*($4 + [96]) & [1]) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	CALL _ZdlPv(*(($4 + [116])))
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$40 }
	
.LABEL $label$41
	CALL _ZdlPv(*(($4 + [104])))
	$10 = [1]
	if ( ((*($4 + [84]) & [1]) == 0) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$10 = [1]
	if ( (*($4 + [84]) & [1]) ){ goto $label$38 }
	
.LABEL $label$39
	if ( ((*($4 + [48]) & $10) == 0) ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$38
	CALL _ZdlPv(*(($4 + [92])))
	if ( ((*($4 + [48]) & $10) == 0) ){ goto $label$36 }
	
.LABEL $label$37
	CALL _ZdlPv(*(($4 + [56])))
	
.LABEL $label$36
	CALL _ZdlPv($4)
	
.LABEL $label$33
	if ( ((*(($5 + [116])) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*(($5 + [124])))
	
.LABEL $label$43
	if ( ((*(($5 + [104])) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*(($5 + [112])))
	
.LABEL $label$44
	if ( ((*(($5 + [92])) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*(($5 + [100])))
	
.LABEL $label$45
	if ( ((*(($5 + [56])) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$46
	$global$0 = ($5 + [208])
}

void .FUNC $53 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$5 = ($global$0 - [224])
	$global$0 = $5
	*($5 + [184]) = [0]
	*($5 + [176]) = (int_64)0
	$4 = CALL $298(($5 + [144]), $4)
	CALL $109($4, $4, ($5 + [176]), ($5 + [168]), ($5 + [160]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$1
	$6 = *([0] + [8216])
	$7 = ($6 + [88])
	$9 = *(($6 + [116]))
	$8 = *(($6 + [112]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($9 + [-24])
	$10 = *($4)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$5 }
	$9 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$7), [18054])
	if ( $10 ){ goto $label$3 }
	$4 = [0]
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	$9 = CALL db_find_i64(*($7), *(($6 + [96])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	$10 = CALL $110($7, $9)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$7), [18054])
	
.LABEL $label$3
	$4 = *($10 + [24])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)($4 & [255]) != (int_32)[2]), [16853])
	$11 = [0]
	$6 = *([0] + [8216])
	$7 = ($6 + [88])
	$12 = *($5 + [160])
	$9 = *(($6 + [116]))
	$8 = *(($6 + [112]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$9 }
	
.LOOP $label$11:
	$4 = ($9 + [-24])
	$10 = *($4)
	if ( ((int_64)*($10) == (int_64)$12) ){ goto $label$10 }
	$9 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$7), [18054])
	if ( $10 ){ goto $label$8 }
	$11 = [0]
	goto $label$7 
	
.LABEL $label$9
	$4 = CALL db_find_i64(*($7), *(($6 + [96])), (int_64)-3020371635640205312, $12)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$10 = CALL $110($7, $4)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$7), [18054])
	
.LABEL $label$8
	$11 = *($10 + [24])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)($11 & [255]) != (int_32)[2]), [16853])
	CALL eosio_assert(((int_64)$12 != (int_64)$1), [16874])
	$9 = [0]
	CALL $95(*([0] + [8224]), $1, $12)
	$13 = *($3)
	$14 = *($3 + [8])
	if ( ((int_64)$14 != (int_64)1397703940) ){ goto $label$12 }
	CALL eosio_assert(((int_64)$13 > (int_64)999), [16890])
	CALL eosio_assert(((int_64)$13 < (int_64)1000001), [16909])
	
.LABEL $label$12
	$4 = *([0] + [8216])
	CALL $81(($5 + [8]), $4)
	if ( ((int_64)$14 == (int_64)4544260) ){ goto $label$15 }
	if ( ((int_64)$14 == (int_64)1397703940) ){ goto $label$13 }
	if ( ((int_64)$14 != (int_64)297481618436) ){ goto $label$14 }
	$9 = [2]
	goto $label$13 
	
.LABEL $label$15
	$9 = [1]
	goto $label$13 
	
.LABEL $label$14
	CALL eosio_assert([0], [16644])
	$9 = [276447231]
	
.LABEL $label$13
	*(($9 = (*($5 + [8]) + ($9 << [3])))) = ((int_64)*($9) + (int_64)$13)
	CALL $82(($4 + [8]), ($5 + [8]), *($4))
	$4 = *($5 + [8])
	if ( ($4 == 0) ){ goto $label$16 }
	*($5 + [12]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$14 = CALL $111($0)
	$13 = CALL $112($0, $1)
	*($5 + [8]) = $14
	*($5 + [16]) = *($5 + [168])
	$14 = CALL current_time()
	*($5 + [32]) = $13
	*($5 + [40]) = $1
	*($5 + [48]) = $12
	*($5 + [24]) = ((int_64)((uint_64)$14 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$4 = [0]
	CALL $94((($5 + [8]) + [48]), *([0] + [8224]), $1)
	*(($5 + [96])) = [0]
	*(($5 + [80])) = *(($3 + [8]))
	*($5 + [88]) = (int_64)0
	*($5 + [72]) = *($3)
	$9 = (*($5 + [180]) - *($5 + [176]))
	if ( ($9 == 0) ){ goto $label$20 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$19 }
	$10 = CALL _Znwj($9)
	*(($5 + [88])) = $10
	*(($8 = ($5 + [92]))) = $10
	*(($5 + [96])) = ($10 + $9)
	$3 = *($5 + [176])
	$9 = (*($5 + [180]) - $3)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($10, $3, $9)
	*($8) = (*($8) + $9)
	
.LABEL $label$20
	*(($5 + [108])) = (int_64)0
	*(($5 + [116])) = (int_64)0
	*(($5 + [132])) = [0]
	*($5 + [100 align=4]) = (int_64)0
	*($5 + [124 align=4]) = (int_64)0
	*($5 + [136]) = [0]
	$1 = *($0)
	*($5) = ($5 + [8])
	*($5 + [216]) = $1
	CALL eosio_assert(((int_64)*($0 + [48]) == (int_64)CALL $fimport$8()), [18334])
	$6 = ($0 + [48])
	*($5 + [192]) = $6
	*($5 + [196]) = $5
	*($5 + [200]) = ($5 + [216])
	*(($8 = CALL _Znwj([144])) + [56]) = [0]
	*($8 + [48 align=4]) = (int_64)0
	*($8 + [64]) = (int_64)0
	*($8 + [72]) = (int_64)1398362884
	CALL eosio_assert([1], [17985])
	$1 = (int_64)5462355
	
.LOOP $label$22:
	$3 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$12 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$1 = $12
	$3 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$1 = $12
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$24 }
	$3 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$22 }
	
.LABEL $label$21
	CALL eosio_assert($3, [18034])
	*($8 + [80 align=4]) = (int_64)0
	*($8 + [88 align=4]) = (int_64)0
	*($8 + [96 align=4]) = (int_64)0
	*($8 + [104 align=4]) = (int_64)0
	*($8 + [112 align=4]) = (int_64)0
	*($8 + [120 align=4]) = (int_64)0
	*($8 + [132]) = $6
	CALL $113(($5 + [192]), $8)
	*($5 + [208]) = $8
	$1 = *($8)
	*($5 + [192]) = $1
	$9 = *($8 + [136])
	*($5 + [188]) = $9
	$10 = ($0 + [76])
	$4 = *($10)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [80]))) ){ goto $label$25 }
	*($4 + [8]) = $1
	*($4 + [16]) = $9
	*($5 + [208]) = [0]
	*($4) = $8
	*($10) = ($4 + [24])
	$4 = *($5 + [208])
	*($5 + [208]) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$25
	CALL $114(($0 + [72]), ($5 + [208]), ($5 + [192]), ($5 + [188]))
	$4 = *($5 + [208])
	*($5 + [208]) = [0]
	if ( $4 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL $312(($5 + [88]))
	
.LABEL $label$18
	if ( (*($4 + [116]) & [1]) ){ goto $label$32 }
	if ( (*($4 + [104]) & [1]) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	CALL _ZdlPv(*(($4 + [124])))
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL _ZdlPv(*(($4 + [112])))
	if ( ((*($4 + [92]) & [1]) == 0) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	if ( (*($4 + [92]) & [1]) ){ goto $label$28 }
	
.LABEL $label$29
	$9 = *($4 + [80])
	if ( ($9 == 0) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$28
	CALL _ZdlPv(*(($4 + [100])))
	$9 = *($4 + [80])
	if ( ($9 == 0) ){ goto $label$26 }
	
.LABEL $label$27
	*(($4 + [84])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$26
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*(($4 + [56])))
	
.LABEL $label$33
	CALL _ZdlPv($4)
	
.LABEL $label$17
	if ( ((*(($5 + [124])) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($5 + [132])))
	
.LABEL $label$34
	if ( ((*(($5 + [112])) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($5 + [120])))
	
.LABEL $label$35
	if ( ((*(($5 + [100])) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($5 + [108])))
	
.LABEL $label$36
	$4 = *($5 + [88])
	if ( ($4 == 0) ){ goto $label$37 }
	*(($5 + [92])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$37
	if ( ((*(($5 + [56])) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$38
	$4 = *($5 + [176])
	if ( ($4 == 0) ){ goto $label$39 }
	*($5 + [180]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$39
	$global$0 = ($5 + [224])
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [128])
	$global$0 = $4
	if ( (int_64)(*($2) == 0) ){ goto $label$1 }
	$5 = *($0)
	if ( ((int_64)$5 == (int_64)$1) ){ goto $label$1 }
	$6 = *($2 + [8])
	$7 = ( (int_64)8580649359541278000 ? ( (int_64)4229609169547957552 ? (int_64)6138663591592764928 : ((int_64)$6 == (int_64)297481618436) ) : ((int_64)$6 == (int_64)4544260) )
	$6 = (int_64)6
	
.LOOP $label$2:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$2 }
	$6 = (int_64)0
	$8 = (int_64)59
	$0 = [16675]
	$9 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$8 }
	$10 = *($0)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$10 = ($10 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$11 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$4
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$11 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$3 }
	*((($4 + [8]) + [24])) = *(($2 + [8]))
	*($4 + [16]) = $1
	*($4 + [8]) = $5
	*($4 + [24]) = *($2)
	$10 = CALL $298((($4 + [8]) + [32]), $3)
	*($4 + [64]) = $9
	*($4 + [56]) = $7
	*(($0 = CALL _Znwj([16]))) = $5
	*($0 + [8]) = (int_64)3617214756542218240
	*((($4 + [56]) + [36])) = [0]
	$2 = ($0 + [16])
	*((($4 + [56]) + [24])) = $2
	*(($4 + [76])) = $2
	*($4 + [72]) = $0
	*($4 + [84 align=4]) = (int_64)0
	$0 = *($10)
	$10 = ( *((($4 + [8]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($10 + [32])
	$6 = (CASTING uint_64)(uint_32 $10)
	$10 = ($4 + [84])
	
.LOOP $label$9:
	$0 = ($0 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$9 }
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $106($10, $0)
	$10 = *(($4 + [88]))
	$0 = *(($4 + [84]))
	goto $label$10 
	
.LABEL $label$11
	$10 = [0]
	$0 = [0]
	
.LABEL $label$10
	*($4 + [100]) = $0
	*($4 + [96]) = $0
	*($4 + [104]) = $10
	*($4 + [112]) = ($4 + [96])
	*($4 + [120]) = ($4 + [8])
	CALL $107(($4 + [120]), ($4 + [112]))
	CALL $108(($4 + [96]), ($4 + [56]))
	$0 = *($4 + [96])
	CALL send_inline($0, (*($4 + [100]) - $0))
	$0 = *($4 + [96])
	if ( ($0 == 0) ){ goto $label$12 }
	*($4 + [100]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$12
	$0 = *($4 + [84])
	if ( ($0 == 0) ){ goto $label$13 }
	*(($4 + [88])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$13
	$0 = *($4 + [72])
	if ( ($0 == 0) ){ goto $label$14 }
	*(($4 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [40]) = (int_64)0
	*(($1 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [17985])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18034])
	*(($0 + [68])) = [0]
	*($0 + [60 align=4]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*(($1 = ($0 + [80]))) = (int_64)1398362884
	CALL eosio_assert([1], [17985])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18034])
	*($0 + [88 align=4]) = (int_64)0
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*($0 + [112 align=4]) = (int_64)0
	*(($0 + [120])) = (int_64)0
	*(($0 + [128])) = (int_64)0
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18132])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18132])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $261(*($1), *($0 + [28]))
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18132])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $69(*($1), *($0 + [36]))
	CALL $69(*($1), *($0 + [40]))
	CALL $69(*($1), *($0 + [44]))
	CALL $69(*($1), *($0 + [48]))
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [272])
	$global$0 = $2
	$1 = CALL $263($2, $1)
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$4 = (*(*($0)) + int_32($3 >> [1]))
	$5 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$5 = *((*($4) + $5))
	
.LABEL $label$1
	$0 = CALL $263(($2 + [136]), $1)
	CALL void $4((int_32 $0), (int_32 $5))
	if ( (*($0 + [124]) & [1]) ){ goto $label$10 }
	if ( (*($0 + [112]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($0 + [132])))
	if ( ((*($0 + [112]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($0 + [120])))
	$5 = [1]
	if ( ((*($0 + [100]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = [1]
	if ( (*($0 + [100]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($0 + [88]) & $5) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($0 + [108])))
	if ( ((*($0 + [88]) & $5) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($0 + [96])))
	$5 = *($0 + [60])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = *($0 + [60])
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*(($0 + [64])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$2
	if ( (*($1 + [124]) & [1]) ){ goto $label$19 }
	if ( (*($1 + [112]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*(($1 + [132])))
	if ( ((*($1 + [112]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($1 + [120])))
	$0 = [1]
	if ( ((*($1 + [100]) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$0 = [1]
	if ( (*($1 + [100]) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( (*($1 + [88]) & $0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [108])))
	if ( ((*($1 + [88]) & $0) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [96])))
	$0 = *($1 + [60])
	if ( $0 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$0 = *($1 + [60])
	if ( ($0 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	*(($1 + [64])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$global$0 = ($2 + [272])
}

void .FUNC $247 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	$3 = *($0)
	$4 = CALL current_time()
	*($1 + [32]) = [0]
	*($1 + [24]) = ((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($2 + [56]) = ($2 + [33])
	*($2 + [52]) = $2
	*($2 + [48]) = $2
	*($2 + [64]) = ($2 + [48])
	$5 = ($1 + [8])
	*($2 + [76]) = $5
	*($2 + [72]) = $1
	*($2 + [80]) = ($1 + [16])
	*($2 + [84]) = ($1 + [24])
	*($2 + [88]) = ($1 + [32])
	CALL $248(($2 + [72]), ($2 + [64]))
	$4 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($3 + [8]), (int_64)-2110714446663909376, *(*($0 + [8])), $4, $2, [33])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$4 = *(($3 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($2 + [72]) = *($5)
	*($1 + [48]) = CALL db_idx64_store($4, (int_64)-2110714446663909376, $6, $7, ($2 + [72]))
	$global$0 = ($2 + [96])
}

void .FUNC $173 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	*($1 + [8]) = (int_64))(*(*($3)) - *(*($3 + [4])))
	$5 = *($1)
	CALL eosio_assert([1], [18269])
	CALL eosio_assert([1], [18328])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18328])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $152 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	$6 = ($1 + [8])
	*(($5 = $4) + [24]) = *($6)
	*($6) = *(*($3))
	$8 = *($1 + [16])
	$7 = ($1 + [20])
	$6 = *($7)
	$9 = ($6 - $8)
	$10 = int_32($9 >> [3])
	$11 = *($1)
	$12 = (CASTING uint_64)(uint_32 $11)
	if ( ($9 == 0) ){ goto $label$3 }
	$9 = [0]
	
.LOOP $label$4:
	*($8) = (int_64)0
	$8 = ($8 + [8])
	$9 = ($9 + [1])
	if ( ($9 <= $10) ){ goto $label$4 }
	if ( ((uint_32)$10 > (uint_32)[2]) ){ goto $label$2 }
	
.LABEL $label$3
	$13 = ($1 + [16])
	$8 = ([2] - $10)
	*($5 + [40]) = (int_64)0
	$9 = ($1 + [24])
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$5 }
	$14 = [2]
	goto $label$1 
	
.LABEL $label$5
	$14 = [0]
	goto $label$1 
	
.LABEL $label$2
	$14 = [3]
	
.LABEL $label$1
	
.LOOP $label$6:
	goto $label$41 
	
.LABEL $label$43
	$8 = ($8 + [-1])
	$6 = *($7)
	*($5 + [40]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$20 }
	$14 = [2]
	goto $label$6 
	
.LABEL $label$42
	*($6) = (int_64)0
	*($7) = ($6 + [8])
	if ( $8 ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$41
	CALL $3($13, ($5 + [40]))
	if ( $8 ){ goto $label$19 }
	$14 = [3]
	goto $label$6 
	
.LABEL $label$40
	$15 = ((int_64)$12 & (int_64)255)
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [48]) = *(*($3 + [4]))
	CALL eosio_assert(((int_32)($11 & [255]) == (int_32)*($1)), [18269])
	$7 = ($1 + [16])
	$10 = *($1 + [16])
	$8 = *($1 + [20])
	$13 = ($8 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($13 >> [3]))
	$6 = [9]
	$14 = [4]
	goto $label$6 
	
.LABEL $label$39
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$16 }
	$14 = [5]
	goto $label$6 
	
.LABEL $label$38
	$9 = ($1 + [28])
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$15 }
	$14 = [6]
	goto $label$6 
	
.LABEL $label$37
	$6 = (($13 & [-8]) + $6)
	$14 = [7]
	goto $label$6 
	
.LABEL $label$36
	$10 = *($9)
	$8 = *($1 + [32])
	$13 = ($8 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($13 >> [3]))
	$14 = [8]
	goto $label$6 
	
.LABEL $label$35
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$14 }
	$14 = [9]
	goto $label$6 
	
.LABEL $label$34
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$13 }
	$14 = [10]
	goto $label$6 
	
.LABEL $label$33
	$6 = (($13 & [-8]) + $6)
	$14 = [11]
	goto $label$6 
	
.LABEL $label$32
	$8 = ($6 + [16])
	if ( ($8 <= [513]) ){ goto $label$12 }
	$14 = [22]
	goto $label$6 
	
.LABEL $label$31
	$6 = CALL $324($8)
	goto $label$11 
	
.LABEL $label$30
	$6 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $6
	$14 = [13]
	goto $label$6 
	
.LABEL $label$29
	*($5 + [12]) = $6
	*($5 + [8]) = $6
	*($5 + [16]) = ($6 + $8)
	*($5 + [32]) = ($5 + [8])
	*($5 + [48]) = $7
	*($5 + [52]) = $9
	*($5 + [40]) = $1
	*($5 + [44]) = ($1 + [8])
	*($5 + [56]) = ($1 + [40])
	*($5 + [60]) = ($1 + [48])
	CALL $292(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [60]), $2, $6, $8)
	if ( ($8 <= [513]) ){ goto $label$10 }
	$14 = [21]
	goto $label$6 
	
.LABEL $label$28
	CALL $327($6)
	$14 = [14]
	goto $label$6 
	
.LABEL $label$27
	if ( ((uint_64)*($0 + [16]) > (uint_64)$15) ){ goto $label$9 }
	$14 = [15]
	goto $label$6 
	
.LABEL $label$26
	*(($0 + [16])) = ((int_64)$15 + (int_64)1)
	$14 = [16]
	goto $label$6 
	
.LABEL $label$25
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $322(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$8 }
	$14 = [17]
	goto $label$6 
	
.LABEL $label$24
	$8 = ($1 + [64])
	$6 = *($8)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$7 }
	$14 = [20]
	goto $label$6 
	
.LABEL $label$23
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2120381602870940160, ($5 + [32]), $15)
	*($8) = $6
	$14 = [18]
	goto $label$6 
	
.LABEL $label$22
	CALL db_idx64_update($6, $2, ($5 + [40]))
	$14 = [19]
	goto $label$6 
	
.LABEL $label$21
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$20
	$14 = [0]
	goto $label$6 
	
.LABEL $label$19
	$14 = [1]
	goto $label$6 
	
.LABEL $label$18
	$14 = [3]
	goto $label$6 
	
.LABEL $label$17
	$14 = [1]
	goto $label$6 
	
.LABEL $label$16
	$14 = [4]
	goto $label$6 
	
.LABEL $label$15
	$14 = [7]
	goto $label$6 
	
.LABEL $label$14
	$14 = [8]
	goto $label$6 
	
.LABEL $label$13
	$14 = [11]
	goto $label$6 
	
.LABEL $label$12
	$14 = [12]
	goto $label$6 
	
.LABEL $label$11
	$14 = [13]
	goto $label$6 
	
.LABEL $label$10
	$14 = [14]
	goto $label$6 
	
.LABEL $label$9
	$14 = [16]
	goto $label$6 
	
.LABEL $label$8
	$14 = [19]
	goto $label$6 
	
.LABEL $label$7
	$14 = [18]
	goto $label$6 
	$14
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [28])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [32])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$2 = *($1 + [16])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $150 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	$6 = ($1 + [8])
	*(($5 = $4) + [24]) = *($6)
	*($6) = *(*($3))
	$8 = *($1 + [16])
	$7 = ($1 + [20])
	$6 = *($7)
	$9 = ($6 - $8)
	$10 = int_32($9 >> [3])
	$11 = *($1)
	$12 = (CASTING uint_64)(uint_32 $11)
	if ( ($9 == 0) ){ goto $label$3 }
	$9 = [0]
	
.LOOP $label$4:
	*($8) = (int_64)0
	$8 = ($8 + [8])
	$9 = ($9 + [1])
	if ( ($9 <= $10) ){ goto $label$4 }
	if ( ((uint_32)$10 > (uint_32)[2]) ){ goto $label$2 }
	
.LABEL $label$3
	$13 = ($1 + [16])
	$8 = ([2] - $10)
	*($5 + [40]) = (int_64)0
	$9 = ($1 + [24])
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$5 }
	$14 = [2]
	goto $label$1 
	
.LABEL $label$5
	$14 = [0]
	goto $label$1 
	
.LABEL $label$2
	$14 = [3]
	
.LABEL $label$1
	
.LOOP $label$6:
	goto $label$41 
	
.LABEL $label$43
	$8 = ($8 + [-1])
	$6 = *($7)
	*($5 + [40]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$20 }
	$14 = [2]
	goto $label$6 
	
.LABEL $label$42
	*($6) = (int_64)0
	*($7) = ($6 + [8])
	if ( $8 ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$41
	CALL $3($13, ($5 + [40]))
	if ( $8 ){ goto $label$19 }
	$14 = [3]
	goto $label$6 
	
.LABEL $label$40
	$15 = ((int_64)$12 & (int_64)255)
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [48]) = *(*($3 + [4]))
	CALL eosio_assert(((int_32)($11 & [255]) == (int_32)*($1)), [18269])
	$7 = ($1 + [16])
	$10 = *($1 + [16])
	$8 = *($1 + [20])
	$13 = ($8 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($13 >> [3]))
	$6 = [9]
	$14 = [4]
	goto $label$6 
	
.LABEL $label$39
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$16 }
	$14 = [5]
	goto $label$6 
	
.LABEL $label$38
	$9 = ($1 + [28])
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$15 }
	$14 = [6]
	goto $label$6 
	
.LABEL $label$37
	$6 = (($13 & [-8]) + $6)
	$14 = [7]
	goto $label$6 
	
.LABEL $label$36
	$10 = *($9)
	$8 = *($1 + [32])
	$13 = ($8 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($13 >> [3]))
	$14 = [8]
	goto $label$6 
	
.LABEL $label$35
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$14 }
	$14 = [9]
	goto $label$6 
	
.LABEL $label$34
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$13 }
	$14 = [10]
	goto $label$6 
	
.LABEL $label$33
	$6 = (($13 & [-8]) + $6)
	$14 = [11]
	goto $label$6 
	
.LABEL $label$32
	$8 = ($6 + [16])
	if ( ($8 <= [513]) ){ goto $label$12 }
	$14 = [22]
	goto $label$6 
	
.LABEL $label$31
	$6 = CALL $324($8)
	goto $label$11 
	
.LABEL $label$30
	$6 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $6
	$14 = [13]
	goto $label$6 
	
.LABEL $label$29
	*($5 + [12]) = $6
	*($5 + [8]) = $6
	*($5 + [16]) = ($6 + $8)
	*($5 + [32]) = ($5 + [8])
	*($5 + [48]) = $7
	*($5 + [52]) = $9
	*($5 + [40]) = $1
	*($5 + [44]) = ($1 + [8])
	*($5 + [56]) = ($1 + [40])
	*($5 + [60]) = ($1 + [48])
	CALL $292(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [60]), $2, $6, $8)
	if ( ($8 <= [513]) ){ goto $label$10 }
	$14 = [21]
	goto $label$6 
	
.LABEL $label$28
	CALL $327($6)
	$14 = [14]
	goto $label$6 
	
.LABEL $label$27
	if ( ((uint_64)*($0 + [16]) > (uint_64)$15) ){ goto $label$9 }
	$14 = [15]
	goto $label$6 
	
.LABEL $label$26
	*(($0 + [16])) = ((int_64)$15 + (int_64)1)
	$14 = [16]
	goto $label$6 
	
.LABEL $label$25
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $322(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$8 }
	$14 = [17]
	goto $label$6 
	
.LABEL $label$24
	$8 = ($1 + [64])
	$6 = *($8)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$7 }
	$14 = [20]
	goto $label$6 
	
.LABEL $label$23
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2120381602870940160, ($5 + [32]), $15)
	*($8) = $6
	$14 = [18]
	goto $label$6 
	
.LABEL $label$22
	CALL db_idx64_update($6, $2, ($5 + [40]))
	$14 = [19]
	goto $label$6 
	
.LABEL $label$21
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$20
	$14 = [0]
	goto $label$6 
	
.LABEL $label$19
	$14 = [1]
	goto $label$6 
	
.LABEL $label$18
	$14 = [3]
	goto $label$6 
	
.LABEL $label$17
	$14 = [1]
	goto $label$6 
	
.LABEL $label$16
	$14 = [4]
	goto $label$6 
	
.LABEL $label$15
	$14 = [7]
	goto $label$6 
	
.LABEL $label$14
	$14 = [8]
	goto $label$6 
	
.LABEL $label$13
	$14 = [11]
	goto $label$6 
	
.LABEL $label$12
	$14 = [12]
	goto $label$6 
	
.LABEL $label$11
	$14 = [13]
	goto $label$6 
	
.LABEL $label$10
	$14 = [14]
	goto $label$6 
	
.LABEL $label$9
	$14 = [16]
	goto $label$6 
	
.LABEL $label$8
	$14 = [19]
	goto $label$6 
	
.LABEL $label$7
	$14 = [18]
	goto $label$6 
	$14
}

void .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [48]) = *(*($4 + [8]))
	$6 = ($1 + [20])
	$4 = *($6)
	$7 = int_32(($4 - *($1 + [16])) >> [3])
	if ( ((uint_32)$7 > (uint_32)[2]) ){ goto $label$2 }
	$8 = ($1 + [16])
	$7 = ([2] - $7)
	*($3 + [24]) = (int_64)0
	$9 = ($1 + [24])
	if ( ((uint_32)$4 >= (uint_32)*($9)) ){ goto $label$3 }
	$10 = [2]
	goto $label$1 
	
.LABEL $label$3
	$10 = [0]
	goto $label$1 
	
.LABEL $label$2
	$10 = [3]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$45 
	
.LABEL $label$47
	$7 = ($7 + [-1])
	$4 = *($6)
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)*($9)) ){ goto $label$21 }
	$10 = [2]
	goto $label$4 
	
.LABEL $label$46
	*($4) = (int_64)0
	*($6) = ($4 + [8])
	if ( $7 ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$45
	CALL $3($8, ($3 + [24]))
	if ( $7 ){ goto $label$20 }
	$10 = [3]
	goto $label$4 
	
.LABEL $label$44
	$6 = ($1 + [32])
	$4 = *($6)
	$7 = int_32(($4 - *($1 + [28])) >> [3])
	if ( ((uint_32)$7 > (uint_32)[2]) ){ goto $label$17 }
	$10 = [20]
	goto $label$4 
	
.LABEL $label$43
	$8 = ($1 + [28])
	$7 = ([2] - $7)
	*($3 + [24]) = (int_64)0
	$9 = ($1 + [36])
	if ( ((uint_32)$4 >= (uint_32)*($9)) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$42
	$7 = ($7 + [-1])
	$4 = *($6)
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)*($9)) ){ goto $label$23 }
	$10 = [23]
	goto $label$4 
	
.LABEL $label$41
	*($4) = (int_64)0
	*($6) = ($4 + [8])
	if ( $7 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$40
	CALL $3($8, ($3 + [24]))
	if ( $7 ){ goto $label$22 }
	$10 = [4]
	goto $label$4 
	
.LABEL $label$39
	$9 = ($1 + [16])
	$8 = *($1 + [16])
	$7 = *($1 + [20])
	$11 = ($7 - $8)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	$4 = [9]
	$10 = [5]
	goto $label$4 
	
.LABEL $label$38
	$4 = ($4 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$14 }
	$10 = [6]
	goto $label$4 
	
.LABEL $label$37
	$6 = ($1 + [28])
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$13 }
	$10 = [7]
	goto $label$4 
	
.LABEL $label$36
	$4 = (($11 & [-8]) + $4)
	$10 = [8]
	goto $label$4 
	
.LABEL $label$35
	$8 = *($6)
	$7 = *($1 + [32])
	$11 = ($7 - $8)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	$10 = [9]
	goto $label$4 
	
.LABEL $label$34
	$4 = ($4 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$12 }
	$10 = [10]
	goto $label$4 
	
.LABEL $label$33
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$11 }
	$10 = [11]
	goto $label$4 
	
.LABEL $label$32
	$4 = (($11 & [-8]) + $4)
	$10 = [12]
	goto $label$4 
	
.LABEL $label$31
	$7 = ($4 + [16])
	if ( ($7 <= [513]) ){ goto $label$10 }
	$10 = [19]
	goto $label$4 
	
.LABEL $label$30
	$4 = CALL $324($7)
	goto $label$9 
	
.LABEL $label$29
	$4 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $4
	$10 = [14]
	goto $label$4 
	
.LABEL $label$28
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $7)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = $9
	*($3 + [36]) = $6
	*($3 + [40]) = ($1 + [40])
	*($3 + [44]) = ($1 + [48])
	CALL $292(($3 + [24]), ($3 + [16]))
	$12 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($5 + [8]), (int_64)-2120381602870940160, *(*($0 + [8])), $12, $4, $7)
	if ( ($7 <= [513]) ){ goto $label$8 }
	$10 = [18]
	goto $label$4 
	
.LABEL $label$27
	CALL $327($4)
	$10 = [15]
	goto $label$4 
	
.LABEL $label$26
	if ( ((uint_64)*($5 + [16]) > (uint_64)$12) ){ goto $label$7 }
	$10 = [16]
	goto $label$4 
	
.LABEL $label$25
	*(($5 + [16])) = ((int_64)$12 + (int_64)1)
	$10 = [17]
	goto $label$4 
	
.LABEL $label$24
	$12 = *(($5 + [8]))
	$13 = *(*(($0 + [8])))
	$14 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [64]) = CALL db_idx64_store($12, (int_64)-2120381602870940160, $13, $14, ($3 + [24]))
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$23
	$10 = [21]
	goto $label$4 
	
.LABEL $label$22
	$10 = [22]
	goto $label$4 
	
.LABEL $label$21
	$10 = [0]
	goto $label$4 
	
.LABEL $label$20
	$10 = [1]
	goto $label$4 
	
.LABEL $label$19
	$10 = [3]
	goto $label$4 
	
.LABEL $label$18
	$10 = [1]
	goto $label$4 
	
.LABEL $label$17
	$10 = [4]
	goto $label$4 
	
.LABEL $label$16
	$10 = [4]
	goto $label$4 
	
.LABEL $label$15
	$10 = [22]
	goto $label$4 
	
.LABEL $label$14
	$10 = [5]
	goto $label$4 
	
.LABEL $label$13
	$10 = [8]
	goto $label$4 
	
.LABEL $label$12
	$10 = [9]
	goto $label$4 
	
.LABEL $label$11
	$10 = [12]
	goto $label$4 
	
.LABEL $label$10
	$10 = [13]
	goto $label$4 
	
.LABEL $label$9
	$10 = [14]
	goto $label$4 
	
.LABEL $label$8
	$10 = [15]
	goto $label$4 
	
.LABEL $label$7
	$10 = [17]
	goto $label$4 
	
.LABEL $label$6
	$10 = [23]
	goto $label$4 
	
.LABEL $label$5
	$10 = [21]
	goto $label$4 
	$10
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*(($5 = ($1 + [40]))) = *(($4 + [40]))
	*(($6 = ($1 + [32]))) = *(($4 + [32]))
	*(($7 = ($1 + [24]))) = *(($4 + [24]))
	*(($8 = ($1 + [16]))) = *(($4 + [16]))
	*(($9 = ($1 + [8]))) = *(($4 + [8]))
	$10 = ($1 + [48])
	CALL $300($10, ($4 + [48]))
	*($1 + [80]) = *(($4 + [80]))
	*(($1 + [72])) = *(($4 + [72]))
	*($1 + [64]) = *($4 + [64])
	$11 = ($1 + [84])
	CALL $300($11, ($4 + [84]))
	$12 = ($1 + [96])
	CALL $300($12, ($4 + [96]))
	$13 = ($1 + [108])
	CALL $300($13, ($4 + [108]))
	*($1 + [120]) = *($4 + [120])
	*(($4 = $2) + [16]) = [0]
	*($4) = ($4 + [16])
	*($4 + [28]) = $9
	*($4 + [24]) = $1
	*($4 + [32]) = $8
	*($4 + [36]) = $7
	*($4 + [40]) = $6
	*($4 + [44]) = $5
	*($4 + [48]) = $10
	$14 = ($1 + [64])
	*($4 + [52]) = $14
	$15 = ($1 + [80])
	*($4 + [56]) = $15
	$16 = ($1 + [81])
	*($4 + [60]) = $16
	*($4 + [64]) = $11
	*($4 + [68]) = $12
	*($4 + [72]) = $13
	$17 = ($1 + [120])
	*($4 + [76]) = $17
	CALL $281(($4 + [24]), $4)
	$18 = *($4 + [16])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$2 = CALL $324($18)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($18 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $18)
	*($4 + [16]) = $4
	*($4 + [28]) = $9
	*($4 + [24]) = $1
	*($4 + [32]) = $8
	*($4 + [36]) = $7
	*($4 + [40]) = $6
	*($4 + [44]) = $5
	*($4 + [48]) = $10
	*($4 + [52]) = $14
	*($4 + [56]) = $15
	*($4 + [60]) = $16
	*($4 + [64]) = $11
	*($4 + [68]) = $12
	*($4 + [72]) = $13
	*($4 + [76]) = $17
	CALL $282(($4 + [24]), ($4 + [16]))
	$19 = *($1)
	*($1 + [128]) = CALL db_store_i64(*($3 + [8]), (int_64)3617214761613307904, *(*($0 + [8])), $19, $2, $18)
	if ( ($18 <= [513]) ){ goto $label$3 }
	CALL $327($2)
	
.LABEL $label$3
	if ( (uint_64)($19 <= *($3 + [16])) ){ goto $label$4 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$19 + (int_64)1) : ((uint_64)$19 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$19 = *(($3 + [8]))
	$20 = *(*(($0 + [8])))
	$21 = *($1)
	*($4 + [24]) = *(($1 + [8]))
	*($1 + [132]) = CALL db_idx64_store($19, (int_64)3617214761613307904, $20, $21, ($4 + [24]))
	$global$0 = ($4 + [80])
}

void .FUNC $157 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $283(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $154 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$6 = ($global$0 - [48])
	$global$0 = $6
	CALL $298(($6 + [32]), $1)
	*($6 + [44]) = [0]
	*($6 + [24]) = [0]
	*($6 + [16]) = (int_64)0
	CALL $49(($6 + [32]), ($6 + [16]))
	CALL $50(($6 + [32]), $6)
	$1 = *($6)
	*($3) = $1
	if ( ((uint_32)$1 > (uint_32)[20]) ){ goto $label$2 }
	$3 = [1]
	if ( (([1] << $1) & [1049602]) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ((int_32)$1 == (int_32)[50])
	
.LABEL $label$1
	CALL eosio_assert($3, [17590])
	CALL $50(($6 + [32]), $6)
	$1 = *($6)
	*($2) = $1
	CALL eosio_assert(((($1 + [-2]) & [255]) <= [95]), [17621])
	CALL $50(($6 + [32]), $4)
	*($5) = (int_64)0
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	$1 = CALL $49(($6 + [32]), $6)
	$3 = *($6)
	$7 = ($3 & [1])
	if ( $1 ){ goto $label$3 }
	$2 = ( *($6 + [4]) ? uint_32($3 >> [1]) : $7 )
	if ( ((uint_32)$2 > (uint_32)[12]) ){ goto $label$3 }
	if ( ($2 == 0) ){ goto $label$5 }
	$4 = ( *(($6 + [8])) ? ($6 | [1]) : $7 )
	$1 = [0]
	
.LOOP $label$6:
	$3 = *(($4 + $1))
	if ( ((($3 + [-97]) & [255]) <= [26]) ){ goto $label$7 }
	if ( (($3 + [-49]) <= [5]) ){ goto $label$7 }
	if ( ((int_32)$3 != (int_32)[46]) ){ goto $label$4 }
	
.LABEL $label$7
	$1 = ($1 + [1])
	if ( ($1 <= $2) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	
.LABEL $label$4
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$3 }
	$1 = ( *(($6 + [8])) ? ($6 | [1]) : $7 )
	$3 = [0]
	
.LOOP $label$8:
	$2 = ($1 + $3)
	$4 = ($3 + [1])
	$3 = $4
	if ( *($2) ){ goto $label$8 }
	$8 = (CASTING uint_64)(uint_32 ($4 + [-1]))
	$9 = (int_64)0
	$10 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$9:
	$12 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$8) ){ goto $label$10 }
	$3 = *($1)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [-91])
	goto $label$11 
	
.LABEL $label$12
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$14 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$13 
	
.LABEL $label$14
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$13
	$1 = ($1 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$9 }
	*($5) = $11
	
.LABEL $label$3
	if ( $7 ){ goto $label$19 }
	$1 = [1]
	if ( (*($6 + [16]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*(($6 + [8])))
	$1 = [1]
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($6 + [24])))
	if ( ((*($6 + [32]) & $1) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	if ( (*($6 + [32]) & $1) ){ goto $label$15 }
	
.LABEL $label$16
	$global$0 = ($6 + [48])
	return 
	
.LABEL $label$15
	CALL _ZdlPv(*($6 + [40]))
	$global$0 = ($6 + [48])
}

int_64 .FUNC $155 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = (int_64)0
	$2 = ($0 + [8])
	$3 = *(($0 + [36]))
	if ( ((int_32)$3 == (int_32)*(($0 + [32]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$2), [18054])
	if ( $3 ){ goto $label$1 }
	$3 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$3 = CALL db_find_i64(*($2), *(($0 + [16])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $175($2, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$2), [18054])
	goto $label$1 
	
.LABEL $label$3
	$3 = ($1 + [8])
	
.LABEL $label$1
	*($1 + [8]) = ((int_64)*($3) + (int_64)1)
	CALL $176($2, ($1 + [8]), *($0))
	$4 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $4
}

void .FUNC $158 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = $2
	*($3 + [24]) = $1
	$4 = ($0 + [128])
	$6 = *(($0 + [156]))
	$5 = *(($0 + [152]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [18054])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [136])), (int_64)-2507752926491967488, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $199($4, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [18054])
	
.LABEL $label$2
	*($3 + [8]) = *($8 + [8])
	$1 = *($0)
	*($3 + [4]) = ($3 + [16])
	*($3) = ($3 + [8])
	CALL eosio_assert([1], [18137])
	CALL $200($4, $8, $1, $3)
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [12]) = ($3 + [16])
	*($3 + [8]) = ($3 + [24])
	CALL $201($3, $4, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
}

void .FUNC $159 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $2
	*($3 + [8]) = (int_64)8580649359541278000
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = CALL $194(($3 + [8]), (int_64)17751, [19169])
	*($0) = *($4)
	*(($0 + [8])) = *(($4 + [8]))
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($3 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($3 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

int_32 .FUNC $273 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	if ( (*($3 + [116]) & [1]) ){ goto $label$8 }
	if ( (*($3 + [104]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [124])))
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [112])))
	if ( ((*($3 + [92]) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( (*($3 + [92]) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	$2 = *($3 + [80])
	if ( ($2 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	CALL _ZdlPv(*(($3 + [100])))
	$2 = *($3 + [80])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*(($3 + [84])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$9
	CALL _ZdlPv($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

void .FUNC $272 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $69(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18132])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $261(*($1), *($0 + [32]))
	CALL $69(*($1), *($0 + [36]))
	CALL $69(*($1), *($0 + [40]))
	CALL $69(*($1), *($0 + [44]))
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18132])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	*(($6 = ($1 + [56]))) = *(($5 + [56]))
	*(($1 + [48])) = *(($5 + [48]))
	*(($7 = ($1 + [40]))) = *(($5 + [40]))
	*(($8 = ($1 + [32]))) = *(($5 + [32]))
	*(($9 = ($1 + [24]))) = *(($5 + [24]))
	*(($10 = ($1 + [16]))) = *(($5 + [16]))
	*(($11 = ($1 + [8]))) = *(($5 + [8]))
	$12 = ($1 + [60])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $266($12, *($5 + [60]), *(($5 + [64])))
	
.LABEL $label$1
	*($1 + [72]) = *($5 + [72])
	*(($1 + [80])) = *(($5 + [80]))
	$13 = ($1 + [88])
	CALL $300($13, ($5 + [88]))
	$14 = ($1 + [100])
	CALL $300($14, ($5 + [100]))
	$15 = ($1 + [112])
	CALL $300($15, ($5 + [112]))
	$16 = ($1 + [124])
	CALL $300($16, ($5 + [124]))
	*($3 + [16]) = [0]
	*($3) = ($3 + [16])
	*($3 + [28]) = $11
	*($3 + [24]) = $1
	*($3 + [32]) = $10
	*($3 + [36]) = $9
	*($3 + [40]) = $8
	*($3 + [44]) = $7
	*($3 + [48]) = $6
	*($3 + [52]) = $12
	$17 = ($1 + [72])
	*($3 + [56]) = $17
	*($3 + [60]) = $13
	*($3 + [64]) = $14
	*($3 + [68]) = $15
	*($3 + [72]) = $16
	CALL $285(($3 + [24]), $3)
	$18 = *($3 + [16])
	if ( ($18 <= [513]) ){ goto $label$3 }
	$5 = CALL $324($18)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($2 - (($18 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $18)
	*($3 + [16]) = $3
	*($3 + [28]) = $11
	*($3 + [24]) = $1
	*($3 + [32]) = $10
	*($3 + [36]) = $9
	*($3 + [40]) = $8
	*($3 + [44]) = $7
	*($3 + [48]) = $6
	*($3 + [52]) = $12
	*($3 + [56]) = $17
	*($3 + [60]) = $13
	*($3 + [64]) = $14
	*($3 + [68]) = $15
	*($3 + [72]) = $16
	CALL $286(($3 + [24]), ($3 + [16]))
	$19 = *($1)
	*($1 + [140]) = CALL db_store_i64(*($4 + [8]), (int_64)5445041065490907136, *(*($0 + [8])), $19, $5, $18)
	if ( ($18 <= [513]) ){ goto $label$4 }
	CALL $327($5)
	
.LABEL $label$4
	if ( (uint_64)($19 <= *($4 + [16])) ){ goto $label$5 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$19 + (int_64)1) : ((uint_64)$19 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$5 = ($4 + [8])
	$19 = *($5)
	$0 = *(($0 + [8]))
	$20 = *($0)
	$21 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [144]) = CALL db_idx64_store($19, (int_64)5445041065490907136, $20, $21, ($3 + [24]))
	$19 = *($0)
	$20 = *($5)
	$21 = *($1)
	*($3 + [24]) = *(($1 + [24]))
	*(($1 + [148])) = CALL db_idx64_store($20, (int_64)5445041065490907137, $19, $21, ($3 + [24]))
	$global$0 = ($3 + [80])
}

int_32 .FUNC $224 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18328])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18328])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $183 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $324($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([136])
	$6 = CALL $288($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [128])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $157(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( (*($5 + [108]) & [1]) ){ goto $label$16 }
	if ( (*($5 + [96]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($5 + [116])))
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($5 + [104])))
	$1 = [1]
	if ( ((*($5 + [84]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$1 = [1]
	if ( (*($5 + [84]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((*($5 + [48]) & $1) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	CALL _ZdlPv(*(($5 + [92])))
	if ( ((*($5 + [48]) & $1) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $260($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $302($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $302($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $297($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $68 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ($0 + [48])
	$5 = *(($0 + [76]))
	$4 = *(($0 + [72]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$5 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$3), [18054])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($3), *(($0 + [56])), (int_64)8428183963073163264, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $101($3, $6)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$3), [18054])
	
.LABEL $label$3
	$8 = (($2 + [16]) | [1])
	$9 = ($7 + [8])
	$10 = [0]
	
.LOOP $label$7:
	$6 = ($10 << [3])
	$11 = *((*($9) + $6))
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17985])
	$12 = *(($6 + [8192]))
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	$14 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$15 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$13 = $15
	$14 = [1]
	$5 = $6
	$6 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$13 = $15
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$11 }
	$14 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($14, [18034])
	*(($4 = (($2 + [32]) + [8]))) = $12
	*(($14 = (($2 + [16]) + [8]))) = [0]
	*($2 + [32]) = $11
	*($2 + [16]) = (int_64)0
	$16 = *([0] + [8216])
	$6 = CALL $323([16821])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$14 }
	*($2 + [16]) = ($6 << [1])
	$5 = $8
	if ( $6 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$17 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($17)
	*($14) = $5
	*($2 + [16]) = ($17 | [1])
	*($2 + [20]) = $6
	
.LABEL $label$13
	CALL memcpy($5, [16821], $6)
	
.LABEL $label$12
	*(($5 + $6)) = [0]
	*(($2 + [8])) = *($4)
	*($2) = *($2 + [32])
	CALL $54($16, $1, $2, ($2 + [16]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($14))
	
.LABEL $label$15
	$6 = *([0] + [8216])
	CALL $81(($2 + [48]), $6)
	$5 = $10
	if ( ($10 <= [3]) ){ goto $label$16 }
	CALL eosio_assert([0], [16644])
	$5 = [276447231]
	
.LABEL $label$16
	$5 = ($5 << [3])
	CALL eosio_assert(((uint_64)*((*($2 + [48]) + $5)) >= (uint_64)$11), [18385])
	*(($5 = (*($2 + [48]) + $5))) = (int_64))(*($5) - $11)
	CALL $82(($6 + [8]), ($2 + [48]), *($6))
	$6 = *($2 + [48])
	if ( ($6 == 0) ){ goto $label$17 }
	*($2 + [52]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$17
	$10 = ($10 + [1])
	if ( ($10 <= [3]) ){ goto $label$7 }
	$13 = *($0)
	CALL eosio_assert([1], [18137])
	CALL $105($3, $7, $13)
	
.LABEL $label$2
	$global$0 = ($2 + [64])
	return (unreachable)
	
.LABEL $label$1
	CALL $297(($2 + [16]))
}

void .FUNC $248 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [18328])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $225 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18328])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18328])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18328])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $65 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $2
	CALL $146($3, $0)
	$4 = *($3 + [20])
	$5 = *($3 + [8])
	if ( ($5 == 0) ){ goto $label$1 }
	*(($3 + [12])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)($4 & [255]) != (int_32)[1]), [18463])
	$6 = ($0 + [8])
	$4 = *(($0 + [36]))
	$7 = *(($0 + [32]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$5 = ($4 + [-24])
	$8 = *($5)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$5 }
	$4 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$6), [18054])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_find_i64(*($6), *(($0 + [16])), (int_64)-2111744841804152832, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $160($6, $5)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$6), [18054])
	
.LABEL $label$3
	*($3 + [48]) = *($8 + [8])
	$1 = *($0)
	*($3 + [4]) = ($3 + [56])
	*($3) = ($3 + [48])
	CALL eosio_assert([1], [18137])
	CALL $173($6, $8, $1, $3)
	CALL $135($3, $0)
	$1 = *($3 + [56])
	*($3 + [32]) = (int_64))(*($3 + [32]) - $1)
	*($3 + [40]) = (int_64))(*($3 + [40]) - $1)
	CALL $136(($0 + [88]), $3, *($0))
	$5 = *($3 + [12])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($3 + [16])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$2 }
	*($3 + [4]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$2
	$global$0 = ($3 + [64])
}

void .FUNC $64 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL $146($2, $0)
	$3 = *($2 + [20])
	$4 = *($2 + [8])
	if ( ($4 == 0) ){ goto $label$1 }
	*(($2 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)($3 & [255]) != (int_32)[1]), [18463])
	CALL $135($2, $0)
	*($2 + [40]) = ((int_64)*($2 + [40]) + (int_64)$1)
	CALL $136(($0 + [88]), $2, *($0))
	$0 = *($2 + [12])
	if ( ($0 == 0) ){ goto $label$2 }
	*(($2 + [16])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$0 = *($2)
	if ( ($0 == 0) ){ goto $label$3 }
	*($2 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $67 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL $146(($2 + [48]), $0)
	$3 = *($2 + [68])
	$4 = *($2 + [56])
	if ( ($4 == 0) ){ goto $label$1 }
	*(($2 + [60])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)($3 & [255]) != (int_32)[1]), [18463])
	$5 = ($0 + [48])
	$3 = *(($0 + [76]))
	$6 = *(($0 + [72]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$5:
	$4 = ($3 + [-24])
	$7 = *($4)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$3 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$5), [18054])
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	$4 = CALL db_find_i64(*($5), *(($0 + [56])), (int_64)-2111744841675901568, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $188($5, $4)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$5), [18054])
	
.LABEL $label$2
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [19107])
	$9 = (($2 + [16]) | [1])
	$10 = ($7 + [8])
	$11 = [0]
	
.LOOP $label$7:
	$4 = ($11 << [3])
	$12 = *((*($10) + $4))
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17985])
	$13 = *(($4 + [8192]))
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$9:
	$15 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$16 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$14 = $16
	$15 = [1]
	$3 = $4
	$4 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$14 = $16
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$3 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $3 ){ goto $label$11 }
	$15 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($15, [18034])
	*(($6 = (($2 + [32]) + [8]))) = $13
	*(($15 = (($2 + [16]) + [8]))) = [0]
	*($2 + [32]) = $12
	*($2 + [16]) = (int_64)0
	$17 = *([0] + [8216])
	$4 = CALL $323([19138])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$14 }
	*($2 + [16]) = ($4 << [1])
	$3 = $9
	if ( $4 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$18 = (($4 + [16]) & [-16])
	$3 = CALL _Znwj($18)
	*($15) = $3
	*($2 + [16]) = ($18 | [1])
	*($2 + [20]) = $4
	
.LABEL $label$13
	CALL memcpy($3, [19138], $4)
	
.LABEL $label$12
	*(($3 + $4)) = [0]
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [32])
	CALL $54($17, $1, $2, ($2 + [16]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($15))
	
.LABEL $label$15
	$4 = *([0] + [8216])
	CALL $81(($2 + [48]), $4)
	$3 = $11
	if ( ($11 <= [3]) ){ goto $label$16 }
	CALL eosio_assert([0], [16644])
	$3 = [276447231]
	
.LABEL $label$16
	$3 = ($3 << [3])
	CALL eosio_assert(((uint_64)*((*($2 + [48]) + $3)) >= (uint_64)$12), [18385])
	*(($3 = (*($2 + [48]) + $3))) = (int_64))(*($3) - $12)
	CALL $82(($4 + [8]), ($2 + [48]), *($4))
	$4 = *($2 + [48])
	if ( ($4 == 0) ){ goto $label$17 }
	*($2 + [52]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$11 = ($11 + [1])
	if ( ($11 <= [3]) ){ goto $label$7 }
	$14 = *($0)
	CALL eosio_assert($8, [18137])
	CALL $191($5, $7, $14, ($2 + [48]))
	$global$0 = ($2 + [80])
	return (unreachable)
	
.LABEL $label$6
	CALL $297(($2 + [16]))
}

void .FUNC $66 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [56]) = $2
	CALL $146($3, $0)
	$4 = *($3 + [20])
	$5 = *($3 + [8])
	if ( ($5 == 0) ){ goto $label$1 }
	*(($3 + [12])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)($4 & [255]) != (int_32)[1]), [18463])
	$6 = ($0 + [8])
	$4 = *(($0 + [36]))
	$7 = *(($0 + [32]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$5 = ($4 + [-24])
	$8 = *($5)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$5 }
	$4 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$6), [18054])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_find_i64(*($6), *(($0 + [16])), (int_64)-2111744841804152832, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $160($6, $5)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$6), [18054])
	
.LABEL $label$3
	*($3 + [48]) = *($8 + [8])
	$1 = *($0)
	*($3 + [4]) = ($3 + [56])
	*($3) = ($3 + [48])
	CALL eosio_assert([1], [18137])
	CALL $174($6, $8, $1, $3)
	CALL $135($3, $0)
	$1 = *($3 + [56])
	*($3 + [32]) = ((int_64)*($3 + [32]) + (int_64)$1)
	*($3 + [40]) = ((int_64)$1 + (int_64)*($3 + [40]))
	CALL $136(($0 + [88]), $3, *($0))
	$7 = *([0] + [8216])
	$9 = *($3 + [56])
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17985])
	$1 = (int_64)17751
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $2
	$4 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$1 = $2
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [18034])
	CALL $81(($3 + [64]), $7)
	$5 = [1]
	if ( ((int_64)4544260 == (int_64)4544260) ){ goto $label$12 }
	CALL eosio_assert([0], [16644])
	$5 = [276447231]
	
.LABEL $label$12
	*(($5 = (*($3 + [64]) + ($5 << [3])))) = ((int_64)*($5) + (int_64)$9)
	CALL $82(($7 + [8]), ($3 + [64]), *($7))
	$5 = *($3 + [64])
	if ( ($5 == 0) ){ goto $label$13 }
	*($3 + [68]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$13
	$5 = *($3 + [12])
	if ( ($5 == 0) ){ goto $label$14 }
	*(($3 + [16])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$2 }
	*($3 + [4]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$2
	$global$0 = ($3 + [80])
}

void .FUNC $61 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($3 + [56]) = $2
	*($3 + [64]) = $1
	CALL $146($3, $0)
	$4 = *($3 + [20])
	$5 = *($3 + [8])
	if ( ($5 == 0) ){ goto $label$1 }
	*(($3 + [12])) = $5
	CALL _ZdlPv($5)
	$1 = *($3 + [64])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)($4 & [255]) != (int_32)[1]), [18463])
	CALL $159($3, $0, $1)
	$2 = *($3)
	$6 = ($0 + [8])
	$4 = *(($0 + [36]))
	$7 = *(($0 + [32]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$7:
	$5 = ($4 + [-24])
	$8 = *($5)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$6 }
	$4 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$6), [18054])
	goto $label$4 
	
.LABEL $label$5
	$5 = CALL db_find_i64(*($6), *(($0 + [16])), (int_64)-2111744841804152832, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $160($6, $5)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$6), [18054])
	
.LABEL $label$4
	$1 = *($8 + [8])
	*($3 + [48]) = $1
	*($3 + [80]) = *($3 + [64])
	*($3 + [72]) = ($0 + [128])
	CALL $161($3, ($3 + [72]), ($3 + [80]))
	$5 = *($3 + [4])
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((int_64)*($3 + [80]) != (int_64)*($5 + [8])) ){ goto $label$9 }
	$9 = *($5 + [16])
	goto $label$8 
	
.LABEL $label$9
	$9 = (int_64)0
	
.LABEL $label$8
	CALL eosio_assert(((uint_64)((int_64)((int_64)$1 + (int_64)$9) + (int_64)*($3 + [56])) <= (uint_64)$2), [18483])
	$1 = *($0)
	*($3 + [4]) = ($3 + [56])
	*($3) = ($3 + [48])
	CALL eosio_assert([1], [18137])
	CALL $162($6, $8, $1, $3)
	goto $label$2 
	
.LABEL $label$3
	*($3 + [80]) = *($3 + [64])
	*($3 + [48]) = ($0 + [128])
	CALL $161($3, ($3 + [48]), ($3 + [80]))
	$5 = *($3 + [4])
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_64)*($3 + [80]) != (int_64)*($5 + [8])) ){ goto $label$11 }
	$1 = *($5 + [16])
	goto $label$10 
	
.LABEL $label$11
	$1 = (int_64)0
	
.LABEL $label$10
	CALL eosio_assert(((uint_64)((int_64)*($3 + [56]) + (int_64)$1) <= (uint_64)$2), [18483])
	$1 = *($0)
	*($3 + [4]) = ($3 + [56])
	*($3) = ($3 + [64])
	CALL $163(($3 + [80]), $6, $1, $3)
	$1 = *($0)
	*($3 + [80]) = ($3 + [64])
	CALL $164($3, ($0 + [48]), $1, ($3 + [80]))
	
.LABEL $label$2
	CALL $135($3, $0)
	*($3 + [32]) = ((int_64)*($3 + [32]) + (int_64)*($3 + [56]))
	CALL $136(($0 + [88]), $3, *($0))
	$8 = *([0] + [8216])
	$9 = *($3 + [56])
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17985])
	$1 = (int_64)17751
	$5 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$1 = $2
	$4 = [1]
	$0 = $5
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$1 = $2
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$0 = ($5 + [1])
	$5 = $0
	if ( $4 ){ goto $label$16 }
	$4 = [1]
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$4 = [0]
	
.LABEL $label$12
	CALL eosio_assert($4, [18034])
	CALL $81(($3 + [80]), $8)
	$5 = [1]
	if ( ((int_64)4544260 == (int_64)4544260) ){ goto $label$17 }
	CALL eosio_assert([0], [16644])
	$5 = [276447231]
	
.LABEL $label$17
	*(($5 = (*($3 + [80]) + ($5 << [3])))) = ((int_64)*($5) + (int_64)$9)
	CALL $82(($8 + [8]), ($3 + [80]), *($8))
	$5 = *($3 + [80])
	if ( ($5 == 0) ){ goto $label$18 }
	*($3 + [84]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$5 = *($3 + [12])
	if ( ($5 == 0) ){ goto $label$19 }
	*(($3 + [16])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$20 }
	*($3 + [4]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$20
	$global$0 = ($3 + [96])
}

void .FUNC $60 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($2 + [72]) = $1
	CALL $146(($2 + [8]), $0)
	$3 = *($2 + [28])
	$4 = *($2 + [16])
	if ( ($4 == 0) ){ goto $label$1 }
	*(($2 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)($3 & [255]) != (int_32)[1]), [18463])
	*($2 + [64]) = ($0 + [128])
	CALL $161(($2 + [8]), ($2 + [64]), ($2 + [72]))
	$3 = ($2 + [64])
	$5 = *($2 + [12])
	if ( ($5 == 0) ){ goto $label$3 }
	$4 = [0]
	if ( ((int_64)*($2 + [72]) != (int_64)*($5 + [8])) ){ goto $label$2 }
	$3 = *($2 + [8])
	$4 = $5
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [18682])
	CALL eosio_assert((*($4 + [32]) == 0), [18707])
	$6 = *($4 + [16])
	*($2 + [8]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $3))
	CALL eosio_assert($5, [18772])
	CALL $170(($2 + [8]))
	CALL $171(*($2 + [64]), $4)
	$7 = ($0 + [8])
	$1 = *($2 + [72])
	$3 = *(($0 + [36]))
	$8 = *(($0 + [32]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($3 + [-24])
	$5 = *($4)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$6 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$7), [18054])
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	$4 = CALL db_find_i64(*($7), *(($0 + [16])), (int_64)-2111744841804152832, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $160($7, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$7), [18054])
	
.LABEL $label$4
	$4 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($4, [18746])
	*($2 + [56]) = ((int_64)*($5 + [8]) + (int_64)$6)
	$1 = *($0)
	*($2 + [8]) = ($2 + [56])
	CALL eosio_assert($4, [18137])
	CALL $172($7, $5, $1, ($2 + [8]))
	CALL $135(($2 + [8]), $0)
	*($2 + [40]) = ((int_64)*($2 + [40]) + (int_64)$6)
	*($2 + [32]) = (int_64))(*($2 + [32]) - $6)
	CALL $136(($0 + [88]), ($2 + [8]), *($0))
	$4 = *($2 + [20])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [24])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$8
	$4 = *($2 + [8])
	if ( ($4 == 0) ){ goto $label$9 }
	*($2 + [12]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$9
	$global$0 = ($2 + [80])
}

void .FUNC $63 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($2 + [64]) = $1
	CALL $146(($2 + [8]), $0)
	$3 = *($2 + [28])
	$4 = *($2 + [16])
	if ( ($4 == 0) ){ goto $label$1 }
	*(($2 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)($3 & [255]) != (int_32)[1]), [18463])
	*($2 + [56]) = ($0 + [128])
	CALL $161(($2 + [8]), ($2 + [56]), ($2 + [64]))
	$3 = ($2 + [56])
	$5 = *($2 + [12])
	if ( ($5 == 0) ){ goto $label$3 }
	$4 = [0]
	if ( ((int_64)*($2 + [64]) != (int_64)*($5 + [8])) ){ goto $label$2 }
	$3 = *($2 + [8])
	$4 = $5
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [18682])
	CALL eosio_assert((*($4 + [32]) == 0), [18707])
	CALL eosio_assert(((uint_64)(int_64))(((int_64)((uint_64)CALL eosio_assert0() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($4 + [24])) > (uint_64)(int_64)86399), [18984])
	CALL $135(($2 + [8]), $0)
	*($2 + [32]) = (int_64))(*($2 + [32]) - *($4 + [16]))
	CALL $136(($0 + [88]), ($2 + [8]), *($0))
	*($2 + [72]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $3))
	CALL eosio_assert($5, [18772])
	CALL $170(($2 + [72]))
	CALL $171(*($2 + [56]), $4)
	$4 = *($2 + [20])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($2 + [24])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = *($2 + [8])
	if ( ($4 == 0) ){ goto $label$5 }
	*($2 + [12]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$global$0 = ($2 + [80])
}

void .FUNC $62 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($3 + [88]) = $1
	CALL $146($3, $0)
	$4 = *($3 + [20])
	$5 = *($3 + [8])
	if ( ($5 == 0) ){ goto $label$1 }
	*(($3 + [12])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)($4 & [255]) != (int_32)[1]), [18463])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)4544260), [18500])
	*($3 + [80]) = *($2)
	$6 = ($0 + [8])
	$1 = *($3 + [88])
	$5 = *(($0 + [36]))
	$7 = *(($0 + [32]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($5 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$4 }
	$5 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$6), [18054])
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$2 = CALL db_find_i64(*($6), *(($0 + [16])), (int_64)-2111744841804152832, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$4 = CALL $160($6, $2)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$6), [18054])
	goto $label$2 
	
.LABEL $label$6
	CALL eosio_assert([0], [18518])
	
.LABEL $label$2
	$1 = *($4 + [8])
	*($3 + [72]) = $1
	CALL eosio_assert(((uint_64)*($3 + [80]) <= (uint_64)$1), [18539])
	$1 = *($0)
	*($3 + [4]) = ($3 + [80])
	*($3) = ($3 + [72])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [18137])
	CALL $165($6, $4, $1, $3)
	$2 = ($0 + [128])
	*($3 + [64]) = $2
	CALL $161($3, ($3 + [64]), ($3 + [88]))
	$5 = *($3 + [4])
	if ( ($5 == 0) ){ goto $label$8 }
	if ( ((int_64)*($3 + [88]) != (int_64)*($5 + [8])) ){ goto $label$8 }
	$1 = *($3 + [80])
	*($3) = $1
	if ( *($5 + [32]) ){ goto $label$9 }
	*($3) = ((int_64)*($5 + [16]) + (int_64)$1)
	
.LABEL $label$9
	$1 = *($0)
	*($3 + [56]) = $3
	CALL eosio_assert([1], [18137])
	CALL $166(*($3 + [64]), $5, $1, ($3 + [56]))
	goto $label$7 
	
.LABEL $label$8
	$5 = CALL db_lowerbound_i64(*($2), *(($0 + [136])), (int_64)-2110714446663909376, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	CALL $167($2, $5)
	*($3 + [4]) = [0]
	*($3) = $2
	$1 = ((int_64)*(*(CALL $168($3) + [4])) + (int_64)1)
	goto $label$10 
	
.LABEL $label$11
	$1 = (int_64)1
	
.LABEL $label$10
	*($3 + [56]) = $1
	$1 = *($0)
	*($3 + [4]) = ($3 + [88])
	*($3) = ($3 + [56])
	*($3 + [8]) = ($3 + [80])
	CALL $169(($3 + [48]), $2, $1, $3)
	
.LABEL $label$7
	CALL $135($3, $0)
	$1 = *($3 + [80])
	*($3 + [32]) = (int_64))(*($3 + [32]) - $1)
	*($3 + [24]) = ((int_64)$1 + (int_64)*($3 + [24]))
	CALL $136(($0 + [88]), $3, *($0))
	$2 = *($3 + [12])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($3 + [16])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$13 }
	*($3 + [4]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$global$0 = ($3 + [96])
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = ($2 + [1])
	$5 = ($0 + [1])
	$7 = ($6 & [1])
	$6 = *($0)
	$8 = ( *($0 + [4]) ? uint_32($6 >> [1]) : $7 )
	$9 = [0]
	$10 = ($6 & [1])
	$6 = *($2)
	$6 = ( *($2 + [4]) ? uint_32($6 >> [1]) : $10 )
	if ( ($6 == 0) ){ goto $label$2 }
	$11 = [0]
	if ( ((int_32)$8 < (int_32)$6) ){ goto $label$1 }
	$12 = ( *($0 + [8]) ? $5 : $7 )
	$13 = ($12 + $8)
	$14 = ( *($2 + [8]) ? $4 : $10 )
	$10 = *($14)
	$9 = $8
	$7 = $12
	
.LOOP $label$3:
	$9 = (($9 - $6) + [1])
	if ( ($9 == 0) ){ goto $label$1 }
	$9 = CALL $321($7, $10, $9)
	if ( ($9 == 0) ){ goto $label$1 }
	if ( (CALL $322($9, $14, $6) == 0) ){ goto $label$4 }
	$7 = ($9 + [1])
	$9 = ($13 - $7)
	if ( ((int_32)$9 >= (int_32)$6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$9 == (int_32)$13) ){ goto $label$1 }
	$9 = ($9 - $12)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	$15 = ($1 + [8])
	$12 = ($1 + [4])
	$11 = [0]
	
.LOOP $label$5:
	$7 = CALL $299($3, $0, $11, ($9 - $11), $0)
	$6 = *($12)
	if ( ((uint_32)$6 >= (uint_32)*($15)) ){ goto $label$7 }
	*($6) = *($3)
	$6 = ($3 + [8])
	*(($6 + [8])) = *($6)
	*($6) = [0]
	*($12) = (*($12) + [12])
	*($3) = (int_64)0
	goto $label$6 
	
.LABEL $label$7
	CALL $2($1, $7)
	if ( ((*($3) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$6
	$13 = ($6 & [1])
	$6 = *($2)
	$6 = ( *(($2 + [4])) ? uint_32($6 >> [1]) : $13 )
	$11 = ($6 + $9)
	$7 = ($6 & [1])
	$6 = *($0)
	$10 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($10 <= $11) ){ goto $label$1 }
	$9 = $11
	if ( ($6 == 0) ){ goto $label$8 }
	$7 = ($16 + $11)
	$16 = ( *(($0 + [8])) ? $5 : $7 )
	$14 = ($16 + $10)
	$9 = ($14 - $7)
	if ( ((int_32)$9 < (int_32)$6) ){ goto $label$1 }
	$13 = ( *(($2 + [8])) ? $4 : $13 )
	$10 = *($13)
	
.LOOP $label$9:
	$9 = (($9 - $6) + [1])
	if ( ($9 == 0) ){ goto $label$1 }
	$9 = CALL $321($7, $10, $9)
	if ( ($9 == 0) ){ goto $label$1 }
	if ( (CALL $322($9, $13, $6) == 0) ){ goto $label$10 }
	$7 = ($9 + [1])
	$9 = ($14 - $7)
	if ( ((int_32)$9 >= (int_32)$6) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$1 }
	$9 = ($9 - $16)
	
.LABEL $label$8
	if ( ((int_32)$9 != (int_32)[-1]) ){ goto $label$5 }
	
.LABEL $label$1
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$11 }
	$6 = CALL $299($3, $0, $11, [-1], $0)
	$9 = *($1 + [4])
	if ( ((uint_32)$9 >= (uint_32)*($1 + [8])) ){ goto $label$12 }
	*($9) = *($3)
	*(($9 + [8])) = *(($3 + [8]))
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	*(($6 = ($1 + [4]))) = (*($6) + [12])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$12
	CALL $2($1, $6)
	if ( ((*($3) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$11
	$global$0 = ($3 + [16])
}

void .FUNC $227 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18334])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [18328])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)5374672172221612032, $2, (int_64)5374672172221612032, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)5374672172221612032) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)5374672172221612033
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)5374672172221612032
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)5374672172221612032
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $228(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $228 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $229 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [12])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	CALL $233(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)-2121395625802072064
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-2121395625802072064
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $234(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [12])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [16])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($1)
	if ( ($4 == 0) ){ goto $label$11 }
	*($1 + [4]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([56])) + [24]) = [0]
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [40]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18132])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18132])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [36]) = ($2 + [16])
	CALL $69(($3 + [32]), ($5 + [16]))
	CALL eosio_assert(((uint_32)(*($3 + [40]) - *($3 + [36])) > (uint_32)[7]), [18132])
	CALL memcpy(($5 + [32]), *($3 + [36]), [8])
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	*($3 + [36]) = (*($3 + [36]) + [8])
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $93(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_64 .FUNC $88 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ($0 + [8])
	$5 = *(($0 + [36]))
	$4 = *(($0 + [32]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$3), [18054])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [16])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $89($3, $6)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$3), [18054])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [16727])
	*($2 + [8]) = ((int_64)*($7 + [8]) + (int_64)1)
	$1 = *($0)
	*($2) = ($2 + [8])
	CALL eosio_assert($6, [18137])
	CALL $90($3, $7, $1, $2)
	$1 = *($2 + [8])
	$global$0 = ($2 + [16])
	return $1
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [108]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [116])))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [104])))
	if ( ((*($3 + [84]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [84]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [92])))
	if ( (*($3 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [124]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [132])))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [120])))
	if ( ((*($3 + [100]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [100]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [108])))
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [96])))
	$4 = *($3 + [60])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($3 + [60])
	if ( ($4 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	*(($3 + [64])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $85 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [156])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [152]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	CALL $206(($0 + [112]))
	CALL $207(($0 + [72]))
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [36])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	return $0
}

void .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [32])
	$global$0 = $1
	CALL $146($1, $0)
	$2 = *($1 + [20])
	$3 = *($1 + [8])
	if ( ($3 == 0) ){ goto $label$1 }
	*(($1 + [12])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)($2 & [255]) != (int_32)[1]), [18463])
	$4 = ($0 + [8])
	$5 = [0]
	$2 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-2111744841804152832, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$2 = CALL $160($4, $3)
	
.LABEL $label$2
	$6 = ($0 + [48])
	$0 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)-2111744841675901568, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $188($6, $0)
	
.LABEL $label$3
	if ( ($2 == 0) ){ goto $label$4 }
	$7 = [0]
	
.LOOP $label$5:
	if ( ((int_64)*($2 + [8]) == (int_64)0) ){ goto $label$6 }
	CALL eosio_assert([1], [18806])
	$3 = *($2 + [20])
	$0 = [0]
	$2 = [0]
	$3 = CALL db_next_i64($3, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$2 = CALL $160($4, $3)
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18806])
	$3 = CALL db_next_i64(*($5 + [24]), $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$0 = CALL $188($6, $3)
	
.LABEL $label$8
	$5 = $0
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = *($5 + [8])
	$3 = *(($5 + [12]))
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$10 }
	$8 = int_32(($3 - $0) >> [3])
	$3 = [0]
	
.LOOP $label$11:
	if ( ((int_64)(*($0) == 0) == 0) ){ goto $label$9 }
	$0 = ($0 + [8])
	$3 = ($3 + [1])
	if ( ($3 <= $8) ){ goto $label$11 }
	
.LABEL $label$10
	$0 = [0]
	$3 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($3, [18772])
	CALL eosio_assert($3, [18806])
	$3 = [0]
	$8 = CALL db_next_i64(*($2 + [20]), $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$12 }
	$3 = CALL $160($4, $8)
	
.LABEL $label$12
	$7 = ($7 + [1])
	CALL $204($4, $2)
	$2 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($2, [18772])
	CALL eosio_assert($2, [18806])
	$2 = CALL db_next_i64(*($5 + [24]), $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$13 }
	$0 = CALL $188($6, $2)
	
.LABEL $label$13
	CALL $205($6, $5)
	$2 = $3
	$5 = $0
	if ( ((uint_32)$7 > (uint_32)[20]) ){ goto $label$4 }
	
.LABEL $label$9
	if ( $2 ){ goto $label$5 }
	
.LABEL $label$4
	$global$0 = ($1 + [32])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $298(($2 + [16]), ($1 + [8]))
	$1 = CALL $298($2, ($1 + [20]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$7 = CALL $298(($2 + [32]), $1)
	$5 = CALL $298(($2 + [48]), $4)
	CALL void $6((int_32 $3), (int_64 $5), (int_32 $7), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($5 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($4) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [12]) == (int_32)$0), [18054])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2111264453225158656, (int_64)-2111264453225158656)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $208($0, $4)
	CALL eosio_assert(((int_32)*($4 + [12]) == (int_32)$0), [18054])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18137])
	CALL $209($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $210($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [16]) = [0]
	*($2 + [8]) = (int_64)0
	$3 = [2]
	$4 = [0]
	*($2 + [24]) = (int_64)0
	if ( ((uint_32)[0] >= (uint_32)[0]) ){ goto $label$2 }
	$6 = [2]
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$27 
	
.LABEL $label$29
	$3 = ($3 + [-1])
	$5 = *((($2 + [8]) + [8]))
	$4 = *($2 + [12])
	*($2 + [24]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$14 }
	$6 = [2]
	goto $label$3 
	
.LABEL $label$28
	*($4) = (int_64)0
	*($2 + [12]) = ($4 + [8])
	if ( $3 ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$27
	CALL $3(($2 + [8]), ($2 + [24]))
	if ( $3 ){ goto $label$13 }
	$6 = [3]
	goto $label$3 
	
.LABEL $label$26
	$4 = ($1 + [8])
	$3 = *(($1 + [36]))
	if ( ((int_32)$3 == (int_32)*(($1 + [32]))) ){ goto $label$10 }
	$6 = [4]
	goto $label$3 
	
.LABEL $label$25
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [12]) == (int_32)$4), [18054])
	goto $label$9 
	
.LABEL $label$24
	$3 = [0]
	$5 = CALL db_find_i64(*($4), *(($1 + [16])), (int_64)-2111264453225158656, (int_64)-2111264453225158656)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$6 = [14]
	goto $label$3 
	
.LABEL $label$23
	$3 = CALL $208($4, $5)
	CALL eosio_assert(((int_32)*($3 + [12]) == (int_32)$4), [18054])
	$6 = [5]
	goto $label$3 
	
.LABEL $label$22
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$3 = ( $3 ? ($2 + [8]) : $3 )
	$4 = (*($3 + [4]) - *($3))
	if ( ($4 == 0) ){ goto $label$7 }
	$6 = [6]
	goto $label$3 
	
.LABEL $label$21
	$1 = int_32($4 >> [3])
	if ( ((uint_32)$1 >= (uint_32)[536870912]) ){ goto $label$6 }
	$6 = [7]
	goto $label$3 
	
.LABEL $label$20
	$4 = CALL _Znwj($4)
	*(($5 = ($0 + [4]))) = $4
	*(($0 + [8])) = ($4 + ($1 << [3]))
	*($0) = $4
	$0 = *($3)
	$3 = (*(($3 + [4])) - $0)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$5 }
	$6 = [11]
	goto $label$3 
	
.LABEL $label$19
	CALL memcpy($4, $0, $3)
	*($5) = (*($5) + $3)
	$6 = [8]
	goto $label$3 
	
.LABEL $label$18
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$4 }
	$6 = [9]
	goto $label$3 
	
.LABEL $label$17
	*($2 + [12]) = $3
	CALL _ZdlPv($3)
	$6 = [10]
	goto $label$3 
	
.LABEL $label$16
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$15
	CALL $312($0)
	
.LABEL $label$14
	$6 = [0]
	goto $label$3 
	
.LABEL $label$13
	$6 = [1]
	goto $label$3 
	
.LABEL $label$12
	$6 = [3]
	goto $label$3 
	
.LABEL $label$11
	$6 = [1]
	goto $label$3 
	
.LABEL $label$10
	$6 = [13]
	goto $label$3 
	
.LABEL $label$9
	$6 = [5]
	goto $label$3 
	
.LABEL $label$8
	$6 = [5]
	goto $label$3 
	
.LABEL $label$7
	$6 = [8]
	goto $label$3 
	
.LABEL $label$6
	$6 = [12]
	goto $label$3 
	
.LABEL $label$5
	$6 = [8]
	goto $label$3 
	
.LABEL $label$4
	$6 = [10]
	goto $label$3 
	$6
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [17985])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [18034])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [18132])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [18132])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

void .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [16]) = [0]
	*($2) = ($2 + [16])
	$4 = ($1 + [8])
	*($2 + [28]) = $4
	*($2 + [24]) = $1
	$5 = ($1 + [16])
	*($2 + [32]) = $5
	$6 = ($1 + [24])
	*($2 + [36]) = $6
	$7 = ($1 + [32])
	*($2 + [40]) = $7
	$8 = ($1 + [40])
	*($2 + [44]) = $8
	$9 = ($1 + [56])
	*($2 + [48]) = $9
	$10 = ($1 + [60])
	*($2 + [52]) = $10
	$11 = ($1 + [72])
	*($2 + [56]) = $11
	$12 = ($1 + [88])
	*($2 + [60]) = $12
	$13 = ($1 + [100])
	*($2 + [64]) = $13
	$14 = ($1 + [112])
	*($2 + [68]) = $14
	$15 = ($1 + [124])
	*($2 + [72]) = $15
	CALL $285(($2 + [24]), $2)
	$16 = *($2 + [16])
	if ( ($16 == 0) ){ goto $label$2 }
	CALL $106($0, $16)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	*($2 + [16]) = $2
	*($2 + [28]) = $4
	*($2 + [24]) = $1
	*($2 + [32]) = $5
	*($2 + [36]) = $6
	*($2 + [40]) = $7
	*($2 + [44]) = $8
	*($2 + [48]) = $9
	*($2 + [52]) = $10
	*($2 + [56]) = $11
	*($2 + [60]) = $12
	*($2 + [64]) = $13
	*($2 + [68]) = $14
	*($2 + [72]) = $15
	CALL $286(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [80])
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [56]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [28])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [48])
	CALL $291(($3 + [40]), ($3 + [32]))
	*($5 + [64]) = [-1]
	*($5 + [60]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $153(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [28])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($1 + [16])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $148 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18334])
	*(($5 = CALL _Znwj([48])) + [32]) = $1
	*($5 + [24]) = [0]
	*($5) = *(*($3))
	*($5 + [8]) = *(*($3 + [4]))
	*($5 + [16]) = *(*($3 + [8]))
	*($4 + [48]) = ($4 + [25])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($5 + [8])
	*($4 + [64]) = $5
	*($4 + [72]) = ($5 + [16])
	*($4 + [76]) = ($5 + [24])
	CALL $240(($4 + [64]), ($4 + [56]))
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-3020371635640205312, $2, $6, $4, [25])
	*($5 + [36]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [64]) = $5
	$6 = *($5)
	*($4) = $6
	*($4 + [40]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [64]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $219(($1 + [24]), ($4 + [64]), $4, ($4 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $145 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18334])
	*(($5 = CALL _Znwj([32])) + [16]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($6 = ($5 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [18328])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [18328])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7867653554838700032, $2, (int_64)7867653554838700032, ($4 + [16]), [16])
	*($5 + [20]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7867653554838700032) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7867653554838700033
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7867653554838700032
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7867653554838700032
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $274(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $144 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [18269])
	CALL eosio_assert([1], [18328])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18328])
	CALL memcpy(($4 | [8]), $5, [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7867653554838700032) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7867653554838700033
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $147 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	$5 = *(*($3) + [4])
	*($1 + [8]) = ((int_64)*(*($3 + [4])) + (int_64)*($5 + [8]))
	*($1 + [16]) = ((int_64)*(*($3 + [8])) + (int_64)*($5 + [16]))
	$6 = *($1)
	CALL eosio_assert([1], [18269])
	*($4 + [48]) = ($4 + [25])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [8])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [16])
	*($4 + [76]) = ($1 + [24])
	CALL $240(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [25])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = ($2 + [24]))) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [28]) = [0]
	*($2 + [32]) = (int_64)0
	$4 = (($2 + [8]) + [8])
	$5 = [2]
	$6 = ($2 + [20])
	$7 = [0]
	*($2 + [40]) = (int_64)0
	if ( ((uint_32)[0] >= (uint_32)[0]) ){ goto $label$2 }
	$9 = [2]
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$27 
	
.LABEL $label$29
	$5 = ($5 + [-1])
	$8 = *($3)
	$7 = *($6)
	*($2 + [40]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$14 }
	$9 = [2]
	goto $label$3 
	
.LABEL $label$28
	*($7) = (int_64)0
	*($6) = ($7 + [8])
	if ( $5 ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$27
	CALL $3($4, ($2 + [40]))
	if ( $5 ){ goto $label$13 }
	$9 = [3]
	goto $label$3 
	
.LABEL $label$26
	$7 = ($1 + [168])
	$5 = *(($1 + [196]))
	if ( ((int_32)$5 == (int_32)*(($1 + [192]))) ){ goto $label$10 }
	$9 = [4]
	goto $label$3 
	
.LABEL $label$25
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$7), [18054])
	goto $label$9 
	
.LABEL $label$24
	$5 = [0]
	$8 = CALL db_find_i64(*($7), *(($1 + [176])), (int_64)-2121395625386200416, (int_64)-2121395625386200416)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	$9 = [14]
	goto $label$3 
	
.LABEL $label$23
	$5 = CALL $237($7, $8)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$7), [18054])
	$9 = [5]
	goto $label$3 
	
.LABEL $label$22
	*(($0 + [12])) = (int_64)0
	*($0 + [8]) = [0]
	$5 = ( $5 ? ($2 + [8]) : $5 )
	*($0) = *($5)
	$7 = (*(($5 + [12])) - *($5 + [8]))
	if ( ($7 == 0) ){ goto $label$7 }
	$9 = [6]
	goto $label$3 
	
.LABEL $label$21
	$8 = int_32($7 >> [3])
	if ( ((uint_32)$8 >= (uint_32)[536870912]) ){ goto $label$6 }
	$9 = [7]
	goto $label$3 
	
.LABEL $label$20
	$7 = CALL _Znwj($7)
	*(($0 + [8])) = $7
	*(($0 + [16])) = ($7 + ($8 << [3]))
	*(($8 = ($0 + [12]))) = $7
	$3 = *(($5 + [8]))
	$6 = (*(($5 + [12])) - $3)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$5 }
	$9 = [11]
	goto $label$3 
	
.LABEL $label$19
	CALL memcpy($7, $3, $6)
	*($8) = (*($8) + $6)
	$9 = [8]
	goto $label$3 
	
.LABEL $label$18
	*($0 + [20 align=4]) = *($5 + [20 align=4])
	*(($0 + [28])) = *(($5 + [28]))
	$5 = *($2 + [16])
	if ( ($5 == 0) ){ goto $label$4 }
	$9 = [9]
	goto $label$3 
	
.LABEL $label$17
	*(($2 + [20])) = $5
	CALL _ZdlPv($5)
	$9 = [10]
	goto $label$3 
	
.LABEL $label$16
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$15
	CALL $312(($0 + [8]))
	
.LABEL $label$14
	$9 = [0]
	goto $label$3 
	
.LABEL $label$13
	$9 = [1]
	goto $label$3 
	
.LABEL $label$12
	$9 = [3]
	goto $label$3 
	
.LABEL $label$11
	$9 = [1]
	goto $label$3 
	
.LABEL $label$10
	$9 = [13]
	goto $label$3 
	
.LABEL $label$9
	$9 = [5]
	goto $label$3 
	
.LABEL $label$8
	$9 = [5]
	goto $label$3 
	
.LABEL $label$7
	$9 = [8]
	goto $label$3 
	
.LABEL $label$6
	$9 = [12]
	goto $label$3 
	
.LABEL $label$5
	$9 = [8]
	goto $label$3 
	
.LABEL $label$4
	$9 = [10]
	goto $label$3 
	$9
}

void .FUNC $141 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $277(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	*(($1 + [48])) = *(($5 + [48]))
	*(($6 = ($1 + [40]))) = *(($5 + [40]))
	*(($7 = ($1 + [32]))) = *(($5 + [32]))
	*(($8 = ($1 + [24]))) = *(($5 + [24]))
	*(($9 = ($1 + [16]))) = *(($5 + [16]))
	*(($10 = ($1 + [8]))) = *(($5 + [8]))
	$11 = ($1 + [56])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $266($11, *($5 + [56]), *(($5 + [60])))
	
.LABEL $label$1
	*($1 + [68 align=4]) = *($5 + [68 align=4])
	*(($1 + [84])) = *(($5 + [84]))
	*(($1 + [76])) = *(($5 + [76]))
	$12 = ($1 + [88])
	CALL $300($12, ($5 + [88]))
	$13 = ($1 + [100])
	CALL $300($13, ($5 + [100]))
	$14 = ($1 + [112])
	CALL $300($14, ($5 + [112]))
	$15 = ($1 + [124])
	CALL $300($15, ($5 + [124]))
	*($3 + [16]) = [0]
	*($3) = ($3 + [16])
	*($3 + [28]) = $10
	*($3 + [24]) = $1
	*($3 + [32]) = $9
	*($3 + [36]) = $8
	*($3 + [40]) = $7
	*($3 + [44]) = $6
	*($3 + [48]) = $11
	$16 = ($1 + [68])
	*($3 + [52]) = $16
	$17 = ($1 + [72])
	*($3 + [56]) = $17
	*($3 + [60]) = $12
	*($3 + [64]) = $13
	*($3 + [68]) = $14
	*($3 + [72]) = $15
	CALL $278(($3 + [24]), $3)
	$18 = *($3 + [16])
	if ( ($18 <= [513]) ){ goto $label$3 }
	$5 = CALL $324($18)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($2 - (($18 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $18)
	*($3 + [16]) = $3
	*($3 + [28]) = $10
	*($3 + [24]) = $1
	*($3 + [32]) = $9
	*($3 + [36]) = $8
	*($3 + [40]) = $7
	*($3 + [44]) = $6
	*($3 + [48]) = $11
	*($3 + [52]) = $16
	*($3 + [56]) = $17
	*($3 + [60]) = $12
	*($3 + [64]) = $13
	*($3 + [68]) = $14
	*($3 + [72]) = $15
	CALL $279(($3 + [24]), ($3 + [16]))
	$19 = *($1)
	*($1 + [140]) = CALL db_store_i64(*($4 + [8]), (int_64)7867653721402900480, *(*($0 + [8])), $19, $5, $18)
	if ( ($18 <= [513]) ){ goto $label$4 }
	CALL $327($5)
	
.LABEL $label$4
	if ( (uint_64)($19 <= *($4 + [16])) ){ goto $label$5 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$19 + (int_64)1) : ((uint_64)$19 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$5 = ($4 + [8])
	$19 = *($5)
	$0 = *(($0 + [8]))
	$20 = *($0)
	$21 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [144]) = CALL db_idx64_store($19, (int_64)7867653721402900480, $20, $21, ($3 + [24]))
	$19 = *($0)
	$20 = *($5)
	$21 = *($1)
	*($3 + [24]) = *(($1 + [24]))
	*(($1 + [148])) = CALL db_idx64_store($20, (int_64)7867653721402900481, $19, $21, ($3 + [24]))
	$global$0 = ($3 + [80])
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [16]) = [0]
	*($2) = ($2 + [16])
	$4 = ($1 + [8])
	*($2 + [28]) = $4
	*($2 + [24]) = $1
	$5 = ($1 + [16])
	*($2 + [32]) = $5
	$6 = ($1 + [24])
	*($2 + [36]) = $6
	$7 = ($1 + [32])
	*($2 + [40]) = $7
	$8 = ($1 + [40])
	*($2 + [44]) = $8
	$9 = ($1 + [56])
	*($2 + [48]) = $9
	$10 = ($1 + [68])
	*($2 + [52]) = $10
	$11 = ($1 + [72])
	*($2 + [56]) = $11
	$12 = ($1 + [88])
	*($2 + [60]) = $12
	$13 = ($1 + [100])
	*($2 + [64]) = $13
	$14 = ($1 + [112])
	*($2 + [68]) = $14
	$15 = ($1 + [124])
	*($2 + [72]) = $15
	CALL $278(($2 + [24]), $2)
	$16 = *($2 + [16])
	if ( ($16 == 0) ){ goto $label$2 }
	CALL $106($0, $16)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	*($2 + [16]) = $2
	*($2 + [28]) = $4
	*($2 + [24]) = $1
	*($2 + [32]) = $5
	*($2 + [36]) = $6
	*($2 + [40]) = $7
	*($2 + [44]) = $8
	*($2 + [48]) = $9
	*($2 + [52]) = $10
	*($2 + [56]) = $11
	*($2 + [60]) = $12
	*($2 + [64]) = $13
	*($2 + [68]) = $14
	*($2 + [72]) = $15
	CALL $279(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [80])
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [18836])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18881])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18931])
	$6 = ($4 + [-24])
	$8 = *($5)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$8:
	$9 = ($6 + [24])
	CALL $280($6, $9)
	$4 = ($6 + [48])
	$6 = $9
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$8 }
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = $6
	
.LABEL $label$6
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	if ( ((*($6 + [124]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($6 + [132])))
	if ( ((*($6 + [112]) & [1]) == 0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((*($6 + [112]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($6 + [120])))
	if ( ((*($6 + [100]) & [1]) == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((*($6 + [100]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($6 + [108])))
	if ( ((*($6 + [88]) & [1]) == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((*($6 + [88]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($6 + [96])))
	$8 = *($6 + [56])
	if ( $8 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$8 = *($6 + [56])
	if ( ($8 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	*(($6 + [60])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	CALL _ZdlPv($6)
	
.LABEL $label$10
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [140]))
	$6 = *(($1 + [144]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$21 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7867653721402900480, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$20 }
	
.LABEL $label$21
	CALL db_idx64_remove($6)
	
.LABEL $label$20
	$6 = *(($1 + [148]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$23 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7867653721402900481, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$22 }
	
.LABEL $label$23
	CALL db_idx64_remove($6)
	
.LABEL $label$22
	$global$0 = ($2 + [16])
}

void .FUNC $72 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = ($0 + [48])
	$8 = *(($0 + [76]))
	$7 = *(($0 + [72]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$4:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$3 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($10 + [132])) == (int_32)$6), [18054])
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	$9 = CALL db_find_i64(*($6), *(($0 + [56])), (int_64)3617214763869541760, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $121($6, $9)
	CALL eosio_assert(((int_32)*($10 + [132]) == (int_32)$6), [18054])
	
.LABEL $label$1
	$9 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($9, [16951])
	CALL eosio_assert((*($10 + [128]) == 0), [16961])
	$1 = *($0)
	*($5 + [68]) = $3
	*($5 + [64]) = $2
	*($5 + [72]) = $4
	CALL eosio_assert($9, [18137])
	CALL $122($6, $10, $1, ($5 + [64]))
	$1 = CALL current_time()
	*(($5 + [92])) = (int_64)0
	*(($5 + [108])) = (int_64)0
	*(($5 + [116])) = (int_64)0
	*($5 + [76]) = [0]
	*($5 + [80]) = [0]
	*($5 + [84 align=4]) = (int_64)0
	*($5 + [100 align=4]) = (int_64)0
	*($5 + [64]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	$8 = ($5 + [100])
	$11 = *($0)
	$1 = (int_64)6
	
.LOOP $label$5:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$5 }
	$1 = (int_64)4
	
.LOOP $label$6:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$6 }
	*($5) = (int_64)1
	$1 = *($10)
	*($5 + [16]) = $11
	*($5 + [24]) = (int_64)4297296061627629568
	*($5 + [8]) = $1
	*(($9 = CALL _Znwj([16]))) = $11
	*($9 + [8]) = (int_64)3617214756542218240
	*(($5 + [52])) = [0]
	$10 = ($9 + [16])
	*(($5 + [40])) = $10
	*(($5 + [36])) = $10
	*($5 + [32]) = $9
	*($5 + [44 align=4]) = (int_64)0
	CALL $106(($5 + [44]), [16])
	$9 = *($5 + [44])
	$7 = ($5 + [48])
	$10 = (*($7) - $9)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [18328])
	CALL memcpy($9, $5, [8])
	CALL eosio_assert(((int_32)($10 + [-8]) > (int_32)[7]), [18328])
	CALL memcpy(($9 + [8]), ($5 + [8]), [8])
	CALL $123($8, ($5 + [16]))
	$9 = *($5 + [44])
	if ( ($9 == 0) ){ goto $label$7 }
	*($7) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$7
	$9 = *($5 + [32])
	if ( ($9 == 0) ){ goto $label$8 }
	*(($5 + [36])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$8
	*(($5 + [84])) = [0]
	$1 = CALL $124(*([0] + [8216]))
	*($5 + [24]) = (int_64)0
	*($5 + [16]) = $1
	$1 = *($0)
	CALL $125($5, ($5 + [64]))
	$9 = *($5)
	CALL send_deferred(($5 + [16]), $1, $9, (*($5 + [4]) - $9), [0])
	$9 = *($5)
	if ( ($9 == 0) ){ goto $label$9 }
	*($5 + [4]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$9
	CALL $126(($5 + [64]))
	$global$0 = ($5 + [128])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	$1 = CALL $298($2, ($1 + [48]))
	$5 = CALL $298(($2 + [16]), ($1 + [36]))
	$4 = CALL $298(($2 + [32]), ($1 + [24]))
	$3 = CALL $298(($2 + [48]), ($1 + [12]))
	CALL $265($0, *($1), *($1 + [8]), $3, $4, $5, $1)
	if ( (*($1) & [1]) ){ goto $label$7 }
	if ( (*($5) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($3) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	$1 = CALL $298($2, ($1 + [40]))
	$4 = CALL $298(($2 + [16]), ($1 + [28]))
	$3 = CALL $298(($2 + [32]), ($1 + [16]))
	CALL $264($0, *($1), *($1 + [8]), $3, $4, $1)
	if ( (*($1) & [1]) ){ goto $label$5 }
	if ( (*($4) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [48])
}

void .FUNC $71 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$6 = ($global$0 - [128])
	$global$0 = $6
	$7 = ($0 + [48])
	$9 = *(($0 + [76]))
	$8 = *(($0 + [72]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$5 }
	
.LOOP $label$7:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$6 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(($11 + [124])) == (int_32)$7), [18054])
	if ( ($11 == 0) ){ goto $label$4 }
	if ( (*($11 + [120]) == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$5
	$10 = CALL db_find_i64(*($7), *(($0 + [56])), (int_64)3617214761613307904, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	$11 = CALL $183($7, $10)
	CALL eosio_assert(((int_32)*($11 + [124]) == (int_32)$7), [18054])
	if ( *($11 + [120]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( $5 ){ goto $label$1 }
	$11 = [0]
	CALL eosio_assert([0], [16951])
	if ( (*([0] + [120]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	if ( $5 ){ goto $label$1 }
	CALL eosio_assert([0], [16961])
	
.LABEL $label$2
	$1 = *($0)
	*($6 + [68]) = $3
	*($6 + [64]) = $2
	*($6 + [72]) = $4
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [18137])
	CALL $184($7, $11, $1, ($6 + [64]))
	$1 = CALL current_time()
	*(($6 + [92])) = (int_64)0
	*(($6 + [108])) = (int_64)0
	*(($6 + [116])) = (int_64)0
	*($6 + [76]) = [0]
	*($6 + [80]) = [0]
	*($6 + [84 align=4]) = (int_64)0
	*($6 + [100 align=4]) = (int_64)0
	*($6 + [64]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	$9 = ($6 + [100])
	$12 = *($0)
	$1 = (int_64)6
	
.LOOP $label$8:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$8 }
	$1 = (int_64)4
	
.LOOP $label$9:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$9 }
	*($6) = (int_64)0
	$1 = *($11)
	*($6 + [16]) = $12
	*($6 + [24]) = (int_64)4297296061627629568
	*($6 + [8]) = $1
	*(($10 = CALL _Znwj([16]))) = $12
	*($10 + [8]) = (int_64)3617214756542218240
	*(($6 + [52])) = [0]
	$11 = ($10 + [16])
	*(($6 + [40])) = $11
	*(($6 + [36])) = $11
	*($6 + [32]) = $10
	*($6 + [44 align=4]) = (int_64)0
	CALL $106(($6 + [44]), [16])
	$10 = *($6 + [44])
	$8 = ($6 + [48])
	$11 = (*($8) - $10)
	CALL eosio_assert(((int_32)$11 > (int_32)[7]), [18328])
	CALL memcpy($10, $6, [8])
	CALL eosio_assert(((int_32)($11 + [-8]) > (int_32)[7]), [18328])
	CALL memcpy(($10 + [8]), ($6 + [8]), [8])
	CALL $123($9, ($6 + [16]))
	$10 = *($6 + [44])
	if ( ($10 == 0) ){ goto $label$10 }
	*($8) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$10
	$10 = *($6 + [32])
	if ( ($10 == 0) ){ goto $label$11 }
	*(($6 + [36])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$11
	*(($6 + [84])) = [0]
	$1 = CALL $124(*([0] + [8216]))
	*($6 + [24]) = (int_64)0
	*($6 + [16]) = $1
	$1 = *($0)
	CALL $125($6, ($6 + [64]))
	$10 = *($6)
	CALL send_deferred(($6 + [16]), $1, $10, (*($6 + [4]) - $10), [0])
	$10 = *($6)
	if ( ($10 == 0) ){ goto $label$12 }
	*($6 + [4]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$12
	CALL $126(($6 + [64]))
	
.LABEL $label$1
	$global$0 = ($6 + [128])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $298($2, ($1 + [8]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$4 = CALL $298(($2 + [16]), $1)
	CALL void $5((int_32 $3), (int_64 $4), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $77 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [16]) = $1
	$4 = ($0 + [8])
	$6 = *(($0 + [36]))
	$5 = *(($0 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$4), [18054])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [16])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $89($4, $7)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$4), [18054])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [32]) = $2
	CALL eosio_assert([1], [18137])
	CALL $91($4, $8, $1, ($3 + [32]))
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [4]) = $2
	*($3 + [8]) = $0
	*($3) = ($3 + [16])
	*($3 + [56]) = $1
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$8()), [18334])
	*($3 + [32]) = $4
	*($3 + [36]) = $3
	*($3 + [40]) = ($3 + [56])
	*(($7 = CALL _Znwj([56])) + [24]) = [0]
	*($7 + [16 align=4]) = (int_64)0
	*($7 + [40]) = $4
	CALL $92(($3 + [32]), $7)
	*($3 + [48]) = $7
	$1 = *($7)
	*($3 + [32]) = $1
	$8 = *($7 + [44])
	*($3 + [28]) = $8
	$5 = ($0 + [36])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [40]))) ){ goto $label$8 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($3 + [48]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $93(($0 + [32]), ($3 + [48]), ($3 + [32]), ($3 + [28]))
	$7 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( $7 ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$6
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($7 + [24])))
	
.LABEL $label$9
	CALL _ZdlPv($7)
	$global$0 = ($3 + [64])
}

void .FUNC $74 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	float_64 $26
	float_64 $27
	int_64 $28
	$2 = ($global$0 - [480])
	$global$0 = $2
	$3 = ($0 + [48])
	$5 = *(($0 + [76]))
	$4 = *(($0 + [72]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$6 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(($7 + [124])) == (int_32)$3), [18054])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = CALL db_find_i64(*($3), *(($0 + [56])), (int_64)3617214761613307904, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = CALL $183($3, $6)
	CALL eosio_assert(((int_32)*($7 + [124]) == (int_32)$3), [18054])
	
.LABEL $label$4
	if ( (*($7 + [120]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	CALL eosio_assert([0], [16951])
	if ( *([0] + [120]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [16975])
	
.LABEL $label$1
	$8 = *($7 + [80])
	$9 = *(($7 + [72]))
	$10 = *($7 + [16])
	$11 = *($7 + [32])
	$12 = *($7 + [64])
	$13 = CALL $298(($2 + [456]), ($7 + [108]))
	if ( ((int_32)($8 | [2]) != (int_32)[95]) ){ goto $label$9 }
	$14 = ((int_64)$11 == (int_64)-6569248647676477440)
	$4 = ((int_64)$11 == (int_64)-6569248647667702080)
	$5 = ((int_64)$11 == (int_64)8403264190528720480)
	$6 = ((int_64)$11 == (int_64)-958821018335428064)
	$15 = (((((int_32)((int_32)$6 ^ (int_32)((int_32)$5 ^ (int_32)((int_32)$4 ^ (int_32)$14))) ^ (int_32)[-1]) & ((int_64)$11 != (int_64)-7949014716946807280)) & ((int_64)$11 != (int_64)2956068914779389952)) & ((int_64)$11 != (int_64)-8462410695366634112))
	$16 = (((int_32)$8 == (int_32)[93]) | ((int_32)((((int_64)$11 == (int_64)-8462410695366634112) | (((int_64)$11 == (int_64)2956068914779389952) | (((int_64)$11 == (int_64)-7949014716946807280) | ($6 | ($5 | $4))))) | $14) ^ (int_32)[1]))
	goto $label$8 
	
.LABEL $label$9
	$15 = [1]
	$16 = [1]
	
.LABEL $label$8
	$17 = *($7 + [81])
	$6 = [0]
	$18 = *([0] + [8216])
	$14 = CALL $298(($2 + [424]), $13)
	$19 = *($7 + [81])
	*($2 + [448]) = [0]
	*($2 + [440]) = (int_64)0
	if ( ($19 == 0) ){ goto $label$10 }
	$20 = (($2 + [440]) + [8])
	
.LOOP $label$11:
	$5 = CALL $129($18, CALL $298(($2 + [112]), $14), ($6 & [255]))
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*((($2 + [112]) + [8])))
	
.LABEL $label$12
	$5 = (((uint_32)$5 % (uint_32)[100]) + [1])
	*($2 + [360]) = $5
	$4 = *($2 + [444])
	if ( ((int_32)$4 == (int_32)*($20)) ){ goto $label$13 }
	*($4) = $5
	*($2 + [444]) = (*($2 + [444]) + [1])
	$6 = ($6 + [1])
	if ( (($6 & [255]) <= $19) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	CALL $115(($2 + [440]), ($2 + [360]))
	$6 = ($6 + [1])
	if ( (($6 & [255]) <= $19) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((*($14) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($14 + [8]))
	
.LABEL $label$14
	CALL eosio_assert(((int_32)(*($2 + [444]) - *($2 + [440])) == (int_32)$17), [17765])
	if ( (($16 & [1]) == 0) ){ goto $label$24 }
	*(($2 + [400])) = [0]
	*($2 + [408]) = $12
	*($2 + [416]) = $9
	*($2 + [392]) = (int_64)0
	$4 = *([0] + [8220])
	$6 = CALL $323([17104])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$27 }
	*($2 + [392]) = ($6 << [1])
	$5 = (($2 + [392]) | [1])
	if ( $6 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$14 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($14)
	*($2 + [392]) = ($14 | [1])
	*($2 + [400]) = $5
	*($2 + [396]) = $6
	
.LABEL $label$26
	CALL memcpy($5, [17104], $6)
	
.LABEL $label$25
	*(($5 + $6)) = [0]
	*((($2 + [96]) + [8])) = *((($2 + [408]) + [8]))
	*($2 + [96]) = *($2 + [408])
	CALL $130($4, ($2 + [96]), ($2 + [392]))
	if ( ((*($2 + [392]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($2 + [400]))
	
.LABEL $label$24
	if ( ($15 == 0) ){ goto $label$28 }
	$6 = [0]
	*($2 + [384]) = [0]
	*($2 + [376]) = (int_64)0
	$5 = [0]
	$14 = [0]
	$4 = (*($2 + [444]) - *($2 + [440]))
	if ( ($4 == 0) ){ goto $label$29 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$22 }
	$5 = CALL _Znwj($4)
	*(($2 + [384])) = ($5 + $4)
	*($2 + [376]) = $5
	*($2 + [380]) = $5
	$14 = *($2 + [440])
	$4 = (*($2 + [444]) - $14)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$30 }
	CALL memcpy($5, $14, $4)
	$14 = (*($2 + [380]) + $4)
	*($2 + [380]) = $14
	$5 = *($2 + [376])
	goto $label$29 
	
.LABEL $label$30
	$14 = $5
	
.LABEL $label$29
	$14 = ($14 - $5)
	$21 = ((int_64)$12 / (int_64)(CASTING uint_64)(uint_32 $14))
	CALL eosio_assert((uint_64)(((int_64)$21 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17985])
	$22 = (uint_64)$9 >> (uint_64)(int_64)8)
	
.LOOP $label$32:
	$19 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $22) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$23 = (uint_64)$22 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$22 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$22 = $23
	$19 = [1]
	$5 = $6
	$6 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$22 = $23
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$22 & (int_64)65280) != (int_64)0) ){ goto $label$31 }
	$22 = (uint_64)$22 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$34 }
	$19 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$32 }
	
.LABEL $label$31
	CALL eosio_assert($19, [18034])
	if ( ($14 == 0) ){ goto $label$35 }
	$6 = [0]
	
.LOOP $label$36:
	*((($2 + [112]) + [8])) = $9
	$5 = *((*($2 + [376]) + $6))
	*((($2 + [80]) + [8])) = $9
	*($2 + [112]) = $21
	*($2 + [80]) = $21
	CALL $185($0, $11, $5, ($2 + [80]))
	$6 = ($6 + [1])
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$36 }
	
.LABEL $label$35
	$6 = *($2 + [376])
	if ( ($6 == 0) ){ goto $label$28 }
	*($2 + [380]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$28
	*((($2 + [64]) + [8])) = $9
	*($2 + [352]) = $9
	*($2 + [64]) = $12
	*($2 + [344]) = $12
	CALL $186(($2 + [360]), $0, $11, ($2 + [64]), $22, (int_64)255)
	*((($2 + [48]) + [8])) = $9
	*($2 + [312]) = $12
	*($2 + [320]) = $9
	*($2 + [48]) = $12
	$5 = [0]
	CALL $100(($2 + [328]), *([0] + [8224]), $11, ($2 + [48]))
	$6 = *([0] + [8216])
	CALL $81(($2 + [112]), $6)
	if ( ((int_64)$9 == (int_64)4544260) ){ goto $label$39 }
	if ( ((int_64)$9 == (int_64)1397703940) ){ goto $label$37 }
	if ( ((int_64)$9 != (int_64)297481618436) ){ goto $label$38 }
	$5 = [2]
	goto $label$37 
	
.LABEL $label$39
	$5 = [1]
	goto $label$37 
	
.LABEL $label$38
	CALL eosio_assert([0], [16644])
	$5 = [276447231]
	
.LABEL $label$37
	$5 = ($5 << [3])
	CALL eosio_assert(((uint_64)*((*($2 + [112]) + $5)) >= (uint_64)$12), [18385])
	*(($5 = (*($2 + [112]) + $5))) = (int_64))(*($5) - $12)
	CALL $82(($6 + [8]), ($2 + [112]), *($6))
	$6 = *($2 + [112])
	if ( ($6 == 0) ){ goto $label$40 }
	*($2 + [116]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$40
	$6 = [0]
	$4 = [0]
	if ( ($17 == 0) ){ goto $label$41 }
	$4 = [0]
	$5 = *($2 + [440])
	$14 = $17
	
.LOOP $label$42:
	$4 = ($4 + (*($5) <= $8))
	$5 = ($5 + [1])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$42 }
	
.LABEL $label$41
	$24 = (CASTING uint_64)(uint_32 $17)
	CALL eosio_assert([1], [17985])
	$21 = (uint_64)$9 >> (uint_64)(int_64)8
	$22 = $21)
	
.LOOP $label$44:
	$19 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $22) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$23 = (uint_64)$22 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$22 & (int_64)65280) == (int_64)0) ){ goto $label$45 }
	$22 = $23
	$19 = [1]
	$5 = $6
	$6 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$22 = $23
	
.LOOP $label$46:
	if ( ((int_64)((int_64)$22 & (int_64)65280) != (int_64)0) ){ goto $label$43 }
	$22 = (uint_64)$22 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$14 = ($6 + [1])
	$6 = $14
	if ( $5 ){ goto $label$46 }
	$19 = [1]
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$44 }
	
.LABEL $label$43
	CALL eosio_assert($19, [18034])
	$23 = (int_64)0
	if ( (($4 & [255]) == 0) ){ goto $label$49 }
	$25 = ((int_64)$12 / (int_64)$24)
	CALL eosio_assert((uint_64)(((int_64)$25 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17985])
	$6 = [0]
	$22 = $21
	
.LOOP $label$52:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $22) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$51 }
	$23 = (uint_64)$22 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$22 & (int_64)65280) == (int_64)0) ){ goto $label$53 }
	$22 = $23
	$5 = [1]
	$14 = $6
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$53
	$22 = $23
	
.LOOP $label$54:
	if ( ((int_64)((int_64)$22 & (int_64)65280) != (int_64)0) ){ goto $label$51 }
	$22 = (uint_64)$22 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$14 = ($6 + [1])
	$6 = $14
	if ( $5 ){ goto $label$54 }
	$5 = [1]
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$51
	$5 = [0]
	
.LABEL $label$50
	CALL eosio_assert($5, [18034])
	$26 = ((float_64)(float_64)98 / (float_64)((float_64)(CASTING float_64)(uint_32 $8) + (float_64)(float_64)-1))
	$27 = ((float_64)$26 * (float_64)(CASTING float_64)(int_64 $25))
	if ( ((float_64)(float_64)|$27| < (float_64)(float_64)9223372036854775808) ){ goto $label$56 }
	$25 = (int_64)-9223372036854775808
	goto $label$55 
	
.LABEL $label$56
	$25 = (Rounds 0)($27)
	
.LABEL $label$55
	CALL eosio_assert((uint_64)(((int_64)$25 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17985])
	$6 = [0]
	$22 = $21
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $22) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$58 }
	$23 = (uint_64)$22 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$22 & (int_64)65280) == (int_64)0) ){ goto $label$60 }
	$22 = $23
	$5 = [1]
	$14 = $6
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$60
	$22 = $23
	
.LOOP $label$61:
	if ( ((int_64)((int_64)$22 & (int_64)65280) != (int_64)0) ){ goto $label$58 }
	$22 = (uint_64)$22 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$14 = ($6 + [1])
	$6 = $14
	if ( $5 ){ goto $label$61 }
	$5 = [1]
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$58
	$5 = [0]
	
.LABEL $label$57
	CALL eosio_assert($5, [18034])
	$22 = ((int_64)(CASTING uint_64)(uint_32 $4) & (int_64)255)
	$28 = ((int_64)((int_64)$12 * (int_64)$22) / (int_64)$24)
	CALL eosio_assert((uint_64)(((int_64)$28 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17985])
	$23 = ((int_64)$25 * (int_64)$22)
	$6 = [0]
	$22 = $21
	
.LOOP $label$64:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $22) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$63 }
	$24 = (uint_64)$22 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$22 & (int_64)65280) == (int_64)0) ){ goto $label$65 }
	$22 = $24
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$64 }
	goto $label$62 
	
.LABEL $label$65
	$22 = $24
	
.LOOP $label$66:
	if ( ((int_64)((int_64)$22 & (int_64)65280) != (int_64)0) ){ goto $label$63 }
	$22 = (uint_64)$22 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$66 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$64 }
	goto $label$62 
	
.LABEL $label$63
	$5 = [0]
	
.LABEL $label$62
	CALL eosio_assert($5, [18034])
	$26 = ((float_64)$26 * (float_64)(CASTING float_64)(int_64 $28))
	if ( ((float_64)(float_64)|$26| < (float_64)(float_64)9223372036854775808) ){ goto $label$68 }
	$22 = (int_64)-9223372036854775808
	goto $label$67 
	
.LABEL $label$68
	$22 = (Rounds 0)($26)
	
.LABEL $label$67
	CALL eosio_assert((uint_64)(((int_64)$22 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17985])
	$6 = [0]
	
.LOOP $label$71:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $21) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$70 }
	$22 = (uint_64)$21 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$21 & (int_64)65280) == (int_64)0) ){ goto $label$72 }
	$21 = $22
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$72
	$21 = $22
	
.LOOP $label$73:
	if ( ((int_64)((int_64)$21 & (int_64)65280) != (int_64)0) ){ goto $label$70 }
	$21 = (uint_64)$21 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$73 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$70
	$5 = [0]
	
.LABEL $label$69
	CALL eosio_assert($5, [18034])
	*(($2 + [288])) = [0]
	*($2 + [296]) = $23
	*($2 + [304]) = $9
	*($2 + [280]) = (int_64)0
	$4 = *([0] + [8216])
	$6 = CALL $323([17192])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$48 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$76 }
	*($2 + [280]) = ($6 << [1])
	$5 = (($2 + [280]) | [1])
	if ( $6 ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	$14 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($14)
	*($2 + [280]) = ($14 | [1])
	*($2 + [288]) = $5
	*($2 + [284]) = $6
	
.LABEL $label$75
	CALL memcpy($5, [17192], $6)
	
.LABEL $label$74
	*(($5 + $6)) = [0]
	*((($2 + [32]) + [8])) = *((($2 + [296]) + [8]))
	*($2 + [32]) = *($2 + [296])
	CALL $54($4, $11, ($2 + [32]), ($2 + [280]))
	if ( ((*($2 + [280]) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*($2 + [288]))
	
.LABEL $label$49
	*((($2 + [16]) + [8])) = $9
	*(($2 + [8])) = $9
	*($2 + [264]) = $12
	*($2 + [272]) = $9
	*($2 + [248]) = $23
	*($2 + [256]) = $9
	*($2 + [16]) = $12
	*($2) = $23
	CALL $137(*([0] + [8216]), $11, ($2 + [16]), $2)
	*(($2 + [180])) = [0]
	$22 = *($7 + [24])
	$21 = *($7 + [8])
	*((($2 + [112]) + [48])) = $9
	*($2 + [112]) = $1
	*($2 + [128]) = $10
	*($2 + [136]) = $11
	*($2 + [168]) = $8
	*($2 + [172 align=4]) = (int_64)0
	*($2 + [120]) = $21
	*($2 + [152]) = $12
	*($2 + [144]) = $22
	$6 = (*($2 + [444]) - *($2 + [440]))
	if ( ($6 == 0) ){ goto $label$77 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$47 }
	$5 = CALL _Znwj($6)
	*(($2 + [172])) = $5
	*(($4 = ($2 + [176]))) = $5
	*(($2 + [180])) = ($5 + $6)
	$14 = *($2 + [440])
	$6 = (*($2 + [444]) - $14)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$77 }
	CALL memcpy($5, $14, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$77
	*(($2 + [192])) = $9
	*($2 + [184]) = $23
	$6 = CALL $298(($2 + [200]), ($7 + [48]))
	$5 = CALL $298(($2 + [212]), ($7 + [84]))
	$4 = CALL $298(($2 + [224]), ($7 + [96]))
	$14 = CALL $298(($2 + [236]), $13)
	CALL $177($0, ($2 + [112]))
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [18772])
	CALL eosio_assert($8, [18806])
	$8 = CALL db_next_i64(*($7 + [128]), ($2 + [472]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$78 }
	CALL $183($3, $8)
	
.LABEL $label$78
	CALL $187($3, $7)
	if ( (*($14) & [1]) ){ goto $label$80 }
	if ( (*($4) & [1]) ){ goto $label$79 }
	goto $label$21 
	
.LABEL $label$80
	CALL _ZdlPv(*(($2 + [244])))
	if ( ((*($4) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$79
	CALL _ZdlPv(*(($2 + [232])))
	$4 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$48
	CALL $297(($2 + [280]))
	
.LABEL $label$47
	CALL $312(($2 + [172]))
	
.LABEL $label$23
	CALL $297(($2 + [392]))
	
.LABEL $label$22
	CALL $312(($2 + [376]))
	
.LABEL $label$21
	$4 = [1]
	if ( (*($5) & [1]) ){ goto $label$19 }
	
.LABEL $label$20
	if ( (*($6) & $4) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*(($2 + [220])))
	if ( ((*($6) & $4) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($2 + [208])))
	$6 = *($2 + [172])
	if ( $6 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$6 = *($2 + [172])
	if ( ($6 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	*(($2 + [176])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$15
	$6 = *($2 + [440])
	if ( ($6 == 0) ){ goto $label$81 }
	*($2 + [444]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$81
	if ( ((*($2 + [456]) & [1]) == 0) ){ goto $label$82 }
	CALL _ZdlPv(*($13 + [8]))
	
.LABEL $label$82
	$global$0 = ($2 + [480])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	float_64 $16
	int_64 $17
	int_64 $18
	$2 = ($global$0 - [432])
	$global$0 = $2
	$3 = ($0 + [48])
	$5 = *(($0 + [76]))
	$4 = *(($0 + [72]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$6 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(($7 + [132])) == (int_32)$3), [18054])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = CALL db_find_i64(*($3), *(($0 + [56])), (int_64)3617214763869541760, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = CALL $121($3, $6)
	CALL eosio_assert(((int_32)*($7 + [132]) == (int_32)$3), [18054])
	
.LABEL $label$4
	if ( (*($7 + [128]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	CALL eosio_assert([0], [16951])
	if ( *([0] + [128]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [16975])
	
.LABEL $label$1
	*($2 + [416]) = [0]
	*($2 + [408]) = (int_64)0
	$6 = (*(($7 + [84])) - *($7 + [80]))
	if ( ($6 == 0) ){ goto $label$19 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$18 }
	$5 = CALL _Znwj($6)
	*(($2 + [416])) = ($5 + $6)
	*($2 + [408]) = $5
	*($2 + [412]) = $5
	$4 = *(($7 + [80]))
	$6 = (*(($7 + [84])) - $4)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($5, $4, $6)
	*($2 + [412]) = ($5 + $6)
	
.LABEL $label$19
	$8 = *(($7 + [72]))
	$9 = *($7 + [32])
	$10 = *($7 + [64])
	$11 = CALL $298(($2 + [392]), ($7 + [116]))
	$6 = [1]
	if ( (*(*(($7 + [80]))) == 0) ){ goto $label$20 }
	$6 = (((((int_32)((int_64)$9 == (int_64)-7949014716946807280) ^ (int_32)((int_32)((int_64)$9 == (int_64)-958821018335428064) ^ (int_32)((int_32)((int_64)$9 == (int_64)8403264190528720480) ^ (int_32)(((int_64)$9 != (int_64)-6569248647667702080) & ((int_64)$9 != (int_64)-6569248647676477440))))) & ((int_64)$9 != (int_64)7180643654984269824)) & ((int_64)$9 != (int_64)-8462410695366634112)) & ((int_64)$9 != (int_64)2956085955112468480))
	
.LABEL $label$20
	$5 = CALL $298(($2 + [376]), $11)
	$12 = CALL $298(($2 + [96]), $5)
	$4 = CALL $129(*([0] + [8216]), $12, [0])
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($12 + [8]))
	
.LABEL $label$21
	$4 = ((uint_32)$4 % (uint_32)[24])
	if ( ((*($5) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$22
	if ( ($6 == 0) ){ goto $label$23 }
	*(($2 + [352])) = [0]
	*($2 + [360]) = $10
	*($2 + [368]) = $8
	*($2 + [344]) = (int_64)0
	$12 = *([0] + [8220])
	$6 = CALL $323([17104])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$26 }
	*($2 + [344]) = ($6 << [1])
	$5 = (($2 + [344]) | [1])
	if ( $6 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$13 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($13)
	*($2 + [344]) = ($13 | [1])
	*($2 + [352]) = $5
	*($2 + [348]) = $6
	
.LABEL $label$25
	CALL memcpy($5, [17104], $6)
	
.LABEL $label$24
	*(($5 + $6)) = [0]
	*((($2 + [80]) + [8])) = *((($2 + [360]) + [8]))
	*($2 + [80]) = *($2 + [360])
	CALL $130($12, ($2 + [80]), ($2 + [344]))
	if ( ((*($2 + [344]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($2 + [352]))
	
.LABEL $label$23
	$4 = (($4 << [2]) + [17008])
	*((($2 + [64]) + [8])) = $8
	*($2 + [320]) = $8
	*($2 + [64]) = $10
	*($2 + [312]) = $10
	CALL $131(($2 + [328]), $0, $9, ($2 + [64]))
	*($2 + [296]) = $10
	*($2 + [304]) = $8
	$5 = [0]
	$6 = *([0] + [8224])
	*((($2 + [48]) + [8])) = *($2 + [304])
	*($2 + [48]) = *($2 + [296])
	CALL $100(($2 + [96]), $6, $9, ($2 + [48]))
	$6 = *([0] + [8216])
	CALL $81(($2 + [96]), $6)
	if ( ((int_64)$8 == (int_64)4544260) ){ goto $label$29 }
	if ( ((int_64)$8 == (int_64)1397703940) ){ goto $label$27 }
	if ( ((int_64)$8 != (int_64)297481618436) ){ goto $label$28 }
	$5 = [2]
	goto $label$27 
	
.LABEL $label$29
	$5 = [1]
	goto $label$27 
	
.LABEL $label$28
	CALL eosio_assert([0], [16644])
	$5 = [276447231]
	
.LABEL $label$27
	$13 = *($4)
	$5 = ($5 << [3])
	CALL eosio_assert(((uint_64)*((*($2 + [96]) + $5)) >= (uint_64)$10), [18385])
	*(($5 = (*($2 + [96]) + $5))) = (int_64))(*($5) - $10)
	CALL $82(($6 + [8]), ($2 + [96]), *($6))
	$6 = *($2 + [96])
	if ( ($6 == 0) ){ goto $label$30 }
	*($2 + [100]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$30
	$12 = *((*(($7 + [80])) + $13))
	CALL eosio_assert([1], [17985])
	$14 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$15 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$14 = $15
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	$14 = $15
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$32 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$35 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$5 = [0]
	
.LABEL $label$31
	CALL eosio_assert($5, [18034])
	$14 = (int_64)0
	if ( (($12 & [255]) == 0) ){ goto $label$36 }
	$4 = *(($7 + [80]))
	$12 = (*(($7 + [84])) - $4)
	$6 = [0]
	$5 = [0]
	
.LOOP $label$37:
	$5 = ($5 + *(($4 + $6)))
	$6 = ($6 + [1])
	if ( ((uint_32)$6 <= (uint_32)$12) ){ goto $label$37 }
	$14 = *(($4 + $13))
	*(($2 + [272])) = [0]
	*($2 + [288]) = $8
	*($2 + [264]) = (int_64)0
	$16 = ((float_64)*((($13 << [3]) + [17136])) * (float_64)(CASTING float_64)(uint_64 ((int_64)$14 * (int_64)((int_64)$10 / (int_64)(CASTING uint_64)(uint_32 $5)))))
	if ( ((float_64)(float_64)|$16| < (float_64)(float_64)9223372036854775808) ){ goto $label$39 }
	$14 = (int_64)-9223372036854775808
	goto $label$38 
	
.LABEL $label$39
	$14 = (Rounds 0)($16)
	
.LABEL $label$38
	*($2 + [280]) = $14
	$4 = *([0] + [8216])
	$6 = CALL $323([17192])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$42 }
	*($2 + [264]) = ($6 << [1])
	$5 = (($2 + [264]) | [1])
	if ( $6 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$12 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($12)
	*($2 + [264]) = ($12 | [1])
	*($2 + [272]) = $5
	*($2 + [268]) = $6
	
.LABEL $label$41
	CALL memcpy($5, [17192], $6)
	
.LABEL $label$40
	*(($5 + $6)) = [0]
	*((($2 + [32]) + [8])) = *((($2 + [280]) + [8]))
	*($2 + [32]) = *($2 + [280])
	CALL $54($4, $9, ($2 + [32]), ($2 + [264]))
	if ( ((*($2 + [264]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($2 + [272]))
	
.LABEL $label$36
	*((($2 + [16]) + [8])) = $8
	*(($2 + [8])) = $8
	*($2 + [256]) = $8
	*($2 + [248]) = $10
	*($2 + [232]) = $14
	*($2 + [240]) = $8
	*($2 + [16]) = $10
	*($2) = $14
	CALL $132($0, $9, ($2 + [16]), $2)
	*(($2 + [160])) = [0]
	$15 = *($7 + [24])
	$17 = *($7 + [16])
	$18 = *($7 + [8])
	*((($2 + [96]) + [48])) = $8
	*($2 + [96]) = $1
	*($2 + [120]) = $9
	*($2 + [152]) = (int_64)0
	*($2 + [104]) = $18
	*($2 + [112]) = $17
	*($2 + [136]) = $10
	*($2 + [128]) = $15
	$6 = (*($2 + [412]) - *($2 + [408]))
	if ( ($6 == 0) ){ goto $label$43 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$16 }
	$5 = CALL _Znwj($6)
	*(($2 + [152])) = $5
	*(($4 = ($2 + [156]))) = $5
	*(($2 + [160])) = ($5 + $6)
	$12 = *($2 + [408])
	$6 = (*($2 + [412]) - $12)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$43 }
	CALL memcpy($5, $12, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$43
	*(($2 + [176])) = $8
	*($2 + [168]) = $14
	*($2 + [164]) = ($13 + [1])
	$6 = CALL $298(($2 + [184]), ($7 + [48]))
	$5 = CALL $298(($2 + [196]), ($7 + [92]))
	$4 = CALL $298(($2 + [208]), ($7 + [104]))
	$12 = CALL $298(($2 + [220]), $11)
	CALL $133($0, ($2 + [96]))
	$0 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($0, [18772])
	CALL eosio_assert($0, [18806])
	$0 = CALL db_next_i64(*($7 + [136]), ($2 + [424]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$44 }
	CALL $121($3, $0)
	
.LABEL $label$44
	CALL $134($3, $7)
	if ( (*($12) & [1]) ){ goto $label$46 }
	$7 = [1]
	if ( (*($4) & [1]) ){ goto $label$45 }
	goto $label$14 
	
.LABEL $label$46
	CALL _ZdlPv(*(($2 + [228])))
	$7 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$45
	CALL _ZdlPv(*(($2 + [216])))
	if ( ((*($5) & $7) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$18
	CALL $312(($2 + [408]))
	
.LABEL $label$17
	CALL $297(($2 + [264]))
	
.LABEL $label$16
	CALL $312(($2 + [152]))
	
.LABEL $label$15
	CALL $297(($2 + [344]))
	
.LABEL $label$14
	if ( (*($5) & $7) ){ goto $label$12 }
	
.LABEL $label$13
	if ( (*($6) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($2 + [204])))
	if ( ((*($6) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($2 + [192])))
	$6 = *($2 + [152])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$6 = *($2 + [152])
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	*(($2 + [156])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$8
	if ( ((*($2 + [392]) & [1]) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*($11 + [8]))
	
.LABEL $label$47
	$6 = *($2 + [408])
	if ( ($6 == 0) ){ goto $label$48 }
	*($2 + [412]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$48
	$global$0 = ($2 + [432])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $78 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [23]) = $2
	*($3 + [24]) = $1
	$4 = ($0 + [88])
	$6 = *(($0 + [116]))
	$5 = *(($0 + [112]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($6 + [-24])
	$7 = *($2)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$6 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$4), [18054])
	goto $label$2 
	
.LABEL $label$3
	$2 = CALL db_find_i64(*($4), *(($0 + [96])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $110($4, $2)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$4), [18054])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [8]) = ($3 + [23])
	CALL eosio_assert([1], [18137])
	CALL $202($4, $7, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [12]) = ($3 + [23])
	*($3 + [8]) = ($3 + [24])
	CALL $203($3, $4, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
}

void .FUNC $79 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [24]) = $1
	$4 = *($2)
	$1 = *($2 + [8])
	$5 = [0]
	$2 = *([0] + [8216])
	CALL $81(($3 + [32]), $2)
	if ( ((int_64)$1 == (int_64)4544260) ){ goto $label$3 }
	if ( ((int_64)$1 == (int_64)1397703940) ){ goto $label$1 }
	if ( ((int_64)$1 != (int_64)297481618436) ){ goto $label$2 }
	$5 = [2]
	goto $label$1 
	
.LABEL $label$3
	$5 = [1]
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [16644])
	$5 = [276447231]
	
.LABEL $label$1
	*(($5 = (*($3 + [32]) + ($5 << [3])))) = ((int_64)*($5) + (int_64)$4)
	CALL $82(($2 + [8]), ($3 + [32]), *($2))
	$2 = *($3 + [32])
	if ( ($2 == 0) ){ goto $label$4 }
	*($3 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	if ( ((int_64)$1 == (int_64)4544260) ){ goto $label$8 }
	if ( ((int_64)$1 == (int_64)1397703940) ){ goto $label$7 }
	if ( ((int_64)$1 != (int_64)297481618436) ){ goto $label$6 }
	$1 = (int_64)2
	goto $label$5 
	
.LABEL $label$8
	$1 = (int_64)1
	goto $label$5 
	
.LABEL $label$7
	$1 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [16644])
	$1 = (int_64)99999999999999
	
.LABEL $label$5
	*($3 + [16]) = $1
	*($3 + [8]) = $4
	$6 = ($0 + [48])
	$1 = *($3 + [24])
	$5 = *(($0 + [76]))
	$7 = *(($0 + [72]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$13:
	$2 = ($5 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$12 }
	$5 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$6), [18054])
	if ( $8 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$2 = CALL db_find_i64(*($6), *(($0 + [56])), (int_64)-2111744841675901568, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$9 }
	$8 = CALL $188($6, $2)
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$6), [18054])
	
.LABEL $label$10
	$1 = *($0)
	*($3 + [36]) = ($3 + [8])
	*($3 + [32]) = ($3 + [16])
	CALL eosio_assert([1], [18137])
	CALL $196($6, $8, $1, ($3 + [32]))
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$9
	$1 = *($0)
	*($3) = ($3 + [24])
	CALL $197(($3 + [32]), ($0 + [8]), $1, $3)
	$1 = *($0)
	*($3 + [36]) = ($3 + [16])
	*($3 + [32]) = ($3 + [24])
	*($3 + [40]) = ($3 + [8])
	CALL $198($3, $6, $1, ($3 + [32]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $241 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [18328])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [18328])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-2111744841804152832, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $259 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $258 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [18328])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [18328])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-2507752926491967488, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $312 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $313 ()
{
	return [8232]
}

void .FUNC $314 (int_32 $0)
{
}

int_32 .FUNC $223 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18328])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [18328])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $224($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $316 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $315($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $268 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $217(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $269(*($1), *($0 + [32]))
	CALL $217(*($1), *($0 + [36]))
	CALL $217(*($1), *($0 + [40]))
	CALL $217(*($1), *($0 + [44]))
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [18328])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $251 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	$5 = [8]
	$6 = ($1 + [8])
	$7 = *($0)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$1 }
	CALL $215($6, *($4 + [8]), *(($4 + [12])))
	
.LABEL $label$1
	*($1 + [20 align=4]) = *($4 + [20 align=4])
	*(($1 + [28])) = *(($4 + [28]))
	$8 = ($1 + [20])
	$9 = *($1 + [8])
	$4 = *(($1 + [12]))
	$10 = ($4 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$3 }
	$5 = (($10 & [-8]) + $5)
	
.LABEL $label$3
	$4 = ($5 + [10])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$5 = CALL $324($4)
	goto $label$4 
	
.LABEL $label$5
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$4
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	*($3 + [32]) = $8
	*($3 + [36]) = ($1 + [21])
	*($3 + [40]) = ($1 + [24])
	CALL $252(($3 + [24]), ($3 + [16]))
	*($1 + [36]) = CALL db_store_i64(*($7 + [8]), (int_64)-2121395625386200416, *(*($0 + [8])), (int_64)-2121395625386200416, $5, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($7 + [16]) <= (uint_64)(int_64)-2121395625386200416) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $327($5)
	if ( ((uint_64)*($7 + [16]) > (uint_64)(int_64)-2121395625386200416) ){ goto $label$6 }
	
.LABEL $label$7
	*(($7 + [16])) = (int_64)-2121395625386200415
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [48])
}

void .FUNC $250 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18334])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [32]) = $1
	CALL $251(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)-2121395625386200416
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)-2121395625386200416
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $239(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [8])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($1 + [12])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $253 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $324($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([32])
	$6 = CALL $254($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $255(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $252 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $216(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18328])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18328])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $255 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $254 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [17985])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [18034])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [18132])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $257 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = ($1 + [8])
	$6 = *($0)
	$9 = *($1 + [8])
	$7 = ($1 + [12])
	$8 = *($7)
	$10 = int_32(($8 - $9) >> [3])
	if ( ((uint_32)$10 >= (uint_32)[3]) ){ goto $label$2 }
	$10 = ([2] - $10)
	*($3) = (int_64)0
	$9 = ($1 + [16])
	if ( ((uint_32)$8 >= (uint_32)*($9)) ){ goto $label$3 }
	$11 = [2]
	goto $label$1 
	
.LABEL $label$3
	$11 = [0]
	goto $label$1 
	
.LABEL $label$2
	$11 = [4]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$29 
	
.LABEL $label$31
	$10 = ($10 + [-1])
	$8 = *($7)
	*($3) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)*($9)) ){ goto $label$15 }
	$11 = [2]
	goto $label$4 
	
.LABEL $label$30
	*($8) = (int_64)0
	*($7) = ($8 + [8])
	if ( $10 ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$29
	CALL $3($5, $3)
	if ( $10 ){ goto $label$14 }
	$11 = [3]
	goto $label$4 
	
.LABEL $label$28
	$9 = *(($1 + [8]))
	$8 = *(($1 + [12]))
	$10 = int_32(($8 - $9) >> [3])
	$11 = [4]
	goto $label$4 
	
.LABEL $label$27
	*(($9 + (*(*($4 + [4])) << [3]))) = *(*($4 + [8]))
	$12 = (CASTING uint_64)(uint_32 $10)
	$10 = [8]
	$11 = [5]
	goto $label$4 
	
.LABEL $label$26
	$10 = ($10 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$11 }
	$11 = [6]
	goto $label$4 
	
.LABEL $label$25
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$10 }
	$11 = [7]
	goto $label$4 
	
.LABEL $label$24
	$10 = ((($8 - $9) & [-8]) + $10)
	$11 = [8]
	goto $label$4 
	
.LABEL $label$23
	if ( ($10 <= [513]) ){ goto $label$9 }
	$11 = [15]
	goto $label$4 
	
.LABEL $label$22
	$8 = CALL $324($10)
	goto $label$8 
	
.LABEL $label$21
	$8 = ($2 - (($10 + [15]) & [-16]))
	$global$0 = $8
	$11 = [10]
	goto $label$4 
	
.LABEL $label$20
	*($3) = $8
	*($3 + [8]) = ($8 + $10)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [18328])
	CALL memcpy($8, $1, [8])
	*($3 + [4]) = ($8 + [8])
	CALL $216($3, $5)
	$12 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($6 + [8]), (int_64)-2111744841675901568, *(*($0 + [8])), $12, $8, $10)
	if ( ((uint_32)$10 >= (uint_32)[513]) ){ goto $label$7 }
	$11 = [11]
	goto $label$4 
	
.LABEL $label$19
	if ( ((uint_64)$12 >= (uint_64)*($6 + [16])) ){ goto $label$6 }
	$11 = [13]
	goto $label$4 
	
.LABEL $label$18
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$17
	CALL $327($8)
	if ( (uint_64)($12 <= *($6 + [16])) ){ goto $label$5 }
	$11 = [12]
	goto $label$4 
	
.LABEL $label$16
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$15
	$11 = [0]
	goto $label$4 
	
.LABEL $label$14
	$11 = [1]
	goto $label$4 
	
.LABEL $label$13
	$11 = [3]
	goto $label$4 
	
.LABEL $label$12
	$11 = [1]
	goto $label$4 
	
.LABEL $label$11
	$11 = [5]
	goto $label$4 
	
.LABEL $label$10
	$11 = [8]
	goto $label$4 
	
.LABEL $label$9
	$11 = [9]
	goto $label$4 
	
.LABEL $label$8
	$11 = [10]
	goto $label$4 
	
.LABEL $label$7
	$11 = [14]
	goto $label$4 
	
.LABEL $label$6
	$11 = [12]
	goto $label$4 
	
.LABEL $label$5
	$11 = [13]
	goto $label$4 
	$11
}

int_32 .FUNC $256 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = *(*(*($2 + [4])))
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [18328])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [18328])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-2111744841804152832, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	*($1 + [32]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [18269])
	$3 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [16])
	$9 = ($1 + [32])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $324($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [18328])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert(((int_32)($3 + [-8]) > (int_32)[7]), [18328])
	CALL memcpy(($4 + [8]), ($1 + [8]), [8])
	*($5 + [4]) = ($4 + [16])
	CALL $217($5, $7)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($5 + [4]), $9, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $327($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *(*(($4 + [4])))
	*($1 + [8]) = (int_64)0
	*($1 + [32]) = $5
	$4 = *($1 + [16])
	$6 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [24])
	$5 = (CASTING uint_64)(uint_32 $6)
	$7 = ($1 + [16])
	$8 = ($1 + [8])
	$9 = ($1 + [32])
	$6 = *($0)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $324($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [18328])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert(((int_32)($4 + [-8]) > (int_32)[7]), [18328])
	CALL memcpy(($2 + [8]), $8, [8])
	*($3 + [4]) = ($2 + [16])
	CALL $217($3, $7)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $9, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$5 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($6 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $5, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$5 >= (uint_64)*($6 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $327($2)
	if ( (uint_64)($5 <= *($6 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $239 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $238 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $211(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18132])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18132])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($1 + [8])
	$5 = *(($1 + [36]))
	$4 = *(($1 + [32]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$3), [18054])
	if ( ($7 == 0) ){ goto $label$1 }
	CALL $298($0, ($7 + [16]))
	return 
	
.LABEL $label$2
	$6 = CALL db_find_i64(*($3), *(($1 + [16])), (int_64)3607749779137757184, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $89($3, $6)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$3), [18054])
	CALL $298($0, ($6 + [16]))
	return 
	
.LABEL $label$1
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = CALL $323([16751])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($6 << [1])
	$5 = ($0 + [1])
	if ( $6 ){ goto $label$6 }
	*(($5 + $6)) = [0]
	return 
	
.LABEL $label$7
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $6
	
.LABEL $label$6
	CALL memcpy($5, [16751], $6)
	*(($5 + $6)) = [0]
	return (unreachable)
	
.LABEL $label$5
	CALL $297($0)
}

void .FUNC $95 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = $2
	$4 = ($0 + [8])
	$6 = *(($0 + [36]))
	$5 = *(($0 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$4), [18054])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [16])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $89($4, $7)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$4), [18054])
	
.LABEL $label$1
	$9 = (int_64)0
	$10 = (int_64)59
	$7 = [16752]
	$11 = (int_64)0
	
.LOOP $label$5:
	$12 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$6 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$6 = ($6 + [-91])
	goto $label$7 
	
.LABEL $label$8
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$6
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$5 }
	if ( ($8 == 0) ){ goto $label$18 }
	if ( ((int_64)$11 == (int_64)$2) ){ goto $label$9 }
	$9 = (int_64)0
	$10 = (int_64)59
	$7 = [16765]
	$11 = (int_64)0
	
.LOOP $label$19:
	$12 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$20 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$6 = ($6 + [-91])
	goto $label$21 
	
.LABEL $label$22
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$20
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$19 }
	if ( ((int_64)$11 == (int_64)$2) ){ goto $label$9 }
	$8 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( (int_64)($2 == 0) ){ goto $label$17 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$15 }
	
.LOOP $label$23:
	$6 = ($7 + [-24])
	$5 = *($6)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$16 }
	$7 = $6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$23 }
	goto $label$15 
	
.LABEL $label$18
	if ( ((int_64)$11 == (int_64)$2) ){ goto $label$25 }
	$9 = (int_64)0
	$10 = (int_64)59
	$7 = [16765]
	$11 = (int_64)0
	
.LOOP $label$26:
	$12 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$27 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$6 = ($6 + [-91])
	goto $label$28 
	
.LABEL $label$29
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$27
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$26 }
	if ( ((int_64)$11 != (int_64)$2) ){ goto $label$24 }
	
.LABEL $label$25
	$2 = *($0)
	*($3 + [8]) = $2
	
.LABEL $label$24
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$30 }
	$2 = *($0)
	*($3 + [8]) = $2
	
.LABEL $label$30
	CALL $96($0, $1, $2)
	goto $label$9 
	
.LABEL $label$17
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$31:
	$6 = ($7 + [-24])
	$5 = *($6)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$12 }
	$7 = $6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$31 }
	goto $label$11 
	
.LABEL $label$16
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$4), [18054])
	goto $label$14 
	
.LABEL $label$15
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$13 }
	$5 = CALL $89($4, $7)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$4), [18054])
	
.LABEL $label$14
	$9 = *($0)
	*($3) = ($3 + [8])
	CALL eosio_assert([1], [18137])
	CALL $97($4, $5, $9, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$13
	CALL eosio_assert([0], [16778])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$12
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$4), [18054])
	goto $label$10 
	
.LABEL $label$11
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	$5 = CALL $89($4, $7)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$4), [18054])
	
.LABEL $label$10
	$1 = *($5 + [32])
	$9 = (int_64)0
	$10 = (int_64)59
	$7 = [16752]
	$11 = (int_64)0
	
.LOOP $label$32:
	$12 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$33 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$6 = ($6 + [-91])
	goto $label$34 
	
.LABEL $label$35
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$33
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$32 }
	if ( ((int_64)$1 == (int_64)$11) ){ goto $label$36 }
	$9 = (int_64)0
	$10 = (int_64)59
	$7 = [16765]
	$11 = (int_64)0
	
.LOOP $label$37:
	$12 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$38 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$6 = ($6 + [-91])
	goto $label$39 
	
.LABEL $label$40
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$38
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$37 }
	if ( ((int_64)$1 != (int_64)$11) ){ goto $label$9 }
	
.LABEL $label$36
	$9 = *($0)
	*($3) = $0
	CALL eosio_assert([1], [18137])
	CALL $98($4, $5, $9, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	$global$0 = ($3 + [16])
}

void .FUNC $96 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [8]) = $2
	*($3 + [16]) = $1
	$4 = ($0 + [8])
	$6 = *(($0 + [36]))
	$5 = *(($0 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$4), [18054])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [16])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $89($4, $7) + [40]) == (int_32)$4), [18054])
	
.LABEL $label$2
	CALL eosio_assert([0], [16794])
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [4]) = ($3 + [8])
	*($3) = ($3 + [16])
	*($3 + [56]) = $1
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$8()), [18334])
	*($3 + [32]) = $4
	*($3 + [36]) = $3
	*($3 + [40]) = ($3 + [56])
	*(($7 = CALL _Znwj([56])) + [24]) = [0]
	*($7 + [16 align=4]) = (int_64)0
	*($7 + [40]) = $4
	CALL $99(($3 + [32]), $7)
	*($3 + [48]) = $7
	$1 = *($7)
	*($3 + [32]) = $1
	$5 = *($7 + [44])
	*($3 + [28]) = $5
	$8 = ($0 + [36])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [40]))) ){ goto $label$8 }
	*($6 + [8]) = $1
	*($6 + [16]) = $5
	*($3 + [48]) = [0]
	*($6) = $7
	*($8) = ($6 + [24])
	$7 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $93(($0 + [32]), ($3 + [48]), ($3 + [32]), ($3 + [28]))
	$7 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( $7 ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$6
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($7 + [24])))
	
.LABEL $label$9
	CALL _ZdlPv($7)
	$global$0 = ($3 + [64])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	*($1 + [32]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [18269])
	$3 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [16])
	$9 = ($1 + [32])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $324($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [18328])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert(((int_32)($3 + [-8]) > (int_32)[7]), [18328])
	CALL memcpy(($4 + [8]), ($1 + [8]), [8])
	*($5 + [4]) = ($4 + [16])
	CALL $217($5, $7)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($5 + [4]), $9, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $327($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	*($1 + [8]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [18269])
	$3 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [24])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [16])
	$9 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $324($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [18328])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert(((int_32)($3 + [-8]) > (int_32)[7]), [18328])
	CALL memcpy(($4 + [8]), $9, [8])
	*($5 + [4]) = ($4 + [16])
	CALL $217($5, $7)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($5 + [4]), ($1 + [32]), [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $327($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	$6 = *($1)
	$7 = ($1 + [16])
	CALL $300($7, *($3))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [18269])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [24])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $324($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [18328])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert(((int_32)($3 + [-8]) > (int_32)[7]), [18328])
	CALL memcpy(($4 + [8]), ($1 + [8]), [8])
	*($5 + [4]) = ($4 + [16])
	CALL $217($5, $7)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($5 + [4]), ($1 + [32]), [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $327($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = (int_64)0
	$5 = *(($4 + [8]))
	$6 = *($0)
	$7 = ($1 + [16])
	CALL $300($7, *(($4 + [4])))
	*($1 + [32]) = *($5)
	$4 = *($1 + [16])
	$5 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [24])
	$8 = (CASTING uint_64)(uint_32 $5)
	$5 = ($1 + [32])
	$9 = ($1 + [8])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $324($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [18328])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert(((int_32)($4 + [-8]) > (int_32)[7]), [18328])
	CALL memcpy(($2 + [8]), $9, [8])
	*($3 + [4]) = ($2 + [16])
	CALL $217($3, $7)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $5, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($6 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($6 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $327($2)
	if ( (uint_64)($8 <= *($6 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([152])
	CALL $139($5)
	*($5 + [136]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [56])
	*($3 + [68]) = ($5 + [68])
	*($3 + [72]) = ($5 + [72])
	*($3 + [76]) = ($5 + [88])
	*($3 + [80]) = ($5 + [100])
	*($3 + [84]) = ($5 + [112])
	*($3 + [88]) = ($5 + [124])
	CALL $276(($3 + [40]), ($3 + [32]))
	*($5 + [140]) = $1
	*($5 + [144 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $141(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [124]) & [1]) ){ goto $label$18 }
	if ( (*($1 + [112]) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*(($1 + [132])))
	if ( ((*($1 + [112]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($1 + [120])))
	$4 = [1]
	if ( ((*($1 + [100]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$4 = [1]
	if ( (*($1 + [100]) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( (*($1 + [88]) & $4) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [108])))
	if ( ((*($1 + [88]) & $4) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [96])))
	$4 = *($1 + [56])
	if ( $4 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$4 = *($1 + [56])
	if ( ($4 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	*(($1 + [60])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

int_32 .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [40]) = (int_64)0
	*(($1 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [17985])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18034])
	*(($0 + [64])) = [0]
	*($0 + [56 align=4]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*(($1 = ($0 + [80]))) = (int_64)1398362884
	CALL eosio_assert([1], [17985])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18034])
	*($0 + [88 align=4]) = (int_64)0
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*($0 + [112 align=4]) = (int_64)0
	*(($0 + [120])) = (int_64)0
	*(($0 + [128])) = (int_64)0
	return $0
}

int_32 .FUNC $269 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18328])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18328])
	CALL memcpy(*($7), $6, [1])
	$4 = (*($7) + [1])
	*($7) = $4
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $130 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	float_64 $6
	int_64 $7
	float_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL $135($3, $0)
	$4 = *($1 + [8])
	$5 = ((int_64)$4 == (int_64)4544260)
	$6 = ((float_64)(CASTING float_64)(int_64 *($1)) * (float_64)(float_64)0.007)
	if ( (((float_64)$6 < (float_64)(float_64)18446744073709551615) & ((float_64)$6 >= (float_64)(float_64)0)) ){ goto $label$4 }
	$7 = (int_64)0
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (Rounds 0)($6)
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$1 = [1]
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$4 == (int_64)1397703940) ){ goto $label$6 }
	if ( ((int_64)$4 != (int_64)297481618436) ){ goto $label$5 }
	$1 = [2]
	goto $label$1 
	
.LABEL $label$6
	$1 = [0]
	goto $label$1 
	
.LABEL $label$5
	CALL eosio_assert([0], [16644])
	$1 = [276447231]
	
.LABEL $label$1
	$1 = ($1 << [3])
	$5 = (*($3) + $1)
	$8 = (CASTING float_64)(uint_64 $7)
	$6 = ((float_64)((float_64)$8 * (float_64)(float_64)0.2) + (float_64)(CASTING float_64)(uint_64 *($5)))
	if ( (((float_64)$6 < (float_64)(float_64)18446744073709551615) & ((float_64)$6 >= (float_64)(float_64)0)) ){ goto $label$8 }
	$9 = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	$9 = (Rounds 0)($6)
	
.LABEL $label$7
	*($5) = $9
	$1 = (*($3 + [12]) + $1)
	$6 = ((float_64)((float_64)$8 * (float_64)(float_64)0.8) + (float_64)(CASTING float_64)(uint_64 *($1)))
	if ( (((float_64)$6 < (float_64)(float_64)18446744073709551615) & ((float_64)$6 >= (float_64)(float_64)0)) ){ goto $label$10 }
	$9 = (int_64)0
	goto $label$9 
	
.LABEL $label$10
	$9 = (Rounds 0)($6)
	
.LABEL $label$9
	*($1) = $9
	$10 = *([0] + [8216])
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17985])
	$9 = (uint_64)$4 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$11 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$9 = $11
	$5 = [1]
	$12 = $1
	$1 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$9 = $11
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$12 = ($1 + [1])
	$1 = $12
	if ( $5 ){ goto $label$15 }
	$5 = [1]
	$1 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [18034])
	CALL $81(($3 + [48]), $10)
	if ( ((int_64)$4 == (int_64)4544260) ){ goto $label$19 }
	if ( ((int_64)$4 == (int_64)1397703940) ){ goto $label$18 }
	if ( ((int_64)$4 != (int_64)297481618436) ){ goto $label$17 }
	$1 = [2]
	goto $label$16 
	
.LABEL $label$19
	$1 = [1]
	goto $label$16 
	
.LABEL $label$18
	$1 = [0]
	goto $label$16 
	
.LABEL $label$17
	CALL eosio_assert([0], [16644])
	$1 = [276447231]
	
.LABEL $label$16
	*(($1 = (*($3 + [48]) + ($1 << [3])))) = ((int_64)*($1) + (int_64)$7)
	CALL $82(($10 + [8]), ($3 + [48]), *($10))
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$20 }
	*($3 + [52]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$20
	CALL $136(($0 + [88]), $3, *($0))
	$1 = *(($3 + [12]))
	if ( ($1 == 0) ){ goto $label$21 }
	*(($3 + [16])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$21
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$22 }
	*($3 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$22
	$global$0 = ($3 + [64])
}

void .FUNC $131 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($0 + [8]) = (int_64)4544260
	*($0) = (int_64)0
	CALL eosio_assert([1], [17985])
	$5 = [0]
	$6 = (int_64)17751
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$8 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [18034])
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$7 }
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	$9 = ($1 + [8])
	$5 = *(($1 + [36]))
	if ( ((int_32)$5 == (int_32)*(($1 + [32]))) ){ goto $label$9 }
	$8 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$9), [18054])
	if ( $8 ){ goto $label$8 }
	$8 = ($4 + [64])
	goto $label$8 
	
.LABEL $label$9
	$5 = CALL db_find_i64(*($9), *(($1 + [16])), (int_64)7867653554838700032, (int_64)7867653554838700032)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $116($9, $5)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$9), [18054])
	goto $label$8 
	
.LABEL $label$10
	$8 = ($4 + [64])
	
.LABEL $label$8
	*(($5 = (($4 + [48]) + [8]))) = *(($8 + [8]))
	*($4 + [48]) = *($8)
	$6 = *($3)
	*($5) = ((int_64)*($5) + (int_64)$6)
	CALL $117($9, ($4 + [48]), *($1))
	*($0) = ((int_64)$6 * (int_64)5)
	if ( ((uint_64)*($5) > (uint_64)(int_64)1999999999) ){ goto $label$11 }
	*($0) = ((int_64)$6 * (int_64)6)
	
.LABEL $label$11
	*((($4 + [16]) + [8])) = [0]
	*((($4 + [32]) + [8])) = *(($0 + [8]))
	*($4 + [16]) = (int_64)0
	*($4 + [32]) = *($0)
	$9 = *([0] + [8216])
	$5 = CALL $323([17307])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$14 }
	*($4 + [16]) = ($5 << [1])
	$8 = (($4 + [16]) | [1])
	if ( $5 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$1 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($1)
	*($4 + [16]) = ($1 | [1])
	*($4 + [24]) = $8
	*($4 + [20]) = $5
	
.LABEL $label$13
	CALL memcpy($8, [17307], $5)
	
.LABEL $label$12
	*(($8 + $5)) = [0]
	*(($4 + [8])) = *((($4 + [32]) + [8]))
	*($4) = *($4 + [32])
	CALL $54($9, $2, $4, ($4 + [16]))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($4 + [24]))
	
.LABEL $label$15
	CALL $64(*([0] + [8220]), *($0))
	
.LABEL $label$7
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$6
	CALL $297(($4 + [16]))
}

void .FUNC $132 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$4 = ($global$0 - [144])
	$global$0 = $4
	if ( ((int_64)*($2 + [8]) != (int_64)1397703940) ){ goto $label$1 }
	$5 = ($0 + [128])
	$7 = *(($0 + [156]))
	$6 = *(($0 + [152]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$6:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$5 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$5), [18054])
	goto $label$3 
	
.LABEL $label$4
	$8 = CALL db_find_i64(*($5), *(($0 + [136])), (int_64)7867653768827764736, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $118($5, $8)
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$5), [18054])
	
.LABEL $label$3
	$10 = *($0)
	$11 = *($9 + [16])
	$12 = *($9 + [8])
	CALL eosio_assert([1], [18137])
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$5), [18172])
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$8()), [18218])
	*($9 + [8]) = ((int_64)$12 + (int_64)*($2))
	*($9 + [16]) = ((int_64)$11 + (int_64)*($3))
	$11 = *($9)
	CALL eosio_assert([1], [18269])
	*($4 + [112]) = (($4 + [64]) + [32])
	*($4 + [108]) = ($4 + [64])
	*($4 + [104]) = ($4 + [64])
	*($4 + [120]) = ($4 + [104])
	*($4 + [132]) = ($9 + [8])
	*($4 + [128]) = $9
	*($4 + [136]) = ($9 + [16])
	*($4 + [140]) = ($9 + [24])
	CALL $119(($4 + [128]), ($4 + [120]))
	CALL db_update_i64(*($9 + [36]), $10, ($4 + [64]), [32])
	$8 = ($0 + [144])
	if ( (uint_64)($11 <= *($8)) ){ goto $label$2 }
	*($8) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$11 = *(($3 + [8]))
	$8 = *([0] + [8216])
	$10 = *($3)
	$12 = *($2)
	$13 = *(($2 + [8]))
	*((($4 + [16]) + [8])) = $13
	*(($4 + [8])) = $11
	*((($4 + [48]) + [8])) = $13
	*((($4 + [32]) + [8])) = $11
	*($4 + [48]) = $12
	*($4 + [32]) = $10
	*($4) = $10
	*($4 + [16]) = $12
	CALL $137($8, $1, ($4 + [16]), $4)
	
.LABEL $label$1
	$global$0 = ($4 + [144])
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = ($0 + [88])
	$4 = *($1)
	$6 = *(($0 + [116]))
	$5 = *(($0 + [112]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [136]) == (int_32)$3), [18054])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($3), *(($0 + [96])), (int_64)7867653721402900480, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $138($3, $7) + [136]) == (int_32)$3), [18054])
	
.LABEL $label$2
	CALL eosio_assert([0], [17358])
	
.LABEL $label$1
	$4 = *($0)
	*($2 + [48]) = $1
	*($2 + [64]) = $4
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$8()), [18334])
	*($2 + [8]) = $3
	*($2 + [12]) = ($2 + [48])
	*($2 + [16]) = ($2 + [64])
	$7 = CALL _Znwj([152])
	CALL $139($7)
	*($7 + [136]) = $3
	CALL $140(($2 + [8]), $7)
	*($2 + [56]) = $7
	$4 = *($7)
	*($2 + [8]) = $4
	$5 = *($7 + [140])
	*($2 + [52]) = $5
	$8 = ($0 + [116])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [120]))) ){ goto $label$10 }
	*($6 + [8]) = $4
	*($6 + [16]) = $5
	*($2 + [56]) = [0]
	*($6) = $7
	*($8) = ($6 + [24])
	$7 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $141(($0 + [112]), ($2 + [56]), ($2 + [8]), ($2 + [52]))
	$7 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $7 ){ goto $label$8 }
	
.LABEL $label$9
	$4 = *($1)
	if ( (uint_64)($4 <= (int_64)151) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( (*($7 + [124]) & [1]) ){ goto $label$19 }
	if ( (*($7 + [112]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*(($7 + [132])))
	if ( ((*($7 + [112]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($7 + [120])))
	$6 = [1]
	if ( ((*($7 + [100]) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$6 = [1]
	if ( (*($7 + [100]) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( (*($7 + [88]) & $6) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*(($7 + [108])))
	if ( ((*($7 + [88]) & $6) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($7 + [96])))
	$6 = *($7 + [56])
	if ( $6 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$6 = *($7 + [56])
	if ( ($6 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	*(($7 + [60])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	CALL _ZdlPv($7)
	$4 = *($1)
	if ( (uint_64)($4 <= (int_64)151) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = ((int_64)$4 + (int_64)-150)
	$5 = *(($0 + [116]))
	$8 = *(($0 + [112]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$21 }
	
.LOOP $label$23:
	$7 = ($5 + [-24])
	$6 = *($7)
	if ( ((int_64)*($6) == (int_64)$4) ){ goto $label$22 }
	$5 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$21 }
	CALL eosio_assert(((int_32)*($6 + [136]) == (int_32)$3), [18054])
	if ( ($6 == 0) ){ goto $label$6 }
	$8 = ($0 + [96])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($0 + [96])
	$7 = CALL db_find_i64(*(($0 + [88])), *($8), (int_64)7867653721402900480, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $138($3, $7)
	CALL eosio_assert(((int_32)*($6 + [136]) == (int_32)$3), [18054])
	
.LABEL $label$20
	$7 = [0]
	$4 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$5 = CALL db_lowerbound_i64(*($3), *($8), (int_64)7867653721402900480, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$24 }
	$7 = CALL $138($3, $5)
	
.LABEL $label$24
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	if ( (uint_64)((int_64))(((int_64)$4 & (int_64)4294967295) - *($7 + [16])) <= (int_64)11) ){ goto $label$6 }
	
.LOOP $label$25:
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [18772])
	CALL eosio_assert($5, [18806])
	$5 = CALL db_next_i64(*($7 + [140]), ($2 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$26 }
	CALL $138($3, $5)
	
.LABEL $label$26
	CALL $142($3, $7)
	$7 = [0]
	$5 = CALL db_lowerbound_i64(*($3), *($8), (int_64)7867653721402900480, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$27 }
	$7 = CALL $138($3, $5)
	
.LABEL $label$27
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$25 }
	
.LABEL $label$6
	$9 = *($0)
	$4 = (int_64)6
	
.LOOP $label$28:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$28 }
	$4 = (int_64)0
	$10 = (int_64)59
	$7 = [17370]
	$11 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$34 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [-91])
	goto $label$32 
	
.LABEL $label$34
	$12 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$30
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)4294967291)
	$11 = ((int_64)$12 | (int_64)$11)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$29 }
	*($2 + [16]) = $11
	*($2 + [8]) = $9
	*(($7 = CALL _Znwj([16]))) = $9
	*($7 + [8]) = (int_64)3617214756542218240
	$3 = ($7 + [16])
	*(($2 + [32])) = $3
	*(($2 + [28])) = $3
	*($2 + [24]) = $7
	CALL $143(($2 + [36]), $1)
	CALL $108(($2 + [64]), ($2 + [8]))
	$7 = *($2 + [64])
	CALL send_inline($7, (*($2 + [68]) - $7))
	$7 = *($2 + [64])
	if ( ($7 == 0) ){ goto $label$35 }
	*($2 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$35
	$7 = *($2 + [36])
	if ( ($7 == 0) ){ goto $label$36 }
	*(($2 + [40])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$36
	$7 = *($2 + [24])
	if ( ($7 == 0) ){ goto $label$37 }
	*(($2 + [28])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$37
	$global$0 = ($2 + [80])
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [18836])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18881])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18931])
	$6 = ($4 + [-24])
	$8 = *($5)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$8:
	$9 = ($6 + [24])
	CALL $273($6, $9)
	$4 = ($6 + [48])
	$6 = $9
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$8 }
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = $6
	
.LABEL $label$6
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	if ( ((*($6 + [116]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($6 + [124])))
	if ( ((*($6 + [104]) & [1]) == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((*($6 + [104]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($6 + [112])))
	if ( ((*($6 + [92]) & [1]) == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((*($6 + [92]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($6 + [100])))
	$8 = *($6 + [80])
	if ( $8 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$8 = *($6 + [80])
	if ( ($8 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	*(($6 + [84])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($6 + [56])))
	
.LABEL $label$18
	CALL _ZdlPv($6)
	
.LABEL $label$10
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [136]))
	$6 = *($1 + [140])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$20 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3617214763869541760, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL db_idx64_remove($6)
	
.LABEL $label$19
	$global$0 = ($2 + [16])
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($2 + [24])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = (int_64)0
	$3 = ($2 + [20])
	$4 = [2]
	$5 = [0]
	*($2 + [56]) = (int_64)0
	if ( ((uint_32)[0] >= (uint_32)[0]) ){ goto $label$2 }
	$7 = [2]
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$34 
	
.LABEL $label$36
	$4 = ($4 + [-1])
	$6 = *((($2 + [8]) + [8]))
	$5 = *($2 + [12])
	*($2 + [56]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$17 }
	$7 = [2]
	goto $label$3 
	
.LABEL $label$35
	*($5) = (int_64)0
	*($2 + [12]) = ($5 + [8])
	if ( $4 ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$34
	CALL $3(($2 + [8]), ($2 + [56]))
	if ( $4 ){ goto $label$16 }
	$7 = [3]
	goto $label$3 
	
.LABEL $label$33
	$6 = ($2 + [24])
	$4 = *($6)
	$5 = int_32(($4 - *(($2 + [20]))) >> [3])
	if ( ((uint_32)$5 > (uint_32)[2]) ){ goto $label$13 }
	$7 = [13]
	goto $label$3 
	
.LABEL $label$32
	$5 = ([2] - $5)
	*($2 + [56]) = (int_64)0
	$8 = ($2 + [28])
	if ( ((uint_32)$4 >= (uint_32)*($8)) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$31
	$5 = ($5 + [-1])
	$4 = *($6)
	*($2 + [56]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)*($8)) ){ goto $label$19 }
	$7 = [16]
	goto $label$3 
	
.LABEL $label$30
	*($4) = (int_64)0
	*($6) = ($4 + [8])
	if ( $5 ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$29
	CALL $3($3, ($2 + [56]))
	if ( $5 ){ goto $label$18 }
	$7 = [4]
	goto $label$3 
	
.LABEL $label$28
	$5 = ($1 + [88])
	$4 = *(($1 + [116]))
	if ( ((int_32)$4 == (int_32)*(($1 + [112]))) ){ goto $label$10 }
	$7 = [5]
	goto $label$3 
	
.LABEL $label$27
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$5), [18054])
	goto $label$9 
	
.LABEL $label$26
	$4 = [0]
	$6 = CALL db_find_i64(*($5), *(($1 + [96])), (int_64)-2121395625802072064, (int_64)-2121395625802072064)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$7 = [12]
	goto $label$3 
	
.LABEL $label$25
	$4 = CALL $229($5, $6)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$5), [18054])
	$7 = [6]
	goto $label$3 
	
.LABEL $label$24
	CALL $230($0, ( $4 ? ($2 + [8]) : $4 ))
	$4 = *($2 + [20])
	if ( ($4 == 0) ){ goto $label$7 }
	$7 = [7]
	goto $label$3 
	
.LABEL $label$23
	*(($2 + [24])) = $4
	CALL _ZdlPv($4)
	$7 = [8]
	goto $label$3 
	
.LABEL $label$22
	$4 = *($2 + [8])
	if ( ($4 == 0) ){ goto $label$6 }
	$7 = [9]
	goto $label$3 
	
.LABEL $label$21
	*($2 + [12]) = $4
	CALL _ZdlPv($4)
	$7 = [10]
	goto $label$3 
	
.LABEL $label$20
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$19
	$7 = [14]
	goto $label$3 
	
.LABEL $label$18
	$7 = [15]
	goto $label$3 
	
.LABEL $label$17
	$7 = [0]
	goto $label$3 
	
.LABEL $label$16
	$7 = [1]
	goto $label$3 
	
.LABEL $label$15
	$7 = [3]
	goto $label$3 
	
.LABEL $label$14
	$7 = [1]
	goto $label$3 
	
.LABEL $label$13
	$7 = [4]
	goto $label$3 
	
.LABEL $label$12
	$7 = [4]
	goto $label$3 
	
.LABEL $label$11
	$7 = [15]
	goto $label$3 
	
.LABEL $label$10
	$7 = [11]
	goto $label$3 
	
.LABEL $label$9
	$7 = [6]
	goto $label$3 
	
.LABEL $label$8
	$7 = [6]
	goto $label$3 
	
.LABEL $label$7
	$7 = [8]
	goto $label$3 
	
.LABEL $label$6
	$7 = [10]
	goto $label$3 
	
.LABEL $label$5
	$7 = [16]
	goto $label$3 
	
.LABEL $label$4
	$7 = [14]
	goto $label$3 
	$7
}

void .FUNC $136 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [18054])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2121395625802072064, (int_64)-2121395625802072064)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $229($0, $4)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [18054])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18137])
	CALL $231($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $232($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $137 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $1
	if ( ((int_64)*($2 + [8]) != (int_64)1397703940) ){ goto $label$2 }
	$5 = ($0 + [88])
	$7 = *(($0 + [116]))
	$6 = *(($0 + [112]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$6:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$5 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$5), [18054])
	goto $label$3 
	
.LABEL $label$4
	$8 = CALL db_find_i64(*($5), *(($0 + [96])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $110($5, $8)
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$5), [18054])
	
.LABEL $label$3
	*($4 + [36]) = $9
	*($4 + [32]) = $5
	$1 = *($0)
	*($4 + [20]) = $2
	*($4 + [24]) = $3
	*($4 + [16]) = ($4 + [32])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [18137])
	CALL $147($5, $9, $1, ($4 + [16]))
	
.LABEL $label$2
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$1
	*($4 + [36]) = [0]
	*($4 + [32]) = $5
	$1 = *($0)
	*($4 + [20]) = $2
	*($4 + [24]) = $3
	*($4 + [16]) = ($4 + [40])
	CALL $148(($4 + [8]), $5, $1, ($4 + [16]))
	$global$0 = ($4 + [48])
}

int_32 .FUNC $260 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18128])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $106($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18132])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $323 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $261 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18128])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = ($6 - $7)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $262($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + $2)
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($5) != (int_32)$3), [18132])
	CALL memcpy($7, *($2), [1])
	$3 = (*($2) + [1])
	*($2) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $213 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $312($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $262 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $312($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $283 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [108]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [116])))
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [104])))
	if ( ((*($1 + [84]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [84]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [92])))
	if ( (*($1 + [48]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	return $0
}

void .FUNC $303 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $302 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $301 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $263 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	*($0) = *($1)
	$2 = *(($1 + [8]))
	$3 = *(($1 + [16]))
	$4 = *(($1 + [24]))
	$5 = *(($1 + [32]))
	$6 = *(($1 + [40]))
	$7 = *(($1 + [48]))
	$8 = *(($1 + [56]))
	*(($0 + [64])) = (int_64)0
	*(($0 + [56])) = $8
	*(($0 + [48])) = $7
	*(($0 + [40])) = $6
	*(($0 + [32])) = $5
	*(($0 + [24])) = $4
	*(($0 + [16])) = $3
	*(($0 + [8])) = $2
	*($0 + [60]) = [0]
	$8 = (*(($1 + [64])) - *($1 + [60]))
	if ( ($8 == 0) ){ goto $label$2 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$1 }
	$9 = CALL _Znwj($8)
	*(($0 + [60])) = $9
	*(($0 + [68])) = ($9 + $8)
	*(($8 = ($0 + [64]))) = $9
	$10 = *(($1 + [60]))
	$11 = (*(($1 + [64])) - $10)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($9, $10, $11)
	*($8) = (*($8) + $11)
	
.LABEL $label$2
	*($0 + [72]) = *($1 + [72])
	*(($0 + [80])) = *(($1 + [80]))
	CALL $298(($0 + [88]), ($1 + [88]))
	CALL $298(($0 + [100]), ($1 + [100]))
	CALL $298(($0 + [112]), ($1 + [112]))
	CALL $298(($0 + [124]), ($1 + [124]))
	return $0
	
.LABEL $label$1
	CALL $312(($0 + [60]))
	return (unreachable)
}

void .FUNC $307 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $309($1, $0, [17109])
	CALL $311()
	(unreachable)
}

void .FUNC $306 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $309($1, $0, [17260])
	CALL $310()
	(unreachable)
}

int_32 .FUNC $305 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $322(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $304 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $303($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $309 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $323($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $301($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_64 .FUNC $308 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $323([16684])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [16684], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $313())
	*(CALL $313()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $320($4, ($3 + [12]), $2)
	$0 = CALL $313()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $306($3)
	
.LABEL $label$1
	CALL $307($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $310 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $265 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = ($global$0 - [64])
	$global$0 = $7
	$0 = *($0 + [4])
	$8 = *($0 + [4])
	$9 = (*(*($0)) + int_32($8 >> [1]))
	$0 = *($0)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($9) + $0))
	
.LABEL $label$1
	$6 = CALL $298($7, $6)
	$5 = CALL $298(($7 + [16]), $5)
	$4 = CALL $298(($7 + [32]), $4)
	$3 = CALL $298(($7 + [48]), $3)
	CALL void $9((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_32 $0))
	if ( (*($6) & [1]) ){ goto $label$8 }
	if ( (*($5) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($5 + [8]))
	$0 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($4) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($3) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($7 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($7 + [64])
}

int_32 .FUNC $208 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([24])) + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [12]) = $0
	CALL $211(($3 + [32]), $5)
	*($5 + [16]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-2111264453225158656
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-2111264453225158656
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $212(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1)
	if ( ($4 == 0) ){ goto $label$10 }
	*($1 + [4]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $209 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	$3 = *($3)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$1 }
	CALL $215($1, *($3), *($3 + [4]))
	
.LABEL $label$1
	CALL eosio_assert([1], [18269])
	$7 = *($1)
	$6 = *($1 + [4])
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$3 = [0]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	$3 = (($8 & [-8]) + $3)
	
.LABEL $label$3
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $324($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $216($5, $1)
	CALL db_update_i64(*(($1 + [16])), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)-2111264453225158656) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $327($4)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-2111264453225158656) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = (int_64)-2111264453225158655
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [16])
}

void .FUNC $202 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	*($1 + [24]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [18269])
	*($4 + [48]) = ($4 + [25])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [8])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [16])
	*($4 + [76]) = ($1 + [24])
	CALL $240(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [25])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $203 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18334])
	*(($5 = CALL _Znwj([48])) + [32]) = $1
	*($5) = *(*($3))
	*($5 + [8]) = (int_64)0
	$3 = *(*($3 + [4]))
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $3
	*($4 + [48]) = ($4 + [25])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($5 + [8])
	*($4 + [64]) = $5
	*($4 + [72]) = ($5 + [16])
	*($4 + [76]) = ($5 + [24])
	CALL $240(($4 + [64]), ($4 + [56]))
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-3020371635640205312, $2, $6, $4, [25])
	*($5 + [36]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [64]) = $5
	$6 = *($5)
	*($4) = $6
	*($4 + [40]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [64]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $219(($1 + [24]), ($4 + [64]), $4, ($4 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $200 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	*($1 + [8]) = ((int_64)*(*($3 + [4])) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [18269])
	CALL eosio_assert([1], [18328])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18328])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $201 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18334])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $258($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $259(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $206 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [124]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [132])))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [120])))
	if ( ((*($3 + [100]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [100]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [108])))
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [96])))
	$4 = *($3 + [56])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($3 + [56])
	if ( ($4 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	*(($3 + [60])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $207 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [116]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [124])))
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [112])))
	if ( ((*($3 + [92]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [92]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [100])))
	$4 = *($3 + [80])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($3 + [80])
	if ( ($4 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	*(($3 + [84])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$13
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $204 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18836])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18881])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18931])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $205 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [18836])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18881])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18931])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [8])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $282 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $217(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18328])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18328])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $217(*($1), *($0 + [40]))
	CALL $217(*($1), *($0 + [44]))
	CALL $217(*($1), *($0 + [48]))
	$3 = *($0 + [52])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [18328])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $181 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [18836])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18881])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18931])
	$6 = ($4 + [-24])
	$8 = *($5)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$8:
	$9 = ($6 + [24])
	CALL $287($6, $9)
	$4 = ($6 + [48])
	$6 = $9
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$8 }
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = $6
	
.LABEL $label$6
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	if ( ((*($6 + [124]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($6 + [132])))
	if ( ((*($6 + [112]) & [1]) == 0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((*($6 + [112]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($6 + [120])))
	if ( ((*($6 + [100]) & [1]) == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((*($6 + [100]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($6 + [108])))
	if ( ((*($6 + [88]) & [1]) == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((*($6 + [88]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($6 + [96])))
	$8 = *($6 + [60])
	if ( $8 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$8 = *($6 + [60])
	if ( ($8 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	*(($6 + [64])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	CALL _ZdlPv($6)
	
.LABEL $label$10
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [140]))
	$6 = *(($1 + [144]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$21 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5445041065490907136, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$20 }
	
.LABEL $label$21
	CALL db_idx64_remove($6)
	
.LABEL $label$20
	$6 = *(($1 + [148]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$23 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5445041065490907137, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$22 }
	
.LABEL $label$23
	CALL db_idx64_remove($6)
	
.LABEL $label$22
	$global$0 = ($2 + [16])
}

int_32 .FUNC $129 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($1)
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = uint_32($3 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$3 = *($1 + [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 == (int_32)[64]), [18410])
	CALL eosio_assert(($2 <= [51]), [18425])
	$2 = ($2 + [6])
	if ( (*($1) & [1]) ){ goto $label$4 }
	$1 = ($1 + [1])
	goto $label$3 
	
.LABEL $label$4
	$1 = *($1 + [8])
	
.LABEL $label$3
	$1 = *(($1 + [5]))
	$2 = *(($1 + [4]))
	$2 = *(($1 + [3]))
	$2 = *(($1 + [2]))
	$2 = *(($1 + [1]))
	$1 = ($1 + ($3 - ($2 & [255])))
	$2 = *($1)
	return ((((((((((((( [-87] ? [-48] : ((($2 + [-97]) & [255]) <= [6]) ) + $2) & [255]) << [4]) + ((( [-87] ? [-48] : ((($2 + [-97]) & [255]) <= [6]) ) + $2) & [255])) << [4]) + ((( [-87] ? [-48] : ((($2 + [-97]) & [255]) <= [6]) ) + $2) & [255])) << [4]) + ((( [-87] ? [-48] : ((($2 + [-97]) & [255]) <= [6]) ) + $2) & [255])) << [4]) + ((( [-87] ? [-48] : ((($2 + [-97]) & [255]) <= [6]) ) + $2) & [255])) << [4]) + ((( [-87] ? [-48] : ((($1 + [-97]) & [255]) <= [6]) ) + $1) & [255]))
}

void .FUNC $128 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [18054])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)5374672172221612032, (int_64)5374672172221612032)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $127($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [18054])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18137])
	CALL $226($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $227($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $286 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18328])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $269(*($1), *($0 + [28]))
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $217(*($1), *($0 + [36]))
	CALL $217(*($1), *($0 + [40]))
	CALL $217(*($1), *($0 + [44]))
	CALL $217(*($1), *($0 + [48]))
}

int_32 .FUNC $287 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	if ( (*($3 + [124]) & [1]) ){ goto $label$10 }
	if ( (*($3 + [112]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [132])))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [120])))
	$2 = [1]
	if ( ((*($3 + [100]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = [1]
	if ( (*($3 + [100]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($3 + [88]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [108])))
	if ( ((*($3 + [88]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [96])))
	$2 = *($3 + [60])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = *($3 + [60])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*(($3 + [64])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	CALL _ZdlPv($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	CALL require_auth(*($0))
	CALL $59(*([0] + [8220]), $1, $2, $3)
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $324($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18132])
	CALL memcpy($3, $6, [1])
	CALL eosio_assert(((int_32)$1 != (int_32)[1]), [18132])
	CALL memcpy(($3 | [1]), ($6 + [1]), [1])
	CALL eosio_assert(((uint_32)($1 + [-2]) > (uint_32)[7]), [18132])
	$2 = ($3 + [8])
	CALL memcpy($2, ($6 + [2]), [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $327($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($2)
	$6 = *($3 + [1])
	$2 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($2 & [255])), (int_32 ($6 & [255])), (int_32 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1 + [16 align=4])
	*($1 + [16 align=4]) = (int_64)0
	$4 = ($1 + [24])
	$7 = *($4)
	*($4) = (int_64)0
	$4 = ($1 + [32])
	$8 = *($4)
	*($4) = (int_64)0
	*(($9 = ($2 + ((int_32)$3 * (int_32)[40])))) = *($1)
	*($9 + [16 align=4]) = $6
	*(($9 + [8])) = *(($1 + [8]))
	*(($9 + [24])) = $7
	*(($9 + [32])) = $8
	$10 = ($2 + ((int_32)$5 * (int_32)[40]))
	$11 = ($9 + [40])
	$1 = *($0)
	$12 = *(($0 + [4]))
	if ( ((int_32)$12 == (int_32)$1) ){ goto $label$6 }
	$13 = ($1 - $12)
	$2 = [0]
	
.LOOP $label$7:
	$5 = ($12 + $2)
	*((($1 = ($9 + $2)) + [-32])) = *(($5 + [-32]))
	*(($1 + [-40])) = *(($5 + [-40]))
	*(($3 = ($1 + [-24]))) = (int_64)0
	*(($4 = ($1 + [-16]))) = [0]
	$14 = ($5 + [-24])
	*($3) = *($14)
	$3 = ($5 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($1 + [-12]))) = (int_64)0
	*(($1 = ($1 + [-4]))) = [0]
	$4 = ($5 + [-12])
	*($3) = *($4)
	*($14) = (int_64)0
	$5 = ($5 + [-4])
	*($1) = *($5)
	*($5) = [0]
	*($4) = (int_64)0
	$2 = ($2 + [-40])
	if ( ((int_32)$13 != (int_32)$2) ){ goto $label$7 }
	$9 = ($9 + $2)
	$1 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $1
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = *(($1 + [-12]))
	if ( ($5 == 0) ){ goto $label$10 }
	*(($1 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$5 = ($1 + [-40])
	$2 = *(($1 + [-24]))
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$1 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $122 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [132])) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	$6 = ($1 + [8])
	*(($5 = $4) + [24]) = *($6)
	$7 = *($1)
	$8 = ($1 + [92])
	CALL $300($8, *($3))
	$9 = ($1 + [104])
	CALL $300($9, *($3 + [4]))
	$10 = ($1 + [116])
	CALL $300($10, *($3 + [8]))
	*($1 + [128]) = [1]
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [18269])
	*($5 + [32]) = [0]
	*($5 + [8]) = ($5 + [32])
	*($5 + [44]) = $6
	*($5 + [40]) = $1
	$11 = ($1 + [16])
	*($5 + [48]) = $11
	$12 = ($1 + [24])
	*($5 + [52]) = $12
	$13 = ($1 + [32])
	*($5 + [56]) = $13
	$14 = ($1 + [40])
	*($5 + [60]) = $14
	$15 = ($1 + [48])
	*($5 + [64]) = $15
	$16 = ($1 + [64])
	*($5 + [68]) = $16
	$17 = ($1 + [80])
	*($5 + [72]) = $17
	*($5 + [76]) = $8
	*($5 + [80]) = $9
	*($5 + [84]) = $10
	$18 = ($1 + [128])
	*($5 + [88]) = $18
	CALL $267(($5 + [40]), ($5 + [8]))
	$19 = *($5 + [32])
	if ( ($19 <= [513]) ){ goto $label$2 }
	$3 = CALL $324($19)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($4 - (($19 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $19)
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $6
	*($5 + [48]) = $11
	*($5 + [52]) = $12
	*($5 + [56]) = $13
	*($5 + [60]) = $14
	*($5 + [64]) = $15
	*($5 + [68]) = $16
	*($5 + [72]) = $17
	*($5 + [76]) = $8
	*($5 + [80]) = $9
	*($5 + [84]) = $10
	*($5 + [88]) = $18
	*($5 + [40]) = $1
	CALL $268(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [136]), $2, $3, $19)
	if ( ($19 <= [513]) ){ goto $label$3 }
	CALL $327($3)
	
.LABEL $label$3
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [40]) = *($6)
	if ( (CALL $322(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = *($1 + [140])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3617214763869541760, ($5 + [32]), $7)
	*(($1 + [140])) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$5
	$global$0 = ($5 + [96])
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $324($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([144])
	$6 = CALL $271($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [136])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $114(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( (*($5 + [116]) & [1]) ){ goto $label$16 }
	if ( (*($5 + [104]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($5 + [124])))
	if ( ((*($5 + [104]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($5 + [112])))
	if ( ((*($5 + [92]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( (*($5 + [92]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	$1 = *($5 + [80])
	if ( ($1 == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	CALL _ZdlPv(*(($5 + [100])))
	$1 = *($5 + [80])
	if ( ($1 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	*(($5 + [84])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$17
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $126 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $220($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $106($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $221($2, $1)
	CALL $223(CALL $222(CALL $222($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_64 .FUNC $124 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = (int_64)1000000
	$2 = ($0 + [48])
	$3 = *(($0 + [76]))
	if ( ((int_32)$3 == (int_32)*(($0 + [72]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$2), [18054])
	if ( $3 ){ goto $label$1 }
	$3 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$3 = CALL db_find_i64(*($2), *(($0 + [56])), (int_64)5374672172221612032, (int_64)5374672172221612032)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $127($2, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$2), [18054])
	goto $label$1 
	
.LABEL $label$3
	$3 = ($1 + [8])
	
.LABEL $label$1
	*($1 + [8]) = ((int_64)*($3) + (int_64)1)
	CALL $128($2, ($1 + [8]), *($0))
	$4 = *($1 + [8])
	$global$0 = ($1 + [16])
	return ((int_64)$4 + (int_64)1000000)
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL require_auth(*($0))
	CALL $65(*([0] + [8220]), $1, $2)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $324($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [18132])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [18132])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $327($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [17382])
	$2 = *($3 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)297481618436), [17395])
	$7 = [0]
	$6 = *($3)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$2 = $1
	$7 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$2 = $1
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $7 ){ goto $label$6 }
	$7 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [17415])
	CALL eosio_assert(((int_64)$6 > (int_64)99999), [17429])
	CALL $298(($5 + [16]), $4)
	*($5 + [28]) = [0]
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	CALL eosio_assert((CALL $49(($5 + [16]), $5) == 0), [17457])
	$0 = *($5)
	$7 = CALL $323([16675])
	if ( ((int_32)$7 != (int_32)( *($5 + [4]) ? uint_32($0 >> [1]) : ($0 & [1]) )) ){ goto $label$8 }
	if ( (CALL $305($5, [0], [-1], [16675], $7) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL eosio_assert([0], [17382])
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$9
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($5 + [24]))
	
.LABEL $label$1
	$global$0 = ($5 + [32])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $324($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [17985])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [18034])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $47(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $327($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $48(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $10 (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
	CALL $63(*([0] + [8220]), $1)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $324($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [18132])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $327($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $324($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [56]) = ($2 + $1)
	*($3 + [48]) = $2
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [18132])
	CALL memcpy($3, $2, [8])
	*($3 + [52]) = ($2 + [8])
	CALL $69(($3 + [48]), ($3 + [8]))
	CALL $69(($3 + [48]), ($3 + [20]))
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $327($2)
	
.LABEL $label$5
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $83(($3 + [48]), $3)
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$6
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$7
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $185 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	float_64 $6
	float_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$4 = ($global$0 - [64])
	$global$0 = $4
	$5 = *($3)
	$6 = (CASTING float_64)(int_64 $5)
	$7 = ((float_64)$6 * (float_64)(float_64)0.005)
	*($4 + [56]) = $7
	$8 = ($0 + [128])
	$10 = *(($0 + [156]))
	$9 = *(($0 + [152]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$3 }
	
.LOOP $label$5:
	$11 = ($10 + [-24])
	$12 = *($11)
	if ( ((int_32)*($12) == (int_32)$2) ){ goto $label$4 }
	$10 = $11
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($12 + [56]) == (int_32)$8), [18054])
	goto $label$2 
	
.LABEL $label$3
	$11 = CALL db_find_i64(*($8), *(($0 + [136])), (int_64)-2120381602870940160, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	$12 = CALL $149($8, $11)
	CALL eosio_assert(((int_32)*($12 + [56]) == (int_32)$8), [18054])
	
.LABEL $label$2
	$13 = (int_64)0
	$14 = (int_64)59
	$11 = [17863]
	$15 = (int_64)0
	
.LOOP $label$6:
	$16 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$7 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$10 = ($10 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$16 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$7
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$6 }
	if ( ((int_64)$15 == (int_64)$1) ){ goto $label$12 }
	$13 = (int_64)0
	$14 = (int_64)59
	$11 = [17876]
	$15 = (int_64)0
	
.LOOP $label$13:
	$16 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$14 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$10 = ($10 + [-91])
	goto $label$15 
	
.LABEL $label$16
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$16 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$14
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$13 }
	if ( ((int_64)$15 != (int_64)$1) ){ goto $label$11 }
	
.LABEL $label$12
	$2 = ($12 + [8])
	$1 = *($12 + [8])
	$13 = (int_64)0
	$14 = (int_64)59
	$11 = [17889]
	$15 = (int_64)0
	
.LOOP $label$17:
	$16 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$18 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$10 = ($10 + [-91])
	goto $label$19 
	
.LABEL $label$20
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$16 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$18
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$17 }
	if ( ((int_64)$1 != (int_64)$15) ){ goto $label$10 }
	$7 = ((float_64)$6 * (float_64)(float_64)0.0015)
	*($4 + [56]) = $7
	if ( ((int_64)$5 < (int_64)50001) ){ goto $label$10 }
	$7 = ( (float_64)0 ? $7 : (int_64)(((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)1) == 0) )
	*($4 + [56]) = $7
	goto $label$10 
	
.LABEL $label$11
	$2 = ($12 + [8])
	
.LABEL $label$10
	$1 = *($2)
	$13 = (int_64)0
	$14 = (int_64)59
	$11 = [17889]
	$15 = (int_64)0
	
.LOOP $label$21:
	$16 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$22 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$10 = ($10 + [-91])
	goto $label$23 
	
.LABEL $label$24
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$16 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$22
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$21 }
	if ( ((int_64)$1 == (int_64)$15) ){ goto $label$25 }
	$13 = (int_64)0
	$14 = (int_64)59
	$11 = [17863]
	$15 = (int_64)0
	
.LOOP $label$26:
	$16 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$27 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$10 = ($10 + [-91])
	goto $label$28 
	
.LABEL $label$29
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$16 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$27
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$26 }
	if ( ((int_64)$1 == (int_64)$15) ){ goto $label$25 }
	$7 = ((float_64)$6 * (float_64)(float_64)0.003)
	*($4 + [56]) = $7
	if ( ((int_64)$5 < (int_64)50001) ){ goto $label$25 }
	$7 = ( (float_64)0 ? $7 : (int_64)(((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)1) == 0) )
	*($4 + [56]) = $7
	$1 = *($2)
	
.LABEL $label$25
	$16 = *($3 + [8])
	*($4 + [48]) = $16
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$31 }
	$13 = (int_64)-9223372036854775808
	goto $label$30 
	
.LABEL $label$31
	$13 = (Rounds 0)($7)
	
.LABEL $label$30
	*($4 + [40]) = $13
	$9 = *([0] + [8220])
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17985])
	$13 = (uint_64)$16 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$13 = $14
	$10 = [1]
	$2 = $11
	$11 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$13 = $14
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$2 = ($11 + [1])
	$11 = $2
	if ( $10 ){ goto $label$36 }
	$10 = [1]
	$11 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$10 = [0]
	
.LABEL $label$32
	CALL eosio_assert($10, [18034])
	*((($4 + [8]) + [8])) = *((($4 + [40]) + [8]))
	*($4 + [8]) = *($4 + [40])
	CALL $79($9, $1, ($4 + [8]))
	if ( ((int_64)$16 == (int_64)4544260) ){ goto $label$40 }
	if ( ((int_64)$16 == (int_64)1397703940) ){ goto $label$39 }
	if ( ((int_64)$16 != (int_64)297481618436) ){ goto $label$38 }
	$13 = (int_64)2
	goto $label$37 
	
.LABEL $label$40
	$13 = (int_64)1
	goto $label$37 
	
.LABEL $label$39
	$13 = (int_64)0
	goto $label$37 
	
.LABEL $label$38
	CALL eosio_assert([0], [16644])
	$13 = (int_64)99999999999999
	
.LABEL $label$37
	*($4 + [32]) = $13
	$13 = *($0)
	*($4 + [28]) = ($4 + [56])
	*($4 + [24]) = ($4 + [32])
	CALL eosio_assert([1], [18137])
	CALL $195($8, $12, $13, ($4 + [24]))
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $281 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [48])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [18])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [40])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$4 = *($3)
	$3 = *($0 + [44])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$6
	$3 = *($0)
	$0 = *($0 + [48])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$8 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$8
	*($2) = ($1 + [1])
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	$6 = ($global$0 - [96])
	$global$0 = $6
	CALL require_auth(*($0))
	if ( ((int_64)$1 == (int_64)1) ){ goto $label$11 }
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$10 }
	$5 = CALL $298(($6 + [48]), $5)
	$4 = CALL $298(($6 + [64]), $4)
	$3 = CALL $298(($6 + [80]), $3)
	CALL $71($0, $2, $3, $4, $5, [0])
	if ( (*($5) & [1]) ){ goto $label$9 }
	if ( (*($4) & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$4 = CALL $298($6, $5)
	$3 = CALL $298(($6 + [16]), $4)
	$0 = CALL $298(($6 + [32]), $3)
	CALL $72(($0 + [168]), $2, $0, $3, $4)
	if ( (*($4) & [1]) ){ goto $label$7 }
	if ( (*($3) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$10
	CALL eosio_assert([0], [17479])
	$global$0 = ($6 + [96])
	return 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$7
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($0) & [1]) == 0) ){ goto $label$1 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((*($0) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$4
	CALL _ZdlPv(*($0 + [8]))
	goto $label$1 
	
.LABEL $label$3
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($6 + [96])
	return 
	
.LABEL $label$1
	$global$0 = ($6 + [96])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [76]) = $0
	*($3 + [64]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $324($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [32])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [56])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [88]) = ($1 + $0)
	*($3 + [80]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [18132])
	CALL memcpy(($3 + [8]), $1, [8])
	CALL eosio_assert(((int_32)($0 & [-8]) != (int_32)[8]), [18132])
	CALL memcpy((($3 + [8]) + [8]), ($1 + [8]), [8])
	*($3 + [84]) = ($1 + [16])
	CALL $69(($3 + [80]), (($3 + [8]) + [16]))
	CALL $69(($3 + [80]), ($3 + [36]))
	CALL $69(($3 + [80]), ($3 + [48]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $327($1)
	
.LABEL $label$4
	*($3 + [84]) = ($3 + [64])
	*($3 + [80]) = ($3 + [76])
	CALL $70(($3 + [80]), ($3 + [8]))
	if ( (*($3 + [48]) & [1]) ){ goto $label$9 }
	if ( (*($3 + [36]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [56])))
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [44])))
	$1 = [1]
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($3 + [24]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($3 + [96])
	return $1
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [32])))
	$global$0 = ($3 + [96])
	return $1
}

void .FUNC $184 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [124])) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	$6 = ($1 + [8])
	*(($5 = $4) + [24]) = *($6)
	$7 = *($1)
	$8 = ($1 + [84])
	CALL $300($8, *($3))
	$9 = ($1 + [96])
	CALL $300($9, *($3 + [4]))
	$10 = ($1 + [108])
	CALL $300($10, *($3 + [8]))
	*($1 + [120]) = [1]
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [18269])
	*($5 + [32]) = [0]
	*($5 + [8]) = ($5 + [32])
	*($5 + [44]) = $6
	*($5 + [40]) = $1
	$11 = ($1 + [16])
	*($5 + [48]) = $11
	$12 = ($1 + [24])
	*($5 + [52]) = $12
	$13 = ($1 + [32])
	*($5 + [56]) = $13
	$14 = ($1 + [40])
	*($5 + [60]) = $14
	$15 = ($1 + [48])
	*($5 + [64]) = $15
	$16 = ($1 + [64])
	*($5 + [68]) = $16
	$17 = ($1 + [80])
	*($5 + [72]) = $17
	$18 = ($1 + [81])
	*($5 + [76]) = $18
	*($5 + [80]) = $8
	*($5 + [84]) = $9
	*($5 + [88]) = $10
	$19 = ($1 + [120])
	*($5 + [92]) = $19
	CALL $281(($5 + [40]), ($5 + [8]))
	$20 = *($5 + [32])
	if ( ($20 <= [513]) ){ goto $label$2 }
	$3 = CALL $324($20)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($4 - (($20 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $20)
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $6
	*($5 + [48]) = $11
	*($5 + [52]) = $12
	*($5 + [56]) = $13
	*($5 + [60]) = $14
	*($5 + [64]) = $15
	*($5 + [68]) = $16
	*($5 + [72]) = $17
	*($5 + [76]) = $18
	*($5 + [80]) = $8
	*($5 + [84]) = $9
	*($5 + [88]) = $10
	*($5 + [92]) = $19
	*($5 + [40]) = $1
	CALL $282(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [128]), $2, $3, $20)
	if ( ($20 <= [513]) ){ goto $label$3 }
	CALL $327($3)
	
.LABEL $label$3
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [40]) = *($6)
	if ( (CALL $322(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = *($1 + [132])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3617214761613307904, ($5 + [32]), $7)
	*(($1 + [132])) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$5
	$global$0 = ($5 + [96])
}

void .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($1 + [124])) == (int_32)$0), [18836])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18881])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18931])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [108]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($4 + [116])))
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($4 + [104])))
	if ( ((*($4 + [84]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($4 + [84]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [92])))
	if ( (*($4 + [48]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($4 + [56])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$17:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$18 }
	if ( ((*($6 + [108]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($6 + [116])))
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($6 + [104])))
	if ( ((*($6 + [84]) & [1]) == 0) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((*($6 + [84]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($6 + [92])))
	if ( (*($6 + [48]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($6 + [56])))
	
.LABEL $label$19
	CALL _ZdlPv($6)
	
.LABEL $label$18
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$17 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [128]))
	$6 = *($1 + [132])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$27 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3617214761613307904, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$26 }
	
.LABEL $label$27
	CALL db_idx64_remove($6)
	
.LABEL $label$26
	$global$0 = ($2 + [16])
}

void .FUNC $218 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18132])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $186 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	float_64 $13
	$6 = ($global$0 - [96])
	$global$0 = $6
	*($0 + [8]) = (int_64)4544260
	*($0) = (int_64)0
	CALL eosio_assert([1], [17985])
	$7 = [0]
	$8 = (int_64)17751
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [18034])
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$7 }
	$12 = *($3)
	CALL $135(($6 + [48]), *([0] + [8220]))
	$9 = *($6 + [88])
	$7 = *($6 + [60])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($6 + [64])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($6 + [48])
	if ( ($7 == 0) ){ goto $label$9 }
	*($6 + [52]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$8 = ((uint_64)$9 / (uint_64)(int_64)50000000000)
	if ( (uint_64)($9 <= (int_64)200000000000) ){ goto $label$13 }
	$8 = ((int_64)(uint_64)((int_64)$8 + (int_64)-2) >> (uint_64)(int_64)1) + (int_64)2)
	goto $label$12 
	
.LABEL $label$13
	$13 = (float_64)5
	if ( (uint_64)($9 <= (int_64)50000000000) ){ goto $label$11 }
	
.LABEL $label$12
	$13 = (float_64)5
	
.LOOP $label$14:
	$13 = ((float_64)$13 * (float_64)(float_64)0.5)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$14 }
	$8 = (int_64)1
	if ( ((uint_64)$9 > (uint_64)(int_64)699999999999) ){ goto $label$10 }
	
.LABEL $label$11
	$13 = ((float_64)$13 * (float_64)(CASTING float_64)(uint_64 $12))
	if ( (((float_64)$13 < (float_64)(float_64)18446744073709551615) & ((float_64)$13 >= (float_64)(float_64)0)) ){ goto $label$15 }
	$8 = (int_64)0
	goto $label$10 
	
.LABEL $label$15
	$8 = (Rounds 0)($13)
	
.LABEL $label$10
	*($0) = $8
	*((($6 + [16]) + [8])) = [0]
	*((($6 + [32]) + [8])) = *(($0 + [8]))
	*($6 + [32]) = $8
	*($6 + [16]) = (int_64)0
	$11 = *([0] + [8216])
	$7 = CALL $323([17307])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$18 }
	*($6 + [16]) = ($7 << [1])
	$10 = (($6 + [16]) | [1])
	if ( $7 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$3 = (($7 + [16]) & [-16])
	$10 = CALL _Znwj($3)
	*($6 + [16]) = ($3 | [1])
	*($6 + [24]) = $10
	*($6 + [20]) = $7
	
.LABEL $label$17
	CALL memcpy($10, [17307], $7)
	
.LABEL $label$16
	*(($10 + $7)) = [0]
	*(($6 + [8])) = *((($6 + [32]) + [8]))
	*($6) = *($6 + [32])
	CALL $54($11, $2, $6, ($6 + [16]))
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($6 + [24]))
	
.LABEL $label$19
	CALL $64(*([0] + [8220]), *($0))
	
.LABEL $label$7
	$global$0 = ($6 + [96])
	return (unreachable)
	
.LABEL $label$6
	CALL $297(($6 + [16]))
}

void .FUNC $180 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $284(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [18132])
	CALL memcpy($4, $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [18132])
	CALL memcpy(($4 + [8]), ($2 + [8]), [8])
	*($4 + [20]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)7867653554838700032
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7867653554838700032
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $274(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $117 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [18054])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7867653554838700032, (int_64)7867653554838700032)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $116($0, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [18054])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18137])
	CALL $144($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $145($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $270(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

int_64 .FUNC $112 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = ($0 + [128])
	$5 = *(($0 + [156]))
	$4 = *(($0 + [152]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [18054])
	goto $label$2 
	
.LABEL $label$3
	$5 = ($0 + [136])
	$6 = CALL db_find_i64(*($3), *($5), (int_64)7867653768827764736, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $118($3, $6)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [18054])
	
.LABEL $label$2
	$8 = *($0)
	$1 = *($7 + [24])
	CALL eosio_assert([1], [18137])
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [18172])
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$8()), [18218])
	$9 = ((int_64)$1 + (int_64)1)
	*($7 + [24]) = $9
	$1 = *($7)
	CALL eosio_assert([1], [18269])
	*($2 + [48]) = ($2 + [32])
	*($2 + [44]) = $2
	*($2 + [40]) = $2
	*($2 + [56]) = ($2 + [40])
	*($2 + [68]) = ($7 + [8])
	*($2 + [64]) = $7
	*($2 + [72]) = ($7 + [16])
	*($2 + [76]) = ($7 + [24])
	CALL $119(($2 + [64]), ($2 + [56]))
	CALL db_update_i64(*($7 + [36]), $8, $2, [32])
	$6 = ($0 + [144])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$6 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($2 + [80])
	return $9
	
.LABEL $label$1
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$8()), [18334])
	*(($6 = CALL _Znwj([48])) + [32]) = $3
	*($6 + [8]) = (int_64)0
	*($6) = $1
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = (int_64)1
	*($2 + [48]) = ($2 + [32])
	*($2 + [44]) = $2
	*($2 + [40]) = $2
	*($2 + [56]) = ($2 + [40])
	*($2 + [68]) = ($6 + [8])
	*($2 + [64]) = $6
	*($2 + [72]) = ($6 + [16])
	*($2 + [76]) = ($6 + [24])
	CALL $119(($2 + [64]), ($2 + [56]))
	$1 = *($6)
	$7 = CALL db_store_i64(*($5), (int_64)7867653768827764736, $8, $1, $2, [32])
	*($6 + [36]) = $7
	$5 = ($0 + [144])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$7 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($2 + [64]) = $6
	$1 = *($6)
	*($2) = $1
	*($2 + [40]) = $7
	$4 = ($0 + [156])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [160]))) ){ goto $label$10 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($2 + [64]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [64])
	*($2 + [64]) = [0]
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $120(($0 + [152]), ($2 + [64]), $2, ($2 + [40]))
	$6 = *($2 + [64])
	*($2 + [64]) = [0]
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv($6)
	
.LABEL $label$8
	$global$0 = ($2 + [80])
	return (int_64)1
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	*(($6 = ($1 + [40]))) = *(($5 + [40]))
	*(($7 = ($1 + [32]))) = *(($5 + [32]))
	*(($8 = ($1 + [24]))) = *(($5 + [24]))
	*(($9 = ($1 + [16]))) = *(($5 + [16]))
	*(($10 = ($1 + [8]))) = *(($5 + [8]))
	$11 = ($1 + [48])
	CALL $300($11, ($5 + [48]))
	*(($1 + [72])) = *(($5 + [72]))
	*($1 + [64]) = *($5 + [64])
	$12 = ($1 + [80])
	$13 = ($1 + [64])
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$1 }
	CALL $266($12, *($5 + [80]), *(($5 + [84])))
	
.LABEL $label$1
	$14 = ($1 + [92])
	CALL $300($14, ($5 + [92]))
	$15 = ($1 + [104])
	CALL $300($15, ($5 + [104]))
	$16 = ($1 + [116])
	CALL $300($16, ($5 + [116]))
	*($1 + [128]) = *($5 + [128])
	*($3 + [16]) = [0]
	*($3) = ($3 + [16])
	*($3 + [28]) = $10
	*($3 + [24]) = $1
	*($3 + [32]) = $9
	*($3 + [36]) = $8
	*($3 + [40]) = $7
	*($3 + [44]) = $6
	*($3 + [48]) = $11
	*($3 + [52]) = $13
	*($3 + [56]) = $12
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	$17 = ($1 + [128])
	*($3 + [72]) = $17
	CALL $267(($3 + [24]), $3)
	$18 = *($3 + [16])
	if ( ($18 <= [513]) ){ goto $label$3 }
	$5 = CALL $324($18)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($2 - (($18 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $18)
	*($3 + [16]) = $3
	*($3 + [28]) = $10
	*($3 + [24]) = $1
	*($3 + [32]) = $9
	*($3 + [36]) = $8
	*($3 + [40]) = $7
	*($3 + [44]) = $6
	*($3 + [48]) = $11
	*($3 + [52]) = $13
	*($3 + [56]) = $12
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	CALL $268(($3 + [24]), ($3 + [16]))
	$19 = *($1)
	*($1 + [136]) = CALL db_store_i64(*($4 + [8]), (int_64)3617214763869541760, *(*($0 + [8])), $19, $5, $18)
	if ( ($18 <= [513]) ){ goto $label$4 }
	CALL $327($5)
	
.LABEL $label$4
	if ( (uint_64)($19 <= *($4 + [16])) ){ goto $label$5 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$19 + (int_64)1) : ((uint_64)$19 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$19 = *(($4 + [8]))
	$20 = *(*(($0 + [8])))
	$21 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [140]) = CALL db_idx64_store($19, (int_64)3617214763869541760, $20, $21, ($3 + [24]))
	$global$0 = ($3 + [80])
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $218(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $219(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_64 .FUNC $111 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [24]) = (int_64)0
	*($1 + [16]) = (int_64)0
	$2 = ($0 + [8])
	$3 = *(($0 + [36]))
	if ( ((int_32)$3 == (int_32)*(($0 + [32]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$2), [18054])
	if ( $3 ){ goto $label$1 }
	$3 = ($1 + [16])
	goto $label$1 
	
.LABEL $label$2
	$3 = CALL db_find_i64(*($2), *(($0 + [16])), (int_64)7867653554838700032, (int_64)7867653554838700032)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $116($2, $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$2), [18054])
	goto $label$1 
	
.LABEL $label$3
	$3 = ($1 + [16])
	
.LABEL $label$1
	*(($1 + [8])) = *(($3 + [8]))
	*($1) = *($3)
	*($1) = ((int_64)*($1) + (int_64)1)
	CALL $117($2, $1, *($0))
	$4 = *($1)
	$global$0 = ($1 + [32])
	return $4
}

int_32 .FUNC $237 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [20])
	*($3 + [52]) = ($5 + [21])
	*($3 + [56]) = ($5 + [24])
	CALL $238(($3 + [40]), ($3 + [32]))
	*($5 + [36]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)-2121395625386200416
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-2121395625386200416
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $239(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $275(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $120(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $299 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $298 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $327($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $297 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $291 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18132])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $211(*($1), *($0 + [8]))
	CALL $211(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18132])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $290 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $324($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8228])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $324($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $292 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18328])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $216(*($1), *($0 + [8]))
	CALL $216(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $29 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL require_auth(*($0))
	CALL $66(*([0] + [8220]), $1, $2)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = *($1)
	$4 = *($1 + [8])
	$0 = [0]
	$1 = *([0] + [8216])
	CALL $81($2, $1)
	if ( ((int_64)$4 == (int_64)4544260) ){ goto $label$3 }
	if ( ((int_64)$4 == (int_64)1397703940) ){ goto $label$1 }
	if ( ((int_64)$4 != (int_64)297481618436) ){ goto $label$2 }
	$0 = [2]
	goto $label$1 
	
.LABEL $label$3
	$0 = [1]
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [16644])
	$0 = [276447231]
	
.LABEL $label$1
	*(($0 = (*($2) + ($0 << [3])))) = ((int_64)*($0) + (int_64)$3)
	CALL $82(($1 + [8]), $2, *($1))
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$4 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($2 + [16])
}

void .FUNC $235 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $215($1, *($5), *($5 + [4]))
	CALL $215(($1 + [12]), *($5 + [12]), *(($5 + [16])))
	
.LABEL $label$1
	*($1 + [24]) = *($5 + [24])
	*(($1 + [40])) = *(($5 + [40]))
	*(($1 + [32])) = *(($5 + [32]))
	$6 = ($1 + [24])
	$8 = *($1)
	$7 = *($1 + [4])
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$5 = [0]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$3 }
	$5 = (($9 & [-8]) + $5)
	
.LABEL $label$3
	$8 = ($1 + [12])
	$9 = *($1 + [12])
	$7 = *(($1 + [16]))
	$11 = ($7 - $9)
	$10 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$5 }
	$5 = (($11 & [-8]) + $5)
	
.LABEL $label$5
	$7 = ($5 + [24])
	if ( ($7 <= [513]) ){ goto $label$7 }
	$5 = CALL $324($7)
	goto $label$6 
	
.LABEL $label$7
	$5 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$6
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $7)
	*($3 + [16]) = $3
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	*($3 + [32]) = $6
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = ($1 + [40])
	CALL $236(($3 + [24]), ($3 + [16]))
	*($1 + [52]) = CALL db_store_i64(*($4 + [8]), (int_64)-2121395625802072064, *(*($0 + [8])), (int_64)-2121395625802072064, $5, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)-2121395625802072064) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $327($5)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)-2121395625802072064) ){ goto $label$8 }
	
.LABEL $label$9
	*(($4 + [16])) = (int_64)-2121395625802072063
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [48])
}

void .FUNC $278 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$1 = (*($2) + [56])
	*(($2 = *($1))) = $1
	$3 = *($3)
	$3 = *($0 + [24])
	$4 = *($3 + [4])
	$5 = ($4 - $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$1 = (( $1 ? ($5 + $1) : ((int_32)$3 == (int_32)$4) ) + [17])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [36])
	$6 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$2:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$3
	$4 = *($3)
	$3 = *($0 + [40])
	$6 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$4 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$5 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$5
	$4 = *($3)
	$3 = *($0 + [44])
	$6 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$6:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$6 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$7
	$3 = *($0)
	$0 = *($0 + [48])
	$6 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$8:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$8 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$9 }
	*($2) = ($0 + $1)
	
.LABEL $label$9
}

void .FUNC $311 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth($1)
	$2 = CALL $298($3, $2)
	CALL $77(*([0] + [8224]), $1, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL require_auth(*($0))
	if ( ((int_64)$1 == (int_64)1) ){ goto $label$2 }
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$1 }
	CALL $74($0, $2)
	return 
	
.LABEL $label$2
	CALL $75(($0 + [168]), $2)
	return 
	
.LABEL $label$1
	CALL eosio_assert([0], [17479])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [192])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$2 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$2 }
	$2 = *($3 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)1397703940), [17470])
	$7 = [0]
	$8 = *($3)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$2 = $6
	$7 = [1]
	$10 = $9
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$2 = $6
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$9 < (int_32)[6])
	$10 = ($9 + [1])
	$9 = $10
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [17415])
	CALL $298(($5 + [168]), $4)
	*($5 + [180]) = [0]
	*($5 + [160]) = [0]
	*($5 + [152]) = (int_64)0
	CALL eosio_assert((CALL $49(($5 + [168]), ($5 + [152])) == 0), [17479])
	$9 = *($5 + [152])
	$7 = CALL $323([16675])
	if ( ((int_32)$7 != (int_32)( *($5 + [156]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$11 }
	if ( (CALL $305(($5 + [152]), [0], [-1], [16675], $7) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$9 = *($5 + [152])
	$7 = CALL $323([17492])
	if ( ((int_32)$7 != (int_32)( *($5 + [156]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$18 }
	if ( (CALL $305(($5 + [152]), [0], [-1], [17492], $7) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$9 = *($5 + [152])
	$7 = CALL $323([17104])
	if ( ((int_32)$7 != (int_32)( *($5 + [156]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$19 }
	if ( (CALL $305(($5 + [152]), [0], [-1], [17104], $7) == 0) ){ goto $label$16 }
	
.LABEL $label$19
	$9 = *($5 + [152])
	$7 = CALL $323([17275])
	if ( ((int_32)$7 != (int_32)( *($5 + [156]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$20 }
	if ( (CALL $305(($5 + [152]), [0], [-1], [17275], $7) == 0) ){ goto $label$15 }
	
.LABEL $label$20
	$9 = *($5 + [152])
	$7 = CALL $323([17500])
	if ( ((int_32)$7 != (int_32)( *($5 + [156]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$10 }
	if ( CALL $305(($5 + [152]), [0], [-1], [17500], $7) ){ goto $label$10 }
	*((($5 + [56]) + [8])) = [0]
	*((($5 + [72]) + [8])) = *(($3 + [8]))
	*($5 + [56]) = (int_64)0
	*($5 + [72]) = *($3)
	$10 = *([0] + [8216])
	$9 = CALL $323([17307])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$14 }
	*($5 + [56]) = ($9 << [1])
	$7 = (($5 + [56]) | [1])
	if ( $9 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$17
	CALL eosio_assert(((int_64)$8 > (int_64)999), [16890])
	CALL $50(($5 + [168]), ($5 + [184]))
	CALL $51($0, $1, *($5 + [184]), $8)
	$9 = [1]
	if ( (*($5 + [152]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$16
	CALL eosio_assert(((int_64)$8 > (int_64)999), [16890])
	*(($7 = (($5 + [136]) + [8]))) = *(($3 + [8]))
	*($5 + [136]) = *($3)
	$9 = CALL $298(($5 + [120]), $4)
	*((($5 + [8]) + [8])) = *($7)
	*($5 + [8]) = *($5 + [136])
	CALL $52($0, $1, $2, ($5 + [8]), $9)
	if ( ((*($9) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($9 + [8]))
	$9 = [1]
	if ( (*($5 + [152]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$15
	CALL eosio_assert(((int_64)$8 > (int_64)999), [16890])
	CALL require_auth($1)
	*(($7 = (($5 + [104]) + [8]))) = *(($3 + [8]))
	*($5 + [104]) = *($3)
	$9 = CALL $298(($5 + [88]), $4)
	*((($5 + [24]) + [8])) = *($7)
	*($5 + [24]) = *($5 + [104])
	CALL $53(($0 + [168]), $1, $2, ($5 + [24]), $9)
	if ( ((*($9) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($9 + [8]))
	$9 = [1]
	if ( (*($5 + [152]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$14
	$3 = (($9 + [16]) & [-16])
	$7 = CALL _Znwj($3)
	*($5 + [56]) = ($3 | [1])
	*($5 + [64]) = $7
	*($5 + [60]) = $9
	
.LABEL $label$13
	CALL memcpy($7, [17307], $9)
	
.LABEL $label$12
	*(($7 + $9)) = [0]
	*((($5 + [40]) + [8])) = *((($5 + [72]) + [8]))
	*($5 + [40]) = *($5 + [72])
	CALL $54($10, $1, ($5 + [40]), ($5 + [56]))
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($5 + [64]))
	
.LABEL $label$10
	$9 = [1]
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($5 + [160])))
	
.LABEL $label$8
	if ( ((*($5 + [168]) & $9) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($5 + [176]))
	
.LABEL $label$2
	$global$0 = ($5 + [192])
	return (unreachable)
	
.LABEL $label$1
	CALL $297(($5 + [56]))
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $324($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [18132])
	CALL memcpy(($3 + [8]), $1, [8])
	*($3 + [52]) = ($1 + [8])
	CALL $69(($3 + [48]), (($3 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $327($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $76(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $324($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1398362884
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [17985])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [18034])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18132])
	CALL memcpy(($3 + [24]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [18132])
	$1 = (($3 + [24]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [18132])
	CALL memcpy((($3 + [24]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $327($6)
	
.LABEL $label$8
	*(($2 = (($3 + [48]) + [8]))) = *(($1 + [8]))
	*($3 + [48]) = *($1)
	$8 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($2)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$10 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [64])
	*($3 + [8]) = $10
	*($3 + [80]) = $10
	CALL void $1((int_32 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $24 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL require_auth($1)
	CALL $61(*([0] + [8220]), $1, *($2))
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $324($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18132])
	CALL memcpy($3, $6, [1])
	CALL eosio_assert(((uint_32)($1 + [-1]) > (uint_32)[7]), [18132])
	$2 = ($3 + [8])
	CALL memcpy($2, ($6 + [1]), [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $327($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($2)
	$6 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($6 & [255])), (int_32 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2)
{
	CALL require_auth(*($0))
	$0 = *([0] + [8220])
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)-1) <= (int_64)100), [19010])
	CALL $59($0, [0], $1, $2)
}

void .FUNC $232 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18334])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [48]) = $1
	CALL $235(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)-2121395625802072064
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)-2121395625802072064
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $234(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [12])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [16])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$5 }
	*($3 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $326 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8240]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8244])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8240]) = [1]
	$2 = ($2 << [16])
	*([0] + [8244]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8244])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8244]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8240]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8240]) = [1]
	$3 = ($3 << [16])
	*([0] + [8244]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8244])
	
.LABEL $label$10
	*([0] + [8244]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $300 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $301($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $321 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_64 .FUNC $320 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $317($3, (int_64)0)
	$4 = CALL $319($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_32 .FUNC $280 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	if ( (*($3 + [124]) & [1]) ){ goto $label$10 }
	if ( (*($3 + [112]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [132])))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [120])))
	$2 = [1]
	if ( ((*($3 + [100]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = [1]
	if ( (*($3 + [100]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($3 + [88]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [108])))
	if ( ((*($3 + [88]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [96])))
	$2 = *($3 + [56])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = *($3 + [56])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*(($3 + [60])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	CALL _ZdlPv($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

int_32 .FUNC $322 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $325 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $326($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [19466])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $324 (int_32 $0)
{
	return CALL $325([8248], $0)
}

void .FUNC $327 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16632])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16440]
	$3 = (((int_32)$1 * (int_32)[12]) + [16440])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $315 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18132])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $211(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $104(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($0) = (int_64)0
	$5 = *($3 + [8])
	*($0 + [8]) = $5
	CALL eosio_assert([1], [17985])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [18034])
	$11 = ($1 + [8])
	$9 = *(($1 + [36]))
	$12 = *(($1 + [32]))
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$11 }
	
.LOOP $label$13:
	$7 = ($9 + [-24])
	$10 = *($7)
	if ( ((int_64)*($10) == (int_64)$2) ){ goto $label$12 }
	$9 = $7
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$11), [18054])
	*($4 + [32]) = $11
	$7 = (($4 + [32]) | [4])
	goto $label$10 
	
.LABEL $label$11
	$7 = CALL db_find_i64(*($11), *(($1 + [16])), (int_64)3607749779137757184, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	$10 = CALL $89($11, $7)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$11), [18054])
	*($4 + [32]) = $11
	$7 = (($4 + [32]) | [4])
	
.LABEL $label$10
	*($7) = $10
	if ( ((int_64)*($10 + [32]) == (int_64)*($1)) ){ goto $label$6 }
	$13 = ((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)(float_64)0.001)
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$8 }
	$2 = (int_64)-9223372036854775808
	goto $label$7 
	
.LABEL $label$9
	*($4 + [36]) = [0]
	*($4 + [32]) = $11
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$8
	$2 = (Rounds 0)($13)
	
.LABEL $label$7
	*($0) = $2
	$6 = *(($0 + [8]))
	$10 = [0]
	$9 = *([0] + [8216])
	CALL $81(($4 + [48]), $9)
	if ( ((int_64)$6 == (int_64)4544260) ){ goto $label$16 }
	if ( ((int_64)$6 == (int_64)1397703940) ){ goto $label$14 }
	if ( ((int_64)$6 != (int_64)297481618436) ){ goto $label$15 }
	$10 = [2]
	goto $label$14 
	
.LABEL $label$16
	$10 = [1]
	goto $label$14 
	
.LABEL $label$15
	CALL eosio_assert([0], [16644])
	$10 = [276447231]
	
.LABEL $label$14
	*(($10 = (*($4 + [48]) + ($10 << [3])))) = ((int_64)*($10) + (int_64)$2)
	CALL $82(($9 + [8]), ($4 + [48]), *($9))
	$9 = *($4 + [48])
	if ( ($9 == 0) ){ goto $label$17 }
	*($4 + [52]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$17
	if ( ((int_64)$5 == (int_64)4544260) ){ goto $label$21 }
	if ( ((int_64)$5 == (int_64)1397703940) ){ goto $label$20 }
	if ( ((int_64)$5 != (int_64)297481618436) ){ goto $label$19 }
	$6 = (int_64)2
	goto $label$18 
	
.LABEL $label$21
	$6 = (int_64)1
	goto $label$18 
	
.LABEL $label$20
	$6 = (int_64)0
	goto $label$18 
	
.LABEL $label$19
	CALL eosio_assert([0], [16644])
	$6 = (int_64)99999999999999
	
.LABEL $label$18
	*($4 + [24]) = $6
	$11 = ($1 + [48])
	$6 = *(*($7) + [32])
	$9 = *(($1 + [76]))
	$12 = *(($1 + [72]))
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$24 }
	
.LOOP $label$26:
	$7 = ($9 + [-24])
	$10 = *($7)
	if ( ((int_64)*($10) == (int_64)$6) ){ goto $label$25 }
	$9 = $7
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$24 }
	CALL eosio_assert(((int_32)*($10 + [20]) == (int_32)$11), [18054])
	if ( $10 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$7 = CALL db_find_i64(*($11), *(($1 + [56])), (int_64)8428183963073163264, $6)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$22 }
	$10 = CALL $101($11, $7)
	CALL eosio_assert(((int_32)*($10 + [20]) == (int_32)$11), [18054])
	
.LABEL $label$23
	$6 = *($1)
	*($4 + [52]) = $0
	*($4 + [48]) = ($4 + [24])
	CALL eosio_assert([1], [18137])
	CALL $102($11, $10, $6, ($4 + [48]))
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$22
	$6 = *($1)
	*($4 + [16]) = $0
	*($4 + [12]) = ($4 + [24])
	*($4 + [8]) = ($4 + [32])
	*($4 + [72]) = $6
	CALL eosio_assert(((int_64)*(($1 + [48])) == (int_64)CALL $fimport$8()), [18334])
	*($4 + [48]) = $11
	*($4 + [52]) = ($4 + [8])
	*($4 + [56]) = ($4 + [72])
	*(($7 = CALL _Znwj([32])) + [16]) = [0]
	*($7 + [8 align=4]) = (int_64)0
	*($7 + [20]) = $11
	CALL $103(($4 + [48]), $7)
	*($4 + [64]) = $7
	$6 = *($7)
	*($4 + [48]) = $6
	$10 = *($7 + [24])
	*($4 + [44]) = $10
	$12 = ($1 + [76])
	$9 = *($12)
	if ( ((uint_32)$9 >= (uint_32)*(($1 + [80]))) ){ goto $label$28 }
	*($9 + [8]) = $6
	*($9 + [16]) = $10
	*($4 + [64]) = [0]
	*($9) = $7
	*($12) = ($9 + [24])
	$7 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( $7 ){ goto $label$27 }
	goto $label$6 
	
.LABEL $label$28
	CALL $104(($1 + [72]), ($4 + [64]), ($4 + [48]), ($4 + [44]))
	$7 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($7 == 0) ){ goto $label$6 }
	
.LABEL $label$27
	$9 = *($7 + [8])
	if ( ($9 == 0) ){ goto $label$29 }
	*(($7 + [12])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$29
	CALL _ZdlPv($7)
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$6
	$global$0 = ($4 + [80])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*(*($4) + [4]) + [32])
	$5 = ($1 + [8])
	$6 = *($0)
	$9 = *($1 + [8])
	$7 = ($1 + [12])
	$8 = *($7)
	$10 = int_32(($8 - $9) >> [3])
	if ( ((uint_32)$10 >= (uint_32)[3]) ){ goto $label$2 }
	$10 = ([2] - $10)
	*($3) = (int_64)0
	$9 = ($1 + [16])
	if ( ((uint_32)$8 >= (uint_32)*($9)) ){ goto $label$3 }
	$11 = [2]
	goto $label$1 
	
.LABEL $label$3
	$11 = [0]
	goto $label$1 
	
.LABEL $label$2
	$11 = [4]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$29 
	
.LABEL $label$31
	$10 = ($10 + [-1])
	$8 = *($7)
	*($3) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)*($9)) ){ goto $label$15 }
	$11 = [2]
	goto $label$4 
	
.LABEL $label$30
	*($8) = (int_64)0
	*($7) = ($8 + [8])
	if ( $10 ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$29
	CALL $3($5, $3)
	if ( $10 ){ goto $label$14 }
	$11 = [3]
	goto $label$4 
	
.LABEL $label$28
	$9 = *(($1 + [8]))
	$8 = *(($1 + [12]))
	$10 = int_32(($8 - $9) >> [3])
	$11 = [4]
	goto $label$4 
	
.LABEL $label$27
	*(($7 = ($9 + (*(*($4 + [4])) << [3])))) = ((int_64)*($7) + (int_64)*(*($4 + [8])))
	$12 = (CASTING uint_64)(uint_32 $10)
	$10 = [8]
	$11 = [5]
	goto $label$4 
	
.LABEL $label$26
	$10 = ($10 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$11 }
	$11 = [6]
	goto $label$4 
	
.LABEL $label$25
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$10 }
	$11 = [7]
	goto $label$4 
	
.LABEL $label$24
	$10 = ((($8 - $9) & [-8]) + $10)
	$11 = [8]
	goto $label$4 
	
.LABEL $label$23
	if ( ($10 <= [513]) ){ goto $label$9 }
	$11 = [15]
	goto $label$4 
	
.LABEL $label$22
	$8 = CALL $324($10)
	goto $label$8 
	
.LABEL $label$21
	$8 = ($2 - (($10 + [15]) & [-16]))
	$global$0 = $8
	$11 = [10]
	goto $label$4 
	
.LABEL $label$20
	*($3) = $8
	*($3 + [8]) = ($8 + $10)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [18328])
	CALL memcpy($8, $1, [8])
	*($3 + [4]) = ($8 + [8])
	CALL $216($3, $5)
	$12 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($6 + [8]), (int_64)8428183963073163264, *(*($0 + [8])), $12, $8, $10)
	if ( ((uint_32)$10 >= (uint_32)[513]) ){ goto $label$7 }
	$11 = [11]
	goto $label$4 
	
.LABEL $label$19
	if ( ((uint_64)$12 >= (uint_64)*($6 + [16])) ){ goto $label$6 }
	$11 = [13]
	goto $label$4 
	
.LABEL $label$18
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$17
	CALL $327($8)
	if ( (uint_64)($12 <= *($6 + [16])) ){ goto $label$5 }
	$11 = [12]
	goto $label$4 
	
.LABEL $label$16
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$15
	$11 = [0]
	goto $label$4 
	
.LABEL $label$14
	$11 = [1]
	goto $label$4 
	
.LABEL $label$13
	$11 = [3]
	goto $label$4 
	
.LABEL $label$12
	$11 = [1]
	goto $label$4 
	
.LABEL $label$11
	$11 = [5]
	goto $label$4 
	
.LABEL $label$10
	$11 = [8]
	goto $label$4 
	
.LABEL $label$9
	$11 = [9]
	goto $label$4 
	
.LABEL $label$8
	$11 = [10]
	goto $label$4 
	
.LABEL $label$7
	$11 = [14]
	goto $label$4 
	
.LABEL $label$6
	$11 = [12]
	goto $label$4 
	
.LABEL $label$5
	$11 = [13]
	goto $label$4 
	$11
}

void .FUNC $102 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	$6 = *($1)
	*(($7 = (*($1 + [8]) + (*(*($3)) << [3])))) = ((int_64)*($7) + (int_64)*(*(($3 + [4]))))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [18269])
	$3 = [8]
	$7 = ($1 + [8])
	$9 = *($1 + [8])
	$8 = *(($1 + [12]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$2 }
	$3 = (($10 & [-8]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $324($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [18328])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	CALL $216($5, $7)
	CALL db_update_i64(*($1 + [24]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $327($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $105 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	$5 = ($1 + [8])
	$8 = *($1 + [8])
	$6 = ($1 + [12])
	$7 = *($6)
	$9 = ($7 - $8)
	$10 = int_32($9 >> [3])
	$11 = *($1)
	if ( ($9 == 0) ){ goto $label$3 }
	$9 = [0]
	
.LOOP $label$4:
	*($8) = (int_64)0
	$8 = ($8 + [8])
	$9 = ($9 + [1])
	if ( ($9 <= $10) ){ goto $label$4 }
	if ( ((uint_32)$10 > (uint_32)[2]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ([2] - $10)
	*($4) = (int_64)0
	$9 = ($1 + [16])
	if ( ((uint_32)$7 >= (uint_32)*($9)) ){ goto $label$5 }
	$12 = [2]
	goto $label$1 
	
.LABEL $label$5
	$12 = [0]
	goto $label$1 
	
.LABEL $label$2
	$12 = [3]
	
.LABEL $label$1
	
.LOOP $label$6:
	goto $label$30 
	
.LABEL $label$32
	$8 = ($8 + [-1])
	$7 = *($6)
	*($4) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)*($9)) ){ goto $label$17 }
	$12 = [2]
	goto $label$6 
	
.LABEL $label$31
	*($7) = (int_64)0
	*($6) = ($7 + [8])
	if ( $8 ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$30
	CALL $3($5, $4)
	if ( $8 ){ goto $label$16 }
	$12 = [3]
	goto $label$6 
	
.LABEL $label$29
	CALL eosio_assert(((int_64)$11 == (int_64)*($1)), [18269])
	$7 = [8]
	$9 = *(($1 + [8]))
	$8 = *(($1 + [12]))
	$6 = ($8 - $9)
	$13 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	$12 = [4]
	goto $label$6 
	
.LABEL $label$28
	$7 = ($7 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$13 }
	$12 = [5]
	goto $label$6 
	
.LABEL $label$27
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$12 }
	$12 = [6]
	goto $label$6 
	
.LABEL $label$26
	$7 = (($6 & [-8]) + $7)
	$12 = [7]
	goto $label$6 
	
.LABEL $label$25
	if ( ($7 <= [513]) ){ goto $label$11 }
	$12 = [14]
	goto $label$6 
	
.LABEL $label$24
	$8 = CALL $324($7)
	goto $label$10 
	
.LABEL $label$23
	$8 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $8
	$12 = [9]
	goto $label$6 
	
.LABEL $label$22
	*($4) = $8
	*($4 + [8]) = ($8 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [18328])
	CALL memcpy($8, $1, [8])
	*($4 + [4]) = ($8 + [8])
	CALL $216($4, $5)
	CALL db_update_i64(*($1 + [24]), $2, $8, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	$12 = [10]
	goto $label$6 
	
.LABEL $label$21
	if ( ((uint_64)$11 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	$12 = [12]
	goto $label$6 
	
.LABEL $label$20
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$19
	CALL $327($8)
	if ( (uint_64)($11 <= *($0 + [16])) ){ goto $label$7 }
	$12 = [11]
	goto $label$6 
	
.LABEL $label$18
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$17
	$12 = [0]
	goto $label$6 
	
.LABEL $label$16
	$12 = [1]
	goto $label$6 
	
.LABEL $label$15
	$12 = [3]
	goto $label$6 
	
.LABEL $label$14
	$12 = [1]
	goto $label$6 
	
.LABEL $label$13
	$12 = [4]
	goto $label$6 
	
.LABEL $label$12
	$12 = [7]
	goto $label$6 
	
.LABEL $label$11
	$12 = [8]
	goto $label$6 
	
.LABEL $label$10
	$12 = [9]
	goto $label$6 
	
.LABEL $label$9
	$12 = [13]
	goto $label$6 
	
.LABEL $label$8
	$12 = [11]
	goto $label$6 
	
.LABEL $label$7
	$12 = [12]
	goto $label$6 
	$12
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [18328])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $217(*($1), ($0 + [32]))
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $312($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$5 = ($global$0 - [48])
	$global$0 = $5
	CALL $298(($5 + [32]), $1)
	*($5 + [44]) = [0]
	*($5 + [24]) = [0]
	*($5 + [16]) = (int_64)0
	CALL $49(($5 + [32]), ($5 + [16]))
	$1 = [0]
	$7 = *($5 + [16])
	$6 = CALL $323([17275])
	if ( ((int_32)$6 != (int_32)( *($5 + [20]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$1 }
	$1 = (CALL $305(($5 + [16]), [0], [-1], [17275], $6) == 0)
	
.LABEL $label$1
	CALL eosio_assert($1, [17281])
	*($5 + [15]) = [0]
	CALL $50(($5 + [32]), $5)
	$1 = *($5)
	*($5 + [15]) = $1
	$7 = *($2 + [4])
	if ( ((int_32)$7 == (int_32)*($2 + [8])) ){ goto $label$3 }
	*($7) = $1
	*(($1 = ($2 + [4]))) = (*($1) + [1])
	goto $label$2 
	
.LABEL $label$3
	CALL $115($2, ($5 + [15]))
	
.LABEL $label$2
	*($5 + [15]) = [0]
	CALL $50(($5 + [32]), $5)
	$7 = *($5)
	*($5 + [15]) = $7
	$1 = ($2 + [4])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)*(($2 + [8]))) ){ goto $label$5 }
	*($6) = $7
	*($1) = (*($1) + [1])
	goto $label$4 
	
.LABEL $label$5
	CALL $115($2, ($5 + [15]))
	
.LABEL $label$4
	*($5 + [15]) = [0]
	CALL $50(($5 + [32]), $5)
	$7 = *($5)
	*($5 + [15]) = $7
	$1 = ($2 + [4])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)*(($2 + [8]))) ){ goto $label$7 }
	*($6) = $7
	*($1) = (*($1) + [1])
	goto $label$6 
	
.LABEL $label$7
	CALL $115($2, ($5 + [15]))
	
.LABEL $label$6
	*($5 + [15]) = [0]
	CALL $50(($5 + [32]), $5)
	$7 = *($5)
	*($5 + [15]) = $7
	$1 = ($2 + [4])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)*(($2 + [8]))) ){ goto $label$9 }
	*($6) = $7
	*($1) = (*($1) + [1])
	goto $label$8 
	
.LABEL $label$9
	CALL $115($2, ($5 + [15]))
	
.LABEL $label$8
	*($5 + [15]) = [0]
	CALL $50(($5 + [32]), $5)
	$7 = *($5)
	*($5 + [15]) = $7
	$1 = ($2 + [4])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)*(($2 + [8]))) ){ goto $label$11 }
	*($6) = $7
	*($1) = (*($1) + [1])
	goto $label$10 
	
.LABEL $label$11
	CALL $115($2, ($5 + [15]))
	
.LABEL $label$10
	*($5 + [15]) = [0]
	CALL $50(($5 + [32]), $5)
	$7 = *($5)
	*($5 + [15]) = $7
	$1 = ($2 + [4])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)*(($2 + [8]))) ){ goto $label$13 }
	*($6) = $7
	*($1) = (*($1) + [1])
	goto $label$12 
	
.LABEL $label$13
	CALL $115($2, ($5 + [15]))
	
.LABEL $label$12
	*($5 + [15]) = [0]
	CALL $50(($5 + [32]), $5)
	$7 = *($5)
	*($5 + [15]) = $7
	$1 = ($2 + [4])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)*(($2 + [8]))) ){ goto $label$15 }
	*($6) = $7
	*($1) = (*($1) + [1])
	goto $label$14 
	
.LABEL $label$15
	CALL $115($2, ($5 + [15]))
	
.LABEL $label$14
	CALL $50(($5 + [32]), $3)
	*($4) = (int_64)0
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	$2 = CALL $49(($5 + [32]), $5)
	$1 = *($5)
	$6 = ($1 & [1])
	if ( $2 ){ goto $label$16 }
	$3 = ( *($5 + [4]) ? uint_32($1 >> [1]) : $6 )
	if ( ((uint_32)$3 > (uint_32)[12]) ){ goto $label$16 }
	if ( ($3 == 0) ){ goto $label$18 }
	$7 = ( *(($5 + [8])) ? ($5 | [1]) : $6 )
	$2 = [0]
	
.LOOP $label$19:
	$1 = *(($7 + $2))
	if ( ((($1 + [-97]) & [255]) <= [26]) ){ goto $label$20 }
	if ( (($1 + [-49]) <= [5]) ){ goto $label$20 }
	if ( ((int_32)$1 != (int_32)[46]) ){ goto $label$17 }
	
.LABEL $label$20
	$2 = ($2 + [1])
	if ( ($2 <= $3) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$2 = [0]
	
.LABEL $label$17
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$16 }
	$2 = ( *(($5 + [8])) ? ($5 | [1]) : $6 )
	$1 = [0]
	
.LOOP $label$21:
	$3 = ($2 + $1)
	$7 = ($1 + [1])
	$1 = $7
	if ( *($3) ){ goto $label$21 }
	$8 = (CASTING uint_64)(uint_32 ($7 + [-1]))
	$9 = (int_64)0
	$10 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$22:
	$12 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$8) ){ goto $label$23 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$1 = ($1 + [-91])
	goto $label$24 
	
.LABEL $label$25
	$1 = ( ($1 + [-48]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$27 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$26 
	
.LABEL $label$27
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$26
	$2 = ($2 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$22 }
	*($4) = $11
	
.LABEL $label$16
	if ( $6 ){ goto $label$32 }
	$2 = [1]
	if ( (*($5 + [16]) & [1]) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	CALL _ZdlPv(*(($5 + [8])))
	$2 = [1]
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL _ZdlPv(*(($5 + [24])))
	if ( ((*($5 + [32]) & $2) == 0) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	if ( (*($5 + [32]) & $2) ){ goto $label$28 }
	
.LABEL $label$29
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$28
	CALL _ZdlPv(*($5 + [40]))
	$global$0 = ($5 + [48])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $106($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18328])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18328])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $224(CALL $225($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $212 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$11 }
	*($1 + [4]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $318 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $316($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $231 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	$3 = *($3)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$1 }
	CALL $215($1, *($3), *($3 + [4]))
	CALL $215(($1 + [12]), *($3 + [12]), *(($3 + [16])))
	
.LABEL $label$1
	*($1 + [24]) = *($3 + [24])
	*(($1 + [40])) = *(($3 + [40]))
	*(($1 + [32])) = *(($3 + [32]))
	CALL eosio_assert([1], [18269])
	$6 = ($1 + [24])
	$8 = *($1)
	$7 = *($1 + [4])
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$3 = [0]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$3 }
	$3 = (($9 & [-8]) + $3)
	
.LABEL $label$3
	$8 = ($1 + [12])
	$9 = *($1 + [12])
	$7 = *(($1 + [16]))
	$11 = ($7 - $9)
	$10 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$5 }
	$3 = (($11 & [-8]) + $3)
	
.LABEL $label$5
	$7 = ($3 + [24])
	if ( ($7 <= [513]) ){ goto $label$7 }
	$3 = CALL $324($7)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$6
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	*($5 + [16]) = $5
	*($5 + [28]) = $8
	*($5 + [32]) = $6
	*($5 + [24]) = $1
	*($5 + [36]) = ($1 + [32])
	*($5 + [40]) = ($1 + [40])
	CALL $236(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*(($1 + [52])), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)-2121395625802072064) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $327($3)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-2121395625802072064) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = (int_64)-2121395625802072063
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [48])
}

int_64 .FUNC $319 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $318($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $313()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $318($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19201]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $317($0, (int_64)0)
	*(CALL $313()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $318($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $318($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $318($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $318($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19201])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $318($0)
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $318($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [19457]))
	$8 = (int_64)0
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $318($0)
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $318($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19201]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $317($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19201]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19201]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $318($0) + [19201]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $313()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $313()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $313()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $219 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $312($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [240])
	$global$0 = $2
	*(($3 = $2) + [156]) = $0
	*($3 + [144]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $324($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	CALL memset(($3 + [8]), [0], [136])
	CALL $55(($3 + [8]))
	*($3 + [164]) = $1
	*($3 + [160]) = $1
	*($3 + [168]) = ($1 + $0)
	*($3 + [176]) = ($3 + [160])
	*($3 + [188]) = ($3 + [16])
	*($3 + [192]) = ($3 + [24])
	*($3 + [196]) = ($3 + [32])
	*($3 + [200]) = ($3 + [40])
	*($3 + [204]) = ($3 + [48])
	*($3 + [208]) = ($3 + [64])
	*($3 + [212]) = ($3 + [68])
	*($3 + [216]) = ($3 + [80])
	*($3 + [220]) = ($3 + [96])
	*($3 + [224]) = ($3 + [108])
	*($3 + [228]) = ($3 + [120])
	$2 = ($3 + [132])
	*($3 + [232]) = $2
	*($3 + [184]) = ($3 + [8])
	CALL $56(($3 + [184]), ($3 + [176]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $327($1)
	
.LABEL $label$4
	*($3 + [188]) = ($3 + [144])
	*($3 + [184]) = ($3 + [156])
	CALL $57(($3 + [184]), ($3 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [140])))
	
.LABEL $label$5
	if ( ((*(($3 + [120])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [128])))
	
.LABEL $label$6
	if ( ((*(($3 + [108])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [116])))
	
.LABEL $label$7
	if ( ((*(($3 + [96])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [104])))
	
.LABEL $label$8
	$1 = *($3 + [68])
	if ( ($1 == 0) ){ goto $label$9 }
	*(($3 + [72])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [240])
	return [1]
}

void .FUNC $39 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL $64(*([0] + [8220]), $1)
}

void .FUNC $36 (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
	CALL $67(*([0] + [8220]), $1)
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL require_recipient(*($1 + [24]))
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [76]) = $0
	*($3 + [64]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $324($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [20])) = (int_64)0
	*(($3 + [28])) = (int_64)0
	*(($3 + [44])) = (int_64)0
	*(($3 + [52])) = (int_64)0
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [12 align=4]) = (int_64)0
	*($3 + [36 align=4]) = (int_64)0
	*($3 + [88]) = ($1 + $0)
	*($3 + [80]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [18132])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)$0 != (int_32)[8]), [18132])
	CALL memcpy(($3 + [8]), ($1 + [8]), [1])
	*($3 + [84]) = ($1 + [9])
	CALL $69(($3 + [80]), ($3 + [12]))
	CALL $69(($3 + [80]), ($3 + [24]))
	CALL $69(($3 + [80]), ($3 + [36]))
	CALL $69(($3 + [80]), ($3 + [48]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $327($1)
	
.LABEL $label$4
	*($3 + [84]) = ($3 + [64])
	*($3 + [80]) = ($3 + [76])
	CALL $73(($3 + [80]), $3)
	if ( (*($3 + [48]) & [1]) ){ goto $label$11 }
	$1 = [1]
	if ( (*($3 + [36]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [56])))
	$1 = [1]
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [44])))
	if ( ((*($3 + [24]) & $1) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( (*($3 + [24]) & $1) ){ goto $label$7 }
	
.LABEL $label$8
	$1 = [1]
	if ( (*($3 + [12]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [32])))
	$1 = [1]
	if ( ((*($3 + [12]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [20])))
	$global$0 = ($3 + [96])
	return $1
	
.LABEL $label$5
	$global$0 = ($3 + [96])
	return $1
}

void .FUNC $35 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = *($2)
	$5 = *(($2 + [8]))
	*(($3 + [8])) = $5
	*((($3 + [16]) + [8])) = $5
	*($3) = $4
	*($3 + [16]) = $4
	CALL $79(*([0] + [8220]), $1, $3)
	$global$0 = ($3 + [32])
}

void .FUNC $32 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL $298(($3 + [24]), $2)
	*($3 + [36]) = [0]
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	$4 = (($3 + [8]) | [1])
	$5 = ($3 + [16])
	$6 = (int_64)0
	
.LOOP $label$2:
	*($5) = [0]
	*($3 + [8]) = (int_64)0
	if ( CALL $49(($3 + [24]), ($3 + [8])) ){ goto $label$6 }
	$7 = ($2 & [1])
	$2 = *($3 + [8])
	$8 = ( *($3 + [12]) ? uint_32($2 >> [1]) : $7 )
	if ( ((uint_32)$8 > (uint_32)[12]) ){ goto $label$6 }
	if ( ($8 == 0) ){ goto $label$7 }
	$9 = ( *($5) ? $4 : $7 )
	$2 = [0]
	
.LOOP $label$9:
	$0 = *(($9 + $2))
	if ( ((($0 + [-97]) & [255]) <= [26]) ){ goto $label$10 }
	if ( (($0 + [-49]) <= [5]) ){ goto $label$10 }
	if ( ((int_32)$0 != (int_32)[46]) ){ goto $label$8 }
	
.LABEL $label$10
	$2 = ($2 + [1])
	if ( ($2 <= $8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((int_32)[0] == (int_32)$8) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([0], [17967])
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$2 = ( *($5) ? $4 : $7 )
	$0 = [0]
	
.LOOP $label$11:
	$8 = ($2 + $0)
	$9 = ($0 + [1])
	$0 = $9
	if ( *($8) ){ goto $label$11 }
	$10 = (CASTING uint_64)(uint_32 ($9 + [-1]))
	$11 = (int_64)0
	$12 = (int_64)59
	$13 = (int_64)0
	
.LOOP $label$12:
	$14 = (int_64)0
	if ( ((uint_64)$11 >= (uint_64)$10) ){ goto $label$13 }
	$0 = *($2)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$0 = ($0 + [-91])
	goto $label$14 
	
.LABEL $label$15
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$17 }
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	goto $label$16 
	
.LABEL $label$17
	$14 = ((int_64)$14 & (int_64)15)
	
.LABEL $label$16
	$2 = ($2 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$12 }
	CALL $50(($3 + [24]), ($3 + [40]))
	$2 = *($3 + [40])
	if ( ($2 <= [3]) ){ goto $label$18 }
	CALL eosio_assert([0], [17949])
	
.LABEL $label$18
	CALL $78(*([0] + [8216]), $13, $2)
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($5))
	
.LABEL $label$3
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($3 + [32]))
	
.LABEL $label$19
	$global$0 = ($3 + [48])
}

void .FUNC $33 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$7 = ($global$0 - [176])
	$global$0 = $7
	CALL require_auth(*($0))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$1 }
	CALL eosio_assert([0], [17479])
	$global$0 = ($7 + [176])
	return (unreachable)
	
.LABEL $label$1
	*($7 + [168]) = [0]
	*($7 + [160]) = (int_64)0
	*($7 + [152]) = [0]
	*($7 + [144]) = (int_64)0
	*($7 + [136]) = [0]
	*($7 + [128]) = (int_64)0
	*($7 + [120]) = [0]
	*($7 + [112]) = (int_64)0
	*(($7 + [104])) = [0]
	*($7 + [96]) = (int_64)0
	$8 = CALL $323([17673])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$5 }
	*($7 + [96]) = ($8 << [1])
	$9 = (($7 + [96]) | [1])
	if ( $8 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($7 + [96]) = ($10 | [1])
	*($7 + [104]) = $9
	*($7 + [100]) = $8
	
.LABEL $label$4
	CALL memcpy($9, [17673], $8)
	
.LABEL $label$3
	*(($9 + $8)) = [0]
	CALL $1($3, ($7 + [160]), ($7 + [96]))
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($7 + [104]))
	
.LABEL $label$6
	*(($7 + [104])) = [0]
	*($7 + [96]) = (int_64)0
	$8 = CALL $323([17673])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$10 }
	*($7 + [96]) = ($8 << [1])
	$3 = (($7 + [96]) | [1])
	if ( $8 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$9 = (($8 + [16]) & [-16])
	$3 = CALL _Znwj($9)
	*($7 + [96]) = ($9 | [1])
	*($7 + [104]) = $3
	*($7 + [100]) = $8
	
.LABEL $label$9
	CALL memcpy($3, [17673], $8)
	
.LABEL $label$8
	*(($3 + $8)) = [0]
	CALL $1($4, ($7 + [144]), ($7 + [96]))
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($7 + [104]))
	
.LABEL $label$11
	*(($7 + [104])) = [0]
	*($7 + [96]) = (int_64)0
	$8 = CALL $323([17673])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$15 }
	*($7 + [96]) = ($8 << [1])
	$3 = (($7 + [96]) | [1])
	if ( $8 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$4 = (($8 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($7 + [96]) = ($4 | [1])
	*($7 + [104]) = $3
	*($7 + [100]) = $8
	
.LABEL $label$14
	CALL memcpy($3, [17673], $8)
	
.LABEL $label$13
	*(($3 + $8)) = [0]
	CALL $1($5, ($7 + [128]), ($7 + [96]))
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($7 + [104]))
	
.LABEL $label$16
	*(($7 + [104])) = [0]
	*($7 + [96]) = (int_64)0
	$8 = CALL $323([17673])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$20 }
	*($7 + [96]) = ($8 << [1])
	$3 = (($7 + [96]) | [1])
	if ( $8 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$4 = (($8 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($7 + [96]) = ($4 | [1])
	*($7 + [104]) = $3
	*($7 + [100]) = $8
	
.LABEL $label$19
	CALL memcpy($3, [17673], $8)
	
.LABEL $label$18
	*(($3 + $8)) = [0]
	CALL $1($6, ($7 + [112]), ($7 + [96]))
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($7 + [104]))
	
.LABEL $label$21
	CALL eosio_assert(((int_32)((int_32)(*($7 + [164]) - *($7 + [160])) / (int_32)[12]) == (int_32)$2), [17675])
	CALL eosio_assert(((int_32)((int_32)(*($7 + [148]) - *($7 + [144])) / (int_32)[12]) == (int_32)$2), [17694])
	CALL eosio_assert(((int_32)((int_32)(*($7 + [132]) - *($7 + [128])) / (int_32)[12]) == (int_32)$2), [17720])
	CALL eosio_assert(((int_32)((int_32)(*($7 + [116]) - *($7 + [112])) / (int_32)[12]) == (int_32)$2), [17740])
	if ( ($2 == 0) ){ goto $label$22 }
	$6 = ((int_32)$2 * (int_32)[12])
	$9 = (($7 + [96]) + [8])
	$2 = [0]
	
.LOOP $label$23:
	$8 = CALL $298(($7 + [96]), (*($7 + [160]) + $2))
	$3 = CALL $298(($7 + [80]), (*($7 + [144]) + $2))
	$4 = CALL $298(($7 + [64]), (*($7 + [128]) + $2))
	$5 = CALL $298(($7 + [48]), (*($7 + [112]) + $2))
	CALL $71($0, CALL $308($8, [0], [10]), CALL $298(($7 + [32]), $3), CALL $298(($7 + [16]), $4), CALL $298($7, $5), [1])
	if ( (*($7) & [1]) ){ goto $label$36 }
	if ( (*($7 + [16]) & [1]) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	CALL _ZdlPv(*(($7 + [8])))
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$34 }
	
.LABEL $label$35
	CALL _ZdlPv(*((($7 + [16]) + [8])))
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	if ( (*($7 + [32]) & [1]) ){ goto $label$32 }
	
.LABEL $label$33
	if ( (*($7 + [48]) & [1]) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	CALL _ZdlPv(*((($7 + [32]) + [8])))
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL _ZdlPv(*((($7 + [48]) + [8])))
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	if ( (*($7 + [64]) & [1]) ){ goto $label$28 }
	
.LABEL $label$29
	if ( (*($7 + [80]) & [1]) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	CALL _ZdlPv(*((($7 + [64]) + [8])))
	if ( ((*($7 + [80]) & [1]) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL _ZdlPv(*((($7 + [80]) + [8])))
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	if ( (*($7 + [96]) & [1]) ){ goto $label$24 }
	
.LABEL $label$25
	$2 = ($2 + [12])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL _ZdlPv(*($9))
	$2 = ($2 + [12])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$23 }
	
.LABEL $label$22
	$3 = *($7 + [112])
	if ( ($3 == 0) ){ goto $label$37 }
	$8 = *($7 + [116])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$39 }
	
.LOOP $label$40:
	$2 = ($8 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$41
	$8 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$40 }
	$2 = *($7 + [112])
	goto $label$38 
	
.LABEL $label$39
	$2 = $3
	
.LABEL $label$38
	*($7 + [116]) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$37
	$3 = *($7 + [128])
	if ( ($3 == 0) ){ goto $label$42 }
	$8 = *($7 + [132])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$44 }
	
.LOOP $label$45:
	$2 = ($8 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$46
	$8 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$45 }
	$2 = *($7 + [128])
	goto $label$43 
	
.LABEL $label$44
	$2 = $3
	
.LABEL $label$43
	*($7 + [132]) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$42
	$3 = *($7 + [144])
	if ( ($3 == 0) ){ goto $label$47 }
	$8 = *($7 + [148])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$49 }
	
.LOOP $label$50:
	$2 = ($8 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$51 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$51
	$8 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$50 }
	$2 = *($7 + [144])
	goto $label$48 
	
.LABEL $label$49
	$2 = $3
	
.LABEL $label$48
	*($7 + [148]) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$47
	$3 = *($7 + [160])
	if ( ($3 == 0) ){ goto $label$52 }
	$8 = *($7 + [164])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$54 }
	
.LOOP $label$55:
	$2 = ($8 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$56 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$56
	$8 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$55 }
	$2 = *($7 + [160])
	goto $label$53 
	
.LABEL $label$54
	$2 = $3
	
.LABEL $label$53
	*($7 + [164]) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$52
	$global$0 = ($7 + [176])
	return (unreachable)
	
.LABEL $label$17
	CALL $297(($7 + [96]))
	
.LABEL $label$12
	CALL $297(($7 + [96]))
	
.LABEL $label$7
	CALL $297(($7 + [96]))
	
.LABEL $label$2
	CALL $297(($7 + [96]))
	(unreachable)
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL $84(*([0] + [8220]))
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $324($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18132])
	CALL memcpy(($3 + [8]), $6, [1])
	$2 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $327($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($2 & [255])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $215 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [3])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$6 = [536870911]
	if ( ((uint_32)int_32($5 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [3])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $312($0)
}

void .FUNC $214 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $215($1, *($5), *($5 + [4]))
	
.LABEL $label$1
	$7 = *($1)
	$6 = *($1 + [4])
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$5 = [0]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	$5 = (($8 & [-8]) + $5)
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $216($3, $1)
	*($1 + [16]) = CALL db_store_i64(*($4 + [8]), (int_64)-2111264453225158656, *(*($0 + [8])), (int_64)-2111264453225158656, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)-2111264453225158656) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $327($2)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)-2111264453225158656) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = (int_64)-2111264453225158655
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

int_32 .FUNC $217 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18328])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18328])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $216 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18328])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [18328])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $211 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18128])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $213($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [18132])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $210 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18334])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([24])) + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [12]) = $1
	CALL $214(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)-2111264453225158656
	$5 = *($3 + [16])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)-2111264453225158656
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $212(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$4 }
	*($1 + [4]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $198 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18334])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $257(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $244(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [12])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $199 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18105])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $324($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18132])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18132])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $259(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $327($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $196 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	$6 = *($1)
	*(($7 = (*($1 + [8]) + (*(*($3)) << [3])))) = ((int_64)*($7) + (int_64)*(*($3 + [4])))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [18269])
	$3 = [8]
	$7 = ($1 + [8])
	$9 = *($1 + [8])
	$8 = *(($1 + [12]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$2 }
	$3 = (($10 & [-8]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $324($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [18328])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	CALL $216($5, $7)
	CALL db_update_i64(*($1 + [24]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $327($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $197 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18334])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $256($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $242(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $194 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [18054])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $253($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [18054])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $195 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	float_64 $6
	int_32 $7
	float_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	*(($5 = $4) + [24]) = *(($1 + [8]))
	$3 = *($3)
	$7 = (*($1 + [16]) + (*($3) << [3]))
	$6 = *(*(($3 + [4])))
	$8 = ((float_64)$6 + (float_64)(CASTING float_64)(uint_64 *($7)))
	if ( (((float_64)$8 < (float_64)(float_64)18446744073709551615) & ((float_64)$8 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$9 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$9 = (Rounds 0)($8)
	
.LABEL $label$1
	*($7) = $9
	$3 = (*($1 + [28]) + (*($3) << [3]))
	$8 = ((float_64)$6 + (float_64)(CASTING float_64)(uint_64 *($3)))
	if ( (((float_64)$8 < (float_64)(float_64)18446744073709551615) & ((float_64)$8 >= (float_64)(float_64)0)) ){ goto $label$4 }
	$9 = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$9 = (Rounds 0)($8)
	
.LABEL $label$3
	*($3) = $9
	$10 = *($1)
	CALL eosio_assert([1], [18269])
	$11 = ($1 + [16])
	$12 = *($1 + [16])
	$7 = *($1 + [20])
	$13 = ($7 - $12)
	$9 = (CASTING uint_64)(uint_32 int_32($13 >> [3]))
	$3 = [9]
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	$14 = ($1 + [28])
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$6 }
	$3 = (($13 & [-8]) + $3)
	
.LABEL $label$6
	$12 = *($14)
	$7 = *($1 + [32])
	$13 = ($7 - $12)
	$9 = (CASTING uint_64)(uint_32 int_32($13 >> [3]))
	
.LOOP $label$7:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$8 }
	$3 = (($13 & [-8]) + $3)
	
.LABEL $label$8
	$7 = ($3 + [16])
	if ( ($7 <= [513]) ){ goto $label$10 }
	$3 = CALL $324($7)
	goto $label$9 
	
.LABEL $label$10
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$9
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $7)
	*($5 + [32]) = ($5 + [8])
	*($5 + [48]) = $11
	*($5 + [52]) = $14
	*($5 + [40]) = $1
	*($5 + [44]) = ($1 + [8])
	*($5 + [56]) = ($1 + [40])
	*($5 + [60]) = ($1 + [48])
	CALL $292(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [60]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$11 }
	CALL $327($3)
	
.LABEL $label$11
	if ( ((uint_64)*($0 + [16]) > (uint_64)$10) ){ goto $label$12 }
	*(($0 + [16])) = ((int_64)$10 + (int_64)1)
	
.LABEL $label$12
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $322(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$13 }
	$1 = ($1 + [64])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$14 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2120381602870940160, ($5 + [32]), $10)
	*($1) = $3
	
.LABEL $label$14
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$13
	$global$0 = ($5 + [64])
}

void .FUNC $192 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	*($1) = *(*($3))
	CALL eosio_assert([1], [18269])
	CALL eosio_assert([1], [18328])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $193 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18334])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [18328])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7235159537265672192
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $290(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $190 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [18054])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2121395625386200416, (int_64)-2121395625386200416)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $237($0, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [18054])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18137])
	CALL $249($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $250($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $191 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [18172])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18218])
	$6 = ($1 + [8])
	$9 = *($1 + [8])
	$7 = ($1 + [12])
	$8 = *($7)
	$10 = ($8 - $9)
	$11 = int_32($10 >> [3])
	$12 = *($1)
	if ( ($10 == 0) ){ goto $label$3 }
	$10 = [0]
	
.LOOP $label$4:
	*($9) = (int_64)0
	$9 = ($9 + [8])
	$10 = ($10 + [1])
	if ( ($10 <= $11) ){ goto $label$4 }
	if ( ((uint_32)$11 > (uint_32)[2]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = ([2] - $11)
	*($5) = (int_64)0
	$10 = ($1 + [16])
	if ( ((uint_32)$8 >= (uint_32)*($10)) ){ goto $label$5 }
	$13 = [2]
	goto $label$1 
	
.LABEL $label$5
	$13 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = [3]
	
.LABEL $label$1
	
.LOOP $label$6:
	goto $label$30 
	
.LABEL $label$32
	$9 = ($9 + [-1])
	$8 = *($7)
	*($5) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)*($10)) ){ goto $label$17 }
	$13 = [2]
	goto $label$6 
	
.LABEL $label$31
	*($8) = (int_64)0
	*($7) = ($8 + [8])
	if ( $9 ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$30
	CALL $3($6, $5)
	if ( $9 ){ goto $label$16 }
	$13 = [3]
	goto $label$6 
	
.LABEL $label$29
	CALL eosio_assert(((int_64)$12 == (int_64)*($1)), [18269])
	$8 = [8]
	$10 = *(($1 + [8]))
	$9 = *(($1 + [12]))
	$7 = ($9 - $10)
	$14 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$13 = [4]
	goto $label$6 
	
.LABEL $label$28
	$8 = ($8 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$13 }
	$13 = [5]
	goto $label$6 
	
.LABEL $label$27
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$12 }
	$13 = [6]
	goto $label$6 
	
.LABEL $label$26
	$8 = (($7 & [-8]) + $8)
	$13 = [7]
	goto $label$6 
	
.LABEL $label$25
	if ( ($8 <= [513]) ){ goto $label$11 }
	$13 = [14]
	goto $label$6 
	
.LABEL $label$24
	$9 = CALL $324($8)
	goto $label$10 
	
.LABEL $label$23
	$9 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $9
	$13 = [9]
	goto $label$6 
	
.LABEL $label$22
	*($5) = $9
	*($5 + [8]) = ($9 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [18328])
	CALL memcpy($9, $1, [8])
	*($5 + [4]) = ($9 + [8])
	CALL $216($5, $6)
	CALL db_update_i64(*($1 + [24]), $2, $9, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$9 }
	$13 = [10]
	goto $label$6 
	
.LABEL $label$21
	if ( ((uint_64)$12 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	$13 = [12]
	goto $label$6 
	
.LABEL $label$20
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$19
	CALL $327($9)
	if ( (uint_64)($12 <= *($0 + [16])) ){ goto $label$7 }
	$13 = [11]
	goto $label$6 
	
.LABEL $label$18
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$17
	$13 = [0]
	goto $label$6 
	
.LABEL $label$16
	$13 = [1]
	goto $label$6 
	
.LABEL $label$15
	$13 = [3]
	goto $label$6 
	
.LABEL $label$14
	$13 = [1]
	goto $label$6 
	
.LABEL $label$13
	$13 = [4]
	goto $label$6 
	
.LABEL $label$12
	$13 = [7]
	goto $label$6 
	
.LABEL $label$11
	$13 = [8]
	goto $label$6 
	
.LABEL $label$10
	$13 = [9]
	goto $label$6 
	
.LABEL $label$9
	$13 = [13]
	goto $label$6 
	
.LABEL $label$8
	$13 = [11]
	goto $label$6 
	
.LABEL $label$7
	$13 = [12]
	goto $label$6 
	$13
}