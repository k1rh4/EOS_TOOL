(data (i32.const 4) "0f\00\00")
(data (i32.const 16) "invalid quantity in transfer\00")
(data (i32.const 48) "zero quantity is disallowed in transfer\00")
(data (i32.const 96) "Fanclub contestant \00")
(data (i32.const 128) " bid of \00")
(data (i32.const 144) "@\00")
(data (i32.const 160) " with memo \00")
(data (i32.const 176) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 240) "token doesn\'t exist\00")
(data (i32.const 272) "must increase bid by 10%\00")
(data (i32.const 304) "cannot pass end iterator to modify\00")
(data (i32.const 352) "object passed to modify is not in multi_index\00")
(data (i32.const 400) "cannot modify objects in table of another contract\00")
(data (i32.const 464) "updater cannot change primary key when modifying an object\00")
(data (i32.const 528) "write\00")
(data (i32.const 544) "error reading iterator\00")
(data (i32.const 576) "read\00")
(data (i32.const 592) "get\00")
(data (i32.const 608) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 672) "invalid symbol name\00")
(data (i32.const 720) ".\00")
(data (i32.const 736) " \00")
(data (i32.const 752) ",\00")
(data (i32.const 768) "invalid quantity\00")
(data (i32.const 800) "Congrats! You are the first to add \00")
(data (i32.const 848) "stat table doesn\'t exist for this token\00")
(data (i32.const 896) "cannot create objects in table of another contract\00")
(data (i32.const 960) "Setting details for \00")
(data (i32.const 992) "Removing \00")
(data (i32.const 1008) "cannot pass end iterator to erase\00")
(data (i32.const 1056) "cannot increment end iterator\00")
(data (i32.const 1088) "object passed to erase is not in multi_index\00")
(data (i32.const 1136) "cannot erase objects in table of another contract\00")
(data (i32.const 1200) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1264) "transfer\00")
(data (i32.const 9680) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$7 (param i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$10 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$11 (param i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$14 (param i64)))
(import "env" "printn" (func $fimport$15 (param i64)))
(import "env" "prints" (func $fimport$16 (param i32)))
(import "env" "prints_l" (func $fimport$17 (param i32 i32)))
(import "env" "printui" (func $fimport$18 (param i64)))
(import "env" "read_action_data" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$20 (param i64)))
(import "env" "require_auth2" (func $fimport$21 (param i64 i64)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN5eosio12eostokeninfo2onERKNS_8currency8transferEy" (func $5))
(export "_ZN5eosio12eostokeninfo12create_tokenEyNS_14extended_assetE" (func $6))
(export "_ZN5eosio12eostokeninfo14update_fanclubEyNS_14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $7))
(export "_ZN5eosio12eostokeninfo3setEyNS_14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_S8_S8_" (func $27))
(export "_ZN5eosio12eostokeninfo6removeEyNS_14extended_assetE" (func $29))
(export "_ZN5eosio12eostokeninfo5applyEyy" (func $31))
(export "apply" (func $39))
(export "malloc" (func $40))
(export "free" (func $43))
(export "memcmp" (func $52))
(export "strlen" (func $53))
(table $0 3 3 anyfunc)
(elem (i32.const 0) $54 $27 $29)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $19($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $49($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $44($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $49($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $45($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $46($7)
	return (unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [592])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $20($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [576])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [8]) = $0
	CALL _ZN5eosio12eostokeninfo5applyEyy(($3 + [8]), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

void .FUNC _ZN5eosio12eostokeninfo6removeEyNS_14extended_assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL prints([992])
	CALL $8($2)
	CALL prints([144])
	CALL printn(*($2 + [16]))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	$0 = [0]
	$2 = CALL db_find_i64($4, $4, (int_64)-3665743317141815296, ((int_64)*($2 + [16]) + (int_64)*($2 + [8])))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $9($6, $2)
	CALL eosio_assert(((int_32)*($0 + [140]) == (int_32)$6), [176])
	
.LABEL $label$1
	$2 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($2, [240])
	CALL require_auth(*($0))
	CALL eosio_assert($2, [1008])
	CALL eosio_assert($2, [1056])
	$2 = CALL db_next_i64(*($0 + [144]), ($6 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	CALL $9($6, $2)
	
.LABEL $label$2
	CALL $30($6, $0)
	$3 = *($6 + [24])
	if ( ($3 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $11($2)
	CALL $45($2)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($5) = $3
	CALL $45($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [64])
	*([0] + [4]) = $16
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [352])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [400])
	$13 = ($1 + [24])
	$4 = *($13)
	$14 = ($1 + [16])
	$15 = *($14)
	$5 = ($1 + [32])
	CALL $47($5, *($3))
	$6 = ($1 + [44])
	CALL $47($6, *($3 + [4]))
	$7 = ($1 + [56])
	CALL $47($7, *($3 + [8]))
	$8 = ($1 + [68])
	CALL $47($8, *($3 + [12]))
	$9 = ($1 + [80])
	CALL $47($9, *($3 + [16]))
	$4 = ((int_64)$4 + (int_64)$15)
	CALL eosio_assert(((int_64)$4 == (int_64)((int_64)*($13) + (int_64)*($14))), [464])
	*(($3 = $16) + [16]) = [0]
	*($3) = ($3 + [16])
	$14 = ($1 + [8])
	*($3 + [28]) = $14
	*($3 + [24]) = $1
	*($3 + [32]) = $5
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	$10 = ($1 + [96])
	*($3 + [52]) = $10
	$11 = ($1 + [104])
	*($3 + [56]) = $11
	$12 = ($1 + [128])
	*($3 + [60]) = $12
	CALL $12(($3 + [24]), $3)
	$13 = *($3 + [16])
	if ( ($13 <= [513]) ){ goto $label$2 }
	$16 = CALL malloc($13)
	goto $label$1 
	
.LABEL $label$2
	$16 = ($16 - (($13 + [15]) & [-16]))
	*([0] + [4]) = $16
	
.LABEL $label$1
	*($3 + [4]) = $16
	*($3) = $16
	*($3 + [8]) = ($16 + $13)
	*($3 + [16]) = $3
	*($3 + [28]) = $14
	*($3 + [32]) = $5
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	*($3 + [24]) = $1
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $12
	CALL $13(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [144]), $2, $16, $13)
	if ( ($13 <= [513]) ){ goto $label$3 }
	CALL free($16)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [64])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([752])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $44($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $50($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $45($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [80])
	*([0] + [4]) = $17
	$2 = *($0)
	$11 = *($0 + [4])
	*($1) = *(*(*($11) + [4]) + [32])
	$15 = *(*($11) + [4])
	*((($16 = $17) + [20])) = *(($15 + [28]))
	*(($13 = (($16 + [8]) + [8]))) = *(($15 + [24]))
	*($16 + [8]) = *($15 + [16])
	*($16 + [12]) = *(($15 + [20]))
	$12 = *(*($11 + [4]) + [16])
	$14 = *($13)
	*((($16 + [40]) + [8])) = $14
	*(($15 = (($16 + [24]) + [8]))) = $14
	$14 = *($16 + [8])
	*($16 + [40]) = $14
	*($16 + [24]) = $14
	*(($1 + [24])) = $12
	*(($1 + [16])) = *($15)
	*($1 + [8]) = *($16 + [24])
	*($16 + [8]) = [0]
	*($16 + [24]) = ($16 + [8])
	$13 = ($1 + [8])
	*($16 + [44]) = $13
	*($16 + [40]) = $1
	$3 = ($1 + [32])
	*($16 + [48]) = $3
	$4 = ($1 + [44])
	*($16 + [52]) = $4
	$5 = ($1 + [56])
	*($16 + [56]) = $5
	$6 = ($1 + [68])
	*($16 + [60]) = $6
	$7 = ($1 + [80])
	*($16 + [64]) = $7
	$8 = ($1 + [96])
	*($16 + [68]) = $8
	$9 = ($1 + [104])
	*($16 + [72]) = $9
	$10 = ($1 + [128])
	*($16 + [76]) = $10
	CALL $12(($16 + [40]), ($16 + [24]))
	$11 = *($16 + [8])
	if ( ($11 <= [513]) ){ goto $label$2 }
	$15 = CALL malloc($11)
	goto $label$1 
	
.LABEL $label$2
	$15 = ($17 - (($11 + [15]) & [-16]))
	*([0] + [4]) = $15
	
.LABEL $label$1
	*($16 + [28]) = $15
	*($16 + [24]) = $15
	*($16 + [32]) = ($15 + $11)
	*($16 + [8]) = ($16 + [24])
	*($16 + [44]) = $13
	*($16 + [40]) = $1
	*($16 + [48]) = $3
	*($16 + [52]) = $4
	*($16 + [56]) = $5
	*($16 + [60]) = $6
	*($16 + [64]) = $7
	*($16 + [68]) = $8
	*($16 + [72]) = $9
	*($16 + [76]) = $10
	CALL $13(($16 + [40]), ($16 + [8]))
	$12 = ((int_64)*(($1 + [24])) + (int_64)*(($1 + [16])))
	*($1 + [144]) = CALL db_store_i64(*($2 + [8]), (int_64)-3665743317141815296, *(*($0 + [8])), $12, $15, $11)
	if ( ($11 <= [513]) ){ goto $label$3 }
	CALL free($15)
	
.LABEL $label$3
	if ( (uint_64)($12 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($16 + [80])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $44([56])
	CALL $24($6)
	*($6 + [40]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [16])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [32])
	CALL $25(($8 + [32]), ($8 + [24]))
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8
	*($8 + [32]) = $5)
	$7 = *($6 + [44])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $26(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $45($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $24 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [672])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [672])
	return $0
}

void .FUNC _ZN5eosio12eostokeninfo3setEyNS_14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_S8_S8_ (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [112])
	*([0] + [4]) = $13
	$8 = ($2 + [16])
	$9 = *($8)
	*((($13 + [88]) + [16])) = $9
	$10 = ($2 + [8])
	$11 = *($10)
	*((($13 + [88]) + [8])) = $11
	$12 = *($2)
	*(($13 + [16])) = $9
	*(($13 + [8])) = $11
	*($13 + [88]) = $12
	*($13) = $12
	CALL _ZN5eosio12eostokeninfo12create_tokenEyNS_14extended_assetE($0, $1, $13)
	CALL prints([960])
	CALL $8($2)
	CALL prints([144])
	CALL printn(*($8))
	*(($13 + [80])) = [0]
	*($13 + [64]) = (int_64)-1
	*($13 + [72]) = (int_64)0
	$12 = *($0)
	*($13 + [48]) = $12
	*($13 + [56]) = $12
	$2 = [0]
	$0 = CALL db_find_i64($12, $12, (int_64)-3665743317141815296, ((int_64)*($8) + (int_64)*($10)))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $9(($13 + [48]), $0)
	CALL eosio_assert(((int_32)*($2 + [140]) == (int_32)($13 + [48])), [176])
	
.LABEL $label$1
	$0 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($0, [240])
	CALL require_auth(*($2))
	*($13 + [28]) = $4
	*($13 + [24]) = $3
	*($13 + [32]) = $5
	*($13 + [36]) = $6
	*($13 + [40]) = $7
	CALL eosio_assert($0, [304])
	CALL $28(($13 + [48]), $2, $1, ($13 + [24]))
	$8 = *($13 + [72])
	if ( ($8 == 0) ){ goto $label$2 }
	$3 = ($13 + [76])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $11($0)
	CALL $45($0)
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	$2 = *(($13 + [72]))
	goto $label$3 
	
.LABEL $label$4
	$2 = $8
	
.LABEL $label$3
	*($3) = $8
	CALL $45($2)
	
.LABEL $label$2
	*([0] + [4]) = ($13 + [112])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $44(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $50($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $45($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $45($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $44(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $45($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $44($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $45($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9660])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9468]
	$1 = (((int_32)$2 * (int_32)[12]) + [9468])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $42 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9766]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9768])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9766]) = [1]
	$7 = ($7 << [16])
	*([0] + [9768]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9768])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9768]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9766]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9766]) = [1]
	$3 = ($3 << [16])
	*([0] + [9768]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9768])
	
.LABEL $label$8
	*([0] + [9768]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $42($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9680])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $41([1276], $0)
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $48($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $46 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $45 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9772])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $44($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([720])
	CALL prints_l($2, $3)
	CALL prints([736])
	CALL $21($1, [0])
	*([0] + [4]) = $10
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $44([152])
	CALL $15($6)
	*($6 + [140]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [32])
	*($8 + [52]) = ($6 + [44])
	*($8 + [56]) = ($6 + [56])
	*($8 + [60]) = ($6 + [68])
	*($8 + [64]) = ($6 + [80])
	*($8 + [68]) = ($6 + [96])
	*($8 + [72]) = ($6 + [104])
	*($8 + [76]) = ($6 + [128])
	CALL $16(($8 + [40]), ($8 + [32]))
	*($6 + [144]) = $1
	*($8 + [32]) = $6
	$5 = ((int_64)*($6 + [24]) + (int_64)*($6 + [16]))
	*($8 + [40]) = $5
	$7 = *($6 + [144])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $17(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $11($4)
	CALL $45($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

void .FUNC _ZN5eosio12eostokeninfo12create_tokenEyNS_14extended_assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [144])
	*([0] + [4]) = $7
	CALL require_auth($1)
	$3 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$5 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [768])
	*((($7 + [64]) + [32])) = [0]
	*($7 + [80]) = (int_64)-1
	*($7 + [88]) = (int_64)0
	$5 = *($0)
	*($7 + [64]) = $5
	*($7 + [72]) = $5
	$3 = ($2 + [8])
	$6 = CALL db_find_i64($5, $5, (int_64)-3665743317141815296, ((int_64)*($2 + [16]) + (int_64)*($3)))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $9(($7 + [64]), $6) + [140]) == (int_32)($7 + [64])), [176])
	$3 = *($7 + [88])
	if ( $3 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL prints([800])
	CALL $8($2)
	CALL prints([144])
	$0 = ($2 + [16])
	CALL printn(*($0))
	*($7 + [40]) = (int_64)-1
	$6 = [0]
	*($7 + [48]) = [0]
	$4 = *($0)
	*($7 + [24]) = $4
	$5 = (uint_64)*($3) >> (uint_64)(int_64)8
	*($7 + [32]) = $5)
	*(($7 + [52])) = [0]
	*((($7 + [24]) + [32])) = [0]
	$3 = CALL db_find_i64($4, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$10 }
	$6 = CALL $22(($7 + [24]), $3)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)($7 + [24])), [176])
	*($7 + [20]) = $6
	*($7 + [16]) = ($7 + [24])
	$6 = [1]
	goto $label$9 
	
.LABEL $label$10
	*($7 + [20]) = [0]
	*($7 + [16]) = ($7 + [24])
	
.LABEL $label$9
	CALL eosio_assert($6, [848])
	*($7 + [12]) = $2
	*($7 + [8]) = ($7 + [16])
	*($7 + [136]) = $1
	CALL eosio_assert(((int_64)*($7 + [64]) == (int_64)CALL $fimport$2()), [896])
	*($7 + [116]) = ($7 + [8])
	*($7 + [112]) = ($7 + [64])
	*($7 + [120]) = ($7 + [136])
	$6 = CALL $44([152])
	CALL $15($6)
	*($6 + [140]) = ($7 + [64])
	CALL $23(($7 + [112]), $6)
	*($7 + [128]) = $6
	$5 = ((int_64)*($6 + [24]) + (int_64)*($6 + [16]))
	*($7 + [112]) = $5
	$3 = *($6 + [144])
	*($7 + [108]) = $3
	$0 = ($7 + [92])
	$2 = *($0)
	if ( ((uint_32)$2 >= (uint_32)*(($7 + [96]))) ){ goto $label$12 }
	*($2 + [8]) = $5
	*($2 + [16]) = $3
	*($7 + [128]) = [0]
	*($2) = $6
	*($0) = ($2 + [24])
	goto $label$11 
	
.LABEL $label$12
	CALL $17(($7 + [88]), ($7 + [128]), ($7 + [112]), ($7 + [108]))
	
.LABEL $label$11
	$6 = *($7 + [128])
	*($7 + [128]) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $11($6)
	CALL $45($6)
	
.LABEL $label$13
	$3 = *($7 + [48])
	if ( ($3 == 0) ){ goto $label$14 }
	$0 = ($7 + [52])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$18 }
	CALL $45($2)
	
.LABEL $label$18
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$17 }
	$6 = *(($7 + [48]))
	goto $label$15 
	
.LABEL $label$16
	$6 = $3
	
.LABEL $label$15
	*($0) = $3
	CALL $45($6)
	
.LABEL $label$14
	$3 = *($7 + [88])
	if ( ($3 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$0 = ($7 + [92])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$20 }
	
.LOOP $label$21:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$22 }
	CALL $11($2)
	CALL $45($2)
	
.LABEL $label$22
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$21 }
	$6 = *(($7 + [88]))
	goto $label$19 
	
.LABEL $label$20
	$6 = $3
	
.LABEL $label$19
	*($0) = $3
	CALL $45($6)
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [144])
}

void .FUNC _ZN5eosio12eostokeninfo14update_fanclubEyNS_14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($6 + [56]) = $1
	CALL require_auth($1)
	CALL prints([96])
	CALL printn($1)
	CALL prints([128])
	CALL $8($2)
	CALL prints([144])
	CALL printn(*($2 + [16]))
	CALL prints([160])
	$4 = *($3)
	$5 = ($4 & [1])
	CALL prints_l(( *($3 + [8]) ? ($3 + [1]) : $5 ), ( *($3 + [4]) ? uint_32($4 >> [1]) : $5 ))
	*(($6 + [48])) = [0]
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	$1 = *($0)
	*($6 + [16]) = $1
	*($6 + [24]) = $1
	$0 = [0]
	$4 = CALL db_find_i64($1, $1, (int_64)-3665743317141815296, ((int_64)*($2 + [16]) + (int_64)*($2 + [8])))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $9(($6 + [16]), $4)
	CALL eosio_assert(((int_32)*($0 + [140]) == (int_32)($6 + [16])), [176])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [240])
	$1 = *($0 + [104])
	CALL eosio_assert(((int_64))(*($2) - $1) > (int_64)((int_64)$1 / (int_64)10)), [272])
	$1 = *($6 + [56])
	*($6 + [4]) = $2
	*($6 + [8]) = $3
	*($6) = ($6 + [56])
	CALL eosio_assert($4, [304])
	CALL $10(($6 + [16]), $0, $1, $6)
	$0 = *($6 + [40])
	if ( ($0 == 0) ){ goto $label$2 }
	$4 = ($6 + [44])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $11($3)
	CALL $45($3)
	
.LABEL $label$6
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$5 }
	$2 = *(($6 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$2 = $0
	
.LABEL $label$3
	*($4) = $0
	CALL $45($2)
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [64])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN5eosio12eostokeninfo2onERKNS_8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	if ( ((int_64)*($1 + [8]) != (int_64)*($0)) ){ goto $label$1 }
	$4 = *(($1 + [24]))
	$7 = [0]
	$3 = *($1 + [16])
	if ( ((uint_64)((int_64)$3 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [16])
	CALL eosio_assert(((int_64)$3 != (int_64)0), [48])
	*($8 + [96]) = $4
	$5 = *($1)
	*((($8 + [24]) + [8])) = $4
	*($8 + [104]) = $2
	*((($8 + [24]) + [16])) = $2
	*($8 + [88]) = $3
	*($8 + [24]) = $3
	CALL _ZN5eosio12eostokeninfo12create_tokenEyNS_14extended_assetE($0, $5, ($8 + [24]))
	*($8 + [64]) = $3
	*($8 + [72]) = $4
	*($8 + [80]) = $2
	$5 = *($1)
	CALL $51(($8 + [48]), ($1 + [32]))
	*(($8 + [16])) = *($8 + [80])
	*(($8 + [8])) = *($8 + [72])
	*($8) = *($8 + [64])
	CALL _ZN5eosio12eostokeninfo14update_fanclubEyNS_14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $5, $8, ($8 + [48]))
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$1 }
	CALL $45(*($8 + [56]))
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [112])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [528])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [528])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($3 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$2 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [672])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	$4 = ($0 + [32])
	$3 = CALL strlen([704])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$14 }
	*($4) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$1 = (($3 + [16]) & [-16])
	$4 = CALL $44($1)
	*(($0 + [32])) = ($1 | [1])
	*(($0 + [40])) = $4
	*(($0 + [36])) = $3
	
.LABEL $label$13
	CALL memcpy($4, [704], $3)
	
.LABEL $label$12
	*(($4 + $3)) = [0]
	*(($0 + [52])) = [0]
	*($0 + [44 align=4]) = (int_64)0
	$4 = ($0 + [44])
	$3 = CALL strlen([704])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$17 }
	*($4) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$1 = (($3 + [16]) & [-16])
	$4 = CALL $44($1)
	*(($0 + [44])) = ($1 | [1])
	*(($0 + [52])) = $4
	*(($0 + [48])) = $3
	
.LABEL $label$16
	CALL memcpy($4, [704], $3)
	
.LABEL $label$15
	*(($4 + $3)) = [0]
	*(($0 + [64])) = [0]
	*($0 + [56 align=4]) = (int_64)0
	$4 = ($0 + [56])
	$3 = CALL strlen([704])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$20 }
	*($4) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$1 = (($3 + [16]) & [-16])
	$4 = CALL $44($1)
	*(($0 + [56])) = ($1 | [1])
	*(($0 + [64])) = $4
	*(($0 + [60])) = $3
	
.LABEL $label$19
	CALL memcpy($4, [704], $3)
	
.LABEL $label$18
	*(($4 + $3)) = [0]
	*(($0 + [76])) = [0]
	*($0 + [68 align=4]) = (int_64)0
	$4 = ($0 + [68])
	$3 = CALL strlen([704])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$23 }
	*($4) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$1 = (($3 + [16]) & [-16])
	$4 = CALL $44($1)
	*(($0 + [68])) = ($1 | [1])
	*(($0 + [76])) = $4
	*(($0 + [72])) = $3
	
.LABEL $label$22
	CALL memcpy($4, [704], $3)
	
.LABEL $label$21
	*(($4 + $3)) = [0]
	*(($0 + [88])) = [0]
	*($0 + [80 align=4]) = (int_64)0
	$4 = ($0 + [80])
	$3 = CALL strlen([704])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$26 }
	*($4) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$1 = (($3 + [16]) & [-16])
	$4 = CALL $44($1)
	*(($0 + [80])) = ($1 | [1])
	*(($0 + [88])) = $4
	*(($0 + [84])) = $3
	
.LABEL $label$25
	CALL memcpy($4, [704], $3)
	
.LABEL $label$24
	*(($4 + $3)) = [0]
	*($0 + [104]) = (int_64)0
	*($0 + [96]) = (int_64)0
	*(($3 = ($0 + [112]))) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$2 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	
.LOOP $label$31:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$31 }
	
.LABEL $label$30
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$4 = [0]
	
.LABEL $label$27
	CALL eosio_assert($4, [672])
	*(($0 + [136])) = [0]
	*($0 + [128 align=4]) = (int_64)0
	$4 = ($0 + [128])
	$3 = CALL strlen([704])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$34 }
	*($4) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$1 = (($3 + [16]) & [-16])
	$4 = CALL $44($1)
	*(($0 + [128])) = ($1 | [1])
	*(($0 + [136])) = $4
	*(($0 + [132])) = $3
	
.LABEL $label$33
	CALL memcpy($4, [704], $3)
	
.LABEL $label$32
	*(($4 + $3)) = [0]
	return $0
	
.LABEL $label$11
	CALL $46($4)
	
.LABEL $label$10
	CALL $46($4)
	
.LABEL $label$9
	CALL $46($4)
	
.LABEL $label$8
	CALL $46($4)
	
.LABEL $label$7
	CALL $46($4)
	
.LABEL $label$6
	CALL $46($4)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $18(*($1), *($0 + [8]))
	CALL $18(*($1), *($0 + [12]))
	CALL $18(*($1), *($0 + [16]))
	CALL $18(*($1), *($0 + [20]))
	CALL $18(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $18(*($1), *($0 + [36]))
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $44(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $50($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $11($1)
	CALL $45($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $45($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [64])
	*([0] + [4]) = $17
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [352])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [400])
	*($1 + [96]) = *(*($3))
	$13 = ($1 + [24])
	$4 = *($13)
	$14 = ($1 + [16])
	$15 = *($14)
	$16 = *($3 + [4])
	*($1 + [104]) = *($16)
	*(($1 + [120])) = *(($16 + [16]))
	*(($1 + [112])) = *(($16 + [8]))
	$7 = ($1 + [128])
	CALL $47($7, *($3 + [8]))
	$4 = ((int_64)$4 + (int_64)$15)
	CALL eosio_assert(((int_64)$4 == (int_64)((int_64)*($13) + (int_64)*($14))), [464])
	*(($3 = $17) + [16]) = [0]
	*($3) = ($3 + [16])
	$14 = ($1 + [8])
	*($3 + [28]) = $14
	*($3 + [24]) = $1
	$8 = ($1 + [32])
	*($3 + [32]) = $8
	$9 = ($1 + [44])
	*($3 + [36]) = $9
	$10 = ($1 + [56])
	*($3 + [40]) = $10
	$11 = ($1 + [68])
	*($3 + [44]) = $11
	$12 = ($1 + [80])
	*($3 + [48]) = $12
	$5 = ($1 + [96])
	*($3 + [52]) = $5
	$6 = ($1 + [104])
	*($3 + [56]) = $6
	*($3 + [60]) = $7
	CALL $12(($3 + [24]), $3)
	$13 = *($3 + [16])
	if ( ($13 <= [513]) ){ goto $label$2 }
	$16 = CALL malloc($13)
	goto $label$1 
	
.LABEL $label$2
	$16 = ($17 - (($13 + [15]) & [-16]))
	*([0] + [4]) = $16
	
.LABEL $label$1
	*($3 + [4]) = $16
	*($3) = $16
	*($3 + [8]) = ($16 + $13)
	*($3 + [16]) = $3
	*($3 + [28]) = $14
	*($3 + [32]) = $8
	*($3 + [36]) = $9
	*($3 + [40]) = $10
	*($3 + [44]) = $11
	*($3 + [48]) = $12
	*($3 + [24]) = $1
	*($3 + [52]) = $5
	*($3 + [56]) = $6
	*($3 + [60]) = $7
	CALL $13(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [144]), $2, $16, $13)
	if ( ($13 <= [513]) ){ goto $label$3 }
	CALL free($16)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [64])
}

int_32 .FUNC $11 (int_32 $0)
{
	if ( ((*($0 + [128]) & [1]) == 0) ){ goto $label$1 }
	CALL $45(*(($0 + [136])))
	
.LABEL $label$1
	if ( ((*($0 + [80]) & [1]) == 0) ){ goto $label$2 }
	CALL $45(*(($0 + [88])))
	
.LABEL $label$2
	if ( ((*($0 + [68]) & [1]) == 0) ){ goto $label$3 }
	CALL $45(*(($0 + [76])))
	
.LABEL $label$3
	if ( ((*($0 + [56]) & [1]) == 0) ){ goto $label$4 }
	CALL $45(*(($0 + [64])))
	
.LABEL $label$4
	if ( ((*($0 + [44]) & [1]) == 0) ){ goto $label$5 }
	CALL $45(*(($0 + [52])))
	
.LABEL $label$5
	if ( ((*($0 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $45(*(($0 + [40])))
	
.LABEL $label$6
	return $0
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [24])
	$4 = *($2)
	$2 = *($0 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $4)
	
.LABEL $label$2
	$4 = *($2)
	$2 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($3) = ($2 + $4)
	
.LABEL $label$4
	$4 = *($2)
	$2 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$6 }
	*($3) = ($2 + $4)
	
.LABEL $label$6
	$4 = *($2)
	$2 = *($0 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$7:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$8 }
	*($3) = ($2 + $4)
	
.LABEL $label$8
	$4 = *($2)
	$2 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$9:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$9 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$10 }
	*($3) = ($2 + $4)
	
.LABEL $label$10
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [24])
	$4 = *($0)
	$0 = *($0 + [36])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$1 = *($1)
	$4 = *($1)
	
.LOOP $label$11:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$11 }
	*($1) = $4
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$12 }
	*($1) = ($0 + $4)
	
.LABEL $label$12
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), ($3 + [16]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $14(*($1), *($0 + [8]))
	CALL $14(*($1), *($0 + [12]))
	CALL $14(*($1), *($0 + [16]))
	CALL $14(*($1), *($0 + [20]))
	CALL $14(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), ($3 + [16]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $14(*($1), *($0 + [36]))
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	*((($5 + [104]) + [20])) = *(($1 + [28]))
	*(($2 = (($5 + [104]) + [16]))) = *(($1 + [24]))
	*((($5 + [104]) + [12])) = *(($1 + [20]))
	*(($3 = (($5 + [104]) + [8]))) = *(($1 + [16]))
	*($5 + [104]) = *($1 + [8])
	*($5 + [108]) = *(($1 + [12]))
	$4 = *($1)
	CALL $51(($5 + [88]), ($1 + [32]))
	CALL $51(($5 + [72]), ($1 + [44]))
	CALL $51(($5 + [56]), ($1 + [56]))
	CALL $51(($5 + [40]), ($1 + [68]))
	CALL $51(($5 + [24]), ($1 + [80]))
	*(($5 + [16])) = *($2)
	*(($5 + [8])) = *($3)
	*($5) = *($5 + [104])
	CALL $37($0, $4, $5, ($5 + [88]), ($5 + [72]), ($5 + [56]), ($5 + [40]), ($5 + [24]))
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$1 }
	CALL $45(*($5 + [32]))
	
.LABEL $label$1
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$2 }
	CALL $45(*($5 + [48]))
	
.LABEL $label$2
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$3 }
	CALL $45(*($5 + [64]))
	
.LABEL $label$3
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$4 }
	CALL $45(*($5 + [80]))
	
.LABEL $label$4
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$5 }
	CALL $45(*($5 + [96]))
	
.LABEL $label$5
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $37 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [128])
	*([0] + [4]) = $11
	$0 = *($0 + [4])
	$9 = *($0 + [4])
	$8 = (*(*($0)) + int_32($9 >> [1]))
	$0 = *($0)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($8) + $0))
	
.LABEL $label$1
	*(($9 = (($11 + [104]) + [16]))) = *(($2 + [16]))
	*(($10 = (($11 + [104]) + [8]))) = *(($2 + [8]))
	*($11 + [104]) = *($2)
	CALL $51(($11 + [88]), $3)
	CALL $51(($11 + [72]), $4)
	CALL $51(($11 + [56]), $5)
	CALL $51(($11 + [40]), $6)
	CALL $51(($11 + [24]), $7)
	*(($11 + [16])) = *($9)
	*(($11 + [8])) = *($10)
	*($11) = *($11 + [104])
	CALL void $8((int_32 $1), (int_64 $11), (int_32 ($11 + [88])), (int_32 ($11 + [72])), (int_32 ($11 + [56])), (int_32 ($11 + [40])), (int_32 ($11 + [24])), (int_32 $0))
	if ( ((*($11 + [24]) & [1]) == 0) ){ goto $label$2 }
	CALL $45(*($11 + [32]))
	
.LABEL $label$2
	if ( ((*($11 + [40]) & [1]) == 0) ){ goto $label$3 }
	CALL $45(*($11 + [48]))
	
.LABEL $label$3
	if ( ((*($11 + [56]) & [1]) == 0) ){ goto $label$4 }
	CALL $45(*($11 + [64]))
	
.LABEL $label$4
	if ( ((*($11 + [72]) & [1]) == 0) ){ goto $label$5 }
	CALL $45(*($11 + [80]))
	
.LABEL $label$5
	if ( ((*($11 + [88]) & [1]) == 0) ){ goto $label$6 }
	CALL $45(*($11 + [96]))
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [128])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$9 = (*([0] + [4]) - [128])
	$11 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$10 = *($1)
	$1 = [0]
	$7 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $3)
	
.LABEL $label$1
	*(($4 = (($11 + [24]) + [24]))) = (int_64)0
	*(($11 + [40])) = (int_64)1398362884
	*($11 + [24]) = (int_64)0
	*($11 + [32]) = (int_64)0
	CALL eosio_assert([1], [608])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [672])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [576])
	CALL memcpy(($11 + [24]), $7, [8])
	$9 = ($3 & [-8])
	CALL eosio_assert(((int_32)$9 != (int_32)[8]), [576])
	$1 = (($11 + [24]) + [8])
	CALL memcpy($1, ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$9 != (int_32)[16]), [576])
	CALL memcpy((($11 + [24]) + [16]), ($7 + [16]), [8])
	CALL eosio_assert(((int_32)$9 != (int_32)[24]), [576])
	CALL memcpy($4, ($7 + [24]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($7)
	
.LABEL $label$8
	*(($9 = (($11 + [56]) + [16]))) = *(($1 + [16]))
	*(($7 = (($11 + [56]) + [8]))) = *(($1 + [8]))
	$8 = *($11 + [24])
	*($11 + [56]) = *($1)
	*((($11 + [80]) + [16])) = *($9)
	*((($11 + [80]) + [8])) = *($7)
	*($11 + [80]) = *($11 + [56])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$10 = *((*($1) + $10))
	
.LABEL $label$9
	$5 = *((($11 + [80]) + [16]))
	*((($11 + [104]) + [16])) = $5
	$6 = *((($11 + [80]) + [8]))
	*((($11 + [104]) + [8])) = $6
	*(($11 + [16])) = $5
	*(($11 + [8])) = $6
	$5 = *($11 + [80])
	*($11 + [104]) = $5
	*($11) = $5
	CALL void $1((int_32 $8), (int_64 $11), (int_32 $10))
	*([0] + [4]) = ($11 + [128])
	return [1]
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $18(*($1), ($0 + [32]))
	CALL $18(*($1), ($0 + [44]))
	CALL $18(*($1), ($0 + [56]))
	CALL $18(*($1), ($0 + [68]))
	CALL $18(*($1), ($0 + [80]))
}

void .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [608])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [672])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $38($6, $0)
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*(($5 = $4) + [108]) = $0
	*($5 + [96]) = *($1)
	*($5 + [100]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)0
	*(($5 + [16])) = (int_64)1398362884
	*($5) = (int_64)0
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [608])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [672])
	*(($5 + [40])) = (int_64)0
	*(($5 + [48])) = (int_64)0
	*(($5 + [64])) = (int_64)0
	*(($5 + [72])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*(($5 + [76])) = [0]
	*($5 + [80]) = [0]
	*(($5 + [84])) = [0]
	*(($5 + [88])) = [0]
	*($5 + [116]) = $0
	*($5 + [112]) = $0
	*($5 + [120]) = ($0 + $2)
	*($5 + [128]) = ($5 + [112])
	*($5 + [136]) = $5
	CALL $35(($5 + [136]), ($5 + [128]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [116]) = ($5 + [96])
	*($5 + [112]) = ($5 + [108])
	CALL $36(($5 + [112]), $5)
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$10 }
	CALL $45(*(($5 + [88])))
	
.LABEL $label$10
	if ( ((*($5 + [68]) & [1]) == 0) ){ goto $label$11 }
	CALL $45(*(($5 + [76])))
	
.LABEL $label$11
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$12 }
	CALL $45(*(($5 + [64])))
	
.LABEL $label$12
	if ( ((*($5 + [44]) & [1]) == 0) ){ goto $label$13 }
	CALL $45(*(($5 + [52])))
	
.LABEL $label$13
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$14 }
	CALL $45(*(($5 + [40])))
	
.LABEL $label$14
	*([0] + [4]) = ($5 + [144])
	return [1]
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [1088])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1136])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = ((int_64)*(($1 + [24])) + (int_64)*(($1 + [16])))
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	$4 = *($8)
	if ( ((int_64)((int_64)*(($4 + [24])) + (int_64)*(($4 + [16]))) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1200])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $11($4)
	CALL $45($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $11($4)
	CALL $45($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [144]))
}

void .FUNC _ZN5eosio12eostokeninfo5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1264]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $32(($9 + [32]))
	CALL _ZN5eosio12eostokeninfo2onERKNS_8currency8transferEy($0, ($9 + [32]), $1)
	if ( ((*($9 + [64]) & [1]) == 0) ){ goto $label$7 }
	CALL $45(*(($9 + [72])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4997502827547852800) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-4417468284497035264) ){ goto $label$7 }
	*($9 + [28]) = [0]
	*($9 + [24]) = [1]
	*($9) = *($9 + [24])
	CALL $33($0, $9)
	goto $label$7 
	
.LABEL $label$9
	*($9 + [20]) = [0]
	*($9 + [16]) = [2]
	*($9 + [8 align=4]) = *($9 + [16])
	CALL $34($0, ($9 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [80])
}

void .FUNC $50 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $18($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [576])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [576])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [576])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $54 ()
{
	(unreachable)
}