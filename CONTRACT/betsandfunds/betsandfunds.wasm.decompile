(data (i32.const 16888) "\04EOS\00\00\00\00\04EOS\00\00\00\00\00\a6\824\03\ea0U\e8\03\00\00\00\00\00\00\01\00\00\00\00\00\00\00\04SAND\00\00\00\04SAND\00\00\000\15\a4\b9^\96\a6\c1\a0\86\01\00\00\00\00\00\02\00\00\00\00\00\00\00\08EBTC\00\00\00\08EBTC\00\00\00\80\a7\824+W\b3;\10\'\00\00\00\00\00\00\03\00\00\00\00\00\00\00\08EETH\00\00\00\08EETH\00\00\00\80\a7\824+W\b3;\a0\86\01\00\00\00\00\00\04\00\00\00\00\00\00\00\08EUSD\00\00\00\08EUSD\00\00\00\80\a7\824+W\b3;\80\96\98\00\00\00\00\00\05\00\00\00\00\00\00\00")
(data (i32.const 17088) "invalid parameters!\00")
(data (i32.const 17108) "game account is invalid\00")
(data (i32.const 17132) "lotteries amount not enough\00")
(data (i32.const 17161) "-\00")
(data (i32.const 17163) "https://betsand.com\00")
(data (i32.const 17183) "transfer\00")
(data (i32.const 17192) "betsandbacca\00")
(data (i32.const 17205) "invalid gameaccount!\00")
(data (i32.const 17226) "invalid symbol for amount and payout!\00")
(data (i32.const 17264) "Betsand No-Comission Baccarat - game:\00")
(data (i32.const 17302) "Transfer bonus\00")
(data (i32.const 17317) "from account is invalid\00")
(data (i32.const 17341) "invalid memo\00")
(data (i32.const 17354) "bet_amount.amount must > 0\00")
(data (i32.const 17381) " -\00")
(data (i32.const 17384) "betsandrou11\00")
(data (i32.const 17397) "house_edge must < 100000!\00")
(data (i32.const 17423) "player account does not exist!\00")
(data (i32.const 17454) "sandgrptoken\00")
(data (i32.const 17467) "round exist!\00")
(data (i32.const 17480) "playerdivid\00")
(data (i32.const 17492) "betsandfndop\00")
(data (i32.const 17505) "betsandaccta\00")
(data (i32.const 17518) "system restarted, so you can not withdraw!\00")
(data (i32.const 17561) "dividend withdraw -\00")
(data (i32.const 17581) "unable to find key\00")
(data (i32.const 17600) "offerbet is null\00")
(data (i32.const 17617) "|\00")
(data (i32.const 17619) "need player account\00")
(data (i32.const 17639) "need referrer account\00")
(data (i32.const 17661) "need bet id\00")
(data (i32.const 17673) "bet id isn\'t decimal num\00")
(data (i32.const 17698) "need house edge\00")
(data (i32.const 17714) "house edge isn\'t decimal num\00")
(data (i32.const 17743) "need bet amount\00")
(data (i32.const 17759) "bet amount isn\'t decimal num\00")
(data (i32.const 17788) "need reveal time\00")
(data (i32.const 17805) "reveal time isn\'t decimal num\00")
(data (i32.const 17835) "need payout amount\00")
(data (i32.const 17854) "winning amount isn\'t decimal num\00")
(data (i32.const 17887) "need lottery amount\00")
(data (i32.const 17907) "lottery isn\'t decimal num\00")
(data (i32.const 17933) "eosio.token\00")
(data (i32.const 17945) "bitpietokens\00")
(data (i32.const 17958) "invalid token transfer\00")
(data (i32.const 17981) "write\00")
(data (i32.const 17987) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18036) "invalid symbol name\00")
(data (i32.const 18056) "divide by zero\00")
(data (i32.const 18071) "signed division overflow\00")
(data (i32.const 18096) "multiplication overflow\00")
(data (i32.const 18120) "multiplication underflow\00")
(data (i32.const 18145) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 18204) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18255) "error reading iterator\00")
(data (i32.const 18278) "read\00")
(data (i32.const 18283) "attempt to add asset with different symbol\00")
(data (i32.const 18326) "addition underflow\00")
(data (i32.const 18345) "addition overflow\00")
(data (i32.const 18363) "referral!bet_id:\00")
(data (i32.const 18380) ",player: \00")
(data (i32.const 18390) ",game:\00")
(data (i32.const 18400) "\e4G\00\00")
(data (i32.const 18404) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 18437) " id:\00")
(data (i32.const 18442) " - token award - \00")
(data (i32.const 18460) " - payout - \00")
(data (i32.const 18473) "attempt to subtract asset with different symbol\00")
(data (i32.const 18521) "subtraction underflow\00")
(data (i32.const 18543) "subtraction overflow\00")
(data (i32.const 18564) "cannot pass end iterator to modify\00")
(data (i32.const 18599) "object passed to modify is not in multi_index\00")
(data (i32.const 18645) "cannot modify objects in table of another contract\00")
(data (i32.const 18696) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18755) "cannot create objects in table of another contract\00")
(data (i32.const 18806) "cannot increment end iterator\00")
(data (i32.const 18836) "singleton does not exist\00")
(data (i32.const 18861) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 18915) "cannot decrement iterator at beginning of table\00")
(data (i32.const 18963) "cannot pass end iterator to erase\00")
(data (i32.const 18997) "object passed to erase is not in multi_index\00")
(data (i32.const 19042) "cannot erase objects in table of another contract\00")
(data (i32.const 19092) "attempt to remove object that was not in multi_index\00")
(data (i32.const 19145) "next primary key in table is at autoincrement limit\00")
(data (i32.const 19197) "get\00")
(data (i32.const 19201) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$3 (param i32 i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$5 (param i32 i32 i32)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multi3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "db_next_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$14 (param i64) (result i32)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "send_deferred" (func $fimport$16 (param i32 i64 i32 i32 i32)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$18 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$19 (param i32 i64 i32)))
(import "env" "require_recipient" (func $fimport$20 (param i64)))
(import "env" "eosio_exit" (func $fimport$21 (param i32)))
(import "env" "action_data_size" (func $fimport$22 (result i32)))
(import "env" "read_action_data" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$25 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$27 (param i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$28 (param i32)))
(import "env" "db_idx64_store" (func $fimport$29 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$30 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$31 (param i32)))
(import "env" "abort" (func $fimport$32))
(import "env" "__unordtf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$39 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$40 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$41 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$42 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$43 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$44 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$45 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$46 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$47 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$48 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$49 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$50 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$51 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $98))
(export "_Znwj" (func $157))
(export "_ZdlPv" (func $159))
(export "_Znaj" (func $158))
(export "_ZdaPv" (func $160))
(table $0 15 15 anyfunc)
(elem (i32.const 1) $28 $74 $86 $83 $75 $93 $4 $91 $12 $35 $95 $92 $82 $2)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19287))
(global $global$2 i32 (i32.const 19287))


int_32 .FUNC $174 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $179([8208])
	$3 = *([0] + [8216])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8220])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8224]
	*([0] + [8216]) = [8224]
	$4 = *([0] + [8220])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $184([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8216])
	*([0] + [8216]) = $3
	*([0] + [8220]) = [0]
	
.LABEL $label$2
	*([0] + [8220]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $180([8208])
	return [0]
	
.LABEL $label$1
	CALL $180([8208])
	return [-1]
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [80])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $176 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $177 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $170 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $177(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $171 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $172 (int_32 $0)
{
	return (($0 + [-48]) <= [10])
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

int_32 .FUNC $178 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$5 = ($global$0 - [480])
	$global$0 = $5
	CALL require_auth(*($1))
	$6 = [0]
	$7 = [0]
	$8 = *($2)
	if ( ((int_64)*($1) == (int_64)$8) ){ goto $label$1 }
	$7 = [0]
	if ( ((int_64)*($3) < (int_64)1) ){ goto $label$1 }
	$7 = ((int_64)$8 != (int_64)*($0))
	
.LABEL $label$1
	CALL eosio_assert($7, [17088])
	*((($5 + [40]) + [32])) = [0]
	*($5 + [56]) = (int_64)-1
	*($5 + [64]) = (int_64)0
	$8 = *($0)
	*($5 + [40]) = $8
	$9 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($5 + [48]) = $9)
	$1 = CALL db_find_i64($8, $9, (int_64)7035927889518264320, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $5(($5 + [40]), $1)
	CALL eosio_assert(((int_32)*($6 + [288]) == (int_32)($5 + [40])), [18204])
	
.LABEL $label$2
	$1 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($1, [17108])
	$8 = *($6 + [64])
	$7 = ($6 + [88])
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($6 + [72]))), [18473])
	$8 = (int_64)
	CALL eosio_assert(((int_64)$8($8 - *($6 + [80]))) > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [18543])
	CALL eosio_assert(((int_64)$8 > (int_64)*($3)), [17132])
	CALL eosio_assert($1, [18564])
	CALL eosio_assert(((int_32)*($6 + [288]) == (int_32)($5 + [40])), [18599])
	CALL eosio_assert(((int_64)*($5 + [40]) == (int_64)CALL $fimport$8()), [18645])
	$8 = *($6)
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*($7)), [18283])
	$9 = ((int_64)*($6 + [80]) + (int_64)*($3))
	*($6 + [80]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)*($6 + [80]) < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)$8 == (int_64)*($6)), [18696])
	*($5 + [16]) = (($5 + [80]) + [288])
	*($5 + [12]) = ($5 + [80])
	*($5 + [8]) = ($5 + [80])
	*($5 + [464]) = ($5 + [8])
	*($5 + [380]) = ($6 + [8])
	*($5 + [376]) = $6
	*($5 + [384]) = ($6 + [16])
	*($5 + [388]) = ($6 + [32])
	*($5 + [392]) = ($6 + [48])
	*($5 + [396]) = ($6 + [64])
	*($5 + [400]) = ($6 + [80])
	*($5 + [404]) = ($6 + [96])
	*($5 + [408]) = ($6 + [112])
	*($5 + [412]) = ($6 + [120])
	*($5 + [416]) = ($6 + [136])
	*($5 + [420]) = ($6 + [152])
	*($5 + [424]) = ($6 + [168])
	*($5 + [428]) = ($6 + [184])
	*($5 + [432]) = ($6 + [200])
	*($5 + [436]) = ($6 + [216])
	*($5 + [440]) = ($6 + [232])
	*($5 + [444]) = ($6 + [248])
	*($5 + [448]) = ($6 + [264])
	*($5 + [456]) = ($6 + [280])
	*($5 + [452]) = ($6 + [272])
	CALL $6(($5 + [376]), ($5 + [464]))
	CALL db_update_i64(*($6 + [292]), (int_64)0, ($5 + [80]), [288])
	$6 = (($5 + [40]) + [16])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*((($5 + [24]) + [8])) = [0]
	*($5 + [24]) = (int_64)0
	$6 = CALL $178([17160])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$11 }
	*($5 + [24]) = ($6 << [1])
	$1 = (($5 + [24]) | [1])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$7 = (($6 + [16]) & [-16])
	$1 = CALL _Znwj($7)
	*($5 + [24]) = ($7 | [1])
	*($5 + [32]) = $1
	*($5 + [28]) = $6
	
.LABEL $label$10
	CALL memcpy($1, [17160], $6)
	
.LABEL $label$9
	*(($1 + $6)) = [0]
	$6 = *($4)
	$1 = ($6 & [1])
	CALL $168(($5 + [24]), ( *($4 + [8]) ? ($4 + [1]) : $1 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $1 ))
	CALL $167(($5 + [24]), [17161])
	*(($5 + [88])) = [0]
	*($5 + [80]) = (int_64)0
	$6 = CALL $178([17163])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$14 }
	*($5 + [80]) = ($6 << [1])
	$1 = (($5 + [80]) | [1])
	$4 = $1
	if ( $6 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$1 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($1)
	*($5 + [80]) = ($1 | [1])
	*($5 + [88]) = $4
	*($5 + [84]) = $6
	$1 = (($5 + [80]) | [1])
	
.LABEL $label$13
	CALL memcpy($4, [17163], $6)
	
.LABEL $label$12
	*(($4 + $6)) = [0]
	$6 = *($5 + [80])
	$4 = ($6 & [1])
	CALL $168(($5 + [24]), ( *($5 + [88]) ? $1 : $4 ), ( *($5 + [84]) ? uint_32($6 >> [1]) : $4 ))
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [88])))
	
.LABEL $label$15
	$9 = *($0)
	$8 = (int_64)6
	
.LOOP $label$16:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$16 }
	*($5 + [16]) = (int_64)3617214756542218240
	*($5 + [8]) = $9
	$8 = *(($3 + [8]))
	$6 = *([0] + [8196])
	if ( ($6 == 0) ){ goto $label$17 }
	$4 = [8196]
	$9 = *($6 + [16])
	if ( ((uint_64)$8 >= (uint_64)$9) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$17
	$6 = [8196]
	$4 = [8196]
	$10 = [3]
	goto $label$4 
	
.LABEL $label$8
	CALL $161(($5 + [24]))
	
.LABEL $label$7
	CALL $161(($5 + [80]))
	
.LABEL $label$6
	$10 = [37]
	goto $label$4 
	
.LABEL $label$5
	$10 = [2]
	
.LABEL $label$4
	
.LOOP $label$18:
	goto $label$81 
	
.LABEL $label$85
	$4 = $6
	$6 = $1
	$9 = *($6 + [16])
	if ( ((uint_64)$8 >= (uint_64)$9) ){ goto $label$46 }
	$10 = [37]
	goto $label$18 
	
.LABEL $label$84
	$1 = *($6)
	if ( $1 ){ goto $label$42 }
	goto $label$43 
	
.LABEL $label$83
	if ( ((uint_64)$9 >= (uint_64)$8) ){ goto $label$41 }
	$10 = [36]
	goto $label$18 
	
.LABEL $label$82
	$4 = ($6 + [4])
	$1 = *($6 + [4])
	if ( ($1 == 0) ){ goto $label$44 }
	$10 = [0]
	goto $label$18 
	
.LABEL $label$81
	$6 = $4
	goto $label$45 
	
.LABEL $label$80
	$1 = *($4)
	if ( $1 ){ goto $label$40 }
	$10 = [33]
	goto $label$18 
	
.LABEL $label$79
	*(($1 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($1) = (int_64)0
	*($1 + [8]) = $6
	*(($1 + [48])) = (int_64)0
	*(($1 + [40])) = (int_64)0
	*(($1 + [32])) = (int_64)0
	*($4) = $1
	*($1 + [16]) = $8
	$6 = $1
	$7 = *(*([0] + [8192]))
	if ( ($7 == 0) ){ goto $label$19 }
	$10 = [34]
	goto $label$18 
	
.LABEL $label$78
	*([0] + [8192]) = $7
	$6 = *($4)
	$10 = [35]
	goto $label$18 
	
.LABEL $label$77
	CALL $7(*([0] + [8196]), $6)
	*([0] + [8200]) = (*([0] + [8200]) + [1])
	goto $label$39 
	
.LABEL $label$76
	$4 = $6
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$38 }
	$10 = [4]
	goto $label$18 
	
.LABEL $label$75
	$11 = *(($1 + [32]))
	$8 = (int_64)0
	$12 = (int_64)59
	$6 = [17183]
	$13 = (int_64)0
	$10 = [5]
	goto $label$18 
	
.LABEL $label$74
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$36 }
	$10 = [29]
	goto $label$18 
	
.LABEL $label$73
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$10 = [32]
	goto $label$18 
	
.LABEL $label$72
	$4 = ($4 + [-91])
	goto $label$20 
	
.LABEL $label$71
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$70
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	$10 = [31]
	goto $label$18 
	
.LABEL $label$69
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	$10 = [28]
	goto $label$18 
	
.LABEL $label$68
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	$10 = [7]
	goto $label$18 
	
.LABEL $label$67
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$13 = ((int_64)$9 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$37 }
	$10 = [8]
	goto $label$18 
	
.LABEL $label$66
	*(($5 + [104])) = *(($3 + [8]))
	*($5 + [80]) = *($0)
	*($5 + [88]) = *($2)
	*($5 + [96]) = *($3)
	CALL $162(($5 + [112]), ($5 + [24]))
	$6 = CALL $8(($5 + [376]), ($5 + [8]), $11, $13, ($5 + [80]))
	CALL $9(($5 + [464]), $6)
	$4 = *($5 + [464])
	CALL send_inline($4, (*($5 + [468]) - $4))
	$4 = *($5 + [464])
	if ( ($4 == 0) ){ goto $label$33 }
	$10 = [9]
	goto $label$18 
	
.LABEL $label$65
	*($5 + [468]) = $4
	CALL _ZdlPv($4)
	$10 = [10]
	goto $label$18 
	
.LABEL $label$64
	$4 = *($6 + [28])
	if ( ($4 == 0) ){ goto $label$32 }
	$10 = [11]
	goto $label$18 
	
.LABEL $label$63
	*(($6 + [32])) = $4
	CALL _ZdlPv($4)
	$10 = [12]
	goto $label$18 
	
.LABEL $label$62
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$31 }
	$10 = [13]
	goto $label$18 
	
.LABEL $label$61
	*(($6 + [20])) = $4
	CALL _ZdlPv($4)
	$10 = [14]
	goto $label$18 
	
.LABEL $label$60
	if ( (*($5 + [112]) & [1]) ){ goto $label$30 }
	$10 = [27]
	goto $label$18 
	
.LABEL $label$59
	if ( (*($5 + [24]) & [1]) ){ goto $label$29 }
	$10 = [26]
	goto $label$18 
	
.LABEL $label$58
	$1 = *($5 + [64])
	if ( $1 ){ goto $label$27 }
	$10 = [25]
	goto $label$18 
	
.LABEL $label$57
	$global$0 = ($5 + [480])
	return 
	
.LABEL $label$56
	CALL _ZdlPv(*(($5 + [120])))
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$28 }
	$10 = [16]
	goto $label$18 
	
.LABEL $label$55
	CALL _ZdlPv(*($5 + [32]))
	$1 = *($5 + [64])
	if ( ($1 == 0) ){ goto $label$26 }
	$10 = [17]
	goto $label$18 
	
.LABEL $label$54
	$3 = ($5 + [68])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$25 }
	$10 = [18]
	goto $label$18 
	
.LABEL $label$53
	$10 = [19]
	goto $label$18 
	
.LABEL $label$52
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$23 }
	$10 = [20]
	goto $label$18 
	
.LABEL $label$51
	CALL _ZdlPv($4)
	$10 = [21]
	goto $label$18 
	
.LABEL $label$50
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$24 }
	$10 = [22]
	goto $label$18 
	
.LABEL $label$49
	$6 = *(($5 + [64]))
	goto $label$22 
	
.LABEL $label$48
	$6 = $1
	$10 = [23]
	goto $label$18 
	
.LABEL $label$47
	*($3) = $1
	CALL _ZdlPv($6)
	$global$0 = ($5 + [480])
	return 
	
.LABEL $label$46
	$10 = [2]
	goto $label$18 
	
.LABEL $label$45
	$10 = [1]
	goto $label$18 
	
.LABEL $label$44
	$10 = [3]
	goto $label$18 
	
.LABEL $label$43
	$10 = [38]
	goto $label$18 
	
.LABEL $label$42
	$10 = [1]
	goto $label$18 
	
.LABEL $label$41
	$10 = [3]
	goto $label$18 
	
.LABEL $label$40
	$10 = [4]
	goto $label$18 
	
.LABEL $label$39
	$10 = [4]
	goto $label$18 
	
.LABEL $label$38
	$10 = [33]
	goto $label$18 
	
.LABEL $label$37
	$10 = [5]
	goto $label$18 
	
.LABEL $label$36
	$10 = [6]
	goto $label$18 
	
.LABEL $label$35
	$10 = [28]
	goto $label$18 
	
.LABEL $label$34
	$10 = [7]
	goto $label$18 
	
.LABEL $label$33
	$10 = [10]
	goto $label$18 
	
.LABEL $label$32
	$10 = [12]
	goto $label$18 
	
.LABEL $label$31
	$10 = [14]
	goto $label$18 
	
.LABEL $label$30
	$10 = [15]
	goto $label$18 
	
.LABEL $label$29
	$10 = [16]
	goto $label$18 
	
.LABEL $label$28
	$10 = [26]
	goto $label$18 
	
.LABEL $label$27
	$10 = [17]
	goto $label$18 
	
.LABEL $label$26
	$10 = [25]
	goto $label$18 
	
.LABEL $label$25
	$10 = [24]
	goto $label$18 
	
.LABEL $label$24
	$10 = [19]
	goto $label$18 
	
.LABEL $label$23
	$10 = [21]
	goto $label$18 
	
.LABEL $label$22
	$10 = [23]
	goto $label$18 
	
.LABEL $label$21
	$10 = [30]
	goto $label$18 
	
.LABEL $label$20
	$10 = [31]
	goto $label$18 
	
.LABEL $label$19
	$10 = [35]
	goto $label$18 
	(unreachable)
	(unreachable)
	$10
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [128])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18255])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $181($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([304])
	CALL $30($5)
	*($5 + [288]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [80])
	*($3 + [68]) = ($5 + [96])
	*($3 + [72]) = ($5 + [112])
	*($3 + [76]) = ($5 + [120])
	*($3 + [80]) = ($5 + [136])
	*($3 + [84]) = ($5 + [152])
	*($3 + [88]) = ($5 + [168])
	*($3 + [92]) = ($5 + [184])
	*($3 + [96]) = ($5 + [200])
	*($3 + [100]) = ($5 + [216])
	*($3 + [104]) = ($5 + [232])
	*($3 + [108]) = ($5 + [248])
	*($3 + [112]) = ($5 + [264])
	*($3 + [120]) = ($5 + [280])
	*($3 + [116]) = ($5 + [272])
	CALL $123(($3 + [40]), ($3 + [32]))
	*($5 + [292]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $32(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [128])
	return $5
}

int_32 .FUNC $127 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [16]) = (int_64)0
	*(($1 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [72]))) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$2 = $3
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$20 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$4 = [0]
	
.LABEL $label$16
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [88]))) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$2 = $3
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$25 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$4 = [0]
	
.LABEL $label$21
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [104]))) = (int_64)1398362884
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$2 = $3
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$30 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$4 = [0]
	
.LABEL $label$26
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [128]))) = (int_64)1398362884
	*($0 + [120]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	$2 = $3
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$32 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$35 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$4 = [0]
	
.LABEL $label$31
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [144]))) = (int_64)1398362884
	*($0 + [136]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$39 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$39
	$2 = $3
	
.LOOP $label$40:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$37 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$40 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$4 = [0]
	
.LABEL $label$36
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [160]))) = (int_64)1398362884
	*($0 + [152]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$44 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$44
	$2 = $3
	
.LOOP $label$45:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$45 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$4 = [0]
	
.LABEL $label$41
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [176]))) = (int_64)1398362884
	*($0 + [168]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$49 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$49
	$2 = $3
	
.LOOP $label$50:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$47 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$50 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$4 = [0]
	
.LABEL $label$46
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [192]))) = (int_64)1398362884
	*($0 + [184]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$51 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$55 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$53 }
	goto $label$54 
	
.LABEL $label$55
	$2 = $3
	
.LOOP $label$56:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$52 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$56 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$53 }
	
.LABEL $label$54
	CALL eosio_assert($6, [18036])
	return $0
	
.LABEL $label$52
	CALL eosio_assert([0], [18036])
	return $0
	
.LABEL $label$51
	CALL eosio_assert([0], [18036])
	return $0
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $3($0, *($1))
	CALL $3($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL _Znwj([16])
	*($0 + [8]) = $3
	*($0) = (int_64)55834574865
	CALL memset($3, [46], [13])
	*($3 + [13]) = [0]
	$5 = *($1)
	$1 = (CASTING uint_32)(uint_64 $5)
	$4 = *([0] + [18400])
	*($3 + [12]) = *(($4 + ($1 & [15])))
	*($3 + [11]) = *(($4 + (uint_32($1 >> [4]) & [31])))
	*($3 + [10]) = *(($4 + (uint_32($1 >> [9]) & [31])))
	*($3 + [9]) = *(($4 + (uint_32($1 >> [14]) & [31])))
	*($3 + [8]) = *(($4 + (uint_32($1 >> [19]) & [31])))
	*($3 + [7]) = *(($4 + (uint_32($1 >> [24]) & [31])))
	*($3 + [6]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)29)) & [31])))
	*($3 + [5]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)34)) & [31])))
	*($3 + [4]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)39)) & [31])))
	*($3 + [3]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)44)) & [31])))
	*($3 + [2]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)49)) & [31])))
	*($3 + [1]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)54)) & [31])))
	*(*($0 + [8])) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)59))))
	$4 = ($3 & [1])
	$3 = *($0)
	$3 = ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 )
	$1 = ( *($0 + [8]) ? ($0 + [1]) : $4 )
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($1 + $3)
	$6 = ($3 + [-1])
	$3 = $6
	if ( ((int_32)*(($4 + [-1])) == (int_32)[46]) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	CALL $163($2, $0, [0], ($6 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$4 }
	*($0) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$3
	CALL $166($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	$3 = ($global$0 - [320])
	$global$0 = $3
	$4 = *($2 + [8])
	*(($3 + [312])) = [0]
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	*($3 + [288]) = $4)
	*($3 + [296]) = (int_64)-1
	*($3 + [304]) = (int_64)0
	$5 = *($0)
	*($3 + [280]) = $5
	$2 = CALL db_find_i64($5, $4, (int_64)4406680039000797184, *($1))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $40(($3 + [280]), $2)
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)($3 + [280])), [18204])
	if ( *($2 + [33]) ){ goto $label$1 }
	CALL eosio_assert([1], [18564])
	CALL eosio_assert(((int_32)*(($2 + [48])) == (int_32)($3 + [280])), [18599])
	CALL eosio_assert(((int_64)*($3 + [280]) == (int_64)CALL $fimport$8()), [18645])
	*(($6 = ($2 + [33]))) = [1]
	$5 = *($2)
	CALL eosio_assert([1], [18696])
	*($3 + [248]) = (($3 + [16]) + [42])
	*($3 + [244]) = ($3 + [16])
	*($3 + [240]) = ($3 + [16])
	*($3 + [200]) = ($3 + [240])
	*($3 + [116]) = ($2 + [8])
	*($3 + [112]) = $2
	*($3 + [120]) = ($2 + [16])
	*($3 + [124]) = ($2 + [32])
	*($3 + [128]) = $6
	*($3 + [132]) = ($2 + [40])
	CALL $45(($3 + [112]), ($3 + [200]))
	CALL db_update_i64(*($2 + [52]), (int_64)0, ($3 + [16]), [42])
	$2 = (($3 + [280]) + [16])
	if ( (uint_64)($5 <= *($2)) ){ goto $label$2 }
	*($2) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*((($3 + [240]) + [32])) = [0]
	*($3 + [248]) = $4
	*($3 + [256]) = (int_64)-1
	*($3 + [264]) = (int_64)0
	*($3 + [276]) = [0]
	$5 = *($0)
	*($3 + [240]) = $5
	*((($3 + [200]) + [32])) = [0]
	*($3 + [208]) = $4
	*($3 + [200]) = $5
	*($3 + [216]) = (int_64)-1
	*($3 + [224]) = (int_64)0
	*($3 + [236]) = [0]
	*($3 + [192]) = ($3 + [200])
	CALL $68(($3 + [16]), ($3 + [192]), $1)
	$2 = *($3 + [20])
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((int_64)*($1) != (int_64)*($2 + [16])) ){ goto $label$4 }
	$4 = *($3 + [16])
	*($3 + [184]) = $4
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ($2) == 0) ){ goto $label$3 }
	$7 = (($3 + [240]) + [24])
	$8 = ($3 + [148])
	$9 = (($3 + [240]) + [28])
	$10 = (($3 + [240]) + [8])
	$11 = ($3 + [272])
	$12 = ($3 + [124])
	$13 = ($3 + [128])
	$14 = ($3 + [132])
	$15 = ($3 + [156])
	$16 = ($3 + [164])
	
.LOOP $label$5:
	if ( ((int_64)*($2 + [16]) != (int_64)*($1)) ){ goto $label$3 }
	$4 = *($2 + [8])
	$6 = *($9)
	$17 = *($7)
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$11:
	$2 = ($6 + [-24])
	$18 = *($2)
	if ( ((int_64)*($18) == (int_64)$4) ){ goto $label$10 }
	$6 = $2
	if ( ((int_32)$17 != (int_32)$2) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($18 + [48]) == (int_32)($3 + [240])), [18204])
	goto $label$8 
	
.LABEL $label$9
	$2 = CALL db_find_i64(*($3 + [240]), *($10), (int_64)-6030912139319414784, $4)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$18 = CALL $50(($3 + [240]), $2)
	CALL eosio_assert(((int_32)*($18 + [48]) == (int_32)($3 + [240])), [18204])
	
.LABEL $label$8
	*($3 + [16]) = ($3 + [184])
	CALL eosio_assert([1], [18564])
	CALL $69(($3 + [240]), $18, ($3 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$4 = *($0)
	*($3 + [176]) = ($3 + [184])
	*($3 + [112]) = $4
	CALL eosio_assert(((int_64)*($3 + [240]) == (int_64)CALL $fimport$8()), [18755])
	*((($3 + [16]) + [8])) = ($3 + [112])
	*($3 + [20]) = ($3 + [176])
	*($3 + [16]) = ($3 + [240])
	$2 = CALL _Znwj([64])
	CALL $52($2)
	*($2 + [48]) = ($3 + [240])
	CALL $70(($3 + [16]), $2)
	*($3 + [96]) = $2
	$4 = *($2)
	*($3 + [16]) = $4
	$18 = *($2 + [52])
	*($3 + [88]) = $18
	$6 = *($9)
	if ( ((uint_32)$6 >= (uint_32)*($11)) ){ goto $label$13 }
	*($6 + [8]) = $4
	*($6 + [16]) = $18
	*($3 + [96]) = [0]
	*($6) = $2
	*($9) = ($6 + [24])
	$2 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( $2 ){ goto $label$12 }
	goto $label$6 
	
.LABEL $label$13
	CALL $54($7, ($3 + [96]), ($3 + [16]), ($3 + [88]))
	$2 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	
.LABEL $label$12
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$4 = CALL current_time()
	*($12) = [0]
	*($13) = [0]
	*($14) = (int_64)0
	*((($3 + [112]) + [28])) = (int_64)0
	*($8) = (int_64)0
	*($15) = (int_64)0
	*($16) = (int_64)0
	*($3 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	$5 = *($0)
	$4 = (int_64)6
	
.LOOP $label$14:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$14 }
	*((($3 + [96]) + [8])) = (int_64)3617214756542218240
	*($3 + [96]) = $5
	$4 = (int_64)0
	$19 = (int_64)59
	$2 = [17480]
	$20 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$20 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$6 = ($6 + [-91])
	goto $label$18 
	
.LABEL $label$20
	$5 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$16
	$2 = ($2 + [1])
	$19 = ((int_64)$19 + (int_64)4294967291)
	$20 = ((int_64)$5 | (int_64)$20)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$15 }
	*($3 + [88]) = $20
	CALL memcpy(($3 + [16]), *($3 + [188]), [72])
	CALL $71($8, ($3 + [96]), $0, ($3 + [88]), ($3 + [16]))
	CALL $21($3, $0)
	*($3 + [24]) = *(($3 + [8]))
	*($3 + [16]) = *($3)
	$4 = *($0)
	CALL $22(($3 + [96]), ($3 + [112]))
	$2 = *($3 + [96])
	CALL send_deferred(($3 + [16]), $4, $2, (*($3 + [100]) - $2), [0])
	$2 = *($3 + [96])
	if ( ($2 == 0) ){ goto $label$21 }
	*($3 + [100]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$21
	$4 = *($3 + [184])
	*($3 + [16]) = $4
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$2) != (int_32)[0]), [18963])
	CALL $72(($3 + [16]))
	CALL $73(*($3 + [192]), $2)
	*($3 + [184]) = *($3 + [16])
	CALL $23(($3 + [112]))
	$2 = *($3 + [188])
	if ( $2 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	*($3 + [188]) = [0]
	*($3 + [184]) = ($3 + [192])
	
.LABEL $label$3
	$18 = *($3 + [224])
	if ( ($18 == 0) ){ goto $label$22 }
	$17 = ($3 + [228])
	$2 = *($17)
	if ( ((int_32)$2 == (int_32)$18) ){ goto $label$24 }
	
.LOOP $label$25:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$26 }
	CALL _ZdlPv($6)
	
.LABEL $label$26
	if ( ((int_32)$18 != (int_32)$2) ){ goto $label$25 }
	$2 = *(($3 + [224]))
	goto $label$23 
	
.LABEL $label$24
	$2 = $18
	
.LABEL $label$23
	*($17) = $18
	CALL _ZdlPv($2)
	
.LABEL $label$22
	$18 = *($3 + [264])
	if ( ($18 == 0) ){ goto $label$1 }
	$17 = ($3 + [268])
	$2 = *($17)
	if ( ((int_32)$2 == (int_32)$18) ){ goto $label$28 }
	
.LOOP $label$29:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$30 }
	CALL _ZdlPv($6)
	
.LABEL $label$30
	if ( ((int_32)$18 != (int_32)$2) ){ goto $label$29 }
	$2 = *(($3 + [264]))
	goto $label$27 
	
.LABEL $label$28
	$2 = $18
	
.LABEL $label$27
	*($17) = $18
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$18 = *($3 + [304])
	if ( ($18 == 0) ){ goto $label$31 }
	$17 = ($3 + [308])
	$2 = *($17)
	if ( ((int_32)$2 == (int_32)$18) ){ goto $label$33 }
	
.LOOP $label$34:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$35 }
	CALL _ZdlPv($6)
	
.LABEL $label$35
	if ( ((int_32)$18 != (int_32)$2) ){ goto $label$34 }
	$2 = *(($3 + [304]))
	goto $label$32 
	
.LABEL $label$33
	$2 = $18
	
.LABEL $label$32
	*($17) = $18
	CALL _ZdlPv($2)
	
.LABEL $label$31
	$global$0 = ($3 + [320])
}

void .FUNC memory ()
{
	CALL $156()
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [17981])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [17981])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [17981])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_32 $26
	$6 = ($global$0 - [304])
	$global$0 = $6
	*($6 + [248]) = $4
	*($6 + [256]) = $2
	$7 = [0]
	*(($6 + [240])) = [0]
	$4 = (uint_64)$2 >> (uint_64)(int_64)8
	*($6 + [216]) = $4)
	*($6 + [224]) = (int_64)-1
	$8 = *($1)
	*($6 + [208]) = $8
	*($6 + [232]) = (int_64)0
	$9 = [0]
	$10 = CALL db_lowerbound_i64($8, $4, (int_64)7035927889518264320, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $5(($6 + [208]), $10)
	$2 = *($6 + [256])
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	
.LABEL $label$1
	*($0) = (int_64)0
	*($0 + [8]) = $2
	*($6 + [204]) = $9
	*($6 + [200]) = ($6 + [208])
	CALL eosio_assert([1], [17987])
	
.LOOP $label$3:
	$11 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $8
	$11 = [1]
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$11 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert($11, [18036])
	$7 = *($6 + [204])
	if ( ($7 == 0) ){ goto $label$7 }
	$12 = (($6 + [72]) + [24])
	$11 = (($6 + [184]) + [8])
	$13 = ($6 + [104])
	$14 = ($6 + [52])
	$15 = ($6 + [60])
	$16 = (int_64)0
	if ( ((int_64)*($7 + [16]) < (int_64)1) ){ goto $label$8 }
	$17 = [2]
	goto $label$6 
	
.LABEL $label$8
	$17 = [0]
	goto $label$6 
	
.LABEL $label$7
	$17 = [91]
	
.LABEL $label$6
	
.LOOP $label$9:
	goto $label$106 
	
.LABEL $label$195
	*($11) = *($6 + [256])
	*($6 + [184]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$4 = (uint_64)*($11) >> (uint_64)(int_64)8)
	$7 = [0]
	$17 = [3]
	goto $label$9 
	
.LABEL $label$194
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$86 }
	$17 = [84]
	goto $label$9 
	
.LABEL $label$193
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$17 = [85]
	goto $label$9 
	
.LABEL $label$192
	$4 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$191
	$4 = $8
	$17 = [87]
	goto $label$9 
	
.LABEL $label$190
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$87 }
	$17 = [88]
	goto $label$9 
	
.LABEL $label$189
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$15 }
	$17 = [89]
	goto $label$9 
	
.LABEL $label$188
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$187
	$9 = [0]
	$17 = [5]
	goto $label$9 
	
.LABEL $label$186
	CALL eosio_assert($9, [18036])
	$7 = *($6 + [204])
	*(($18 = (($6 + [168]) + [8]))) = *(($7 + [208]))
	*($6 + [168]) = *($7 + [200])
	*(($19 = (($6 + [152]) + [8]))) = *(($7 + [224]))
	*($6 + [152]) = *($7 + [216])
	*(($20 = (($6 + [136]) + [8]))) = *(($7 + [240]))
	*($6 + [136]) = *($7 + [232])
	$21 = *(($7 + [256]))
	$22 = *($7 + [248])
	$8 = *($7 + [32])
	$4 = *(($7 + [40]))
	CALL eosio_assert(((int_64)*(($7 + [72])) == (int_64)$4), [18283])
	$8 = ((int_64)$8 + (int_64)*($7 + [64]))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [18345])
	$7 = *($6 + [204])
	CALL eosio_assert(((int_64)$4 == (int_64)*(($7 + [104]))), [18283])
	$8 = ((int_64)*($7 + [96]) + (int_64)$8)
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [18345])
	$7 = *($6 + [204])
	CALL eosio_assert(((int_64)$4 == (int_64)*(($7 + [56]))), [18283])
	$8 = ((int_64)*($7 + [48]) + (int_64)$8)
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [18345])
	$7 = *($6 + [204])
	$23 = *($7 + [16])
	if ( ((int_64)$23 <= (int_64)$8) ){ goto $label$85 }
	$17 = [83]
	goto $label$9 
	
.LABEL $label$185
	CALL eosio_assert(((int_64)$4 == (int_64)*(($7 + [24]))), [18473])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($23 - $8)) > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [18543])
	goto $label$78 
	
.LABEL $label$184
	$4 = *($6 + [256])
	CALL eosio_assert([1], [17987])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = [0]
	$17 = [7]
	goto $label$9 
	
.LABEL $label$183
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$79 }
	$17 = [77]
	goto $label$9 
	
.LABEL $label$182
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$17 = [78]
	goto $label$9 
	
.LABEL $label$181
	$4 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$180
	$4 = $8
	$17 = [80]
	goto $label$9 
	
.LABEL $label$179
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$80 }
	$17 = [81]
	goto $label$9 
	
.LABEL $label$178
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$17 }
	$17 = [82]
	goto $label$9 
	
.LABEL $label$177
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$176
	$9 = [0]
	$17 = [9]
	goto $label$9 
	
.LABEL $label$175
	CALL eosio_assert($9, [18036])
	$4 = (int_64)0
	$17 = [10]
	goto $label$9 
	
.LABEL $label$174
	$7 = *($6 + [204])
	*($6 + [128]) = ((int_64)((int_64)$4 * (int_64)10000) / (int_64)*($7 + [16]))
	$4 = *($7 + [136])
	$23 = *(($7 + [144]))
	CALL eosio_assert(((int_64)*(($7 + [176])) == (int_64)$23), [18283])
	$4 = ((int_64)$4 + (int_64)*($7 + [168]))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [18345])
	$7 = *($6 + [204])
	CALL eosio_assert(((int_64)$23 == (int_64)*(($7 + [160]))), [18283])
	$8 = ((int_64)*($7 + [152]) + (int_64)$4)
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [18345])
	$7 = *($6 + [204])
	if ( ((int_64)*($7 + [120]) <= (int_64)$8) ){ goto $label$77 }
	$17 = [76]
	goto $label$9 
	
.LABEL $label$173
	$24 = *(($7 + [128]))
	*((($6 + [112]) + [8])) = $24
	*($6 + [112]) = *($7 + [120])
	CALL eosio_assert(((int_64)$23 == (int_64)$24), [18473])
	$25 = (int_64)
	*($6 + [112]) = $25(*($6 + [112]) - $8))
	CALL eosio_assert(((int_64)$25 > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$25 < (int_64)4611686018427387904), [18543])
	$7 = *($6 + [204])
	if ( ((int_64)*($7 + [120]) < (int_64)$8) ){ goto $label$69 }
	$17 = [15]
	goto $label$9 
	
.LABEL $label$172
	$23 = *($6 + [256])
	CALL eosio_assert([1], [17987])
	$4 = (uint_64)$23 >> (uint_64)(int_64)8)
	$7 = [0]
	$17 = [16]
	goto $label$9 
	
.LABEL $label$171
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$65 }
	$17 = [61]
	goto $label$9 
	
.LABEL $label$170
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$17 = [62]
	goto $label$9 
	
.LABEL $label$169
	$4 = $8
	$26 = [1]
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$168
	$4 = $8
	$17 = [65]
	goto $label$9 
	
.LABEL $label$167
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$17 = [67]
	goto $label$9 
	
.LABEL $label$166
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$22 }
	$17 = [68]
	goto $label$9 
	
.LABEL $label$165
	$26 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$68 }
	$17 = [63]
	goto $label$9 
	
.LABEL $label$164
	CALL eosio_assert($26, [18036])
	$4 = (int_64)0
	if ( ((int_64)$25 >= (int_64)1) ){ goto $label$63 }
	$17 = [18]
	goto $label$9 
	
.LABEL $label$163
	CALL eosio_assert(((int_64)$23 == (int_64)*($18)), [18283])
	$4 = ((int_64)*($6 + [168]) + (int_64)$4)
	*($6 + [168]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)*($6 + [168]) < (int_64)4611686018427387904), [18345])
	if ( $3 ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$162
	$24 = *($6 + [256])
	*((($6 + [112]) + [8])) = $24
	*($6 + [112]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$4 = (uint_64)$24 >> (uint_64)(int_64)8)
	$7 = [0]
	$17 = [12]
	goto $label$9 
	
.LABEL $label$161
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$71 }
	$17 = [70]
	goto $label$9 
	
.LABEL $label$160
	$25 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$17 = [71]
	goto $label$9 
	
.LABEL $label$159
	$4 = $25
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$158
	$4 = $25
	$17 = [73]
	goto $label$9 
	
.LABEL $label$157
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$72 }
	$17 = [74]
	goto $label$9 
	
.LABEL $label$156
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$19 }
	$17 = [75]
	goto $label$9 
	
.LABEL $label$155
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$154
	$9 = [0]
	$17 = [14]
	goto $label$9 
	
.LABEL $label$153
	CALL eosio_assert($9, [18036])
	$25 = (int_64)0
	$7 = *($6 + [204])
	if ( ((int_64)*($7 + [120]) >= (int_64)$8) ){ goto $label$70 }
	$17 = [69]
	goto $label$9 
	
.LABEL $label$152
	CALL eosio_assert(((int_64)*(($7 + [128])) == (int_64)$23), [18473])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($8 - *($7 + [120]))) > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [18543])
	if ( ((int_64)$25 < (int_64)1) ){ goto $label$64 }
	$17 = [40]
	goto $label$9 
	
.LABEL $label$151
	$4 = *($18)
	if ( ((int_64)$25 <= (int_64)*($6 + [168])) ){ goto $label$37 }
	$17 = [43]
	goto $label$9 
	
.LABEL $label$150
	CALL eosio_assert(((int_64)$4 == (int_64)$24), [18473])
	$8 = (int_64)
	*($6 + [112]) = $8($25 - *($6 + [168])))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [18543])
	*($6 + [168]) = (int_64)0
	$4 = *($6 + [136])
	if ( ((int_64)$4 >= (int_64)$22) ){ goto $label$35 }
	$17 = [58]
	goto $label$9 
	
.LABEL $label$149
	CALL eosio_assert(((int_64)$24 == (int_64)*($20)), [18283])
	$4 = ((int_64)$8 + (int_64)$4)
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [18345])
	if ( ((int_64)$4 <= (int_64)$22) ){ goto $label$24 }
	$17 = [60]
	goto $label$9 
	
.LABEL $label$148
	CALL eosio_assert(((int_64)*($20) == (int_64)$24), [18283])
	$4 = ((int_64)*($6 + [136]) + (int_64)$8)
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)$21 == (int_64)$24), [18473])
	$8 = (int_64)
	CALL eosio_assert(((int_64)$8($4 - $22)) > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [18543])
	*($20) = $21
	*($6 + [136]) = $22
	*($6 + [112]) = $8
	$17 = [44]
	goto $label$9 
	
.LABEL $label$147
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$36 }
	$17 = [45]
	goto $label$9 
	
.LABEL $label$146
	$4 = *($6 + [128])
	$7 = *($6 + [204])
	$4 = *($7 + [120])
	CALL __multi3(($6 + [24]), $4, (int_64)$4 >> (int_64)63), $4, (int_64)$4 >> (int_64)63))
	$25 = *(($7 + [128]))
	$4 = *((($6 + [24]) + [8]))
	$23 = *($6 + [24])
	CALL eosio_assert(( (uint_64)($23 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [18096])
	CALL eosio_assert(( ((uint_64)$23 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [18120])
	CALL eosio_assert([1], [18056])
	CALL eosio_assert([1], [18071])
	$7 = *($6 + [204])
	$4 = ((int_64)$23 / (int_64)10000)
	if ( ((int_64)$4 <= (int_64)*($7 + [152])) ){ goto $label$34 }
	$17 = [57]
	goto $label$9 
	
.LABEL $label$145
	*((($6 + [72]) + [8])) = $25
	CALL eosio_assert(((int_64)*(($7 + [160])) == (int_64)$25), [18473])
	$4 = (int_64)
	*($6 + [72]) = $4($4 - *($7 + [152])))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [18543])
	goto $label$27 
	
.LABEL $label$144
	CALL eosio_assert([0], [18036])
	$4 = (int_64)0
	if ( ((int_64)$25 >= (int_64)1) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$143
	CALL eosio_assert(((int_64)$24 == (int_64)$4), [18473])
	$4 = (int_64)
	*($6 + [168]) = $4(*($6 + [168]) - $25))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)*($6 + [168]) < (int_64)4611686018427387904), [18543])
	*($6 + [112]) = (int_64)0
	$17 = [42]
	goto $label$9 
	
.LABEL $label$142
	if ( ($3 == 0) ){ goto $label$58 }
	$17 = [20]
	goto $label$9 
	
.LABEL $label$141
	*((($6 + [72]) + [16])) = (int_64)-1
	*($12) = (int_64)0
	*($13) = [0]
	*(($9 = (($6 + [72]) + [8]))) = (uint_64)*($6 + [256]) >> (uint_64)(int_64)8)
	$4 = *($1)
	*($6 + [72]) = $4
	*(($26 = (($6 + [40]) + [8]))) = ($6 + [248])
	*($14) = ($6 + [184])
	*(($20 = (($6 + [40]) + [16]))) = ($6 + [128])
	*($15) = ($6 + [168])
	*((($6 + [40]) + [24])) = ($6 + [152])
	*((($6 + [40]) + [28])) = ($6 + [136])
	*($6 + [44]) = ($6 + [200])
	*($6 + [40]) = ($6 + [72])
	*($6 + [296]) = $4
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$8()), [18755])
	*((($6 + [272]) + [8])) = ($6 + [296])
	*($6 + [276]) = ($6 + [40])
	*($6 + [272]) = ($6 + [72])
	$7 = CALL _Znwj([240])
	CALL $57($7)
	*($7 + [224]) = ($6 + [72])
	CALL $58(($6 + [272]), $7)
	*($6 + [288]) = $7
	$4 = *($7)
	*($6 + [272]) = $4
	$19 = *($7 + [228])
	*($6 + [268]) = $19
	$18 = (($6 + [72]) + [28])
	$10 = *($18)
	if ( ((uint_32)$10 >= (uint_32)*($13)) ){ goto $label$50 }
	$17 = [39]
	goto $label$9 
	
.LABEL $label$140
	*($10 + [8]) = $4
	*($10 + [16]) = $19
	*($6 + [288]) = [0]
	*($10) = $7
	*($18) = ($10 + [24])
	$7 = *($6 + [288])
	*($6 + [288]) = [0]
	if ( $7 ){ goto $label$47 }
	goto $label$48 
	
.LABEL $label$139
	CALL $59($12, ($6 + [288]), ($6 + [272]), ($6 + [268]))
	$7 = *($6 + [288])
	*($6 + [288]) = [0]
	if ( ($7 == 0) ){ goto $label$49 }
	$17 = [22]
	goto $label$9 
	
.LABEL $label$138
	CALL _ZdlPv($7)
	$17 = [23]
	goto $label$9 
	
.LABEL $label$137
	$7 = [0]
	$10 = CALL db_lowerbound_i64(*($6 + [72]), *($9), (int_64)7035929642776002560, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$46 }
	$17 = [24]
	goto $label$9 
	
.LABEL $label$136
	$7 = CALL $60(($6 + [72]), $10)
	$17 = [25]
	goto $label$9 
	
.LABEL $label$135
	$9 = CALL db_lowerbound_i64(*($6 + [72]), *($9), (int_64)7035929642776002560, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$45 }
	$17 = [26]
	goto $label$9 
	
.LABEL $label$134
	CALL $60(($6 + [72]), $9)
	if ( ($7 == 0) ){ goto $label$44 }
	$17 = [27]
	goto $label$9 
	
.LABEL $label$133
	*($6 + [44]) = [0]
	*($6 + [40]) = ($6 + [72])
	if ( (uint_64)((int_64))(*(*(CALL $61(($6 + [40])) + [4])) - *($7)) <= (int_64)250) ){ goto $label$43 }
	$17 = [36]
	goto $label$9 
	
.LABEL $label$132
	CALL eosio_assert([1], [18963])
	CALL eosio_assert([1], [18806])
	$9 = CALL db_next_i64(*($7 + [228]), ($6 + [40]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$38 }
	$17 = [37]
	goto $label$9 
	
.LABEL $label$131
	CALL $60(($6 + [72]), $9)
	$17 = [38]
	goto $label$9 
	
.LABEL $label$130
	CALL $62(($6 + [72]), $7)
	$17 = [28]
	goto $label$9 
	
.LABEL $label$129
	$7 = *($6 + [204])
	*($26) = ($6 + [184])
	*($14) = ($6 + [168])
	*($20) = ($6 + [152])
	*($15) = ($6 + [136])
	*($6 + [44]) = ($6 + [128])
	*($6 + [40]) = ($6 + [256])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18564])
	CALL $63(($6 + [208]), $7, ($6 + [40]))
	$10 = *($12)
	if ( ($10 == 0) ){ goto $label$57 }
	$17 = [29]
	goto $label$9 
	
.LABEL $label$128
	$7 = *($18)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$41 }
	$17 = [30]
	goto $label$9 
	
.LABEL $label$127
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$40 }
	$17 = [31]
	goto $label$9 
	
.LABEL $label$126
	CALL _ZdlPv($9)
	$17 = [32]
	goto $label$9 
	
.LABEL $label$125
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$42 }
	$17 = [33]
	goto $label$9 
	
.LABEL $label$124
	$7 = *($12)
	goto $label$39 
	
.LABEL $label$123
	$7 = $10
	$17 = [34]
	goto $label$9 
	
.LABEL $label$122
	*($18) = $10
	CALL _ZdlPv($7)
	$17 = [19]
	goto $label$9 
	
.LABEL $label$121
	$7 = *($6 + [204])
	goto $label$93 
	
.LABEL $label$120
	$4 = *($6 + [136])
	$23 = *($20)
	CALL eosio_assert(((int_64)$24 == (int_64)$23), [18283])
	$4 = ((int_64)$8 + (int_64)$4)
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [18345])
	*($20) = $23
	*($6 + [136]) = $4
	*($6 + [112]) = (int_64)0
	if ( $3 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$119
	$25 = *($6 + [256])
	*((($6 + [72]) + [8])) = $25
	*($6 + [72]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$4 = (uint_64)$25 >> (uint_64)(int_64)8)
	$7 = [0]
	$17 = [47]
	goto $label$9 
	
.LABEL $label$118
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$17 = [51]
	goto $label$9 
	
.LABEL $label$117
	$23 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$17 = [52]
	goto $label$9 
	
.LABEL $label$116
	$4 = $23
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$115
	$4 = $23
	$17 = [54]
	goto $label$9 
	
.LABEL $label$114
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$17 = [55]
	goto $label$9 
	
.LABEL $label$113
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$25 }
	$17 = [56]
	goto $label$9 
	
.LABEL $label$112
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$111
	$9 = [0]
	$17 = [49]
	goto $label$9 
	
.LABEL $label$110
	CALL eosio_assert($9, [18036])
	$4 = (int_64)0
	$17 = [50]
	goto $label$9 
	
.LABEL $label$109
	CALL eosio_assert(((int_64)$24 == (int_64)$25), [18145])
	$7 = ( ($6 + [112]) ? ($6 + [72]) : ((int_64)$8 < (int_64)$4) )
	$4 = *(($7 + [8]))
	*((($6 + [40]) + [8])) = $4
	*($6 + [40]) = *($7)
	$7 = *($6 + [204])
	CALL eosio_assert(((int_64)$4 == (int_64)*(($7 + [192]))), [18145])
	$7 = ( ($7 + [184]) ? ($6 + [40]) : ((int_64)*($7 + [184]) < (int_64)*($6 + [40])) )
	$4 = *($7)
	CALL __multi3(($6 + [8]), $4, (int_64)$4 >> (int_64)63), (CASTING uint_64)(uint_32 $5), (int_64)0)
	$23 = *($7 + [8])
	$4 = *((($6 + [8]) + [8]))
	$25 = *($6 + [8])
	CALL eosio_assert(( (uint_64)($25 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [18096])
	CALL eosio_assert(( ((uint_64)$25 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [18120])
	CALL eosio_assert([1], [18056])
	CALL eosio_assert([1], [18071])
	*($11) = $23
	*($6 + [184]) = ((int_64)$25 / (int_64)100)
	CALL eosio_assert(((int_64)$23 == (int_64)$24), [18473])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($8 - *($6 + [184]))) > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [18543])
	CALL eosio_assert(((int_64)$24 == (int_64)*($19)), [18283])
	$4 = ((int_64)*($6 + [152]) + (int_64)$4)
	*($6 + [152]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)*($6 + [152]) < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)*($11) == (int_64)$2), [18283])
	$16 = ((int_64)$16 + (int_64)*($6 + [184]))
	*($0) = $16
	CALL eosio_assert(((int_64)$16 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$16 < (int_64)4611686018427387904), [18345])
	if ( $3 ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$108
	CALL eosio_assert([0], [18036])
	$4 = (int_64)0
	if ( ((int_64)$25 >= (int_64)1) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$107
	$7 = CALL $5(*($6 + [200]), $7)
	*($6 + [204]) = $7
	if ( ((int_64)*($7 + [16]) >= (int_64)1) ){ goto $label$92 }
	$17 = [0]
	goto $label$9 
	
.LABEL $label$106
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18806])
	$7 = CALL db_next_i64(*(*($6 + [204]) + [292]), ($6 + [72]))
	if ( ((int_32)$7 >= (int_32)[0]) ){ goto $label$94 }
	$17 = [90]
	goto $label$9 
	
.LABEL $label$105
	*($6 + [204]) = [0]
	$17 = [91]
	goto $label$9 
	
.LABEL $label$104
	$10 = *($6 + [232])
	if ( ($10 == 0) ){ goto $label$14 }
	$17 = [92]
	goto $label$9 
	
.LABEL $label$103
	$11 = ($6 + [236])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$13 }
	$17 = [93]
	goto $label$9 
	
.LABEL $label$102
	$17 = [94]
	goto $label$9 
	
.LABEL $label$101
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$11 }
	$17 = [95]
	goto $label$9 
	
.LABEL $label$100
	CALL _ZdlPv($9)
	$17 = [96]
	goto $label$9 
	
.LABEL $label$99
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$12 }
	$17 = [97]
	goto $label$9 
	
.LABEL $label$98
	$7 = *(($6 + [232]))
	goto $label$10 
	
.LABEL $label$97
	$7 = $10
	$17 = [98]
	goto $label$9 
	
.LABEL $label$96
	*($11) = $10
	CALL _ZdlPv($7)
	$17 = [99]
	goto $label$9 
	
.LABEL $label$95
	$global$0 = ($6 + [304])
	return 
	
.LABEL $label$94
	$17 = [1]
	goto $label$9 
	
.LABEL $label$93
	$17 = [0]
	goto $label$9 
	
.LABEL $label$92
	$17 = [2]
	goto $label$9 
	
.LABEL $label$91
	$17 = [3]
	goto $label$9 
	
.LABEL $label$90
	$17 = [5]
	goto $label$9 
	
.LABEL $label$89
	$17 = [3]
	goto $label$9 
	
.LABEL $label$88
	$17 = [5]
	goto $label$9 
	
.LABEL $label$87
	$17 = [4]
	goto $label$9 
	
.LABEL $label$86
	$17 = [4]
	goto $label$9 
	
.LABEL $label$85
	$17 = [6]
	goto $label$9 
	
.LABEL $label$84
	$17 = [7]
	goto $label$9 
	
.LABEL $label$83
	$17 = [9]
	goto $label$9 
	
.LABEL $label$82
	$17 = [7]
	goto $label$9 
	
.LABEL $label$81
	$17 = [9]
	goto $label$9 
	
.LABEL $label$80
	$17 = [8]
	goto $label$9 
	
.LABEL $label$79
	$17 = [8]
	goto $label$9 
	
.LABEL $label$78
	$17 = [10]
	goto $label$9 
	
.LABEL $label$77
	$17 = [11]
	goto $label$9 
	
.LABEL $label$76
	$17 = [12]
	goto $label$9 
	
.LABEL $label$75
	$17 = [14]
	goto $label$9 
	
.LABEL $label$74
	$17 = [12]
	goto $label$9 
	
.LABEL $label$73
	$17 = [14]
	goto $label$9 
	
.LABEL $label$72
	$17 = [13]
	goto $label$9 
	
.LABEL $label$71
	$17 = [13]
	goto $label$9 
	
.LABEL $label$70
	$17 = [15]
	goto $label$9 
	
.LABEL $label$69
	$17 = [69]
	goto $label$9 
	
.LABEL $label$68
	$17 = [16]
	goto $label$9 
	
.LABEL $label$67
	$17 = [16]
	goto $label$9 
	
.LABEL $label$66
	$17 = [63]
	goto $label$9 
	
.LABEL $label$65
	$17 = [17]
	goto $label$9 
	
.LABEL $label$64
	$17 = [18]
	goto $label$9 
	
.LABEL $label$63
	$17 = [40]
	goto $label$9 
	
.LABEL $label$62
	$17 = [40]
	goto $label$9 
	
.LABEL $label$61
	$17 = [18]
	goto $label$9 
	
.LABEL $label$60
	$17 = [40]
	goto $label$9 
	
.LABEL $label$59
	$17 = [18]
	goto $label$9 
	
.LABEL $label$58
	$17 = [19]
	goto $label$9 
	
.LABEL $label$57
	$17 = [19]
	goto $label$9 
	
.LABEL $label$56
	$17 = [20]
	goto $label$9 
	
.LABEL $label$55
	$17 = [19]
	goto $label$9 
	
.LABEL $label$54
	$17 = [20]
	goto $label$9 
	
.LABEL $label$53
	$17 = [19]
	goto $label$9 
	
.LABEL $label$52
	$17 = [20]
	goto $label$9 
	
.LABEL $label$51
	$17 = [19]
	goto $label$9 
	
.LABEL $label$50
	$17 = [21]
	goto $label$9 
	
.LABEL $label$49
	$17 = [23]
	goto $label$9 
	
.LABEL $label$48
	$17 = [23]
	goto $label$9 
	
.LABEL $label$47
	$17 = [22]
	goto $label$9 
	
.LABEL $label$46
	$17 = [25]
	goto $label$9 
	
.LABEL $label$45
	$17 = [28]
	goto $label$9 
	
.LABEL $label$44
	$17 = [28]
	goto $label$9 
	
.LABEL $label$43
	$17 = [28]
	goto $label$9 
	
.LABEL $label$42
	$17 = [30]
	goto $label$9 
	
.LABEL $label$41
	$17 = [35]
	goto $label$9 
	
.LABEL $label$40
	$17 = [32]
	goto $label$9 
	
.LABEL $label$39
	$17 = [34]
	goto $label$9 
	
.LABEL $label$38
	$17 = [38]
	goto $label$9 
	
.LABEL $label$37
	$17 = [41]
	goto $label$9 
	
.LABEL $label$36
	$17 = [42]
	goto $label$9 
	
.LABEL $label$35
	$17 = [44]
	goto $label$9 
	
.LABEL $label$34
	$17 = [46]
	goto $label$9 
	
.LABEL $label$33
	$17 = [47]
	goto $label$9 
	
.LABEL $label$32
	$17 = [49]
	goto $label$9 
	
.LABEL $label$31
	$17 = [47]
	goto $label$9 
	
.LABEL $label$30
	$17 = [49]
	goto $label$9 
	
.LABEL $label$29
	$17 = [48]
	goto $label$9 
	
.LABEL $label$28
	$17 = [48]
	goto $label$9 
	
.LABEL $label$27
	$17 = [50]
	goto $label$9 
	
.LABEL $label$26
	$17 = [53]
	goto $label$9 
	
.LABEL $label$25
	$17 = [54]
	goto $label$9 
	
.LABEL $label$24
	$17 = [59]
	goto $label$9 
	
.LABEL $label$23
	$17 = [64]
	goto $label$9 
	
.LABEL $label$22
	$17 = [65]
	goto $label$9 
	
.LABEL $label$21
	$17 = [66]
	goto $label$9 
	
.LABEL $label$20
	$17 = [72]
	goto $label$9 
	
.LABEL $label$19
	$17 = [73]
	goto $label$9 
	
.LABEL $label$18
	$17 = [79]
	goto $label$9 
	
.LABEL $label$17
	$17 = [80]
	goto $label$9 
	
.LABEL $label$16
	$17 = [86]
	goto $label$9 
	
.LABEL $label$15
	$17 = [87]
	goto $label$9 
	
.LABEL $label$14
	$17 = [99]
	goto $label$9 
	
.LABEL $label$13
	$17 = [100]
	goto $label$9 
	
.LABEL $label$12
	$17 = [94]
	goto $label$9 
	
.LABEL $label$11
	$17 = [96]
	goto $label$9 
	
.LABEL $label$10
	$17 = [98]
	goto $label$9 
	$17
}

int_32 .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18915])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4406680039000797184)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18861])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18861])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $40(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18255])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $181($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([64])
	$6 = CALL $137($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [52])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $46(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	float_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$3 = ($global$0 - [208])
	$global$0 = $3
	$4 = *($2 + [8])
	*((($3 + [128]) + [32])) = [0]
	*($3 + [136]) = (uint_64)$4 >> (uint_64)(int_64)8)
	*($3 + [144]) = (int_64)-1
	*($3 + [152]) = (int_64)0
	*($3 + [164]) = [0]
	$4 = *($0)
	*($3 + [128]) = $4
	*((($3 + [88]) + [32])) = [0]
	*($3 + [88]) = $4
	*($3 + [104]) = (int_64)-1
	*($3 + [112]) = (int_64)0
	*($3 + [96]) = (int_64)1145979219
	$5 = CALL db_lowerbound_i64($4, (int_64)1145979219, (int_64)-4157661275913060352, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $64(($3 + [88]), $5)
	*($3 + [84]) = $5
	*($3 + [80]) = ($3 + [88])
	$6 = *($5 + [8])
	CALL eosio_assert([1], [18806])
	$5 = CALL db_next_i64(*(*($3 + [84]) + [28]), ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = CALL $64(*($3 + [80]), $5)
	*($3 + [84]) = $5
	$4 = *($5 + [8])
	CALL eosio_assert([1], [18806])
	$6 = ((int_64)$4 + (int_64)$6)
	$5 = CALL db_next_i64(*(*($3 + [84]) + [28]), ($3 + [8]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [0]
	*($3 + [84]) = [0]
	if ( ((int_64)$6 < (int_64)1) ){ goto $label$4 }
	*($3 + [72]) = (int_64)1398362884
	*($3 + [64]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$4 = (int_64)5462355
	
.LOOP $label$9:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$4 = $8
	$7 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = $8
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$11 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($7, [18036])
	*((($3 + [64]) + [8])) = (int_64)293370680068
	*($3 + [64]) = $6
	$5 = CALL db_lowerbound_i64(*($3 + [88]), *((($3 + [88]) + [8])), (int_64)-4157661275913060352, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$3 }
	$5 = CALL $64(($3 + [88]), $5)
	*($3 + [84]) = $5
	*($3 + [80]) = ($3 + [88])
	$11 = (($3 + [128]) + [24])
	$12 = (CASTING float_64)(int_64 $6)
	$10 = (($3 + [48]) + [8])
	$13 = ($3 + [20])
	$14 = ($3 + [28])
	$15 = ($3 + [160])
	$7 = ($3 + [156])
	
.LOOP $label$12:
	*($10) = *(($5 + [16]))
	$4 = *($5 + [8])
	*($3 + [48]) = $4
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$13 }
	*($3 + [40]) = ((float_64)((float_64)(CASTING float_64)(int_64 $4) / (float_64)$12) * (float_64)(CASTING float_64)(int_64 *($2)))
	$4 = *($0)
	*((($3 + [8]) + [8])) = $1
	*((($3 + [8]) + [16])) = $2
	*($13) = ($3 + [40])
	*($14) = ($3 + [48])
	*((($3 + [8]) + [24])) = ($3 + [64])
	*($3 + [12]) = ($3 + [80])
	*($3 + [8]) = ($3 + [128])
	*($3 + [200]) = $4
	CALL eosio_assert(((int_64)*($3 + [128]) == (int_64)CALL $fimport$8()), [18755])
	*((($3 + [176]) + [8])) = ($3 + [200])
	*($3 + [180]) = ($3 + [8])
	*($3 + [176]) = ($3 + [128])
	$5 = CALL _Znwj([88])
	CALL $65($5)
	*($5 + [72]) = ($3 + [128])
	CALL $66(($3 + [176]), $5)
	*($3 + [192]) = $5
	$4 = *($5)
	*($3 + [176]) = $4
	$16 = *($5 + [76])
	*($3 + [172]) = $16
	$9 = *($7)
	if ( ((uint_32)$9 >= (uint_32)*($15)) ){ goto $label$16 }
	*($9 + [8]) = $4
	*($9 + [16]) = $16
	*($3 + [192]) = [0]
	*($9) = $5
	*($7) = ($9 + [24])
	$5 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( $5 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $67($11, ($3 + [192]), ($3 + [176]), ($3 + [172]))
	$5 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$5 = *($3 + [84])
	
.LABEL $label$13
	$9 = [0]
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18806])
	$5 = CALL db_next_i64(*(*($3 + [84]) + [28]), ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$17 }
	$9 = CALL $64(*($3 + [80]), $5)
	
.LABEL $label$17
	*($3 + [84]) = $9
	$5 = $9
	if ( $9 ){ goto $label$12 }
	goto $label$4 
	
.LABEL $label$5
	*($3 + [84]) = [0]
	*($3 + [80]) = ($3 + [88])
	
.LABEL $label$4
	$2 = *($3 + [112])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	*($3 + [84]) = [0]
	*($3 + [80]) = ($3 + [88])
	$2 = *($3 + [112])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($3 + [116])
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$19 }
	
.LOOP $label$20:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$21 }
	CALL _ZdlPv($9)
	
.LABEL $label$21
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$20 }
	$5 = *(($3 + [112]))
	goto $label$18 
	
.LABEL $label$19
	$5 = $2
	
.LABEL $label$18
	*($10) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$2 = *($3 + [152])
	if ( ($2 == 0) ){ goto $label$22 }
	$10 = ($3 + [156])
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$24 }
	
.LOOP $label$25:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$26 }
	CALL _ZdlPv($9)
	
.LABEL $label$26
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$25 }
	$5 = *(($3 + [152]))
	goto $label$23 
	
.LABEL $label$24
	$5 = $2
	
.LABEL $label$23
	*($10) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$22
	$global$0 = ($3 + [208])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [17981])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [17981])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$0 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [18997])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [19042])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19092])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

int_32 .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $178($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $165($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $165 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $165($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $163 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $161 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $169 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $168 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $165($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_64 .FUNC $175 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$4 = (int_64)0
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$4 = (int_64)0
	
.LOOP $label$7:
	$4 = (int_64))(((int_64)$4 * (int_64)10) - (CASTING int_64)(int_32 $1))
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $4 ? (int_64))((int_64)0 - $4) : $2 )
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)7035929642776002560, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $60($6, $8)
	*($3 + [28]) = [0]
	*($3 + [24]) = $6
	$7 = *(*(CALL $61(($3 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [19145])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*(*($5 + [4]) + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	$6 = *($5 + [12])
	*(($1 + [32])) = *(($6 + [8]))
	*($1 + [24]) = *($6)
	*($1 + [40]) = *(*($5 + [16]))
	$6 = *(*($5 + [4]) + [4])
	*(($1 + [56])) = *(($6 + [24]))
	*($1 + [48]) = *($6 + [16])
	$6 = *(*($5 + [4]) + [4])
	*($1 + [64]) = *($6 + [32])
	*(($1 + [72])) = *(($6 + [40]))
	$6 = *(*($5 + [4]) + [4])
	*($1 + [80]) = *($6 + [48])
	*(($1 + [88])) = *(($6 + [56]))
	$6 = *(*($5 + [4]) + [4])
	*($1 + [96]) = *($6 + [64])
	*(($1 + [104])) = *(($6 + [72]))
	$6 = *(*($5 + [4]) + [4])
	*($1 + [112]) = *($6 + [120])
	*(($1 + [120])) = *(($6 + [128]))
	$6 = *(*($5 + [4]) + [4])
	*($1 + [128]) = *($6 + [136])
	*(($1 + [136])) = *(($6 + [144]))
	$6 = *(*($5 + [4]) + [4])
	*($1 + [144]) = *($6 + [152])
	*(($1 + [152])) = *(($6 + [160]))
	$6 = *(*($5 + [4]) + [4])
	*($1 + [160]) = *($6 + [168])
	*(($1 + [168])) = *(($6 + [176]))
	$6 = *(*($5 + [4]) + [4])
	*($1 + [176]) = *($6 + [184])
	*(($1 + [184])) = *(($6 + [192]))
	*($1 + [192]) = *(*($5 + [20]))
	*($1 + [200]) = *(*($5 + [24]))
	*($1 + [208]) = *(*($5 + [28]))
	$6 = $2
	$5 = ($6 + [-224])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = $6
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [24])
	*($3 + [40]) = ($1 + [40])
	*($3 + [44]) = ($1 + [48])
	*($3 + [48]) = ($1 + [64])
	*($3 + [52]) = ($1 + [80])
	*($3 + [56]) = ($1 + [96])
	*($3 + [60]) = ($1 + [112])
	*($3 + [64]) = ($1 + [128])
	*($3 + [68]) = ($1 + [144])
	*($3 + [72]) = ($1 + [160])
	*($3 + [76]) = ($1 + [176])
	*($3 + [80]) = ($1 + [192])
	*($3 + [84]) = ($1 + [200])
	*($3 + [88]) = ($1 + [208])
	*($3 + [92]) = ($1 + [216])
	CALL $154(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [228]) = CALL db_store_i64(*($4 + [8]), (int_64)7035929642776002560, *(*($0 + [8])), $7, $5, [224])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [96])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18255])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $181($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([64])
	CALL $52($5)
	*($5 + [48]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [40])
	CALL $143(($3 + [32]), ($3 + [24]))
	*($5 + [56]) = [-1]
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $54(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18036])
	*($0 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *($4 + [4])
	*(($1 + [16])) = *(($6 + [8]))
	*($1 + [8]) = *($6)
	$7 = *(*($4 + [4]) + [8])
	CALL eosio_assert([1], [17987])
	$8 = ($1 + [8])
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $10
	$6 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [18036])
	*(($1 + [32])) = $7
	*($1 + [24]) = (int_64)0
	$6 = $2
	$4 = ($6 + [-48])
	$global$0 = $4
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = $6
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $8
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [24])
	*($3 + [44]) = ($1 + [40])
	CALL $51(($3 + [32]), ($3 + [24]))
	$9 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)-6030912139319414784, *(*($0 + [8])), $9, $4, [48])
	if ( (uint_64)($9 <= *($5 + [16])) ){ goto $label$6 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$9 = *(($5 + [8]))
	$10 = *(*(($0 + [8])))
	$7 = *($1)
	*($3 + [32]) = *($1 + [8])
	*($1 + [56]) = CALL db_idx64_store($9, (int_64)-6030912139319414784, $10, $7, ($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [18599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18645])
	$1 = CALL memcpy($1, *($3), [112])
	CALL eosio_assert([1], [18696])
	*($4 + [120]) = ($4 + [112])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	*($4 + [128]) = ($4 + [112])
	*($4 + [140]) = ($1 + [16])
	*($4 + [136]) = $1
	*($4 + [144]) = ($1 + [32])
	*($4 + [148]) = ($1 + [48])
	*($4 + [152]) = ($1 + [64])
	*($4 + [156]) = ($1 + [80])
	*($4 + [160]) = ($1 + [88])
	*($4 + [164]) = ($1 + [96])
	*($4 + [168]) = ($1 + [104])
	CALL $133(($4 + [136]), ($4 + [128]))
	CALL db_update_i64(*($1 + [116]), $2, $4, [112])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4152997948076064768) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4152997948076064769
	
.LABEL $label$1
	$global$0 = ($4 + [176])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18755])
	$5 = CALL _Znwj([128])
	CALL $130($5)
	*($5 + [112]) = $1
	$5 = CALL memcpy($5, *($3), [112])
	*($4 + [120]) = ($4 + [112])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	*($4 + [128]) = ($4 + [112])
	*($4 + [140]) = ($5 + [16])
	*($4 + [136]) = $5
	*($4 + [144]) = ($5 + [32])
	*($4 + [148]) = ($5 + [48])
	*($4 + [152]) = ($5 + [64])
	*($4 + [156]) = ($5 + [80])
	*($4 + [160]) = ($5 + [88])
	*($4 + [164]) = ($5 + [96])
	*($4 + [168]) = ($5 + [104])
	CALL $133(($4 + [136]), ($4 + [128]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4152997948076064768, $2, (int_64)4152997948076064768, $4, [112])
	*($5 + [116]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4152997948076064768) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4152997948076064769
	
.LABEL $label$1
	*($4 + [136]) = $5
	*($4) = (int_64)4152997948076064768
	*($4 + [112]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4152997948076064768
	*($3 + [16]) = $6
	*($4 + [136]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $132(($1 + [24]), ($4 + [136]), $4, ($4 + [112]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [136])
	*($4 + [136]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [176])
}

int_32 .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [24]) = (int_64)0
	*(($1 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [72]))) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [88]))) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$2 = $3
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$20 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$4 = [0]
	
.LABEL $label$16
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [104]))) = (int_64)1398362884
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$2 = $3
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$25 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$4 = [0]
	
.LABEL $label$21
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [120]))) = (int_64)1398362884
	*($0 + [112]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$2 = $3
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$30 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$4 = [0]
	
.LABEL $label$26
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [136]))) = (int_64)1398362884
	*($0 + [128]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	$2 = $3
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$32 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$35 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$4 = [0]
	
.LABEL $label$31
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [152]))) = (int_64)1398362884
	*($0 + [144]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$39 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$39
	$2 = $3
	
.LOOP $label$40:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$37 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$40 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$4 = [0]
	
.LABEL $label$36
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [168]))) = (int_64)1398362884
	*($0 + [160]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$44 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$44
	$2 = $3
	
.LOOP $label$45:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$45 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$4 = [0]
	
.LABEL $label$41
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [184]))) = (int_64)1398362884
	*($0 + [176]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$49 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$49
	$2 = $3
	
.LOOP $label$50:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$47 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$50 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$4 = [0]
	
.LABEL $label$46
	CALL eosio_assert($4, [18036])
	*($0 + [216]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	return $0
}

void .FUNC $173 (int_32 $0)
{
}

int_32 .FUNC $152 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [17987])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18036])
	*($0 + [120]) = $1
	*($3) = *($2 + [4])
	*($3 + [12]) = ($0 + [8])
	*($3 + [8]) = $0
	*($3 + [16]) = ($0 + [24])
	*($3 + [20]) = ($0 + [32])
	*($3 + [24]) = ($0 + [40])
	*($3 + [28]) = ($0 + [48])
	*($3 + [32]) = ($0 + [56])
	*($3 + [36]) = ($0 + [64])
	*($3 + [40]) = ($0 + [72])
	*($3 + [44]) = ($0 + [80])
	*($3 + [48]) = ($0 + [88])
	*($3 + [52]) = ($0 + [96])
	*($3 + [56]) = ($0 + [104])
	*($3 + [60]) = ($0 + [112])
	CALL $153(($3 + [8]), $3)
	*($0 + [124]) = *(*($2 + [8]))
	$global$0 = ($3 + [64])
	return $0
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18278])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [52])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [19197])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $10($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18278])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $24(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $156 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$0 = ($global$0 - [208])
	$global$0 = $0
	CALL memcpy(($0 + [8]), [16888], [200])
	*([0] + [8192]) = [8196]
	*([0] + [8196 align=4]) = (int_64)0
	$1 = (($0 + [8]) + [200])
	$2 = ($0 + [8])
	$3 = [0]
	$4 = [0]
	$5 = [8196]
	if ( ((int_32)[8196] != (int_32)[8196]) ){ goto $label$2 }
	$6 = [20]
	goto $label$1 
	
.LABEL $label$2
	$6 = [2]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$45 
	
.LABEL $label$53
	$3 = *([0] + [8196])
	$4 = $3
	$5 = [8196]
	if ( ((int_32)*([0] + [8192]) == (int_32)[8196]) ){ goto $label$29 }
	$6 = [2]
	goto $label$3 
	
.LABEL $label$52
	$7 = $4
	if ( ($4 == 0) ){ goto $label$13 }
	$6 = [3]
	goto $label$3 
	
.LABEL $label$51
	$5 = $7
	$7 = *($5 + [4])
	if ( $7 ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$50
	$7 = [8196]
	$6 = [23]
	goto $label$3 
	
.LABEL $label$49
	$5 = *($7 + [8])
	$8 = ((int_32)*($5) == (int_32)$7)
	$7 = $5
	if ( $8 ){ goto $label$12 }
	$6 = [4]
	goto $label$3 
	
.LABEL $label$48
	$9 = *($2)
	if ( ((uint_64)*($5 + [16]) >= (uint_64)$9) ){ goto $label$28 }
	$6 = [20]
	goto $label$3 
	
.LABEL $label$47
	if ( ($4 == 0) ){ goto $label$4 }
	$6 = [21]
	goto $label$3 
	
.LABEL $label$46
	$3 = ($5 + [4])
	if ( (*($5 + [4]) == 0) ){ goto $label$18 }
	$6 = [0]
	goto $label$3 
	
.LABEL $label$45
	$2 = ($2 + [40])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$44
	if ( ($3 == 0) ){ goto $label$27 }
	$6 = [6]
	goto $label$3 
	
.LABEL $label$43
	$7 = [8196]
	$10 = *($3 + [16])
	if ( ((uint_64)$9 >= (uint_64)$10) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$42
	$7 = $3
	$3 = $4
	$10 = *($3 + [16])
	if ( ((uint_64)$9 >= (uint_64)$10) ){ goto $label$25 }
	$6 = [16]
	goto $label$3 
	
.LABEL $label$41
	$4 = *($3)
	if ( $4 ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$40
	if ( ((uint_64)$10 >= (uint_64)$9) ){ goto $label$9 }
	$6 = [13]
	goto $label$3 
	
.LABEL $label$39
	$7 = ($3 + [4])
	$4 = *($3 + [4])
	if ( ($4 == 0) ){ goto $label$7 }
	$6 = [14]
	goto $label$3 
	
.LABEL $label$38
	$3 = $7
	goto $label$23 
	
.LABEL $label$37
	$3 = [8196]
	$5 = [8196]
	$6 = [9]
	goto $label$3 
	
.LABEL $label$36
	*((($7 = CALL _Znwj([56])) + [48])) = *(($2 + [32]))
	*(($7 + [40])) = *(($2 + [24]))
	*(($7 + [32])) = *(($2 + [16]))
	*(($7 + [24])) = *(($2 + [8]))
	*($7 + [16]) = *($2)
	*($7) = (int_64)0
	*($7 + [8]) = $5
	*($3) = $7
	$5 = *(*([0] + [8192]))
	if ( ($5 == 0) ){ goto $label$8 }
	$6 = [10]
	goto $label$3 
	
.LABEL $label$35
	*([0] + [8192]) = $5
	$7 = *($3)
	$6 = [11]
	goto $label$3 
	
.LABEL $label$34
	CALL $7(*([0] + [8196]), $7)
	*([0] + [8200]) = (*([0] + [8200]) + [1])
	$2 = ($2 + [40])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$33
	$5 = $3
	goto $label$26 
	
.LABEL $label$32
	$5 = $3
	$3 = $7
	if ( $4 ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$31
	$5 = $3
	$3 = $7
	goto $label$24 
	
.LABEL $label$30
	CALL $174([14], [0], [8192])
	$global$0 = ($0 + [208])
	return 
	
.LABEL $label$29
	$6 = [20]
	goto $label$3 
	
.LABEL $label$28
	$6 = [5]
	goto $label$3 
	
.LABEL $label$27
	$6 = [19]
	goto $label$3 
	
.LABEL $label$26
	$6 = [9]
	goto $label$3 
	
.LABEL $label$25
	$6 = [7]
	goto $label$3 
	
.LABEL $label$24
	$6 = [9]
	goto $label$3 
	
.LABEL $label$23
	$6 = [15]
	goto $label$3 
	
.LABEL $label$22
	$6 = [9]
	goto $label$3 
	
.LABEL $label$21
	$6 = [0]
	goto $label$3 
	
.LABEL $label$20
	$6 = [12]
	goto $label$3 
	
.LABEL $label$19
	$6 = [1]
	goto $label$3 
	
.LABEL $label$18
	$6 = [9]
	goto $label$3 
	
.LABEL $label$17
	$6 = [12]
	goto $label$3 
	
.LABEL $label$16
	$6 = [1]
	goto $label$3 
	
.LABEL $label$15
	$6 = [4]
	goto $label$3 
	
.LABEL $label$14
	$6 = [3]
	goto $label$3 
	
.LABEL $label$13
	$6 = [22]
	goto $label$3 
	
.LABEL $label$12
	$6 = [23]
	goto $label$3 
	
.LABEL $label$11
	$6 = [16]
	goto $label$3 
	
.LABEL $label$10
	$6 = [7]
	goto $label$3 
	
.LABEL $label$9
	$6 = [8]
	goto $label$3 
	
.LABEL $label$8
	$6 = [11]
	goto $label$3 
	
.LABEL $label$7
	$6 = [18]
	goto $label$3 
	
.LABEL $label$6
	$6 = [17]
	goto $label$3 
	
.LABEL $label$5
	$6 = [15]
	goto $label$3 
	
.LABEL $label$4
	$6 = [19]
	goto $label$3 
	$6
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $181($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8204])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $181($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $185($0)
	
.LABEL $label$1
}

void .FUNC $179 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $183 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8484]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8488])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8484]) = [1]
	$2 = ($2 << [16])
	*([0] + [8488]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8488])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8488]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8484]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8484]) = [1]
	$3 = ($3 << [16])
	*([0] + [8488]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8488])
	
.LABEL $label$10
	*([0] + [8488]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [18599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18645])
	*(($4 = $3) + [16]) = *(($1 + [8]))
	$5 = *($1)
	$2 = *(*($2) + [4])
	$7 = *(($2 + [32]))
	$6 = *(($1 + [32]))
	if ( ((int_64)$6 != (int_64)$7) ){ goto $label$2 }
	$8 = *($1 + [24])
	CALL eosio_assert([1], [18283])
	$8 = ((int_64)$8 + (int_64)*($2 + [24]))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [18345])
	$9 = *($1)
	goto $label$1 
	
.LABEL $label$2
	$8 = *($2 + [24])
	$9 = $5
	$6 = $7
	
.LABEL $label$1
	*(($1 + [32])) = $6
	*(($2 = ($1 + [24]))) = $8
	CALL eosio_assert(((int_64)$5 == (int_64)$9), [18696])
	$10 = $3
	$3 = ($10 + [-48])
	$global$0 = $3
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = $10
	*($4 + [24]) = $4
	$10 = ($1 + [8])
	*($4 + [36]) = $10
	*($4 + [32]) = $1
	*($4 + [40]) = $2
	*($4 + [44]) = ($1 + [40])
	CALL $51(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [52]), (int_64)0, $3, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($4 + [32]) = *($10)
	if ( (CALL $177(($4 + [16]), ($4 + [32]), [8]) == 0) ){ goto $label$4 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$5 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6030912139319414784, ($4 + [24]), $5)
	*($3) = $1
	
.LABEL $label$5
	CALL db_idx64_update($1, (int_64)0, ($4 + [32]))
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6030912137598439424, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [18204])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $140($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-6030912137598439424, $6))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [18204])
	
.LABEL $label$2
	*(($4 + [80])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [24]) = (int_64)0
	*(($1 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	$2 = $3
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$16 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	
.LABEL $label$14
	CALL eosio_assert($6, [18036])
	return $0
	
.LABEL $label$12
	CALL eosio_assert([0], [18036])
	return $0
	
.LABEL $label$11
	CALL eosio_assert([0], [18036])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18255])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $181($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([40])
	$6 = CALL $139($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [28])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $97(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	float_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-6030912137598439424, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $140($6, $8)
	*($3 + [28]) = [0]
	*($3 + [24]) = $6
	$7 = *(*(CALL $141(($3 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [19145])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*(*($5 + [4]) + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	$9 = *(*($5 + [12]))
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$4 }
	$10 = (int_64)-9223372036854775808
	goto $label$3 
	
.LABEL $label$4
	$10 = (Rounds 0)($9)
	
.LABEL $label$3
	$11 = *(*($5 + [16]) + [8])
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17987])
	$12 = ($1 + [16])
	$13 = ($1 + [8])
	$7 = (uint_64)$11 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$14 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$7 = $14
	$8 = [1]
	$15 = $6
	$6 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$7 = $14
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$15 = ($6 + [1])
	$6 = $15
	if ( $8 ){ goto $label$9 }
	$8 = [1]
	$6 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$8 = [0]
	
.LABEL $label$5
	CALL eosio_assert($8, [18036])
	*(($1 + [32])) = $11
	*($1 + [24]) = $10
	$6 = *($5 + [20])
	*($1 + [40]) = *($6)
	*(($1 + [48])) = *(($6 + [8]))
	$6 = *($5 + [24])
	*($1 + [56]) = *($6)
	*(($1 + [64])) = *(($6 + [8]))
	$8 = $2
	$6 = ($8 + [-80])
	$global$0 = $6
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($8 + [-8])
	*($3 + [16]) = $3
	*($3 + [28]) = $13
	*($3 + [24]) = $1
	*($3 + [32]) = $12
	*($3 + [36]) = ($1 + [24])
	*($3 + [40]) = ($1 + [40])
	*($3 + [44]) = ($1 + [56])
	CALL $142(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($4 + [8]), (int_64)-6030912137598439424, *(*($0 + [8])), $7, $6, [72])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$10 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$7 = *(($4 + [8]))
	$14 = *(*(($0 + [8])))
	$10 = *($1)
	*($3 + [24]) = *(($1 + [16]))
	*($1 + [80]) = CALL db_idx64_store($7, (int_64)-6030912137598439424, $14, $10, ($3 + [24]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [228]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18915])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7035929642776002560)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18861])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18861])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $60(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [112])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18255])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $181($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([240])
	CALL $57($5)
	*($5 + [224]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [80])
	*($3 + [72]) = ($5 + [96])
	*($3 + [76]) = ($5 + [112])
	*($3 + [80]) = ($5 + [128])
	*($3 + [84]) = ($5 + [144])
	*($3 + [88]) = ($5 + [160])
	*($3 + [92]) = ($5 + [176])
	*($3 + [96]) = ($5 + [192])
	*($3 + [100]) = ($5 + [200])
	*($3 + [104]) = ($5 + [208])
	*($3 + [108]) = ($5 + [216])
	CALL $155(($3 + [40]), ($3 + [32]))
	*($5 + [228]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $59(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [112])
	return $5
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [288]) == (int_32)$0), [18599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18645])
	$5 = *($1)
	$6 = *(*($2))
	CALL eosio_assert([1], [17987])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [18036])
	*(($1 + [128])) = $6
	*($1 + [120]) = (int_64)0
	$6 = *(*($2))
	CALL eosio_assert([1], [17987])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$10 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [18036])
	*(($1 + [144])) = $6
	*($1 + [136]) = (int_64)0
	$6 = *(*($2))
	CALL eosio_assert([1], [17987])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$7 = $9
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$15 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$10 = [0]
	
.LABEL $label$11
	CALL eosio_assert($10, [18036])
	*(($1 + [160])) = $6
	*($1 + [152]) = (int_64)0
	$6 = *(*($2))
	CALL eosio_assert([1], [17987])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$7 = $9
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$20 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$10 = [0]
	
.LABEL $label$16
	CALL eosio_assert($10, [18036])
	*(($1 + [176])) = $6
	*($1 + [168]) = (int_64)0
	$6 = *(*($2))
	CALL eosio_assert([1], [17987])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$7 = $9
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$25 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$10 = [0]
	
.LABEL $label$21
	CALL eosio_assert($10, [18036])
	*(($1 + [192])) = $6
	*($1 + [184]) = (int_64)0
	*($1 + [112]) = *(*($2 + [4]))
	$8 = *($2 + [8])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($1 + [104]))), [18283])
	$7 = ((int_64)*($1 + [96]) + (int_64)*($8))
	*($1 + [96]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)*($1 + [96]) < (int_64)4611686018427387904), [18345])
	$8 = *($2 + [12])
	*($1 + [200]) = *($8)
	*(($1 + [208])) = *(($8 + [8]))
	$8 = *($2 + [16])
	*($1 + [216]) = *($8)
	*(($1 + [224])) = *(($8 + [8]))
	$8 = *($2 + [20])
	*($1 + [232]) = *($8)
	*(($1 + [240])) = *(($8 + [8]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [18696])
	$10 = $3
	$8 = ($10 + [-288])
	$global$0 = $8
	*($4 + [4]) = $8
	*($4) = $8
	*($4 + [8]) = $10
	*($4 + [16]) = $4
	*($4 + [28]) = ($1 + [8])
	*($4 + [24]) = $1
	*($4 + [32]) = ($1 + [16])
	*($4 + [36]) = ($1 + [32])
	*($4 + [40]) = ($1 + [48])
	*($4 + [44]) = ($1 + [64])
	*($4 + [48]) = ($1 + [80])
	*($4 + [52]) = ($1 + [96])
	*($4 + [56]) = ($1 + [112])
	*($4 + [60]) = ($1 + [120])
	*($4 + [64]) = ($1 + [136])
	*($4 + [68]) = ($1 + [152])
	*($4 + [72]) = ($1 + [168])
	*($4 + [76]) = ($1 + [184])
	*($4 + [80]) = ($1 + [200])
	*($4 + [84]) = ($1 + [216])
	*($4 + [88]) = ($1 + [232])
	*($4 + [92]) = ($1 + [248])
	*($4 + [96]) = ($1 + [264])
	*($4 + [104]) = ($1 + [280])
	*($4 + [100]) = ($1 + [272])
	CALL $6(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [292]), (int_64)0, $8, [288])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$26 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$26
	$global$0 = ($4 + [112])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [224]) == (int_32)$0), [18997])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [19042])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19092])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [228]))
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [15]) = $1
	$1 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($4 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($4 + [17]) & [-16])
	$1 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $168($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $161($0)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *(*($4 + [4]))
	CALL eosio_assert([1], [17987])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [18036])
	*(($1 + [16])) = $6
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = *(*($4 + [8]))
	$10 = $2
	$8 = ($10 + [-128])
	$global$0 = $8
	*($3 + [4]) = $8
	*($3) = $8
	*($3 + [8]) = ($10 + [-15])
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [24])
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = ($1 + [40])
	*($3 + [44]) = ($1 + [48])
	*($3 + [48]) = ($1 + [56])
	*($3 + [52]) = ($1 + [64])
	*($3 + [56]) = ($1 + [72])
	*($3 + [60]) = ($1 + [80])
	*($3 + [64]) = ($1 + [88])
	*($3 + [68]) = ($1 + [96])
	*($3 + [72]) = ($1 + [104])
	*($3 + [76]) = ($1 + [112])
	CALL $88(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [124]) = CALL db_store_i64(*($5 + [8]), (int_64)4849595776697266176, *(*($0 + [8])), $7, $8, [113])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$6 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($3 + [80])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [17981])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [52])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18255])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $181($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([136])
	$6 = CALL $152($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [124])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $90(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$3 = ($global$0 - [272])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17492]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	$9 = *([0] + [8192])
	if ( ((int_32)$9 == (int_32)[8196]) ){ goto $label$5 }
	$10 = (($3 + [8]) + [24])
	$11 = (($3 + [64]) + [113])
	$12 = (($3 + [8]) + [8])
	$13 = (($3 + [8]) + [16])
	$14 = (($3 + [8]) + [32])
	$15 = (($3 + [8]) + [28])
	$16 = ($3 + [228])
	$17 = ($3 + [236])
	$18 = ($3 + [252])
	$19 = ($3 + [260])
	$20 = ($3 + [268])
	
.LOOP $label$6:
	$21 = $9
	$4 = *($21 + [16])
	*($3 + [48]) = $4
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	*($12) = $4)
	*($13) = (int_64)-1
	*($10) = (int_64)0
	*($14) = [0]
	$5 = *($0)
	*($3 + [8]) = $5
	$6 = CALL db_find_i64($5, $4, (int_64)4849595776697266176, *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$6 = CALL $87(($3 + [8]), $6)
	CALL eosio_assert(((int_32)*($6 + [120]) == (int_32)($3 + [8])), [18204])
	CALL eosio_assert([1], [18564])
	CALL eosio_assert(((int_32)*($6 + [120]) == (int_32)($3 + [8])), [18599])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$8()), [18645])
	*($6 + [24]) = *($2)
	$4 = *($6)
	CALL eosio_assert([1], [18696])
	*((($3 + [192]) + [8])) = $11
	*($3 + [196]) = ($3 + [64])
	*($3 + [192]) = ($3 + [64])
	*($3 + [208]) = ($3 + [192])
	*((($3 + [216]) + [8])) = ($6 + [24])
	*($16) = ($6 + [32])
	*((($3 + [216]) + [16])) = ($6 + [40])
	*($17) = ($6 + [48])
	*((($3 + [216]) + [24])) = ($6 + [56])
	*((($3 + [216]) + [28])) = ($6 + [64])
	*((($3 + [216]) + [32])) = ($6 + [72])
	*($18) = ($6 + [80])
	*((($3 + [216]) + [40])) = ($6 + [88])
	*($19) = ($6 + [96])
	*((($3 + [216]) + [48])) = ($6 + [104])
	*($20) = ($6 + [112])
	*($3 + [220]) = ($6 + [8])
	*($3 + [216]) = $6
	CALL $88(($3 + [216]), ($3 + [208]))
	CALL db_update_i64(*($6 + [124]), (int_64)0, ($3 + [64]), [113])
	if ( (uint_64)($4 <= *($13)) ){ goto $label$12 }
	*($13) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$22 = *($10)
	if ( ($22 == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$4 = *($0)
	*((($3 + [216]) + [8])) = $2
	*($3 + [216]) = $1
	*($3 + [220]) = ($3 + [48])
	*($3 + [192]) = $4
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$8()), [18755])
	*((($3 + [64]) + [8])) = ($3 + [192])
	*($3 + [68]) = ($3 + [216])
	*($3 + [64]) = ($3 + [8])
	*(($23 = CALL _Znwj([136])) + [16]) = (int_64)1398362884
	*($23 + [8]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$4 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$4 = $5
	$9 = [1]
	$22 = $6
	$6 = ($22 + [1])
	if ( ((int_32)$22 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$4 = $5
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$22 = ($6 + [1])
	$6 = $22
	if ( $9 ){ goto $label$18 }
	$9 = [1]
	$6 = ($22 + [1])
	if ( ((int_32)$22 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$9 = [0]
	
.LABEL $label$14
	CALL eosio_assert($9, [18036])
	*($23 + [120]) = ($3 + [8])
	CALL $89(($3 + [64]), $23)
	*($3 + [208]) = $23
	$4 = *($23)
	*($3 + [64]) = $4
	$9 = *($23 + [124])
	*($3 + [60]) = $9
	$6 = *($15)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$20 }
	*($6 + [8]) = $4
	*($6 + [16]) = $9
	*($3 + [208]) = [0]
	*($6) = $23
	*($15) = ($6 + [24])
	$6 = *($3 + [208])
	*($3 + [208]) = [0]
	if ( $6 ){ goto $label$19 }
	goto $label$12 
	
.LABEL $label$20
	CALL $90($10, ($3 + [208]), ($3 + [64]), ($3 + [60]))
	$6 = *($3 + [208])
	*($3 + [208]) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	
.LABEL $label$19
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$22 = *($10)
	if ( $22 ){ goto $label$10 }
	
.LABEL $label$11
	$6 = *($21 + [4])
	if ( ($6 == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$6 = *($15)
	if ( ((int_32)$6 == (int_32)$22) ){ goto $label$22 }
	
.LOOP $label$23:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$24 }
	CALL _ZdlPv($9)
	
.LABEL $label$24
	if ( ((int_32)$22 != (int_32)$6) ){ goto $label$23 }
	$6 = *($10)
	goto $label$21 
	
.LABEL $label$22
	$6 = $22
	
.LABEL $label$21
	*($15) = $22
	CALL _ZdlPv($6)
	$6 = *($21 + [4])
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	
.LOOP $label$25:
	$9 = $6
	$6 = *($9)
	if ( $6 ){ goto $label$25 }
	goto $label$7 
	
.LABEL $label$8
	$9 = *($21 + [8])
	if ( ((int_32)*($9) == (int_32)$21) ){ goto $label$7 }
	$22 = ($21 + [8])
	
.LOOP $label$26:
	$6 = *($22)
	$22 = ($6 + [8])
	$9 = *($6 + [8])
	if ( ((int_32)$6 != (int_32)*($9)) ){ goto $label$26 }
	
.LABEL $label$7
	if ( ((int_32)$9 != (int_32)[8196]) ){ goto $label$6 }
	
.LABEL $label$5
	$global$0 = ($3 + [272])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [18599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18645])
	$5 = ($1 + [40])
	*(($4 = $3) + [16]) = *($5)
	*($1 + [48]) = *(*($2))
	$6 = *($1)
	CALL eosio_assert([1], [18696])
	$2 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($7 + [80])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	$9 = ($1 + [48])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $181($2)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($3 + $2)
	*($4 + [24]) = $4
	*($4 + [36]) = $7
	*($4 + [48]) = $5
	*($4 + [52]) = $9
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [24])
	*($4 + [44]) = ($1 + [32])
	*($4 + [56]) = ($1 + [56])
	*($4 + [60]) = ($1 + [64])
	*($4 + [64]) = ($1 + [72])
	*($4 + [68]) = ($1 + [80])
	*($4 + [72]) = ($1 + [88])
	CALL $151(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [100]), (int_64)0, $3, $2)
	if ( ($2 <= [513]) ){ goto $label$4 }
	CALL $185($3)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($4 + [32]) = *($5)
	if ( (CALL $177(($4 + [16]), ($4 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [104])
	$2 = *($1)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$7 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3665743621652480000, ($4 + [24]), $6)
	*($1) = $2
	
.LABEL $label$7
	CALL db_idx64_update($2, (int_64)0, ($4 + [32]))
	
.LABEL $label$6
	$global$0 = ($4 + [80])
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18255])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $181($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [96]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [72])
	*($3 + [68]) = ($5 + [80])
	*($3 + [72]) = ($5 + [88])
	CALL $147(($3 + [32]), ($3 + [24]))
	*($5 + [104]) = [-1]
	*($5 + [100]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $148(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17492]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [44]) = [0]
	$4 = *($0)
	*($3 + [8]) = $4
	*($3 + [16]) = $4
	$6 = CALL db_find_i64($4, $4, (int_64)-3665743621652480000, *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $84(($3 + [8]), $6)
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)($3 + [8])), [18204])
	*($3) = $2
	CALL eosio_assert([1], [18564])
	CALL $85(($3 + [8]), $6, $3)
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$5 }
	$1 = ($3 + [36])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$9 }
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($9 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($9)
	
.LABEL $label$9
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$8 }
	$6 = *(($3 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$6 = $0
	
.LABEL $label$6
	*($1) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$global$0 = ($3 + [48])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [448])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17505]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	*((($3 + [8]) + [32])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	$5 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	*($3 + [16]) = $5)
	$6 = CALL db_find_i64($4, $5, (int_64)7035927889518264320, *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $5(($3 + [8]), $6)
	CALL eosio_assert(((int_32)*($6 + [288]) == (int_32)($3 + [8])), [18204])
	CALL eosio_assert([1], [18564])
	CALL eosio_assert(((int_32)*($6 + [288]) == (int_32)($3 + [8])), [18599])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$8()), [18645])
	*($6 + [248]) = *($2)
	*(($6 + [256])) = *(($2 + [8]))
	$4 = *($6)
	CALL eosio_assert([1], [18696])
	*($3 + [344]) = (($3 + [48]) + [288])
	*($3 + [340]) = ($3 + [48])
	*($3 + [336]) = ($3 + [48])
	*($3 + [352]) = ($3 + [336])
	*($3 + [364]) = ($6 + [8])
	*($3 + [360]) = $6
	*($3 + [368]) = ($6 + [16])
	*($3 + [372]) = ($6 + [32])
	*($3 + [376]) = ($6 + [48])
	*($3 + [380]) = ($6 + [64])
	*($3 + [384]) = ($6 + [80])
	*($3 + [388]) = ($6 + [96])
	*($3 + [392]) = ($6 + [112])
	*($3 + [396]) = ($6 + [120])
	*($3 + [400]) = ($6 + [136])
	*($3 + [404]) = ($6 + [152])
	*($3 + [408]) = ($6 + [168])
	*($3 + [412]) = ($6 + [184])
	*($3 + [416]) = ($6 + [200])
	*($3 + [420]) = ($6 + [216])
	*($3 + [424]) = ($6 + [232])
	*($3 + [428]) = ($6 + [248])
	*($3 + [432]) = ($6 + [264])
	*($3 + [440]) = ($6 + [280])
	*($3 + [436]) = ($6 + [272])
	CALL $6(($3 + [360]), ($3 + [352]))
	CALL db_update_i64(*($6 + [292]), (int_64)0, ($3 + [48]), [288])
	$6 = (($3 + [8]) + [16])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$6 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$2 = *($3 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	$0 = ($3 + [36])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$10 }
	CALL _ZdlPv($9)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$9 }
	$6 = *(($3 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$6 = $2
	
.LABEL $label$7
	*($0) = $2
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$global$0 = ($3 + [448])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18755])
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $1
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *(($3 + [8]))
	*($5 + [16]) = *(($3 + [16]))
	*($5 + [24]) = *(($3 + [24]))
	*($5 + [32]) = *(($3 + [32]))
	*($5 + [40]) = *(($3 + [40]))
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = ($5 + [8])
	*($4 + [72]) = $5
	*($4 + [80]) = ($5 + [16])
	*($4 + [84]) = ($5 + [24])
	*($4 + [88]) = ($5 + [32])
	*($4 + [92]) = ($5 + [40])
	CALL $144(($4 + [72]), ($4 + [64]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, $2, (int_64)7235159550150574080, $4, [48])
	*($5 + [52]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159550150574080) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159550150574081
	
.LABEL $label$1
	*($4 + [72]) = $5
	*($4) = (int_64)7235159550150574080
	*($4 + [48]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159550150574080
	*($3 + [16]) = $6
	*($4 + [72]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $145(($1 + [24]), ($4 + [72]), $4, ($4 + [48]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [96])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [18599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18645])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [40]))) = *(($3 + [40]))
	*(($6 = ($1 + [32]))) = *(($3 + [32]))
	*(($7 = ($1 + [24]))) = *(($3 + [24]))
	*(($8 = ($1 + [16]))) = *(($3 + [16]))
	*(($9 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [18696])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = $9
	*($4 + [72]) = $1
	*($4 + [80]) = $8
	*($4 + [84]) = $7
	*($4 + [88]) = $6
	*($4 + [92]) = $5
	CALL $144(($4 + [72]), ($4 + [64]))
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159550150574080) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159550150574081
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

int_32 .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $183($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [19201])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $150($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $166($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $166($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $161($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $148 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $145 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $149(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $141 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [76]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18915])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6030912137598439424)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18861])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18861])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $140(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18255])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $181($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([88])
	CALL $65($5)
	*($5 + [72]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [56])
	CALL $109(($3 + [40]), ($3 + [32]))
	*($5 + [80]) = [-1]
	*($5 + [76]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $67(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $0, [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18806])
	$2 = *($0 + [4])
	$3 = *($2 + [80])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-6030912137598439424, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [80]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [18204])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $140($6, CALL $fimport$7(*($6), *($6 + [8]), (int_64)-6030912137598439424, $5))
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [18204])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [80])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [18997])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [19042])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19092])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [76]))
	$6 = *(($1 + [80]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6030912137598439424, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *(*($4) + [4])
	*($1) = *($5 + [8])
	$6 = *(($5 + [32]))
	$7 = *($0)
	CALL eosio_assert([1], [17987])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [18036])
	*(($1 + [16])) = $6
	*($1 + [8]) = (int_64)0
	$5 = *(*($4) + [4])
	*($1 + [24]) = *($5 + [24])
	*(($1 + [32])) = *(($5 + [32]))
	$10 = $2
	$5 = ($10 + [-48])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = $10
	*($3 + [24]) = ($3 + [8])
	$10 = ($1 + [8])
	*($3 + [36]) = $10
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [24])
	*($3 + [44]) = ($1 + [40])
	CALL $51(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($7 + [8]), (int_64)-6030912139319414784, *(*($0 + [8])), $8, $5, [48])
	if ( (uint_64)($8 <= *($7 + [16])) ){ goto $label$6 }
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$8 = *(($7 + [8]))
	$9 = *(*(($0 + [8])))
	$6 = *($1)
	*($3 + [32]) = *($10)
	*($1 + [56]) = CALL db_idx64_store($8, (int_64)-6030912139319414784, $9, $6, ($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [48])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $10(($7 + [28]), [72])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	*($5 + [28]) = ($4 + [8])
	*($5 + [32]) = ($4 + [16])
	*($5 + [36]) = ($4 + [24])
	*($5 + [40]) = ($4 + [40])
	*($5 + [44]) = ($4 + [56])
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $142(($5 + [24]), ($5 + [16]))
	$4 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$12 = ($4 - $8)
	$9 = [0]
	
.LOOP $label$7:
	$2 = ($8 + $9)
	*((($4 = ($7 + $9)) + [-32])) = *(($2 + [-32]))
	*(($4 + [-40])) = *(($2 + [-40]))
	*(($1 = ($4 + [-24]))) = (int_64)0
	*(($6 = ($4 + [-16]))) = [0]
	$3 = ($2 + [-24])
	*($1) = *($3)
	$1 = ($2 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($4 + [-12]))) = (int_64)0
	*(($4 = ($4 + [-4]))) = [0]
	$6 = ($2 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$2 = ($2 + [-4])
	*($4) = *($2)
	*($2) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$7 }
	$7 = ($7 + $9)
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($4 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($4 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($4 + [-40])
	$9 = *(($4 + [-24]))
	if ( ($9 == 0) ){ goto $label$11 }
	*(($4 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$11
	$4 = $2
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($5 + [48])
	(unreachable)
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$1), [18204])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $78($1, $5)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$1), [18204])
	
.LABEL $label$2
	*($0) = *($5)
	*(($0 + [40])) = *(($5 + [40]))
	*(($0 + [32])) = *(($5 + [32]))
	*(($0 + [24])) = *(($5 + [24]))
	*(($0 + [16])) = *(($5 + [16]))
	*(($0 + [8])) = *(($5 + [8]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $79($4, $1, $2, ($4 + [8]))
	$5 = *($4 + [4])
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	*(($0 + [16])) = *(($5 + [16]))
	*(($0 + [24])) = *(($5 + [24]))
	*(($0 + [32])) = *(($5 + [32]))
	*(($0 + [40])) = *(($5 + [40]))
	$global$0 = ($4 + [16])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [18204])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $78($0, $4)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [18204])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18564])
	CALL $80($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $81($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL require_recipient(*($1 + [8]))
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [17492]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	*(($2 + [136])) = [0]
	*($2 + [120]) = (int_64)-1
	*($2 + [128]) = (int_64)0
	$3 = *($0)
	*($2 + [104]) = $3
	*($2 + [112]) = $3
	*($2 + [16]) = (int_64)0
	*($2 + [8]) = (int_64)1
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = (int_64)0
	CALL $76(($2 + [56]), ($2 + [104]), $3, ($2 + [8]))
	*($2 + [56]) = *($1)
	CALL $77(($2 + [104]), ($2 + [56]), *($0))
	$0 = *($2 + [128])
	if ( ($0 == 0) ){ goto $label$5 }
	$1 = ($2 + [132])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	CALL _ZdlPv($8)
	
.LABEL $label$9
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($2 + [128]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $0
	
.LABEL $label$6
	*($1) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($2 + [144])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18255])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $181($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	CALL $146(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)7235159550150574080
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159550150574080
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $145(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18755])
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $1
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *(($3 + [8]))
	*($5 + [16]) = *(($3 + [16]))
	*($5 + [24]) = *(($3 + [24]))
	*($5 + [32]) = *(($3 + [32]))
	*($5 + [40]) = *(($3 + [40]))
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = ($5 + [8])
	*($4 + [72]) = $5
	*($4 + [80]) = ($5 + [16])
	*($4 + [84]) = ($5 + [24])
	*($4 + [88]) = ($5 + [32])
	*($4 + [92]) = ($5 + [40])
	CALL $144(($4 + [72]), ($4 + [64]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, $2, (int_64)7235159550150574080, $4, [48])
	*($5 + [52]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159550150574080) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159550150574081
	
.LABEL $label$1
	*($4 + [72]) = $5
	*($4) = (int_64)7235159550150574080
	*($4 + [48]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159550150574080
	*($3 + [16]) = $6
	*($4 + [72]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $145(($1 + [24]), ($4 + [72]), $4, ($4 + [48]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [96])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL memory()
	*($3 + [224]) = (int_64)1543924800000000
	*($3 + [216]) = $0
	*($3 + [232]) = (int_64)3600000000
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17183]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$6 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$9 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17933]
	$7 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$15 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$8 = ($8 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$11
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$10 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$17 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17454]
	$7 = (int_64)0
	
.LOOP $label$18:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$19 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$8 = ($8 + [-91])
	goto $label$20 
	
.LABEL $label$21
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$19
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$18 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$17 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17945]
	$7 = (int_64)0
	
.LOOP $label$22:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$23 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$8 = ($8 + [-91])
	goto $label$24 
	
.LABEL $label$25
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$23
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$22 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$16 }
	
.LABEL $label$17
	*($3 + [212]) = [0]
	*($3 + [208]) = [1]
	*($3 + [8]) = *($3 + [208])
	CALL $99(($3 + [216]), ($3 + [8]))
	goto $label$8 
	
.LABEL $label$16
	CALL eosio_assert([0], [17958])
	
.LABEL $label$9
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $173([0])
	$global$0 = ($3 + [240])
	return (unreachable)
	
.LABEL $label$7
	if ( ((int_64)$2 > (int_64)-2039333636193099265) ){ goto $label$37 }
	if ( ((int_64)$2 > (int_64)-5003311465336143873) ){ goto $label$36 }
	if ( ((int_64)$2 == (int_64)-7954134735498772480) ){ goto $label$34 }
	if ( ((int_64)$2 == (int_64)-6215782880300269568) ){ goto $label$33 }
	if ( ((int_64)$2 != (int_64)-6030912137598365184) ){ goto $label$26 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [2]
	*($3 + [56]) = *($3 + [160])
	CALL $100(($3 + [216]), ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$37
	if ( ((int_64)$2 > (int_64)4921565097123381247) ){ goto $label$35 }
	if ( ((int_64)$2 == (int_64)-2039333636193099264) ){ goto $label$32 }
	if ( ((int_64)$2 == (int_64)4157533654843044352) ){ goto $label$31 }
	if ( ((int_64)$2 != (int_64)4849595776591986688) ){ goto $label$26 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [3]
	*($3 + [72]) = *($3 + [144])
	CALL $101(($3 + [216]), ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$36
	if ( ((int_64)$2 == (int_64)-5003311465336143872) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)-4060121945827298816) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)-3665743311353675776) ){ goto $label$26 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [4]
	*($3 + [32]) = *($3 + [184])
	CALL $101(($3 + [216]), ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$35
	if ( ((int_64)$2 == (int_64)8421045207927095296) ){ goto $label$28 }
	if ( ((int_64)$2 == (int_64)7035937819079999488) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)4921565097123381248) ){ goto $label$26 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [5]
	*($3 + [16]) = *($3 + [200])
	CALL $102(($3 + [216]), ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$34
	*($3 + [124]) = [0]
	*($3 + [120]) = [6]
	*($3 + [96]) = *($3 + [120])
	CALL $103(($3 + [216]), ($3 + [96]))
	CALL eosio_exit([0])
	
.LABEL $label$33
	*($3 + [180]) = [0]
	*($3 + [176]) = [7]
	*($3 + [40]) = *($3 + [176])
	CALL $99(($3 + [216]), ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$32
	*($3 + [156]) = [0]
	*($3 + [152]) = [8]
	*($3 + [64]) = *($3 + [152])
	CALL $102(($3 + [216]), ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$31
	*($3 + [172]) = [0]
	*($3 + [168]) = [9]
	*($3 + [48]) = *($3 + [168])
	CALL $104(($3 + [216]), ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$30
	*($3 + [132]) = [0]
	*($3 + [128]) = [10]
	*($3 + [88]) = *($3 + [128])
	CALL $99(($3 + [216]), ($3 + [88]))
	CALL eosio_exit([0])
	
.LABEL $label$29
	*($3 + [116]) = [0]
	*($3 + [112]) = [11]
	*($3 + [104]) = *($3 + [112])
	CALL $105(($3 + [216]), ($3 + [104]))
	CALL eosio_exit([0])
	
.LABEL $label$28
	*($3 + [140]) = [0]
	*($3 + [136]) = [12]
	*($3 + [80]) = *($3 + [136])
	CALL $103(($3 + [216]), ($3 + [80]))
	CALL eosio_exit([0])
	
.LABEL $label$27
	*($3 + [196]) = [0]
	*($3 + [192]) = [13]
	*($3 + [24]) = *($3 + [192])
	CALL $106(($3 + [216]), ($3 + [24]))
	
.LABEL $label$26
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $181($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$8 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$8 = $9
	$2 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$8 = $9
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [18036])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = $3
	CALL $107(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $185($6)
	
.LABEL $label$9
	*(($2 = (($3 + [64]) + [8]))) = *(($3 + [24]))
	*($3 + [64]) = *($3 + [16])
	$8 = *(($3 + [8]))
	$9 = *($3)
	$1 = CALL $162(($3 + [48]), ($3 + [32]))
	*((($3 + [80]) + [8])) = *($2)
	*($3 + [104]) = $9
	*($3 + [96]) = $8
	*($3 + [80]) = *($3 + [64])
	$2 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$10 }
	$5 = *((*($2) + $5))
	
.LABEL $label$10
	CALL void $2((int_32 ($3 + [104])), (int_32 ($3 + [96])), (int_32 ($3 + [80])), (int_32 $1), (int_32 $5))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$11
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$12
	$global$0 = ($3 + [112])
	return [1]
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($0)
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [17192]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$11 = ($11 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$1 }
	*($1 + [8]) = (int_64)10000
	*($1) = $9
	$10 = *(*($4))
	CALL eosio_assert([1], [17987])
	$12 = ($1 + [8])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$6 = $7
	$11 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $7
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $11 ){ goto $label$9 }
	$11 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$11 = [0]
	
.LABEL $label$5
	CALL eosio_assert($11, [18036])
	*(($1 + [24])) = $10
	*($1 + [16]) = (int_64)0
	$10 = *(*($4))
	CALL eosio_assert([1], [17987])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$6 = $7
	$11 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$6 = $7
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $11 ){ goto $label$14 }
	$11 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$11 = [0]
	
.LABEL $label$10
	CALL eosio_assert($11, [18036])
	*(($1 + [40])) = $10
	*($1 + [32]) = (int_64)0
	$10 = *(*($4))
	CALL eosio_assert([1], [17987])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$6 = $7
	$11 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$6 = $7
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $11 ){ goto $label$19 }
	$11 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$11 = [0]
	
.LABEL $label$15
	CALL eosio_assert($11, [18036])
	*(($1 + [56])) = $10
	*($1 + [48]) = (int_64)0
	$10 = *(*($4))
	CALL eosio_assert([1], [17987])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$6 = $7
	$11 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$6 = $7
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $11 ){ goto $label$24 }
	$11 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$11 = [0]
	
.LABEL $label$20
	CALL eosio_assert($11, [18036])
	*(($1 + [72])) = $10
	*($1 + [64]) = (int_64)0
	$10 = *(*($4))
	CALL eosio_assert([1], [17987])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$6 = $7
	$11 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$6 = $7
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $11 ){ goto $label$29 }
	$11 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$11 = [0]
	
.LABEL $label$25
	CALL eosio_assert($11, [18036])
	*(($1 + [88])) = $10
	*($1 + [80]) = (int_64)0
	$10 = *(*($4))
	CALL eosio_assert([1], [17987])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$6 = $7
	$11 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$33
	$6 = $7
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$31 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $11 ){ goto $label$34 }
	$11 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$11 = [0]
	
.LABEL $label$30
	CALL eosio_assert($11, [18036])
	*(($1 + [104])) = $10
	*($1 + [96]) = (int_64)0
	*($1 + [112]) = (int_64)0
	$10 = *(*($4))
	CALL eosio_assert([1], [17987])
	$14 = ($1 + [112])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$37:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$36 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$38 }
	$6 = $7
	$11 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$38
	$6 = $7
	
.LOOP $label$39:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$36 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $11 ){ goto $label$39 }
	$11 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	$11 = [0]
	
.LABEL $label$35
	CALL eosio_assert($11, [18036])
	*(($1 + [128])) = $10
	*($1 + [120]) = (int_64)0
	$10 = *(*($4))
	CALL eosio_assert([1], [17987])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$43 }
	$6 = $7
	$11 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$43
	$6 = $7
	
.LOOP $label$44:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$41 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $11 ){ goto $label$44 }
	$11 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	$11 = [0]
	
.LABEL $label$40
	CALL eosio_assert($11, [18036])
	*(($1 + [144])) = $10
	*($1 + [136]) = (int_64)0
	$10 = *(*($4))
	CALL eosio_assert([1], [17987])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$47:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$46 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$48 }
	$6 = $7
	$11 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$48
	$6 = $7
	
.LOOP $label$49:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$46 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $11 ){ goto $label$49 }
	$11 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$46
	$11 = [0]
	
.LABEL $label$45
	CALL eosio_assert($11, [18036])
	*(($1 + [160])) = $10
	*($1 + [152]) = (int_64)0
	$10 = *(*($4))
	CALL eosio_assert([1], [17987])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$52:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$51 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$53 }
	$6 = $7
	$11 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$53
	$6 = $7
	
.LOOP $label$54:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$51 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $11 ){ goto $label$54 }
	$11 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$51
	$11 = [0]
	
.LABEL $label$50
	CALL eosio_assert($11, [18036])
	*(($1 + [176])) = $10
	*($1 + [168]) = (int_64)0
	$10 = *(*($4))
	CALL eosio_assert([1], [17987])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$57:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$56 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$58 }
	$6 = $7
	$11 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$58
	$6 = $7
	
.LOOP $label$59:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$56 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $11 ){ goto $label$59 }
	$11 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$56
	$11 = [0]
	
.LABEL $label$55
	CALL eosio_assert($11, [18036])
	*(($1 + [192])) = $10
	*($1 + [184]) = (int_64)0
	$11 = $2
	$8 = ($11 + [-288])
	$global$0 = $8
	*($3 + [4]) = $8
	*($3) = $8
	*($3 + [8]) = $11
	*($3 + [16]) = $3
	*($3 + [28]) = $12
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = ($1 + [48])
	*($3 + [44]) = ($1 + [64])
	*($3 + [48]) = ($1 + [80])
	*($3 + [52]) = ($1 + [96])
	*($3 + [56]) = $14
	*($3 + [60]) = ($1 + [120])
	*($3 + [64]) = ($1 + [136])
	*($3 + [68]) = ($1 + [152])
	*($3 + [72]) = ($1 + [168])
	*($3 + [76]) = ($1 + [184])
	*($3 + [80]) = ($1 + [200])
	*($3 + [84]) = ($1 + [216])
	*($3 + [88]) = ($1 + [232])
	*($3 + [92]) = ($1 + [248])
	*($3 + [96]) = ($1 + [264])
	*($3 + [104]) = ($1 + [280])
	*($3 + [100]) = ($1 + [272])
	CALL $6(($3 + [24]), ($3 + [16]))
	$6 = *($1)
	*($1 + [292]) = CALL db_store_i64(*($5 + [8]), (int_64)7035927889518264320, *(*($0 + [8])), $6, $8, [288])
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$60 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$60
	$global$0 = ($3 + [112])
}

void .FUNC $95 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17454]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	$5 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	*($3 + [16]) = $5)
	$6 = CALL db_find_i64($4, $5, (int_64)-4157661275913060352, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$11 }
	$6 = CALL $64(($3 + [8]), $6)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($3 + [8])), [18204])
	if ( (int_64)(*($2) == 0) ){ goto $label$10 }
	CALL eosio_assert([1], [18564])
	CALL eosio_assert(((int_32)*(($6 + [24])) == (int_32)($3 + [8])), [18599])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$8()), [18645])
	*($6 + [8]) = *($2)
	*(($9 = ($6 + [16]))) = *(($2 + [8]))
	$4 = *($6)
	CALL eosio_assert([1], [18696])
	CALL eosio_assert([1], [17981])
	CALL memcpy(($3 + [48]), $6, [8])
	CALL eosio_assert([1], [17981])
	CALL memcpy((($3 + [48]) | [8]), ($6 + [8]), [8])
	CALL eosio_assert([1], [17981])
	CALL memcpy((($3 + [48]) + [16]), $9, [8])
	CALL db_update_i64(*($6 + [28]), (int_64)0, ($3 + [48]), [24])
	$6 = (($3 + [8]) + [16])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$7 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$0 = *($3 + [32])
	if ( $0 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$11
	if ( (int_64)(*($2) == 0) ){ goto $label$7 }
	$8 = *($0)
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$8()), [18755])
	*(($10 = CALL _Znwj([40])) + [16]) = (int_64)1398362884
	*($10 + [8]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$11 = ($10 + [16])
	$12 = ($10 + [8])
	$4 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$4 = $5
	$9 = [1]
	$0 = $6
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$12 }
	goto $label$8 
	
.LABEL $label$13
	$4 = $5
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$0 = ($6 + [1])
	$6 = $0
	if ( $9 ){ goto $label$14 }
	$9 = [1]
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$12 }
	goto $label$8 
	
.LABEL $label$10
	CALL eosio_assert([1], [18963])
	CALL eosio_assert([1], [18806])
	$9 = CALL db_next_i64(*($6 + [28]), ($3 + [48]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	CALL $64(($3 + [8]), $9)
	
.LABEL $label$15
	CALL $96(($3 + [8]), $6)
	$0 = *($3 + [32])
	if ( $0 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$9
	$9 = [0]
	
.LABEL $label$8
	CALL eosio_assert($9, [18036])
	*($10 + [24]) = ($3 + [8])
	*($10) = $1
	*($12) = *($2)
	*(($12 + [8])) = *(($2 + [8]))
	CALL eosio_assert([1], [17981])
	CALL memcpy(($3 + [48]), $10, [8])
	CALL eosio_assert([1], [17981])
	CALL memcpy((($3 + [48]) | [8]), $12, [8])
	CALL eosio_assert([1], [17981])
	CALL memcpy((($3 + [48]) + [16]), $11, [8])
	$4 = *($10)
	$9 = CALL db_store_i64(*((($3 + [8]) + [8])), (int_64)-4157661275913060352, $8, $4, ($3 + [48]), [24])
	*($10 + [28]) = $9
	$6 = (($3 + [8]) + [16])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$16 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($3 + [88]) = $10
	$4 = *($10)
	*($3 + [48]) = $4
	*($3 + [84]) = $9
	$0 = ($3 + [36])
	$6 = *($0)
	if ( ((uint_32)$6 >= (uint_32)*(($3 + [40]))) ){ goto $label$18 }
	*($6 + [8]) = $4
	*($6 + [16]) = $9
	*($3 + [88]) = [0]
	*($6) = $10
	*($0) = ($6 + [24])
	$6 = *($3 + [88])
	*($3 + [88]) = [0]
	if ( $6 ){ goto $label$17 }
	goto $label$7 
	
.LABEL $label$18
	CALL $97(($3 + [32]), ($3 + [88]), ($3 + [48]), ($3 + [84]))
	$6 = *($3 + [88])
	*($3 + [88]) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$17
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = ($3 + [36])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$20 }
	
.LOOP $label$21:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$22 }
	CALL _ZdlPv($9)
	
.LABEL $label$22
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$21 }
	$6 = *(($3 + [32]))
	goto $label$19 
	
.LABEL $label$20
	$6 = $0
	
.LABEL $label$19
	*($2) = $0
	CALL _ZdlPv($6)
	$global$0 = ($3 + [96])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [96])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [18997])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [19042])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19092])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_64 $25
	int_32 $26
	int_64 $27
	int_64 $28
	$2 = ($global$0 - [288])
	$global$0 = $2
	CALL require_auth(*($1))
	*((($2 + [168]) + [32])) = [0]
	*($2 + [184]) = (int_64)-1
	*($2 + [192]) = (int_64)0
	$3 = *($0)
	*($2 + [168]) = $3
	*($2 + [176]) = $3
	*($2 + [216]) = (int_64)0
	*($2 + [224]) = (int_64)0
	*($2 + [232]) = (int_64)0
	*($2 + [240]) = (int_64)0
	*($2 + [248]) = (int_64)0
	*($2 + [208]) = (int_64)1
	CALL $76(($2 + [120]), ($2 + [168]), $3, ($2 + [208]))
	CALL eosio_assert(((int_64)*($2 + [120]) == (int_64)1), [17518])
	$4 = *([0] + [8192])
	if ( ((int_32)$4 == (int_32)[8196]) ){ goto $label$3 }
	$5 = (($2 + [208]) + [48])
	$6 = (($2 + [208]) + [32])
	$7 = (($2 + [208]) + [16])
	$8 = (($2 + [208]) | [1])
	$9 = (($2 + [64]) | [1])
	$10 = (($2 + [80]) + [8])
	$11 = (($2 + [80]) + [24])
	$12 = ($2 + [116])
	$13 = (($2 + [80]) + [28])
	$14 = ($2 + [36])
	$15 = ($2 + [44])
	
.LOOP $label$4:
	$16 = $4
	$17 = *($16 + [32])
	$3 = (uint_64)*($16 + [16]) >> (uint_64)(int_64)8
	*($10) = $3)
	*(($18 = (($2 + [80]) + [16]))) = (int_64)-1
	*($11) = (int_64)0
	*((($2 + [80]) + [32])) = [0]
	*($12) = [0]
	$19 = *($0)
	*($2 + [80]) = $19
	$20 = CALL db_find_i64($19, $3, (int_64)-6030912139319414784, *($1))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$5 }
	$21 = CALL $50(($2 + [80]), $20)
	CALL eosio_assert(((int_32)*($21 + [48]) == (int_32)($2 + [80])), [18204])
	if ( ((int_64)*($21 + [24]) < (int_64)1) ){ goto $label$5 }
	*(($22 = (($2 + [64]) + [8]))) = [0]
	*($2 + [64]) = (int_64)0
	$20 = CALL $178([17561])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$8 }
	*($2 + [64]) = ($20 << [1])
	$4 = $9
	if ( $20 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$23 = (($20 + [16]) & [-16])
	$4 = CALL _Znwj($23)
	*($22) = $4
	*($2 + [64]) = ($23 | [1])
	*($2 + [68]) = $20
	
.LABEL $label$7
	CALL memcpy($4, [17561], $20)
	
.LABEL $label$6
	*(($4 + $20)) = [0]
	*(($24 = (($2 + [208]) + [8]))) = [0]
	*($2 + [208]) = (int_64)0
	$20 = CALL $178([17163])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$11 }
	*($2 + [208]) = ($20 << [1])
	$4 = $8
	if ( $20 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$23 = (($20 + [16]) & [-16])
	$4 = CALL _Znwj($23)
	*($24) = $4
	*($2 + [208]) = ($23 | [1])
	*($2 + [212]) = $20
	
.LABEL $label$10
	CALL memcpy($4, [17163], $20)
	
.LABEL $label$9
	*(($4 + $20)) = [0]
	$20 = *($2 + [208])
	$4 = ($20 & [1])
	CALL $168(($2 + [64]), ( *($24) ? $8 : $4 ), ( *($2 + [212]) ? uint_32($20 >> [1]) : $4 ))
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($24))
	
.LABEL $label$12
	$23 = ($21 + [24])
	$25 = *($0)
	$3 = (int_64)6
	
.LOOP $label$13:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$13 }
	*(($26 = (($2 + [8]) + [8]))) = (int_64)3617214756542218240
	*($2 + [8]) = $25
	$3 = (int_64)0
	$27 = (int_64)59
	$20 = [17183]
	$28 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$19 }
	$4 = *($20)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$4 = ($4 + [-91])
	goto $label$17 
	
.LABEL $label$19
	$19 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$27 & (int_64)4294967295))
	
.LABEL $label$15
	$20 = ($20 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$28 = ((int_64)$19 | (int_64)$28)
	$27 = ((int_64)$27 + (int_64)4294967291)
	if ( ((int_64)$27 != (int_64)55834574842) ){ goto $label$14 }
	*($24) = *($1)
	*($7) = *($23)
	*(($7 + [8])) = *(($23 + [8]))
	*($2 + [208]) = $25
	CALL $162($6, ($2 + [64]))
	CALL $9(($2 + [272]), CALL $8(($2 + [24]), ($2 + [8]), $17, $28, ($2 + [208])))
	$20 = *($2 + [272])
	CALL send_inline($20, (*($2 + [276]) - $20))
	$20 = *($2 + [272])
	if ( ($20 == 0) ){ goto $label$20 }
	*($2 + [276]) = $20
	CALL _ZdlPv($20)
	
.LABEL $label$20
	$20 = *((($2 + [24]) + [28]))
	if ( ($20 == 0) ){ goto $label$21 }
	*((($2 + [24]) + [32])) = $20
	CALL _ZdlPv($20)
	
.LABEL $label$21
	$20 = *((($2 + [24]) + [16]))
	if ( ($20 == 0) ){ goto $label$22 }
	*($15) = $20
	CALL _ZdlPv($20)
	
.LABEL $label$22
	if ( ((*($6) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*((($2 + [208]) + [40])))
	
.LABEL $label$23
	CALL eosio_assert([1], [18564])
	CALL eosio_assert(((int_32)*(($21 + [48])) == (int_32)($2 + [80])), [18599])
	CALL eosio_assert(((int_64)*($2 + [80]) == (int_64)CALL $fimport$8()), [18645])
	$20 = ($21 + [8])
	*($2 + [264]) = *($20)
	$3 = *($21)
	CALL eosio_assert([1], [18473])
	*($23) = (int_64)0
	CALL eosio_assert([1], [18521])
	CALL eosio_assert(((int_64)*($23) < (int_64)4611686018427387904), [18543])
	CALL eosio_assert(((int_64)$3 == (int_64)*($21)), [18696])
	*($26) = $5
	*($2 + [12]) = ($2 + [208])
	*($2 + [8]) = ($2 + [208])
	*($2 + [272]) = ($2 + [8])
	*((($2 + [24]) + [8])) = $23
	*($14) = ($21 + [40])
	*($2 + [28]) = $20
	*($2 + [24]) = $21
	CALL $51(($2 + [24]), ($2 + [272]))
	CALL db_update_i64(*($21 + [52]), (int_64)0, ($2 + [208]), [48])
	if ( (uint_64)($3 <= *($18)) ){ goto $label$24 }
	*($18) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	*($2 + [24]) = *($20)
	if ( (CALL $177(($2 + [264]), ($2 + [24]), [8]) == 0) ){ goto $label$25 }
	$4 = ($21 + [56])
	$20 = *($4)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$26 }
	$20 = CALL db_idx64_find_primary(*($2 + [80]), *($10), (int_64)-6030912139319414784, ($2 + [272]), $3)
	*($4) = $20
	
.LABEL $label$26
	CALL db_idx64_update($20, (int_64)0, ($2 + [24]))
	
.LABEL $label$25
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($22))
	
.LABEL $label$5
	$21 = *($11)
	if ( ($21 == 0) ){ goto $label$27 }
	$20 = *($13)
	if ( ((int_32)$20 == (int_32)$21) ){ goto $label$29 }
	
.LOOP $label$30:
	$20 = ($20 + [-24])
	$4 = *($20)
	*($20) = [0]
	if ( ($4 == 0) ){ goto $label$31 }
	CALL _ZdlPv($4)
	
.LABEL $label$31
	if ( ((int_32)$21 != (int_32)$20) ){ goto $label$30 }
	$20 = *($11)
	goto $label$28 
	
.LABEL $label$29
	$20 = $21
	
.LABEL $label$28
	*($13) = $21
	CALL _ZdlPv($20)
	
.LABEL $label$27
	$20 = *($16 + [4])
	if ( ($20 == 0) ){ goto $label$33 }
	
.LOOP $label$34:
	$4 = $20
	$20 = *($4)
	if ( $20 ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$4 = *($16 + [8])
	if ( ((int_32)*($4) == (int_32)$16) ){ goto $label$32 }
	$21 = ($16 + [8])
	
.LOOP $label$35:
	$20 = *($21)
	$21 = ($20 + [8])
	$4 = *($20 + [8])
	if ( ((int_32)$20 != (int_32)*($4)) ){ goto $label$35 }
	
.LABEL $label$32
	if ( ((int_32)$4 != (int_32)[8196]) ){ goto $label$4 }
	
.LABEL $label$3
	$21 = *($2 + [192])
	if ( ($21 == 0) ){ goto $label$36 }
	$16 = ($2 + [196])
	$20 = *($16)
	if ( ((int_32)$20 == (int_32)$21) ){ goto $label$38 }
	
.LOOP $label$39:
	$20 = ($20 + [-24])
	$4 = *($20)
	*($20) = [0]
	if ( ($4 == 0) ){ goto $label$40 }
	CALL _ZdlPv($4)
	
.LABEL $label$40
	if ( ((int_32)$21 != (int_32)$20) ){ goto $label$39 }
	$20 = *(($2 + [192]))
	goto $label$37 
	
.LABEL $label$38
	$20 = $21
	
.LABEL $label$37
	*($16) = $21
	CALL _ZdlPv($20)
	
.LABEL $label$36
	$global$0 = ($2 + [288])
	return (unreachable)
	
.LABEL $label$2
	CALL $161(($2 + [64]))
	
.LABEL $label$1
	CALL $161(($2 + [208]))
	(unreachable)
}

void .FUNC $92 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [17492]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	*(($2 + [136])) = [0]
	*($2 + [120]) = (int_64)-1
	*($2 + [128]) = (int_64)0
	$3 = *($0)
	*($2 + [104]) = $3
	*($2 + [112]) = $3
	*($2 + [16]) = (int_64)0
	*($2 + [8]) = (int_64)1
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = (int_64)0
	CALL $76(($2 + [56]), ($2 + [104]), $3, ($2 + [8]))
	*($2 + [56]) = (int_64)1
	CALL $77(($2 + [104]), ($2 + [56]), *($0))
	$8 = *([0] + [8192])
	if ( ((int_32)$8 == (int_32)[8196]) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = $8
	$5 = *($0 + [4])
	if ( ($5 == 0) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = $5
	$5 = *($8)
	if ( $5 ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = *($0 + [8])
	if ( ((int_32)*($8) == (int_32)$0) ){ goto $label$7 }
	$0 = ($0 + [8])
	
.LOOP $label$10:
	$5 = *($0)
	$0 = ($5 + [8])
	$8 = *($5 + [8])
	if ( ((int_32)$5 != (int_32)*($8)) ){ goto $label$10 }
	
.LABEL $label$7
	if ( ((int_32)$8 != (int_32)[8196]) ){ goto $label$6 }
	
.LABEL $label$5
	$0 = *($2 + [128])
	if ( ($0 == 0) ){ goto $label$11 }
	$9 = ($2 + [132])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	CALL _ZdlPv($8)
	
.LABEL $label$15
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($2 + [128]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $0
	
.LABEL $label$12
	*($9) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$global$0 = ($2 + [144])
}

void .FUNC $93 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [17492]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	$8 = *([0] + [8192])
	if ( ((int_32)$8 == (int_32)[8196]) ){ goto $label$5 }
	$9 = (($2 + [8]) + [24])
	$10 = ($2 + [24])
	$11 = ($2 + [40])
	$12 = ($2 + [36])
	
.LOOP $label$6:
	$13 = $8
	$3 = *($13 + [16])
	*($2 + [48]) = $3
	*((($2 + [8]) + [8])) = (uint_64)$3 >> (uint_64)(int_64)8)
	*($10) = (int_64)-1
	*($9) = (int_64)0
	*($11) = [0]
	$3 = *($0)
	*($2 + [8]) = $3
	*($2) = ($2 + [48])
	*($2 + [88]) = $3
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$8()), [18755])
	*((($2 + [64]) + [8])) = ($2 + [88])
	*($2 + [68]) = $2
	*($2 + [64]) = ($2 + [8])
	$5 = CALL _Znwj([304])
	CALL $30($5)
	*($5 + [288]) = ($2 + [8])
	CALL $94(($2 + [64]), $5)
	*($2 + [80]) = $5
	$3 = *($5)
	*($2 + [64]) = $3
	$14 = *($5 + [292])
	*($2 + [60]) = $14
	$8 = *($12)
	if ( ((uint_32)$8 >= (uint_32)*($11)) ){ goto $label$9 }
	*($8 + [8]) = $3
	*($8 + [16]) = $14
	*($2 + [80]) = [0]
	*($8) = $5
	*($12) = ($8 + [24])
	$5 = *($2 + [80])
	*($2 + [80]) = [0]
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $32($9, ($2 + [80]), ($2 + [64]), ($2 + [60]))
	$5 = *($2 + [80])
	*($2 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($5)
	
.LABEL $label$7
	$14 = *($9)
	if ( ($14 == 0) ){ goto $label$10 }
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$14) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((int_32)$14 != (int_32)$5) ){ goto $label$13 }
	$5 = *($9)
	goto $label$11 
	
.LABEL $label$12
	$5 = $14
	
.LABEL $label$11
	*($12) = $14
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$5 = *($13 + [4])
	if ( ($5 == 0) ){ goto $label$16 }
	
.LOOP $label$17:
	$8 = $5
	$5 = *($8)
	if ( $5 ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$8 = *($13 + [8])
	if ( ((int_32)*($8) == (int_32)$13) ){ goto $label$15 }
	$14 = ($13 + [8])
	
.LOOP $label$18:
	$5 = *($14)
	$14 = ($5 + [8])
	$8 = *($5 + [8])
	if ( ((int_32)$5 != (int_32)*($8)) ){ goto $label$18 }
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)[8196]) ){ goto $label$6 }
	
.LABEL $label$5
	$global$0 = ($2 + [96])
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18278])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18278])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$0 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $139 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)0
	*(($3 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [17987])
	$4 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [18036])
	*($0 + [24]) = $1
	$3 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($0, *($3 + [4]), [8])
	$6 = (*($3 + [4]) + [8])
	*($3 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $6) > (uint_32)[7]), [18278])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$6 = (*($3 + [4]) + [8])
	*($3 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $6) > (uint_32)[7]), [18278])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $130 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [17987])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18036])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18036])
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$1 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [18036])
	*(($2 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$1 = $3
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$20 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$4 = [0]
	
.LABEL $label$16
	CALL eosio_assert($4, [18036])
	*(($2 = ($0 + [72]))) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$1 = $3
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$25 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$4 = [0]
	
.LABEL $label$21
	CALL eosio_assert($4, [18036])
	*($0 + [80]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	return $0
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*(($4 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [17987])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18036])
	*($0 + [72]) = $1
	*($0 + [33 align=1]) = [0]
	*($3) = *($2 + [4])
	*($3 + [12]) = ($0 + [8])
	*($3 + [8]) = $0
	*($3 + [16]) = ($0 + [16])
	*($3 + [20]) = ($0 + [32])
	*($3 + [24]) = ($0 + [33])
	*($3 + [28]) = ($0 + [34])
	*($3 + [32]) = ($0 + [40])
	*($3 + [36]) = ($0 + [48])
	*($3 + [40]) = ($0 + [56])
	*($3 + [44]) = ($0 + [64])
	CALL $136(($3 + [8]), $3)
	*($0 + [76]) = *(*($2 + [8]))
	$global$0 = ($3 + [48])
	return $0
}

void .FUNC $135 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18278])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18278])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18278])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*(($4 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [17987])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18036])
	*($0 + [33]) = [0]
	$5 = CALL current_time()
	*($0 + [48]) = $1
	*($0 + [40]) = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3) = *($2 + [4])
	*($3 + [12]) = ($0 + [8])
	*($3 + [8]) = $0
	*($3 + [16]) = ($0 + [16])
	*($3 + [20]) = ($0 + [32])
	*($3 + [24]) = ($0 + [33])
	*($3 + [28]) = ($0 + [40])
	CALL $138(($3 + [8]), $3)
	*($0 + [52]) = *(*($2 + [8]))
	$global$0 = ($3 + [32])
	return $0
}

int_32 .FUNC $181 (int_32 $0)
{
	return CALL $182([8492], $0)
}

void .FUNC $129 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [64])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $8 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $10($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $11(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $10($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17981])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17981])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $111(CALL $110($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [80])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $122 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18755])
	*(($5 = CALL _Znwj([32])) + [16]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($5 + [8])) = *(($3 + [8]))
	CALL eosio_assert([1], [17981])
	CALL memcpy(($4 + [16]), $5, [16])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-7297066191770615808, $2, (int_64)-7297066191770615808, ($4 + [16]), [16])
	*($5 + [20]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-7297066191770615808) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-7297066191770615807
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-7297066191770615808
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-7297066191770615808
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $122(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $120 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18645])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [8])) = *(($3 + [8]))
	CALL eosio_assert([1], [18696])
	CALL eosio_assert([1], [17981])
	CALL memcpy($4, $1, [16])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-7297066191770615808) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-7297066191770615807
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $2 (int_32 $0)
{
	CALL $3([8192], *([0] + [8196]))
}

void .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18278])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18278])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($3, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [18278])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $124 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [24]) = (int_64)0
	*(($1 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [72]))) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [18036])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [18036])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [18036])
	return $0
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13)
{
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	float_64 $27
	int_64 $28
	int_32 $29
	$14 = ($global$0 - [624])
	$global$0 = $14
	$15 = *($13 + [8])
	$16 = *($13)
	$17 = *($2)
	CALL eosio_assert([1], [17987])
	$17 = (uint_64)$17 >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $17) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$18 = (uint_64)$17 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$17 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$17 = $18
	$19 = [1]
	$20 = $13
	$13 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$17 = $18
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$17 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$17 = (uint_64)$17 >> (uint_64)(int_64)8)
	$19 = ((int_32)$13 < (int_32)[6])
	$20 = ($13 + [1])
	$13 = $20
	if ( $19 ){ goto $label$5 }
	$19 = [1]
	$13 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$19 = [0]
	
.LABEL $label$1
	CALL eosio_assert($19, [18036])
	$19 = [0]
	*(($14 + [216])) = [0]
	*($14 + [200]) = (int_64)-1
	*($14 + [208]) = (int_64)0
	$17 = *($0)
	*($14 + [184]) = $17
	$18 = (uint_64)*($2) >> (uint_64)(int_64)8
	*($14 + [192]) = $18)
	$13 = CALL db_find_i64($17, $18, (int_64)7035927889518264320, *($1))
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$6 }
	$19 = CALL $5(($14 + [184]), $13)
	CALL eosio_assert(((int_32)*($19 + [288]) == (int_32)($14 + [184])), [18204])
	
.LABEL $label$6
	if ( ((int_64)$16 < (int_64)1) ){ goto $label$9 }
	if ( (CALL is_account(*($4)) == 0) ){ goto $label$9 }
	if ( ((int_64)*($4) == (int_64)*($3)) ){ goto $label$9 }
	$21 = *($1)
	$17 = (int_64)0
	$18 = (int_64)59
	$13 = [17192]
	$22 = (int_64)0
	
.LOOP $label$10:
	$23 = (int_64)0
	if ( ((uint_64)$17 > (uint_64)(int_64)11) ){ goto $label$11 }
	$20 = *($13)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$20 = ($20 + [-91])
	goto $label$12 
	
.LABEL $label$13
	$20 = ( ($20 + [-48]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$23 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $20) & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$11
	$13 = ($13 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$22 = ((int_64)$23 | (int_64)$22)
	$18 = ((int_64)$18 + (int_64)4294967291)
	if ( ((int_64)$18 != (int_64)55834574842) ){ goto $label$10 }
	if ( ((int_64)$21 != (int_64)$22) ){ goto $label$8 }
	
.LABEL $label$9
	$15 = *($2)
	CALL eosio_assert([1], [17987])
	$17 = (uint_64)$15 >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $17) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$18 = (uint_64)$17 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$17 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$17 = $18
	$20 = [1]
	$4 = $13
	$13 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$17 = $18
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$17 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$17 = (uint_64)$17 >> (uint_64)(int_64)8)
	$20 = ((int_32)$13 < (int_32)[6])
	$4 = ($13 + [1])
	$13 = $4
	if ( $20 ){ goto $label$18 }
	$20 = [1]
	$13 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$20 = [0]
	
.LABEL $label$14
	CALL eosio_assert($20, [18036])
	$16 = (int_64)0
	$24 = [17]
	goto $label$7 
	
.LABEL $label$8
	$17 = CALL current_time()
	*(($14 + [252])) = (int_64)0
	*(($14 + [268])) = (int_64)0
	*(($14 + [276])) = (int_64)0
	*($14 + [236]) = [0]
	*($14 + [240]) = [0]
	*($14 + [244 align=4]) = (int_64)0
	*($14 + [260 align=4]) = (int_64)0
	*($14 + [224]) = ((CASTING uint_32)(uint_64 ((uint_64)$17 / (uint_64)(int_64)1000000)) + [60])
	$26 = ($14 + [260])
	$18 = *($0)
	$17 = (int_64)6
	
.LOOP $label$19:
	$17 = ((int_64)$17 + (int_64)1)
	if ( ((int_64)$17 != (int_64)13) ){ goto $label$19 }
	*($14 + [112]) = (int_64)3617214756542218240
	*($14 + [104]) = $18
	$17 = *($2)
	$13 = *([0] + [8196])
	if ( ($13 == 0) ){ goto $label$21 }
	$20 = [8196]
	$18 = *($13 + [16])
	if ( (uint_64)($17 <= $18) ){ goto $label$20 }
	$24 = [2]
	goto $label$7 
	
.LABEL $label$21
	$13 = [8196]
	$20 = [8196]
	$24 = [3]
	goto $label$7 
	
.LABEL $label$20
	$24 = [179]
	
.LABEL $label$7
	
.LOOP $label$22:
	goto $label$303 
	
.LABEL $label$324
	CALL eosio_assert((uint_64)(*($7) <= (int_64)100000), [17397])
	CALL eosio_assert(CALL eosio_assert4(*($3)), [17423])
	CALL eosio_assert(((int_32)$19 != (int_32)[0]), [18564])
	CALL eosio_assert(((int_32)*($19 + [288]) == (int_32)($14 + [184])), [18599])
	CALL eosio_assert(((int_64)*($14 + [184]) == (int_64)CALL $fimport$8()), [18645])
	$17 = *($19)
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($19 + [24]))), [18283])
	$18 = ((int_64)*($19 + [16]) + (int_64)*($8))
	*($19 + [16]) = $18
	CALL eosio_assert(((int_64)$18 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)*($19 + [16]) < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)*(($19 + [40]))), [18283])
	$18 = ((int_64)*($19 + [32]) + (int_64)*($10))
	*($19 + [32]) = $18
	CALL eosio_assert(((int_64)$18 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)*($19 + [32]) < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)$15 == (int_64)*(($19 + [56]))), [18283])
	$18 = ((int_64)*($19 + [48]) + (int_64)$16)
	*($19 + [48]) = $18
	CALL eosio_assert(((int_64)$18 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)*($19 + [48]) < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)*(($19 + [72]))), [18283])
	$18 = ((int_64)*($19 + [64]) + (int_64)*($11))
	*($19 + [64]) = $18
	CALL eosio_assert(((int_64)$18 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)*($19 + [64]) < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($19 + [128]))), [18283])
	$18 = ((int_64)*($19 + [120]) + (int_64)*($8))
	*($19 + [120]) = $18
	CALL eosio_assert(((int_64)$18 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)*($19 + [120]) < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)*(($19 + [144]))), [18283])
	$18 = ((int_64)*($19 + [136]) + (int_64)*($10))
	*($19 + [136]) = $18
	CALL eosio_assert(((int_64)$18 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)*($19 + [136]) < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)$15 == (int_64)*(($19 + [160]))), [18283])
	$18 = ((int_64)*($19 + [152]) + (int_64)$16)
	*($19 + [152]) = $18
	CALL eosio_assert(((int_64)$18 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)*($19 + [152]) < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)*(($19 + [176]))), [18283])
	$18 = ((int_64)*($19 + [168]) + (int_64)*($11))
	*($19 + [168]) = $18
	CALL eosio_assert(((int_64)$18 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)*($19 + [168]) < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)*(($19 + [192]))), [18283])
	$18 = ((int_64)*($19 + [184]) + (int_64)*($9))
	*($19 + [184]) = $18
	CALL eosio_assert(((int_64)$18 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)*($19 + [184]) < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)$17 == (int_64)*($19)), [18696])
	*($14 + [112]) = (($14 + [224]) + [288])
	*($14 + [108]) = ($14 + [224])
	*($14 + [104]) = ($14 + [224])
	*($14 + [72]) = ($14 + [104])
	*($14 + [516]) = ($19 + [8])
	*($14 + [512]) = $19
	*($14 + [520]) = ($19 + [16])
	*($14 + [524]) = ($19 + [32])
	*($14 + [528]) = ($19 + [48])
	*($14 + [532]) = ($19 + [64])
	*($14 + [536]) = ($19 + [80])
	*($14 + [540]) = ($19 + [96])
	*($14 + [544]) = ($19 + [112])
	*($14 + [548]) = ($19 + [120])
	*($14 + [552]) = ($19 + [136])
	*($14 + [556]) = ($19 + [152])
	*($14 + [560]) = ($19 + [168])
	*($14 + [564]) = ($19 + [184])
	*($14 + [568]) = ($19 + [200])
	*($14 + [572]) = ($19 + [216])
	*($14 + [576]) = ($19 + [232])
	*($14 + [580]) = ($19 + [248])
	*($14 + [584]) = ($19 + [264])
	*($14 + [592]) = ($19 + [280])
	*($14 + [588]) = ($19 + [272])
	CALL $6(($14 + [512]), ($14 + [72]))
	CALL db_update_i64(*($19 + [292]), (int_64)0, ($14 + [224]), [288])
	$13 = (($14 + [184]) + [16])
	if ( (uint_64)($17 <= *($13)) ){ goto $label$121 }
	$24 = [18]
	goto $label$22 
	
.LABEL $label$323
	*($13) = ( (int_64)-2 ? ((int_64)$17 + (int_64)1) : ((uint_64)$17 > (uint_64)(int_64)-3) )
	$24 = [19]
	goto $label$22 
	
.LABEL $label$322
	$18 = *(($8 + [8]))
	*((($14 + [152]) + [8])) = $18
	$23 = *($3)
	$17 = *($8)
	*((($14 + [8]) + [8])) = $18
	*($14 + [152]) = $17
	*($14 + [8]) = $17
	CALL $15($0, $23, ($14 + [8]))
	*((($14 + [512]) + [32])) = [0]
	*($14 + [528]) = (int_64)-1
	*($14 + [536]) = (int_64)0
	*($14 + [548]) = [0]
	$17 = *($0)
	*($14 + [512]) = $17
	*($14 + [520]) = $17
	*($14 + [144]) = ($14 + [512])
	*($14 + [104]) = *($2)
	CALL $16(($14 + [224]), ($14 + [144]), ($14 + [104]))
	$9 = *($14 + [228])
	if ( ($9 == 0) ){ goto $label$120 }
	$24 = [20]
	goto $label$22 
	
.LABEL $label$321
	if ( ((int_64)*($14 + [104]) != (int_64)*($9 + [40])) ){ goto $label$116 }
	$24 = [90]
	goto $label$22 
	
.LABEL $label$320
	if ( (int_64)(*($9 + [48]) == 0) ){ goto $label$119 }
	$24 = [91]
	goto $label$22 
	
.LABEL $label$319
	$17 = (int_64)0
	$18 = (int_64)59
	$13 = [17454]
	$22 = (int_64)0
	$24 = [92]
	goto $label$22 
	
.LABEL $label$318
	$23 = (int_64)0
	if ( ((uint_64)$17 > (uint_64)(int_64)11) ){ goto $label$68 }
	$24 = [163]
	goto $label$22 
	
.LABEL $label$317
	$20 = *($13)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$24 = [166]
	goto $label$22 
	
.LABEL $label$316
	$20 = ($20 + [-91])
	goto $label$26 
	
.LABEL $label$315
	$20 = ( ($20 + [-48]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	$24 = [165]
	goto $label$22 
	
.LABEL $label$314
	$23 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $20) & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	$24 = [93]
	goto $label$22 
	
.LABEL $label$313
	$13 = ($13 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$22 = ((int_64)$23 | (int_64)$22)
	$18 = ((int_64)$18 + (int_64)4294967291)
	if ( ((int_64)$18 != (int_64)55834574842) ){ goto $label$69 }
	$24 = [94]
	goto $label$22 
	
.LABEL $label$312
	*(($25 = ($14 + [256]))) = [0]
	*($14 + [232]) = (int_64)1145979219
	*($14 + [224]) = $22
	*($14 + [240]) = (int_64)-1
	*($14 + [248]) = (int_64)0
	$17 = *(CALL $17(($14 + [224]), (int_64)1145979219, [17581]))
	$4 = *($14 + [248])
	if ( ($4 == 0) ){ goto $label$67 }
	$24 = [95]
	goto $label$22 
	
.LABEL $label$311
	$26 = ($14 + [252])
	$13 = *($26)
	if ( ((int_32)$13 == (int_32)$4) ){ goto $label$66 }
	$24 = [96]
	goto $label$22 
	
.LABEL $label$310
	$24 = [97]
	goto $label$22 
	
.LABEL $label$309
	$13 = ($13 + [-24])
	$20 = *($13)
	*($13) = [0]
	if ( ($20 == 0) ){ goto $label$64 }
	$24 = [98]
	goto $label$22 
	
.LABEL $label$308
	CALL _ZdlPv($20)
	$24 = [99]
	goto $label$22 
	
.LABEL $label$307
	if ( ((int_32)$4 != (int_32)$13) ){ goto $label$65 }
	$24 = [100]
	goto $label$22 
	
.LABEL $label$306
	$13 = *(($14 + [248]))
	goto $label$63 
	
.LABEL $label$305
	if ( ((uint_64)$18 >= (uint_64)$17) ){ goto $label$139 }
	$24 = [178]
	goto $label$22 
	
.LABEL $label$304
	$20 = ($13 + [4])
	$25 = *($13 + [4])
	if ( ($25 == 0) ){ goto $label$141 }
	$24 = [0]
	goto $label$22 
	
.LABEL $label$303
	$13 = $20
	$24 = [1]
	goto $label$22 
	
.LABEL $label$302
	$20 = $13
	$13 = $25
	$18 = *($13 + [16])
	if ( ((uint_64)$17 >= (uint_64)$18) ){ goto $label$142 }
	$24 = [179]
	goto $label$22 
	
.LABEL $label$301
	$25 = *($13)
	if ( $25 ){ goto $label$140 }
	$24 = [180]
	goto $label$22 
	
.LABEL $label$300
	$20 = $13
	$25 = *($20)
	if ( $25 ){ goto $label$136 }
	goto $label$137 
	
.LABEL $label$299
	$13 = $4
	$24 = [101]
	goto $label$22 
	
.LABEL $label$298
	*($26) = $4
	CALL _ZdlPv($13)
	$24 = [102]
	goto $label$22 
	
.LABEL $label$297
	*($25) = [0]
	*($14 + [224]) = $22
	*($14 + [240]) = (int_64)-1
	*($14 + [248]) = (int_64)0
	*($14 + [232]) = (int_64)1145979219
	$18 = *(CALL $17(($14 + [224]), (int_64)1145979219, [17581]) + [16])
	$4 = *($14 + [248])
	if ( ($4 == 0) ){ goto $label$62 }
	$24 = [103]
	goto $label$22 
	
.LABEL $label$296
	$25 = ($14 + [252])
	$13 = *($25)
	if ( ((int_32)$13 == (int_32)$4) ){ goto $label$61 }
	$24 = [104]
	goto $label$22 
	
.LABEL $label$295
	$24 = [105]
	goto $label$22 
	
.LABEL $label$294
	$13 = ($13 + [-24])
	$20 = *($13)
	*($13) = [0]
	if ( ($20 == 0) ){ goto $label$59 }
	$24 = [106]
	goto $label$22 
	
.LABEL $label$293
	CALL _ZdlPv($20)
	$24 = [107]
	goto $label$22 
	
.LABEL $label$292
	if ( ((int_32)$4 != (int_32)$13) ){ goto $label$60 }
	$24 = [108]
	goto $label$22 
	
.LABEL $label$291
	$13 = *(($14 + [248]))
	goto $label$58 
	
.LABEL $label$290
	$13 = $4
	$24 = [109]
	goto $label$22 
	
.LABEL $label$289
	*($25) = $4
	CALL _ZdlPv($13)
	$24 = [110]
	goto $label$22 
	
.LABEL $label$288
	if ( ((int_64)$17 > (int_64)((int_64)$18 / (int_64)2)) ){ goto $label$118 }
	$24 = [111]
	goto $label$22 
	
.LABEL $label$287
	$21 = ((uint_64)((int_64)*($19 + [8]) * (int_64)5000) / (uint_64)(int_64)10000)
	$18 = ((int_64)$18 / (int_64)20)
	if ( ((uint_64)$18 > (uint_64)$17) ){ goto $label$57 }
	$24 = [112]
	goto $label$22 
	
.LABEL $label$286
	$21 = (uint_64)$21 >> (uint_64)((uint_64)$17 / (uint_64)$18))
	$24 = [113]
	goto $label$22 
	
.LABEL $label$285
	$27 = ((float_64)((float_64)((float_64)(float_64)100 / (float_64)(CASTING float_64)(uint_64 *(($9 + [48])))) * (float_64)(CASTING float_64)(uint_64 ((int_64)*($9 + [56]) + (int_64)100))) * (float_64)(CASTING float_64)(uint_64 *($7)))
	$28 = *($1)
	$17 = (int_64)0
	$18 = (int_64)59
	$13 = [17192]
	$22 = (int_64)0
	$24 = [114]
	goto $label$22 
	
.LABEL $label$284
	$23 = (int_64)0
	if ( ((uint_64)$17 > (uint_64)(int_64)11) ){ goto $label$55 }
	$24 = [157]
	goto $label$22 
	
.LABEL $label$283
	$19 = *($13)
	if ( ((uint_32)(($19 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$24 = [160]
	goto $label$22 
	
.LABEL $label$282
	$19 = ($19 + [-91])
	goto $label$28 
	
.LABEL $label$281
	$19 = ( ($19 + [-48]) ? [0] : ((($19 + [-49]) & [255]) <= [5]) )
	$24 = [159]
	goto $label$22 
	
.LABEL $label$280
	$23 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $19) & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	$24 = [115]
	goto $label$22 
	
.LABEL $label$279
	$13 = ($13 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$22 = ((int_64)$23 | (int_64)$22)
	$18 = ((int_64)$18 + (int_64)4294967291)
	if ( ((int_64)$18 != (int_64)55834574842) ){ goto $label$56 }
	$24 = [116]
	goto $label$22 
	
.LABEL $label$278
	$17 = *($8)
	$27 = ((float_64)((float_64)( ((float_64)$27 / (float_64)(float_64)10) ? $27 : ((int_64)$28 == (int_64)$22) ) * (float_64)(CASTING float_64)(int_64 ( $17 ? ((int_64)$17 / (int_64)10000) : ((int_64)*($2) == (int_64)1397703940) ))) * (float_64)(CASTING float_64)(uint_64 $21))
	if ( ((float_64)(float_64)|$27| < (float_64)(float_64)9223372036854775808) ){ goto $label$54 }
	$24 = [156]
	goto $label$22 
	
.LABEL $label$277
	$21 = (int_64)-9223372036854775808
	goto $label$53 
	
.LABEL $label$276
	$21 = (Rounds 0)($27)
	$24 = [118]
	goto $label$22 
	
.LABEL $label$275
	CALL eosio_assert((uint_64)(((int_64)$21 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17987])
	$17 = (int_64)1145979219
	$13 = [0]
	$24 = [119]
	goto $label$22 
	
.LABEL $label$274
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $17) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$24 = [150]
	goto $label$22 
	
.LABEL $label$273
	$18 = (uint_64)$17 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$17 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$24 = [151]
	goto $label$22 
	
.LABEL $label$272
	$17 = $18
	$19 = [1]
	$20 = $13
	$13 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$271
	$17 = $18
	$24 = [153]
	goto $label$22 
	
.LABEL $label$270
	if ( ((int_64)((int_64)$17 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$24 = [154]
	goto $label$22 
	
.LABEL $label$269
	$17 = (uint_64)$17 >> (uint_64)(int_64)8)
	$19 = ((int_32)$13 < (int_32)[6])
	$20 = ($13 + [1])
	$13 = $20
	if ( $19 ){ goto $label$30 }
	$24 = [155]
	goto $label$22 
	
.LABEL $label$268
	$19 = [1]
	$13 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$267
	$19 = [0]
	$24 = [121]
	goto $label$22 
	
.LABEL $label$266
	CALL eosio_assert($19, [18036])
	if ( ((int_64)$21 < (int_64)1) ){ goto $label$117 }
	$24 = [122]
	goto $label$22 
	
.LABEL $label$265
	$28 = *($0)
	$17 = (int_64)6
	$24 = [123]
	goto $label$22 
	
.LABEL $label$264
	$17 = ((int_64)$17 + (int_64)1)
	if ( ((int_64)$17 != (int_64)13) ){ goto $label$46 }
	$24 = [124]
	goto $label$22 
	
.LABEL $label$263
	$17 = (int_64)0
	$18 = (int_64)59
	$13 = [17454]
	$22 = (int_64)0
	$24 = [125]
	goto $label$22 
	
.LABEL $label$262
	$23 = (int_64)0
	if ( ((uint_64)$17 > (uint_64)(int_64)11) ){ goto $label$44 }
	$24 = [146]
	goto $label$22 
	
.LABEL $label$261
	$19 = *($13)
	if ( ((uint_32)(($19 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$24 = [149]
	goto $label$22 
	
.LABEL $label$260
	$19 = ($19 + [-91])
	goto $label$32 
	
.LABEL $label$259
	$19 = ( ($19 + [-48]) ? [0] : ((($19 + [-49]) & [255]) <= [5]) )
	$24 = [148]
	goto $label$22 
	
.LABEL $label$258
	$23 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $19) & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	$24 = [126]
	goto $label$22 
	
.LABEL $label$257
	$13 = ($13 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$22 = ((int_64)$23 | (int_64)$22)
	$18 = ((int_64)$18 + (int_64)4294967291)
	if ( ((int_64)$18 != (int_64)55834574842) ){ goto $label$45 }
	$24 = [127]
	goto $label$22 
	
.LABEL $label$256
	$17 = (int_64)5
	$24 = [128]
	goto $label$22 
	
.LABEL $label$255
	$17 = ((int_64)$17 + (int_64)1)
	if ( ((int_64)$17 != (int_64)13) ){ goto $label$43 }
	$24 = [129]
	goto $label$22 
	
.LABEL $label$254
	$20 = CALL $162(($14 + [88]), $12)
	CALL $18(($14 + [608]), $0, *($6), *($3), $20)
	*((($14 + [104]) + [16])) = (int_64)293370680068
	*(($19 = (($14 + [224]) + [24]))) = [0]
	$13 = ($14 + [616])
	*(($14 + [136])) = *($13)
	*($13) = [0]
	*($14 + [112]) = $21
	*($14 + [224]) = $22
	*($14 + [232]) = (int_64)8516769789752901632
	*($14 + [240]) = (int_64)0
	*($14 + [104]) = *($3)
	*($14 + [128]) = *($14 + [608])
	*($14 + [608]) = (int_64)0
	*(($13 = CALL _Znwj([16]))) = $28
	*($13 + [8]) = (int_64)3617214756542218240
	*(($14 + [260])) = [0]
	$4 = ($13 + [16])
	*($19) = $4
	*(($14 + [244])) = $4
	*($14 + [240]) = $13
	*($14 + [252 align=4]) = (int_64)0
	$13 = *($14 + [128])
	$19 = ( *((($14 + [104]) + [28])) ? uint_32($13 >> [1]) : ($13 & [1]) )
	$13 = ($19 + [24])
	$17 = (CASTING uint_64)(uint_32 $19)
	$4 = (($14 + [104]) + [24])
	$19 = (($14 + [224]) + [28])
	$24 = [130]
	goto $label$22 
	
.LABEL $label$253
	$13 = ($13 + [1])
	$17 = (uint_64)$17 >> (uint_64)(int_64)7
	if ( ((int_64)$17) != (int_64)0) ){ goto $label$42 }
	$24 = [131]
	goto $label$22 
	
.LABEL $label$252
	if ( ($13 == 0) ){ goto $label$41 }
	$24 = [132]
	goto $label$22 
	
.LABEL $label$251
	CALL $10($19, $13)
	$19 = *(($14 + [256]))
	$13 = *(($14 + [252]))
	goto $label$40 
	
.LABEL $label$250
	$25 = *($20)
	if ( $25 ){ goto $label$138 }
	$24 = [175]
	goto $label$22 
	
.LABEL $label$249
	*(($25 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($25) = (int_64)0
	*($25 + [8]) = $13
	*(($25 + [48])) = (int_64)0
	*(($25 + [40])) = (int_64)0
	*(($25 + [32])) = (int_64)0
	*($20) = $25
	*($25 + [16]) = $17
	$13 = $25
	$29 = *(*([0] + [8192]))
	if ( ($29 == 0) ){ goto $label$23 }
	$24 = [176]
	goto $label$22 
	
.LABEL $label$248
	*([0] + [8192]) = $29
	$13 = *($20)
	$24 = [177]
	goto $label$22 
	
.LABEL $label$247
	CALL $7(*([0] + [8196]), $13)
	*([0] + [8200]) = (*([0] + [8200]) + [1])
	$24 = [4]
	goto $label$22 
	
.LABEL $label$246
	$25 = ($25 + [32])
	$17 = (int_64)0
	$23 = (int_64)59
	$13 = [17183]
	$22 = (int_64)0
	$24 = [5]
	goto $label$22 
	
.LABEL $label$245
	if ( ((uint_64)$17 > (uint_64)(int_64)7) ){ goto $label$134 }
	$24 = [171]
	goto $label$22 
	
.LABEL $label$244
	$20 = *($13)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$24 = [174]
	goto $label$22 
	
.LABEL $label$243
	$20 = ($20 + [-91])
	goto $label$24 
	
.LABEL $label$242
	$18 = (int_64)0
	if ( ((uint_64)$17 <= (uint_64)(int_64)11) ){ goto $label$133 }
	goto $label$132 
	
.LABEL $label$241
	$20 = ( ($20 + [-48]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	$24 = [173]
	goto $label$22 
	
.LABEL $label$240
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	$24 = [170]
	goto $label$22 
	
.LABEL $label$239
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$23 & (int_64)4294967295))
	$24 = [7]
	goto $label$22 
	
.LABEL $label$238
	$13 = ($13 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$22 = ((int_64)$18 | (int_64)$22)
	$23 = ((int_64)$23 + (int_64)4294967291)
	if ( ((int_64)$23 != (int_64)55834574842) ){ goto $label$135 }
	$24 = [8]
	goto $label$22 
	
.LABEL $label$237
	*($14 + [608]) = $22
	$13 = CALL $162(($14 + [168]), $12)
	CALL $19(($14 + [72]), $0, *($6), *($3), $13)
	*(($14 + [536])) = $15
	$20 = ($14 + [80])
	*((($14 + [512]) + [40])) = *($20)
	*($20) = [0]
	*($14 + [528]) = $16
	*($14 + [512]) = *($0)
	*($14 + [520]) = *($4)
	*($14 + [544]) = *($14 + [72])
	*($14 + [72]) = (int_64)0
	$20 = (($14 + [224]) + [40])
	$4 = *($20)
	if ( ((uint_32)$4 >= (uint_32)*(($14 + [268]))) ){ goto $label$131 }
	$24 = [169]
	goto $label$22 
	
.LABEL $label$236
	CALL $8($4, ($14 + [104]), *($25), *($14 + [608]), ($14 + [512]))
	*($20) = (*($20) + [40])
	goto $label$130 
	
.LABEL $label$235
	CALL $20($26, ($14 + [104]), $25, ($14 + [608]), ($14 + [512]))
	$24 = [10]
	goto $label$22 
	
.LABEL $label$234
	if ( (*(($14 + [544])) & [1]) ){ goto $label$129 }
	$24 = [168]
	goto $label$22 
	
.LABEL $label$233
	if ( (*($14 + [72]) & [1]) ){ goto $label$128 }
	$24 = [167]
	goto $label$22 
	
.LABEL $label$232
	if ( ((*($13) & [1]) == 0) ){ goto $label$126 }
	$24 = [13]
	goto $label$22 
	
.LABEL $label$231
	CALL _ZdlPv(*($13 + [8]))
	$24 = [14]
	goto $label$22 
	
.LABEL $label$230
	CALL $21(($14 + [24]), $0)
	*($14 + [520]) = *(($14 + [32]))
	*($14 + [512]) = *($14 + [24])
	$17 = *($0)
	CALL $22(($14 + [104]), ($14 + [224]))
	$13 = *($14 + [104])
	CALL send_deferred(($14 + [512]), $17, $13, (*($14 + [108]) - $13), [0])
	$13 = *($14 + [104])
	if ( ($13 == 0) ){ goto $label$123 }
	$24 = [15]
	goto $label$22 
	
.LABEL $label$229
	*($14 + [108]) = $13
	CALL _ZdlPv($13)
	$24 = [16]
	goto $label$22 
	
.LABEL $label$228
	CALL $23(($14 + [224]))
	goto $label$122 
	
.LABEL $label$227
	CALL _ZdlPv(*(($14 + [552])))
	if ( ((*($14 + [72]) & [1]) == 0) ){ goto $label$127 }
	$24 = [12]
	goto $label$22 
	
.LABEL $label$226
	CALL _ZdlPv(*(($14 + [80])))
	if ( (*($13) & [1]) ){ goto $label$124 }
	goto $label$125 
	
.LABEL $label$225
	$19 = [0]
	$13 = [0]
	$24 = [133]
	goto $label$22 
	
.LABEL $label$224
	*($14 + [76]) = $13
	*($14 + [72]) = $13
	*($14 + [80]) = $19
	CALL eosio_assert(((int_32)($19 - $13) > (int_32)[7]), [17981])
	CALL memcpy(*($14 + [76]), ($14 + [104]), [8])
	$13 = (*($14 + [76]) + [8])
	*($14 + [76]) = $13
	CALL eosio_assert(((int_32)(*($14 + [80]) - $13) > (int_32)[7]), [17981])
	CALL memcpy(*($14 + [76]), (($14 + [104]) + [8]), [8])
	$13 = (*($14 + [76]) + [8])
	*($14 + [76]) = $13
	CALL eosio_assert(((int_32)(*($14 + [80]) - $13) > (int_32)[7]), [17981])
	CALL memcpy(*($14 + [76]), ($14 + [120]), [8])
	*($14 + [76]) = (*($14 + [76]) + [8])
	CALL $24(($14 + [72]), $4)
	CALL $9(($14 + [72]), ($14 + [224]))
	$13 = *($14 + [72])
	CALL send_inline($13, (*($14 + [76]) - $13))
	$13 = *($14 + [72])
	if ( ($13 == 0) ){ goto $label$39 }
	$24 = [134]
	goto $label$22 
	
.LABEL $label$223
	*($14 + [76]) = $13
	CALL _ZdlPv($13)
	$24 = [135]
	goto $label$22 
	
.LABEL $label$222
	$13 = *($14 + [252])
	if ( ($13 == 0) ){ goto $label$38 }
	$24 = [136]
	goto $label$22 
	
.LABEL $label$221
	*(($14 + [256])) = $13
	CALL _ZdlPv($13)
	$24 = [137]
	goto $label$22 
	
.LABEL $label$220
	$13 = *($14 + [240])
	if ( ($13 == 0) ){ goto $label$37 }
	$24 = [138]
	goto $label$22 
	
.LABEL $label$219
	*(($14 + [244])) = $13
	CALL _ZdlPv($13)
	$24 = [139]
	goto $label$22 
	
.LABEL $label$218
	if ( (*(($14 + [128])) & [1]) ){ goto $label$36 }
	$24 = [144]
	goto $label$22 
	
.LABEL $label$217
	if ( (*($14 + [608]) & [1]) ){ goto $label$35 }
	$24 = [143]
	goto $label$22 
	
.LABEL $label$216
	if ( ((*($20) & [1]) == 0) ){ goto $label$115 }
	$24 = [142]
	goto $label$22 
	
.LABEL $label$215
	CALL _ZdlPv(*($20 + [8]))
	$24 = [21]
	goto $label$22 
	
.LABEL $label$214
	if ( ((int_64)*($10) < (int_64)1) ){ goto $label$112 }
	$24 = [54]
	goto $label$22 
	
.LABEL $label$213
	$18 = *($0)
	$17 = (int_64)6
	$24 = [55]
	goto $label$22 
	
.LABEL $label$212
	$17 = ((int_64)$17 + (int_64)1)
	if ( ((int_64)$17 != (int_64)13) ){ goto $label$91 }
	$24 = [56]
	goto $label$22 
	
.LABEL $label$211
	*($14 + [80]) = (int_64)3617214756542218240
	*($14 + [72]) = $18
	$17 = *($2)
	$13 = *([0] + [8196])
	if ( ($13 == 0) ){ goto $label$90 }
	$24 = [57]
	goto $label$22 
	
.LABEL $label$210
	$19 = [8196]
	$18 = *($13 + [16])
	if ( (uint_64)($17 <= $18) ){ goto $label$89 }
	$24 = [58]
	goto $label$22 
	
.LABEL $label$209
	if ( ((uint_64)$18 >= (uint_64)$17) ){ goto $label$87 }
	$24 = [84]
	goto $label$22 
	
.LABEL $label$208
	$19 = ($13 + [4])
	$20 = *($13 + [4])
	if ( ($20 == 0) ){ goto $label$88 }
	$24 = [85]
	goto $label$22 
	
.LABEL $label$207
	$13 = $19
	$24 = [86]
	goto $label$22 
	
.LABEL $label$206
	$19 = $13
	$13 = $20
	$18 = *($13 + [16])
	if ( ((uint_64)$17 >= (uint_64)$18) ){ goto $label$143 }
	$24 = [87]
	goto $label$22 
	
.LABEL $label$205
	$20 = *($13)
	if ( $20 ){ goto $label$70 }
	$24 = [88]
	goto $label$22 
	
.LABEL $label$204
	$19 = $13
	$20 = *($19)
	if ( $20 ){ goto $label$84 }
	goto $label$85 
	
.LABEL $label$203
	$13 = [8196]
	$19 = [8196]
	$24 = [59]
	goto $label$22 
	
.LABEL $label$202
	$20 = *($19)
	if ( $20 ){ goto $label$86 }
	$24 = [81]
	goto $label$22 
	
.LABEL $label$201
	*(($20 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($20) = (int_64)0
	*($20 + [8]) = $13
	*(($20 + [48])) = (int_64)0
	*(($20 + [40])) = (int_64)0
	*(($20 + [32])) = (int_64)0
	*($19) = $20
	*($20 + [16]) = $17
	$13 = $20
	$4 = *(*([0] + [8192]))
	if ( ($4 == 0) ){ goto $label$71 }
	$24 = [82]
	goto $label$22 
	
.LABEL $label$200
	*([0] + [8192]) = $4
	$13 = *($19)
	$24 = [83]
	goto $label$22 
	
.LABEL $label$199
	CALL $7(*([0] + [8196]), $13)
	*([0] + [8200]) = (*([0] + [8200]) + [1])
	$24 = [60]
	goto $label$22 
	
.LABEL $label$198
	$21 = *(($20 + [32]))
	$17 = (int_64)0
	$23 = (int_64)59
	$13 = [17183]
	$22 = (int_64)0
	$24 = [61]
	goto $label$22 
	
.LABEL $label$197
	if ( ((uint_64)$17 > (uint_64)(int_64)7) ){ goto $label$82 }
	$24 = [77]
	goto $label$22 
	
.LABEL $label$196
	$19 = *($13)
	if ( ((uint_32)(($19 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$73 }
	$24 = [80]
	goto $label$22 
	
.LABEL $label$195
	$19 = ($19 + [-91])
	goto $label$72 
	
.LABEL $label$194
	$18 = (int_64)0
	if ( ((uint_64)$17 <= (uint_64)(int_64)11) ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$193
	$19 = ( ($19 + [-48]) ? [0] : ((($19 + [-49]) & [255]) <= [5]) )
	$24 = [79]
	goto $label$22 
	
.LABEL $label$192
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $19) << (int_64)56) >> (int_64)56)
	$24 = [76]
	goto $label$22 
	
.LABEL $label$191
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$23 & (int_64)4294967295))
	$24 = [63]
	goto $label$22 
	
.LABEL $label$190
	$13 = ($13 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$22 = ((int_64)$18 | (int_64)$22)
	$23 = ((int_64)$23 + (int_64)4294967291)
	if ( ((int_64)$23 != (int_64)55834574842) ){ goto $label$83 }
	$24 = [64]
	goto $label$22 
	
.LABEL $label$189
	$19 = CALL $162(($14 + [40]), $12)
	CALL $25(($14 + [56]), $0, *($6), $19)
	*(($14 + [248])) = *(($10 + [8]))
	$13 = (($14 + [56]) + [8])
	*(($14 + [264])) = *($13)
	*($13) = [0]
	*($14 + [224]) = *($0)
	*($14 + [232]) = *($3)
	*($14 + [240]) = *($10)
	*($14 + [256]) = *($14 + [56])
	*($14 + [56]) = (int_64)0
	$13 = CALL $8(($14 + [104]), ($14 + [72]), $21, $22, ($14 + [224]))
	CALL $9(($14 + [608]), $13)
	$20 = *($14 + [608])
	CALL send_inline($20, (*($14 + [612]) - $20))
	$20 = *($14 + [608])
	if ( ($20 == 0) ){ goto $label$79 }
	$24 = [65]
	goto $label$22 
	
.LABEL $label$188
	*($14 + [612]) = $20
	CALL _ZdlPv($20)
	$24 = [66]
	goto $label$22 
	
.LABEL $label$187
	$20 = *($13 + [28])
	if ( ($20 == 0) ){ goto $label$78 }
	$24 = [67]
	goto $label$22 
	
.LABEL $label$186
	*(($13 + [32])) = $20
	CALL _ZdlPv($20)
	$24 = [68]
	goto $label$22 
	
.LABEL $label$185
	$20 = *($13 + [16])
	if ( ($20 == 0) ){ goto $label$77 }
	$24 = [69]
	goto $label$22 
	
.LABEL $label$184
	*(($13 + [20])) = $20
	CALL _ZdlPv($20)
	$24 = [70]
	goto $label$22 
	
.LABEL $label$183
	if ( (*(($14 + [256])) & [1]) ){ goto $label$76 }
	$24 = [75]
	goto $label$22 
	
.LABEL $label$182
	if ( (*($14 + [56]) & [1]) ){ goto $label$75 }
	$24 = [74]
	goto $label$22 
	
.LABEL $label$181
	if ( ((*($19) & [1]) == 0) ){ goto $label$111 }
	$24 = [73]
	goto $label$22 
	
.LABEL $label$180
	CALL _ZdlPv(*($19 + [8]))
	$24 = [22]
	goto $label$22 
	
.LABEL $label$179
	*(($14 + [136])) = [0]
	*($14 + [120]) = (int_64)-1
	*($14 + [128]) = (int_64)0
	$17 = *($0)
	*($14 + [104]) = $17
	$18 = (uint_64)*($2) >> (uint_64)(int_64)8
	*($14 + [112]) = $18)
	$13 = [0]
	$19 = CALL db_find_i64($17, $18, (int_64)4152997948076064768, (int_64)4152997948076064768)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$108 }
	$24 = [23]
	goto $label$22 
	
.LABEL $label$178
	$13 = CALL $26(($14 + [104]), $19)
	CALL eosio_assert(((int_32)*($13 + [112]) == (int_32)($14 + [104])), [18204])
	$24 = [24]
	goto $label$22 
	
.LABEL $label$177
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [18836])
	CALL memcpy(($14 + [224]), $13, [112])
	CALL eosio_assert(((int_64)*(($8 + [8])) == (int_64)*($14 + [232])), [18283])
	$17 = ((int_64)*($14 + [224]) + (int_64)*($8))
	*($14 + [224]) = $17
	CALL eosio_assert(((int_64)$17 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$17 < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)*(($10 + [8])) == (int_64)*(($14 + [248]))), [18283])
	$17 = ((int_64)*($14 + [240]) + (int_64)*($10))
	*($14 + [240]) = $17
	CALL eosio_assert(((int_64)$17 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$17 < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)$15 == (int_64)*(($14 + [264]))), [18283])
	$17 = ((int_64)*($14 + [256]) + (int_64)$16)
	*($14 + [256]) = $17
	CALL eosio_assert(((int_64)$17 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$17 < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)*(($11 + [8])) == (int_64)*(($14 + [280]))), [18283])
	$17 = ((int_64)*($14 + [272]) + (int_64)*($11))
	*($14 + [272]) = $17
	CALL eosio_assert(((int_64)$17 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$17 < (int_64)4611686018427387904), [18345])
	*($14 + [304]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $27(($14 + [104]), ($14 + [224]), *($0))
	$20 = *($14 + [128])
	if ( ($20 == 0) ){ goto $label$107 }
	$24 = [25]
	goto $label$22 
	
.LABEL $label$176
	$4 = ($14 + [132])
	$13 = *($4)
	if ( ((int_32)$13 == (int_32)$20) ){ goto $label$106 }
	$24 = [26]
	goto $label$22 
	
.LABEL $label$175
	$24 = [27]
	goto $label$22 
	
.LABEL $label$174
	$13 = ($13 + [-24])
	$19 = *($13)
	*($13) = [0]
	if ( ($19 == 0) ){ goto $label$104 }
	$24 = [28]
	goto $label$22 
	
.LABEL $label$173
	CALL _ZdlPv($19)
	$24 = [29]
	goto $label$22 
	
.LABEL $label$172
	if ( ((int_32)$20 != (int_32)$13) ){ goto $label$105 }
	$24 = [30]
	goto $label$22 
	
.LABEL $label$171
	$13 = *(($14 + [128]))
	goto $label$103 
	
.LABEL $label$170
	CALL _ZdlPv(*(($14 + [264])))
	if ( ((*($14 + [56]) & [1]) == 0) ){ goto $label$74 }
	$24 = [72]
	goto $label$22 
	
.LABEL $label$169
	CALL _ZdlPv(*(($14 + [64])))
	if ( (*($19) & [1]) ){ goto $label$109 }
	goto $label$110 
	
.LABEL $label$168
	$13 = $20
	$24 = [31]
	goto $label$22 
	
.LABEL $label$167
	*($4) = $20
	CALL _ZdlPv($13)
	$24 = [32]
	goto $label$22 
	
.LABEL $label$166
	$20 = *($14 + [536])
	if ( ($20 == 0) ){ goto $label$102 }
	$24 = [33]
	goto $label$22 
	
.LABEL $label$165
	$4 = ($14 + [540])
	$13 = *($4)
	if ( ((int_32)$13 == (int_32)$20) ){ goto $label$101 }
	$24 = [34]
	goto $label$22 
	
.LABEL $label$164
	$24 = [35]
	goto $label$22 
	
.LABEL $label$163
	$13 = ($13 + [-24])
	$19 = *($13)
	*($13) = [0]
	if ( ($19 == 0) ){ goto $label$99 }
	$24 = [36]
	goto $label$22 
	
.LABEL $label$162
	if ( ((*($19 + [8]) & [1]) == 0) ){ goto $label$98 }
	$24 = [37]
	goto $label$22 
	
.LABEL $label$161
	CALL _ZdlPv(*(($19 + [16])))
	$24 = [38]
	goto $label$22 
	
.LABEL $label$160
	CALL _ZdlPv($19)
	$24 = [39]
	goto $label$22 
	
.LABEL $label$159
	if ( ((int_32)$20 != (int_32)$13) ){ goto $label$100 }
	$24 = [40]
	goto $label$22 
	
.LABEL $label$158
	$13 = *(($14 + [536]))
	goto $label$97 
	
.LABEL $label$157
	$13 = $20
	$24 = [41]
	goto $label$22 
	
.LABEL $label$156
	*($4) = $20
	CALL _ZdlPv($13)
	$24 = [42]
	goto $label$22 
	
.LABEL $label$155
	$20 = *($14 + [208])
	if ( ($20 == 0) ){ goto $label$96 }
	$24 = [43]
	goto $label$22 
	
.LABEL $label$154
	$4 = ($14 + [212])
	$13 = *($4)
	if ( ((int_32)$13 == (int_32)$20) ){ goto $label$95 }
	$24 = [44]
	goto $label$22 
	
.LABEL $label$153
	$24 = [45]
	goto $label$22 
	
.LABEL $label$152
	$13 = ($13 + [-24])
	$19 = *($13)
	*($13) = [0]
	if ( ($19 == 0) ){ goto $label$93 }
	$24 = [46]
	goto $label$22 
	
.LABEL $label$151
	CALL _ZdlPv($19)
	$24 = [47]
	goto $label$22 
	
.LABEL $label$150
	if ( ((int_32)$20 != (int_32)$13) ){ goto $label$94 }
	$24 = [48]
	goto $label$22 
	
.LABEL $label$149
	$13 = *(($14 + [208]))
	goto $label$92 
	
.LABEL $label$148
	$13 = $20
	$24 = [49]
	goto $label$22 
	
.LABEL $label$147
	*($4) = $20
	CALL _ZdlPv($13)
	$24 = [50]
	goto $label$22 
	
.LABEL $label$146
	$global$0 = ($14 + [624])
	return 
	
.LABEL $label$145
	CALL _ZdlPv(*(($14 + [136])))
	if ( ((*($14 + [608]) & [1]) == 0) ){ goto $label$34 }
	$24 = [141]
	goto $label$22 
	
.LABEL $label$144
	CALL _ZdlPv(*(($14 + [616])))
	if ( (*($20) & [1]) ){ goto $label$113 }
	goto $label$114 
	
.LABEL $label$143
	$24 = [58]
	goto $label$22 
	
.LABEL $label$142
	$24 = [2]
	goto $label$22 
	
.LABEL $label$141
	$24 = [3]
	goto $label$22 
	
.LABEL $label$140
	$24 = [1]
	goto $label$22 
	
.LABEL $label$139
	$24 = [3]
	goto $label$22 
	
.LABEL $label$138
	$24 = [4]
	goto $label$22 
	
.LABEL $label$137
	$24 = [175]
	goto $label$22 
	
.LABEL $label$136
	$24 = [4]
	goto $label$22 
	
.LABEL $label$135
	$24 = [5]
	goto $label$22 
	
.LABEL $label$134
	$24 = [6]
	goto $label$22 
	
.LABEL $label$133
	$24 = [170]
	goto $label$22 
	
.LABEL $label$132
	$24 = [7]
	goto $label$22 
	
.LABEL $label$131
	$24 = [9]
	goto $label$22 
	
.LABEL $label$130
	$24 = [10]
	goto $label$22 
	
.LABEL $label$129
	$24 = [11]
	goto $label$22 
	
.LABEL $label$128
	$24 = [12]
	goto $label$22 
	
.LABEL $label$127
	$24 = [167]
	goto $label$22 
	
.LABEL $label$126
	$24 = [14]
	goto $label$22 
	
.LABEL $label$125
	$24 = [14]
	goto $label$22 
	
.LABEL $label$124
	$24 = [13]
	goto $label$22 
	
.LABEL $label$123
	$24 = [16]
	goto $label$22 
	
.LABEL $label$122
	$24 = [17]
	goto $label$22 
	
.LABEL $label$121
	$24 = [19]
	goto $label$22 
	
.LABEL $label$120
	$24 = [21]
	goto $label$22 
	
.LABEL $label$119
	$24 = [21]
	goto $label$22 
	
.LABEL $label$118
	$24 = [21]
	goto $label$22 
	
.LABEL $label$117
	$24 = [21]
	goto $label$22 
	
.LABEL $label$116
	$24 = [21]
	goto $label$22 
	
.LABEL $label$115
	$24 = [21]
	goto $label$22 
	
.LABEL $label$114
	$24 = [21]
	goto $label$22 
	
.LABEL $label$113
	$24 = [142]
	goto $label$22 
	
.LABEL $label$112
	$24 = [22]
	goto $label$22 
	
.LABEL $label$111
	$24 = [22]
	goto $label$22 
	
.LABEL $label$110
	$24 = [22]
	goto $label$22 
	
.LABEL $label$109
	$24 = [73]
	goto $label$22 
	
.LABEL $label$108
	$24 = [24]
	goto $label$22 
	
.LABEL $label$107
	$24 = [32]
	goto $label$22 
	
.LABEL $label$106
	$24 = [53]
	goto $label$22 
	
.LABEL $label$105
	$24 = [27]
	goto $label$22 
	
.LABEL $label$104
	$24 = [29]
	goto $label$22 
	
.LABEL $label$103
	$24 = [31]
	goto $label$22 
	
.LABEL $label$102
	$24 = [42]
	goto $label$22 
	
.LABEL $label$101
	$24 = [52]
	goto $label$22 
	
.LABEL $label$100
	$24 = [35]
	goto $label$22 
	
.LABEL $label$99
	$24 = [39]
	goto $label$22 
	
.LABEL $label$98
	$24 = [38]
	goto $label$22 
	
.LABEL $label$97
	$24 = [41]
	goto $label$22 
	
.LABEL $label$96
	$24 = [50]
	goto $label$22 
	
.LABEL $label$95
	$24 = [51]
	goto $label$22 
	
.LABEL $label$94
	$24 = [45]
	goto $label$22 
	
.LABEL $label$93
	$24 = [47]
	goto $label$22 
	
.LABEL $label$92
	$24 = [49]
	goto $label$22 
	
.LABEL $label$91
	$24 = [55]
	goto $label$22 
	
.LABEL $label$90
	$24 = [89]
	goto $label$22 
	
.LABEL $label$89
	$24 = [87]
	goto $label$22 
	
.LABEL $label$88
	$24 = [59]
	goto $label$22 
	
.LABEL $label$87
	$24 = [59]
	goto $label$22 
	
.LABEL $label$86
	$24 = [60]
	goto $label$22 
	
.LABEL $label$85
	$24 = [81]
	goto $label$22 
	
.LABEL $label$84
	$24 = [60]
	goto $label$22 
	
.LABEL $label$83
	$24 = [61]
	goto $label$22 
	
.LABEL $label$82
	$24 = [62]
	goto $label$22 
	
.LABEL $label$81
	$24 = [76]
	goto $label$22 
	
.LABEL $label$80
	$24 = [63]
	goto $label$22 
	
.LABEL $label$79
	$24 = [66]
	goto $label$22 
	
.LABEL $label$78
	$24 = [68]
	goto $label$22 
	
.LABEL $label$77
	$24 = [70]
	goto $label$22 
	
.LABEL $label$76
	$24 = [71]
	goto $label$22 
	
.LABEL $label$75
	$24 = [72]
	goto $label$22 
	
.LABEL $label$74
	$24 = [74]
	goto $label$22 
	
.LABEL $label$73
	$24 = [78]
	goto $label$22 
	
.LABEL $label$72
	$24 = [79]
	goto $label$22 
	
.LABEL $label$71
	$24 = [83]
	goto $label$22 
	
.LABEL $label$70
	$24 = [86]
	goto $label$22 
	
.LABEL $label$69
	$24 = [92]
	goto $label$22 
	
.LABEL $label$68
	$24 = [93]
	goto $label$22 
	
.LABEL $label$67
	$24 = [102]
	goto $label$22 
	
.LABEL $label$66
	$24 = [162]
	goto $label$22 
	
.LABEL $label$65
	$24 = [97]
	goto $label$22 
	
.LABEL $label$64
	$24 = [99]
	goto $label$22 
	
.LABEL $label$63
	$24 = [101]
	goto $label$22 
	
.LABEL $label$62
	$24 = [110]
	goto $label$22 
	
.LABEL $label$61
	$24 = [161]
	goto $label$22 
	
.LABEL $label$60
	$24 = [105]
	goto $label$22 
	
.LABEL $label$59
	$24 = [107]
	goto $label$22 
	
.LABEL $label$58
	$24 = [109]
	goto $label$22 
	
.LABEL $label$57
	$24 = [113]
	goto $label$22 
	
.LABEL $label$56
	$24 = [114]
	goto $label$22 
	
.LABEL $label$55
	$24 = [115]
	goto $label$22 
	
.LABEL $label$54
	$24 = [117]
	goto $label$22 
	
.LABEL $label$53
	$24 = [118]
	goto $label$22 
	
.LABEL $label$52
	$24 = [119]
	goto $label$22 
	
.LABEL $label$51
	$24 = [121]
	goto $label$22 
	
.LABEL $label$50
	$24 = [119]
	goto $label$22 
	
.LABEL $label$49
	$24 = [121]
	goto $label$22 
	
.LABEL $label$48
	$24 = [120]
	goto $label$22 
	
.LABEL $label$47
	$24 = [120]
	goto $label$22 
	
.LABEL $label$46
	$24 = [123]
	goto $label$22 
	
.LABEL $label$45
	$24 = [125]
	goto $label$22 
	
.LABEL $label$44
	$24 = [126]
	goto $label$22 
	
.LABEL $label$43
	$24 = [128]
	goto $label$22 
	
.LABEL $label$42
	$24 = [130]
	goto $label$22 
	
.LABEL $label$41
	$24 = [145]
	goto $label$22 
	
.LABEL $label$40
	$24 = [133]
	goto $label$22 
	
.LABEL $label$39
	$24 = [135]
	goto $label$22 
	
.LABEL $label$38
	$24 = [137]
	goto $label$22 
	
.LABEL $label$37
	$24 = [139]
	goto $label$22 
	
.LABEL $label$36
	$24 = [140]
	goto $label$22 
	
.LABEL $label$35
	$24 = [141]
	goto $label$22 
	
.LABEL $label$34
	$24 = [143]
	goto $label$22 
	
.LABEL $label$33
	$24 = [147]
	goto $label$22 
	
.LABEL $label$32
	$24 = [148]
	goto $label$22 
	
.LABEL $label$31
	$24 = [152]
	goto $label$22 
	
.LABEL $label$30
	$24 = [153]
	goto $label$22 
	
.LABEL $label$29
	$24 = [158]
	goto $label$22 
	
.LABEL $label$28
	$24 = [159]
	goto $label$22 
	
.LABEL $label$27
	$24 = [164]
	goto $label$22 
	
.LABEL $label$26
	$24 = [165]
	goto $label$22 
	
.LABEL $label$25
	$24 = [172]
	goto $label$22 
	
.LABEL $label$24
	$24 = [173]
	goto $label$22 
	
.LABEL $label$23
	$24 = [177]
	goto $label$22 
	$24
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [40]) = $1
	*(($4 = ($3 + [32]))) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	*($3 + [36]) = [0]
	$5 = *($0)
	*($3) = $5
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $6)
	$7 = CALL db_find_i64($5, $6, (int_64)-6030912139319414784, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $50($3, $7)
	CALL eosio_assert(((int_32)*($0 + [48]) == (int_32)$3), [18204])
	CALL eosio_assert([1], [18564])
	CALL eosio_assert(((int_32)*($0 + [48]) == (int_32)$3), [18599])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$8()), [18645])
	$7 = ($0 + [8])
	*($3 + [112]) = *($7)
	$1 = *($0)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($0 + [16]))), [18283])
	$5 = ((int_64)*($7) + (int_64)*($2))
	*($7) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)*($7) < (int_64)4611686018427387904), [18345])
	CALL eosio_assert(((int_64)$1 == (int_64)*($0)), [18696])
	*($3 + [104]) = (($3 + [48]) + [48])
	*($3 + [100]) = ($3 + [48])
	*($3 + [96]) = ($3 + [48])
	*($3 + [120]) = ($3 + [96])
	*($3 + [132]) = $7
	*($3 + [128]) = $0
	*($3 + [136]) = ($0 + [24])
	*($3 + [140]) = ($0 + [40])
	CALL $51(($3 + [128]), ($3 + [120]))
	CALL db_update_i64(*($0 + [52]), (int_64)0, ($3 + [48]), [48])
	$2 = ($3 + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$5 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($3 + [128]) = *($7)
	if ( (CALL $177(($3 + [112]), ($3 + [128]), [8]) == 0) ){ goto $label$3 }
	$7 = ($0 + [56])
	$0 = *($7)
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = CALL db_idx64_find_primary(*($3), *(($3 + [8])), (int_64)-6030912139319414784, ($3 + [120]), $1)
	*($7) = $0
	
.LABEL $label$6
	CALL db_idx64_update($0, (int_64)0, ($3 + [128]))
	$2 = *($3 + [24])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$1 = *($0)
	*($3 + [100]) = $2
	*($3 + [96]) = ($3 + [40])
	*($3 + [128]) = $1
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$8()), [18755])
	*($3 + [52]) = ($3 + [96])
	*($3 + [48]) = $3
	*($3 + [56]) = ($3 + [128])
	$0 = CALL _Znwj([64])
	CALL $52($0)
	*($0 + [48]) = $3
	CALL $53(($3 + [48]), $0)
	*($3 + [120]) = $0
	$1 = *($0)
	*($3 + [48]) = $1
	$2 = *($0 + [52])
	*($3 + [112]) = $2
	$8 = ($3 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*($4)) ){ goto $label$8 }
	*($7 + [8]) = $1
	*($7 + [16]) = $2
	*($3 + [120]) = [0]
	*($7) = $0
	*($8) = ($7 + [24])
	$0 = *($3 + [120])
	*($3 + [120]) = [0]
	if ( $0 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$8
	CALL $54(($3 + [24]), ($3 + [120]), ($3 + [48]), ($3 + [112]))
	$0 = *($3 + [120])
	*($3 + [120]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$7
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$2 = *($3 + [24])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($3 + [28])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($3 + [24]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $2
	
.LABEL $label$9
	*($4) = $2
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($3 + [144])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3665743621652480000, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$7), [18204])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $84($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-3665743621652480000, $6))
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$7), [18204])
	
.LABEL $label$2
	*(($4 + [104])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [18204])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $116($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [18204])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $171($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [17981])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $24(*($1), ($0 + [32]))
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$4 = ($global$0 - [240])
	$global$0 = $4
	CALL require_auth(*($1))
	$5 = *($1)
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [17192]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$11 = ($11 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$5 == (int_64)$9), [17205])
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [17192]
	$9 = (int_64)0
	
.LOOP $label$5:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$6 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$11 = ($11 + [-91])
	goto $label$7 
	
.LABEL $label$8
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$6
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$5 }
	*((($4 + [200]) + [32])) = [0]
	*($4 + [216]) = (int_64)-1
	*($4 + [236]) = [0]
	$6 = *($3)
	*($4 + [208]) = $6
	*($4 + [200]) = $9
	*($4 + [224]) = (int_64)0
	$8 = CALL db_lowerbound_i64($9, $6, (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$9 }
	$12 = (($4 + [48]) | [1])
	$13 = (($4 + [64]) | [1])
	$14 = (($4 + [184]) + [8])
	$15 = CALL $13(($4 + [200]), $8)
	$16 = (($4 + [112]) + [16])
	$17 = ($4 + [140])
	
.LOOP $label$10:
	*($14) = *(($15 + [32]))
	*($4 + [184]) = *($15 + [24])
	*(($18 = (($4 + [168]) + [8]))) = *(($15 + [72]))
	$6 = *($15 + [64])
	*($4 + [168]) = $6
	if ( (int_64)($6 == 0) ){ goto $label$12 }
	$10 = *($18)
	goto $label$11 
	
.LABEL $label$12
	$10 = *($14)
	CALL eosio_assert([1], [17987])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$6 = $7
	$11 = [1]
	$19 = $8
	$8 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$6 = $7
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$19 = ($8 + [1])
	$8 = $19
	if ( $11 ){ goto $label$17 }
	$11 = [1]
	$8 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$11 = [0]
	
.LABEL $label$13
	CALL eosio_assert($11, [18036])
	*($18) = $10
	*($4 + [168]) = (int_64)0
	
.LABEL $label$11
	CALL eosio_assert(((int_64)*($14) == (int_64)$10), [17226])
	$6 = *($4 + [184])
	CALL __multi3(($4 + [24]), $6, (int_64)$6 >> (int_64)63), *($15 + [56]), (int_64)0)
	$10 = *($14)
	$6 = *((($4 + [24]) + [8]))
	$7 = *($4 + [24])
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [18096])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [18120])
	*(($11 = (($4 + [152]) + [8]))) = $10
	CALL eosio_assert([1], [18056])
	CALL eosio_assert([1], [18071])
	*($4 + [152]) = ((int_64)$7 / (int_64)100000)
	*($16) = (int_64)-1
	*(($20 = (($4 + [112]) + [24]))) = (int_64)0
	$8 = [0]
	*((($4 + [112]) + [32])) = [0]
	$6 = (uint_64)*($14) >> (uint_64)(int_64)8
	*((($4 + [112]) + [8])) = $6)
	$7 = *($0)
	*($4 + [112]) = $7
	$19 = CALL db_find_i64($7, $6, (int_64)7035927889518264320, *($1))
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$18 }
	$8 = CALL $5(($4 + [112]), $19)
	CALL eosio_assert(((int_32)*($8 + [288]) == (int_32)($4 + [112])), [18204])
	
.LABEL $label$18
	$6 = *($8 + [112])
	$6 = *($4 + [184])
	CALL __multi3(($4 + [8]), $6, (int_64)$6 >> (int_64)63), $6, (int_64)$6 >> (int_64)63))
	$7 = *($14)
	$6 = *((($4 + [8]) + [8]))
	$10 = *($4 + [8])
	CALL eosio_assert(( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [18096])
	CALL eosio_assert(( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [18120])
	CALL eosio_assert([1], [18056])
	CALL eosio_assert([1], [18071])
	*(($19 = (($4 + [80]) + [8]))) = $7
	CALL eosio_assert([1], [18056])
	CALL eosio_assert([1], [18071])
	$6 = ((int_64)$10 / (int_64)200000)
	*($4 + [80]) = $6
	*(($21 = (($4 + [64]) + [8]))) = *($11)
	*($4 + [64]) = *($4 + [152])
	CALL eosio_assert([1], [18056])
	$10 = *($4 + [64])
	CALL eosio_assert([1], [18071])
	$10 = ((int_64)$10 / (int_64)20)
	*($4 + [64]) = $10
	CALL eosio_assert(((int_64)$7 == (int_64)*($21)), [18145])
	$8 = ( ($4 + [64]) ? ($4 + [80]) : ((int_64)$10 < (int_64)$6) )
	*((($4 + [96]) + [8])) = *(($8 + [8]))
	*($4 + [96]) = *($8)
	*($21) = [0]
	*($4 + [64]) = (int_64)0
	$8 = CALL $178([17264])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$26 }
	*($4 + [64]) = ($8 << [1])
	$11 = $13
	if ( $8 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$18 = (($8 + [16]) & [-16])
	$11 = CALL _Znwj($18)
	*($21) = $11
	*($4 + [64]) = ($18 | [1])
	*($4 + [68]) = $8
	
.LABEL $label$25
	CALL memcpy($11, [17264], $8)
	
.LABEL $label$24
	*(($11 + $8)) = [0]
	*(($11 = (($4 + [48]) + [8]))) = [0]
	*($4 + [48]) = (int_64)0
	$6 = *($3)
	
.LOOP $label$27:
	$7 = ((uint_64)$6 / (uint_64)(int_64)10)
	$8 = (CASTING uint_32)(uint_64 (int_64))($6 - ((int_64)$7 * (int_64)10))
	CALL $1(($4 + [80]), int_32((( ($8) | [48]) ? ($8 + [55]) : ($8 <= [10]) ) << [24]) >> [24]), ($4 + [48]))
	if ( (*($4 + [48]) & [1]) ){ goto $label$29 }
	*($4 + [48]) = [0]
	goto $label$28 
	
.LABEL $label$29
	*(*($11)) = [0]
	*($4 + [52]) = [0]
	
.LABEL $label$28
	CALL $166(($4 + [48]), [0])
	*($11) = *($19)
	*($4 + [48]) = *($4 + [80])
	$8 = ((uint_64)$6 > (uint_64)(int_64)9)
	$6 = $7
	if ( $8 ){ goto $label$27 }
	$8 = *($4 + [48])
	$18 = ($8 & [1])
	CALL $168(($4 + [64]), ( *($11) ? $12 : $18 ), ( *($4 + [52]) ? uint_32($8 >> [1]) : $18 ))
	*($4 + [40]) = *(($15 + [56]))
	*($19) = *($14)
	*($4 + [80]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$22 = ($15 + [16])
	$23 = ($15 + [8])
	$6 = (uint_64)*($19) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$6 = $7
	$19 = [1]
	$18 = $8
	$8 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$33
	$6 = $7
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$31 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$19 = ((int_32)$8 < (int_32)[6])
	$18 = ($8 + [1])
	$8 = $18
	if ( $19 ){ goto $label$34 }
	$19 = [1]
	$8 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$19 = [0]
	
.LABEL $label$30
	CALL eosio_assert($19, [18036])
	CALL $14($0, $1, $14, $23, $22, $4, $15, ($4 + [40]), ($4 + [184]), ($4 + [152]), ($4 + [168]), ($4 + [80]), ($4 + [64]), ($4 + [96]))
	CALL eosio_assert([1], [18806])
	$8 = *($15 + [84])
	$15 = [0]
	$8 = CALL db_next_i64($8, ($4 + [80]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$35 }
	$15 = CALL $13(($4 + [200]), $8)
	
.LABEL $label$35
	if ( (*($4 + [48]) & [1]) ){ goto $label$37 }
	if ( (*($4 + [64]) & [1]) ){ goto $label$36 }
	goto $label$22 
	
.LABEL $label$37
	CALL _ZdlPv(*($11))
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$36
	CALL _ZdlPv(*($21))
	$19 = *($20)
	if ( $19 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	CALL $161(($4 + [64]))
	
.LABEL $label$22
	$19 = *($20)
	if ( ($19 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$8 = *($17)
	if ( ((int_32)$8 == (int_32)$19) ){ goto $label$19 }
	
.LOOP $label$38:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$39 }
	CALL _ZdlPv($11)
	
.LABEL $label$39
	if ( ((int_32)$19 != (int_32)$8) ){ goto $label$38 }
	$8 = *($20)
	*($17) = $19
	CALL _ZdlPv($8)
	if ( $15 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$20
	if ( $15 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$19
	*($17) = $19
	CALL _ZdlPv($19)
	if ( $15 ){ goto $label$10 }
	
.LABEL $label$9
	$19 = *($4 + [224])
	if ( ($19 == 0) ){ goto $label$40 }
	$18 = ($4 + [228])
	$8 = *($18)
	if ( ((int_32)$8 == (int_32)$19) ){ goto $label$42 }
	
.LOOP $label$43:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$44 }
	CALL _ZdlPv($11)
	
.LABEL $label$44
	if ( ((int_32)$19 != (int_32)$8) ){ goto $label$43 }
	$8 = *(($4 + [224]))
	goto $label$41 
	
.LABEL $label$42
	$8 = $19
	
.LABEL $label$41
	*($18) = $19
	CALL _ZdlPv($8)
	
.LABEL $label$40
	$global$0 = ($4 + [240])
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18255])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $181($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([96])
	CALL $124($5)
	*($5 + [80]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [64])
	CALL $125(($3 + [32]), ($3 + [24]))
	*($5 + [88]) = [-1]
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = (int_64)
	*($3 + [32]) = $6((int_64)0 - *($5)))
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $126(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $185 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16876])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16684]
	$3 = (((int_32)$1 * (int_32)[12]) + [16684])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = CALL $178([17160])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$6 }
	*($0) = ($6 << [1])
	$7 = ($0 + [1])
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $7
	*($0 + [4]) = $6
	
.LABEL $label$5
	CALL memcpy($7, [17160], $6)
	
.LABEL $label$4
	*(($7 + $6)) = [0]
	$6 = *($4)
	$7 = ($6 & [1])
	CALL $168($0, ( *($4 + [8]) ? ($4 + [1]) : $7 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $7 ))
	CALL $167($0, [18437])
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	$4 = ($5 | [1])
	
.LOOP $label$7:
	$9 = ((uint_64)$2 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$9 * (int_64)10))
	CALL $1(($5 + [16]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), $5)
	if ( (*($5) & [1]) ){ goto $label$9 }
	*($5) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*(($5 + [8]))) = [0]
	*($5 + [4]) = [0]
	
.LABEL $label$8
	CALL $166($5, [0])
	*(($5 + [8])) = *((($5 + [16]) + [8]))
	*($5) = *($5 + [16])
	$6 = ((uint_64)$2 > (uint_64)(int_64)9)
	$2 = $9
	if ( $6 ){ goto $label$7 }
	$6 = *($5)
	$7 = ($6 & [1])
	CALL $168($0, ( *(($5 + [8])) ? $4 : $7 ), ( *($5 + [4]) ? uint_32($6 >> [1]) : $7 ))
	CALL $167($0, [18442])
	*((($5 + [16]) + [8])) = [0]
	*($5 + [16]) = (int_64)0
	$6 = CALL $178([17163])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$12 }
	*($5 + [16]) = ($6 << [1])
	$7 = (($5 + [16]) | [1])
	$4 = $7
	if ( $6 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$7 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($7)
	*($5 + [16]) = ($7 | [1])
	*($5 + [24]) = $4
	*($5 + [20]) = $6
	$7 = (($5 + [16]) | [1])
	
.LABEL $label$11
	CALL memcpy($4, [17163], $6)
	
.LABEL $label$10
	*(($4 + $6)) = [0]
	$6 = *($5 + [16])
	$4 = ($6 & [1])
	CALL $168($0, ( *($5 + [24]) ? $7 : $4 ), ( *($5 + [20]) ? uint_32($6 >> [1]) : $4 ))
	if ( (*($5 + [16]) & [1]) ){ goto $label$14 }
	if ( (*($5) & [1]) ){ goto $label$13 }
	goto $label$1 
	
.LABEL $label$14
	CALL _ZdlPv(*(($5 + [24])))
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($5 + [8])))
	$global$0 = ($5 + [32])
	return (unreachable)
	
.LABEL $label$3
	CALL $161($0)
	
.LABEL $label$2
	CALL $161(($5 + [16]))
	
.LABEL $label$1
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$5 = ($global$0 - [48])
	$global$0 = $5
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = CALL $178([18363])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$8 }
	*($0) = ($6 << [1])
	$7 = ($0 + [1])
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $7
	*($0 + [4]) = $6
	
.LABEL $label$7
	CALL memcpy($7, [18363], $6)
	
.LABEL $label$6
	*(($7 + $6)) = [0]
	*($5 + [24]) = [0]
	*($5 + [16]) = (int_64)0
	$7 = (($5 + [16]) | [1])
	
.LOOP $label$9:
	$9 = ((uint_64)$2 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$9 * (int_64)10))
	CALL $1(($5 + [32]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), ($5 + [16]))
	if ( (*($5 + [16]) & [1]) ){ goto $label$11 }
	*($5 + [16]) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*((($5 + [16]) + [8]))) = [0]
	*($5 + [20]) = [0]
	
.LABEL $label$10
	CALL $166(($5 + [16]), [0])
	*((($5 + [16]) + [8])) = *((($5 + [32]) + [8]))
	*($5 + [16]) = *($5 + [32])
	$6 = ((uint_64)$2 > (uint_64)(int_64)9)
	$2 = $9
	if ( $6 ){ goto $label$9 }
	$6 = *($5 + [16])
	$8 = ($6 & [1])
	CALL $168($0, ( *((($5 + [16]) + [8])) ? $7 : $8 ), ( *($5 + [20]) ? uint_32($6 >> [1]) : $8 ))
	CALL $167($0, [18380])
	*($5) = $3
	CALL $49(($5 + [32]), $5)
	$6 = *($5 + [32])
	$7 = ($6 & [1])
	CALL $168($0, ( *($5 + [40]) ? (($5 + [32]) | [1]) : $7 ), ( *($5 + [36]) ? uint_32($6 >> [1]) : $7 ))
	CALL $167($0, [18390])
	$6 = *($4)
	$7 = ($6 & [1])
	CALL $168($0, ( *($4 + [8]) ? ($4 + [1]) : $7 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $7 ))
	CALL $167($0, [17161])
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$6 = CALL $178([17163])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$14 }
	*($5) = ($6 << [1])
	$7 = ($5 | [1])
	$4 = $7
	if ( $6 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$7 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($7)
	*($5) = ($7 | [1])
	*($5 + [8]) = $4
	*($5 + [4]) = $6
	$7 = ($5 | [1])
	
.LABEL $label$13
	CALL memcpy($4, [17163], $6)
	
.LABEL $label$12
	*(($4 + $6)) = [0]
	$6 = *($5)
	$4 = ($6 & [1])
	CALL $168($0, ( *($5 + [8]) ? $7 : $4 ), ( *($5 + [4]) ? uint_32($6 >> [1]) : $4 ))
	if ( (*($5) & [1]) ){ goto $label$16 }
	if ( (*($5 + [32]) & [1]) ){ goto $label$15 }
	goto $label$3 
	
.LABEL $label$16
	CALL _ZdlPv(*(($5 + [8])))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($5 + [40])))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $161($0)
	
.LABEL $label$4
	CALL $161($5)
	
.LABEL $label$3
	if ( (*($5 + [16]) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*(($5 + [24])))
	$global$0 = ($5 + [48])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $184 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $182([8492], $1)
	CALL memset($0, [0], $1)
	return $0
}

void .FUNC $180 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18255])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $181($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([56])
	CALL $117($5)
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $118(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $119(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $117 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [17987])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18036])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $3
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$1 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [18036])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [18036])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [18036])
	return $0
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17981])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $111(CALL $110($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17981])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [17981])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $111($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [17981])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [17981])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [17981])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [17981])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [17981])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [17981])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17981])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17981])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17981])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17981])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [112])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18255])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $181($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([240])
	CALL $127($5)
	*($5 + [224]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [80])
	*($3 + [68]) = ($5 + [96])
	*($3 + [72]) = ($5 + [112])
	*($3 + [76]) = ($5 + [120])
	*($3 + [80]) = ($5 + [136])
	*($3 + [84]) = ($5 + [152])
	*($3 + [88]) = ($5 + [168])
	*($3 + [92]) = ($5 + [184])
	*($3 + [96]) = ($5 + [200])
	*($3 + [100]) = ($5 + [208])
	*($3 + [104]) = ($5 + [216])
	CALL $128(($3 + [40]), ($3 + [32]))
	*($5 + [228]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $129(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [112])
	return $5
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$5 = ($global$0 - [272])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$1 }
	$8 = *($4)
	$7 = CALL $178([17302])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$2 }
	if ( (CALL $170($4, [0], [-1], [17302], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*((($5 + [192]) + [32])) = [0]
	*($5 + [208]) = (int_64)-1
	$6 = *($0)
	*($5 + [192]) = $6
	$9 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($5 + [200]) = $9)
	*($5 + [216]) = (int_64)0
	$8 = CALL db_lowerbound_i64($6, $9, (int_64)7035927889518264320, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	CALL $5(($5 + [192]), $8)
	goto $label$3 
	
.LABEL $label$4
	*((($5 + [64]) + [32])) = [0]
	*($5 + [80]) = (int_64)-1
	$6 = *($0)
	*($5 + [64]) = $6
	$10 = ($3 + [8])
	$9 = (uint_64)*($10) >> (uint_64)(int_64)8
	*($5 + [72]) = $9)
	*($5 + [88]) = (int_64)0
	$8 = CALL db_lowerbound_i64($6, $9, (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$6 }
	$8 = CALL $29(($5 + [64]), $8)
	*($5 + [188]) = $8
	*($5 + [184]) = ($5 + [64])
	$11 = (($5 + [192]) + [24])
	$12 = (($5 + [16]) + [8])
	$13 = ($5 + [180])
	$14 = ($5 + [224])
	$15 = ($5 + [220])
	
.LOOP $label$7:
	$6 = *($8 + [32])
	$16 = *(($8 + [40]))
	CALL eosio_assert(((int_64)*(($8 + [144])) == (int_64)$16), [18473])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($6 - *($8 + [136]))) > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [18543])
	$8 = *($5 + [188])
	$9 = *($8 + [48])
	$17 = *(($8 + [56]))
	CALL eosio_assert(((int_64)*(($8 + [160])) == (int_64)$17), [18473])
	$9 = (int_64)
	CALL eosio_assert(((int_64)$9($9 - *($8 + [152]))) > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [18543])
	CALL eosio_assert(((int_64)$17 == (int_64)$16), [18283])
	$6 = ((int_64)$9 + (int_64)$6)
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [18345])
	$8 = *($5 + [188])
	CALL eosio_assert(((int_64)$16 == (int_64)*(($8 + [104]))), [18283])
	$9 = ((int_64)*($8 + [96]) + (int_64)$6)
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [18345])
	$8 = *($5 + [188])
	$6 = *($8 + [16])
	CALL eosio_assert(((int_64)*(($8 + [128])) == (int_64)*(($8 + [24]))), [18473])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($6 - *($8 + [120]))) > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [18543])
	if ( ((int_64)$9 <= (int_64)$6) ){ goto $label$9 }
	$8 = *($5 + [188])
	$6 = *($8 + [16])
	$17 = *(($8 + [24]))
	CALL eosio_assert(((int_64)*(($8 + [128])) == (int_64)$17), [18473])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($6 - *($8 + [120]))) > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [18543])
	*($12) = $16
	CALL eosio_assert(((int_64)$17 == (int_64)$16), [18473])
	$6 = (int_64)
	*($5 + [16]) = $6($9 - $6))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [18543])
	goto $label$8 
	
.LABEL $label$9
	*($12) = *($10)
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$6 = (uint_64)*($12) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$17 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$6 = $17
	$7 = [1]
	$18 = $8
	$8 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$6 = $17
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$18 = ($8 + [1])
	$8 = $18
	if ( $7 ){ goto $label$14 }
	$7 = [1]
	$8 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$7 = [0]
	
.LABEL $label$10
	CALL eosio_assert($7, [18036])
	
.LABEL $label$8
	$8 = *($5 + [188])
	$6 = *($8 + [16])
	CALL eosio_assert(((int_64)*(($8 + [128])) == (int_64)*(($8 + [24]))), [18473])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($6 - *($8 + [120]))) > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [18543])
	if ( ((int_64)$6 <= (int_64)$9) ){ goto $label$16 }
	$8 = *($5 + [188])
	$17 = *($8 + [16])
	$6 = *(($8 + [24]))
	CALL eosio_assert(((int_64)*(($8 + [128])) == (int_64)$6), [18473])
	$17 = (int_64)
	CALL eosio_assert(((int_64)$17($17 - *($8 + [120]))) > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$17 < (int_64)4611686018427387904), [18543])
	*((($5 + [128]) + [8])) = $6
	CALL eosio_assert(((int_64)$16 == (int_64)$6), [18473])
	$6 = (int_64)
	*($5 + [128]) = $6($17 - $9))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [18521])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [18543])
	goto $label$15 
	
.LABEL $label$16
	*(($8 = (($5 + [128]) + [8]))) = *($10)
	*($5 + [128]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$6 = (uint_64)*($8) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$6 = $9
	$7 = [1]
	$18 = $8
	$8 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$6 = $9
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$18 = ($8 + [1])
	$8 = $18
	if ( $7 ){ goto $label$21 }
	$7 = [1]
	$8 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$7 = [0]
	
.LABEL $label$17
	CALL eosio_assert($7, [18036])
	
.LABEL $label$15
	$6 = *($0)
	*($13) = $3
	*((($5 + [168]) + [8])) = ($5 + [128])
	*($5 + [172]) = ($5 + [16])
	*($5 + [168]) = ($5 + [184])
	*($5 + [264]) = $6
	CALL eosio_assert(((int_64)*($5 + [192]) == (int_64)CALL $fimport$8()), [18755])
	*((($5 + [240]) + [8])) = ($5 + [264])
	*($5 + [244]) = ($5 + [168])
	*($5 + [240]) = ($5 + [192])
	$8 = CALL _Znwj([304])
	CALL $30($8)
	*($8 + [288]) = ($5 + [192])
	CALL $31(($5 + [240]), $8)
	*($5 + [256]) = $8
	$6 = *($8)
	*($5 + [240]) = $6
	$18 = *($8 + [292])
	*($5 + [236]) = $18
	$7 = *($15)
	if ( ((uint_32)$7 >= (uint_32)*($14)) ){ goto $label$24 }
	*($7 + [8]) = $6
	*($7 + [16]) = $18
	*($5 + [256]) = [0]
	*($7) = $8
	*($15) = ($7 + [24])
	$8 = *($5 + [256])
	*($5 + [256]) = [0]
	if ( $8 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL $32($11, ($5 + [256]), ($5 + [240]), ($5 + [236]))
	$8 = *($5 + [256])
	*($5 + [256]) = [0]
	if ( ($8 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv($8)
	
.LABEL $label$22
	$8 = [0]
	CALL eosio_assert(((int_32)*($5 + [188]) != (int_32)[0]), [18806])
	$7 = CALL db_next_i64(*(*($5 + [188]) + [228]), ($5 + [168]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$25 }
	$8 = CALL $29(*($5 + [184]), $7)
	
.LABEL $label$25
	*($5 + [188]) = $8
	if ( $8 ){ goto $label$7 }
	$18 = *($5 + [88])
	if ( $18 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	*($5 + [188]) = [0]
	*($5 + [184]) = ($5 + [64])
	$18 = *($5 + [88])
	if ( ($18 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$12 = ($5 + [92])
	$8 = *($12)
	if ( ((int_32)$8 == (int_32)$18) ){ goto $label$27 }
	
.LOOP $label$28:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$29 }
	CALL _ZdlPv($7)
	
.LABEL $label$29
	if ( ((int_32)$18 != (int_32)$8) ){ goto $label$28 }
	$8 = *(($5 + [88]))
	goto $label$26 
	
.LABEL $label$27
	$8 = $18
	
.LABEL $label$26
	*($12) = $18
	CALL _ZdlPv($8)
	
.LABEL $label$3
	*(($5 + [160])) = [0]
	*($5 + [144]) = (int_64)-1
	*($5 + [152]) = (int_64)0
	$6 = *($0)
	*($5 + [128]) = $6
	$9 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8
	*($5 + [136]) = $9)
	$8 = [0]
	$7 = CALL db_find_i64($6, $9, (int_64)7035927889518264320, *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$30 }
	CALL eosio_assert(((int_32)*(CALL $5(($5 + [128]), $7) + [288]) == (int_32)($5 + [128])), [18204])
	$8 = [1]
	
.LABEL $label$30
	CALL eosio_assert($8, [17317])
	$6 = CALL current_time()
	*(($5 + [92])) = (int_64)0
	*(($5 + [108])) = (int_64)0
	*(($5 + [116])) = (int_64)0
	*($5 + [76]) = [0]
	*($5 + [80]) = [0]
	*($5 + [84 align=4]) = (int_64)0
	*($5 + [100 align=4]) = (int_64)0
	*($5 + [64]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	$8 = ($5 + [100])
	$9 = *($0)
	$6 = (int_64)6
	
.LOOP $label$31:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$31 }
	*($5 + [176]) = (int_64)3617214756542218240
	*($5 + [168]) = $9
	$6 = (int_64)7
	
.LOOP $label$32:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$32 }
	*($5 + [240]) = (int_64)-5003311465336143872
	*(($5 + [40])) = *(($3 + [8]))
	*($5 + [16]) = *($1)
	*($5 + [24]) = *($2)
	*($5 + [32]) = *($3)
	CALL $162(($5 + [48]), $4)
	CALL $20($8, ($5 + [168]), $0, ($5 + [240]), ($5 + [16]))
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$33
	CALL $21($5, $0)
	*($5 + [24]) = *(($5 + [8]))
	*($5 + [16]) = *($5)
	$6 = *($0)
	CALL $22(($5 + [168]), ($5 + [64]))
	$8 = *($5 + [168])
	CALL send_deferred(($5 + [16]), $6, $8, (*($5 + [172]) - $8), [0])
	$8 = *($5 + [168])
	if ( ($8 == 0) ){ goto $label$34 }
	*($5 + [172]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$34
	CALL $23(($5 + [64]))
	$18 = *($5 + [152])
	if ( ($18 == 0) ){ goto $label$35 }
	$0 = ($5 + [156])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$18) ){ goto $label$37 }
	
.LOOP $label$38:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$39 }
	CALL _ZdlPv($7)
	
.LABEL $label$39
	if ( ((int_32)$18 != (int_32)$8) ){ goto $label$38 }
	$8 = *(($5 + [152]))
	goto $label$36 
	
.LABEL $label$37
	$8 = $18
	
.LABEL $label$36
	*($0) = $18
	CALL _ZdlPv($8)
	
.LABEL $label$35
	$18 = *($5 + [216])
	if ( ($18 == 0) ){ goto $label$1 }
	$0 = ($5 + [220])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$18) ){ goto $label$41 }
	
.LOOP $label$42:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$43 }
	CALL _ZdlPv($7)
	
.LABEL $label$43
	if ( ((int_32)$18 != (int_32)$8) ){ goto $label$42 }
	$8 = *(($5 + [216]))
	goto $label$40 
	
.LABEL $label$41
	$8 = $18
	
.LABEL $label$40
	*($0) = $18
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$global$0 = ($5 + [272])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$3 = *($1)
	*($2 + [24]) = $3
	*($2 + [32]) = $3
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$4 = CALL db_find_i64($3, $3, (int_64)-7297066191770615808, (int_64)-7297066191770615808)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $33(($2 + [24]), $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($2 + [24])), [18204])
	goto $label$1 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	$3 = *(($4 + [8]))
	$5 = *($4)
	$6 = ((int_64)$5 + (int_64)1)
	*($2) = $6
	*($2 + [8]) = ((int_64)$3 + (int_64)(CASTING uint_64)(uint_32 (uint_64)($6 <= $5)))
	CALL $34(($2 + [24]), $2, *($1))
	$3 = *($2 + [8])
	$5 = *($2)
	$7 = *($2 + [48])
	if ( ($7 == 0) ){ goto $label$3 }
	$8 = ($2 + [52])
	$1 = *($8)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$6 }
	$1 = *(($2 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $7
	
.LABEL $label$4
	*($8) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$3
	*($0) = $5
	*($0 + [8]) = $3
	$global$0 = ($2 + [64])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$6 = ($5 + ((int_32)$6 * (int_32)[40]))
	$5 = CALL $8($6, $1, *($2), *($3), $4)
	$10 = ($5 + [40])
	$8 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	$11 = ($8 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$5 = ($7 + $1)
	*((($8 = ($6 + $1)) + [-32])) = *(($5 + [-32]))
	*(($8 + [-40])) = *(($5 + [-40]))
	*(($2 = ($8 + [-24]))) = (int_64)0
	*(($3 = ($8 + [-16]))) = [0]
	$4 = ($5 + [-24])
	*($2) = *($4)
	$2 = ($5 + [-16])
	*($3) = *($2)
	*($2) = [0]
	*(($2 = ($8 + [-12]))) = (int_64)0
	*(($8 = ($8 + [-4]))) = [0]
	$3 = ($5 + [-12])
	*($2) = *($3)
	*($4) = (int_64)0
	$5 = ($5 + [-4])
	*($8) = *($5)
	*($5) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$5 = ($6 + $1)
	$8 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $8
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = *(($8 + [-12]))
	if ( ($5 == 0) ){ goto $label$10 }
	*(($8 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$5 = ($8 + [-40])
	$1 = *(($8 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($8 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $23 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $112($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $10($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $113($2, $1)
	CALL $115(CALL $114(CALL $114($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $178([17160])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$6 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$5
	CALL memcpy($6, [17160], $5)
	
.LABEL $label$4
	*(($6 + $5)) = [0]
	$5 = *($3)
	$6 = ($5 & [1])
	CALL $168($0, ( *($3 + [8]) ? ($3 + [1]) : $6 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $6 ))
	CALL $167($0, [18437])
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	$3 = ($4 | [1])
	
.LOOP $label$7:
	$8 = ((uint_64)$2 / (uint_64)(int_64)10)
	$5 = (CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$8 * (int_64)10))
	CALL $1(($4 + [16]), int_32((( ($5) | [48]) ? ($5 + [55]) : ($5 <= [10]) ) << [24]) >> [24]), $4)
	if ( (*($4) & [1]) ){ goto $label$9 }
	*($4) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*(($4 + [8]))) = [0]
	*($4 + [4]) = [0]
	
.LABEL $label$8
	CALL $166($4, [0])
	*(($4 + [8])) = *((($4 + [16]) + [8]))
	*($4) = *($4 + [16])
	$5 = ((uint_64)$2 > (uint_64)(int_64)9)
	$2 = $8
	if ( $5 ){ goto $label$7 }
	$5 = *($4)
	$6 = ($5 & [1])
	CALL $168($0, ( *(($4 + [8])) ? $3 : $6 ), ( *($4 + [4]) ? uint_32($5 >> [1]) : $6 ))
	CALL $167($0, [18460])
	*((($4 + [16]) + [8])) = [0]
	*($4 + [16]) = (int_64)0
	$5 = CALL $178([17163])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$12 }
	*($4 + [16]) = ($5 << [1])
	$6 = (($4 + [16]) | [1])
	$3 = $6
	if ( $5 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$6 = (($5 + [16]) & [-16])
	$3 = CALL _Znwj($6)
	*($4 + [16]) = ($6 | [1])
	*($4 + [24]) = $3
	*($4 + [20]) = $5
	$6 = (($4 + [16]) | [1])
	
.LABEL $label$11
	CALL memcpy($3, [17163], $5)
	
.LABEL $label$10
	*(($3 + $5)) = [0]
	$5 = *($4 + [16])
	$3 = ($5 & [1])
	CALL $168($0, ( *($4 + [24]) ? $6 : $3 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $3 ))
	if ( (*($4 + [16]) & [1]) ){ goto $label$14 }
	if ( (*($4) & [1]) ){ goto $label$13 }
	goto $label$1 
	
.LABEL $label$14
	CALL _ZdlPv(*(($4 + [24])))
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [8])))
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$3
	CALL $161($0)
	
.LABEL $label$2
	CALL $161(($4 + [16]))
	
.LABEL $label$1
	$global$0 = ($4 + [32])
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17981])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17981])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$0), [18204])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4152997948076064768, (int_64)4152997948076064768)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $26($0, $4)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$0), [18204])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18564])
	CALL $55($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $56($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18255])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $181($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([128])
	CALL $130($5)
	*($5 + [112]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [80])
	*($3 + [64]) = ($5 + [88])
	*($3 + [68]) = ($5 + [96])
	*($3 + [72]) = ($5 + [104])
	CALL $131(($3 + [40]), ($3 + [32]))
	*($5 + [116]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)4152997948076064768
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)4152997948076064768
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $132(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $181($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [18278])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [18278])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $185($2)
	
.LABEL $label$5
	$7 = *($3)
	*($3 + [16]) = *($6)
	*($3 + [24]) = $7
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($3 + [24])), (int_32 ($3 + [16])), (int_32 $5))
	$global$0 = ($3 + [32])
	return [1]
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [224])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $181($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	$1 = CALL memset($3, [0], [72])
	CALL $65($1)
	*($1 + [84]) = $6
	*($1 + [80]) = $6
	*($1 + [88]) = ($6 + $7)
	*($1 + [72]) = ($1 + [80])
	*($1 + [156]) = ($1 + [8])
	*($1 + [160]) = ($1 + [16])
	*($1 + [164]) = ($1 + [24])
	*($1 + [168]) = ($1 + [40])
	*($1 + [172]) = ($1 + [56])
	*($1 + [152]) = $1
	CALL $109(($1 + [152]), ($1 + [72]))
	if ( ($7 <= [513]) ){ goto $label$4 }
	CALL $185($6)
	
.LABEL $label$4
	CALL memcpy(($1 + [80]), $1, [72])
	CALL memcpy(($1 + [152]), ($1 + [80]), [72])
	$6 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($6) + $5))
	
.LABEL $label$5
	CALL void $6((int_32 ($1 + [152])), (int_32 $5))
	$global$0 = ($1 + [224])
	return [1]
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $181($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [18278])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $185($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $181($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [18278])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $185($2)
	
.LABEL $label$5
	*($3 + [8]) = $6
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $181($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $108(($3 + [24]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $185($2)
	
.LABEL $label$5
	*(($1 = (($3 + [48]) + [8]))) = *(($3 + [40]))
	*($3 + [48]) = *($3 + [32])
	$6 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($1)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$7 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $7
	*((($3 + [8]) + [8])) = $7
	$7 = *($3 + [64])
	*($3 + [8]) = $7
	*($3 + [80]) = $7
	CALL void $1((int_32 $6), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $181($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [18278])
	CALL memcpy($3, $2, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [18278])
	$7 = ($3 + [8])
	CALL memcpy($7, ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [18278])
	$6 = ($3 + [16])
	CALL memcpy($6, ($2 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $185($2)
	
.LABEL $label$5
	$8 = *($6)
	$9 = *($3)
	*($3 + [32]) = *($7)
	*($3 + [40]) = $9
	*($3 + [24]) = $8
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($3 + [40])), (int_32 ($3 + [32])), (int_32 ($3 + [24])), (int_32 $5))
	$global$0 = ($3 + [48])
	return [1]
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [18278])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $149(*($1), ($0 + [32]))
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$5 }
	if ( ($1 <= [513]) ){ goto $label$4 }
	$2 = CALL $181($1)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL $108($3, [0], $1)
	if ( ((uint_32)$1 >= (uint_32)[513]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $1)
	CALL $108($3, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $185($2)
	
.LABEL $label$1
	*(($1 = (($3 + [24]) + [8]))) = *(($3 + [16]))
	*($3 + [24]) = *($3 + [8])
	$6 = *($3)
	*((($3 + [40]) + [8])) = *($1)
	*($3 + [56]) = $6
	*($3 + [40]) = *($3 + [24])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($3 + [56])), (int_32 ($3 + [40])), (int_32 $5))
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18278])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18278])
	CALL memcpy($0, *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [18278])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($0 + [16])) = (int_64)1398362884
	CALL eosio_assert([1], [17987])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [18036])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [18278])
	CALL memcpy($0, $1, [8])
	$4 = ($2 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [18278])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [18278])
	CALL memcpy(($0 + [16]), ($1 + [16]), [8])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	$2 = ($global$0 - [432])
	$global$0 = $2
	*((($2 + [248]) + [32])) = [0]
	*($2 + [264]) = (int_64)-1
	*($2 + [272]) = (int_64)0
	$3 = *($0)
	*($2 + [248]) = $3
	$4 = (uint_64)*($1) >> (uint_64)(int_64)8
	*($2 + [256]) = $4)
	$5 = [0]
	$6 = CALL db_find_i64($3, $4, (int_64)4152997948076064768, (int_64)4152997948076064768)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $26(($2 + [248]), $6)
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)($2 + [248])), [18204])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18836])
	CALL memcpy(($2 + [136]), $5, [112])
	*($2 + [216]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*((($2 + [96]) + [32])) = [0]
	*($2 + [112]) = (int_64)-1
	$3 = *($0)
	*($2 + [96]) = $3
	$4 = (uint_64)*($1) >> (uint_64)(int_64)8
	*($2 + [104]) = $4)
	*($2 + [120]) = (int_64)0
	$5 = CALL db_lowerbound_i64($3, $4, (int_64)4406679984211492864, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$7 = (($2 + [32]) + [24])
	$8 = (($2 + [288]) + [42])
	$9 = (($2 + [288]) + [67])
	$10 = (($2 + [32]) + [16])
	$11 = (($2 + [32]) + [32])
	$12 = (($2 + [32]) + [28])
	$13 = ($2 + [380])
	$14 = ($2 + [388])
	$15 = ($2 + [404])
	$16 = ($2 + [208])
	$17 = CALL $39(($2 + [96]), $5)
	if ( ((int_32)*($17 + [34]) != (int_32)[1]) ){ goto $label$4 }
	$18 = [2]
	goto $label$2 
	
.LABEL $label$4
	$18 = [0]
	goto $label$2 
	
.LABEL $label$3
	$18 = [63]
	
.LABEL $label$2
	
.LOOP $label$5:
	goto $label$86 
	
.LABEL $label$148
	*($2 + [88]) = *(($0 + [8]))
	*(($19 = (($2 + [72]) + [8]))) = (int_64)1398362884
	*($2 + [72]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$3 = (int_64)5462355
	$5 = [0]
	$18 = [3]
	goto $label$5 
	
.LABEL $label$147
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$55 }
	$18 = [57]
	goto $label$5 
	
.LABEL $label$146
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$18 = [58]
	goto $label$5 
	
.LABEL $label$145
	$3 = $4
	$6 = [1]
	$20 = $5
	$5 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$144
	$3 = $4
	$18 = [60]
	goto $label$5 
	
.LABEL $label$143
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$56 }
	$18 = [61]
	goto $label$5 
	
.LABEL $label$142
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$20 = ($5 + [1])
	$5 = $20
	if ( $6 ){ goto $label$16 }
	$18 = [62]
	goto $label$5 
	
.LABEL $label$141
	$6 = [1]
	$5 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$140
	$6 = [0]
	$18 = [5]
	goto $label$5 
	
.LABEL $label$139
	CALL eosio_assert($6, [18036])
	*($10) = (int_64)-1
	*($7) = (int_64)0
	*($11) = [0]
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8
	*(($21 = (($2 + [32]) + [8]))) = $3)
	$4 = *($0)
	*($2 + [32]) = $4
	$5 = CALL db_lowerbound_i64($4, $3, (int_64)4406680039000797184, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$54 }
	$18 = [6]
	goto $label$5 
	
.LABEL $label$138
	CALL $40(($2 + [32]), $5)
	*($2 + [292]) = [0]
	*($2 + [288]) = ($2 + [32])
	*($2 + [88]) = *(*(CALL $41(($2 + [288])) + [4]))
	*($2 + [292]) = [0]
	*($2 + [288]) = ($2 + [32])
	$5 = *(CALL $41(($2 + [288])) + [4])
	*($19) = *(($5 + [24]))
	*($2 + [72]) = *($5 + [16])
	$18 = [7]
	goto $label$5 
	
.LABEL $label$137
	$22 = CALL current_time()
	$4 = *($2 + [88])
	$3 = *(($0 + [16]))
	if ( ((uint_64)((int_64)$3 + (int_64)$4) >= (uint_64)$22) ){ goto $label$53 }
	$18 = [20]
	goto $label$5 
	
.LABEL $label$136
	$3 = ((int_64)((int_64)((int_64)((uint_64)(int_64))($22 - $4) / (uint_64)$3) & (int_64)4294967295) * (int_64)$3) + (int_64)$4
	*($2 + [8]) = $3)
	CALL $42(($2 + [16]), $0, *($1), [1], $3, *($17 + [32]))
	$3 = *($2 + [8])
	$6 = *($12)
	$19 = *($7)
	if ( ((int_32)$19 == (int_32)$6) ){ goto $label$43 }
	$18 = [21]
	goto $label$5 
	
.LABEL $label$135
	$5 = ($6 + [-24])
	$20 = *($5)
	if ( ((int_64)*($20) == (int_64)$3) ){ goto $label$42 }
	$18 = [22]
	goto $label$5 
	
.LABEL $label$134
	$6 = $5
	if ( ((int_32)$19 != (int_32)$5) ){ goto $label$44 }
	goto $label$45 
	
.LABEL $label$133
	$3 = ((uint_64)$22 / (uint_64)(int_64)60000000)
	if ( ((int_64)((uint_64)$3 % (uint_64)(int_64)3) != (int_64)0) ){ goto $label$52 }
	$18 = [17]
	goto $label$5 
	
.LABEL $label$132
	if ( ((int_64)*($17 + [40]) == (int_64)$3) ){ goto $label$51 }
	$18 = [18]
	goto $label$5 
	
.LABEL $label$131
	CALL $42(($2 + [16]), $0, *($1), [0], (int_64)0, [0])
	CALL eosio_assert([1], [18564])
	CALL eosio_assert(((int_32)*($17 + [72]) == (int_32)($2 + [96])), [18599])
	CALL eosio_assert(((int_64)*($2 + [96]) == (int_64)CALL $fimport$8()), [18645])
	*($17 + [40]) = $3
	*($17 + [16]) = *($2 + [16])
	*(($17 + [24])) = *((($2 + [16]) + [8]))
	$3 = *($17)
	CALL eosio_assert([1], [18696])
	*((($2 + [408]) + [8])) = $9
	*($2 + [412]) = ($2 + [288])
	*($2 + [408]) = ($2 + [288])
	*($2 + [8]) = ($2 + [408])
	*((($2 + [368]) + [8])) = ($17 + [16])
	*($13) = ($17 + [32])
	*((($2 + [368]) + [16])) = ($17 + [33])
	*($14) = ($17 + [34])
	*((($2 + [368]) + [24])) = ($17 + [40])
	*((($2 + [368]) + [28])) = ($17 + [48])
	*((($2 + [368]) + [32])) = ($17 + [56])
	*($15) = ($17 + [64])
	*($2 + [372]) = ($17 + [8])
	*($2 + [368]) = $17
	CALL $43(($2 + [368]), ($2 + [8]))
	CALL db_update_i64(*($17 + [76]), (int_64)0, ($2 + [288]), [67])
	$5 = (($2 + [96]) + [16])
	if ( (uint_64)($3 <= *($5)) ){ goto $label$50 }
	$18 = [19]
	goto $label$5 
	
.LABEL $label$130
	*($5) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$20 = *($7)
	if ( ($20 == 0) ){ goto $label$61 }
	$18 = [10]
	goto $label$5 
	
.LABEL $label$129
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$20) ){ goto $label$48 }
	$18 = [11]
	goto $label$5 
	
.LABEL $label$128
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$47 }
	$18 = [12]
	goto $label$5 
	
.LABEL $label$127
	CALL _ZdlPv($6)
	$18 = [13]
	goto $label$5 
	
.LABEL $label$126
	if ( ((int_32)$20 != (int_32)$5) ){ goto $label$49 }
	$18 = [14]
	goto $label$5 
	
.LABEL $label$125
	$5 = *($7)
	goto $label$46 
	
.LABEL $label$124
	$5 = $20
	$18 = [15]
	goto $label$5 
	
.LABEL $label$123
	*($12) = $20
	CALL _ZdlPv($5)
	goto $label$65 
	
.LABEL $label$122
	if ( ((int_32)$19 == (int_32)$6) ){ goto $label$41 }
	$18 = [56]
	goto $label$5 
	
.LABEL $label$121
	CALL eosio_assert(((int_32)*($20 + [48]) == (int_32)($2 + [32])), [18204])
	goto $label$39 
	
.LABEL $label$120
	$20 = [0]
	$5 = CALL db_find_i64(*($2 + [32]), *($21), (int_64)4406680039000797184, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$40 }
	$18 = [24]
	goto $label$5 
	
.LABEL $label$119
	$20 = CALL $40(($2 + [32]), $5)
	CALL eosio_assert(((int_32)*($20 + [48]) == (int_32)($2 + [32])), [18204])
	$18 = [25]
	goto $label$5 
	
.LABEL $label$118
	CALL eosio_assert(($20 == 0), [17467])
	$5 = CALL db_lowerbound_i64(*($2 + [32]), *($21), (int_64)4406680039000797184, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$38 }
	$18 = [26]
	goto $label$5 
	
.LABEL $label$117
	$6 = CALL $40(($2 + [32]), $5)
	$5 = [1]
	CALL eosio_assert([1], [18806])
	$6 = CALL db_next_i64(*($6 + [52]), ($2 + [288]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$37 }
	$18 = [27]
	goto $label$5 
	
.LABEL $label$116
	$5 = [1]
	$18 = [28]
	goto $label$5 
	
.LABEL $label$115
	$6 = CALL $40(($2 + [32]), $6)
	CALL eosio_assert([1], [18806])
	$5 = ($5 + [1])
	$6 = CALL db_next_i64(*($6 + [52]), ($2 + [288]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$36 }
	$18 = [29]
	goto $label$5 
	
.LABEL $label$114
	if ( ($5 <= [90]) ){ goto $label$35 }
	$18 = [50]
	goto $label$5 
	
.LABEL $label$113
	$5 = [0]
	$6 = CALL db_lowerbound_i64(*($2 + [32]), *($21), (int_64)4406680039000797184, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$19 }
	$18 = [51]
	goto $label$5 
	
.LABEL $label$112
	$5 = CALL $40(($2 + [32]), $6)
	$18 = [52]
	goto $label$5 
	
.LABEL $label$111
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [18963])
	CALL eosio_assert($6, [18806])
	$6 = CALL db_next_i64(*($5 + [52]), ($2 + [288]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	$18 = [53]
	goto $label$5 
	
.LABEL $label$110
	CALL $40(($2 + [32]), $6)
	$18 = [54]
	goto $label$5 
	
.LABEL $label$109
	CALL $44(($2 + [32]), $5)
	$18 = [30]
	goto $label$5 
	
.LABEL $label$108
	$3 = *($17 + [56])
	$4 = *($17 + [64])
	$23 = *($2 + [16])
	CALL eosio_assert([1], [18564])
	CALL eosio_assert(((int_32)*($17 + [72]) == (int_32)($2 + [96])), [18599])
	CALL eosio_assert(((int_64)*($2 + [96]) == (int_64)CALL $fimport$8()), [18645])
	$24 = ((uint_64)$22 / (uint_64)(int_64)86400000000)
	*($17 + [56]) = ((int_64)$23 + (int_64)( $3 ? (int_64)0 : ((int_64)$4 == (int_64)$24) ))
	*($17 + [64]) = $24
	*($17 + [48]) = *($2 + [16])
	$3 = *($17)
	CALL eosio_assert([1], [18696])
	*(($25 = (($2 + [408]) + [8]))) = $9
	*($2 + [412]) = ($2 + [288])
	*($2 + [408]) = ($2 + [288])
	*($2 + [424]) = ($2 + [408])
	*(($26 = (($2 + [368]) + [8]))) = ($17 + [16])
	$27 = ($17 + [32])
	*($13) = $27
	*(($28 = (($2 + [368]) + [16]))) = ($17 + [33])
	*($14) = ($17 + [34])
	*((($2 + [368]) + [24])) = ($17 + [40])
	*((($2 + [368]) + [28])) = ($17 + [48])
	*((($2 + [368]) + [32])) = ($17 + [56])
	*($15) = ($17 + [64])
	*($2 + [372]) = ($17 + [8])
	*($2 + [368]) = $17
	CALL $43(($2 + [368]), ($2 + [424]))
	CALL db_update_i64(*($17 + [76]), (int_64)0, ($2 + [288]), [67])
	$5 = (($2 + [96]) + [16])
	if ( (uint_64)($3 <= *($5)) ){ goto $label$34 }
	$18 = [31]
	goto $label$5 
	
.LABEL $label$107
	*($5) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$18 = [32]
	goto $label$5 
	
.LABEL $label$106
	$23 = *($0)
	CALL eosio_assert(((int_64)*($2 + [32]) == (int_64)CALL $fimport$8()), [18755])
	*(($19 = CALL _Znwj([64])) + [24]) = (int_64)1398362884
	*($19 + [16]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$29 = ($19 + [16])
	$3 = (int_64)5462355
	$5 = [0]
	$18 = [33]
	goto $label$5 
	
.LABEL $label$105
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$18 = [44]
	goto $label$5 
	
.LABEL $label$104
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$18 = [45]
	goto $label$5 
	
.LABEL $label$103
	$3 = $4
	$6 = [1]
	$20 = $5
	$5 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$102
	$3 = $4
	$18 = [47]
	goto $label$5 
	
.LABEL $label$101
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$18 = [48]
	goto $label$5 
	
.LABEL $label$100
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$20 = ($5 + [1])
	$5 = $20
	if ( $6 ){ goto $label$20 }
	$18 = [49]
	goto $label$5 
	
.LABEL $label$99
	$6 = [1]
	$5 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$98
	$6 = [0]
	$18 = [35]
	goto $label$5 
	
.LABEL $label$97
	CALL eosio_assert($6, [18036])
	*($19 + [33]) = [0]
	CALL current_time()
	*($19 + [48]) = ($2 + [32])
	$3 = *($17 + [8])
	*($29) = *($2 + [16])
	$20 = (($2 + [16]) + [8])
	*(($29 + [8])) = *($20)
	*($19 + [40]) = $22
	*($19) = *($2 + [8])
	*($19 + [8]) = $3
	*($19 + [32]) = *($27)
	*($25) = $8
	*($2 + [412]) = ($2 + [288])
	*($2 + [408]) = ($2 + [288])
	*($2 + [424]) = ($2 + [408])
	*($26) = $29
	*($13) = ($19 + [32])
	*($28) = ($19 + [33])
	*($14) = ($19 + [40])
	*($2 + [372]) = ($19 + [8])
	*($2 + [368]) = $19
	CALL $45(($2 + [368]), ($2 + [424]))
	$3 = *($19)
	$6 = CALL db_store_i64(*($21), (int_64)4406680039000797184, $23, $3, ($2 + [288]), [42])
	*($19 + [52]) = $6
	if ( (uint_64)($3 <= *($10)) ){ goto $label$27 }
	$18 = [36]
	goto $label$5 
	
.LABEL $label$96
	*($10) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$18 = [37]
	goto $label$5 
	
.LABEL $label$95
	*($2 + [368]) = $19
	$3 = *($19)
	*($2 + [288]) = $3
	*($2 + [408]) = $6
	$5 = *($12)
	if ( ((uint_32)$5 >= (uint_32)*($11)) ){ goto $label$26 }
	$18 = [43]
	goto $label$5 
	
.LABEL $label$94
	*($5 + [8]) = $3
	*($5 + [16]) = $6
	*($2 + [368]) = [0]
	*($5) = $19
	*($12) = ($5 + [24])
	$5 = *($2 + [368])
	*($2 + [368]) = [0]
	if ( $5 ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$93
	CALL $46($7, ($2 + [368]), ($2 + [288]), ($2 + [408]))
	$5 = *($2 + [368])
	*($2 + [368]) = [0]
	if ( ($5 == 0) ){ goto $label$25 }
	$18 = [39]
	goto $label$5 
	
.LABEL $label$92
	CALL _ZdlPv($5)
	$18 = [40]
	goto $label$5 
	
.LABEL $label$91
	if ( ((int_64)*($2 + [16]) < (int_64)1) ){ goto $label$22 }
	$18 = [42]
	goto $label$5 
	
.LABEL $label$90
	CALL $47($0, ($2 + [8]), ($2 + [16]))
	$18 = [41]
	goto $label$5 
	
.LABEL $label$89
	CALL $48($0, ($2 + [88]), ($2 + [72]))
	CALL eosio_assert(((int_64)*($20) == (int_64)*($16)), [18283])
	$3 = ((int_64)*($5) + (int_64)*($2 + [16]))
	*(($5 = (($2 + [136]) + [64]))) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18326])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [18345])
	$18 = [9]
	goto $label$5 
	
.LABEL $label$88
	$20 = *($7)
	if ( $20 ){ goto $label$63 }
	goto $label$64 
	
.LABEL $label$87
	$17 = CALL $39(($2 + [96]), $5)
	if ( ((int_32)*($17 + [34]) == (int_32)[1]) ){ goto $label$62 }
	$18 = [0]
	goto $label$5 
	
.LABEL $label$86
	CALL eosio_assert([1], [18806])
	$5 = CALL db_next_i64(*($17 + [76]), ($2 + [288]))
	if ( ((int_32)$5 >= (int_32)[0]) ){ goto $label$66 }
	$18 = [63]
	goto $label$5 
	
.LABEL $label$85
	CALL $27(($2 + [248]), ($2 + [136]), *($0))
	$20 = *($2 + [120])
	if ( ($20 == 0) ){ goto $label$15 }
	$18 = [64]
	goto $label$5 
	
.LABEL $label$84
	$17 = ($2 + [124])
	$5 = *($17)
	if ( ((int_32)$5 == (int_32)$20) ){ goto $label$14 }
	$18 = [65]
	goto $label$5 
	
.LABEL $label$83
	$18 = [66]
	goto $label$5 
	
.LABEL $label$82
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	$18 = [67]
	goto $label$5 
	
.LABEL $label$81
	CALL _ZdlPv($6)
	$18 = [68]
	goto $label$5 
	
.LABEL $label$80
	if ( ((int_32)$20 != (int_32)$5) ){ goto $label$13 }
	$18 = [69]
	goto $label$5 
	
.LABEL $label$79
	$5 = *(($2 + [120]))
	goto $label$11 
	
.LABEL $label$78
	$5 = $20
	$18 = [70]
	goto $label$5 
	
.LABEL $label$77
	*($17) = $20
	CALL _ZdlPv($5)
	$18 = [71]
	goto $label$5 
	
.LABEL $label$76
	$20 = *($2 + [272])
	if ( ($20 == 0) ){ goto $label$10 }
	$18 = [72]
	goto $label$5 
	
.LABEL $label$75
	$17 = ($2 + [276])
	$5 = *($17)
	if ( ((int_32)$5 == (int_32)$20) ){ goto $label$9 }
	$18 = [73]
	goto $label$5 
	
.LABEL $label$74
	$18 = [74]
	goto $label$5 
	
.LABEL $label$73
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	$18 = [75]
	goto $label$5 
	
.LABEL $label$72
	CALL _ZdlPv($6)
	$18 = [76]
	goto $label$5 
	
.LABEL $label$71
	if ( ((int_32)$20 != (int_32)$5) ){ goto $label$8 }
	$18 = [77]
	goto $label$5 
	
.LABEL $label$70
	$5 = *(($2 + [272]))
	goto $label$6 
	
.LABEL $label$69
	$5 = $20
	$18 = [78]
	goto $label$5 
	
.LABEL $label$68
	*($17) = $20
	CALL _ZdlPv($5)
	$18 = [79]
	goto $label$5 
	
.LABEL $label$67
	$global$0 = ($2 + [432])
	return 
	
.LABEL $label$66
	$18 = [1]
	goto $label$5 
	
.LABEL $label$65
	$18 = [0]
	goto $label$5 
	
.LABEL $label$64
	$18 = [0]
	goto $label$5 
	
.LABEL $label$63
	$18 = [10]
	goto $label$5 
	
.LABEL $label$62
	$18 = [2]
	goto $label$5 
	
.LABEL $label$61
	$18 = [0]
	goto $label$5 
	
.LABEL $label$60
	$18 = [3]
	goto $label$5 
	
.LABEL $label$59
	$18 = [5]
	goto $label$5 
	
.LABEL $label$58
	$18 = [3]
	goto $label$5 
	
.LABEL $label$57
	$18 = [5]
	goto $label$5 
	
.LABEL $label$56
	$18 = [4]
	goto $label$5 
	
.LABEL $label$55
	$18 = [4]
	goto $label$5 
	
.LABEL $label$54
	$18 = [7]
	goto $label$5 
	
.LABEL $label$53
	$18 = [8]
	goto $label$5 
	
.LABEL $label$52
	$18 = [9]
	goto $label$5 
	
.LABEL $label$51
	$18 = [9]
	goto $label$5 
	
.LABEL $label$50
	$18 = [9]
	goto $label$5 
	
.LABEL $label$49
	$18 = [11]
	goto $label$5 
	
.LABEL $label$48
	$18 = [16]
	goto $label$5 
	
.LABEL $label$47
	$18 = [13]
	goto $label$5 
	
.LABEL $label$46
	$18 = [15]
	goto $label$5 
	
.LABEL $label$45
	$18 = [23]
	goto $label$5 
	
.LABEL $label$44
	$18 = [21]
	goto $label$5 
	
.LABEL $label$43
	$18 = [23]
	goto $label$5 
	
.LABEL $label$42
	$18 = [55]
	goto $label$5 
	
.LABEL $label$41
	$18 = [23]
	goto $label$5 
	
.LABEL $label$40
	$18 = [25]
	goto $label$5 
	
.LABEL $label$39
	$18 = [25]
	goto $label$5 
	
.LABEL $label$38
	$18 = [30]
	goto $label$5 
	
.LABEL $label$37
	$18 = [29]
	goto $label$5 
	
.LABEL $label$36
	$18 = [28]
	goto $label$5 
	
.LABEL $label$35
	$18 = [30]
	goto $label$5 
	
.LABEL $label$34
	$18 = [32]
	goto $label$5 
	
.LABEL $label$33
	$18 = [33]
	goto $label$5 
	
.LABEL $label$32
	$18 = [35]
	goto $label$5 
	
.LABEL $label$31
	$18 = [33]
	goto $label$5 
	
.LABEL $label$30
	$18 = [35]
	goto $label$5 
	
.LABEL $label$29
	$18 = [34]
	goto $label$5 
	
.LABEL $label$28
	$18 = [34]
	goto $label$5 
	
.LABEL $label$27
	$18 = [37]
	goto $label$5 
	
.LABEL $label$26
	$18 = [38]
	goto $label$5 
	
.LABEL $label$25
	$18 = [40]
	goto $label$5 
	
.LABEL $label$24
	$18 = [40]
	goto $label$5 
	
.LABEL $label$23
	$18 = [39]
	goto $label$5 
	
.LABEL $label$22
	$18 = [41]
	goto $label$5 
	
.LABEL $label$21
	$18 = [46]
	goto $label$5 
	
.LABEL $label$20
	$18 = [47]
	goto $label$5 
	
.LABEL $label$19
	$18 = [52]
	goto $label$5 
	
.LABEL $label$18
	$18 = [54]
	goto $label$5 
	
.LABEL $label$17
	$18 = [59]
	goto $label$5 
	
.LABEL $label$16
	$18 = [60]
	goto $label$5 
	
.LABEL $label$15
	$18 = [71]
	goto $label$5 
	
.LABEL $label$14
	$18 = [81]
	goto $label$5 
	
.LABEL $label$13
	$18 = [66]
	goto $label$5 
	
.LABEL $label$12
	$18 = [68]
	goto $label$5 
	
.LABEL $label$11
	$18 = [70]
	goto $label$5 
	
.LABEL $label$10
	$18 = [79]
	goto $label$5 
	
.LABEL $label$9
	$18 = [80]
	goto $label$5 
	
.LABEL $label$8
	$18 = [74]
	goto $label$5 
	
.LABEL $label$7
	$18 = [76]
	goto $label$5 
	
.LABEL $label$6
	$18 = [78]
	goto $label$5 
	$18
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18255])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $181($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([88])
	$6 = CALL $134($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [76])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $135(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9)
{
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	$10 = ($global$0 - [160])
	$global$0 = $10
	$1 = *($10 + [144])
	$11 = CALL $162(($10 + [144]), $1)
	CALL eosio_assert(( *($11 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) ), [17600])
	$12 = ($11 + [1])
	$13 = *($10 + [144])
	$14 = *($11 + [8])
	$15 = *($11 + [4])
	$16 = [0]
	$1 = [0]
	$17 = CALL $178([17617])
	if ( ($17 == 0) ){ goto $label$1 }
	$1 = ( $15 ? uint_32($13 >> [1]) : $1 )
	$1 = ($13 & [1])
	$18 = ( $14 ? $12 : $1 )
	$14 = ($18 + $1)
	if ( ((int_32)$1 < (int_32)$17) ){ goto $label$3 }
	$13 = $18
	
.LOOP $label$4:
	$1 = (($1 - $17) + [1])
	if ( ($1 == 0) ){ goto $label$3 }
	$1 = CALL $176($13, [124], $1)
	if ( ($1 == 0) ){ goto $label$3 }
	if ( (CALL $177($1, [17617], $17) == 0) ){ goto $label$2 }
	$13 = ($1 + [1])
	$1 = ($14 - $13)
	if ( ((int_32)$1 >= (int_32)$17) ){ goto $label$4 }
	
.LABEL $label$3
	$1 = $14
	
.LABEL $label$2
	$1 = ( [-1] ? ($1 - $18) : ((int_32)$1 == (int_32)$14) )
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [17619])
	$1 = *($10 + [144])
	$15 = ($11 + [8])
	$13 = *($15)
	$19 = ($11 + [4])
	$14 = *($19)
	$17 = CALL $178([17617])
	if ( ($17 == 0) ){ goto $label$5 }
	$1 = ( $14 ? uint_32($1 >> [1]) : $18 )
	$18 = ($1 & [1])
	$16 = ( $13 ? $12 : $18 )
	$14 = ($16 + $1)
	if ( ((int_32)$1 < (int_32)$17) ){ goto $label$7 }
	$13 = $16
	
.LOOP $label$8:
	$1 = (($1 - $17) + [1])
	if ( ($1 == 0) ){ goto $label$7 }
	$1 = CALL $176($13, [124], $1)
	if ( ($1 == 0) ){ goto $label$7 }
	if ( (CALL $177($1, [17617], $17) == 0) ){ goto $label$6 }
	$13 = ($1 + [1])
	$1 = ($14 - $13)
	if ( ((int_32)$1 >= (int_32)$17) ){ goto $label$8 }
	
.LABEL $label$7
	$1 = $14
	
.LABEL $label$6
	$16 = ( [-1] ? ($1 - $16) : ((int_32)$1 == (int_32)$14) )
	
.LABEL $label$5
	$17 = [0]
	$18 = CALL $163(($10 + [128]), $11, [0], $16, $11)
	$14 = *($10 + [144])
	$16 = *($15)
	$15 = *($19)
	$1 = [0]
	$13 = CALL $178([17617])
	if ( ($13 == 0) ){ goto $label$9 }
	$1 = ( $15 ? uint_32($14 >> [1]) : $1 )
	$1 = ($14 & [1])
	$19 = ( $16 ? $12 : $1 )
	$16 = ($19 + $1)
	if ( ((int_32)$1 < (int_32)$13) ){ goto $label$11 }
	$14 = $19
	
.LOOP $label$12:
	$1 = (($1 - $13) + [1])
	if ( ($1 == 0) ){ goto $label$11 }
	$1 = CALL $176($14, [124], $1)
	if ( ($1 == 0) ){ goto $label$11 }
	if ( (CALL $177($1, [17617], $13) == 0) ){ goto $label$10 }
	$14 = ($1 + [1])
	$1 = ($16 - $14)
	if ( ((int_32)$1 >= (int_32)$13) ){ goto $label$12 }
	
.LABEL $label$11
	$1 = $16
	
.LABEL $label$10
	$1 = ( [-1] ? ($1 - $19) : ((int_32)$1 == (int_32)$16) )
	
.LABEL $label$9
	CALL $164($11, CALL $169($11, [0], ($1 + [1])))
	$1 = ( *($18 + [8]) ? ($18 + [1]) : (*($10 + [128]) & [1]) )
	
.LOOP $label$13:
	$13 = ($1 + $17)
	$14 = ($17 + [1])
	$17 = $14
	if ( *($13) ){ goto $label$13 }
	$20 = (CASTING uint_64)(uint_32 ($14 + [-1]))
	$21 = (int_64)0
	$22 = (int_64)59
	$23 = (int_64)0
	
.LOOP $label$14:
	$24 = (int_64)0
	if ( ((uint_64)$21 >= (uint_64)$20) ){ goto $label$15 }
	$17 = *($1)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$17 = ($17 + [-91])
	goto $label$16 
	
.LABEL $label$17
	$17 = ( ($17 + [-48]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$24 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	if ( ((uint_64)$21 > (uint_64)(int_64)11) ){ goto $label$19 }
	$24 = ((int_64)((int_64)$24 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	goto $label$18 
	
.LABEL $label$19
	$24 = ((int_64)$24 & (int_64)15)
	
.LABEL $label$18
	$1 = ($1 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$23 = ((int_64)$24 | (int_64)$23)
	$22 = ((int_64)$22 + (int_64)4294967291)
	if ( ((int_64)$22 != (int_64)55834574842) ){ goto $label$14 }
	*($3) = $23
	$13 = *($10 + [144])
	$3 = ($11 + [8])
	$14 = *($3)
	$15 = ($11 + [4])
	$19 = *($15)
	$16 = [0]
	$1 = [0]
	$17 = CALL $178([17617])
	if ( ($17 == 0) ){ goto $label$20 }
	$1 = ( $19 ? uint_32($13 >> [1]) : $1 )
	$1 = ($13 & [1])
	$25 = ( $14 ? $12 : $1 )
	$14 = ($25 + $1)
	if ( ((int_32)$1 < (int_32)$17) ){ goto $label$22 }
	$13 = $25
	
.LOOP $label$23:
	$1 = (($1 - $17) + [1])
	if ( ($1 == 0) ){ goto $label$22 }
	$1 = CALL $176($13, [124], $1)
	if ( ($1 == 0) ){ goto $label$22 }
	if ( (CALL $177($1, [17617], $17) == 0) ){ goto $label$21 }
	$13 = ($1 + [1])
	$1 = ($14 - $13)
	if ( ((int_32)$1 >= (int_32)$17) ){ goto $label$23 }
	
.LABEL $label$22
	$1 = $14
	
.LABEL $label$21
	$1 = ( [-1] ? ($1 - $25) : ((int_32)$1 == (int_32)$14) )
	
.LABEL $label$20
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [17639])
	$1 = *($10 + [144])
	$13 = *($3)
	$14 = *($15)
	$17 = CALL $178([17617])
	if ( ($17 == 0) ){ goto $label$24 }
	$1 = ( $14 ? uint_32($1 >> [1]) : $3 )
	$3 = ($1 & [1])
	$16 = ( $13 ? $12 : $3 )
	$14 = ($16 + $1)
	if ( ((int_32)$1 < (int_32)$17) ){ goto $label$26 }
	$13 = $16
	
.LOOP $label$27:
	$1 = (($1 - $17) + [1])
	if ( ($1 == 0) ){ goto $label$26 }
	$1 = CALL $176($13, [124], $1)
	if ( ($1 == 0) ){ goto $label$26 }
	if ( (CALL $177($1, [17617], $17) == 0) ){ goto $label$25 }
	$13 = ($1 + [1])
	$1 = ($14 - $13)
	if ( ((int_32)$1 >= (int_32)$17) ){ goto $label$27 }
	
.LABEL $label$26
	$1 = $14
	
.LABEL $label$25
	$16 = ( [-1] ? ($1 - $16) : ((int_32)$1 == (int_32)$14) )
	
.LABEL $label$24
	$15 = CALL $163(($10 + [112]), $11, [0], $16, $11)
	$13 = *($10 + [144])
	$14 = *(($11 + [8]))
	$16 = *(($11 + [4]))
	$1 = [0]
	$17 = CALL $178([17617])
	if ( ($17 == 0) ){ goto $label$28 }
	$1 = ( $16 ? uint_32($13 >> [1]) : $1 )
	$1 = ($13 & [1])
	$3 = ( $14 ? $12 : $1 )
	$14 = ($3 + $1)
	if ( ((int_32)$1 < (int_32)$17) ){ goto $label$30 }
	$13 = $3
	
.LOOP $label$31:
	$1 = (($1 - $17) + [1])
	if ( ($1 == 0) ){ goto $label$30 }
	$1 = CALL $176($13, [124], $1)
	if ( ($1 == 0) ){ goto $label$30 }
	if ( (CALL $177($1, [17617], $17) == 0) ){ goto $label$29 }
	$13 = ($1 + [1])
	$1 = ($14 - $13)
	if ( ((int_32)$1 >= (int_32)$17) ){ goto $label$31 }
	
.LABEL $label$30
	$1 = $14
	
.LABEL $label$29
	$1 = ( [-1] ? ($1 - $3) : ((int_32)$1 == (int_32)$14) )
	
.LABEL $label$28
	CALL $164($11, CALL $169($11, [0], ($1 + [1])))
	$16 = ($15 + [1])
	$17 = *($10 + [112])
	$14 = *($15 + [8])
	$13 = *($15 + [4])
	$1 = CALL $178([17161])
	if ( ($1 == 0) ){ goto $label$33 }
	$3 = ($17 & [1])
	$17 = ( $13 ? uint_32($17 >> [1]) : $3 )
	if ( ((int_32)$17 < (int_32)$1) ){ goto $label$32 }
	$3 = ( $14 ? $16 : $3 )
	$14 = ($3 + $17)
	$13 = $3
	
.LOOP $label$34:
	$17 = (($17 - $1) + [1])
	if ( ($17 == 0) ){ goto $label$32 }
	$17 = CALL $176($13, [45], $17)
	if ( ($17 == 0) ){ goto $label$32 }
	if ( (CALL $177($17, [17161], $1) == 0) ){ goto $label$35 }
	$13 = ($17 + [1])
	$17 = ($14 - $13)
	if ( ((int_32)$17 >= (int_32)$1) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	if ( ((int_32)$17 == (int_32)$14) ){ goto $label$32 }
	if ( ((int_32)($17 - $3) == (int_32)[-1]) ){ goto $label$32 }
	
.LABEL $label$33
	$13 = *($10 + [112])
	$25 = ($15 + [8])
	$14 = *($25)
	$26 = ($15 + [4])
	$3 = *($26)
	$19 = [0]
	$1 = [0]
	$17 = CALL $178([17161])
	if ( ($17 == 0) ){ goto $label$36 }
	$1 = ( $3 ? uint_32($13 >> [1]) : $1 )
	$1 = ($13 & [1])
	$27 = ( $14 ? $16 : $1 )
	$14 = ($27 + $1)
	if ( ((int_32)$1 < (int_32)$17) ){ goto $label$38 }
	$13 = $27
	
.LOOP $label$39:
	$1 = (($1 - $17) + [1])
	if ( ($1 == 0) ){ goto $label$38 }
	$1 = CALL $176($13, [45], $1)
	if ( ($1 == 0) ){ goto $label$38 }
	if ( (CALL $177($1, [17161], $17) == 0) ){ goto $label$37 }
	$13 = ($1 + [1])
	$1 = ($14 - $13)
	if ( ((int_32)$1 >= (int_32)$17) ){ goto $label$39 }
	
.LABEL $label$38
	$1 = $14
	
.LABEL $label$37
	$1 = ( [-1] ? ($1 - $27) : ((int_32)$1 == (int_32)$14) )
	
.LABEL $label$36
	$3 = CALL $163(($10 + [96]), $15, [0], $1, $15)
	$1 = *($10 + [112])
	$13 = *($25)
	$14 = *($26)
	$17 = CALL $178([17161])
	if ( ($17 == 0) ){ goto $label$40 }
	$1 = ( $14 ? uint_32($1 >> [1]) : $25 )
	$25 = ($1 & [1])
	$19 = ( $13 ? $16 : $25 )
	$14 = ($19 + $1)
	if ( ((int_32)$1 < (int_32)$17) ){ goto $label$42 }
	$13 = $19
	
.LOOP $label$43:
	$1 = (($1 - $17) + [1])
	if ( ($1 == 0) ){ goto $label$42 }
	$1 = CALL $176($13, [45], $1)
	if ( ($1 == 0) ){ goto $label$42 }
	if ( (CALL $177($1, [17161], $17) == 0) ){ goto $label$41 }
	$13 = ($1 + [1])
	$1 = ($14 - $13)
	if ( ((int_32)$1 >= (int_32)$17) ){ goto $label$43 }
	
.LABEL $label$42
	$1 = $14
	
.LABEL $label$41
	$19 = ( [-1] ? ($1 - $19) : ((int_32)$1 == (int_32)$14) )
	
.LABEL $label$40
	$17 = [0]
	CALL $164($15, CALL $169($15, [0], ($19 + [1])))
	$3 = (*($10 + [96]) & [1])
	$19 = *($3 + [8])
	$1 = ( $19 ? ($3 + [1]) : $3 )
	
.LOOP $label$44:
	$13 = ($1 + $17)
	$14 = ($17 + [1])
	$17 = $14
	if ( *($13) ){ goto $label$44 }
	$20 = (CASTING uint_64)(uint_32 ($14 + [-1]))
	$21 = (int_64)0
	$22 = (int_64)59
	$23 = (int_64)0
	
.LOOP $label$45:
	$24 = (int_64)0
	if ( ((uint_64)$21 >= (uint_64)$20) ){ goto $label$46 }
	$17 = *($1)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$17 = ($17 + [-91])
	goto $label$47 
	
.LABEL $label$48
	$17 = ( ($17 + [-48]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$24 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	if ( ((uint_64)$21 > (uint_64)(int_64)11) ){ goto $label$50 }
	$24 = ((int_64)((int_64)$24 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	goto $label$49 
	
.LABEL $label$50
	$24 = ((int_64)$24 & (int_64)15)
	
.LABEL $label$49
	$1 = ($1 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$23 = ((int_64)$24 | (int_64)$23)
	$22 = ((int_64)$22 + (int_64)4294967291)
	if ( ((int_64)$22 != (int_64)55834574842) ){ goto $label$45 }
	*($5) = $23
	if ( ($3 == 0) ){ goto $label$32 }
	CALL _ZdlPv($19)
	
.LABEL $label$32
	$1 = ( *(($15 + [8])) ? $16 : (*($10 + [112]) & [1]) )
	$17 = [0]
	
.LOOP $label$51:
	$13 = ($1 + $17)
	$14 = ($17 + [1])
	$17 = $14
	if ( *($13) ){ goto $label$51 }
	$20 = (CASTING uint_64)(uint_32 ($14 + [-1]))
	$21 = (int_64)0
	$22 = (int_64)59
	$23 = (int_64)0
	
.LOOP $label$52:
	$24 = (int_64)0
	if ( ((uint_64)$21 >= (uint_64)$20) ){ goto $label$53 }
	$17 = *($1)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$55 }
	$17 = ($17 + [-91])
	goto $label$54 
	
.LABEL $label$55
	$17 = ( ($17 + [-48]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$54
	$24 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$53
	if ( ((uint_64)$21 > (uint_64)(int_64)11) ){ goto $label$57 }
	$24 = ((int_64)((int_64)$24 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	goto $label$56 
	
.LABEL $label$57
	$24 = ((int_64)$24 & (int_64)15)
	
.LABEL $label$56
	$1 = ($1 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$23 = ((int_64)$24 | (int_64)$23)
	$22 = ((int_64)$22 + (int_64)4294967291)
	if ( ((int_64)$22 != (int_64)55834574842) ){ goto $label$52 }
	*($4) = $23
	$13 = *($10 + [144])
	$3 = ($11 + [8])
	$14 = *($3)
	$4 = ($11 + [4])
	$19 = *($4)
	$16 = [0]
	$1 = [0]
	$17 = CALL $178([17617])
	if ( ($17 == 0) ){ goto $label$58 }
	$1 = ( $19 ? uint_32($13 >> [1]) : $1 )
	$1 = ($13 & [1])
	$25 = ( $14 ? $12 : $1 )
	$14 = ($25 + $1)
	if ( ((int_32)$1 < (int_32)$17) ){ goto $label$60 }
	$13 = $25
	
.LOOP $label$61:
	$1 = (($1 - $17) + [1])
	if ( ($1 == 0) ){ goto $label$60 }
	$1 = CALL $176($13, [124], $1)
	if ( ($1 == 0) ){ goto $label$60 }
	if ( (CALL $177($1, [17617], $17) == 0) ){ goto $label$59 }
	$13 = ($1 + [1])
	$1 = ($14 - $13)
	if ( ((int_32)$1 >= (int_32)$17) ){ goto $label$61 }
	
.LABEL $label$60
	$1 = $14
	
.LABEL $label$59
	$1 = ( [-1] ? ($1 - $25) : ((int_32)$1 == (int_32)$14) )
	
.LABEL $label$58
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [17661])
	$1 = *($10 + [144])
	$13 = *($3)
	$14 = *($4)
	$17 = CALL $178([17617])
	if ( ($17 == 0) ){ goto $label$62 }
	$1 = ( $14 ? uint_32($1 >> [1]) : $3 )
	$3 = ($1 & [1])
	$16 = ( $13 ? $12 : $3 )
	$14 = ($16 + $1)
	if ( ((int_32)$1 < (int_32)$17) ){ goto $label$64 }
	$13 = $16
	
.LOOP $label$65:
	$1 = (($1 - $17) + [1])
	if ( ($1 == 0) ){ goto $label$64 }
	$1 = CALL $176($13, [124], $1)
	if ( ($1 == 0) ){ goto $label$64 }
	if ( (CALL $177($1, [17617], $17) == 0) ){ goto $label$63 }
	$13 = ($1 + [1])
	$1 = ($14 - $13)
	if ( ((int_32)$1 >= (int_32)$17) ){ goto $label$65 }
	
.LABEL $label$64
	$1 = $14
	
.LABEL $label$63
	$16 = ( [-1] ? ($1 - $16) : ((int_32)$1 == (int_32)$14) )
	
.LABEL $label$62
	$1 = [0]
	$4 = CALL $163(($10 + [96]), $11, [0], $16, $11)
	$14 = *($10 + [144])
	$16 = *(($11 + [8]))
	$3 = *(($11 + [4]))
	$17 = [0]
	$13 = CALL $178([17617])
	if ( ($13 == 0) ){ goto $label$66 }
	$17 = ( $3 ? uint_32($14 >> [1]) : $17 )
	$17 = ($14 & [1])
	$19 = ( $16 ? $12 : $17 )
	$16 = ($19 + $17)
	if ( ((int_32)$17 < (int_32)$13) ){ goto $label$68 }
	$14 = $19
	
.LOOP $label$69:
	$17 = (($17 - $13) + [1])
	if ( ($17 == 0) ){ goto $label$68 }
	$17 = CALL $176($14, [124], $17)
	if ( ($17 == 0) ){ goto $label$68 }
	if ( (CALL $177($17, [17617], $13) == 0) ){ goto $label$67 }
	$14 = ($17 + [1])
	$17 = ($16 - $14)
	if ( ((int_32)$17 >= (int_32)$13) ){ goto $label$69 }
	
.LABEL $label$68
	$17 = $16
	
.LABEL $label$67
	$17 = ( [-1] ? ($17 - $19) : ((int_32)$17 == (int_32)$16) )
	
.LABEL $label$66
	CALL $164($11, CALL $169($11, [0], ($17 + [1])))
	$13 = CALL $162(($10 + [80]), $4)
	$16 = ($13 + [1])
	$14 = ($13 + [4])
	$3 = ($13 + [8])
	
.LOOP $label$72:
	$17 = ($17 & [1])
	$17 = *($13)
	if ( ((uint_32)$1 >= (uint_32)( *($14) ? uint_32($17 >> [1]) : $17 )) ){ goto $label$71 }
	$17 = (( *($3) ? $16 : $17 ) + $1)
	$1 = ($1 + [1])
	if ( CALL $172(*($17)) ){ goto $label$72 }
	$1 = [0]
	goto $label$70 
	
.LABEL $label$71
	$1 = [1]
	
.LABEL $label$70
	CALL eosio_assert($1, [17673])
	if ( ((*($13) & [1]) == 0) ){ goto $label$73 }
	CALL _ZdlPv(*(($13 + [8])))
	
.LABEL $label$73
	*($6) = CALL $175(( *($4 + [8]) ? ($4 + [1]) : (*($10 + [96]) & [1]) ))
	$13 = *($10 + [144])
	$3 = ($11 + [8])
	$14 = *($3)
	$6 = ($11 + [4])
	$19 = *($6)
	$16 = [0]
	$1 = [0]
	$17 = CALL $178([17617])
	if ( ($17 == 0) ){ goto $label$74 }
	$1 = ( $19 ? uint_32($13 >> [1]) : $1 )
	$1 = ($13 & [1])
	$25 = ( $14 ? $12 : $1 )
	$14 = ($25 + $1)
	if ( ((int_32)$1 < (int_32)$17) ){ goto $label$76 }
	$13 = $25
	
.LOOP $label$77:
	$1 = (($1 - $17) + [1])
	if ( ($1 == 0) ){ goto $label$76 }
	$1 = CALL $176($13, [124], $1)
	if ( ($1 == 0) ){ goto $label$76 }
	if ( (CALL $177($1, [17617], $17) == 0) ){ goto $label$75 }
	$13 = ($1 + [1])
	$1 = ($14 - $13)
	if ( ((int_32)$1 >= (int_32)$17) ){ goto $label$77 }
	
.LABEL $label$76
	$1 = $14
	
.LABEL $label$75
	$1 = ( [-1] ? ($1 - $25) : ((int_32)$1 == (int_32)$14) )
	
.LABEL $label$74
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [17698])
	$1 = *($10 + [144])
	$13 = *($3)
	$14 = *($6)
	$17 = CALL $178([17617])
	if ( ($17 == 0) ){ goto $label$78 }
	$1 = ( $14 ? uint_32($1 >> [1]) : $3 )
	$3 = ($1 & [1])
	$16 = ( $13 ? $12 : $3 )
	$14 = ($16 + $1)
	if ( ((int_32)$1 < (int_32)$17) ){ goto $label$80 }
	$13 = $16
	
.LOOP $label$81:
	$1 = (($1 - $17) + [1])
	if ( ($1 == 0) ){ goto $label$80 }
	$1 = CALL $176($13, [124], $1)
	if ( ($1 == 0) ){ goto $label$80 }
	if ( (CALL $177($1, [17617], $17) == 0) ){ goto $label$79 }
	$13 = ($1 + [1])
	$1 = ($14 - $13)
	if ( ((int_32)$1 >= (int_32)$17) ){ goto $label$81 }
	
.LABEL $label$80
	$1 = $14
	
.LABEL $label$79
	$16 = ( [-1] ? ($1 - $16) : ((int_32)$1 == (int_32)$14) )
	
.LABEL $label$78
	$1 = [0]
	$6 = CALL $163(($10 + [64]), $11, [0], $16, $11)
	$14 = *($10 + [144])
	$16 = *(($11 + [8]))
	$3 = *(($11 + [4]))
	$17 = [0]
	$13 = CALL $178([17617])
	if ( ($13 == 0) ){ goto $label$82 }
	$17 = ( $3 ? uint_32($14 >> [1]) : $17 )
	$17 = ($14 & [1])
	$19 = ( $16 ? $12 : $17 )
	$16 = ($19 + $17)
	if ( ((int_32)$17 < (int_32)$13) ){ goto $label$84 }
	$14 = $19
	
.LOOP $label$85:
	$17 = (($17 - $13) + [1])
	if ( ($17 == 0) ){ goto $label$84 }
	$17 = CALL $176($14, [124], $17)
	if ( ($17 == 0) ){ goto $label$84 }
	if ( (CALL $177($17, [17617], $13) == 0) ){ goto $label$83 }
	$14 = ($17 + [1])
	$17 = ($16 - $14)
	if ( ((int_32)$17 >= (int_32)$13) ){ goto $label$85 }
	
.LABEL $label$84
	$17 = $16
	
.LABEL $label$83
	$17 = ( [-1] ? ($17 - $19) : ((int_32)$17 == (int_32)$16) )
	
.LABEL $label$82
	CALL $164($11, CALL $169($11, [0], ($17 + [1])))
	$13 = CALL $162(($10 + [48]), $6)
	$16 = ($13 + [1])
	$14 = ($13 + [4])
	$3 = ($13 + [8])
	
.LOOP $label$88:
	$17 = ($17 & [1])
	$17 = *($13)
	if ( ((uint_32)$1 >= (uint_32)( *($14) ? uint_32($17 >> [1]) : $17 )) ){ goto $label$87 }
	$17 = (( *($3) ? $16 : $17 ) + $1)
	$1 = ($1 + [1])
	if ( CALL $172(*($17)) ){ goto $label$88 }
	$1 = [0]
	goto $label$86 
	
.LABEL $label$87
	$1 = [1]
	
.LABEL $label$86
	CALL eosio_assert($1, [17714])
	if ( ((*($13) & [1]) == 0) ){ goto $label$89 }
	CALL _ZdlPv(*(($13 + [8])))
	
.LABEL $label$89
	*($7) = CALL $175(( *($6 + [8]) ? ($6 + [1]) : (*($10 + [64]) & [1]) ))
	$13 = *($10 + [144])
	$16 = ($11 + [8])
	$14 = *($16)
	$3 = ($11 + [4])
	$7 = *($3)
	$1 = [1]
	$17 = CALL $178([17617])
	if ( ($17 == 0) ){ goto $label$90 }
	$1 = ( $7 ? uint_32($13 >> [1]) : $1 )
	$1 = ($13 & [1])
	$19 = ( $14 ? $12 : $1 )
	$14 = ($19 + $1)
	if ( ((int_32)$1 < (int_32)$17) ){ goto $label$92 }
	$13 = $19
	
.LOOP $label$93:
	$1 = (($1 - $17) + [1])
	if ( ($1 == 0) ){ goto $label$92 }
	$1 = CALL $176($13, [124], $1)
	if ( ($1 == 0) ){ goto $label$92 }
	if ( (CALL $177($1, [17617], $17) == 0) ){ goto $label$91 }
	$13 = ($1 + [1])
	$1 = ($14 - $13)
	if ( ((int_32)$1 >= (int_32)$17) ){ goto $label$93 }
	
.LABEL $label$92
	$1 = $14
	
.LABEL $label$91
	$1 = (((int_32)($1 - $19) != (int_32)[-1]) & ((int_32)$1 != (int_32)$14))
	
.LABEL $label$90
	CALL eosio_assert($1, [17743])
	$13 = *($10 + [144])
	$14 = *($16)
	$16 = *($3)
	$1 = [0]
	$17 = CALL $178([17617])
	if ( ($17 == 0) ){ goto $label$94 }
	$1 = ( $16 ? uint_32($13 >> [1]) : $1 )
	$1 = ($13 & [1])
	$3 = ( $14 ? $12 : $1 )
	$14 = ($3 + $1)
	if ( ((int_32)$1 < (int_32)$17) ){ goto $label$96 }
	$13 = $3
	
.LOOP $label$97:
	$1 = (($1 - $17) + [1])
	if ( ($1 == 0) ){ goto $label$96 }
	$1 = CALL $176($13, [124], $1)
	if ( ($1 == 0) ){ goto $label$96 }
	if ( (CALL $177($1, [17617], $17) == 0) ){ goto $label$95 }
	$13 = ($1 + [1])
	$1 = ($14 - $13)
	if ( ((int_32)$1 >= (int_32)$17) ){ goto $label$97 }
	
.LABEL $label$96
	$1 = $14
	
.LABEL $label$95
	$1 = ( [-1] ? ($1 - $3) : ((int_32)$1 == (int_32)$14) )
	
.LABEL $label$94
	$7 = CALL $163(($10 + [32]), $11, [0], $1, $11)
	$1 = *($10 + [144])
	$14 = *(($11 + [8]))
	$16 = *(($11 + [4]))
	$13 = [1]
	$17 = CALL $178([17617])
	if ( ($17 == 0) ){ goto $label$98 }
	$1 = ( $16 ? uint_32($1 >> [1]) : $13 )
	$13 = ($1 & [1])
	$3 = ( $14 ? $12 : $13 )
	$14 = ($3 + $1)
	if ( ((int_32)$1 < (int_32)$17) ){ goto $label$100 }
	$13 = $3
	
.LOOP $label$101:
	$1 = (($1 - $17) + [1])
	if ( ($1 == 0) ){ goto $label$100 }
	$1 = CALL $176($13, [124], $1)
	if ( ($1 == 0) ){ goto $label$100 }
	if ( (CALL $177($1, [17617], $17) == 0) ){ goto $label$99 }
	$13 = ($1 + [1])
	$1 = ($14 - $13)
	if ( ((int_32)$1 >= (int_32)$17) ){ goto $label$101 }
	
.LABEL $label$100
	$1 = $14
	
.LABEL $label$99
	$13 = ( [0] ? (([1] - $3) + $1) : ((int_32)$1 == (int_32)$14) )
	
.LABEL $label$98
	$1 = [0]
	CALL $164($11, CALL $169($11, [0], $13))
	$13 = CALL $162(($10 + [16]), $7)
	$16 = ($13 + [1])
	$14 = ($13 + [4])
	$3 = ($13 + [8])
	
.LOOP $label$104:
	$17 = ($17 & [1])
	$17 = *($13)
	if ( ((uint_32)$1 >= (uint_32)( *($14) ? uint_32($17 >> [1]) : $17 )) ){ goto $label$103 }
	$17 = (( *($3) ? $16 : $17 ) + $1)
	$1 = ($1 + [1])
	if ( CALL $172(*($17)) ){ goto $label$104 }
	$1 = [0]
	goto $label$102 
	
.LABEL $label$103
	$1 = [1]
	
.LABEL $label$102
	CALL eosio_assert($1, [17759])
	if ( ((*($13) & [1]) == 0) ){ goto $label$105 }
	CALL _ZdlPv(*(($13 + [8])))
	
.LABEL $label$105
	$14 = CALL $162($10, $7)
	CALL eosio_assert([1], [17987])
	$21 = (int_64)5462355
	$1 = [0]
	
.LOOP $label$108:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $21) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$107 }
	$22 = (uint_64)$21 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$21 & (int_64)65280) == (int_64)0) ){ goto $label$109 }
	$21 = $22
	$17 = [1]
	$13 = $1
	$1 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$108 }
	goto $label$106 
	
.LABEL $label$109
	$21 = $22
	
.LOOP $label$110:
	if ( ((int_64)((int_64)$21 & (int_64)65280) != (int_64)0) ){ goto $label$107 }
	$21 = (uint_64)$21 >> (uint_64)(int_64)8)
	$17 = ((int_32)$1 < (int_32)[6])
	$13 = ($1 + [1])
	$1 = $13
	if ( $17 ){ goto $label$110 }
	$17 = [1]
	$1 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$108 }
	goto $label$106 
	
.LABEL $label$107
	$17 = [0]
	
.LABEL $label$106
	CALL eosio_assert($17, [18036])
	$21 = CALL $175(( *($14 + [8]) ? ($14 + [1]) : (*($14) & [1]) ))
	*($8 + [8]) = $2
	*($8) = $21
	if ( (*($14) & [1]) ){ goto $label$123 }
	CALL $164($9, $11)
	if ( (*($10 + [32]) & [1]) ){ goto $label$122 }
	goto $label$121 
	
.LABEL $label$123
	CALL _ZdlPv(*(($14 + [8])))
	CALL $164($9, $11)
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$121 }
	
.LABEL $label$122
	CALL _ZdlPv(*($7 + [8]))
	$1 = [1]
	if ( ((*($10 + [64]) & [1]) == 0) ){ goto $label$120 }
	goto $label$119 
	
.LABEL $label$121
	$1 = [1]
	if ( (*($10 + [64]) & [1]) ){ goto $label$119 }
	
.LABEL $label$120
	if ( (*($10 + [96]) & $1) ){ goto $label$118 }
	goto $label$117 
	
.LABEL $label$119
	CALL _ZdlPv(*(($6 + [8])))
	if ( ((*($10 + [96]) & $1) == 0) ){ goto $label$117 }
	
.LABEL $label$118
	CALL _ZdlPv(*(($4 + [8])))
	$1 = [1]
	if ( ((*($10 + [112]) & [1]) == 0) ){ goto $label$116 }
	goto $label$115 
	
.LABEL $label$117
	$1 = [1]
	if ( (*($10 + [112]) & [1]) ){ goto $label$115 }
	
.LABEL $label$116
	if ( (*($10 + [128]) & $1) ){ goto $label$114 }
	goto $label$113 
	
.LABEL $label$115
	CALL _ZdlPv(*(($15 + [8])))
	if ( ((*($10 + [128]) & $1) == 0) ){ goto $label$113 }
	
.LABEL $label$114
	CALL _ZdlPv(*(($18 + [8])))
	if ( ((*($10 + [144]) & [1]) == 0) ){ goto $label$112 }
	goto $label$111 
	
.LABEL $label$113
	if ( (*($10 + [144]) & [1]) ){ goto $label$111 }
	
.LABEL $label$112
	$global$0 = ($10 + [160])
	return 
	
.LABEL $label$111
	CALL _ZdlPv(*(($11 + [8])))
	$global$0 = ($10 + [160])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12)
{
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_32 $28
	int_32 $29
	int_32 $30
	$13 = ($global$0 - [288])
	$global$0 = $13
	$1 = *($13 + [272])
	$14 = CALL $162(($13 + [272]), $1)
	CALL eosio_assert(( *($14 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) ), [17600])
	$15 = ($14 + [1])
	$16 = *($13 + [272])
	$17 = *($14 + [8])
	$18 = *($14 + [4])
	$19 = [0]
	$1 = [0]
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$1 }
	$1 = ( $18 ? uint_32($16 >> [1]) : $1 )
	$1 = ($16 & [1])
	$21 = ( $17 ? $15 : $1 )
	$17 = ($21 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$3 }
	$16 = $21
	
.LOOP $label$4:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$3 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$3 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$2 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$4 }
	
.LABEL $label$3
	$1 = $17
	
.LABEL $label$2
	$1 = ( [-1] ? ($1 - $21) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [17619])
	$1 = *($13 + [272])
	$18 = ($14 + [8])
	$16 = *($18)
	$22 = ($14 + [4])
	$17 = *($22)
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$5 }
	$1 = ( $17 ? uint_32($1 >> [1]) : $21 )
	$21 = ($1 & [1])
	$19 = ( $16 ? $15 : $21 )
	$17 = ($19 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$7 }
	$16 = $19
	
.LOOP $label$8:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$7 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$7 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$6 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$8 }
	
.LABEL $label$7
	$1 = $17
	
.LABEL $label$6
	$19 = ( [-1] ? ($1 - $19) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$5
	$20 = [0]
	$21 = CALL $163(($13 + [256]), $14, [0], $19, $14)
	$17 = *($13 + [272])
	$19 = *($18)
	$18 = *($22)
	$1 = [0]
	$16 = CALL $178([17617])
	if ( ($16 == 0) ){ goto $label$9 }
	$1 = ( $18 ? uint_32($17 >> [1]) : $1 )
	$1 = ($17 & [1])
	$22 = ( $19 ? $15 : $1 )
	$19 = ($22 + $1)
	if ( ((int_32)$1 < (int_32)$16) ){ goto $label$11 }
	$17 = $22
	
.LOOP $label$12:
	$1 = (($1 - $16) + [1])
	if ( ($1 == 0) ){ goto $label$11 }
	$1 = CALL $176($17, [124], $1)
	if ( ($1 == 0) ){ goto $label$11 }
	if ( (CALL $177($1, [17617], $16) == 0) ){ goto $label$10 }
	$17 = ($1 + [1])
	$1 = ($19 - $17)
	if ( ((int_32)$1 >= (int_32)$16) ){ goto $label$12 }
	
.LABEL $label$11
	$1 = $19
	
.LABEL $label$10
	$1 = ( [-1] ? ($1 - $22) : ((int_32)$1 == (int_32)$19) )
	
.LABEL $label$9
	CALL $164($14, CALL $169($14, [0], ($1 + [1])))
	$1 = ( *($21 + [8]) ? ($21 + [1]) : (*($13 + [256]) & [1]) )
	
.LOOP $label$13:
	$16 = ($1 + $20)
	$17 = ($20 + [1])
	$20 = $17
	if ( *($16) ){ goto $label$13 }
	$23 = (CASTING uint_64)(uint_32 ($17 + [-1]))
	$24 = (int_64)0
	$25 = (int_64)59
	$26 = (int_64)0
	
.LOOP $label$14:
	$27 = (int_64)0
	if ( ((uint_64)$24 >= (uint_64)$23) ){ goto $label$15 }
	$20 = *($1)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$20 = ($20 + [-91])
	goto $label$16 
	
.LABEL $label$17
	$20 = ( ($20 + [-48]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$27 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	if ( ((uint_64)$24 > (uint_64)(int_64)11) ){ goto $label$19 }
	$27 = ((int_64)((int_64)$27 & (int_64)31) << (int_64)((int_64)$25 & (int_64)4294967295))
	goto $label$18 
	
.LABEL $label$19
	$27 = ((int_64)$27 & (int_64)15)
	
.LABEL $label$18
	$1 = ($1 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$26 = ((int_64)$27 | (int_64)$26)
	$25 = ((int_64)$25 + (int_64)4294967291)
	if ( ((int_64)$25 != (int_64)55834574842) ){ goto $label$14 }
	*($3) = $26
	$16 = *($13 + [272])
	$3 = ($14 + [8])
	$17 = *($3)
	$18 = ($14 + [4])
	$22 = *($18)
	$19 = [0]
	$1 = [0]
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$20 }
	$1 = ( $22 ? uint_32($16 >> [1]) : $1 )
	$1 = ($16 & [1])
	$28 = ( $17 ? $15 : $1 )
	$17 = ($28 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$22 }
	$16 = $28
	
.LOOP $label$23:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$22 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$22 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$21 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$23 }
	
.LABEL $label$22
	$1 = $17
	
.LABEL $label$21
	$1 = ( [-1] ? ($1 - $28) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$20
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [17639])
	$1 = *($13 + [272])
	$16 = *($3)
	$17 = *($18)
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$24 }
	$1 = ( $17 ? uint_32($1 >> [1]) : $3 )
	$3 = ($1 & [1])
	$19 = ( $16 ? $15 : $3 )
	$17 = ($19 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$26 }
	$16 = $19
	
.LOOP $label$27:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$26 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$26 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$25 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$27 }
	
.LABEL $label$26
	$1 = $17
	
.LABEL $label$25
	$19 = ( [-1] ? ($1 - $19) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$24
	$18 = CALL $163(($13 + [240]), $14, [0], $19, $14)
	$16 = *($13 + [272])
	$17 = *(($14 + [8]))
	$19 = *(($14 + [4]))
	$1 = [0]
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$28 }
	$1 = ( $19 ? uint_32($16 >> [1]) : $1 )
	$1 = ($16 & [1])
	$3 = ( $17 ? $15 : $1 )
	$17 = ($3 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$30 }
	$16 = $3
	
.LOOP $label$31:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$30 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$30 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$29 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$31 }
	
.LABEL $label$30
	$1 = $17
	
.LABEL $label$29
	$1 = ( [-1] ? ($1 - $3) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$28
	CALL $164($14, CALL $169($14, [0], ($1 + [1])))
	$19 = ($18 + [1])
	$20 = *($13 + [240])
	$17 = *($18 + [8])
	$16 = *($18 + [4])
	$1 = CALL $178([17161])
	if ( ($1 == 0) ){ goto $label$33 }
	$3 = ($20 & [1])
	$20 = ( $16 ? uint_32($20 >> [1]) : $3 )
	if ( ((int_32)$20 < (int_32)$1) ){ goto $label$32 }
	$3 = ( $17 ? $19 : $3 )
	$17 = ($3 + $20)
	$16 = $3
	
.LOOP $label$34:
	$20 = (($20 - $1) + [1])
	if ( ($20 == 0) ){ goto $label$32 }
	$20 = CALL $176($16, [45], $20)
	if ( ($20 == 0) ){ goto $label$32 }
	if ( (CALL $177($20, [17161], $1) == 0) ){ goto $label$35 }
	$16 = ($20 + [1])
	$20 = ($17 - $16)
	if ( ((int_32)$20 >= (int_32)$1) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	if ( ((int_32)$20 == (int_32)$17) ){ goto $label$32 }
	if ( ((int_32)($20 - $3) == (int_32)[-1]) ){ goto $label$32 }
	
.LABEL $label$33
	$16 = *($13 + [240])
	$28 = ($18 + [8])
	$17 = *($28)
	$29 = ($18 + [4])
	$3 = *($29)
	$22 = [0]
	$1 = [0]
	$20 = CALL $178([17161])
	if ( ($20 == 0) ){ goto $label$36 }
	$1 = ( $3 ? uint_32($16 >> [1]) : $1 )
	$1 = ($16 & [1])
	$30 = ( $17 ? $19 : $1 )
	$17 = ($30 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$38 }
	$16 = $30
	
.LOOP $label$39:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$38 }
	$1 = CALL $176($16, [45], $1)
	if ( ($1 == 0) ){ goto $label$38 }
	if ( (CALL $177($1, [17161], $20) == 0) ){ goto $label$37 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$39 }
	
.LABEL $label$38
	$1 = $17
	
.LABEL $label$37
	$1 = ( [-1] ? ($1 - $30) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$36
	$3 = CALL $163(($13 + [224]), $18, [0], $1, $18)
	$1 = *($13 + [240])
	$16 = *($28)
	$17 = *($29)
	$20 = CALL $178([17161])
	if ( ($20 == 0) ){ goto $label$40 }
	$1 = ( $17 ? uint_32($1 >> [1]) : $28 )
	$28 = ($1 & [1])
	$22 = ( $16 ? $19 : $28 )
	$17 = ($22 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$42 }
	$16 = $22
	
.LOOP $label$43:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$42 }
	$1 = CALL $176($16, [45], $1)
	if ( ($1 == 0) ){ goto $label$42 }
	if ( (CALL $177($1, [17161], $20) == 0) ){ goto $label$41 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$43 }
	
.LABEL $label$42
	$1 = $17
	
.LABEL $label$41
	$22 = ( [-1] ? ($1 - $22) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$40
	$20 = [0]
	CALL $164($18, CALL $169($18, [0], ($22 + [1])))
	$3 = (*($13 + [224]) & [1])
	$22 = *($3 + [8])
	$1 = ( $22 ? ($3 + [1]) : $3 )
	
.LOOP $label$44:
	$16 = ($1 + $20)
	$17 = ($20 + [1])
	$20 = $17
	if ( *($16) ){ goto $label$44 }
	$23 = (CASTING uint_64)(uint_32 ($17 + [-1]))
	$24 = (int_64)0
	$25 = (int_64)59
	$26 = (int_64)0
	
.LOOP $label$45:
	$27 = (int_64)0
	if ( ((uint_64)$24 >= (uint_64)$23) ){ goto $label$46 }
	$20 = *($1)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$20 = ($20 + [-91])
	goto $label$47 
	
.LABEL $label$48
	$20 = ( ($20 + [-48]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$27 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	if ( ((uint_64)$24 > (uint_64)(int_64)11) ){ goto $label$50 }
	$27 = ((int_64)((int_64)$27 & (int_64)31) << (int_64)((int_64)$25 & (int_64)4294967295))
	goto $label$49 
	
.LABEL $label$50
	$27 = ((int_64)$27 & (int_64)15)
	
.LABEL $label$49
	$1 = ($1 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$26 = ((int_64)$27 | (int_64)$26)
	$25 = ((int_64)$25 + (int_64)4294967291)
	if ( ((int_64)$25 != (int_64)55834574842) ){ goto $label$45 }
	*($5) = $26
	if ( ($3 == 0) ){ goto $label$32 }
	CALL _ZdlPv($22)
	
.LABEL $label$32
	$1 = ( *(($18 + [8])) ? $19 : (*($13 + [240]) & [1]) )
	$20 = [0]
	
.LOOP $label$51:
	$16 = ($1 + $20)
	$17 = ($20 + [1])
	$20 = $17
	if ( *($16) ){ goto $label$51 }
	$23 = (CASTING uint_64)(uint_32 ($17 + [-1]))
	$24 = (int_64)0
	$25 = (int_64)59
	$26 = (int_64)0
	
.LOOP $label$52:
	$27 = (int_64)0
	if ( ((uint_64)$24 >= (uint_64)$23) ){ goto $label$53 }
	$20 = *($1)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$55 }
	$20 = ($20 + [-91])
	goto $label$54 
	
.LABEL $label$55
	$20 = ( ($20 + [-48]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$54
	$27 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$53
	if ( ((uint_64)$24 > (uint_64)(int_64)11) ){ goto $label$57 }
	$27 = ((int_64)((int_64)$27 & (int_64)31) << (int_64)((int_64)$25 & (int_64)4294967295))
	goto $label$56 
	
.LABEL $label$57
	$27 = ((int_64)$27 & (int_64)15)
	
.LABEL $label$56
	$1 = ($1 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$26 = ((int_64)$27 | (int_64)$26)
	$25 = ((int_64)$25 + (int_64)4294967291)
	if ( ((int_64)$25 != (int_64)55834574842) ){ goto $label$52 }
	*($4) = $26
	$16 = *($13 + [272])
	$3 = ($14 + [8])
	$17 = *($3)
	$4 = ($14 + [4])
	$22 = *($4)
	$19 = [0]
	$1 = [0]
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$58 }
	$1 = ( $22 ? uint_32($16 >> [1]) : $1 )
	$1 = ($16 & [1])
	$28 = ( $17 ? $15 : $1 )
	$17 = ($28 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$60 }
	$16 = $28
	
.LOOP $label$61:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$60 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$60 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$59 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$61 }
	
.LABEL $label$60
	$1 = $17
	
.LABEL $label$59
	$1 = ( [-1] ? ($1 - $28) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$58
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [17661])
	$1 = *($13 + [272])
	$16 = *($3)
	$17 = *($4)
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$62 }
	$1 = ( $17 ? uint_32($1 >> [1]) : $3 )
	$3 = ($1 & [1])
	$19 = ( $16 ? $15 : $3 )
	$17 = ($19 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$64 }
	$16 = $19
	
.LOOP $label$65:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$64 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$64 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$63 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$65 }
	
.LABEL $label$64
	$1 = $17
	
.LABEL $label$63
	$19 = ( [-1] ? ($1 - $19) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$62
	$1 = [0]
	$4 = CALL $163(($13 + [224]), $14, [0], $19, $14)
	$17 = *($13 + [272])
	$19 = *(($14 + [8]))
	$3 = *(($14 + [4]))
	$20 = [0]
	$16 = CALL $178([17617])
	if ( ($16 == 0) ){ goto $label$66 }
	$20 = ( $3 ? uint_32($17 >> [1]) : $20 )
	$20 = ($17 & [1])
	$22 = ( $19 ? $15 : $20 )
	$19 = ($22 + $20)
	if ( ((int_32)$20 < (int_32)$16) ){ goto $label$68 }
	$17 = $22
	
.LOOP $label$69:
	$20 = (($20 - $16) + [1])
	if ( ($20 == 0) ){ goto $label$68 }
	$20 = CALL $176($17, [124], $20)
	if ( ($20 == 0) ){ goto $label$68 }
	if ( (CALL $177($20, [17617], $16) == 0) ){ goto $label$67 }
	$17 = ($20 + [1])
	$20 = ($19 - $17)
	if ( ((int_32)$20 >= (int_32)$16) ){ goto $label$69 }
	
.LABEL $label$68
	$20 = $19
	
.LABEL $label$67
	$20 = ( [-1] ? ($20 - $22) : ((int_32)$20 == (int_32)$19) )
	
.LABEL $label$66
	CALL $164($14, CALL $169($14, [0], ($20 + [1])))
	$16 = CALL $162(($13 + [208]), $4)
	$19 = ($16 + [1])
	$17 = ($16 + [4])
	$3 = ($16 + [8])
	
.LOOP $label$72:
	$20 = ($20 & [1])
	$20 = *($16)
	if ( ((uint_32)$1 >= (uint_32)( *($17) ? uint_32($20 >> [1]) : $20 )) ){ goto $label$71 }
	$20 = (( *($3) ? $19 : $20 ) + $1)
	$1 = ($1 + [1])
	if ( CALL $172(*($20)) ){ goto $label$72 }
	$1 = [0]
	goto $label$70 
	
.LABEL $label$71
	$1 = [1]
	
.LABEL $label$70
	CALL eosio_assert($1, [17673])
	if ( ((*($16) & [1]) == 0) ){ goto $label$73 }
	CALL _ZdlPv(*(($16 + [8])))
	
.LABEL $label$73
	*($6) = CALL $175(( *($4 + [8]) ? ($4 + [1]) : (*($13 + [224]) & [1]) ))
	$16 = *($13 + [272])
	$3 = ($14 + [8])
	$17 = *($3)
	$6 = ($14 + [4])
	$22 = *($6)
	$19 = [0]
	$1 = [0]
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$74 }
	$1 = ( $22 ? uint_32($16 >> [1]) : $1 )
	$1 = ($16 & [1])
	$28 = ( $17 ? $15 : $1 )
	$17 = ($28 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$76 }
	$16 = $28
	
.LOOP $label$77:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$76 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$76 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$75 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$77 }
	
.LABEL $label$76
	$1 = $17
	
.LABEL $label$75
	$1 = ( [-1] ? ($1 - $28) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$74
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [17698])
	$1 = *($13 + [272])
	$16 = *($3)
	$17 = *($6)
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$78 }
	$1 = ( $17 ? uint_32($1 >> [1]) : $3 )
	$3 = ($1 & [1])
	$19 = ( $16 ? $15 : $3 )
	$17 = ($19 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$80 }
	$16 = $19
	
.LOOP $label$81:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$80 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$80 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$79 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$81 }
	
.LABEL $label$80
	$1 = $17
	
.LABEL $label$79
	$19 = ( [-1] ? ($1 - $19) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$78
	$1 = [0]
	$6 = CALL $163(($13 + [192]), $14, [0], $19, $14)
	$17 = *($13 + [272])
	$19 = *(($14 + [8]))
	$3 = *(($14 + [4]))
	$20 = [0]
	$16 = CALL $178([17617])
	if ( ($16 == 0) ){ goto $label$82 }
	$20 = ( $3 ? uint_32($17 >> [1]) : $20 )
	$20 = ($17 & [1])
	$22 = ( $19 ? $15 : $20 )
	$19 = ($22 + $20)
	if ( ((int_32)$20 < (int_32)$16) ){ goto $label$84 }
	$17 = $22
	
.LOOP $label$85:
	$20 = (($20 - $16) + [1])
	if ( ($20 == 0) ){ goto $label$84 }
	$20 = CALL $176($17, [124], $20)
	if ( ($20 == 0) ){ goto $label$84 }
	if ( (CALL $177($20, [17617], $16) == 0) ){ goto $label$83 }
	$17 = ($20 + [1])
	$20 = ($19 - $17)
	if ( ((int_32)$20 >= (int_32)$16) ){ goto $label$85 }
	
.LABEL $label$84
	$20 = $19
	
.LABEL $label$83
	$20 = ( [-1] ? ($20 - $22) : ((int_32)$20 == (int_32)$19) )
	
.LABEL $label$82
	CALL $164($14, CALL $169($14, [0], ($20 + [1])))
	$16 = CALL $162(($13 + [176]), $6)
	$19 = ($16 + [1])
	$17 = ($16 + [4])
	$3 = ($16 + [8])
	
.LOOP $label$88:
	$20 = ($20 & [1])
	$20 = *($16)
	if ( ((uint_32)$1 >= (uint_32)( *($17) ? uint_32($20 >> [1]) : $20 )) ){ goto $label$87 }
	$20 = (( *($3) ? $19 : $20 ) + $1)
	$1 = ($1 + [1])
	if ( CALL $172(*($20)) ){ goto $label$88 }
	$1 = [0]
	goto $label$86 
	
.LABEL $label$87
	$1 = [1]
	
.LABEL $label$86
	CALL eosio_assert($1, [17714])
	if ( ((*($16) & [1]) == 0) ){ goto $label$89 }
	CALL _ZdlPv(*(($16 + [8])))
	
.LABEL $label$89
	*($7) = CALL $175(( *($6 + [8]) ? ($6 + [1]) : (*($13 + [192]) & [1]) ))
	$16 = *($13 + [272])
	$3 = ($14 + [8])
	$17 = *($3)
	$7 = ($14 + [4])
	$22 = *($7)
	$19 = [0]
	$1 = [0]
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$90 }
	$1 = ( $22 ? uint_32($16 >> [1]) : $1 )
	$1 = ($16 & [1])
	$28 = ( $17 ? $15 : $1 )
	$17 = ($28 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$92 }
	$16 = $28
	
.LOOP $label$93:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$92 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$92 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$91 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$93 }
	
.LABEL $label$92
	$1 = $17
	
.LABEL $label$91
	$1 = ( [-1] ? ($1 - $28) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$90
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [17743])
	$1 = *($13 + [272])
	$16 = *($3)
	$17 = *($7)
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$94 }
	$1 = ( $17 ? uint_32($1 >> [1]) : $3 )
	$3 = ($1 & [1])
	$19 = ( $16 ? $15 : $3 )
	$17 = ($19 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$96 }
	$16 = $19
	
.LOOP $label$97:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$96 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$96 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$95 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$97 }
	
.LABEL $label$96
	$1 = $17
	
.LABEL $label$95
	$19 = ( [-1] ? ($1 - $19) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$94
	$1 = [0]
	$7 = CALL $163(($13 + [160]), $14, [0], $19, $14)
	$17 = *($13 + [272])
	$19 = *(($14 + [8]))
	$3 = *(($14 + [4]))
	$20 = [0]
	$16 = CALL $178([17617])
	if ( ($16 == 0) ){ goto $label$98 }
	$20 = ( $3 ? uint_32($17 >> [1]) : $20 )
	$20 = ($17 & [1])
	$22 = ( $19 ? $15 : $20 )
	$19 = ($22 + $20)
	if ( ((int_32)$20 < (int_32)$16) ){ goto $label$100 }
	$17 = $22
	
.LOOP $label$101:
	$20 = (($20 - $16) + [1])
	if ( ($20 == 0) ){ goto $label$100 }
	$20 = CALL $176($17, [124], $20)
	if ( ($20 == 0) ){ goto $label$100 }
	if ( (CALL $177($20, [17617], $16) == 0) ){ goto $label$99 }
	$17 = ($20 + [1])
	$20 = ($19 - $17)
	if ( ((int_32)$20 >= (int_32)$16) ){ goto $label$101 }
	
.LABEL $label$100
	$20 = $19
	
.LABEL $label$99
	$20 = ( [-1] ? ($20 - $22) : ((int_32)$20 == (int_32)$19) )
	
.LABEL $label$98
	CALL $164($14, CALL $169($14, [0], ($20 + [1])))
	$16 = CALL $162(($13 + [144]), $7)
	$19 = ($16 + [1])
	$17 = ($16 + [4])
	$3 = ($16 + [8])
	
.LOOP $label$104:
	$20 = ($20 & [1])
	$20 = *($16)
	if ( ((uint_32)$1 >= (uint_32)( *($17) ? uint_32($20 >> [1]) : $20 )) ){ goto $label$103 }
	$20 = (( *($3) ? $19 : $20 ) + $1)
	$1 = ($1 + [1])
	if ( CALL $172(*($20)) ){ goto $label$104 }
	$1 = [0]
	goto $label$102 
	
.LABEL $label$103
	$1 = [1]
	
.LABEL $label$102
	CALL eosio_assert($1, [17759])
	if ( ((*($16) & [1]) == 0) ){ goto $label$105 }
	CALL _ZdlPv(*(($16 + [8])))
	
.LABEL $label$105
	$17 = CALL $162(($13 + [128]), $7)
	CALL eosio_assert([1], [17987])
	$24 = (int_64)5462355
	$1 = [0]
	
.LOOP $label$108:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $24) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$107 }
	$25 = (uint_64)$24 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$24 & (int_64)65280) == (int_64)0) ){ goto $label$109 }
	$24 = $25
	$20 = [1]
	$16 = $1
	$1 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$108 }
	goto $label$106 
	
.LABEL $label$109
	$24 = $25
	
.LOOP $label$110:
	if ( ((int_64)((int_64)$24 & (int_64)65280) != (int_64)0) ){ goto $label$107 }
	$24 = (uint_64)$24 >> (uint_64)(int_64)8)
	$20 = ((int_32)$1 < (int_32)[6])
	$16 = ($1 + [1])
	$1 = $16
	if ( $20 ){ goto $label$110 }
	$20 = [1]
	$1 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$108 }
	goto $label$106 
	
.LABEL $label$107
	$20 = [0]
	
.LABEL $label$106
	CALL eosio_assert($20, [18036])
	$24 = CALL $175(( *($17 + [8]) ? ($17 + [1]) : (*($17) & [1]) ))
	*($8 + [8]) = $2
	*($8) = $24
	if ( ((*($17) & [1]) == 0) ){ goto $label$111 }
	CALL _ZdlPv(*(($17 + [8])))
	
.LABEL $label$111
	$16 = *($13 + [272])
	$3 = ($14 + [8])
	$17 = *($3)
	$8 = ($14 + [4])
	$22 = *($8)
	$19 = [0]
	$1 = [0]
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$112 }
	$1 = ( $22 ? uint_32($16 >> [1]) : $1 )
	$1 = ($16 & [1])
	$28 = ( $17 ? $15 : $1 )
	$17 = ($28 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$114 }
	$16 = $28
	
.LOOP $label$115:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$114 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$114 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$113 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$115 }
	
.LABEL $label$114
	$1 = $17
	
.LABEL $label$113
	$1 = ( [-1] ? ($1 - $28) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$112
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [17788])
	$1 = *($13 + [272])
	$16 = *($3)
	$17 = *($8)
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$116 }
	$1 = ( $17 ? uint_32($1 >> [1]) : $3 )
	$3 = ($1 & [1])
	$19 = ( $16 ? $15 : $3 )
	$17 = ($19 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$118 }
	$16 = $19
	
.LOOP $label$119:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$118 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$118 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$117 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$119 }
	
.LABEL $label$118
	$1 = $17
	
.LABEL $label$117
	$19 = ( [-1] ? ($1 - $19) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$116
	$1 = [0]
	$8 = CALL $163(($13 + [112]), $14, [0], $19, $14)
	$17 = *($13 + [272])
	$19 = *(($14 + [8]))
	$3 = *(($14 + [4]))
	$20 = [0]
	$16 = CALL $178([17617])
	if ( ($16 == 0) ){ goto $label$120 }
	$20 = ( $3 ? uint_32($17 >> [1]) : $20 )
	$20 = ($17 & [1])
	$22 = ( $19 ? $15 : $20 )
	$19 = ($22 + $20)
	if ( ((int_32)$20 < (int_32)$16) ){ goto $label$122 }
	$17 = $22
	
.LOOP $label$123:
	$20 = (($20 - $16) + [1])
	if ( ($20 == 0) ){ goto $label$122 }
	$20 = CALL $176($17, [124], $20)
	if ( ($20 == 0) ){ goto $label$122 }
	if ( (CALL $177($20, [17617], $16) == 0) ){ goto $label$121 }
	$17 = ($20 + [1])
	$20 = ($19 - $17)
	if ( ((int_32)$20 >= (int_32)$16) ){ goto $label$123 }
	
.LABEL $label$122
	$20 = $19
	
.LABEL $label$121
	$20 = ( [-1] ? ($20 - $22) : ((int_32)$20 == (int_32)$19) )
	
.LABEL $label$120
	$22 = [1]
	CALL $164($14, CALL $169($14, [0], ($20 + [1])))
	$16 = CALL $162(($13 + [96]), $8)
	$19 = ($16 + [1])
	$17 = ($16 + [4])
	$3 = ($16 + [8])
	
.LOOP $label$125:
	$20 = ($20 & [1])
	$20 = *($16)
	if ( ((uint_32)$1 >= (uint_32)( *($17) ? uint_32($20 >> [1]) : $20 )) ){ goto $label$124 }
	$20 = (( *($3) ? $19 : $20 ) + $1)
	$1 = ($1 + [1])
	if ( CALL $172(*($20)) ){ goto $label$125 }
	$22 = [0]
	
.LABEL $label$124
	CALL eosio_assert($22, [17805])
	if ( ((*($16) & [1]) == 0) ){ goto $label$126 }
	CALL _ZdlPv(*(($16 + [8])))
	
.LABEL $label$126
	*($9) = CALL $175(( *($8 + [8]) ? ($8 + [1]) : (*($13 + [112]) & [1]) ))
	$16 = *($13 + [272])
	$3 = ($14 + [8])
	$17 = *($3)
	$22 = ($14 + [4])
	$9 = *($22)
	$19 = [0]
	$1 = [0]
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$127 }
	$1 = ( $9 ? uint_32($16 >> [1]) : $1 )
	$1 = ($16 & [1])
	$28 = ( $17 ? $15 : $1 )
	$17 = ($28 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$129 }
	$16 = $28
	
.LOOP $label$130:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$129 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$129 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$128 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$130 }
	
.LABEL $label$129
	$1 = $17
	
.LABEL $label$128
	$1 = ( [-1] ? ($1 - $28) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$127
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [17835])
	$1 = *($13 + [272])
	$16 = *($3)
	$17 = *($22)
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$131 }
	$1 = ( $17 ? uint_32($1 >> [1]) : $3 )
	$3 = ($1 & [1])
	$19 = ( $16 ? $15 : $3 )
	$17 = ($19 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$133 }
	$16 = $19
	
.LOOP $label$134:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$133 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$133 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$132 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$134 }
	
.LABEL $label$133
	$1 = $17
	
.LABEL $label$132
	$19 = ( [-1] ? ($1 - $19) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$131
	$1 = [0]
	$22 = CALL $163(($13 + [80]), $14, [0], $19, $14)
	$17 = *($13 + [272])
	$19 = *(($14 + [8]))
	$3 = *(($14 + [4]))
	$20 = [0]
	$16 = CALL $178([17617])
	if ( ($16 == 0) ){ goto $label$135 }
	$20 = ( $3 ? uint_32($17 >> [1]) : $20 )
	$20 = ($17 & [1])
	$9 = ( $19 ? $15 : $20 )
	$19 = ($9 + $20)
	if ( ((int_32)$20 < (int_32)$16) ){ goto $label$137 }
	$17 = $9
	
.LOOP $label$138:
	$20 = (($20 - $16) + [1])
	if ( ($20 == 0) ){ goto $label$137 }
	$20 = CALL $176($17, [124], $20)
	if ( ($20 == 0) ){ goto $label$137 }
	if ( (CALL $177($20, [17617], $16) == 0) ){ goto $label$136 }
	$17 = ($20 + [1])
	$20 = ($19 - $17)
	if ( ((int_32)$20 >= (int_32)$16) ){ goto $label$138 }
	
.LABEL $label$137
	$20 = $19
	
.LABEL $label$136
	$20 = ( [-1] ? ($20 - $9) : ((int_32)$20 == (int_32)$19) )
	
.LABEL $label$135
	$9 = [1]
	CALL $164($14, CALL $169($14, [0], ($20 + [1])))
	$16 = CALL $162(($13 + [64]), $22)
	$19 = ($16 + [1])
	$17 = ($16 + [4])
	$3 = ($16 + [8])
	
.LOOP $label$140:
	$20 = ($20 & [1])
	$20 = *($16)
	if ( ((uint_32)$1 >= (uint_32)( *($17) ? uint_32($20 >> [1]) : $20 )) ){ goto $label$139 }
	$20 = (( *($3) ? $19 : $20 ) + $1)
	$1 = ($1 + [1])
	if ( CALL $172(*($20)) ){ goto $label$140 }
	$9 = [0]
	
.LABEL $label$139
	CALL eosio_assert($9, [17854])
	if ( ((*($16) & [1]) == 0) ){ goto $label$141 }
	CALL _ZdlPv(*(($16 + [8])))
	
.LABEL $label$141
	$17 = CALL $162(($13 + [48]), $22)
	CALL eosio_assert([1], [17987])
	$24 = (int_64)5462355
	$1 = [0]
	
.LOOP $label$144:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $24) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$143 }
	$25 = (uint_64)$24 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$24 & (int_64)65280) == (int_64)0) ){ goto $label$145 }
	$24 = $25
	$20 = [1]
	$16 = $1
	$1 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$144 }
	goto $label$142 
	
.LABEL $label$145
	$24 = $25
	
.LOOP $label$146:
	if ( ((int_64)((int_64)$24 & (int_64)65280) != (int_64)0) ){ goto $label$143 }
	$24 = (uint_64)$24 >> (uint_64)(int_64)8)
	$20 = ((int_32)$1 < (int_32)[6])
	$16 = ($1 + [1])
	$1 = $16
	if ( $20 ){ goto $label$146 }
	$20 = [1]
	$1 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$144 }
	goto $label$142 
	
.LABEL $label$143
	$20 = [0]
	
.LABEL $label$142
	CALL eosio_assert($20, [18036])
	$24 = CALL $175(( *($17 + [8]) ? ($17 + [1]) : (*($17) & [1]) ))
	*($10 + [8]) = $2
	*($10) = $24
	if ( ((*($17) & [1]) == 0) ){ goto $label$147 }
	CALL _ZdlPv(*(($17 + [8])))
	
.LABEL $label$147
	$16 = *($13 + [272])
	$10 = ($14 + [8])
	$17 = *($10)
	$9 = ($14 + [4])
	$3 = *($9)
	$19 = [0]
	$1 = [0]
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$148 }
	$1 = ( $3 ? uint_32($16 >> [1]) : $1 )
	$1 = ($16 & [1])
	$28 = ( $17 ? $15 : $1 )
	$17 = ($28 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$150 }
	$16 = $28
	
.LOOP $label$151:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$150 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$150 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$149 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$151 }
	
.LABEL $label$150
	$1 = $17
	
.LABEL $label$149
	$1 = ( [-1] ? ($1 - $28) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$148
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [17887])
	$3 = [1]
	$1 = *($13 + [272])
	$16 = *($10)
	$17 = *($9)
	$20 = CALL $178([17617])
	if ( ($20 == 0) ){ goto $label$152 }
	$1 = ( $17 ? uint_32($1 >> [1]) : $10 )
	$10 = ($1 & [1])
	$19 = ( $16 ? $15 : $10 )
	$17 = ($19 + $1)
	if ( ((int_32)$1 < (int_32)$20) ){ goto $label$154 }
	$16 = $19
	
.LOOP $label$155:
	$1 = (($1 - $20) + [1])
	if ( ($1 == 0) ){ goto $label$154 }
	$1 = CALL $176($16, [124], $1)
	if ( ($1 == 0) ){ goto $label$154 }
	if ( (CALL $177($1, [17617], $20) == 0) ){ goto $label$153 }
	$16 = ($1 + [1])
	$1 = ($17 - $16)
	if ( ((int_32)$1 >= (int_32)$20) ){ goto $label$155 }
	
.LABEL $label$154
	$1 = $17
	
.LABEL $label$153
	$19 = ( [-1] ? ($1 - $19) : ((int_32)$1 == (int_32)$17) )
	
.LABEL $label$152
	$1 = [0]
	$10 = CALL $163(($13 + [32]), $14, [0], $19, $14)
	$20 = *($13 + [272])
	$17 = *(($14 + [8]))
	$19 = *(($14 + [4]))
	$16 = CALL $178([17617])
	if ( ($16 == 0) ){ goto $label$156 }
	$20 = ( $19 ? uint_32($20 >> [1]) : $9 )
	$9 = ($20 & [1])
	$3 = ( $17 ? $15 : $9 )
	$19 = ($3 + $20)
	if ( ((int_32)$20 < (int_32)$16) ){ goto $label$158 }
	$17 = $3
	
.LOOP $label$159:
	$20 = (($20 - $16) + [1])
	if ( ($20 == 0) ){ goto $label$158 }
	$20 = CALL $176($17, [124], $20)
	if ( ($20 == 0) ){ goto $label$158 }
	if ( (CALL $177($20, [17617], $16) == 0) ){ goto $label$157 }
	$17 = ($20 + [1])
	$20 = ($19 - $17)
	if ( ((int_32)$20 >= (int_32)$16) ){ goto $label$159 }
	
.LABEL $label$158
	$20 = $19
	
.LABEL $label$157
	$3 = ( [0] ? (([1] - $3) + $20) : ((int_32)$20 == (int_32)$19) )
	
.LABEL $label$156
	CALL $164($14, CALL $169($14, [0], $3))
	$15 = [1]
	$16 = CALL $162(($13 + [16]), $10)
	$19 = ($16 + [1])
	$17 = ($16 + [4])
	$3 = ($16 + [8])
	
.LOOP $label$161:
	$20 = ($20 & [1])
	$20 = *($16)
	if ( ((uint_32)$1 >= (uint_32)( *($17) ? uint_32($20 >> [1]) : $20 )) ){ goto $label$160 }
	$20 = (( *($3) ? $19 : $20 ) + $1)
	$1 = ($1 + [1])
	if ( CALL $172(*($20)) ){ goto $label$161 }
	$15 = [0]
	
.LABEL $label$160
	CALL eosio_assert($15, [17907])
	if ( ((*($16) & [1]) == 0) ){ goto $label$162 }
	CALL _ZdlPv(*(($16 + [8])))
	
.LABEL $label$162
	$17 = CALL $162($13, $10)
	CALL eosio_assert([1], [17987])
	$24 = (int_64)5462355
	$1 = [0]
	
.LOOP $label$165:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $24) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$164 }
	$25 = (uint_64)$24 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$24 & (int_64)65280) == (int_64)0) ){ goto $label$166 }
	$24 = $25
	$20 = [1]
	$16 = $1
	$1 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$165 }
	goto $label$163 
	
.LABEL $label$166
	$24 = $25
	
.LOOP $label$167:
	if ( ((int_64)((int_64)$24 & (int_64)65280) != (int_64)0) ){ goto $label$164 }
	$24 = (uint_64)$24 >> (uint_64)(int_64)8)
	$20 = ((int_32)$1 < (int_32)[6])
	$16 = ($1 + [1])
	$1 = $16
	if ( $20 ){ goto $label$167 }
	$20 = [1]
	$1 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$165 }
	goto $label$163 
	
.LABEL $label$164
	$20 = [0]
	
.LABEL $label$163
	CALL eosio_assert($20, [18036])
	$24 = CALL $175(( *($17 + [8]) ? ($17 + [1]) : (*($17) & [1]) ))
	*($11 + [8]) = $2
	*($11) = $24
	if ( (*($17) & [1]) ){ goto $label$186 }
	CALL $164($12, $14)
	if ( (*($13 + [32]) & [1]) ){ goto $label$185 }
	goto $label$184 
	
.LABEL $label$186
	CALL _ZdlPv(*(($17 + [8])))
	CALL $164($12, $14)
	if ( ((*($13 + [32]) & [1]) == 0) ){ goto $label$184 }
	
.LABEL $label$185
	CALL _ZdlPv(*($10 + [8]))
	$1 = [1]
	if ( ((*($13 + [80]) & [1]) == 0) ){ goto $label$183 }
	goto $label$182 
	
.LABEL $label$184
	$1 = [1]
	if ( (*($13 + [80]) & [1]) ){ goto $label$182 }
	
.LABEL $label$183
	if ( (*($13 + [112]) & $1) ){ goto $label$181 }
	goto $label$180 
	
.LABEL $label$182
	CALL _ZdlPv(*($22 + [8]))
	if ( ((*($13 + [112]) & $1) == 0) ){ goto $label$180 }
	
.LABEL $label$181
	CALL _ZdlPv(*(($8 + [8])))
	$1 = [1]
	if ( ((*($13 + [160]) & [1]) == 0) ){ goto $label$179 }
	goto $label$178 
	
.LABEL $label$180
	$1 = [1]
	if ( (*($13 + [160]) & [1]) ){ goto $label$178 }
	
.LABEL $label$179
	if ( (*($13 + [192]) & $1) ){ goto $label$177 }
	goto $label$176 
	
.LABEL $label$178
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($13 + [192]) & $1) == 0) ){ goto $label$176 }
	
.LABEL $label$177
	CALL _ZdlPv(*(($6 + [8])))
	$1 = [1]
	if ( ((*($13 + [224]) & [1]) == 0) ){ goto $label$175 }
	goto $label$174 
	
.LABEL $label$176
	$1 = [1]
	if ( (*($13 + [224]) & [1]) ){ goto $label$174 }
	
.LABEL $label$175
	if ( (*($13 + [240]) & $1) ){ goto $label$173 }
	goto $label$172 
	
.LABEL $label$174
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($13 + [240]) & $1) == 0) ){ goto $label$172 }
	
.LABEL $label$173
	CALL _ZdlPv(*(($18 + [8])))
	$1 = [1]
	if ( ((*($13 + [256]) & [1]) == 0) ){ goto $label$171 }
	goto $label$170 
	
.LABEL $label$172
	$1 = [1]
	if ( (*($13 + [256]) & [1]) ){ goto $label$170 }
	
.LABEL $label$171
	if ( (*($13 + [272]) & $1) ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	CALL _ZdlPv(*(($21 + [8])))
	if ( ((*($13 + [272]) & $1) == 0) ){ goto $label$168 }
	
.LABEL $label$169
	CALL _ZdlPv(*(($14 + [8])))
	$global$0 = ($13 + [288])
	return 
	
.LABEL $label$168
	$global$0 = ($13 + [288])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [18204])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-7297066191770615808, (int_64)-7297066191770615808)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $33($0, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [18204])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18564])
	CALL $120($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $121($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$5 = ($global$0 - [288])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = [0]
	*(($5 + [280])) = [0]
	*($5 + [264]) = (int_64)-1
	*($5 + [272]) = (int_64)0
	$7 = *($0)
	*($5 + [248]) = $7
	$8 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($5 + [256]) = $8)
	$9 = [0]
	$10 = CALL db_find_i64($7, $8, (int_64)7035927889518264320, *($1))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $5(($5 + [248]), $10)
	CALL eosio_assert(((int_32)*($9 + [288]) == (int_32)($5 + [248])), [18204])
	
.LABEL $label$1
	$10 = ($10 & [1])
	$10 = *($4)
	$11 = ( *($4 + [4]) ? uint_32($10 >> [1]) : $10 )
	if ( ($11 == 0) ){ goto $label$3 }
	$10 = ( *($4 + [8]) ? ($4 + [1]) : $10 )
	$6 = [0]
	
.LOOP $label$4:
	$6 = ($6 + ((int_32)*($10) == (int_32)[124]))
	$10 = ($10 + [1])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$4 }
	$10 = [1]
	$11 = ($6 & [2147483647])
	if ( ((int_32)$11 == (int_32)[5]) ){ goto $label$2 }
	if ( ((int_32)$11 == (int_32)[8]) ){ goto $label$2 }
	
.LABEL $label$3
	$10 = ((int_32)$6 == (int_32)[6])
	
.LABEL $label$2
	$12 = ($3 + [8])
	CALL eosio_assert($10, [17341])
	*($5 + [192]) = (int_64)0
	$7 = *($3 + [8])
	*($5 + [200]) = $7
	CALL eosio_assert([1], [17987])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$7 = $8
	$11 = [1]
	$13 = $10
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$7 = $8
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = ((int_32)$10 < (int_32)[6])
	$13 = ($10 + [1])
	$10 = $13
	if ( $11 ){ goto $label$9 }
	$11 = [1]
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$11 = [0]
	
.LABEL $label$5
	CALL eosio_assert($11, [18036])
	*($5 + [176]) = (int_64)0
	$7 = *(($3 + [8]))
	*($5 + [184]) = $7
	CALL eosio_assert([1], [17987])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$7 = $8
	$11 = [1]
	$13 = $10
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$7 = $8
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = ((int_32)$10 < (int_32)[6])
	$13 = ($10 + [1])
	$10 = $13
	if ( $11 ){ goto $label$14 }
	$11 = [1]
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$11 = [0]
	
.LABEL $label$10
	CALL eosio_assert($11, [18036])
	*($5 + [160]) = (int_64)0
	$7 = *(($3 + [8]))
	*($5 + [168]) = $7
	CALL eosio_assert([1], [17987])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$7 = $8
	$11 = [1]
	$13 = $10
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$7 = $8
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = ((int_32)$10 < (int_32)[6])
	$13 = ($10 + [1])
	$10 = $13
	if ( $11 ){ goto $label$19 }
	$11 = [1]
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$11 = [0]
	
.LABEL $label$15
	CALL eosio_assert($11, [18036])
	*($5 + [144]) = (int_64)0
	$7 = *(($3 + [8]))
	*($5 + [152]) = $7
	CALL eosio_assert([1], [17987])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$7 = $8
	$11 = [1]
	$13 = $10
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$7 = $8
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = ((int_32)$10 < (int_32)[6])
	$13 = ($10 + [1])
	$10 = $13
	if ( $11 ){ goto $label$24 }
	$11 = [1]
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$11 = [0]
	
.LABEL $label$20
	CALL eosio_assert($11, [18036])
	*($5 + [136]) = [0]
	*($5 + [128]) = (int_64)0
	*($5 + [120]) = [0]
	*($5 + [112]) = (int_64)0
	*($5 + [88]) = (int_64)0
	$7 = *(($3 + [8]))
	*($5 + [96]) = $7
	CALL eosio_assert([1], [17987])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$7 = $8
	$11 = [1]
	$13 = $10
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$7 = $8
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = ((int_32)$10 < (int_32)[6])
	$13 = ($10 + [1])
	$10 = $13
	if ( $11 ){ goto $label$29 }
	$11 = [1]
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$11 = [0]
	
.LABEL $label$25
	CALL eosio_assert($11, [18036])
	$7 = *(($3 + [8]))
	CALL eosio_assert([1], [17987])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$7 = $8
	$11 = [1]
	$13 = $10
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$33
	$7 = $8
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$31 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = ((int_32)$10 < (int_32)[6])
	$13 = ($10 + [1])
	$10 = $13
	if ( $11 ){ goto $label$34 }
	$11 = [1]
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$11 = [0]
	
.LABEL $label$30
	CALL eosio_assert($11, [18036])
	if ( ((int_32)$6 == (int_32)[8]) ){ goto $label$36 }
	if ( ((int_32)$6 != (int_32)[5]) ){ goto $label$35 }
	$10 = ($3 + [8])
	$7 = *($10)
	$8 = *($3)
	CALL eosio_assert([1], [18056])
	CALL eosio_assert([1], [18071])
	*((($5 + [88]) + [8])) = $7
	*($5 + [88]) = ((int_64)$8 / (int_64)10)
	$11 = CALL $162(($5 + [72]), $4)
	CALL $36($0, $11, *($10), ($5 + [240]), ($5 + [232]), ($5 + [224]), ($5 + [216]), ($5 + [208]), ($5 + [192]), ($5 + [112]))
	if ( ((*($11) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($11 + [8]))
	
.LABEL $label$37
	*((($5 + [176]) + [8])) = *($10)
	*($5 + [176]) = *($3)
	CALL eosio_assert(((int_64)*($5 + [192]) > (int_64)0), [17354])
	goto $label$35 
	
.LABEL $label$36
	$10 = CALL $162(($5 + [56]), $4)
	CALL $37($0, $10, *(($3 + [8])), ($5 + [240]), ($5 + [232]), ($5 + [224]), ($5 + [216]), ($5 + [208]), ($5 + [176]), ($5 + [104]), ($5 + [160]), ($5 + [144]), ($5 + [128]))
	if ( ((*($10) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($10 + [8]))
	
.LABEL $label$38
	*(($10 = (($5 + [192]) + [8]))) = *(($3 + [8]))
	*($5 + [192]) = *($3)
	$7 = *($9 + [112])
	$7 = *($5 + [192])
	CALL __multi3(($5 + [8]), $7, (int_64)$7 >> (int_64)63), $7, (int_64)$7 >> (int_64)63))
	$8 = *($10)
	$7 = *((($5 + [8]) + [8]))
	$14 = *($5 + [8])
	CALL eosio_assert(( (uint_64)($14 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [18096])
	CALL eosio_assert(( ((uint_64)$14 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [18120])
	CALL eosio_assert([1], [18056])
	CALL eosio_assert([1], [18071])
	*($5 + [48]) = $8
	CALL eosio_assert([1], [18056])
	CALL eosio_assert([1], [18071])
	$7 = ((int_64)$14 / (int_64)100000)
	*($5 + [40]) = $7
	*(($10 = (($5 + [24]) + [8]))) = *((($5 + [176]) + [8]))
	*($5 + [24]) = *($5 + [176])
	CALL eosio_assert([1], [18056])
	$14 = *($5 + [24])
	CALL eosio_assert([1], [18071])
	$14 = ((int_64)$14 / (int_64)10)
	*($5 + [24]) = $14
	CALL eosio_assert(((int_64)$8 == (int_64)*($10)), [18145])
	$10 = ( ($5 + [24]) ? ($5 + [40]) : ((int_64)$14 < (int_64)$7) )
	*((($5 + [88]) + [8])) = *(($10 + [8]))
	*($5 + [88]) = *($10)
	
.LABEL $label$35
	$15 = *($1)
	$7 = (int_64)0
	$8 = (int_64)59
	$10 = [17192]
	$16 = (int_64)0
	
.LOOP $label$39:
	$14 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$40 }
	$11 = *($10)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$11 = ($11 + [-91])
	goto $label$41 
	
.LABEL $label$42
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$14 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$40
	$10 = ($10 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$39 }
	if ( ((int_64)$15 == (int_64)$16) ){ goto $label$43 }
	CALL $167(($5 + [128]), [17381])
	CALL $14($0, $1, $12, ($5 + [240]), ($5 + [232]), $10, ($5 + [216]), ($5 + [208]), ($5 + [192]), ($5 + [176]), ($5 + [160]), ($5 + [144]), ($5 + [128]), ($5 + [88]))
	$15 = *($1)
	$7 = (int_64)0
	$8 = (int_64)59
	$10 = [17384]
	$16 = (int_64)0
	
.LOOP $label$44:
	$14 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$45 }
	$11 = *($10)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$11 = ($11 + [-91])
	goto $label$46 
	
.LABEL $label$47
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$14 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$45
	$10 = ($10 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$44 }
	if ( ((int_64)$15 != (int_64)$16) ){ goto $label$43 }
	CALL $38($0, $12)
	
.LABEL $label$43
	if ( (*($5 + [112]) & [1]) ){ goto $label$54 }
	if ( (*($5 + [128]) & [1]) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	CALL _ZdlPv(*(($5 + [120])))
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$52 }
	
.LABEL $label$53
	CALL _ZdlPv(*(($5 + [136])))
	$6 = *($5 + [272])
	if ( $6 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$6 = *($5 + [272])
	if ( ($6 == 0) ){ goto $label$50 }
	
.LABEL $label$51
	$13 = ($5 + [276])
	$10 = *($13)
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$49 }
	
.LOOP $label$55:
	$10 = ($10 + [-24])
	$11 = *($10)
	*($10) = [0]
	if ( ($11 == 0) ){ goto $label$56 }
	CALL _ZdlPv($11)
	
.LABEL $label$56
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$55 }
	$10 = *(($5 + [272]))
	goto $label$48 
	
.LABEL $label$50
	$global$0 = ($5 + [288])
	return 
	
.LABEL $label$49
	$10 = $6
	
.LABEL $label$48
	*($13) = $6
	CALL _ZdlPv($10)
	$global$0 = ($5 + [288])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $171($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18255])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $181($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[15]), [18278])
	CALL memcpy($4, $2, [16])
	*($4 + [20]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)-7297066191770615808
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-7297066191770615808
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $122(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [16]) = (int_64)0
	*(($1 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [72]))) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$2 = $3
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$20 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$4 = [0]
	
.LABEL $label$16
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [88]))) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$2 = $3
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$25 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$4 = [0]
	
.LABEL $label$21
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [104]))) = (int_64)1398362884
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$2 = $3
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$30 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$4 = [0]
	
.LABEL $label$26
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [128]))) = (int_64)1398362884
	*($0 + [120]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	$2 = $3
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$32 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$35 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$4 = [0]
	
.LABEL $label$31
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [144]))) = (int_64)1398362884
	*($0 + [136]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$39 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$39
	$2 = $3
	
.LOOP $label$40:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$37 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$40 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$4 = [0]
	
.LABEL $label$36
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [160]))) = (int_64)1398362884
	*($0 + [152]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$44 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$44
	$2 = $3
	
.LOOP $label$45:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$45 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$4 = [0]
	
.LABEL $label$41
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [176]))) = (int_64)1398362884
	*($0 + [168]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$49 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$49
	$2 = $3
	
.LOOP $label$50:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$47 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$50 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$4 = [0]
	
.LABEL $label$46
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [192]))) = (int_64)1398362884
	*($0 + [184]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$54 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$54
	$2 = $3
	
.LOOP $label$55:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$52 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$55 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$4 = [0]
	
.LABEL $label$51
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [208]))) = (int_64)1398362884
	*($0 + [200]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$58:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$57 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$59 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$59
	$2 = $3
	
.LOOP $label$60:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$57 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$60 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$57
	$4 = [0]
	
.LABEL $label$56
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [224]))) = (int_64)1398362884
	*($0 + [216]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$63:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$62 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$64 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$64
	$2 = $3
	
.LOOP $label$65:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$62 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$65 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$62
	$4 = [0]
	
.LABEL $label$61
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [240]))) = (int_64)1398362884
	*($0 + [232]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$68:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$67 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$69 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$68 }
	goto $label$66 
	
.LABEL $label$69
	$2 = $3
	
.LOOP $label$70:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$67 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$70 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$68 }
	goto $label$66 
	
.LABEL $label$67
	$4 = [0]
	
.LABEL $label$66
	CALL eosio_assert($4, [18036])
	*(($1 = ($0 + [256]))) = (int_64)1398362884
	*($0 + [248]) = (int_64)0
	CALL eosio_assert([1], [17987])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$73:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$71 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$75 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$73 }
	goto $label$74 
	
.LABEL $label$75
	$2 = $3
	
.LOOP $label$76:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$72 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$76 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$73 }
	
.LABEL $label$74
	CALL eosio_assert($6, [18036])
	return $0
	
.LABEL $label$72
	CALL eosio_assert([0], [18036])
	return $0
	
.LABEL $label$71
	CALL eosio_assert([0], [18036])
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *(*($4) + [4])
	*($1 + [8]) = *($5 + [8])
	*($1) = *($5)
	$6 = *($0)
	*(($1 + [24])) = *(($5 + [24]))
	*($1 + [16]) = *($5 + [16])
	$5 = *(*($4) + [4])
	*($1 + [32]) = *($5 + [32])
	*(($1 + [40])) = *(($5 + [40]))
	$5 = *(*($4) + [4])
	*($1 + [48]) = *($5 + [48])
	*(($1 + [56])) = *(($5 + [56]))
	$5 = *(*($4) + [4])
	*($1 + [64]) = *($5 + [64])
	*(($1 + [72])) = *(($5 + [72]))
	$5 = *(*($4) + [4])
	*($1 + [80]) = *($5 + [80])
	*(($1 + [88])) = *(($5 + [88]))
	$5 = *(*($4) + [4])
	*($1 + [96]) = *($5 + [96])
	*(($1 + [104])) = *(($5 + [104]))
	$5 = *(*($4) + [4])
	*($1 + [112]) = *($5 + [112])
	*(($1 + [128])) = *(($5 + [128]))
	*($1 + [120]) = *($5 + [120])
	$5 = *(*($4) + [4])
	*($1 + [136]) = *($5 + [136])
	*(($1 + [144])) = *(($5 + [144]))
	$5 = *(*($4) + [4])
	*($1 + [152]) = *($5 + [152])
	*(($1 + [160])) = *(($5 + [160]))
	$5 = *(*($4) + [4])
	*($1 + [168]) = *($5 + [168])
	*(($1 + [176])) = *(($5 + [176]))
	$5 = *(*($4) + [4])
	*($1 + [184]) = *($5 + [184])
	*(($1 + [192])) = *(($5 + [192]))
	$5 = *($4 + [4])
	*($1 + [200]) = *($5)
	*(($1 + [208])) = *(($5 + [8]))
	$5 = *($4 + [8])
	*($1 + [216]) = *($5)
	*(($1 + [224])) = *(($5 + [8]))
	$7 = *(*($4 + [12]) + [8])
	CALL eosio_assert([1], [17987])
	$8 = ($1 + [216])
	$9 = ($1 + [200])
	$10 = ($1 + [184])
	$11 = ($1 + [168])
	$12 = ($1 + [152])
	$13 = ($1 + [136])
	$14 = ($1 + [120])
	$15 = ($1 + [112])
	$16 = ($1 + [96])
	$17 = ($1 + [80])
	$18 = ($1 + [64])
	$19 = ($1 + [48])
	$20 = ($1 + [32])
	$21 = ($1 + [16])
	$22 = ($1 + [8])
	$23 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $23) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$24 = (uint_64)$23 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$23 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$23 = $24
	$25 = [1]
	$26 = $5
	$5 = ($26 + [1])
	if ( ((int_32)$26 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$23 = $24
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$23 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$23 = (uint_64)$23 >> (uint_64)(int_64)8)
	$25 = ((int_32)$5 < (int_32)[6])
	$26 = ($5 + [1])
	$5 = $26
	if ( $25 ){ goto $label$5 }
	$25 = [1]
	$5 = ($26 + [1])
	if ( ((int_32)$26 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$25 = [0]
	
.LABEL $label$1
	CALL eosio_assert($25, [18036])
	*(($1 + [240])) = $7
	*($1 + [232]) = (int_64)0
	$7 = *(*(($4 + [12])) + [8])
	CALL eosio_assert([1], [17987])
	$23 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $23) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$24 = (uint_64)$23 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$23 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$23 = $24
	$25 = [1]
	$26 = $5
	$5 = ($26 + [1])
	if ( ((int_32)$26 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$23 = $24
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$23 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$23 = (uint_64)$23 >> (uint_64)(int_64)8)
	$25 = ((int_32)$5 < (int_32)[6])
	$26 = ($5 + [1])
	$5 = $26
	if ( $25 ){ goto $label$10 }
	$25 = [1]
	$5 = ($26 + [1])
	if ( ((int_32)$26 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$25 = [0]
	
.LABEL $label$6
	CALL eosio_assert($25, [18036])
	*(($1 + [256])) = $7
	*($1 + [248]) = (int_64)0
	$25 = $2
	$5 = ($25 + [-288])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = $25
	*($3 + [16]) = $3
	*($3 + [28]) = $22
	*($3 + [24]) = $1
	*($3 + [32]) = $21
	*($3 + [36]) = $20
	*($3 + [40]) = $19
	*($3 + [44]) = $18
	*($3 + [48]) = $17
	*($3 + [52]) = $16
	*($3 + [56]) = $15
	*($3 + [60]) = $14
	*($3 + [64]) = $13
	*($3 + [68]) = $12
	*($3 + [72]) = $11
	*($3 + [76]) = $10
	*($3 + [80]) = $9
	*($3 + [84]) = $8
	*($3 + [88]) = ($1 + [232])
	*($3 + [92]) = ($1 + [248])
	*($3 + [96]) = ($1 + [264])
	*($3 + [104]) = ($1 + [280])
	*($3 + [100]) = ($1 + [272])
	CALL $6(($3 + [24]), ($3 + [16]))
	$23 = *($1)
	*($1 + [292]) = CALL db_store_i64(*($6 + [8]), (int_64)7035927889518264320, *(*($0 + [8])), $23, $5, [288])
	if ( (uint_64)($23 <= *($6 + [16])) ){ goto $label$11 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$23 + (int_64)1) : ((uint_64)$23 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$global$0 = ($3 + [112])
}