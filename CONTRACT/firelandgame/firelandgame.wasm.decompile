(data (i32.const 8192) "lemoneosgame\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8214) "wait contract update\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8321) "invalid quantity\00")
(data (i32.const 8338) "EOS\00")
(data (i32.const 8342) "asset must be EOS\00")
(data (i32.const 8360) "game not started\00")
(data (i32.const 8377) "please wait for bonus\00")
(data (i32.const 8399) "%d\00")
(data (i32.const 8402) "worry undernum\00")
(data (i32.const 8417) "amount less than minimum balance\00")
(data (i32.const 8450) "balance is not enough\00")
(data (i32.const 8472) "LEN;\00")
(data (i32.const 8477) "eosio.token\00")
(data (i32.const 8489) "active\00")
(data (i32.const 8496) "lemoniotoken\00")
(data (i32.const 8509) "already initialized\00")
(data (i32.const 8529) "could not be bonus\00")
(data (i32.const 8548) "you are not this land owner\00")
(data (i32.const 8576) "balance is zero\00")
(data (i32.const 8592) "Withdraw from FireLand EOS\00")
(data (i32.const 8619) "transfer\00")
(data (i32.const 8628) "string is too long to be a valid name\00")
(data (i32.const 8666) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8733) "character is not in allowed character set for names\00")
(data (i32.const 8785) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 8839) "cannot decrement iterator at beginning of table\00")
(data (i32.const 8887) "error reading iterator\00")
(data (i32.const 8910) "read\00")
(data (i32.const 8915) "string is too long to be a valid symbol_code\00")
(data (i32.const 8960) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9013) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9062) "invalid symbol name\00")
(data (i32.const 9084) "\80#\00\00")
(data (i32.const 9088) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9121) "cannot pass end iterator to erase\00")
(data (i32.const 9155) "cannot increment end iterator\00")
(data (i32.const 9185) "object passed to erase is not in multi_index\00")
(data (i32.const 9230) "cannot erase objects in table of another contract\00")
(data (i32.const 9280) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9333) "cannot create objects in table of another contract\00")
(data (i32.const 9384) "write\00")
(data (i32.const 9390) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9441) "cannot pass end iterator to modify\00")
(data (i32.const 9476) "object passed to modify is not in multi_index\00")
(data (i32.const 9522) "cannot modify objects in table of another contract\00")
(data (i32.const 9573) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9632) "get\00")
(data (i32.const 18064) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 18080) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 18096) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 18112) "\n\00\00\00d\00\00\00\e8\03\00\00\10\'\00\00\a0\86\01\00@B\0f\00\80\96\98\00\00\e1\f5\05")
(data (i32.const 18144) "\18\00\00\005\00\00\00q\00\00\00")
(data (i32.const 18156) "k\ff\ff\ff\ce\fb\ff\ff\92\bf\ff\ff")
(data (i32.const 18176) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 18448) "\02\00\00\c0\03\00\00\c0\04\00\00\c0\05\00\00\c0\06\00\00\c0\07\00\00\c0\08\00\00\c0\t\00\00\c0\n\00\00\c0\0b\00\00\c0\0c\00\00\c0\0d\00\00\c0\0e\00\00\c0\0f\00\00\c0\10\00\00\c0\11\00\00\c0\12\00\00\c0\13\00\00\c0\14\00\00\c0\15\00\00\c0\16\00\00\c0\17\00\00\c0\18\00\00\c0\19\00\00\c0\1a\00\00\c0\1b\00\00\c0\1c\00\00\c0\1d\00\00\c0\1e\00\00\c0\1f\00\00\c0\00\00\00\b3\01\00\00\c3\02\00\00\c3\03\00\00\c3\04\00\00\c3\05\00\00\c3\06\00\00\c3\07\00\00\c3\08\00\00\c3\t\00\00\c3\n\00\00\c3\0b\00\00\c3\0c\00\00\c3\0d\00\00\d3\0e\00\00\c3\0f\00\00\c3\00\00\0c\bb\01\00\0c\c3\02\00\0c\c3\03\00\0c\c3\04\00\0c\db")
(import "env" "db_lowerbound_i64" (func $fimport$0 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_next_i64" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_store_i64" (func $fimport$5 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$7 (param i32 i64 i32 i32)))
(import "env" "memcpy" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$9 (result i32)))
(import "env" "tapos_block_num" (func $fimport$10 (result i32)))
(import "env" "sha256" (func $fimport$11 (param i32 i32 i32)))
(import "env" "is_account" (func $fimport$12 (param i64) (result i32)))
(import "env" "require_auth" (func $fimport$13 (param i64)))
(import "env" "action_data_size" (func $fimport$14 (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$17 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "send_inline" (func $fimport$20 (param i32 i32)))
(import "env" "abort" (func $fimport$21))
(import "env" "memset" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$24 (param i32 i32)))
(import "env" "__extendsftf2" (func $fimport$25 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$28 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$31 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$36 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$38 (param i64 i64) (result f32)))
(import "env" "__unordtf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$40 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$41 (param i64 i64) (result i32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $34))
(export "_Znwj" (func $56))
(export "_ZdlPv" (func $58))
(export "_Znaj" (func $57))
(export "_ZdaPv" (func $59))
(export "_ZnwjSt11align_val_t" (func $60))
(export "_ZnajSt11align_val_t" (func $61))
(export "_ZdlPvSt11align_val_t" (func $62))
(export "_ZdaPvSt11align_val_t" (func $63))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $22 $33 $23 $32 $27 $31 $25 $96)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18652))
(global $global$2 i32 (i32.const 18652))


int_32 .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $70())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $100($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = ($2 + [256])
	$5 = CALL $97($3, [0], $4)
	$4 = ( ($5 - $3) ? $4 : $5 )
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$3 = *($0 + [84])
	CALL memcpy($1, $3, $2)
	$4 = ($3 + $4)
	*($0 + [8]) = $4
	*($0 + [4]) = ($3 + $2)
	*($0 + [84]) = $4
	return $2
}

int_32 .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($3 = CALL memset($3, [0], [144])) + [44]) = $0
	*($3 + [32]) = [8]
	*($3 + [76]) = [-1]
	*($3 + [84]) = $0
	$0 = CALL $92($3, $1, $2)
	$global$0 = ($3 + [144])
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $94($0, $1, $2)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = ( $3 ? [9648] : $3 )
	$3 = *($5)
	if ( ($1 == 0) ){ goto $label$9 }
	$6 = [-2]
	if ( ($2 == 0) ){ goto $label$3 }
	$7 = ( $0 ? ($4 + [12]) : $0 )
	if ( ($3 == 0) ){ goto $label$8 }
	$8 = $2
	goto $label$5 
	
.LABEL $label$9
	if ( ($3 == 0) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$8
	$3 = *($1)
	$0 = int_32(($3 << [24]) >> [24])
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$6 }
	*($7) = $3
	$global$0 = ($4 + [16])
	return ((int_32)$0 != (int_32)[0])
	
.LABEL $label$7
	$global$0 = ($4 + [16])
	return [0]
	
.LABEL $label$6
	if ( (*([0]) == 0) ){ goto $label$10 }
	$3 = ($3 + [-194])
	if ( ((uint_32)$3 > (uint_32)[50]) ){ goto $label$4 }
	$3 = *((($3 << [2]) + [18448]))
	$8 = ($2 + [-1])
	if ( ($8 == 0) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$5 
	
.LABEL $label$10
	*($7) = ($0 & [57343])
	$global$0 = ($4 + [16])
	return [1]
	
.LABEL $label$5
	$0 = *($1)
	$6 = uint_32($0 >> [3])
	if ( ((uint_32)(($6 + [-16]) | (int_32($3 >> [26]) + $6)) > (uint_32)[7]) ){ goto $label$4 }
	$6 = ($1 + [1])
	$1 = ($8 + [-1])
	
.LOOP $label$11:
	$3 = ((($0 & [255]) + [-128]) | ($3 << [6]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = ($1 + [-1])
	$0 = *($6)
	$6 = ($6 + [1])
	if ( ((int_32)($0 & [192]) == (int_32)[128]) ){ goto $label$11 }
	
.LABEL $label$4
	*($5) = [0]
	*(CALL $70()) = [84]
	$6 = [-1]
	
.LABEL $label$3
	$global$0 = ($4 + [16])
	return $6
	
.LABEL $label$2
	*($5) = $3
	$global$0 = ($4 + [16])
	return [-2]
	
.LABEL $label$1
	*($7) = $3
	*($5) = [0]
	$global$0 = ($4 + [16])
	return ($2 - $1)
}

int_32 .FUNC $91 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return (*($0) == 0)
	
.LABEL $label$1
	return [1]
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	$3 = ($global$0 - [304])
	$global$0 = $3
	$4 = [0]
	$5 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $77($0)
	
.LABEL $label$1
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$2 }
	$7 = ($0 + [4])
	$8 = ($0 + [104])
	$9 = ($0 + [8])
	$10 = ($0 + [120])
	$11 = ($3 + [65])
	$12 = ($3 + [78])
	$13 = (int_64)0
	$4 = [0]
	
.LOOP $label$6:
	$6 = ($6 & [255])
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$16 }
	if ( ((uint_32)($6 + [-9]) <= (uint_32)[4]) ){ goto $label$16 }
	if ( ((int_32)$6 != (int_32)[37]) ){ goto $label$17 }
	$6 = *($1 + [1])
	if ( ((int_32)$6 == (int_32)[42]) ){ goto $label$15 }
	if ( ((int_32)$6 != (int_32)[37]) ){ goto $label$14 }
	
.LABEL $label$17
	CALL $81($0, (int_64)0)
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$18 }
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*($8)) ){ goto $label$13 }
	*($7) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)$6 == (int_32)*($1)) ){ goto $label$12 }
	goto $label$9 
	
.LABEL $label$18
	
.LOOP $label$19:
	$6 = *($7)
	if ( ($6 <= *($8)) ){ goto $label$21 }
	$6 = CALL $82($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	*($7) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$19 }
	
.LABEL $label$20
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$19 }
	$1 = ($1 + [1])
	if ( ((int_32)$6 == (int_32)*($1)) ){ goto $label$12 }
	goto $label$9 
	
.LABEL $label$16
	$6 = ($1 + [1])
	
.LOOP $label$22:
	$1 = *($6)
	$14 = ($1 + [-9])
	$15 = ($6 + [1])
	$6 = $15
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$22 }
	$6 = $15
	if ( ($14 <= [5]) ){ goto $label$22 }
	CALL $81($0, (int_64)0)
	$15 = ($15 + [-2])
	
.LOOP $label$23:
	$6 = *($7)
	if ( ($6 <= *($8)) ){ goto $label$25 }
	$6 = CALL $82($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	*($7) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$23 }
	
.LABEL $label$24
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$23 }
	if ( (*($8) == 0) ){ goto $label$27 }
	$6 = (*($7) + [-1])
	*($7) = $6
	goto $label$26 
	
.LABEL $label$27
	$6 = *($7)
	
.LABEL $label$26
	$13 = ((int_64)((int_64)*($10) + (int_64)$13) + (int_64)(CASTING int_64)(int_32 ($6 - *($9))))
	$1 = ($15 + [1])
	$6 = *($15 + [1])
	if ( $6 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$15
	$1 = ($1 + [2])
	$16 = [0]
	goto $label$10 
	
.LABEL $label$14
	$6 = ($6 + [-48])
	if ( ((uint_32)$6 > (uint_32)[9]) ){ goto $label$11 }
	if ( ((int_32)*($1 + [2]) != (int_32)[36]) ){ goto $label$11 }
	$1 = ($1 + [3])
	$16 = CALL $93($2, $6)
	goto $label$10 
	
.LABEL $label$13
	$6 = CALL $82($0)
	if ( ((int_32)$6 != (int_32)*($1)) ){ goto $label$9 }
	
.LABEL $label$12
	$13 = ((int_64)((int_64)*($10) + (int_64)$13) + (int_64)(CASTING int_64)(int_32 (*($7) - *($9))))
	$6 = $1
	$1 = ($6 + [1])
	$6 = *($6 + [1])
	if ( $6 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$11
	$1 = ($1 + [1])
	$16 = *($2)
	$2 = ($2 + [4])
	
.LABEL $label$10
	$17 = [0]
	$6 = *($1)
	if ( ((uint_32)($6 + [-48]) > (uint_32)[9]) ){ goto $label$29 }
	$15 = [0]
	
.LOOP $label$30:
	$15 = (($6 + ((int_32)$15 * (int_32)[10])) + [-48])
	$6 = *($1 + [1])
	$14 = ($1 + [1])
	$1 = $14
	if ( (($6 + [-48]) <= [10]) ){ goto $label$30 }
	if ( ((int_32)$6 != (int_32)[109]) ){ goto $label$28 }
	goto $label$8 
	
.LABEL $label$29
	$14 = $1
	$15 = [0]
	if ( ((int_32)$6 == (int_32)[109]) ){ goto $label$8 }
	
.LABEL $label$28
	$18 = $14
	$6 = (($6 & [255]) + [-65])
	if ( ((uint_32)$6 <= (uint_32)[57]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$9
	if ( (*(($0 + [104])) == 0) ){ goto $label$31 }
	*($7) = (*($7) + [-1])
	
.LABEL $label$31
	if ( $4 ){ goto $label$2 }
	$17 = [0]
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$8
	$18 = ($14 + [1])
	$19 = [0]
	$17 = ((int_32)$16 != (int_32)[0])
	$20 = [0]
	$6 = ((*($14 + [1]) & [255]) + [-65])
	if ( ((uint_32)$6 > (uint_32)[57]) ){ goto $label$5 }
	
.LABEL $label$7
	$14 = ($18 + [1])
	$1 = [3]
	goto $label$37 
	
.LABEL $label$37
	$1 = [0]
	$14 = $18
	goto $label$32 
	
.LABEL $label$36
	$1 = [1]
	goto $label$32 
	
.LABEL $label$35
	$1 = [2]
	goto $label$32 
	
.LABEL $label$34
	$6 = ((int_32)*($14) == (int_32)[104])
	$14 = ( ($18 + [2]) ? $14 : $6 )
	$1 = ( [-2] ? [-1] : $6 )
	goto $label$32 
	
.LABEL $label$33
	$6 = ((int_32)*($14) == (int_32)[108])
	$14 = ( ($18 + [2]) ? $14 : $6 )
	$1 = ( [3] ? [1] : $6 )
	
.LABEL $label$32
	$6 = *($14)
	$18 = ((int_32)($6 & [47]) == (int_32)[3])
	$21 = ( [1] ? $1 : $18 )
	$22 = ( ($6 | [32]) ? $6 : $18 )
	if ( ((int_32)$22 == (int_32)[91]) ){ goto $label$43 }
	if ( ((int_32)$22 == (int_32)[110]) ){ goto $label$45 }
	if ( ((int_32)$22 != (int_32)[99]) ){ goto $label$44 }
	$15 = ( $15 ? [1] : ((int_32)$15 > (int_32)[1]) )
	goto $label$43 
	
.LABEL $label$45
	if ( ($16 == 0) ){ goto $label$46 }
	$6 = ($21 + [2])
	if ( ((uint_32)$6 > (uint_32)[5]) ){ goto $label$46 }
	goto $label$42 
	
.LABEL $label$47
	*($16) = $13
	
.LABEL $label$46
	$1 = ($14 + [1])
	$6 = *($14 + [1])
	if ( $6 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$44
	CALL $81($0, (int_64)0)
	
.LOOP $label$48:
	$6 = *($7)
	if ( ($6 <= *($8)) ){ goto $label$50 }
	$6 = CALL $82($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	*($7) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$48 }
	
.LABEL $label$49
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$48 }
	if ( (*($8) == 0) ){ goto $label$52 }
	$6 = (*($7) + [-1])
	*($7) = $6
	goto $label$51 
	
.LABEL $label$52
	$6 = *($7)
	
.LABEL $label$51
	$13 = ((int_64)((int_64)*($10) + (int_64)$13) + (int_64)(CASTING int_64)(int_32 ($6 - *($9))))
	
.LABEL $label$43
	$23 = (CASTING int_64)(int_32 $15)
	CALL $81($0, $23)
	$1 = *($8)
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)$1) ){ goto $label$53 }
	*($7) = ($6 + [1])
	if ( ($1 == 0) ){ goto $label$38 }
	goto $label$39 
	
.LABEL $label$53
	if ( ((int_32)CALL $82($0) < (int_32)[0]) ){ goto $label$5 }
	if ( *($8) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$42
	*($16) = $13
	$1 = ($14 + [1])
	$6 = *($14 + [1])
	if ( $6 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$41
	*($16) = $13
	$1 = ($14 + [1])
	$6 = *($14 + [1])
	if ( $6 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$40
	*($16) = $13
	$1 = ($14 + [1])
	$6 = *($14 + [1])
	if ( $6 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$39
	*($7) = (*($7) + [-1])
	
.LABEL $label$38
	$6 = ($22 + [-65])
	if ( ((uint_32)$6 > (uint_32)[55]) ){ goto $label$60 }
	$1 = [16]
	goto $label$88 
	
.LABEL $label$88
	CALL $87($3, $0, $21, [0])
	if ( ((int_64)*($10) == (int_64))((int_64)0 - (CASTING int_64)(int_32 (*($7) - *($9))))) ){ goto $label$3 }
	if ( ($16 == 0) ){ goto $label$57 }
	$23 = *($3 + [8])
	$24 = *($3)
	if ( ((int_32)$21 == (int_32)[2]) ){ goto $label$84 }
	if ( ((int_32)$21 == (int_32)[1]) ){ goto $label$83 }
	if ( $21 ){ goto $label$56 }
	*($16) = CALL __trunctfsf2($24, $23)
	goto $label$65 
	
.LABEL $label$87
	if ( ((int_32)($22 | [16]) != (int_32)[115]) ){ goto $label$85 }
	CALL memset(($3 + [32]), [-1], [257])
	*($3 + [32]) = [0]
	if ( ((int_32)$22 != (int_32)[115]) ){ goto $label$69 }
	*($11) = [0]
	*($3 + [46]) = [0]
	*($3 + [42 align=2]) = [0]
	goto $label$70 
	
.LABEL $label$86
	$1 = [10]
	goto $label$80 
	
.LABEL $label$85
	$18 = *($14 + [1])
	$1 = ((int_32)$18 == (int_32)[94])
	CALL memset(($3 + [32]), $1, [257])
	*($3 + [32]) = [0]
	$6 = ( ($14 + [2]) ? ($14 + [1]) : $1 )
	$1 = *(($14 + ( [2] ? [1] : $1 )))
	if ( ((int_32)$1 == (int_32)[45]) ){ goto $label$79 }
	if ( ((int_32)$1 != (int_32)[93]) ){ goto $label$78 }
	$14 = ((int_32)$18 != (int_32)[94])
	*((($3 + [32]) + [94])) = $14
	$6 = ($6 + [1])
	$1 = *($6)
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$71 }
	goto $label$72 
	
.LABEL $label$84
	*($16) = $24
	*($16 + [8]) = $23
	goto $label$67 
	
.LABEL $label$83
	*($16) = CALL __trunctfdf2($24, $23)
	goto $label$66 
	
.LABEL $label$82
	$1 = [0]
	goto $label$80 
	
.LABEL $label$81
	$1 = [8]
	
.LABEL $label$80
	$23 = CALL $89($0, $1, [0], (int_64)-1)
	if ( ((int_64)*($10) == (int_64))((int_64)0 - (CASTING int_64)(int_32 (*($7) - *($9))))) ){ goto $label$3 }
	if ( ($16 == 0) ){ goto $label$89 }
	if ( ((int_32)$22 == (int_32)[112]) ){ goto $label$55 }
	
.LABEL $label$89
	if ( ($16 == 0) ){ goto $label$59 }
	$6 = ($21 + [2])
	if ( ((uint_32)$6 > (uint_32)[5]) ){ goto $label$58 }
	goto $label$90 
	
.LABEL $label$90
	*($16) = $23
	goto $label$61 
	
.LABEL $label$79
	$14 = ((int_32)$18 != (int_32)[94])
	*($12) = $14
	$6 = ($6 + [1])
	$1 = *($6)
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$73 }
	goto $label$74 
	
.LABEL $label$78
	$14 = ((int_32)$18 != (int_32)[94])
	$1 = *($6)
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$75 }
	$25 = [3]
	goto $label$54 
	
.LABEL $label$77
	*($16) = $23
	goto $label$62 
	
.LABEL $label$76
	*($16) = $23
	goto $label$63 
	
.LABEL $label$75
	$25 = [2]
	goto $label$54 
	
.LABEL $label$74
	$25 = [3]
	goto $label$54 
	
.LABEL $label$73
	$25 = [2]
	goto $label$54 
	
.LABEL $label$72
	$25 = [3]
	goto $label$54 
	
.LABEL $label$71
	$25 = [2]
	goto $label$54 
	
.LABEL $label$70
	$25 = [10]
	goto $label$54 
	
.LABEL $label$69
	$25 = [10]
	goto $label$54 
	
.LABEL $label$68
	$25 = [29]
	goto $label$54 
	
.LABEL $label$67
	$25 = [29]
	goto $label$54 
	
.LABEL $label$66
	$25 = [29]
	goto $label$54 
	
.LABEL $label$65
	$25 = [29]
	goto $label$54 
	
.LABEL $label$64
	$25 = [29]
	goto $label$54 
	
.LABEL $label$63
	$25 = [29]
	goto $label$54 
	
.LABEL $label$62
	$25 = [29]
	goto $label$54 
	
.LABEL $label$61
	$25 = [29]
	goto $label$54 
	
.LABEL $label$60
	$25 = [29]
	goto $label$54 
	
.LABEL $label$59
	$25 = [29]
	goto $label$54 
	
.LABEL $label$58
	$25 = [29]
	goto $label$54 
	
.LABEL $label$57
	$25 = [29]
	goto $label$54 
	
.LABEL $label$56
	$25 = [29]
	goto $label$54 
	
.LABEL $label$55
	*($16) = $23
	$25 = [29]
	
.LABEL $label$54
	
.LOOP $label$91:
	goto $label$218 
	
.LABEL $label$225
	$1 = [45]
	$26 = *($6 + [1])
	if ( ($26 == 0) ){ goto $label$140 }
	$25 = [4]
	goto $label$91 
	
.LABEL $label$224
	if ( ((int_32)$26 == (int_32)[93]) ){ goto $label$139 }
	$25 = [5]
	goto $label$91 
	
.LABEL $label$223
	$18 = ($6 + [1])
	$6 = *(($6 + [-1]))
	if ( ((uint_32)$6 >= (uint_32)$26) ){ goto $label$138 }
	$25 = [8]
	goto $label$91 
	
.LABEL $label$222
	*(((($3 + [32]) + $6) + [1])) = $14
	$1 = *($18)
	$6 = ($6 + [1])
	if ( ($6 <= $1) ){ goto $label$137 }
	goto $label$136 
	
.LABEL $label$221
	$1 = $26
	$25 = [7]
	goto $label$91 
	
.LABEL $label$220
	$6 = $18
	goto $label$141 
	
.LABEL $label$219
	if ( ($1 == 0) ){ goto $label$5 }
	$25 = [0]
	goto $label$91 
	
.LABEL $label$218
	if ( ((int_32)$1 == (int_32)[93]) ){ goto $label$142 }
	$25 = [1]
	goto $label$91 
	
.LABEL $label$217
	*(((($3 + [32]) + $1) + [1])) = $14
	$6 = ($6 + [1])
	$1 = *($6)
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$143 }
	goto $label$144 
	
.LABEL $label$216
	$14 = $6
	$25 = [10]
	goto $label$91 
	
.LABEL $label$215
	$18 = ((int_32)$22 == (int_32)[99])
	$15 = ( ($15 + [1]) ? [31] : $18 )
	$22 = ((int_32)$21 != (int_32)[1])
	if ( $22 ){ goto $label$135 }
	$25 = [50]
	goto $label$91 
	
.LABEL $label$214
	if ( ($17 == 0) ){ goto $label$106 }
	$25 = [63]
	goto $label$91 
	
.LABEL $label$213
	$1 = CALL $101(($15 << [2]))
	if ( ($1 == 0) ){ goto $label$147 }
	$25 = [64]
	goto $label$91 
	
.LABEL $label$212
	*($3 + [296]) = (int_64)0
	$6 = [0]
	$25 = [65]
	goto $label$91 
	
.LABEL $label$211
	$20 = $1
	$25 = [66]
	goto $label$91 
	
.LABEL $label$210
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*($8)) ){ goto $label$94 }
	$25 = [75]
	goto $label$91 
	
.LABEL $label$209
	*($7) = ($1 + [1])
	$1 = *($1)
	goto $label$93 
	
.LABEL $label$208
	$1 = CALL $82($0)
	$25 = [68]
	goto $label$91 
	
.LABEL $label$207
	if ( (*(((($3 + [32]) + $1) + [1])) == 0) ){ goto $label$98 }
	$25 = [69]
	goto $label$91 
	
.LABEL $label$206
	*($3 + [27]) = $1
	$1 = CALL $90(($3 + [28]), ($3 + [27]), [1], ($3 + [296]))
	if ( ((int_32)$1 == (int_32)[-2]) ){ goto $label$96 }
	$25 = [70]
	goto $label$91 
	
.LABEL $label$205
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$149 }
	$25 = [71]
	goto $label$91 
	
.LABEL $label$204
	if ( ($20 == 0) ){ goto $label$92 }
	$25 = [72]
	goto $label$91 
	
.LABEL $label$203
	*(($20 + ($6 << [2]))) = *($3 + [28])
	$6 = ($6 + [1])
	$25 = [73]
	goto $label$91 
	
.LABEL $label$202
	if ( ((int_32)$6 != (int_32)$15) ){ goto $label$95 }
	$25 = [74]
	goto $label$91 
	
.LABEL $label$201
	$19 = [0]
	$15 = (($15 << [1]) | [1])
	$1 = CALL $104($20, ($15 << [2]))
	if ( $1 ){ goto $label$97 }
	goto $label$5 
	
.LABEL $label$200
	if ( ($17 == 0) ){ goto $label$134 }
	$25 = [40]
	goto $label$91 
	
.LABEL $label$199
	$1 = CALL $101($15)
	if ( ($1 == 0) ){ goto $label$147 }
	$25 = [41]
	goto $label$91 
	
.LABEL $label$198
	$6 = [0]
	$25 = [42]
	goto $label$91 
	
.LABEL $label$197
	$19 = $1
	$25 = [43]
	goto $label$91 
	
.LABEL $label$196
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*($8)) ){ goto $label$109 }
	$25 = [49]
	goto $label$91 
	
.LABEL $label$195
	*($7) = ($1 + [1])
	$1 = *($1)
	goto $label$108 
	
.LABEL $label$194
	$1 = CALL $82($0)
	$25 = [45]
	goto $label$91 
	
.LABEL $label$193
	if ( (*(((($3 + [32]) + $1) + [1])) == 0) ){ goto $label$107 }
	$25 = [46]
	goto $label$91 
	
.LABEL $label$192
	*(($19 + $6)) = $1
	$6 = ($6 + [1])
	if ( ((int_32)$15 != (int_32)$6) ){ goto $label$110 }
	$25 = [47]
	goto $label$91 
	
.LABEL $label$191
	$20 = [0]
	$15 = (($15 << [1]) | [1])
	$1 = CALL $104($19, $15)
	if ( $1 ){ goto $label$111 }
	goto $label$5 
	
.LABEL $label$190
	$20 = [0]
	if ( *($8) ){ goto $label$129 }
	$25 = [34]
	goto $label$91 
	
.LABEL $label$189
	$1 = *($7)
	goto $label$124 
	
.LABEL $label$188
	*($3 + [296]) = (int_64)0
	$6 = [0]
	goto $label$104 
	
.LABEL $label$187
	if ( ($16 == 0) ){ goto $label$133 }
	$25 = [13]
	goto $label$91 
	
.LABEL $label$186
	$6 = [0]
	$1 = *($7)
	if ( ($1 <= *($8)) ){ goto $label$132 }
	$25 = [14]
	goto $label$91 
	
.LABEL $label$185
	$1 = CALL $82($0)
	goto $label$145 
	
.LABEL $label$184
	*(($16 + $6)) = $1
	$6 = ($6 + [1])
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*($8)) ){ goto $label$146 }
	$25 = [17]
	goto $label$91 
	
.LABEL $label$183
	*($7) = ($1 + [1])
	$1 = *($1)
	$25 = [15]
	goto $label$91 
	
.LABEL $label$182
	if ( *(((($3 + [32]) + $1) + [1])) ){ goto $label$131 }
	$25 = [18]
	goto $label$91 
	
.LABEL $label$181
	$20 = [0]
	$19 = $16
	if ( *($8) ){ goto $label$127 }
	goto $label$128 
	
.LABEL $label$180
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*($8)) ){ goto $label$113 }
	$25 = [39]
	goto $label$91 
	
.LABEL $label$179
	*($7) = ($6 + [1])
	$6 = *($6)
	goto $label$112 
	
.LABEL $label$178
	$6 = CALL $82($0)
	$25 = [37]
	goto $label$91 
	
.LABEL $label$177
	if ( *(((($3 + [32]) + $6) + [1])) ){ goto $label$114 }
	$25 = [38]
	goto $label$91 
	
.LABEL $label$176
	$19 = [0]
	$20 = [0]
	$6 = [0]
	if ( *($8) ){ goto $label$125 }
	goto $label$126 
	
.LABEL $label$175
	*(($16 + ($6 << [2]))) = *($3 + [28])
	$6 = ($6 + [1])
	$25 = [52]
	goto $label$91 
	
.LABEL $label$174
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*($8)) ){ goto $label$101 }
	$25 = [62]
	goto $label$91 
	
.LABEL $label$173
	*($7) = ($1 + [1])
	$1 = *($1)
	goto $label$100 
	
.LABEL $label$172
	$1 = CALL $82($0)
	$25 = [54]
	goto $label$91 
	
.LABEL $label$171
	if ( (*(((($3 + [32]) + $1) + [1])) == 0) ){ goto $label$99 }
	$25 = [55]
	goto $label$91 
	
.LABEL $label$170
	*($3 + [27]) = $1
	$1 = CALL $90(($3 + [28]), ($3 + [27]), [1], ($3 + [296]))
	if ( ((int_32)$1 == (int_32)[-2]) ){ goto $label$105 }
	$25 = [56]
	goto $label$91 
	
.LABEL $label$169
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$148 }
	$25 = [57]
	goto $label$91 
	
.LABEL $label$168
	if ( ($16 == 0) ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$167
	$20 = $16
	$25 = [60]
	goto $label$91 
	
.LABEL $label$166
	$19 = [0]
	if ( (CALL $91(($3 + [296])) == 0) ){ goto $label$5 }
	$25 = [61]
	goto $label$91 
	
.LABEL $label$165
	if ( (*($8) == 0) ){ goto $label$130 }
	$25 = [19]
	goto $label$91 
	
.LABEL $label$164
	$1 = (*($7) + [-1])
	*($7) = $1
	$25 = [20]
	goto $label$91 
	
.LABEL $label$163
	$24 = ((int_64)*($10) + (int_64)(CASTING int_64)(int_32 ($1 - *($9))))
	if ( (int_64)($24 == 0) ){ goto $label$3 }
	$25 = [21]
	goto $label$91 
	
.LABEL $label$162
	if ( ((int_64)$24 == (int_64)$23) ){ goto $label$123 }
	$25 = [22]
	goto $label$91 
	
.LABEL $label$161
	if ( $18 ){ goto $label$3 }
	$25 = [23]
	goto $label$91 
	
.LABEL $label$160
	if ( ($17 == 0) ){ goto $label$122 }
	$25 = [31]
	goto $label$91 
	
.LABEL $label$159
	if ( $22 ){ goto $label$115 }
	$25 = [33]
	goto $label$91 
	
.LABEL $label$158
	*($16) = $20
	if ( ($18 == 0) ){ goto $label$119 }
	goto $label$120 
	
.LABEL $label$157
	*($16) = $19
	$25 = [24]
	goto $label$91 
	
.LABEL $label$156
	if ( $18 ){ goto $label$121 }
	$25 = [25]
	goto $label$91 
	
.LABEL $label$155
	if ( ($20 == 0) ){ goto $label$118 }
	$25 = [26]
	goto $label$91 
	
.LABEL $label$154
	*(($20 + ($6 << [2]))) = [0]
	$25 = [27]
	goto $label$91 
	
.LABEL $label$153
	if ( ($19 == 0) ){ goto $label$117 }
	$25 = [28]
	goto $label$91 
	
.LABEL $label$152
	*(($19 + $6)) = [0]
	goto $label$116 
	
.LABEL $label$151
	$19 = [0]
	$25 = [29]
	goto $label$91 
	
.LABEL $label$150
	$13 = ((int_64)((int_64)*($10) + (int_64)$13) + (int_64)(CASTING int_64)(int_32 (*($7) - *($9))))
	$4 = ($4 + ((int_32)$16 != (int_32)[0]))
	$1 = ($14 + [1])
	$6 = *($14 + [1])
	if ( $6 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$149
	$19 = [0]
	if ( $4 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$148
	$17 = [0]
	$19 = [0]
	$20 = $16
	if ( $4 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$147
	$19 = [0]
	$20 = [0]
	goto $label$5 
	
.LABEL $label$146
	$25 = [14]
	goto $label$91 
	
.LABEL $label$145
	$25 = [15]
	goto $label$91 
	
.LABEL $label$144
	$25 = [3]
	goto $label$91 
	
.LABEL $label$143
	$25 = [2]
	goto $label$91 
	
.LABEL $label$142
	$25 = [9]
	goto $label$91 
	
.LABEL $label$141
	$25 = [1]
	goto $label$91 
	
.LABEL $label$140
	$25 = [1]
	goto $label$91 
	
.LABEL $label$139
	$25 = [1]
	goto $label$91 
	
.LABEL $label$138
	$25 = [6]
	goto $label$91 
	
.LABEL $label$137
	$25 = [8]
	goto $label$91 
	
.LABEL $label$136
	$25 = [7]
	goto $label$91 
	
.LABEL $label$135
	$25 = [11]
	goto $label$91 
	
.LABEL $label$134
	$25 = [12]
	goto $label$91 
	
.LABEL $label$133
	$25 = [35]
	goto $label$91 
	
.LABEL $label$132
	$25 = [17]
	goto $label$91 
	
.LABEL $label$131
	$25 = [16]
	goto $label$91 
	
.LABEL $label$130
	$25 = [34]
	goto $label$91 
	
.LABEL $label$129
	$25 = [19]
	goto $label$91 
	
.LABEL $label$128
	$25 = [34]
	goto $label$91 
	
.LABEL $label$127
	$25 = [19]
	goto $label$91 
	
.LABEL $label$126
	$25 = [34]
	goto $label$91 
	
.LABEL $label$125
	$25 = [19]
	goto $label$91 
	
.LABEL $label$124
	$25 = [20]
	goto $label$91 
	
.LABEL $label$123
	$25 = [23]
	goto $label$91 
	
.LABEL $label$122
	$25 = [24]
	goto $label$91 
	
.LABEL $label$121
	$25 = [29]
	goto $label$91 
	
.LABEL $label$120
	$25 = [29]
	goto $label$91 
	
.LABEL $label$119
	$25 = [25]
	goto $label$91 
	
.LABEL $label$118
	$25 = [27]
	goto $label$91 
	
.LABEL $label$117
	$25 = [30]
	goto $label$91 
	
.LABEL $label$116
	$25 = [29]
	goto $label$91 
	
.LABEL $label$115
	$25 = [32]
	goto $label$91 
	
.LABEL $label$114
	$25 = [35]
	goto $label$91 
	
.LABEL $label$113
	$25 = [36]
	goto $label$91 
	
.LABEL $label$112
	$25 = [37]
	goto $label$91 
	
.LABEL $label$111
	$25 = [42]
	goto $label$91 
	
.LABEL $label$110
	$25 = [43]
	goto $label$91 
	
.LABEL $label$109
	$25 = [44]
	goto $label$91 
	
.LABEL $label$108
	$25 = [45]
	goto $label$91 
	
.LABEL $label$107
	$25 = [48]
	goto $label$91 
	
.LABEL $label$106
	$25 = [51]
	goto $label$91 
	
.LABEL $label$105
	$25 = [52]
	goto $label$91 
	
.LABEL $label$104
	$25 = [52]
	goto $label$91 
	
.LABEL $label$103
	$25 = [52]
	goto $label$91 
	
.LABEL $label$102
	$25 = [58]
	goto $label$91 
	
.LABEL $label$101
	$25 = [53]
	goto $label$91 
	
.LABEL $label$100
	$25 = [54]
	goto $label$91 
	
.LABEL $label$99
	$25 = [59]
	goto $label$91 
	
.LABEL $label$98
	$25 = [60]
	goto $label$91 
	
.LABEL $label$97
	$25 = [65]
	goto $label$91 
	
.LABEL $label$96
	$25 = [66]
	goto $label$91 
	
.LABEL $label$95
	$25 = [66]
	goto $label$91 
	
.LABEL $label$94
	$25 = [67]
	goto $label$91 
	
.LABEL $label$93
	$25 = [68]
	goto $label$91 
	
.LABEL $label$92
	$25 = [73]
	goto $label$91 
	
.LABEL $label$5
	if ( $4 ){ goto $label$3 }
	
.LABEL $label$4
	$4 = [-1]
	
.LABEL $label$3
	if ( ($17 == 0) ){ goto $label$2 }
	CALL $107($19)
	CALL $107($20)
	
.LABEL $label$2
	if ( ($5 == 0) ){ goto $label$226 }
	CALL $78($0)
	
.LABEL $label$226
	$global$0 = ($3 + [304])
	$6
	$6
	$6
	$6
	$25
	return $4
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	*(($2 = ($global$0 - [16])) + [12]) = $0
	$1 = (*($2 + [12]) + ((( [1073741822] ? ((int_32)$1 ^ (int_32)[-1]) : $1 ) + $1) << [2]))
	*($2 + [8]) = ($1 + [8])
	return *(($1 + [4]))
}

int_32 .FUNC $38 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $101($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [64]) + [16]))) = (int_64)0
	*(($4 + [96])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [56]) = ($2 + $5)
	*($4 + [48]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8910])
	CALL memcpy(($4 + [64]), $2, [8])
	$6 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8910])
	CALL memcpy((($4 + [64]) + [8]), ($2 + [8]), [8])
	*($4 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8910])
	CALL memcpy(($4 + [16]), ($2 + [16]), [8])
	*($3) = *($4 + [16])
	*($4 + [52]) = ($2 + [24])
	CALL $43(($4 + [48]), (($4 + [64]) + [24]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $44(($4 + [128]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $107($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9384])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $51(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $69($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $55($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $67($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $67($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $64($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $65(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $65(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8910])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $43(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $40 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $101($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8910])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8910])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $107($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8910])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8910])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8910])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $65(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $65(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8887])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $101($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [24]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $46(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $11(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $107($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8628])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8733])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8666])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8733])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [160])
	$global$0 = $4
	*((($4 + [40]) + [32])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	$5 = *($0)
	*($4 + [40]) = $5
	*($4 + [48]) = $5
	$0 = CALL db_find_i64($5, $5, (int_64)3607749778735104000, *($2))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	$0 = CALL $8(($4 + [40]), $0)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)($4 + [40])), [9390])
	$5 = *($0 + [24])
	*($4 + [32]) = [8192]
	*($4 + [36]) = CALL $98([8192])
	*($4 + [16]) = *($4 + [32])
	CALL $9(($4 + [80]), ($4 + [16]))
	if ( ((int_64)$5 != (int_64)-8456271728268434272) ){ goto $label$7 }
	$5 = *($3)
	*($4 + [24]) = [8192]
	*($4 + [28]) = CALL $98([8192])
	*($4 + [8]) = *($4 + [24])
	CALL $9(($4 + [144]), ($4 + [8]))
	$6 = [0]
	if ( ((int_64)$5 == (int_64)-8456271728268434272) ){ goto $label$6 }
	$7 = *($1)
	CALL eosio_assert([1], [9441])
	CALL eosio_assert(((int_32)*(($0 + [32])) == (int_32)($4 + [40])), [9476])
	CALL eosio_assert(((int_64)*($4 + [40]) == (int_64)CALL $fimport$3()), [9522])
	*(($2 = ($0 + [24]))) = *($3)
	$5 = *($0)
	CALL eosio_assert([1], [9573])
	*($4 + [128]) = (($4 + [80]) + [32])
	*($4 + [124]) = ($4 + [80])
	*($4 + [120]) = ($4 + [80])
	*($4 + [136]) = ($4 + [120])
	*($4 + [148]) = ($0 + [8])
	*($4 + [144]) = $0
	*($4 + [152]) = ($0 + [16])
	*($4 + [156]) = $2
	CALL $10(($4 + [144]), ($4 + [136]))
	CALL db_update_i64(*($0 + [36]), $7, ($4 + [80]), [32])
	$0 = (($4 + [40]) + [16])
	if ( (uint_64)($5 <= *($0)) ){ goto $label$6 }
	*($0) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$3 = *($4 + [64])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$8
	$7 = *($1)
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$3()), [9333])
	*(($0 = CALL _Znwj([48])) + [32]) = ($4 + [40])
	*($0 + [8]) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0) = *($2)
	*($0 + [24]) = *($3)
	*($4 + [128]) = (($4 + [80]) + [32])
	*($4 + [124]) = ($4 + [80])
	*($4 + [120]) = ($4 + [80])
	*($4 + [136]) = ($4 + [120])
	*($4 + [148]) = ($0 + [8])
	*($4 + [144]) = $0
	*($4 + [152]) = ($0 + [16])
	*($4 + [156]) = ($0 + [24])
	CALL $10(($4 + [144]), ($4 + [136]))
	$5 = *($0)
	$3 = CALL db_store_i64(*((($4 + [40]) + [8])), (int_64)3607749778735104000, $7, $5, ($4 + [80]), [32])
	*($0 + [36]) = $3
	$2 = (($4 + [40]) + [16])
	if ( (uint_64)($5 <= *($2)) ){ goto $label$9 }
	*($2) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($4 + [144]) = $0
	$5 = *($0)
	*($4 + [80]) = $5
	*($4 + [120]) = $3
	$6 = ($4 + [68])
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)*(($4 + [72]))) ){ goto $label$5 }
	*($2 + [8]) = $5
	*($2 + [16]) = $3
	*($4 + [144]) = [0]
	*($2) = $0
	*($6) = ($2 + [24])
	$0 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	$3 = *($4 + [64])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $11(($4 + [64]), ($4 + [144]), ($4 + [80]), ($4 + [120]))
	$0 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$6 = [1]
	$3 = *($4 + [64])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = ($4 + [68])
	$0 = *($1)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($4 + [64]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $3
	
.LABEL $label$10
	*($1) = $3
	CALL _ZdlPv($0)
	$global$0 = ($4 + [160])
	return $6
	
.LABEL $label$1
	$global$0 = ($4 + [160])
	return $6
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [9185])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9230])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_32)$6 != (int_32)*(*(($5 + [-24])))) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_32)$6 != (int_32)*(*($8))) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9280])
	$7 = *($4)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$6 = ($5 + [-24])
	$3 = *($6)
	*($6) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9384])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8887])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $101($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [64]) = $0
	*($5 + [16]) = (int_64)0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	CALL $45(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [24]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = ((int_64)$6 & (int_64)4294967295)
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($0 + [24]), ($3 + [32]), ($3 + [24]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $107($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [68]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8839])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7035934135608672256)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8785])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8785])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $2(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$7 = ($global$0 - [176])
	$global$0 = $7
	$8 = [0]
	*((($7 + [8]) + [32])) = [0]
	*($7 + [24]) = (int_64)-1
	$9 = *($0)
	*($7 + [8]) = $9
	*($7 + [16]) = $9
	*($7 + [32]) = (int_64)0
	$9 = *(CALL $2(($7 + [8]), CALL $fimport$0($9, $9, (int_64)7035934135608672256, (int_64)0)))
	*($7 + [48]) = (CASTING uint_64)(uint_32 ($7 + [8]))
	$10 = *(*(CALL $3(($7 + [48])) + [4]))
	if ( (uint_64)((int_64))($10 - $9) <= (int_64)19) ){ goto $label$1 }
	$11 = CALL db_lowerbound_i64(*($7 + [8]), *(($7 + [16])), (int_64)7035934135608672256, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $2(($7 + [8]), $11)
	
.LABEL $label$2
	$11 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($11, [9121])
	CALL eosio_assert($11, [9155])
	$11 = CALL db_next_i64(*($8 + [68]), ($7 + [48]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	CALL $2(($7 + [8]), $11)
	
.LABEL $label$3
	CALL $4(($7 + [8]), $8)
	
.LABEL $label$1
	$9 = *($0)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$3()), [9333])
	*(($0 = CALL _Znwj([80])) + [64]) = ($7 + [8])
	*($0) = ((int_64)$10 + (int_64)1)
	*($0 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($0 + [16]) = *($1)
	*($0 + [24]) = *($2)
	*($0 + [32]) = *($3)
	*($0 + [40]) = *($4)
	*($0 + [48]) = *($5)
	*($0 + [56]) = *($6)
	*($7 + [128]) = (($7 + [48]) + [60])
	*($7 + [124]) = ($7 + [48])
	*($7 + [120]) = ($7 + [48])
	*($7 + [136]) = ($7 + [120])
	*($7 + [148]) = ($0 + [8])
	*($7 + [144]) = $0
	*($7 + [152]) = ($0 + [16])
	*($7 + [156]) = ($0 + [24])
	*($7 + [160]) = ($0 + [32])
	*($7 + [164]) = ($0 + [40])
	*($7 + [168]) = ($0 + [48])
	*($7 + [172]) = ($0 + [56])
	CALL $5(($7 + [144]), ($7 + [136]))
	$12 = *($0)
	$10 = ((int_64)$12 & (int_64)4294967295)
	$1 = CALL db_store_i64(*((($7 + [8]) + [8])), (int_64)7035934135608672256, $9, $10, ($7 + [48]), [60])
	*($0 + [68]) = $1
	$8 = (($7 + [8]) + [16])
	if ( ((uint_64)*($8) > (uint_64)$10) ){ goto $label$4 }
	*($8) = ((int_64)((int_64)$12 + (int_64)1) & (int_64)4294967295)
	
.LABEL $label$4
	*($7 + [48]) = $0
	$9 = *($0)
	*($7 + [144]) = $9
	*($7 + [120]) = $1
	$2 = ($7 + [36])
	$8 = *($2)
	if ( ((uint_32)$8 >= (uint_32)*(($7 + [40]))) ){ goto $label$7 }
	*($8 + [8]) = ((int_64)$9 & (int_64)4294967295)
	*($8 + [16]) = $1
	*($7 + [48]) = [0]
	*($8) = $0
	*($2) = ($8 + [24])
	$0 = *($7 + [48])
	*($7 + [48]) = [0]
	if ( $0 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $6(($7 + [32]), ($7 + [48]), ($7 + [144]), ($7 + [120]))
	$0 = *($7 + [48])
	*($7 + [48]) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$1 = *($7 + [32])
	if ( ($1 == 0) ){ goto $label$8 }
	$2 = ($7 + [36])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$12 }
	CALL _ZdlPv($8)
	
.LABEL $label$12
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($7 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $1
	
.LABEL $label$9
	*($2) = $1
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$global$0 = ($7 + [176])
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_64 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [112])
	$global$0 = $2
	*(($2 + [104])) = [0]
	*($2 + [88]) = (int_64)-1
	$3 = *($0)
	*($2 + [72]) = $3
	*($2 + [80]) = $3
	*($2 + [96]) = (int_64)0
	$0 = CALL db_lowerbound_i64($3, $3, (int_64)7035934135608672256, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	CALL $2(($2 + [72]), $0)
	*($2 + [16]) = (CASTING uint_64)(uint_32 ($2 + [72]))
	$0 = *(CALL $3(($2 + [16])) + [4])
	$3 = *($0 + [8])
	$4 = *($0 + [16])
	$5 = *($0 + [24])
	$6 = *($0 + [48])
	$7 = *($0 + [56])
	$0 = CALL tapos_block_prefix()
	$8 = CALL tapos_block_num()
	*($2 + [64]) = ((int_64)((int_64)((int_64)((int_64)$6 + (int_64)((int_64)$5 + (int_64)((int_64)$4 + (int_64)$3))) + (int_64)*($1)) + (int_64)(CASTING int_64)(int_32 ((int_32)$8 * (int_32)$0))) + (int_64)((int_64)$7 * (int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	goto $label$1 
	
.LABEL $label$2
	$0 = CALL tapos_block_prefix()
	$8 = CALL tapos_block_num()
	*($2 + [56]) = [8192]
	*($2 + [60]) = CALL $98([8192])
	*($2 + [8]) = *($2 + [56])
	CALL $9(($2 + [16]), ($2 + [8]))
	*($2 + [64]) = ((int_64)((int_64)((int_64)(CASTING int_64)(int_32 ((int_32)$8 * (int_32)$0)) + (int_64)*($1)) + (int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) + (int_64)-8456271728268434272)
	
.LABEL $label$1
	CALL sha256(($2 + [64]), [4], ($2 + [16]))
	$3 = ((int_64)((int_64)((int_64)*($2 + [24]) + (int_64)*($2 + [16])) + (int_64)*($2 + [32])) + (int_64)*($2 + [40]))
	$8 = *($2 + [96])
	if ( ($8 == 0) ){ goto $label$3 }
	$9 = ($2 + [100])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [96]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $8
	
.LABEL $label$4
	*($9) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [112])
	return $3
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	float_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	float_64 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	$5 = ($global$0 - [544])
	$global$0 = $5
	$6 = [0]
	CALL eosio_assert([0], [8214])
	*((($5 + [408]) + [32])) = [0]
	*($5 + [424]) = (int_64)-1
	*($5 + [432]) = (int_64)0
	$7 = *($0)
	*($5 + [408]) = $7
	*($5 + [416]) = $7
	*((($5 + [368]) + [32])) = [0]
	*($5 + [376]) = $7
	*($5 + [368]) = $7
	*($5 + [384]) = (int_64)-1
	*($5 + [392]) = (int_64)0
	*((($5 + [328]) + [32])) = [0]
	*($5 + [336]) = $7
	*($5 + [328]) = $7
	*($5 + [344]) = (int_64)-1
	*($5 + [352]) = (int_64)0
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $10
	$6 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8321])
	$9 = CALL $98([8338])
	if ( ($9 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8915])
	goto $label$8 
	
.LABEL $label$9
	if ( ($9 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$8 = (int_64)0
	
.LOOP $label$10:
	$6 = *(($9 + [8337]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8960])
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$10 }
	goto $label$6 
	
.LABEL $label$7
	$8 = (int_64)0
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)4)), [8342])
	$12 = [0]
	$9 = CALL db_lowerbound_i64($7, $7, (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$12 }
	$12 = CALL $17(($5 + [408]), $9)
	
.LABEL $label$12
	$13 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($13, [8360])
	$9 = *($12 + [12])
	CALL eosio_assert(((uint_32)*($12 + [8]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000))), [8360])
	CALL eosio_assert(((uint_32)$9 > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000))), [8377])
	*($5 + [320]) = [0]
	*($5 + [312]) = (int_64)0
	CALL $18($0, ($5 + [312]), $3, [59])
	$6 = *($5 + [312])
	if ( (*($6) & [1]) ){ goto $label$14 }
	$6 = ($6 + [1])
	goto $label$13 
	
.LABEL $label$14
	$6 = *($6 + [8])
	
.LABEL $label$13
	*($5 + [96]) = ($5 + [304])
	CALL $76($6, [8399], ($5 + [96]))
	$6 = [0]
	$8 = *($5 + [304])
	if ( (uint_64)($8 <= (int_64)10) ){ goto $label$15 }
	$7 = (int_64)50
	if ( (($9 - (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) <= [300]) ){ goto $label$16 }
	$7 = ( (int_64)70 ? (int_64)95 : (($9 - (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) <= [1800]) )
	
.LABEL $label$16
	$6 = ((uint_64)$8 <= (uint_64)$7)
	
.LABEL $label$15
	CALL eosio_assert($6, [8402])
	$14 = *($5 + [304])
	$8 = (int_64)1
	*($5 + [296]) = (int_64)1
	$9 = *($5 + [312])
	if ( (((int_32)(*($5 + [316]) - $9) / (int_32)[12]) <= [2]) ){ goto $label$17 }
	if ( (*($9 + [24]) & [1]) ){ goto $label$19 }
	$9 = (($9 + [24]) + [1])
	goto $label$18 
	
.LABEL $label$19
	$9 = *(($9 + [32]))
	
.LABEL $label$18
	*($5 + [80]) = ($5 + [296])
	CALL $76($9, [8399], ($5 + [80]))
	$8 = *($5 + [296])
	$8 = ( $8 ? (int_64)10 : (uint_64)($8 <= (int_64)10) )
	*($5 + [296]) = $8
	
.LABEL $label$17
	$7 = *($2)
	CALL eosio_assert(((uint_64)$7 >= (uint_64)((int_64)$8 * (int_64)10000)), [8417])
	*($5 + [280]) = [8192]
	*($5 + [284]) = CALL $98([8192])
	*($5 + [72]) = *($5 + [280])
	$2 = CALL $9(($5 + [288]), ($5 + [72]))
	$9 = *($5 + [312])
	if ( ((int_32)*($5 + [316]) == (int_32)$9) ){ goto $label$20 }
	$6 = *($9 + [12])
	if ( ($6 & [1]) ){ goto $label$22 }
	$6 = uint_32($6 >> [1])
	$9 = (($9 + [12]) + [1])
	goto $label$21 
	
.LABEL $label$22
	$6 = *(($9 + [16]))
	$9 = *(($9 + [20]))
	
.LABEL $label$21
	*($5 + [276]) = $6
	*($5 + [272]) = $9
	*($5 + [64]) = *($5 + [272])
	$9 = CALL $9(($5 + [464]), ($5 + [64]))
	$8 = *($9)
	if ( ((int_64)$8 == (int_64)*($1)) ){ goto $label$20 }
	if ( (CALL is_account($8) == 0) ){ goto $label$20 }
	*($2) = *($9)
	
.LABEL $label$20
	CALL $7($0, $0, $1, $2)
	$8 = *($1)
	$6 = *(($5 + [396]))
	$11 = *(($5 + [392]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$24 }
	
.LOOP $label$26:
	$9 = ($6 + [-24])
	$15 = *($9)
	if ( ((int_64)*($15) == (int_64)$8) ){ goto $label$25 }
	$6 = $9
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$24 }
	CALL eosio_assert(((int_32)*($15 + [32]) == (int_32)($5 + [368])), [9390])
	goto $label$23 
	
.LABEL $label$24
	$15 = [0]
	$9 = CALL db_find_i64(*($5 + [368]), *(($5 + [376])), (int_64)3607749778735104000, $8)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$23 }
	$15 = CALL $8(($5 + [368]), $9)
	CALL eosio_assert(((int_32)*($15 + [32]) == (int_32)($5 + [368])), [9390])
	
.LABEL $label$23
	*((($5 + [240]) + [24])) = *(($15 + [24]))
	*((($5 + [240]) + [16])) = *(($15 + [16]))
	*((($5 + [240]) + [8])) = *(($15 + [8]))
	*($5 + [240]) = *($15)
	if ( (*($4) == 0) ){ goto $label$27 }
	*($5 + [248]) = ((int_64)*($5 + [248]) + (int_64)$7)
	
.LABEL $label$27
	if ( ((int_64)*($5 + [264]) != (int_64)*($2)) ){ goto $label$28 }
	*($5 + [232]) = [8192]
	*($5 + [236]) = CALL $98([8192])
	*($5 + [56]) = *($5 + [232])
	CALL $7($0, $0, $2, CALL $9(($5 + [464]), ($5 + [56])))
	
.LABEL $label$28
	CALL eosio_assert(((uint_64)*($5 + [248]) >= (uint_64)$7), [8450])
	$16 = CALL $73((float_64)12, (float_64)2)
	$17 = CALL $15($0, $1)
	$18 = (int_64)0
	*($5 + [224]) = (int_64)0
	*($5 + [216]) = (int_64)0
	*($5 + [208]) = (int_64)0
	$16 = ((float_64)$16 + (float_64)(float_64)1)
	if ( (((float_64)$16 < (float_64)(float_64)18446744073709551615) & ((float_64)$16 >= (float_64)(float_64)0)) ){ goto $label$30 }
	$19 = (int_64)0
	goto $label$29 
	
.LABEL $label$30
	$19 = (Rounds 0)($16)
	
.LABEL $label$29
	$10 = (int_64)0
	$20 = (int_64)0
	$21 = (int_64)0
	$8 = (int_64)0
	if ( (int_64)(*($5 + [296]) == 0) ){ goto $label$31 }
	$16 = ((float_64)((float_64)(float_64)98 / (float_64)(CASTING float_64)(uint_64 $14)) + (float_64)(float_64)-1)
	$22 = (float_64))((float_64)1 - $16)
	$16 = ((float_64)((float_64)$16 + (float_64)(float_64)1) * (float_64)(float_64)1e4)
	if ( (((float_64)$16 < (float_64)(float_64)18446744073709551615) & ((float_64)$16 >= (float_64)(float_64)0)) ){ goto $label$33 }
	$23 = (int_64)0
	goto $label$32 
	
.LABEL $label$33
	$23 = (Rounds 0)($16)
	
.LABEL $label$32
	$22 = ((float_64)$22 * (float_64)(float_64)1e4)
	$24 = (($5 + [464]) + [32])
	$25 = (($5 + [464]) | [8])
	$26 = (($5 + [328]) + [28])
	$27 = (($5 + [328]) + [24])
	$28 = ($5 + [524])
	$14 = (int_64)0
	$21 = (int_64)0
	$20 = (int_64)0
	$10 = (int_64)0
	$18 = (int_64)0
	
.LOOP $label$34:
	$8 = ((uint_64)((int_64)((int_64)$17 * (int_64)3877817) + (int_64)4321) % (uint_64)(int_64)44927)
	*($5 + [224]) = ((int_64)((uint_64)$8 % (uint_64)$19) + (int_64)1)
	*($5 + [200]) = [8192]
	*($5 + [204]) = CALL $98([8192])
	*($5 + [48]) = *($5 + [200])
	CALL $12($0, $0, CALL $9(($5 + [464]), ($5 + [48])), ($5 + [224]))
	$17 = ((uint_64)((int_64)((int_64)$8 * (int_64)3877817) + (int_64)4321) % (uint_64)(int_64)44927)
	$7 = ((uint_64)$17 % (uint_64)(int_64)100)
	$8 = *($5 + [224])
	$6 = *($26)
	$2 = *($27)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$36 }
	
.LOOP $label$38:
	$9 = ($6 + [-24])
	$11 = *($9)
	if ( ((int_64)*($11) == (int_64)$8) ){ goto $label$37 }
	$6 = $9
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$36 }
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)($5 + [328])), [9390])
	goto $label$35 
	
.LABEL $label$36
	$11 = [0]
	$9 = CALL db_find_i64(*($5 + [328]), *((($5 + [328]) + [8])), (int_64)-8527970514705055744, $8)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$35 }
	$11 = CALL $13(($5 + [328]), $9)
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)($5 + [328])), [9390])
	
.LABEL $label$35
	$4 = ($11 + [8])
	$8 = *($4)
	*((($5 + [184]) + [8])) = $8
	*($5 + [184]) = *($11)
	$6 = *((($5 + [368]) + [28]))
	$3 = *((($5 + [368]) + [24]))
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$42 }
	
.LOOP $label$44:
	$9 = ($6 + [-24])
	$2 = *($9)
	if ( ((int_64)*($2) == (int_64)$8) ){ goto $label$43 }
	$6 = $9
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$42 }
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)($5 + [368])), [9390])
	if ( (uint_64)($7 <= *($5 + [304])) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$2 = [0]
	$9 = CALL db_find_i64(*($5 + [368]), *((($5 + [368]) + [8])), (int_64)3607749778735104000, $8)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$45 }
	$2 = CALL $8(($5 + [368]), $9)
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)($5 + [368])), [9390])
	
.LABEL $label$45
	if ( ((uint_64)$7 >= (uint_64)*($5 + [304])) ){ goto $label$40 }
	
.LABEL $label$41
	$8 = *($2)
	*($5 + [208]) = $23
	*($5 + [176]) = [8192]
	*($5 + [180]) = CALL $98([8192])
	*($5 + [40]) = *($5 + [176])
	$9 = ((int_64)$8 == (int_64)-8456271728268434272)
	$16 = ((float_64)$22 + (float_64)(CASTING float_64)(uint_64 $10))
	if ( (((float_64)$16 < (float_64)(float_64)18446744073709551615) & ((float_64)$16 >= (float_64)(float_64)0)) ){ goto $label$47 }
	$10 = (int_64)0
	goto $label$46 
	
.LABEL $label$47
	$10 = (Rounds 0)($16)
	
.LABEL $label$46
	CALL $9(($5 + [464]), ($5 + [40]))
	if ( ($9 == 0) ){ goto $label$51 }
	$16 = ((float_64)(CASTING float_64)(uint_64 $20) + (float_64)(float_64)5e3)
	if ( (((float_64)$16 < (float_64)(float_64)18446744073709551615) & ((float_64)$16 >= (float_64)(float_64)0)) ){ goto $label$50 }
	$20 = (int_64)0
	goto $label$49 
	
.LABEL $label$51
	$21 = ((int_64)$21 + (int_64)10000)
	if ( ((int_64)$8 == (int_64)*($5 + [240])) ){ goto $label$52 }
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9441])
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)($5 + [368])), [9476])
	CALL eosio_assert(((int_64)*($5 + [368]) == (int_64)CALL $fimport$3()), [9522])
	*($2 + [8]) = ((int_64)*($2 + [8]) + (int_64)10000)
	$8 = *($2)
	CALL eosio_assert([1], [9573])
	*((($5 + [448]) + [8])) = $24
	*($5 + [452]) = ($5 + [464])
	*($5 + [448]) = ($5 + [464])
	*($5 + [120]) = ($5 + [448])
	*((($5 + [512]) + [8])) = ($2 + [16])
	*($28) = ($2 + [24])
	*($5 + [516]) = ($2 + [8])
	*($5 + [512]) = $2
	CALL $10(($5 + [512]), ($5 + [120]))
	CALL db_update_i64(*($2 + [36]), (int_64)0, ($5 + [464]), [32])
	$9 = (($5 + [368]) + [16])
	if ( (uint_64)($8 <= *($9)) ){ goto $label$48 }
	*($9) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	goto $label$48 
	
.LABEL $label$52
	*(($9 = (($5 + [240]) + [8]))) = ((int_64)*($9) + (int_64)10000)
	goto $label$48 
	
.LABEL $label$50
	$20 = (Rounds 0)($16)
	
.LABEL $label$49
	$18 = ((int_64)$18 + (int_64)1)
	
.LABEL $label$48
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [9441])
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)($5 + [328])), [9476])
	CALL eosio_assert(((int_64)*($5 + [328]) == (int_64)CALL $fimport$3()), [9522])
	*($11 + [8]) = *($1)
	$8 = *($11)
	CALL eosio_assert([1], [9573])
	CALL eosio_assert([1], [9384])
	CALL memcpy(($5 + [464]), $11, [8])
	CALL eosio_assert([1], [9384])
	CALL memcpy($25, $4, [8])
	CALL db_update_i64(*($11 + [20]), (int_64)0, ($5 + [464]), [16])
	$9 = (($5 + [328]) + [16])
	if ( (uint_64)($8 <= *($9)) ){ goto $label$53 }
	*($9) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$53
	$8 = (int_64)3
	goto $label$39 
	
.LABEL $label$40
	*($5 + [208]) = (int_64)0
	$10 = ((int_64)$10 + (int_64)10000)
	$8 = (int_64)4
	
.LABEL $label$39
	*($5 + [216]) = $8
	*($5 + [464]) = ((int_64)$7 + (int_64)1)
	CALL $1($0, ($5 + [240]), ($5 + [184]), ($5 + [304]), ($5 + [464]), ($5 + [208]), ($5 + [216]))
	$14 = ((int_64)$14 + (int_64)1)
	$8 = *($5 + [296])
	if ( ((uint_64)$8 > (uint_64)$14) ){ goto $label$34 }
	
.LABEL $label$31
	$9 = CALL $98([8338])
	$16 = (CASTING float_64)(uint_64 ((int_64)$8 * (int_64)10000))
	$22 = ((float_64)$16 * (float_64)(float_64)0.002)
	if ( (((float_64)$22 < (float_64)(float_64)18446744073709551615) & ((float_64)$22 >= (float_64)(float_64)0)) ){ goto $label$55 }
	$14 = (int_64)0
	goto $label$54 
	
.LABEL $label$55
	$14 = (Rounds 0)($22)
	
.LABEL $label$54
	$22 = ((float_64)$16 * (float_64)(float_64)0.007)
	if ( (((float_64)$22 < (float_64)(float_64)18446744073709551615) & ((float_64)$22 >= (float_64)(float_64)0)) ){ goto $label$57 }
	$17 = (int_64)0
	goto $label$56 
	
.LABEL $label$57
	$17 = (Rounds 0)($22)
	
.LABEL $label$56
	$6 = ($9 <= [8])
	$16 = ((float_64)$16 * (float_64)(float_64)0.001)
	if ( (((float_64)$16 < (float_64)(float_64)18446744073709551615) & ((float_64)$16 >= (float_64)(float_64)0)) ){ goto $label$62 }
	$19 = (int_64)0
	$11 = [12]
	$2 = [8]
	if ( ($6 == 0) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	$19 = (Rounds 0)($16)
	$11 = [12]
	$2 = [8]
	if ( $6 ){ goto $label$60 }
	
.LABEL $label$61
	CALL eosio_assert([0], [8915])
	goto $label$59 
	
.LABEL $label$60
	if ( $9 ){ goto $label$59 }
	$7 = (int_64)0
	goto $label$58 
	
.LABEL $label$59
	$7 = (int_64)0
	
.LOOP $label$63:
	$6 = *(($9 + [8337]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$64 }
	CALL eosio_assert([0], [8960])
	
.LABEL $label$64
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$63 }
	
.LABEL $label$58
	$4 = ($12 + $11)
	$26 = ($12 + $2)
	CALL eosio_assert((uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9013])
	$8 = ((int_64)$7 & (int_64)72057594037927935)
	$23 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	$9 = [0]
	
.LOOP $label$67:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$66 }
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$68 }
	$8 = $7
	$6 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$67 }
	goto $label$65 
	
.LABEL $label$68
	$8 = $7
	
.LOOP $label$69:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$66 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $6 ){ goto $label$69 }
	$6 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$67 }
	goto $label$65 
	
.LABEL $label$66
	$6 = [0]
	
.LABEL $label$65
	CALL eosio_assert($6, [9062])
	*(($5 + [520])) = [0]
	*($5 + [512]) = (int_64)0
	$9 = CALL $98([8472])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$73 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$76 }
	*($5 + [512]) = ($9 << [1])
	$11 = (($5 + [512]) | [1])
	if ( $9 ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	$6 = (($9 + [16]) & [-16])
	$11 = CALL _Znwj($6)
	*($5 + [512]) = ($6 | [1])
	*($5 + [520]) = $11
	*($5 + [516]) = $9
	
.LABEL $label$75
	CALL memcpy($11, [8472], $9)
	
.LABEL $label$74
	$6 = [0]
	*(($11 + $9)) = [0]
	$8 = *($5 + [240])
	if ( ((int_64)$8 == (int_64)0) ){ goto $label$80 }
	$11 = *([0] + [9084])
	
.LOOP $label$82:
	*((($5 + [464]) + ($9 = $6))) = *(($11 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$9 == (int_32)[12]) )))))
	$6 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[11]) ){ goto $label$81 }
	$8 = ((int_64)$8 << (int_64)5)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$82 }
	
.LABEL $label$81
	*(($5 + [192])) = [0]
	*($5 + [184]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$79 }
	*($5 + [184]) = ($6 << [1])
	$11 = (($5 + [184]) | [1])
	goto $label$78 
	
.LABEL $label$80
	*(($5 + [192])) = [0]
	*($5 + [184]) = (int_64)0
	*($5 + [184]) = [0]
	$9 = (($5 + [184]) | [1])
	$6 = $9
	goto $label$77 
	
.LABEL $label$79
	$2 = (($6 + [16]) & [-16])
	$11 = CALL _Znwj($2)
	*($5 + [184]) = ($2 | [1])
	*($5 + [192]) = $11
	*($5 + [188]) = $6
	
.LABEL $label$78
	$2 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$83:
	*(($11 + $9)) = *((($5 + [464]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$83 }
	$6 = ($11 + $6)
	$9 = (($5 + [184]) | [1])
	
.LABEL $label$77
	*($6) = [0]
	$6 = *($5 + [184])
	$11 = ($6 & [1])
	$9 = CALL $68(($5 + [512]), ( *($5 + [192]) ? $9 : $11 ), ( *($5 + [188]) ? uint_32($6 >> [1]) : $11 ))
	$6 = ($9 + [8])
	*((($5 + [448]) + [8])) = *($6)
	*($5 + [448]) = *($9)
	*($9) = (int_64)0
	*($6) = [0]
	if ( ((*($5 + [184]) & [1]) == 0) ){ goto $label$84 }
	CALL _ZdlPv(*((($5 + [184]) + [8])))
	
.LABEL $label$84
	if ( ((*($5 + [512]) & [1]) == 0) ){ goto $label$85 }
	CALL _ZdlPv(*($5 + [520]))
	
.LABEL $label$85
	*($5 + [512]) = [8477]
	*($5 + [516]) = CALL $98([8477])
	*($5 + [32]) = *($5 + [512])
	$8 = *(CALL $9(($5 + [464]), ($5 + [32])))
	$7 = *($0)
	*($5 + [512]) = [8489]
	*($5 + [516]) = CALL $98([8489])
	*($5 + [24]) = *($5 + [512])
	*($5 + [520]) = *(CALL $9(($5 + [464]), ($5 + [24])))
	*($5 + [512]) = $7
	*((($9 = CALL _Znwj([16])) + [8])) = *($5 + [520])
	*($9) = *($5 + [512])
	*($5 + [112]) = [8496]
	*($5 + [116]) = CALL $98([8496])
	*($5 + [16]) = *($5 + [112])
	$6 = CALL $9(($5 + [120]), ($5 + [16]))
	*(($11 = (($5 + [128]) + [24]))) = $23
	*($5 + [144]) = $17
	*($5 + [128]) = *($0)
	*($5 + [136]) = *($6)
	CALL $65(($5 + [160]), ($5 + [448]))
	*((($5 + [464]) + [24])) = *($11)
	$6 = (($5 + [128]) + [40])
	*(($11 = (($5 + [464]) + [40]))) = *($6)
	*($6) = [0]
	$6 = ($9 + [16])
	*($5 + [188]) = $6
	*($5 + [184]) = $9
	*($5 + [192]) = $6
	*($5 + [464]) = *($5 + [128])
	*($5 + [472]) = *($5 + [136])
	*($5 + [480]) = *($5 + [144])
	*($5 + [496]) = *($5 + [160])
	*($5 + [160]) = (int_64)0
	CALL $19($8, (int_64)-3617168760277827584, ($5 + [184]), ($5 + [464]))
	if ( ((*($5 + [496]) & [1]) == 0) ){ goto $label$86 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$86
	$9 = *($5 + [184])
	if ( ($9 == 0) ){ goto $label$87 }
	*($5 + [188]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$87
	if ( ((*((($5 + [128]) + [32])) & [1]) == 0) ){ goto $label$88 }
	CALL _ZdlPv(*(($5 + [168])))
	
.LABEL $label$88
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [9441])
	CALL eosio_assert(((int_32)*($15 + [32]) == (int_32)($5 + [368])), [9476])
	CALL eosio_assert(((int_64)*($5 + [368]) == (int_64)CALL $fimport$3()), [9522])
	*($15 + [8]) = (int_64))(*((($5 + [240]) + [8])) - $10)
	*($15 + [16]) = ((int_64)*($15 + [16]) + (int_64)((int_64)*($5 + [296]) * (int_64)10000))
	$8 = *($15)
	CALL eosio_assert([1], [9573])
	$3 = (($5 + [464]) + [32])
	*($5 + [192]) = $3
	*($5 + [188]) = ($5 + [464])
	*($5 + [184]) = ($5 + [464])
	*($5 + [120]) = ($5 + [184])
	*($5 + [516]) = ($15 + [8])
	*($5 + [512]) = $15
	*($5 + [520]) = ($15 + [16])
	*($5 + [524]) = ($15 + [24])
	CALL $10(($5 + [512]), ($5 + [120]))
	CALL db_update_i64(*($15 + [36]), (int_64)0, ($5 + [464]), [32])
	$9 = (($5 + [368]) + [16])
	if ( (uint_64)($8 <= *($9)) ){ goto $label$89 }
	*($9) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$89
	CALL eosio_assert($13, [9441])
	CALL eosio_assert(((int_32)*($12 + [32]) == (int_32)($5 + [408])), [9476])
	CALL eosio_assert(((int_64)*($5 + [408]) == (int_64)CALL $fimport$3()), [9522])
	*($12 + [16]) = ((int_64))((int_64))((int_64))((int_64))((int_64))($10 - $20) - $21) - $19) - $17) - $14) + (int_64)*($12 + [16]))
	*($12 + [24]) = ((int_64)*($12 + [24]) + (int_64)$18)
	$8 = *($12)
	CALL eosio_assert([1], [9573])
	*($5 + [192]) = $3
	*($5 + [188]) = ($5 + [464])
	*($5 + [184]) = ($5 + [464])
	*($5 + [120]) = ($5 + [184])
	*($5 + [516]) = $26
	*($5 + [512]) = $12
	*($5 + [520]) = $4
	*($5 + [524]) = ($12 + [16])
	*($5 + [528]) = ($12 + [24])
	CALL $20(($5 + [512]), ($5 + [120]))
	CALL db_update_i64(*($12 + [36]), (int_64)0, ($5 + [464]), [32])
	if ( (uint_64)($8 <= *((($5 + [408]) + [16]))) ){ goto $label$90 }
	*(($5 + [424])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$90
	$8 = *((($5 + [240]) + [24]))
	$11 = *(($5 + [396]))
	$2 = *((($5 + [368]) + [24]))
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$92 }
	
.LOOP $label$94:
	$9 = ($11 + [-24])
	$6 = *($9)
	if ( ((int_64)*($6) == (int_64)$8) ){ goto $label$93 }
	$11 = $9
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$94 }
	goto $label$92 
	
.LABEL $label$93
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$92 }
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($5 + [368])), [9390])
	goto $label$91 
	
.LABEL $label$92
	$6 = [0]
	$9 = CALL db_find_i64(*($5 + [368]), *(($5 + [376])), (int_64)3607749778735104000, $8)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$91 }
	$6 = CALL $8(($5 + [368]), $9)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($5 + [368])), [9390])
	
.LABEL $label$91
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9441])
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($5 + [368])), [9476])
	CALL eosio_assert(((int_64)*($5 + [368]) == (int_64)CALL $fimport$3()), [9522])
	*($6 + [8]) = ((int_64)*($6 + [8]) + (int_64)$19)
	$8 = *($6)
	CALL eosio_assert([1], [9573])
	*($5 + [192]) = $3
	*($5 + [188]) = ($5 + [464])
	*($5 + [184]) = ($5 + [464])
	*($5 + [120]) = ($5 + [184])
	*($5 + [516]) = ($6 + [8])
	*($5 + [512]) = $6
	*($5 + [520]) = ($6 + [16])
	*($5 + [524]) = ($6 + [24])
	CALL $10(($5 + [512]), ($5 + [120]))
	CALL db_update_i64(*($6 + [36]), (int_64)0, ($5 + [464]), [32])
	$9 = (($5 + [368]) + [16])
	if ( (uint_64)($8 <= *($9)) ){ goto $label$95 }
	*($9) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$95
	*($5 + [104]) = [8192]
	*($5 + [108]) = CALL $98([8192])
	*($5 + [8]) = *($5 + [104])
	CALL $9(($5 + [120]), ($5 + [8]))
	$11 = *(($5 + [396]))
	$2 = *((($5 + [368]) + [24]))
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$97 }
	
.LOOP $label$99:
	$9 = ($11 + [-24])
	$6 = *($9)
	if ( ((int_64)*($6) == (int_64)-8456271728268434272) ){ goto $label$98 }
	$11 = $9
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$99 }
	goto $label$97 
	
.LABEL $label$98
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$97 }
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($5 + [368])), [9390])
	goto $label$96 
	
.LABEL $label$97
	$6 = [0]
	$9 = CALL db_find_i64(*($5 + [368]), *(($5 + [376])), (int_64)3607749778735104000, (int_64)-8456271728268434272)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$96 }
	$6 = CALL $8(($5 + [368]), $9)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($5 + [368])), [9390])
	
.LABEL $label$96
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9441])
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($5 + [368])), [9476])
	CALL eosio_assert(((int_64)*($5 + [368]) == (int_64)CALL $fimport$3()), [9522])
	*($6 + [8]) = ((int_64)*($6 + [8]) + (int_64)$14)
	$8 = *($6)
	CALL eosio_assert([1], [9573])
	*($5 + [192]) = $3
	*($5 + [188]) = ($5 + [464])
	*($5 + [184]) = ($5 + [464])
	*($5 + [536]) = ($5 + [184])
	*($5 + [516]) = ($6 + [8])
	*($5 + [512]) = $6
	*($5 + [520]) = ($6 + [16])
	*($5 + [524]) = ($6 + [24])
	CALL $10(($5 + [512]), ($5 + [536]))
	CALL db_update_i64(*($6 + [36]), (int_64)0, ($5 + [464]), [32])
	$9 = (($5 + [368]) + [16])
	if ( ((uint_64)$8 >= (uint_64)*($9)) ){ goto $label$101 }
	if ( (*($5 + [448]) & [1]) ){ goto $label$100 }
	goto $label$72 
	
.LABEL $label$101
	*($9) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	if ( ((*($5 + [448]) & [1]) == 0) ){ goto $label$72 }
	
.LABEL $label$100
	CALL _ZdlPv(*($5 + [456]))
	$11 = *($5 + [312])
	if ( $11 ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$73
	CALL $64(($5 + [512]))
	
.LABEL $label$72
	$11 = *($5 + [312])
	if ( ($11 == 0) ){ goto $label$70 }
	
.LABEL $label$71
	$6 = *($5 + [316])
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$103 }
	
.LOOP $label$104:
	$9 = ($6 + [-12])
	if ( ((*($9) & [1]) == 0) ){ goto $label$105 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$105
	$6 = $9
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$104 }
	$9 = *($5 + [312])
	goto $label$102 
	
.LABEL $label$103
	$9 = $11
	
.LABEL $label$102
	*($5 + [316]) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$70
	$11 = *($5 + [352])
	if ( ($11 == 0) ){ goto $label$106 }
	$2 = ($5 + [356])
	$9 = *($2)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$108 }
	
.LOOP $label$109:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$110 }
	CALL _ZdlPv($6)
	
.LABEL $label$110
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$109 }
	$9 = *(($5 + [352]))
	goto $label$107 
	
.LABEL $label$108
	$9 = $11
	
.LABEL $label$107
	*($2) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$106
	$11 = *($5 + [392])
	if ( ($11 == 0) ){ goto $label$111 }
	$2 = ($5 + [396])
	$9 = *($2)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$113 }
	
.LOOP $label$114:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$115 }
	CALL _ZdlPv($6)
	
.LABEL $label$115
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$114 }
	$9 = *(($5 + [392]))
	goto $label$112 
	
.LABEL $label$113
	$9 = $11
	
.LABEL $label$112
	*($2) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$111
	$11 = *($5 + [432])
	if ( ($11 == 0) ){ goto $label$116 }
	$2 = ($5 + [436])
	$9 = *($2)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$118 }
	
.LOOP $label$119:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$120 }
	CALL _ZdlPv($6)
	
.LABEL $label$120
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$119 }
	$9 = *(($5 + [432]))
	goto $label$117 
	
.LABEL $label$118
	$9 = $11
	
.LABEL $label$117
	*($2) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$116
	$global$0 = ($5 + [544])
	(unreachable)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8887])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $101($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [12])
	*($3 + [52]) = ($5 + [16])
	*($3 + [56]) = ($5 + [24])
	CALL $47(($3 + [40]), ($3 + [32]))
	*($5 + [36]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $24(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $107($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = [0]
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$6 = *($0)
	*($4 + [8]) = $6
	*($4 + [16]) = $6
	$0 = CALL db_find_i64($6, $6, (int_64)-8527970514705055744, *($3))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $13(($4 + [8]), $0) + [16]) == (int_32)($4 + [8])), [9390])
	$1 = *($4 + [32])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = *($1)
	CALL eosio_assert(((int_64)$6 == (int_64)CALL $fimport$3()), [9333])
	*(($0 = CALL _Znwj([32])) + [16]) = ($4 + [8])
	*($0) = *($3)
	*($0 + [8]) = *($2)
	CALL eosio_assert([1], [9384])
	CALL memcpy(($4 + [64]), $0, [8])
	CALL eosio_assert([1], [9384])
	CALL memcpy((($4 + [64]) | [8]), ($0 + [8]), [8])
	$6 = *($0)
	$1 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)-8527970514705055744, $7, $6, ($4 + [64]), [16])
	*($0 + [20]) = $1
	$3 = (($4 + [8]) + [16])
	if ( (uint_64)($6 <= *($3)) ){ goto $label$4 }
	*($3) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($4 + [56]) = $0
	$6 = *($0)
	*($4 + [64]) = $6
	*($4 + [52]) = $1
	$5 = ($4 + [36])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($4 + [40]))) ){ goto $label$7 }
	*($3 + [8]) = $6
	*($3 + [16]) = $1
	*($4 + [56]) = [0]
	*($3) = $0
	*($5) = ($3 + [24])
	$0 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( $0 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $14(($4 + [32]), ($4 + [56]), ($4 + [64]), ($4 + [52]))
	$0 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$5 = [1]
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = ($4 + [36])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($4 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $1
	
.LABEL $label$8
	*($2) = $1
	CALL _ZdlPv($0)
	$global$0 = ($4 + [80])
	return $5
	
.LABEL $label$1
	$global$0 = ($4 + [80])
	return $5
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8887])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $101($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8910])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8910])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $14(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $107($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_64 .FUNC $75 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($2)
	if ( ($5 & [1]) ){ goto $label$5 }
	$6 = ($2 + [1])
	*($4 + [24]) = $6
	$5 = uint_32($5 >> [1])
	$2 = ($6 + $5)
	*($4 + [16]) = $2
	*($4 + [8]) = $6
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = *($2 + [8])
	*($4 + [24]) = $6
	$5 = *($2 + [4])
	$2 = ($6 + $5)
	*($4 + [16]) = $2
	*($4 + [8]) = $6
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($3 & [255])
	$8 = ($1 + [8])
	$9 = ($1 + [4])
	$3 = $6
	
.LOOP $label$6:
	if ( ((int_32)*($3) != (int_32)$7) ){ goto $label$12 }
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*($8)) ){ goto $label$11 }
	*($2) = (int_64)0
	*(($2 + [8])) = [0]
	$10 = ($3 - $6)
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$10 > (uint_32)[10]) ){ goto $label$10 }
	*($2) = ($10 << [1])
	$5 = ($2 + [1])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$3 = ($3 + [1])
	*($4 + [8]) = $3
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$11
	CALL $21($1, ($4 + [24]), ($4 + [8]))
	goto $label$7 
	
.LABEL $label$10
	$11 = (($10 + [16]) & [-16])
	$5 = CALL _Znwj($11)
	*($2) = ($11 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $10
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = $5
	
.LOOP $label$13:
	*($2) = *($6)
	$2 = ($2 + [1])
	$6 = ($6 + [1])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$13 }
	$5 = ($5 + $10)
	
.LABEL $label$8
	*($5) = [0]
	*($9) = (*($9) + [12])
	
.LABEL $label$7
	$3 = (*($4 + [8]) + [1])
	*($4 + [24]) = $3
	$2 = *($4 + [16])
	$6 = $3
	*($4 + [8]) = $3
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$16 }
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)*($1 + [8])) ){ goto $label$17 }
	*($3) = (int_64)0
	*(($3 + [8])) = [0]
	$5 = ($2 - $6)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$15 }
	*($3) = ($5 << [1])
	$7 = ($3 + [1])
	goto $label$14 
	
.LABEL $label$17
	CALL $21($1, ($4 + [24]), ($4 + [16]))
	
.LABEL $label$16
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$15
	$9 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $5
	
.LABEL $label$14
	$3 = $7
	
.LOOP $label$18:
	*($3) = *($6)
	$3 = ($3 + [1])
	$6 = ($6 + [1])
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$18 }
	*(($7 + $5)) = [0]
	*(($6 = ($1 + [4]))) = (*($6) + [12])
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $64($2)
	
.LABEL $label$1
	CALL $64($3)
}

void .FUNC $19 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $48($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $49(($4 + [72]), ($4 + [64]))
	CALL $50(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $69(($4 + [8]))
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $107($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $48($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9384])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9384])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $53(CALL $52($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9384])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9384])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9384])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9384])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9384])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9384])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9384])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8910])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8910])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL memory()
	*($3 + [128]) = [8619]
	*($3 + [132]) = CALL $98([8619])
	*($3 + [64]) = *($3 + [128])
	CALL $9(($3 + [136]), ($3 + [64]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [128]) = [8477]
	*($3 + [132]) = CALL $98([8477])
	*($3 + [56]) = *($3 + [128])
	CALL $9(($3 + [136]), ($3 + [56]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [1]
	*($3) = *($3 + [120])
	CALL $35($0, $0, $3)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)4406679876405297151) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-5003380009256091648) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-4421663357682057216) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [2]
	*($3 + [48]) = *($3 + [72])
	CALL $36($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)4406679876405297152) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)5382252765923021824) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [3]
	*($3 + [8]) = *($3 + [112])
	CALL $37($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [84]) = [0]
	*($3 + [80]) = [4]
	*($3 + [40]) = *($3 + [80])
	CALL $38($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [108]) = [0]
	*($3 + [104]) = [5]
	*($3 + [16]) = *($3 + [104])
	CALL $39($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [92]) = [0]
	*($3 + [88]) = [6]
	*($3 + [32]) = *($3 + [88])
	CALL $40($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [100]) = [0]
	*($3 + [96]) = [7]
	*($3 + [24]) = *($3 + [96])
	CALL $39($1, $1, ($3 + [24]))
	
.LABEL $label$1
	CALL $71([0])
	$global$0 = ($3 + [144])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $101($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9636])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $101($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $35 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $101($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $41(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $42(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $107($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9384])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9632])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $48($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8910])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $107 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18044])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17852]
	$3 = (((int_32)$1 * (int_32)[12]) + [17852])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = *($0)
	$5 = ($1 + [-4])
	$6 = *($5)
	$7 = ($6 & [2147483647])
	*($3) = $7
	$9 = *($0 + [4])
	$4 = ($4 + $9)
	$8 = ($1 + $7)
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$1 }
	*($3) = [0]
	return [0]
	
.LABEL $label$1
	$10 = [0]
	if ( (($4 - $2) <= $1) ){ goto $label$2 }
	if ( ((uint_32)$7 <= (uint_32)$2) ){ goto $label$4 }
	*(($1 + $2)) = (($6 - $2) & [2147483647])
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)($9 + *($0 + [8]))) ){ goto $label$5 }
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	if ( (($4 - $1) <= $2) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($1 + $7)
	if ( ((uint_32)$0 >= (uint_32)$4) ){ goto $label$6 }
	$0 = *($0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$6 }
	$7 = (($7 + ($0 & [2147483647])) + [4])
	if ( ($7 <= $2) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ($7 <= $2) ){ goto $label$2 }
	$0 = ((*($5) & [-2147483648]) | $2)
	*($5) = $0
	if ( ((uint_32)$7 <= (uint_32)$2) ){ goto $label$8 }
	*(($1 + $2)) = ((([2147483644] - $2) + $7) & [2147483647])
	$0 = *($5)
	
.LABEL $label$8
	*($5) = ($0 | [-2147483648])
	goto $label$3 
	
.LABEL $label$5
	*($5) = ((*($5) & [-2147483648]) | $2)
	*(($0 = ($0 + [8]))) = (($2 - *($3)) + *($0))
	
.LABEL $label$3
	$10 = $1
	
.LABEL $label$2
	return $10
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($3 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$4 * (int_32)[12])))) = (int_64)0
	*(($3 + [8])) = [0]
	$1 = *($1)
	$2 = *($2)
	$8 = ($2 - $1)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$8 }
	*($3) = ($8 << [1])
	$5 = ($3 + [1])
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*(($4 = ($7 + ((int_32)$4 * (int_32)[12]))) + [8]) = $5
	*($4 + [4]) = $8
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($1)
	$6 = ($6 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	$5 = ($5 + $8)
	
.LABEL $label$6
	$8 = ($7 + $4)
	*($5) = [0]
	$5 = ($3 + [12])
	$6 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($1 + [-4])
	*(($3 + [-4])) = *($2)
	$1 = ($1 + [-12])
	*(($3 = ($3 + [-12]))) = *($1)
	*($1) = (int_64)0
	*($2) = [0]
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$12 }
	$6 = *(($0 + [4]))
	$2 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$2 = $6
	
.LABEL $label$10
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($6 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$15
	$6 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($2 == 0) ){ goto $label$16 }
	CALL _ZdlPv($2)
	
.LABEL $label$16
	return (unreachable)
	
.LABEL $label$5
	CALL $64($3)
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9384])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9384])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9384])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [304])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	*((($3 + [136]) + [32])) = [0]
	*($3 + [152]) = (int_64)-1
	*($3 + [160]) = (int_64)0
	$5 = *($0)
	*($3 + [136]) = $5
	*($3 + [144]) = $5
	*((($3 + [96]) + [32])) = [0]
	*($3 + [104]) = $5
	*($3 + [96]) = $5
	*($3 + [112]) = (int_64)-1
	*($3 + [120]) = (int_64)0
	*((($3 + [56]) + [32])) = [0]
	*($3 + [64]) = $5
	*($3 + [56]) = $5
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	$6 = CALL db_lowerbound_i64($5, $5, (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $17(($3 + [136]), $6)
	
.LABEL $label$1
	CALL eosio_assert(($4 == 0), [8509])
	$7 = *($0)
	CALL eosio_assert(((int_64)*($3 + [136]) == (int_64)CALL $fimport$3()), [9333])
	*(($4 = CALL _Znwj([48])) + [32]) = ($3 + [136])
	*($4 + [8]) = $1
	*($4) = (int_64)0
	*($4 + [12]) = $2
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)0
	$8 = (($3 + [192]) + [32])
	*($3 + [264]) = $8
	*($3 + [260]) = ($3 + [192])
	*($3 + [256]) = ($3 + [192])
	*($3 + [176]) = ($3 + [256])
	*($3 + [276]) = ($4 + [8])
	*($3 + [272]) = $4
	*($3 + [280]) = ($4 + [12])
	*($3 + [284]) = ($4 + [16])
	*($3 + [288]) = ($4 + [24])
	CALL $20(($3 + [272]), ($3 + [176]))
	$5 = *($4)
	$2 = CALL db_store_i64(*((($3 + [136]) + [8])), (int_64)4986958866982895616, $7, $5, ($3 + [192]), [32])
	*($4 + [36]) = $2
	$1 = (($3 + [136]) + [16])
	if ( (uint_64)($5 <= *($1)) ){ goto $label$2 }
	*($1) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($3 + [272]) = $4
	$5 = *($4)
	*($3 + [192]) = $5
	*($3 + [256]) = $2
	$6 = ($3 + [164])
	$1 = *($6)
	if ( ((uint_32)$1 >= (uint_32)*(($3 + [168]))) ){ goto $label$5 }
	*($1 + [8]) = $5
	*($1 + [16]) = $2
	*($3 + [272]) = [0]
	*($1) = $4
	*($6) = ($1 + [24])
	$4 = *($3 + [272])
	*($3 + [272]) = [0]
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $24(($3 + [160]), ($3 + [272]), ($3 + [192]), ($3 + [256]))
	$4 = *($3 + [272])
	*($3 + [272]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv($4)
	
.LABEL $label$3
	*($3 + [48]) = [8192]
	*($3 + [52]) = CALL $98([8192])
	*($3 + [32]) = *($3 + [48])
	CALL $9(($3 + [192]), ($3 + [32]))
	$1 = *(($3 + [124]))
	$2 = *(($3 + [120]))
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$16:
	$4 = ($1 + [-24])
	$6 = *($4)
	if ( ((int_64)*($6) == (int_64)-8456271728268434272) ){ goto $label$15 }
	$1 = $4
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($3 + [96])), [9390])
	if ( $6 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$4 = CALL db_find_i64(*($3 + [96]), *(($3 + [104])), (int_64)3607749778735104000, (int_64)-8456271728268434272)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $8(($3 + [96]), $4) + [32]) == (int_32)($3 + [96])), [9390])
	
.LABEL $label$13
	*($3 + [40]) = [8192]
	*($3 + [44]) = CALL $98([8192])
	*($3 + [24]) = *($3 + [40])
	CALL $9(($3 + [176]), ($3 + [24]))
	$1 = *(($3 + [124]))
	$6 = *(($3 + [120]))
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$17:
	$4 = ($1 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)-8456271728268434272) ){ goto $label$11 }
	$1 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$12
	$7 = *($0)
	CALL eosio_assert(((int_64)*($3 + [96]) == (int_64)CALL $fimport$3()), [9333])
	*(($4 = CALL _Znwj([48])) + [32]) = ($3 + [96])
	*($3 + [256]) = [8192]
	*($3 + [260]) = CALL $98([8192])
	*($3 + [16]) = *($3 + [256])
	*($4) = *(CALL $9(($3 + [272]), ($3 + [16])))
	*($4 + [16]) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($3 + [176]) = [8192]
	*($3 + [180]) = CALL $98([8192])
	*($3 + [8]) = *($3 + [176])
	*($4 + [24]) = *(CALL $9(($3 + [272]), ($3 + [8])))
	*($3 + [264]) = $8
	*($3 + [260]) = ($3 + [192])
	*($3 + [256]) = ($3 + [192])
	*($3 + [176]) = ($3 + [256])
	*($3 + [276]) = ($4 + [8])
	*($3 + [272]) = $4
	*($3 + [280]) = ($4 + [16])
	*($3 + [284]) = ($4 + [24])
	CALL $10(($3 + [272]), ($3 + [176]))
	$5 = *($4)
	$2 = CALL db_store_i64(*((($3 + [96]) + [8])), (int_64)3607749778735104000, $7, $5, ($3 + [192]), [32])
	*($4 + [36]) = $2
	$1 = (($3 + [96]) + [16])
	if ( (uint_64)($5 <= *($1)) ){ goto $label$18 }
	*($1) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	*($3 + [272]) = $4
	$5 = *($4)
	*($3 + [192]) = $5
	*($3 + [256]) = $2
	$6 = ($3 + [124])
	$1 = *($6)
	if ( ((uint_32)$1 >= (uint_32)*((($3 + [96]) + [32]))) ){ goto $label$8 }
	*($1 + [8]) = $5
	*($1 + [16]) = $2
	*($3 + [272]) = [0]
	*($1) = $4
	*($6) = ($1 + [24])
	$4 = *($3 + [272])
	*($3 + [272]) = [0]
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$11
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)($3 + [96])), [9390])
	goto $label$9 
	
.LABEL $label$10
	$2 = [0]
	$4 = CALL db_find_i64(*($3 + [96]), *(($3 + [104])), (int_64)3607749778735104000, (int_64)-8456271728268434272)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	$2 = CALL $8(($3 + [96]), $4)
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)($3 + [96])), [9390])
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9441])
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)($3 + [96])), [9476])
	CALL eosio_assert(((int_64)*($3 + [96]) == (int_64)CALL $fimport$3()), [9522])
	*($2 + [8]) = (int_64)0
	$5 = *($2)
	CALL eosio_assert([1], [9573])
	*($3 + [264]) = $8
	*($3 + [260]) = ($3 + [192])
	*($3 + [256]) = ($3 + [192])
	*($3 + [184]) = ($3 + [256])
	*($3 + [276]) = ($2 + [8])
	*($3 + [272]) = $2
	*($3 + [280]) = ($2 + [16])
	*($3 + [284]) = ($2 + [24])
	CALL $10(($3 + [272]), ($3 + [184]))
	CALL db_update_i64(*($2 + [36]), (int_64)0, ($3 + [192]), [32])
	$4 = (($3 + [96]) + [16])
	if ( (uint_64)($5 <= *($4)) ){ goto $label$6 }
	*($4) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	goto $label$6 
	
.LABEL $label$8
	CALL $11(($3 + [120]), ($3 + [272]), ($3 + [192]), ($3 + [256]))
	$4 = *($3 + [272])
	*($3 + [272]) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$5 = *($0)
	CALL eosio_assert(((int_64)*($3 + [56]) == (int_64)CALL $fimport$3()), [9333])
	*(($4 = CALL _Znwj([80])) + [64]) = ($3 + [56])
	*($4) = (int_64)0
	*($4 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($3 + [272]) = [8192]
	*($3 + [276]) = CALL $98([8192])
	*($3) = *($3 + [272])
	*($4 + [16]) = *(CALL $9(($3 + [192]), $3))
	*($4 + [48]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($3 + [264]) = (($3 + [192]) + [60])
	*($3 + [260]) = ($3 + [192])
	*($3 + [256]) = ($3 + [192])
	*($3 + [176]) = ($3 + [256])
	*($3 + [276]) = ($4 + [8])
	*($3 + [272]) = $4
	*($3 + [280]) = ($4 + [16])
	*($3 + [284]) = ($4 + [24])
	*($3 + [288]) = ($4 + [32])
	*($3 + [292]) = ($4 + [40])
	*($3 + [296]) = ($4 + [48])
	*($3 + [300]) = ($4 + [56])
	CALL $5(($3 + [272]), ($3 + [176]))
	$9 = *($4)
	$7 = ((int_64)$9 & (int_64)4294967295)
	$2 = CALL db_store_i64(*((($3 + [56]) + [8])), (int_64)7035934135608672256, $5, $7, ($3 + [192]), [60])
	*($4 + [68]) = $2
	$1 = (($3 + [56]) + [16])
	if ( ((uint_64)*($1) > (uint_64)$7) ){ goto $label$19 }
	*($1) = ((int_64)((int_64)$9 + (int_64)1) & (int_64)4294967295)
	
.LABEL $label$19
	*($3 + [192]) = $4
	$5 = *($4)
	*($3 + [272]) = $5
	*($3 + [256]) = $2
	$6 = ($3 + [84])
	$1 = *($6)
	if ( ((uint_32)$1 >= (uint_32)*((($3 + [56]) + [32]))) ){ goto $label$22 }
	*($1 + [8]) = ((int_64)$5 & (int_64)4294967295)
	*($1 + [16]) = $2
	*($3 + [192]) = [0]
	*($1) = $4
	*($6) = ($1 + [24])
	$4 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( $4 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL $6(($3 + [80]), ($3 + [192]), ($3 + [272]), ($3 + [256]))
	$4 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv($4)
	
.LABEL $label$20
	$2 = *($3 + [80])
	if ( ($2 == 0) ){ goto $label$23 }
	$6 = ($3 + [84])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$25 }
	
.LOOP $label$26:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$27 }
	CALL _ZdlPv($1)
	
.LABEL $label$27
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$26 }
	$4 = *(($3 + [80]))
	goto $label$24 
	
.LABEL $label$25
	$4 = $2
	
.LABEL $label$24
	*($6) = $2
	CALL _ZdlPv($4)
	
.LABEL $label$23
	$2 = *($3 + [120])
	if ( ($2 == 0) ){ goto $label$28 }
	$6 = ($3 + [124])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$30 }
	
.LOOP $label$31:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$32 }
	CALL _ZdlPv($1)
	
.LABEL $label$32
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$31 }
	$4 = *(($3 + [120]))
	goto $label$29 
	
.LABEL $label$30
	$4 = $2
	
.LABEL $label$29
	*($6) = $2
	CALL _ZdlPv($4)
	
.LABEL $label$28
	$2 = *($3 + [160])
	if ( ($2 == 0) ){ goto $label$33 }
	$6 = ($3 + [164])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$35 }
	
.LOOP $label$36:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$37 }
	CALL _ZdlPv($1)
	
.LABEL $label$37
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$36 }
	$4 = *(($3 + [160]))
	goto $label$34 
	
.LABEL $label$35
	$4 = $2
	
.LABEL $label$34
	*($6) = $2
	CALL _ZdlPv($4)
	
.LABEL $label$33
	$global$0 = ($3 + [304])
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	*($5 + [8]) = $1
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$1 }
	*($5 + [7]) = [1]
	CALL $16($0, ($5 + [8]), $3, $4, ($5 + [7]))
	
.LABEL $label$1
	$global$0 = ($5 + [16])
}

void .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	$2 = *($0)
	*($1) = $2
	*($1 + [8]) = $2
	*($1 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($1 + [8])
	
.LOOP $label$2:
	CALL $17($1, $0)
	$0 = [0]
	$4 = CALL db_lowerbound_i64(*($1), *($3), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $17($1, $4)
	
.LABEL $label$3
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [9121])
	CALL eosio_assert($4, [9155])
	$4 = CALL db_next_i64(*($0 + [36]), ($1 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	CALL $17($1, $4)
	
.LABEL $label$4
	CALL $26($1, $0)
	$0 = CALL db_lowerbound_i64(*($1), *($3), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$2 }
	$4 = *($1 + [24])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($1 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($1 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $4
	
.LABEL $label$5
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($1 + [48])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	float_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$1 = ($global$0 - [304])
	$global$0 = $1
	*($1 + [192]) = [8192]
	*($1 + [196]) = CALL $98([8192])
	*($1 + [16]) = *($1 + [192])
	CALL require_auth(*(CALL $9(($1 + [200]), ($1 + [16]))))
	*((($1 + [152]) + [32])) = [0]
	*($1 + [168]) = (int_64)-1
	*($1 + [176]) = (int_64)0
	$2 = *($0)
	*($1 + [152]) = $2
	*($1 + [160]) = $2
	$3 = CALL $17(($1 + [152]), CALL $fimport$0($2, $2, (int_64)4986958866982895616, (int_64)0))
	$4 = *($3 + [24])
	$5 = *($3 + [16])
	$6 = *($3 + [12])
	CALL eosio_assert(((uint_32)$6 <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000))), [8529])
	$7 = CALL $73((float_64)12, (float_64)2)
	*((($1 + [112]) + [32])) = [0]
	*($1 + [128]) = (int_64)-1
	*($1 + [136]) = (int_64)0
	$2 = *($0)
	*($1 + [112]) = $2
	*($1 + [120]) = $2
	$8 = CALL db_lowerbound_i64($2, $2, (int_64)4406680179401818112, (int_64)0)
	$9 = ((int_32)$8 < (int_32)[0])
	$7 = ((float_64)$7 + (float_64)(float_64)1)
	if ( (((float_64)$7 < (float_64)(float_64)18446744073709551615) & ((float_64)$7 >= (float_64)(float_64)0)) ){ goto $label$4 }
	$10 = (int_64)0
	$11 = [24]
	$12 = [16]
	$13 = [12]
	if ( $9 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$10 = (Rounds 0)($7)
	$11 = [24]
	$12 = [16]
	$13 = [12]
	if ( ($9 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$14 = *($0)
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$3()), [9333])
	*(($9 = CALL _Znwj([56])) + [40]) = ($1 + [112])
	*($9) = (int_64)0
	$2 = CALL current_time()
	*($9 + [16]) = [0]
	*($9 + [24]) = (int_64)0
	*($9 + [32]) = $10
	*($9 + [8]) = ((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [40]) = (($1 + [208]) + [36])
	*($1 + [36]) = ($1 + [208])
	*($1 + [32]) = ($1 + [208])
	*($1 + [280]) = ($1 + [32])
	*($1 + [76]) = ($9 + [8])
	*($1 + [72]) = $9
	*($1 + [80]) = ($9 + [16])
	*($1 + [84]) = ($9 + [24])
	*($1 + [88]) = ($9 + [32])
	CALL $28(($1 + [72]), ($1 + [280]))
	$2 = *($9)
	$15 = CALL db_store_i64(*((($1 + [112]) + [8])), (int_64)4406680179401818112, $14, $2, ($1 + [208]), [36])
	*($9 + [44]) = $15
	$8 = (($1 + [112]) + [16])
	if ( (uint_64)($2 <= *($8)) ){ goto $label$5 }
	*($8) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($1 + [32]) = $9
	$2 = *($9)
	*($1 + [72]) = $2
	*($1 + [208]) = $15
	$16 = ($1 + [140])
	$8 = *($16)
	if ( ((uint_32)$8 >= (uint_32)*((($1 + [112]) + [32]))) ){ goto $label$7 }
	*($8 + [8]) = $2
	*($8 + [16]) = $15
	*($1 + [32]) = [0]
	*($8) = $9
	*($16) = ($8 + [24])
	$9 = *($1 + [32])
	*($1 + [32]) = [0]
	if ( $9 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$7
	CALL $29(($1 + [136]), ($1 + [32]), ($1 + [72]), ($1 + [208]))
	$9 = *($1 + [32])
	*($1 + [32]) = [0]
	if ( ($9 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	CALL _ZdlPv($9)
	goto $label$1 
	
.LABEL $label$2
	CALL $30(($1 + [112]), $8)
	
.LABEL $label$1
	$17 = ($3 + $11)
	$18 = ($3 + $12)
	$19 = ($3 + $13)
	$13 = CALL $30(($1 + [112]), CALL $fimport$0(*($1 + [112]), *((($1 + [112]) + [8])), (int_64)4406680179401818112, (int_64)0))
	$9 = ($13 + [16])
	$2 = *($13 + [32])
	$14 = (CASTING uint_64)(uint_32 $6)
	if ( ((int_64)*($13 + [8]) == (int_64)$14) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)$10) ){ goto $label$8 }
	$11 = ($13 + [32])
	$12 = ($13 + [8])
	$2 = (int_64)0
	if ( (int_64)($5 == 0) ){ goto $label$9 }
	$2 = (int_64)0
	if ( (int_64)($4 == 0) ){ goto $label$9 }
	$7 = ((float_64)((float_64)(CASTING float_64)(uint_64 $5) * (float_64)(float_64)0.3) / (float_64)(CASTING float_64)(uint_64 $4))
	if ( (((float_64)$7 < (float_64)(float_64)18446744073709551615) & ((float_64)$7 >= (float_64)(float_64)0)) ){ goto $label$10 }
	$2 = (int_64)0
	goto $label$9 
	
.LABEL $label$10
	$2 = (Rounds 0)($7)
	
.LABEL $label$9
	CALL eosio_assert([1], [9441])
	CALL eosio_assert(((int_32)*($13 + [40]) == (int_32)($1 + [112])), [9476])
	CALL eosio_assert(((int_64)*($1 + [112]) == (int_64)CALL $fimport$3()), [9522])
	*(($13 + [8])) = $14
	*(($13 + [16])) = $2
	*($13 + [24]) = $4
	*(($13 + [32])) = (int_64)0
	$5 = *($13)
	CALL eosio_assert([1], [9573])
	*($1 + [40]) = (($1 + [208]) + [36])
	*($1 + [36]) = ($1 + [208])
	*($1 + [32]) = ($1 + [208])
	*($1 + [280]) = ($1 + [32])
	*($1 + [76]) = $12
	*($1 + [72]) = $13
	*($1 + [80]) = $9
	*($1 + [84]) = ($13 + [24])
	*($1 + [88]) = $11
	CALL $28(($1 + [72]), ($1 + [280]))
	CALL db_update_i64(*($13 + [44]), (int_64)0, ($1 + [208]), [36])
	$2 = ((int_64)$2 * (int_64)$4)
	$9 = (($1 + [112]) + [16])
	if ( (uint_64)($5 <= *($9)) ){ goto $label$11 }
	*($9) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	CALL eosio_assert([1], [9441])
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($1 + [152])), [9476])
	CALL eosio_assert(((int_64)*($1 + [152]) == (int_64)CALL $fimport$3()), [9522])
	*(($9 = ($3 + [16]))) = (int_64))(*($9) - $2)
	$2 = *($3)
	CALL eosio_assert([1], [9573])
	*($1 + [40]) = (($1 + [208]) + [32])
	*($1 + [36]) = ($1 + [208])
	*($1 + [32]) = ($1 + [208])
	*($1 + [280]) = ($1 + [32])
	*($1 + [76]) = ($3 + [8])
	*($1 + [72]) = $3
	*($1 + [80]) = $19
	*($1 + [84]) = $18
	*($1 + [88]) = $17
	CALL $20(($1 + [72]), ($1 + [280]))
	CALL db_update_i64(*($3 + [36]), (int_64)0, ($1 + [208]), [32])
	if ( (uint_64)($2 <= *((($1 + [152]) + [16]))) ){ goto $label$12 }
	*(($1 + [168])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$13 = [0]
	$9 = CALL db_lowerbound_i64(*($1 + [112]), *(($1 + [120])), (int_64)4406680179401818112, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$13 }
	$13 = CALL $30(($1 + [112]), $9)
	
.LABEL $label$13
	$9 = ($13 + [16])
	$2 = *($13 + [32])
	
.LABEL $label$8
	$14 = *($9)
	*((($1 + [72]) + [32])) = [0]
	*($1 + [88]) = (int_64)-1
	*($1 + [96]) = (int_64)0
	$4 = *($0)
	*($1 + [72]) = $4
	*($1 + [80]) = $4
	*((($1 + [32]) + [32])) = [0]
	*($1 + [40]) = $4
	*($1 + [32]) = $4
	*($1 + [48]) = (int_64)-1
	*($1 + [56]) = (int_64)0
	if ( ((int_64)$2 == (int_64)$10) ){ goto $label$15 }
	$20 = ((int_64)$2 + (int_64)50)
	$5 = ( $10 ? $20 : ((uint_64)$20 > (uint_64)$10) )
	if ( ((uint_64)$2 >= (uint_64)$5) ){ goto $label$16 }
	$21 = (($1 + [208]) + [32])
	$8 = (($1 + [32]) + [8])
	$15 = (($1 + [32]) + [24])
	$16 = (($1 + [32]) + [28])
	$22 = ($1 + [292])
	$12 = [0]
	$0 = [0]
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$17 }
	$23 = [2]
	goto $label$14 
	
.LABEL $label$17
	$23 = [0]
	goto $label$14 
	
.LABEL $label$16
	$23 = [13]
	goto $label$14 
	
.LABEL $label$15
	$23 = [18]
	
.LABEL $label$14
	
.LOOP $label$18:
	goto $label$118 
	
.LABEL $label$119
	$2 = ((int_64)$2 + (int_64)1)
	$0 = *($16)
	$12 = *($15)
	if ( ((int_32)$12 == (int_32)$0) ){ goto $label$59 }
	$23 = [0]
	goto $label$18 
	
.LABEL $label$118
	$9 = ($0 + [-24])
	$11 = *($9)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$53 }
	$23 = [1]
	goto $label$18 
	
.LABEL $label$117
	$0 = $9
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$51 }
	goto $label$52 
	
.LABEL $label$116
	if ( ((int_32)$12 == (int_32)$0) ){ goto $label$58 }
	$23 = [59]
	goto $label$18 
	
.LABEL $label$115
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)($1 + [32])), [9390])
	if ( $11 ){ goto $label$56 }
	goto $label$57 
	
.LABEL $label$114
	$9 = CALL db_find_i64(*($1 + [32]), *($8), (int_64)-8527970514705055744, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$50 }
	$23 = [3]
	goto $label$18 
	
.LABEL $label$113
	$11 = CALL $13(($1 + [32]), $9)
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)($1 + [32])), [9390])
	$23 = [4]
	goto $label$18 
	
.LABEL $label$112
	$4 = *($11 + [8])
	*($1 + [24]) = [8192]
	*($1 + [28]) = CALL $98([8192])
	*($1 + [8]) = *($1 + [24])
	CALL $9(($1 + [208]), ($1 + [8]))
	if ( ((int_64)$4 == (int_64)-8456271728268434272) ){ goto $label$55 }
	$23 = [5]
	goto $label$18 
	
.LABEL $label$111
	$4 = *(($11 + [8]))
	$11 = *((($1 + [72]) + [28]))
	$12 = *((($1 + [72]) + [24]))
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$47 }
	$23 = [6]
	goto $label$18 
	
.LABEL $label$110
	$9 = ($11 + [-24])
	$0 = *($9)
	if ( ((int_64)*($0) == (int_64)$4) ){ goto $label$46 }
	$23 = [7]
	goto $label$18 
	
.LABEL $label$109
	$11 = $9
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$48 }
	goto $label$49 
	
.LABEL $label$108
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$45 }
	$23 = [57]
	goto $label$18 
	
.LABEL $label$107
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)($1 + [72])), [9390])
	goto $label$43 
	
.LABEL $label$106
	$0 = [0]
	$9 = CALL db_find_i64(*($1 + [72]), *((($1 + [72]) + [8])), (int_64)3607749778735104000, $4)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$44 }
	$23 = [9]
	goto $label$18 
	
.LABEL $label$105
	$0 = CALL $8(($1 + [72]), $9)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)($1 + [72])), [9390])
	$23 = [10]
	goto $label$18 
	
.LABEL $label$104
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [9441])
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)($1 + [72])), [9476])
	CALL eosio_assert(((int_64)*($1 + [72]) == (int_64)CALL $fimport$3()), [9522])
	*($0 + [8]) = ((int_64)*($0 + [8]) + (int_64)$14)
	$4 = *($0)
	CALL eosio_assert([1], [9573])
	*((($1 + [256]) + [8])) = $21
	*($1 + [260]) = ($1 + [208])
	*($1 + [256]) = ($1 + [208])
	*($1 + [272]) = ($1 + [256])
	*((($1 + [280]) + [8])) = ($0 + [16])
	*($22) = ($0 + [24])
	*($1 + [284]) = ($0 + [8])
	*($1 + [280]) = $0
	CALL $10(($1 + [280]), ($1 + [272]))
	CALL db_update_i64(*($0 + [36]), (int_64)0, ($1 + [208]), [32])
	$9 = (($1 + [72]) + [16])
	if ( (uint_64)($4 <= *($9)) ){ goto $label$54 }
	$23 = [11]
	goto $label$18 
	
.LABEL $label$103
	*($9) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$23 = [12]
	goto $label$18 
	
.LABEL $label$102
	if ( (uint_64)($2 <= $5) ){ goto $label$42 }
	$23 = [13]
	goto $label$18 
	
.LABEL $label$101
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [9441])
	CALL eosio_assert(((int_32)*($13 + [40]) == (int_32)($1 + [112])), [9476])
	CALL eosio_assert(((int_64)*($1 + [112]) == (int_64)CALL $fimport$3()), [9522])
	*($13 + [32]) = $5
	$2 = *($13)
	CALL eosio_assert([1], [9573])
	*($1 + [264]) = (($1 + [208]) + [36])
	*($1 + [260]) = ($1 + [208])
	*($1 + [256]) = ($1 + [208])
	*($1 + [272]) = ($1 + [256])
	*($1 + [284]) = ($13 + [8])
	*($1 + [280]) = $13
	*($1 + [288]) = ($13 + [16])
	*($1 + [292]) = ($13 + [24])
	*($1 + [296]) = ($13 + [32])
	CALL $28(($1 + [280]), ($1 + [272]))
	CALL db_update_i64(*($13 + [44]), (int_64)0, ($1 + [208]), [36])
	$9 = (($1 + [112]) + [16])
	if ( (uint_64)($2 <= *($9)) ){ goto $label$41 }
	$23 = [14]
	goto $label$18 
	
.LABEL $label$100
	*($9) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$23 = [15]
	goto $label$18 
	
.LABEL $label$99
	if ( (uint_64)($20 <= $10) ){ goto $label$40 }
	$23 = [16]
	goto $label$18 
	
.LABEL $label$98
	CALL eosio_assert([1], [9441])
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($1 + [152])), [9476])
	CALL eosio_assert(((int_64)*($1 + [152]) == (int_64)CALL $fimport$3()), [9522])
	*(($3 + [12])) = ($6 + [86400])
	$2 = *($3)
	CALL eosio_assert([1], [9573])
	*($1 + [264]) = (($1 + [208]) + [32])
	*($1 + [260]) = ($1 + [208])
	*($1 + [256]) = ($1 + [208])
	*($1 + [272]) = ($1 + [256])
	*($1 + [284]) = ($3 + [8])
	*($1 + [280]) = $3
	*($1 + [288]) = $19
	*($1 + [292]) = $18
	*($1 + [296]) = $17
	CALL $20(($1 + [280]), ($1 + [272]))
	CALL db_update_i64(*($3 + [36]), (int_64)0, ($1 + [208]), [32])
	$9 = ($1 + [168])
	if ( (uint_64)($2 <= *($9)) ){ goto $label$39 }
	$23 = [17]
	goto $label$18 
	
.LABEL $label$97
	*($9) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$23 = [18]
	goto $label$18 
	
.LABEL $label$96
	$11 = *($1 + [56])
	if ( ($11 == 0) ){ goto $label$38 }
	$23 = [19]
	goto $label$18 
	
.LABEL $label$95
	$12 = ($1 + [60])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$37 }
	$23 = [20]
	goto $label$18 
	
.LABEL $label$94
	$23 = [21]
	goto $label$18 
	
.LABEL $label$93
	$9 = ($9 + [-24])
	$0 = *($9)
	*($9) = [0]
	if ( ($0 == 0) ){ goto $label$35 }
	$23 = [22]
	goto $label$18 
	
.LABEL $label$92
	CALL _ZdlPv($0)
	$23 = [23]
	goto $label$18 
	
.LABEL $label$91
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$36 }
	$23 = [24]
	goto $label$18 
	
.LABEL $label$90
	$9 = *(($1 + [56]))
	goto $label$34 
	
.LABEL $label$89
	$9 = $11
	$23 = [25]
	goto $label$18 
	
.LABEL $label$88
	*($12) = $11
	CALL _ZdlPv($9)
	$23 = [26]
	goto $label$18 
	
.LABEL $label$87
	$11 = *($1 + [96])
	if ( ($11 == 0) ){ goto $label$33 }
	$23 = [27]
	goto $label$18 
	
.LABEL $label$86
	$12 = ($1 + [100])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$32 }
	$23 = [28]
	goto $label$18 
	
.LABEL $label$85
	$23 = [29]
	goto $label$18 
	
.LABEL $label$84
	$9 = ($9 + [-24])
	$0 = *($9)
	*($9) = [0]
	if ( ($0 == 0) ){ goto $label$30 }
	$23 = [30]
	goto $label$18 
	
.LABEL $label$83
	CALL _ZdlPv($0)
	$23 = [31]
	goto $label$18 
	
.LABEL $label$82
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$31 }
	$23 = [32]
	goto $label$18 
	
.LABEL $label$81
	$9 = *(($1 + [96]))
	goto $label$29 
	
.LABEL $label$80
	$9 = $11
	$23 = [33]
	goto $label$18 
	
.LABEL $label$79
	*($12) = $11
	CALL _ZdlPv($9)
	$23 = [34]
	goto $label$18 
	
.LABEL $label$78
	$11 = *($1 + [136])
	if ( ($11 == 0) ){ goto $label$28 }
	$23 = [35]
	goto $label$18 
	
.LABEL $label$77
	$12 = ($1 + [140])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$27 }
	$23 = [36]
	goto $label$18 
	
.LABEL $label$76
	$23 = [37]
	goto $label$18 
	
.LABEL $label$75
	$9 = ($9 + [-24])
	$0 = *($9)
	*($9) = [0]
	if ( ($0 == 0) ){ goto $label$25 }
	$23 = [38]
	goto $label$18 
	
.LABEL $label$74
	CALL _ZdlPv($0)
	$23 = [39]
	goto $label$18 
	
.LABEL $label$73
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$26 }
	$23 = [40]
	goto $label$18 
	
.LABEL $label$72
	$9 = *(($1 + [136]))
	goto $label$24 
	
.LABEL $label$71
	$9 = $11
	$23 = [41]
	goto $label$18 
	
.LABEL $label$70
	*($12) = $11
	CALL _ZdlPv($9)
	$23 = [42]
	goto $label$18 
	
.LABEL $label$69
	$11 = *($1 + [176])
	if ( ($11 == 0) ){ goto $label$23 }
	$23 = [43]
	goto $label$18 
	
.LABEL $label$68
	$12 = ($1 + [180])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$22 }
	$23 = [44]
	goto $label$18 
	
.LABEL $label$67
	$23 = [45]
	goto $label$18 
	
.LABEL $label$66
	$9 = ($9 + [-24])
	$0 = *($9)
	*($9) = [0]
	if ( ($0 == 0) ){ goto $label$20 }
	$23 = [46]
	goto $label$18 
	
.LABEL $label$65
	CALL _ZdlPv($0)
	$23 = [47]
	goto $label$18 
	
.LABEL $label$64
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$21 }
	$23 = [48]
	goto $label$18 
	
.LABEL $label$63
	$9 = *(($1 + [176]))
	goto $label$19 
	
.LABEL $label$62
	$9 = $11
	$23 = [49]
	goto $label$18 
	
.LABEL $label$61
	*($12) = $11
	CALL _ZdlPv($9)
	$23 = [50]
	goto $label$18 
	
.LABEL $label$60
	$global$0 = ($1 + [304])
	return 
	
.LABEL $label$59
	$23 = [2]
	goto $label$18 
	
.LABEL $label$58
	$23 = [2]
	goto $label$18 
	
.LABEL $label$57
	$23 = [12]
	goto $label$18 
	
.LABEL $label$56
	$23 = [4]
	goto $label$18 
	
.LABEL $label$55
	$23 = [12]
	goto $label$18 
	
.LABEL $label$54
	$23 = [12]
	goto $label$18 
	
.LABEL $label$53
	$23 = [58]
	goto $label$18 
	
.LABEL $label$52
	$23 = [2]
	goto $label$18 
	
.LABEL $label$51
	$23 = [0]
	goto $label$18 
	
.LABEL $label$50
	$23 = [12]
	goto $label$18 
	
.LABEL $label$49
	$23 = [8]
	goto $label$18 
	
.LABEL $label$48
	$23 = [6]
	goto $label$18 
	
.LABEL $label$47
	$23 = [8]
	goto $label$18 
	
.LABEL $label$46
	$23 = [56]
	goto $label$18 
	
.LABEL $label$45
	$23 = [8]
	goto $label$18 
	
.LABEL $label$44
	$23 = [10]
	goto $label$18 
	
.LABEL $label$43
	$23 = [10]
	goto $label$18 
	
.LABEL $label$42
	$23 = [55]
	goto $label$18 
	
.LABEL $label$41
	$23 = [15]
	goto $label$18 
	
.LABEL $label$40
	$23 = [18]
	goto $label$18 
	
.LABEL $label$39
	$23 = [18]
	goto $label$18 
	
.LABEL $label$38
	$23 = [26]
	goto $label$18 
	
.LABEL $label$37
	$23 = [54]
	goto $label$18 
	
.LABEL $label$36
	$23 = [21]
	goto $label$18 
	
.LABEL $label$35
	$23 = [23]
	goto $label$18 
	
.LABEL $label$34
	$23 = [25]
	goto $label$18 
	
.LABEL $label$33
	$23 = [34]
	goto $label$18 
	
.LABEL $label$32
	$23 = [53]
	goto $label$18 
	
.LABEL $label$31
	$23 = [29]
	goto $label$18 
	
.LABEL $label$30
	$23 = [31]
	goto $label$18 
	
.LABEL $label$29
	$23 = [33]
	goto $label$18 
	
.LABEL $label$28
	$23 = [42]
	goto $label$18 
	
.LABEL $label$27
	$23 = [52]
	goto $label$18 
	
.LABEL $label$26
	$23 = [37]
	goto $label$18 
	
.LABEL $label$25
	$23 = [39]
	goto $label$18 
	
.LABEL $label$24
	$23 = [41]
	goto $label$18 
	
.LABEL $label$23
	$23 = [50]
	goto $label$18 
	
.LABEL $label$22
	$23 = [51]
	goto $label$18 
	
.LABEL $label$21
	$23 = [45]
	goto $label$18 
	
.LABEL $label$20
	$23 = [47]
	goto $label$18 
	
.LABEL $label$19
	$23 = [49]
	goto $label$18 
	$23
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9185])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9230])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9280])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $69 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $66($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $64 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $99(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9636])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $99(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $107($0)
	
.LABEL $label$1
}

int_32 .FUNC $101 (int_32 $0)
{
	return CALL $102([9660], $0)
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $101($1)
	
.LABEL $label$2
	*(CALL $70()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $101(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $107($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $103 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9652]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9656])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9652]) = [1]
	$2 = ($2 << [16])
	*([0] + [9656]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9656])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9656]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9652]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9652]) = [1]
	$3 = ($3 << [16])
	*([0] + [9656]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9656])
	
.LABEL $label$10
	*([0] + [9656]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $103($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8235])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	if ( ($2 == 0) ){ goto $label$7 }
	*($3 + [12]) = [0]
	$4 = (($2 + [4]) & [7])
	$5 = ( (($2 + [8]) - $4) ? $2 : $4 )
	if ( ($1 == 0) ){ goto $label$4 }
	$4 = *($0 + [8384])
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$4 }
	$2 = ($0 + [8192])
	$6 = ($2 + ((int_32)$4 * (int_32)[12]))
	
.LOOP $label$8:
	$4 = *(($2 + [4]))
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)($4 + [4]) > (uint_32)$1) ){ goto $label$9 }
	if ( ((uint_32)($4 + *($2)) > (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$9
	$2 = ($2 + [12])
	if ( ($2 <= $6) ){ goto $label$8 }
	goto $label$4 
	
.LABEL $label$7
	$7 = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = *($0 + [8384])
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	$2 = ($0 + [8192])
	$6 = ($2 + ((int_32)$4 * (int_32)[12]))
	
.LOOP $label$10:
	$4 = *(($2 + [4]))
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((uint_32)($4 + [4]) > (uint_32)$1) ){ goto $label$11 }
	if ( ((uint_32)($4 + *($2)) > (uint_32)$1) ){ goto $label$5 }
	
.LABEL $label$11
	$2 = ($2 + [12])
	if ( ($2 <= $6) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$6
	$7 = CALL $106($2, $1, $5, ($3 + [12]))
	if ( ($7 == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	*(($1 = ($1 + [-4]))) = (*($1) & [2147483647])
	$global$0 = ($3 + [16])
	return [0]
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL $102($0, $5)
	if ( ($8 == 0) ){ goto $label$3 }
	$2 = *($3 + [12])
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($2 == 0) ){ goto $label$1 }
	CALL memcpy($8, $1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($0 + [8384])
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$1 }
	$2 = ($0 + [8192])
	$6 = ($2 + ((int_32)$4 * (int_32)[12]))
	
.LOOP $label$12:
	$4 = *(($2 + [4]))
	if ( ($4 == 0) ){ goto $label$1 }
	if ( ((uint_32)($4 + [4]) > (uint_32)$1) ){ goto $label$13 }
	if ( ((uint_32)($4 + *($2)) > (uint_32)$1) ){ goto $label$2 }
	
.LABEL $label$13
	$2 = ($2 + [12])
	if ( ($2 <= $6) ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$2
	*(($1 = ($1 + [-4]))) = (*($1) & [2147483647])
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $8
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	return CALL $105([9660], $0, $1)
}

int_64 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $82($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $70()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $82($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18177]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $81($0, (int_64)0)
	*(CALL $70()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $82($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $82($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $82($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $82($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18177])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18177]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18177]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $82($0)
	$5 = *(($6 + [18177]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $82($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18177]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8205]))
	$8 = (int_64)0
	$5 = *(($6 + [18177]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18177]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $82($0)
	$5 = *(($6 + [18177]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $82($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18177]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $81($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18177]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18177]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $82($0) + [18177]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $70()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $70()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $70()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_64 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)*($0 + [104])) ){ goto $label$7 }
	*(($0 + [4])) = ($2 + [1])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)[43]) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$3 = CALL $82($0)
	if ( ((int_32)$3 == (int_32)[43]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)$3 == (int_32)[45]) ){ goto $label$5 }
	$4 = [0]
	$2 = $3
	$5 = [9]
	if ( ((uint_32)($3 + [-48]) > (uint_32)[9]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = ($0 + [4])
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [104]))) ){ goto $label$10 }
	*($6) = ($2 + [1])
	$4 = ((int_32)$3 == (int_32)[45])
	$2 = *($2)
	$3 = ($2 + [-48])
	if ( ($1 == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$4 = ((int_32)$3 == (int_32)[45])
	$2 = CALL $82($0)
	$3 = ($2 + [-48])
	if ( ($1 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ($3 <= [10]) ){ goto $label$8 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$1 }
	*(($2 = ($0 + [4]))) = (*($2) + [-1])
	goto $label$4 
	
.LABEL $label$8
	$5 = [9]
	if ( ((uint_32)$3 <= (uint_32)[9]) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = (int_64)-9223372036854775808
	if ( (*(($0 + [104])) == 0) ){ goto $label$2 }
	*(($2 = ($0 + [4]))) = (*($2) + [-1])
	return (int_64)-9223372036854775808
	
.LABEL $label$3
	$3 = [0]
	$8 = ($0 + [104])
	$6 = ($0 + [4])
	
.LOOP $label$12:
	$2 = ($2 + ((int_32)$3 * (int_32)[10]))
	$1 = *($6)
	if ( ((uint_32)$1 >= (uint_32)*($8)) ){ goto $label$14 }
	*($6) = ($1 + [1])
	$3 = ($2 + [-48])
	$2 = *($1)
	$1 = ($2 + [-48])
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$11 }
	goto $label$13 
	
.LABEL $label$14
	$3 = ($2 + [-48])
	$2 = CALL $82($0)
	$1 = ($2 + [-48])
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$11 }
	
.LABEL $label$13
	if ( ((int_32)$3 < (int_32)[214748364]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = (CASTING int_64)(int_32 $3)
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$15 }
	$1 = ($0 + [104])
	$3 = ($0 + [4])
	
.LOOP $label$17:
	$7 = ((int_64)(CASTING int_64)(int_32 $2) + (int_64)((int_64)$7 * (int_64)10))
	$2 = *($3)
	if ( ((uint_32)$2 >= (uint_32)*($1)) ){ goto $label$19 }
	*($3) = ($2 + [1])
	$7 = ((int_64)$7 + (int_64)-48)
	$2 = *($2)
	$6 = ($2 + [-48])
	if ( ((uint_32)$6 > (uint_32)[9]) ){ goto $label$16 }
	goto $label$18 
	
.LABEL $label$19
	$7 = ((int_64)$7 + (int_64)-48)
	$2 = CALL $82($0)
	$6 = ($2 + [-48])
	if ( ((uint_32)$6 > (uint_32)[9]) ){ goto $label$16 }
	
.LABEL $label$18
	if ( ((int_64)$7 < (int_64)92233720368547758) ){ goto $label$17 }
	
.LABEL $label$16
	if ( ((uint_32)$6 > (uint_32)[9]) ){ goto $label$15 }
	$1 = ($0 + [104])
	$3 = ($0 + [4])
	
.LOOP $label$20:
	$2 = *($3)
	if ( ((uint_32)$2 >= (uint_32)*($1)) ){ goto $label$21 }
	*($3) = ($2 + [1])
	if ( ((*($2) + [-48]) <= [10]) ){ goto $label$20 }
	goto $label$15 
	
.LABEL $label$21
	if ( ((CALL $82($0) + [-48]) <= [10]) ){ goto $label$20 }
	
.LABEL $label$15
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($2 = ($0 + [4]))) = (*($2) + [-1])
	
.LABEL $label$22
	$7 = ( (int_64))((int_64)0 - $7) ? $7 : $4 )
	
.LABEL $label$2
	return $7
	
.LABEL $label$1
	return (int_64)-9223372036854775808
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_64 $29
	float_64 $30
	$4 = ($global$0 - [9520])
	$global$0 = $4
	$5 = (int_64)0
	if ( ((uint_32)$2 > (uint_32)[2]) ){ goto $label$14 }
	$6 = ($1 + [104])
	$7 = ($1 + [4])
	$8 = ($2 << [2])
	$9 = *(($8 + [18156]))
	$10 = *(($8 + [18144]))
	
.LOOP $label$15:
	$8 = *($7)
	if ( ($8 <= *($6)) ){ goto $label$17 }
	$8 = CALL $82($1)
	if ( ((uint_32)($8 + [-9]) >= (uint_32)[5]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	*($7) = ($8 + [1])
	$8 = *($8)
	if ( (($8 + [-9]) <= [5]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( ((int_32)$8 == (int_32)[32]) ){ goto $label$15 }
	$11 = ((int_32)$8 == (int_32)[45])
	if ( $11 ){ goto $label$21 }
	if ( ((int_32)$8 != (int_32)[43]) ){ goto $label$20 }
	
.LABEL $label$21
	$12 = ([1] - ($11 << [1]))
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$19 }
	*($7) = ($8 + [1])
	$8 = *($8)
	goto $label$18 
	
.LABEL $label$20
	$12 = [1]
	goto $label$18 
	
.LABEL $label$19
	$8 = CALL $82($1)
	
.LABEL $label$18
	$11 = ($8 | [32])
	if ( ((int_32)$11 != (int_32)[105]) ){ goto $label$34 }
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$33 }
	*($7) = ($8 + [1])
	$8 = *($8)
	goto $label$32 
	
.LABEL $label$34
	if ( ((int_32)$11 != (int_32)[110]) ){ goto $label$22 }
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$31 }
	*($7) = ($8 + [1])
	$8 = *($8)
	goto $label$30 
	
.LABEL $label$33
	$8 = CALL $82($1)
	
.LABEL $label$32
	$11 = [1]
	if ( ((int_32)($8 | [32]) != (int_32)[110]) ){ goto $label$27 }
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$29 }
	*($7) = ($8 + [1])
	$8 = *($8)
	goto $label$28 
	
.LABEL $label$31
	$8 = CALL $82($1)
	
.LABEL $label$30
	if ( ((int_32)($8 | [32]) != (int_32)[97]) ){ goto $label$4 }
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$26 }
	*($7) = ($8 + [1])
	$8 = *($8)
	goto $label$25 
	
.LABEL $label$29
	$8 = CALL $82($1)
	
.LABEL $label$28
	$11 = [2]
	if ( ((int_32)($8 | [32]) != (int_32)[102]) ){ goto $label$27 }
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$24 }
	*($7) = ($8 + [1])
	$8 = *($8)
	goto $label$23 
	
.LABEL $label$27
	$13 = ((int_32)$3 != (int_32)[0])
	if ( ($11 == 0) ){ goto $label$22 }
	goto $label$8 
	
.LABEL $label$26
	$8 = CALL $82($1)
	
.LABEL $label$25
	if ( ((int_32)($8 | [32]) != (int_32)[110]) ){ goto $label$4 }
	$13 = ((int_32)$3 != (int_32)[0])
	$8 = *($7)
	if ( ($8 <= *($6)) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$24
	$8 = CALL $82($1)
	
.LABEL $label$23
	$11 = [3]
	if ( ((int_32)($8 | [32]) != (int_32)[105]) ){ goto $label$37 }
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$39 }
	*($7) = ($8 + [1])
	$8 = *($8)
	goto $label$38 
	
.LABEL $label$39
	$8 = CALL $82($1)
	
.LABEL $label$38
	$11 = [4]
	if ( ((int_32)($8 | [32]) != (int_32)[110]) ){ goto $label$40 }
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$42 }
	*($7) = ($8 + [1])
	$8 = *($8)
	goto $label$41 
	
.LABEL $label$42
	$8 = CALL $82($1)
	
.LABEL $label$41
	$11 = [5]
	if ( ((int_32)($8 | [32]) != (int_32)[105]) ){ goto $label$40 }
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$44 }
	*($7) = ($8 + [1])
	$8 = *($8)
	goto $label$43 
	
.LABEL $label$44
	$8 = CALL $82($1)
	
.LABEL $label$43
	$11 = [6]
	if ( ((int_32)($8 | [32]) != (int_32)[116]) ){ goto $label$40 }
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$46 }
	*($7) = ($8 + [1])
	$8 = *($8)
	goto $label$45 
	
.LABEL $label$46
	$8 = CALL $82($1)
	
.LABEL $label$45
	$11 = [7]
	if ( ((int_32)($8 | [32]) == (int_32)[121]) ){ goto $label$36 }
	
.LABEL $label$40
	if ( ($3 == 0) ){ goto $label$35 }
	
.LABEL $label$37
	$8 = *($6)
	if ( ($8 == 0) ){ goto $label$47 }
	*($7) = (*($7) + [-1])
	
.LABEL $label$47
	if ( ($11 <= [4]) ){ goto $label$36 }
	if ( ($3 == 0) ){ goto $label$36 }
	if ( ($8 == 0) ){ goto $label$36 }
	$8 = *($7)
	
.LOOP $label$48:
	$8 = ($8 + [-1])
	$11 = ($11 + [-1])
	if ( ((uint_32)$11 > (uint_32)[3]) ){ goto $label$48 }
	*($7) = $8
	
.LABEL $label$36
	CALL __extendsftf2($4, ((float_32)(CASTING float_32)(int_32 $12) * (float_32)(float_32)inf))
	$14 = *(($4 + [8]))
	$5 = *($4)
	goto $label$13 
	
.LABEL $label$35
	$13 = ((int_32)$3 != (int_32)[0])
	if ( $11 ){ goto $label$8 }
	
.LABEL $label$22
	if ( ((int_32)$8 != (int_32)[48]) ){ goto $label$50 }
	$11 = *($7)
	if ( ((uint_32)$11 >= (uint_32)*($6)) ){ goto $label$52 }
	*($7) = ($11 + [1])
	$11 = *($11)
	goto $label$51 
	
.LABEL $label$52
	$11 = CALL $82($1)
	
.LABEL $label$51
	if ( ((int_32)($11 | [32]) != (int_32)[120]) ){ goto $label$53 }
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$49 }
	*($7) = ($8 + [1])
	$13 = [0]
	$11 = [48]
	$8 = *($8)
	if ( ((int_32)$8 != (int_32)[48]) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$53
	if ( (*($6) == 0) ){ goto $label$50 }
	*($7) = (*($7) + [-1])
	
.LABEL $label$50
	$11 = [0]
	$18 = ($9 + $10)
	$19 = ([0] - $18)
	if ( ((int_32)$8 != (int_32)[48]) ){ goto $label$54 }
	
.LOOP $label$55:
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$56 }
	$11 = [1]
	*($7) = ($8 + [1])
	$8 = *($8)
	if ( ((int_32)$8 == (int_32)[48]) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	$11 = [1]
	$8 = CALL $82($1)
	if ( ((int_32)$8 == (int_32)[48]) ){ goto $label$55 }
	
.LABEL $label$54
	if ( ((int_32)$8 != (int_32)[46]) ){ goto $label$59 }
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$58 }
	*($7) = ($8 + [1])
	$16 = [48]
	$8 = *($8)
	if ( ((int_32)$8 == (int_32)[48]) ){ goto $label$57 }
	goto $label$12 
	
.LABEL $label$59
	$20 = [0]
	$5 = (int_64)0
	goto $label$11 
	
.LABEL $label$58
	$16 = [48]
	$8 = CALL $82($1)
	if ( ((int_32)$8 != (int_32)[48]) ){ goto $label$12 }
	
.LABEL $label$57
	$5 = (int_64)0
	
.LOOP $label$61:
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$62 }
	*($7) = ($8 + [1])
	$5 = ((int_64)$5 + (int_64)-1)
	$8 = *($8)
	if ( ((int_32)$8 == (int_32)$16) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	$5 = ((int_64)$5 + (int_64)-1)
	$8 = CALL $82($1)
	if ( ((int_32)$8 == (int_32)$16) ){ goto $label$61 }
	
.LABEL $label$60
	$11 = [1]
	$20 = [1]
	goto $label$11 
	
.LABEL $label$49
	$13 = [0]
	$11 = [48]
	$8 = CALL $82($1)
	if ( ((int_32)$8 == (int_32)[48]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$14
	$15 = [7]
	goto $label$1 
	
.LABEL $label$13
	$15 = [8]
	goto $label$1 
	
.LABEL $label$12
	$20 = [1]
	$5 = (int_64)0
	
.LABEL $label$11
	$21 = [0]
	*($4 + [1328]) = [0]
	$13 = ($8 + [-48])
	$16 = ((int_32)$8 == (int_32)[46])
	if ( $16 ){ goto $label$81 }
	$14 = (int_64)0
	if ( ((uint_32)$13 <= (uint_32)[9]) ){ goto $label$81 }
	$17 = [0]
	$22 = [0]
	$5 = ( $5 ? (int_64)0 : $20 )
	if ( $11 ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$81
	$14 = (int_64)0
	$23 = ($4 + [9504])
	$22 = [0]
	$17 = [0]
	$21 = [0]
	
.LOOP $label$82:
	if ( ($16 & [1]) ){ goto $label$86 }
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((int_32)$17 > (int_32)[2044]) ){ goto $label$87 }
	$16 = ((int_32)$8 != (int_32)[48])
	$24 = (CASTING uint_32)(uint_64 $14)
	$11 = (($4 + [1328]) + ($17 << [2]))
	if ( ($22 == 0) ){ goto $label$88 }
	$13 = (($8 + ((int_32)*($11) * (int_32)[10])) + [-48])
	
.LABEL $label$88
	$21 = ( $24 ? $21 : $16 )
	*($11) = $13
	$11 = [1]
	$8 = ((int_32)$8 == (int_32)[9])
	$8 = ($22 + [1])
	$22 = ( [0] ? $8 : $8 )
	$17 = ($17 + $8)
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$84 }
	goto $label$85 
	
.LABEL $label$87
	if ( ((int_32)$8 == (int_32)[48]) ){ goto $label$89 }
	*($23) = (*($23) | [1])
	$21 = [18396]
	
.LABEL $label$89
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$84 }
	goto $label$85 
	
.LABEL $label$86
	if ( $20 ){ goto $label$78 }
	$5 = $14
	$20 = [1]
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$84 }
	
.LABEL $label$85
	*($7) = ($8 + [1])
	$8 = *($8)
	$13 = ($8 + [-48])
	$16 = ((int_32)$8 == (int_32)[46])
	if ( ($16 == 0) ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	$8 = CALL $82($1)
	$13 = ($8 + [-48])
	$16 = ((int_32)$8 == (int_32)[46])
	if ( $16 ){ goto $label$82 }
	
.LABEL $label$83
	if ( ($13 <= [10]) ){ goto $label$82 }
	$5 = ( $5 ? $14 : $20 )
	if ( ($11 == 0) ){ goto $label$79 }
	
.LABEL $label$80
	if ( ((int_32)($8 | [32]) != (int_32)[101]) ){ goto $label$79 }
	$25 = CALL $88($1, $3)
	if ( ((int_64)$25 != (int_64)-9223372036854775808) ){ goto $label$90 }
	if ( ($3 == 0) ){ goto $label$77 }
	$25 = (int_64)0
	if ( (*($6) == 0) ){ goto $label$90 }
	*($7) = (*($7) + [-1])
	
.LABEL $label$90
	$5 = ((int_64)$25 + (int_64)$5)
	$7 = *($4 + [1328])
	if ( $7 ){ goto $label$74 }
	goto $label$63 
	
.LABEL $label$79
	$11 = ((int_32)$11 != (int_32)[0])
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$75 }
	if ( (*($6) == 0) ){ goto $label$75 }
	goto $label$76 
	
.LABEL $label$78
	$11 = ((int_32)$11 != (int_32)[0])
	if ( *($6) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$77
	$15 = [6]
	goto $label$1 
	
.LABEL $label$76
	*($7) = (*($7) + [-1])
	
.LABEL $label$75
	if ( ($11 == 0) ){ goto $label$73 }
	$7 = *($4 + [1328])
	if ( ($7 == 0) ){ goto $label$63 }
	
.LABEL $label$74
	if ( ((int_64)$14 > (int_64)9) ){ goto $label$91 }
	if ( ((int_64)$5 != (int_64)$14) ){ goto $label$91 }
	if ( (($2 + [-1]) <= [2]) ){ goto $label$71 }
	if ( (uint_32($7 >> $10) == 0) ){ goto $label$71 }
	
.LABEL $label$91
	if ( ((int_64)$5 <= (int_64)(CASTING int_64)(int_32 ((int_32)$9 / (int_32)[-2]))) ){ goto $label$72 }
	CALL __floatsitf(($4 + [544]), $12)
	CALL __multf3(($4 + [528]), *($4 + [544]), *((($4 + [544]) + [8])), (int_64)-1, (int_64)9223090561878065151)
	CALL __multf3(($4 + [512]), *($4 + [528]), *((($4 + [528]) + [8])), (int_64)-1, (int_64)9223090561878065151)
	*(CALL $70()) = [34]
	$14 = *((($4 + [512]) + [8]))
	$5 = *($4 + [512])
	goto $label$68 
	
.LABEL $label$73
	*(CALL $70()) = [22]
	$15 = [6]
	goto $label$1 
	
.LABEL $label$72
	if ( ((int_64)$5 >= (int_64)(CASTING int_64)(int_32 ($9 + [-226]))) ){ goto $label$70 }
	CALL __floatsitf(($4 + [592]), $12)
	CALL __multf3(($4 + [576]), *($4 + [592]), *((($4 + [592]) + [8])), (int_64)0, (int_64)281474976710656)
	CALL __multf3(($4 + [560]), *($4 + [576]), *((($4 + [576]) + [8])), (int_64)0, (int_64)281474976710656)
	*(CALL $70()) = [34]
	$14 = *((($4 + [560]) + [8]))
	$5 = *($4 + [560])
	goto $label$67 
	
.LABEL $label$71
	CALL __floatunsitf(($4 + [480]), $7)
	CALL __floatsitf(($4 + [496]), $12)
	CALL __multf3(($4 + [464]), *($4 + [496]), *((($4 + [496]) + [8])), *($4 + [480]), *((($4 + [480]) + [8])))
	$14 = *((($4 + [464]) + [8]))
	$5 = *($4 + [464])
	goto $label$69 
	
.LABEL $label$70
	if ( ($22 == 0) ){ goto $label$92 }
	if ( ((int_32)$22 > (int_32)[8]) ){ goto $label$93 }
	$8 = ($22 + [-1])
	$6 = (($4 + [1328]) + ($17 << [2]))
	$7 = *($6)
	
.LOOP $label$94:
	$7 = ((int_32)$7 * (int_32)[10])
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[8]) ){ goto $label$94 }
	*($6) = $7
	
.LABEL $label$93
	$17 = ($17 + [1])
	
.LABEL $label$92
	$13 = (CASTING uint_32)(uint_64 $5)
	if ( ((int_32)$21 >= (int_32)[9]) ){ goto $label$97 }
	if ( ((int_32)$21 > (int_32)$13) ){ goto $label$97 }
	if ( ((int_32)$13 > (int_32)[17]) ){ goto $label$97 }
	if ( ((int_32)$13 != (int_32)[9]) ){ goto $label$98 }
	CALL __floatunsitf(($4 + [624]), *($4 + [1328]))
	CALL __floatsitf(($4 + [640]), $12)
	CALL __multf3(($4 + [608]), *($4 + [640]), *((($4 + [640]) + [8])), *($4 + [624]), *((($4 + [624]) + [8])))
	$14 = *((($4 + [608]) + [8]))
	$5 = *($4 + [608])
	goto $label$66 
	
.LABEL $label$98
	if ( ((int_32)$13 > (int_32)[8]) ){ goto $label$99 }
	CALL __floatunsitf(($4 + [704]), *($4 + [1328]))
	CALL __floatsitf(($4 + [720]), $12)
	CALL __multf3(($4 + [688]), *($4 + [720]), *((($4 + [720]) + [8])), *($4 + [704]), *((($4 + [704]) + [8])))
	CALL __floatsitf(($4 + [672]), *(((([8] - $13) << [2]) + [18112])))
	CALL __divtf3(($4 + [656]), *($4 + [688]), *((($4 + [688]) + [8])), *($4 + [672]), *((($4 + [672]) + [8])))
	$14 = *((($4 + [656]) + [8]))
	$5 = *($4 + [656])
	goto $label$65 
	
.LABEL $label$99
	$7 = *($4 + [1328])
	$8 = (($10 + ((int_32)$13 * (int_32)[-3])) + [27])
	if ( ((int_32)$8 > (int_32)[30]) ){ goto $label$96 }
	if ( (uint_32($7 >> $8) == 0) ){ goto $label$96 }
	
.LABEL $label$97
	$8 = ($17 + [1])
	$7 = (($4 + [1328]) + ($8 << [2]))
	
.LOOP $label$100:
	$8 = ($8 + [-1])
	$6 = ($7 + [-8])
	$11 = ($7 + [-4])
	$7 = $11
	if ( (*($6) == 0) ){ goto $label$100 }
	$2 = [0]
	$7 = ((int_32)$13 % (int_32)[9])
	if ( ($7 == 0) ){ goto $label$104 }
	$24 = ( $7 ? ($7 + [9]) : ((int_32)$13 > (int_32)[-1]) )
	if ( ($8 == 0) ){ goto $label$103 }
	$17 = *(((([8] - $24) << [2]) + [18112]))
	$21 = ((int_32)[1000000000] / (int_32)$17)
	$16 = [0]
	$7 = ($4 + [1328])
	$1 = [0]
	$6 = [0]
	
.LOOP $label$105:
	$20 = *($7)
	$3 = ((uint_32)$20 / (uint_32)$17)
	$16 = ($3 + $16)
	*($7) = $16
	$22 = ((int_32)$1 == (int_32)$6)
	$16 = ($22 & ($16 == 0))
	$1 = ($1 + [1])
	$6 = ( ($1 & [2047]) ? $6 : $16 )
	$13 = ( ($13 + [-9]) ? $13 : $16 )
	$7 = ($7 + [4])
	$16 = ((int_32)($20 - ((int_32)$3 * (int_32)$17)) * (int_32)$21)
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$105 }
	if ( ($16 == 0) ){ goto $label$102 }
	*($11) = $16
	$8 = ($8 + [1])
	goto $label$102 
	
.LABEL $label$104
	$6 = [0]
	goto $label$101 
	
.LABEL $label$103
	$6 = [0]
	$8 = [0]
	
.LABEL $label$102
	$13 = (([9] - $24) + $13)
	
.LABEL $label$101
	
.LOOP $label$106:
	$17 = (($4 + [1328]) + ($6 << [2]))
	
.LOOP $label$107:
	if ( ((int_32)$13 < (int_32)[36]) ){ goto $label$108 }
	if ( ((int_32)$13 != (int_32)[36]) ){ goto $label$95 }
	if ( ((uint_32)*($17) > (uint_32)[10384592]) ){ goto $label$95 }
	
.LABEL $label$108
	$16 = ($8 + [2047])
	$1 = [0]
	$11 = $8
	
.LOOP $label$109:
	$8 = $11
	$7 = ($16 & [2047])
	$11 = (($4 + [1328]) + ($7 << [2]))
	$5 = ((int_64)((int_64)*($11) << (int_64)29) + (int_64)(CASTING uint_64)(uint_32 $1))
	if ( (uint_64)($5 <= (int_64)1000000001) ){ goto $label$111 }
	$14 = ((uint_64)$5 / (uint_64)(int_64)1000000000)
	$5 = (int_64))($5 - ((int_64)$14 * (int_64)1000000000))
	$1 = (CASTING uint_32)(uint_64 $14)
	goto $label$110 
	
.LABEL $label$111
	$1 = [0]
	
.LABEL $label$110
	$16 = (CASTING uint_32)(uint_64 $5)
	*($11) = $16
	$11 = ( $8 ? ( $8 ? ( $8 ? $7 : $16 ) : ((int_32)$7 == (int_32)$6) ) : ((int_32)$7 != (int_32)(($8 + [-1]) & [2047])) )
	$16 = ($7 + [-1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$109 }
	$2 = ($2 + [-29])
	if ( ($1 == 0) ){ goto $label$107 }
	$6 = (($6 + [-1]) & [2047])
	if ( ((int_32)$6 != (int_32)$11) ){ goto $label$112 }
	$8 = (($11 + [-1]) & [2047])
	*(($7 = (($4 + [1328]) + ((($11 + [2046]) & [2047]) << [2])))) = (*($7) | *((($4 + [1328]) + ($8 << [2]))))
	
.LABEL $label$112
	$13 = ($13 + [9])
	*((($4 + [1328]) + ($6 << [2]))) = $1
	goto $label$106 
	
.LABEL $label$96
	CALL __floatunsitf(($4 + [784]), $7)
	CALL __floatsitf(($4 + [800]), $12)
	CALL __multf3(($4 + [768]), *($4 + [800]), *((($4 + [800]) + [8])), *($4 + [784]), *((($4 + [784]) + [8])))
	CALL __floatsitf(($4 + [752]), *((($13 << [2]) + [18072])))
	CALL __multf3(($4 + [736]), *($4 + [768]), *((($4 + [768]) + [8])), *($4 + [752]), *((($4 + [752]) + [8])))
	$14 = *((($4 + [736]) + [8]))
	$5 = *($4 + [736])
	goto $label$64 
	
.LABEL $label$95
	
.LOOP $label$113:
	$22 = (($8 + [1]) & [2047])
	$21 = (($4 + [1328]) + ((($8 + [-1]) & [2047]) << [2]))
	
.LOOP $label$117:
	$1 = ( [9] ? [1] : ((int_32)$13 > (int_32)[45]) )
	
.LOOP $label$119:
	$7 = $6
	$6 = ($7 & [2047])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$121 }
	$11 = *((($4 + [1328]) + ($6 << [2])))
	if ( ($11 <= [10384593]) ){ goto $label$121 }
	if ( ((int_32)$11 != (int_32)[10384593]) ){ goto $label$120 }
	$11 = (($7 + [1]) & [2047])
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$121 }
	$11 = *((($4 + [1328]) + ($11 << [2])))
	if ( ($11 <= [717069655]) ){ goto $label$121 }
	if ( ((int_32)$11 != (int_32)[717069655]) ){ goto $label$120 }
	$11 = (($7 + [2]) & [2047])
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$121 }
	$11 = *((($4 + [1328]) + ($11 << [2])))
	if ( ($11 <= [257060992]) ){ goto $label$121 }
	if ( ((int_32)$11 != (int_32)[257060992]) ){ goto $label$120 }
	$11 = (($7 + [3]) & [2047])
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$121 }
	$11 = *((($4 + [1328]) + ($11 << [2])))
	if ( ($11 <= [658440191]) ){ goto $label$121 }
	if ( ((int_32)$13 != (int_32)[36]) ){ goto $label$120 }
	if ( ((int_32)$11 != (int_32)[658440191]) ){ goto $label$120 }
	goto $label$116 
	
.LABEL $label$121
	if ( ((int_32)$13 == (int_32)[36]) ){ goto $label$118 }
	
.LABEL $label$120
	$2 = ($2 + $1)
	$6 = $8
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$119 }
	$20 = uint_32([1000000000] >> $1)
	$3 = ((int_32)([-1] << $1) ^ (int_32)[-1])
	$11 = [0]
	$6 = $7
	
.LOOP $label$122:
	$16 = *($16)
	$11 = (uint_32($16 >> $1) + $11)
	*(($16 = (($4 + [1328]) + ($7 << [2])))) = $11
	$17 = ((int_32)$7 == (int_32)$6)
	$11 = ($17 & ($11 == 0))
	$7 = (($7 + [1]) & [2047])
	$6 = ( $7 ? $6 : $11 )
	$13 = ( ($13 + [-9]) ? $13 : $11 )
	$11 = ((int_32)($16 & $3) * (int_32)$20)
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$122 }
	if ( ($11 == 0) ){ goto $label$117 }
	if ( ((int_32)$22 != (int_32)$6) ){ goto $label$114 }
	*($21) = (*($21) | [1])
	$6 = $22
	goto $label$117 
	
.LABEL $label$118
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$116 }
	*(((($4 + [1328]) + ($22 << [2])) + [-4])) = [0]
	$6 = $8
	goto $label$115 
	
.LABEL $label$116
	$22 = $8
	
.LABEL $label$115
	CALL __floatunsitf(($4 + [1312]), *((($4 + [1328]) + ($6 << [2]))))
	$5 = *((($4 + [1312]) + [8]))
	$14 = *($4 + [1312])
	$8 = (($7 + [1]) & [2047])
	if ( ((int_32)$8 != (int_32)$22) ){ goto $label$123 }
	*(((($4 + [1328]) + (($22 = (($7 + [2]) & [2047])) << [2])) + [-4])) = [0]
	
.LABEL $label$123
	CALL __multf3(($4 + [1296]), $14, $5, (int_64)0, (int_64)4619810130798575616)
	CALL __floatunsitf(($4 + [1280]), *((($4 + [1328]) + ($8 << [2]))))
	CALL __addtf3(($4 + [1264]), *($4 + [1296]), *((($4 + [1296]) + [8])), *($4 + [1280]), *((($4 + [1280]) + [8])))
	$5 = *((($4 + [1264]) + [8]))
	$14 = *($4 + [1264])
	$8 = (($7 + [2]) & [2047])
	if ( ((int_32)$8 != (int_32)$22) ){ goto $label$124 }
	*(((($4 + [1328]) + (($22 = (($7 + [3]) & [2047])) << [2])) + [-4])) = [0]
	
.LABEL $label$124
	CALL __multf3(($4 + [1248]), $14, $5, (int_64)0, (int_64)4619810130798575616)
	CALL __floatunsitf(($4 + [1232]), *((($4 + [1328]) + ($8 << [2]))))
	CALL __addtf3(($4 + [1216]), *($4 + [1248]), *((($4 + [1248]) + [8])), *($4 + [1232]), *((($4 + [1232]) + [8])))
	$14 = *((($4 + [1216]) + [8]))
	$25 = *($4 + [1216])
	$8 = (($7 + [3]) & [2047])
	if ( ((int_32)$8 != (int_32)$22) ){ goto $label$125 }
	*(((($4 + [1328]) + (($22 = (($7 + [4]) & [2047])) << [2])) + [-4])) = [0]
	
.LABEL $label$125
	$5 = (int_64)0
	CALL __multf3(($4 + [1200]), $25, $14, (int_64)0, (int_64)4619810130798575616)
	CALL __floatunsitf(($4 + [1184]), *((($4 + [1328]) + ($8 << [2]))))
	CALL __addtf3(($4 + [1168]), *($4 + [1200]), *((($4 + [1200]) + [8])), *($4 + [1184]), *((($4 + [1184]) + [8])))
	CALL __floatsitf(($4 + [1152]), $12)
	CALL __multf3(($4 + [1136]), *($4 + [1168]), *((($4 + [1168]) + [8])), *($4 + [1152]), *((($4 + [1152]) + [8])))
	$14 = *((($4 + [1136]) + [8]))
	$25 = *($4 + [1136])
	$11 = ((int_32)$8 < (int_32)$10)
	$8 = (($2 - $9) + [113])
	$6 = ( ( $8 ? [0] : ((int_32)$8 > (int_32)[0]) ) ? $10 : $11 )
	if ( ((int_32)$6 >= (int_32)[113]) ){ goto $label$127 }
	CALL __extenddftf2(($4 + [1088]), CALL $74((float_64)1, ([225] - $6)))
	CALL $83(($4 + [1120]), *($4 + [1088]), *((($4 + [1088]) + [8])), $25, $14)
	$26 = *($4 + [1128])
	$28 = *($4 + [1120])
	CALL __extenddftf2(($4 + [1072]), CALL $74((float_64)1, ([113] - $6)))
	CALL $85(($4 + [1104]), $25, $14, *($4 + [1072]), *((($4 + [1072]) + [8])))
	$27 = *($4 + [1112])
	$5 = *($4 + [1104])
	CALL __subtf3(($4 + [1056]), $25, $14, $5, $27)
	CALL __addtf3(($4 + [1040]), $28, $26, *($4 + [1056]), *((($4 + [1056]) + [8])))
	$14 = *((($4 + [1040]) + [8]))
	$25 = *($4 + [1040])
	goto $label$126 
	
.LABEL $label$127
	$27 = (int_64)0
	$28 = (int_64)0
	$26 = (int_64)0
	
.LABEL $label$126
	$1 = ($2 + [113])
	$16 = (($7 + [4]) & [2047])
	if ( ((int_32)$16 == (int_32)$22) ){ goto $label$128 }
	$16 = *((($4 + [1328]) + ($16 << [2])))
	if ( ((uint_32)$16 > (uint_32)[499999999]) ){ goto $label$130 }
	if ( $16 ){ goto $label$131 }
	if ( ((int_32)(($7 + [5]) & [2047]) == (int_32)$22) ){ goto $label$129 }
	
.LABEL $label$131
	CALL __extenddftf2(($4 + [928]), ((float_64)(CASTING float_64)(int_32 $12) * (float_64)(float_64)0.25))
	CALL __addtf3(($4 + [912]), $5, $27, *($4 + [928]), *((($4 + [928]) + [8])))
	$27 = *((($4 + [912]) + [8]))
	$5 = *($4 + [912])
	goto $label$129 
	
.LABEL $label$130
	if ( ((int_32)$16 != (int_32)[500000000]) ){ goto $label$133 }
	$30 = (CASTING float_64)(int_32 $12)
	if ( ((int_32)(($7 + [5]) & [2047]) != (int_32)$22) ){ goto $label$132 }
	CALL __extenddftf2(($4 + [960]), ((float_64)$30 * (float_64)(float_64)0.5))
	CALL __addtf3(($4 + [944]), $5, $27, *($4 + [960]), *((($4 + [960]) + [8])))
	$27 = *((($4 + [944]) + [8]))
	$5 = *($4 + [944])
	goto $label$129 
	
.LABEL $label$133
	CALL __extenddftf2(($4 + [1024]), ((float_64)(CASTING float_64)(int_32 $12) * (float_64)(float_64)0.75))
	CALL __addtf3(($4 + [1008]), $5, $27, *($4 + [1024]), *((($4 + [1024]) + [8])))
	$27 = *((($4 + [1008]) + [8]))
	$5 = *($4 + [1008])
	goto $label$129 
	
.LABEL $label$132
	CALL __extenddftf2(($4 + [992]), ((float_64)$30 * (float_64)(float_64)0.75))
	CALL __addtf3(($4 + [976]), $5, $27, *($4 + [992]), *((($4 + [992]) + [8])))
	$27 = *((($4 + [976]) + [8]))
	$5 = *($4 + [976])
	
.LABEL $label$129
	if ( ((int_32)([113] - $6) < (int_32)[2]) ){ goto $label$128 }
	CALL $85(($4 + [896]), $5, $27, (int_64)0, (int_64)4611404543450677248)
	if ( CALL __netf2(*($4 + [896]), *($4 + [904]), (int_64)0, (int_64)0) ){ goto $label$128 }
	CALL __addtf3(($4 + [880]), $5, $27, (int_64)0, (int_64)4611404543450677248)
	$27 = *(($4 + [888]))
	$5 = *($4 + [880])
	
.LABEL $label$128
	CALL __addtf3(($4 + [864]), $25, $14, $5, $27)
	CALL __subtf3(($4 + [848]), *($4 + [864]), *((($4 + [864]) + [8])), $28, $26)
	$14 = *((($4 + [848]) + [8]))
	$25 = *($4 + [848])
	if ( ((int_32)($1 & [2147483647]) <= (int_32)([-2] - $18)) ){ goto $label$134 }
	if ( ((int_32)((float_64)CALL $72(CALL $fimport$36($25, $14)) >= (float_64)(float_64)1038459371706965525706099e10) ^ (int_32)[1]) ){ goto $label$135 }
	CALL __multf3(($4 + [832]), $25, $14, (int_64)0, (int_64)4611123068473966592)
	$11 = (((int_32)$8 < (int_32)$10) & ((int_32)(($6 + $9) + [-113]) != (int_32)$2))
	$2 = ($2 + [1])
	$14 = *(($4 + [840]))
	$25 = *($4 + [832])
	
.LABEL $label$135
	$7 = CALL __netf2($5, $27, (int_64)0, (int_64)0)
	if ( ((int_32)($2 + [110]) > (int_32)$19) ){ goto $label$136 }
	if ( ((((int_32)$7 != (int_32)[0]) & $11) == 0) ){ goto $label$134 }
	
.LABEL $label$136
	*(CALL $70()) = [34]
	
.LABEL $label$134
	CALL $86(($4 + [816]), $25, $14, $2)
	$14 = *($4 + [824])
	$5 = *($4 + [816])
	$15 = [8]
	goto $label$1 
	
.LABEL $label$114
	*((($4 + [1328]) + ($8 << [2]))) = $11
	$8 = $22
	goto $label$113 
	
.LABEL $label$69
	$15 = [8]
	goto $label$1 
	
.LABEL $label$68
	$15 = [8]
	goto $label$1 
	
.LABEL $label$67
	$15 = [8]
	goto $label$1 
	
.LABEL $label$66
	$15 = [8]
	goto $label$1 
	
.LABEL $label$65
	$15 = [8]
	goto $label$1 
	
.LABEL $label$64
	$15 = [8]
	goto $label$1 
	
.LABEL $label$63
	CALL __extenddftf2(($4 + [448]), ((float_64)(CASTING float_64)(int_32 $12) * (float_64)(float_64)0))
	$14 = *(($4 + [456]))
	$5 = *($4 + [448])
	$15 = [8]
	goto $label$1 
	
.LABEL $label$10
	
.LOOP $label$137:
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$138 }
	$13 = [1]
	*($7) = ($8 + [1])
	$8 = *($8)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$137 }
	goto $label$9 
	
.LABEL $label$138
	$13 = [1]
	$8 = CALL $82($1)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$137 }
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)[46]) ){ goto $label$143 }
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$142 }
	*($7) = ($8 + [1])
	$11 = [48]
	$14 = (int_64)0
	$8 = *($8)
	if ( ((int_32)$8 != (int_32)[48]) ){ goto $label$141 }
	goto $label$140 
	
.LABEL $label$143
	$14 = (int_64)0
	$17 = [0]
	goto $label$139 
	
.LABEL $label$142
	$11 = [48]
	$14 = (int_64)0
	$8 = CALL $82($1)
	if ( ((int_32)$8 == (int_32)[48]) ){ goto $label$140 }
	
.LABEL $label$141
	$17 = [1]
	goto $label$139 
	
.LABEL $label$140
	
.LOOP $label$145:
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$146 }
	*($7) = ($8 + [1])
	$14 = ((int_64)$14 + (int_64)-1)
	$8 = *($8)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$145 }
	goto $label$144 
	
.LABEL $label$146
	$14 = ((int_64)$14 + (int_64)-1)
	$8 = CALL $82($1)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$145 }
	
.LABEL $label$144
	$17 = [1]
	$13 = [1]
	
.LABEL $label$139
	$26 = (int_64)4611404543450677248
	$2 = [0]
	$25 = (int_64)0
	$27 = (int_64)0
	$28 = (int_64)0
	$20 = [0]
	$5 = (int_64)0
	$11 = ($8 | [32])
	$16 = ($8 + [-48])
	if ( ((uint_32)$16 >= (uint_32)[10]) ){ goto $label$147 }
	$15 = [20]
	goto $label$1 
	
.LABEL $label$147
	$15 = [27]
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_32)$11 != (int_32)[3]) ){ goto $label$4 }
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$6 }
	
.LABEL $label$7
	*($7) = ($8 + [1])
	if ( ((int_32)*($8) == (int_32)[40]) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$6
	if ( ((int_32)CALL $82($1) != (int_32)[40]) ){ goto $label$2 }
	
.LABEL $label$5
	$8 = [1]
	$11 = *($7)
	if ( ($11 <= *($6)) ){ goto $label$3 }
	$15 = [15]
	goto $label$1 
	
.LABEL $label$4
	if ( (*($6) == 0) ){ goto $label$148 }
	*($7) = (*($7) + [-1])
	
.LABEL $label$148
	*(CALL $70()) = [22]
	$15 = [6]
	goto $label$1 
	
.LABEL $label$3
	$15 = [18]
	goto $label$1 
	
.LABEL $label$2
	$14 = (int_64)9223231299366420480
	if ( (*($6) == 0) ){ goto $label$149 }
	*($7) = (*($7) + [-1])
	$15 = [8]
	goto $label$1 
	
.LABEL $label$149
	$15 = [8]
	
.LABEL $label$1
	
.LOOP $label$150:
	goto $label$276 
	
.LABEL $label$279
	$11 = CALL $82($1)
	$16 = ($11 + [-65])
	if ( (($11 + [-48]) <= [10]) ){ goto $label$203 }
	$15 = [16]
	goto $label$150 
	
.LABEL $label$278
	if ( ($16 <= [26]) ){ goto $label$202 }
	$15 = [17]
	goto $label$150 
	
.LABEL $label$277
	$16 = ($11 + [-97])
	if ( ((int_32)$11 == (int_32)[95]) ){ goto $label$201 }
	$15 = [0]
	goto $label$150 
	
.LABEL $label$276
	if ( ((uint_32)$16 >= (uint_32)[26]) ){ goto $label$200 }
	$15 = [14]
	goto $label$150 
	
.LABEL $label$275
	$8 = ($8 + [1])
	$11 = *($7)
	if ( ((uint_32)$11 >= (uint_32)*($6)) ){ goto $label$204 }
	$15 = [18]
	goto $label$150 
	
.LABEL $label$274
	*($7) = ($11 + [1])
	$11 = *($11)
	$16 = ($11 + [-65])
	if ( ((uint_32)($11 + [-48]) >= (uint_32)[10]) ){ goto $label$184 }
	goto $label$185 
	
.LABEL $label$273
	$14 = (int_64)9223231299366420480
	if ( ((int_32)$11 == (int_32)[41]) ){ goto $label$199 }
	$15 = [2]
	goto $label$150 
	
.LABEL $label$272
	$6 = *($6)
	if ( ($6 == 0) ){ goto $label$198 }
	$15 = [3]
	goto $label$150 
	
.LABEL $label$271
	*($7) = (*($7) + [-1])
	$15 = [4]
	goto $label$150 
	
.LABEL $label$270
	if ( ($13 == 0) ){ goto $label$197 }
	$15 = [9]
	goto $label$150 
	
.LABEL $label$269
	if ( ($8 == 0) ){ goto $label$188 }
	$15 = [10]
	goto $label$150 
	
.LABEL $label$268
	if ( ($6 == 0) ){ goto $label$187 }
	$15 = [11]
	goto $label$150 
	
.LABEL $label$267
	$1 = *($7)
	$6 = [0]
	$15 = [12]
	goto $label$150 
	
.LABEL $label$266
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$186 }
	$15 = [13]
	goto $label$150 
	
.LABEL $label$265
	*($7) = ($1 - $6)
	goto $label$189 
	
.LABEL $label$264
	*(CALL $70()) = [22]
	goto $label$195 
	
.LABEL $label$263
	$5 = (int_64)0
	CALL $81($1, (int_64)0)
	$15 = [7]
	goto $label$150 
	
.LABEL $label$262
	$14 = (int_64)0
	$15 = [8]
	goto $label$150 
	
.LABEL $label$261
	*($0) = $5
	*($0 + [8]) = $14
	$global$0 = ($4 + [9520])
	return 
	
.LABEL $label$260
	if ( ((int_32)$8 != (int_32)[46]) ){ goto $label$205 }
	$15 = [69]
	goto $label$150 
	
.LABEL $label$259
	if ( $17 ){ goto $label$174 }
	$15 = [70]
	goto $label$150 
	
.LABEL $label$258
	$17 = [1]
	$14 = $5
	$8 = *($7)
	if ( ($8 <= *($6)) ){ goto $label$207 }
	$15 = [26]
	goto $label$150 
	
.LABEL $label$257
	$8 = CALL $82($1)
	$11 = ($8 | [32])
	$16 = ($8 + [-48])
	if ( ((uint_32)$16 >= (uint_32)[10]) ){ goto $label$206 }
	$15 = [20]
	goto $label$150 
	
.LABEL $label$256
	$8 = ( ($11 + [-87]) ? $16 : ((int_32)$8 > (int_32)[57]) )
	if ( ((int_64)$5 > (int_64)7) ){ goto $label$181 }
	$15 = [68]
	goto $label$150 
	
.LABEL $label$255
	$2 = ($8 + ($2 << [4]))
	goto $label$176 
	
.LABEL $label$254
	if ( ((int_64)$5 > (int_64)28) ){ goto $label$180 }
	$15 = [67]
	goto $label$150 
	
.LABEL $label$253
	CALL __multf3(($4 + [48]), $28, $26, (int_64)0, (int_64)4610278643543834624)
	CALL __floatsitf(($4 + [64]), $8)
	$26 = *((($4 + [48]) + [8]))
	$28 = *($4 + [48])
	CALL __multf3(($4 + [32]), $28, $26, *($4 + [64]), *((($4 + [64]) + [8])))
	CALL __addtf3(($4 + [16]), $25, $27, *($4 + [32]), *((($4 + [32]) + [8])))
	$27 = *((($4 + [16]) + [8]))
	$25 = *($4 + [16])
	goto $label$177 
	
.LABEL $label$252
	if ( $20 ){ goto $label$179 }
	$15 = [23]
	goto $label$150 
	
.LABEL $label$251
	if ( ($8 == 0) ){ goto $label$178 }
	$15 = [24]
	goto $label$150 
	
.LABEL $label$250
	CALL __multf3(($4 + [96]), $28, $26, (int_64)0, (int_64)4611123068473966592)
	CALL __addtf3(($4 + [80]), $25, $27, *($4 + [96]), *((($4 + [96]) + [8])))
	$27 = *((($4 + [80]) + [8]))
	$20 = [1]
	$25 = *($4 + [80])
	$15 = [25]
	goto $label$150 
	
.LABEL $label$249
	$5 = ((int_64)$5 + (int_64)1)
	$13 = [1]
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$175 }
	$15 = [66]
	goto $label$150 
	
.LABEL $label$248
	*($7) = ($8 + [1])
	$8 = *($8)
	$11 = ($8 | [32])
	$16 = ($8 + [-48])
	if ( ($16 <= [10]) ){ goto $label$208 }
	$15 = [27]
	goto $label$150 
	
.LABEL $label$247
	if ( ((int_32)$8 == (int_32)[46]) ){ goto $label$183 }
	$15 = [28]
	goto $label$150 
	
.LABEL $label$246
	if ( ((uint_32)($11 + [-97]) <= (uint_32)[5]) ){ goto $label$182 }
	$15 = [29]
	goto $label$150 
	
.LABEL $label$245
	if ( ($13 == 0) ){ goto $label$173 }
	$15 = [30]
	goto $label$150 
	
.LABEL $label$244
	if ( ((int_64)$5 > (int_64)7) ){ goto $label$171 }
	$15 = [56]
	goto $label$150 
	
.LABEL $label$243
	$26 = ((int_64)$5 + (int_64)-1)
	$15 = [57]
	goto $label$150 
	
.LABEL $label$242
	$2 = ($2 << [4])
	$26 = ((int_64)$26 + (int_64)1)
	if ( ((int_64)$26 < (int_64)7) ){ goto $label$172 }
	$15 = [31]
	goto $label$150 
	
.LABEL $label$241
	if ( ((int_32)$11 != (int_32)[112]) ){ goto $label$170 }
	$15 = [52]
	goto $label$150 
	
.LABEL $label$240
	$26 = CALL $88($1, $3)
	if ( ((int_64)$26 != (int_64)-9223372036854775808) ){ goto $label$168 }
	$15 = [53]
	goto $label$150 
	
.LABEL $label$239
	if ( ($3 == 0) ){ goto $label$196 }
	$15 = [54]
	goto $label$150 
	
.LABEL $label$238
	$26 = (int_64)0
	if ( (*($6) == 0) ){ goto $label$167 }
	$15 = [55]
	goto $label$150 
	
.LABEL $label$237
	*($7) = (*($7) + [-1])
	if ( $2 ){ goto $label$165 }
	$15 = [51]
	goto $label$150 
	
.LABEL $label$236
	CALL __extenddftf2(($4 + [128]), ((float_64)(CASTING float_64)(int_32 $12) * (float_64)(float_64)0))
	$14 = *(($4 + [136]))
	$5 = *($4 + [128])
	goto $label$191 
	
.LABEL $label$235
	$8 = *($6)
	if ( ($8 == 0) ){ goto $label$155 }
	$15 = [59]
	goto $label$150 
	
.LABEL $label$234
	*($7) = (*($7) + [-1])
	$15 = [60]
	goto $label$150 
	
.LABEL $label$233
	if ( ($3 == 0) ){ goto $label$154 }
	$15 = [61]
	goto $label$150 
	
.LABEL $label$232
	if ( ($8 == 0) ){ goto $label$153 }
	$15 = [62]
	goto $label$150 
	
.LABEL $label$231
	$8 = *($7)
	*($7) = ($8 + [-1])
	if ( ($17 == 0) ){ goto $label$152 }
	$15 = [63]
	goto $label$150 
	
.LABEL $label$230
	*($7) = ($8 + [-2])
	goto $label$151 
	
.LABEL $label$229
	$26 = (int_64)0
	if ( (*($6) == 0) ){ goto $label$169 }
	$15 = [33]
	goto $label$150 
	
.LABEL $label$228
	*($7) = (*($7) + [-1])
	$15 = [34]
	goto $label$150 
	
.LABEL $label$227
	if ( ($2 == 0) ){ goto $label$166 }
	$15 = [35]
	goto $label$150 
	
.LABEL $label$226
	$5 = ((int_64)((int_64)((int_64)( $14 ? $5 : $17 ) << (int_64)2) + (int_64)$26) + (int_64)-32)
	if ( ((int_64)$5 <= (int_64)(CASTING uint_64)(uint_32 ([0] - $9))) ){ goto $label$164 }
	$15 = [50]
	goto $label$150 
	
.LABEL $label$225
	CALL __floatsitf(($4 + [176]), $12)
	CALL __multf3(($4 + [160]), *($4 + [176]), *((($4 + [176]) + [8])), (int_64)-1, (int_64)9223090561878065151)
	CALL __multf3(($4 + [144]), *($4 + [160]), *((($4 + [160]) + [8])), (int_64)-1, (int_64)9223090561878065151)
	*(CALL $70()) = [34]
	$14 = *((($4 + [144]) + [8]))
	$5 = *($4 + [144])
	goto $label$192 
	
.LABEL $label$224
	if ( ((int_64)$5 >= (int_64)(CASTING int_64)(int_32 ($9 + [-226]))) ){ goto $label$163 }
	$15 = [49]
	goto $label$150 
	
.LABEL $label$223
	CALL __floatsitf(($4 + [224]), $12)
	CALL __multf3(($4 + [208]), *($4 + [224]), *((($4 + [224]) + [8])), (int_64)0, (int_64)281474976710656)
	CALL __multf3(($4 + [192]), *($4 + [208]), *((($4 + [208]) + [8])), (int_64)0, (int_64)281474976710656)
	*(CALL $70()) = [34]
	$14 = *((($4 + [192]) + [8]))
	$5 = *($4 + [192])
	goto $label$193 
	
.LABEL $label$222
	CALL $81($1, (int_64)0)
	$15 = [64]
	goto $label$150 
	
.LABEL $label$221
	CALL __extenddftf2(($4 + [112]), ((float_64)(CASTING float_64)(int_32 $12) * (float_64)(float_64)0))
	$14 = *(($4 + [120]))
	$5 = *($4 + [112])
	goto $label$190 
	
.LABEL $label$220
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$161 }
	$15 = [47]
	goto $label$150 
	
.LABEL $label$219
	$15 = [48]
	goto $label$150 
	
.LABEL $label$218
	CALL __addtf3(($4 + [432]), $25, $27, (int_64)0, (int_64)-4611967493404098560)
	$7 = CALL __getf2($25, $27, (int_64)0, (int_64)4611123068473966592)
	$8 = ((int_32)$7 < (int_32)[0])
	CALL __addtf3(($4 + [416]), $25, $27, ( $25 ? *($4 + [432]) : $8 ), ( $27 ? *((($4 + [432]) + [8])) : $8 ))
	$5 = ((int_64)$5 + (int_64)-1)
	$27 = *((($4 + [416]) + [8]))
	$25 = *($4 + [416])
	$2 = (($2 << [1]) | ((int_32)$7 > (int_32)[-1]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$162 }
	$15 = [38]
	goto $label$150 
	
.LABEL $label$217
	$14 = ((int_64)$5 + (int_64))((int_64)32 - (CASTING int_64)(int_32 $9))
	if ( ((int_64)$14) >= (int_64)(CASTING uint_64)(uint_32 $10)) ){ goto $label$160 }
	$15 = [45]
	goto $label$150 
	
.LABEL $label$216
	$10 = (CASTING uint_32)(uint_64 $14)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$159 }
	$15 = [39]
	goto $label$150 
	
.LABEL $label$215
	if ( ((int_32)$10 < (int_32)[113]) ){ goto $label$158 }
	$15 = [40]
	goto $label$150 
	
.LABEL $label$214
	CALL __floatsitf(($4 + [400]), $12)
	$14 = *(($4 + [408]))
	$26 = (int_64)0
	$28 = *($4 + [400])
	$29 = (int_64)0
	goto $label$157 
	
.LABEL $label$213
	$10 = [0]
	$15 = [44]
	goto $label$150 
	
.LABEL $label$212
	CALL __floatsitf(($4 + [352]), $12)
	CALL __extenddftf2(($4 + [368]), CALL $74((float_64)1, ([144] - $10)))
	$14 = *((($4 + [352]) + [8]))
	$28 = *($4 + [352])
	CALL $83(($4 + [384]), *($4 + [368]), *((($4 + [368]) + [8])), $28, $14)
	$29 = *($4 + [392])
	$26 = *($4 + [384])
	$15 = [41]
	goto $label$150 
	
.LABEL $label$211
	$7 = ((($2 & [1]) == 0) & (((int_32)CALL __netf2($25, $27, (int_64)0, (int_64)0) != (int_32)[0]) & ((int_32)$10 < (int_32)[32])))
	CALL __floatunsitf(($4 + [336]), ($2 + $7))
	CALL __multf3(($4 + [320]), $28, $14, *($4 + [336]), *((($4 + [336]) + [8])))
	CALL __multf3(($4 + [304]), $28, $14, ( (int_64)0 ? $25 : $7 ), ( (int_64)0 ? $27 : $7 ))
	CALL __addtf3(($4 + [288]), $26, $29, *($4 + [320]), *((($4 + [320]) + [8])))
	CALL __addtf3(($4 + [272]), *($4 + [304]), *((($4 + [304]) + [8])), *($4 + [288]), *((($4 + [288]) + [8])))
	CALL __subtf3(($4 + [256]), *($4 + [272]), *((($4 + [272]) + [8])), $26, $29)
	$25 = *((($4 + [256]) + [8]))
	$14 = *($4 + [256])
	if ( CALL __netf2($14, $25, (int_64)0, (int_64)0) ){ goto $label$156 }
	$15 = [42]
	goto $label$150 
	
.LABEL $label$210
	*(CALL $70()) = [34]
	$15 = [43]
	goto $label$150 
	
.LABEL $label$209
	CALL $86(($4 + [240]), $14, $25, (CASTING uint_32)(uint_64 $5))
	$14 = *($4 + [248])
	$5 = *($4 + [240])
	goto $label$194 
	
.LABEL $label$208
	$15 = [20]
	goto $label$150 
	
.LABEL $label$207
	$15 = [66]
	goto $label$150 
	
.LABEL $label$206
	$15 = [27]
	goto $label$150 
	
.LABEL $label$205
	$15 = [20]
	goto $label$150 
	
.LABEL $label$204
	$15 = [15]
	goto $label$150 
	
.LABEL $label$203
	$15 = [14]
	goto $label$150 
	
.LABEL $label$202
	$15 = [14]
	goto $label$150 
	
.LABEL $label$201
	$15 = [14]
	goto $label$150 
	
.LABEL $label$200
	$15 = [1]
	goto $label$150 
	
.LABEL $label$199
	$15 = [8]
	goto $label$150 
	
.LABEL $label$198
	$15 = [4]
	goto $label$150 
	
.LABEL $label$197
	$15 = [5]
	goto $label$150 
	
.LABEL $label$196
	$15 = [6]
	goto $label$150 
	
.LABEL $label$195
	$15 = [6]
	goto $label$150 
	
.LABEL $label$194
	$15 = [8]
	goto $label$150 
	
.LABEL $label$193
	$15 = [8]
	goto $label$150 
	
.LABEL $label$192
	$15 = [8]
	goto $label$150 
	
.LABEL $label$191
	$15 = [8]
	goto $label$150 
	
.LABEL $label$190
	$15 = [8]
	goto $label$150 
	
.LABEL $label$189
	$15 = [8]
	goto $label$150 
	
.LABEL $label$188
	$15 = [8]
	goto $label$150 
	
.LABEL $label$187
	$15 = [8]
	goto $label$150 
	
.LABEL $label$186
	$15 = [12]
	goto $label$150 
	
.LABEL $label$185
	$15 = [14]
	goto $label$150 
	
.LABEL $label$184
	$15 = [16]
	goto $label$150 
	
.LABEL $label$183
	$15 = [19]
	goto $label$150 
	
.LABEL $label$182
	$15 = [19]
	goto $label$150 
	
.LABEL $label$181
	$15 = [21]
	goto $label$150 
	
.LABEL $label$180
	$15 = [22]
	goto $label$150 
	
.LABEL $label$179
	$15 = [25]
	goto $label$150 
	
.LABEL $label$178
	$15 = [25]
	goto $label$150 
	
.LABEL $label$177
	$15 = [25]
	goto $label$150 
	
.LABEL $label$176
	$15 = [25]
	goto $label$150 
	
.LABEL $label$175
	$15 = [26]
	goto $label$150 
	
.LABEL $label$174
	$15 = [29]
	goto $label$150 
	
.LABEL $label$173
	$15 = [58]
	goto $label$150 
	
.LABEL $label$172
	$15 = [57]
	goto $label$150 
	
.LABEL $label$171
	$15 = [31]
	goto $label$150 
	
.LABEL $label$170
	$15 = [32]
	goto $label$150 
	
.LABEL $label$169
	$15 = [34]
	goto $label$150 
	
.LABEL $label$168
	$15 = [34]
	goto $label$150 
	
.LABEL $label$167
	$15 = [34]
	goto $label$150 
	
.LABEL $label$166
	$15 = [51]
	goto $label$150 
	
.LABEL $label$165
	$15 = [35]
	goto $label$150 
	
.LABEL $label$164
	$15 = [36]
	goto $label$150 
	
.LABEL $label$163
	$15 = [37]
	goto $label$150 
	
.LABEL $label$162
	$15 = [48]
	goto $label$150 
	
.LABEL $label$161
	$15 = [38]
	goto $label$150 
	
.LABEL $label$160
	$15 = [39]
	goto $label$150 
	
.LABEL $label$159
	$15 = [46]
	goto $label$150 
	
.LABEL $label$158
	$15 = [44]
	goto $label$150 
	
.LABEL $label$157
	$15 = [41]
	goto $label$150 
	
.LABEL $label$156
	$15 = [43]
	goto $label$150 
	
.LABEL $label$155
	$15 = [60]
	goto $label$150 
	
.LABEL $label$154
	$15 = [65]
	goto $label$150 
	
.LABEL $label$153
	$15 = [64]
	goto $label$150 
	
.LABEL $label$152
	$15 = [64]
	goto $label$150 
	
.LABEL $label$151
	$15 = [64]
	goto $label$150 
	$15
}

void .FUNC $86 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [80])
	$global$0 = $4
	if ( ((int_32)$3 < (int_32)[16384]) ){ goto $label$4 }
	CALL __multf3(($4 + [32]), $1, $2, (int_64)0, (int_64)9222809086901354496)
	$2 = *((($4 + [32]) + [8]))
	$1 = *($4 + [32])
	if ( ((int_32)$3 < (int_32)[32767]) ){ goto $label$3 }
	CALL __multf3(($4 + [16]), $1, $2, (int_64)0, (int_64)9222809086901354496)
	$3 = ($3 + [-32766])
	$3 = ( $3 ? [16383] : ((int_32)$3 < (int_32)[16383]) )
	$2 = *((($4 + [16]) + [8]))
	$1 = *($4 + [16])
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$3 > (int_32)[-16383]) ){ goto $label$1 }
	CALL __multf3(($4 + [64]), $1, $2, (int_64)0, (int_64)32088147345014784)
	$2 = *((($4 + [64]) + [8]))
	$1 = *($4 + [64])
	if ( ((int_32)$3 > (int_32)[-32652]) ){ goto $label$2 }
	CALL __multf3(($4 + [48]), $1, $2, (int_64)0, (int_64)32088147345014784)
	$3 = ($3 + [32538])
	$3 = ( $3 ? [-16382] : ((int_32)$3 > (int_32)[-16382]) )
	$2 = *((($4 + [48]) + [8]))
	$1 = *($4 + [48])
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 + [-16383])
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 + [16269])
	
.LABEL $label$1
	CALL __multf3($4, $1, $2, (int_64)0, ((int_64)(CASTING uint_64)(uint_32 ($3 + [16383])) << (int_64)48))
	*($0 + [8]) = *(($4 + [8]))
	*($0) = *($4)
	$global$0 = ($4 + [80])
}

void .FUNC $85 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$5 = ($global$0 - [128])
	$global$0 = $5
	if ( (CALL __eqtf2($3, $4, (int_64)0, (int_64)0) == 0) ){ goto $label$2 }
	$6 = CALL $84($3, $4)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$8 = ($7) & [32767]
	if ( ((int_32)$8) == (int_32)[32767]) ){ goto $label$2 }
	if ( ($6 == 0) ){ goto $label$2 }
	$10 = ((int_64)$4 & (int_64)9223372036854775807)
	$9 = ((int_64)$2 & (int_64)9223372036854775807)
	if ( ((int_32)CALL __letf2($1, $9, $3, $10) <= (int_32)[0]) ){ goto $label$7 }
	$11 = ((CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)48)) & [32767])
	if ( ($8 == 0) ){ goto $label$6 }
	$4 = $1
	if ( $11 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$7
	if ( CALL __netf2($1, $9, $3, $10) ){ goto $label$5 }
	CALL __multf3(($5 + [112]), $1, $2, (int_64)0, (int_64)0)
	$2 = *(($5 + [120]))
	$4 = *($5 + [112])
	goto $label$1 
	
.LABEL $label$6
	CALL __multf3(($5 + [96]), $1, $9, (int_64)0, (int_64)4645181540655955968)
	$9 = *(($5 + [104]))
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$9 >> (uint_64)(int_64)48)) + [-120])
	$4 = *($5 + [96])
	if ( $11 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$4 = $1
	goto $label$1 
	
.LABEL $label$4
	CALL __multf3(($5 + [80]), $3, $10, (int_64)0, (int_64)4645181540655955968)
	$10 = *(($5 + [88]))
	$11 = ((CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)48)) + [-120])
	$3 = *($5 + [80])
	
.LABEL $label$3
	$12 = ((int_64)((int_64)$10 & (int_64)281474976710655) | (int_64)281474976710656)
	$9 = ((int_64)((int_64)$9 & (int_64)281474976710655) | (int_64)281474976710656)
	$13 = (int_64)
	$6 = ((int_64)$13((int_64))($9 - $12) - (CASTING uint_64)(uint_32 ((uint_64)$3 > (uint_64)$4)))) > (int_64)-1)
	$10 = (int_64))($4 - $3)
	if ( ((int_32)$8 <= (int_32)$11) ){ goto $label$10 }
	
.LOOP $label$11:
	if ( (($6 & [1]) == 0) ){ goto $label$13 }
	if ( ((int_64)((int_64)$13 | (int_64)$10) == (int_64)0) ){ goto $label$9 }
	$9 = (uint_64)$10 >> (uint_64)(int_64)63)
	$13 = ((int_64)$13 << (int_64)1)
	goto $label$12 
	
.LABEL $label$13
	$13 = (uint_64)$4 >> (uint_64)(int_64)63)
	$9 = ((int_64)$9 << (int_64)1)
	$10 = $4
	
.LABEL $label$12
	$4 = ((int_64)$10 << (int_64)1)
	$9 = ((int_64)$13 | (int_64)$9)
	$13 = (int_64)
	$6 = ((int_64)$13((int_64))($9 - $12) - (CASTING uint_64)(uint_32 (uint_64)($4 <= $3)))) > (int_64)-1)
	$10 = (int_64))($4 - $3)
	$8 = ($8 + [-1])
	if ( ((int_32)$8 > (int_32)$11) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($6 == 0) ){ goto $label$14 }
	$9 = $13
	$4 = $10
	if ( ((int_64)((int_64)$13 | (int_64)$10) == (int_64)0) ){ goto $label$8 }
	
.LABEL $label$14
	if ( ((uint_64)$9 > (uint_64)(int_64)281474976710655) ){ goto $label$15 }
	
.LOOP $label$16:
	$3 = (uint_64)$4 >> (uint_64)(int_64)63)
	$8 = ($8 + [-1])
	$4 = ((int_64)$4 << (int_64)1)
	$9 = ((int_64)$3 | (int_64)((int_64)$9 << (int_64)1))
	if ( (uint_64)($9 <= (int_64)281474976710656) ){ goto $label$16 }
	
.LABEL $label$15
	$6 = ($7 & [32768])
	if ( ((int_32)$8 <= (int_32)[0]) ){ goto $label$17 }
	$2 = ((int_64)((int_64)$9 & (int_64)281474976710655) | (int_64)((int_64)(CASTING uint_64)(uint_32 ($8 | $6)) << (int_64)48))
	goto $label$1 
	
.LABEL $label$17
	CALL __multf3(($5 + [64]), $4, ((int_64)((int_64)$9 & (int_64)281474976710655) | (int_64)((int_64)(CASTING uint_64)(uint_32 (($8 + [120]) | $6)) << (int_64)48)), (int_64)0, (int_64)4577627546245398528)
	$2 = *(($5 + [72]))
	$4 = *($5 + [64])
	goto $label$1 
	
.LABEL $label$9
	CALL __multf3(($5 + [32]), $1, $2, (int_64)0, (int_64)0)
	$2 = *(($5 + [40]))
	$4 = *($5 + [32])
	goto $label$1 
	
.LABEL $label$8
	CALL __multf3(($5 + [48]), $1, $2, (int_64)0, (int_64)0)
	$2 = *(($5 + [56]))
	$4 = *($5 + [48])
	goto $label$1 
	
.LABEL $label$2
	CALL __multf3(($5 + [16]), $1, $2, $3, $4)
	$3 = *((($5 + [16]) + [8]))
	$4 = *($5 + [16])
	CALL __divtf3($5, $4, $3, $4, $3)
	$2 = *(($5 + [8]))
	$4 = *($5)
	
.LABEL $label$1
	*($0) = $4
	*($0 + [8]) = $2
	$global$0 = ($5 + [128])
}

int_32 .FUNC $84 (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [2] ? [3] : (int_64)(((int_64)$2 | (int_64)$0) == 0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

void .FUNC $83 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	*($0) = $1
	*($0 + [8]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 (((CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)48)) & [32768]) | ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)) & [32767]))) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
}

int_32 .FUNC $82 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $80($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $81 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $79($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_64 .FUNC $72 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC $73 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $75($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $72($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [18080])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [18064]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [18096]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $74($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $70 ()
{
	return [9640]
}

void .FUNC $71 (int_32 $0)
{
}

int_32 .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $95($0, $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $77 (int_32 $0)
{
	int_32 $1
	return $1
}

int_64 .FUNC $74 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC $39 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $101($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $107($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

int_32 .FUNC $36 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $101($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8910])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $107($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $37 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $101($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[3]), [8910])
	CALL memcpy(($4 + [40]), $2, [4])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[4]), [8910])
	CALL memcpy((($4 + [40]) | [4]), ($2 + [4]), [4])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [44])
	$9 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $9), (int_32 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $107($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $78 (int_32 $0)
{
}

int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $32 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [8]) = $1
	CALL require_auth($1)
	*($4 + [7]) = [0]
	CALL $16($0, ($4 + [8]), $2, $3, ($4 + [7]))
	$global$0 = ($4 + [16])
}

void .FUNC $33 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [176])
	$global$0 = $2
	$3 = [0]
	CALL eosio_assert([0], [8214])
	CALL require_auth($1)
	*(($2 + [88])) = [0]
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	$4 = *($0)
	*($2 + [56]) = $4
	*($2 + [64]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)3607749778735104000, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $8(($2 + [56]), $5)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($2 + [56])), [9390])
	
.LABEL $label$1
	$6 = *($3 + [8])
	CALL eosio_assert(((int_64)$6 != (int_64)0), [8576])
	$5 = CALL $98([8338])
	if ( ($5 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8915])
	goto $label$4 
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = (int_64)0
	
.LOOP $label$6:
	$8 = *(($5 + [8337]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [8960])
	
.LABEL $label$7
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$7 = (int_64)0
	
.LABEL $label$2
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9013])
	$4 = ((int_64)$7 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$4 = $7
	$8 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$4 = $7
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $8 ){ goto $label$12 }
	$8 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$8 = [0]
	
.LABEL $label$8
	CALL eosio_assert($8, [9062])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9441])
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($2 + [56])), [9476])
	CALL eosio_assert(((int_64)*($2 + [56]) == (int_64)CALL $fimport$3()), [9522])
	*($3 + [8]) = (int_64)0
	$4 = *($3)
	CALL eosio_assert([1], [9573])
	*($2 + [168]) = (($2 + [112]) + [32])
	*($2 + [164]) = ($2 + [112])
	*($2 + [160]) = ($2 + [112])
	*($2 + [24]) = ($2 + [160])
	*($2 + [100]) = ($3 + [8])
	*($2 + [96]) = $3
	*($2 + [104]) = ($3 + [16])
	*($2 + [108]) = ($3 + [24])
	CALL $10(($2 + [96]), ($2 + [24]))
	CALL db_update_i64(*($3 + [36]), $1, ($2 + [112]), [32])
	$5 = (($2 + [56]) + [16])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$13 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($2 + [96]) = [8477]
	*($2 + [100]) = CALL $98([8477])
	*($2 + [16]) = *($2 + [96])
	$4 = *(CALL $9(($2 + [112]), ($2 + [16])))
	$7 = *($0)
	*($2 + [96]) = [8489]
	*($2 + [100]) = CALL $98([8489])
	*($2 + [8]) = *($2 + [96])
	*($2 + [104]) = *(CALL $9(($2 + [112]), ($2 + [8])))
	*($2 + [96]) = $7
	*(($5 = CALL _Znwj([16]))) = *($2 + [96])
	*(($5 + [8])) = *($2 + [104])
	*($2 + [40]) = $5
	$5 = ($5 + [16])
	*($2 + [48]) = $5
	*($2 + [44]) = $5
	*((($2 + [24]) + [8])) = [0]
	*($2 + [24]) = (int_64)0
	$5 = CALL $98([8592])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$17 }
	*($2 + [24]) = ($5 << [1])
	$8 = (($2 + [24]) | [1])
	if ( $5 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$10 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($2 + [24]) = ($10 | [1])
	*($2 + [32]) = $8
	*($2 + [28]) = $5
	
.LABEL $label$16
	CALL memcpy($8, [8592], $5)
	
.LABEL $label$15
	*(($8 + $5)) = [0]
	$7 = *($2 + [24])
	*($2 + [24]) = (int_64)0
	$5 = *($2 + [32])
	*($2 + [32]) = [0]
	$11 = *($0)
	*(($2 + [136])) = $9
	*(($10 = ($2 + [152]))) = $5
	$5 = ($2 + [48])
	$8 = *($5)
	*($5) = [0]
	*($2 + [112]) = $11
	*($2 + [120]) = $1
	*($2 + [128]) = $6
	*($2 + [144]) = $7
	*($2 + [160]) = *($2 + [40])
	*($2 + [168]) = $8
	*($2 + [40]) = (int_64)0
	CALL $19($4, (int_64)-3617168760277827584, ($2 + [160]), ($2 + [112]))
	if ( ((*($2 + [144]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$18
	$5 = *($2 + [160])
	if ( ($5 == 0) ){ goto $label$19 }
	*($2 + [164]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($2 + [32])))
	
.LABEL $label$20
	$10 = *($2 + [80])
	if ( ($10 == 0) ){ goto $label$21 }
	$3 = ($2 + [84])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$23 }
	
.LOOP $label$24:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$25 }
	CALL _ZdlPv($8)
	
.LABEL $label$25
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$24 }
	$5 = *(($2 + [80]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $10
	
.LABEL $label$22
	*($3) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$21
	$global$0 = ($2 + [176])
	return (unreachable)
	
.LABEL $label$14
	CALL $64(($2 + [24]))
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8887])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $101($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [40]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	CALL $54(($3 + [40]), ($3 + [32]))
	*($5 + [44]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $29(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $107($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $31 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	float_64 $11
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL eosio_assert([0], [8214])
	CALL require_auth($1)
	*((($3 + [88]) + [32])) = [0]
	*($3 + [104]) = (int_64)-1
	*($3 + [112]) = (int_64)0
	$4 = *($0)
	*($3 + [88]) = $4
	*($3 + [96]) = $4
	*((($3 + [48]) + [32])) = [0]
	*($3 + [56]) = $4
	*($3 + [48]) = $4
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	*((($3 + [8]) + [32])) = [0]
	*($3 + [16]) = $4
	*($3 + [8]) = $4
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = CALL $17(($3 + [88]), CALL $fimport$0($4, $4, (int_64)4986958866982895616, (int_64)0))
	CALL eosio_assert(((uint_32)*($5 + [12]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000))), [8377])
	$6 = [0]
	$0 = CALL db_find_i64($4, $4, (int_64)-8527970514705055744, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $13(($3 + [8]), $0)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($3 + [8])), [9390])
	
.LABEL $label$1
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [8548])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)$1), [8548])
	$4 = *($6 + [8])
	$9 = *(($3 + [76]))
	$8 = *(($3 + [72]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$0 = ($9 + [-24])
	$10 = *($0)
	if ( ((int_64)*($10) == (int_64)$4) ){ goto $label$4 }
	$9 = $0
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($3 + [48])), [9390])
	goto $label$2 
	
.LABEL $label$3
	$10 = [0]
	$0 = CALL db_find_i64(*($3 + [48]), *(($3 + [56])), (int_64)3607749778735104000, $4)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$10 = CALL $8(($3 + [48]), $0)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($3 + [48])), [9390])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [9441])
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($3 + [48])), [9476])
	CALL eosio_assert(((int_64)*($3 + [48]) == (int_64)CALL $fimport$3()), [9522])
	$11 = ((float_64)(CASTING float_64)(uint_64 *($10 + [8])) + (float_64)(float_64)5e3)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$7 }
	$4 = (int_64)0
	goto $label$6 
	
.LABEL $label$7
	$4 = (Rounds 0)($11)
	
.LABEL $label$6
	$0 = ($5 + [12])
	*($10 + [8]) = $4
	$4 = *($10)
	CALL eosio_assert([1], [9573])
	$9 = (($3 + [128]) + [32])
	*($3 + [168]) = $9
	*($3 + [164]) = ($3 + [128])
	*($3 + [160]) = ($3 + [128])
	*($3 + [176]) = ($3 + [160])
	*($3 + [188]) = ($10 + [8])
	*($3 + [184]) = $10
	*($3 + [192]) = ($10 + [16])
	*($3 + [196]) = ($10 + [24])
	CALL $10(($3 + [184]), ($3 + [176]))
	CALL db_update_i64(*($10 + [36]), (int_64)0, ($3 + [128]), [32])
	$10 = (($3 + [48]) + [16])
	if ( (uint_64)($4 <= *($10)) ){ goto $label$8 }
	*($10) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	CALL eosio_assert([1], [9441])
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($3 + [88])), [9476])
	CALL eosio_assert(((int_64)*($3 + [88]) == (int_64)CALL $fimport$3()), [9522])
	*($5 + [24]) = ((int_64)*($5 + [24]) + (int_64)-1)
	$4 = *($5)
	CALL eosio_assert([1], [9573])
	*($3 + [168]) = $9
	*($3 + [164]) = ($3 + [128])
	*($3 + [160]) = ($3 + [128])
	*($3 + [176]) = ($3 + [160])
	*($3 + [188]) = ($5 + [8])
	*($3 + [184]) = $5
	*($3 + [192]) = $0
	*($3 + [196]) = ($5 + [16])
	*($3 + [200]) = ($5 + [24])
	CALL $20(($3 + [184]), ($3 + [176]))
	CALL db_update_i64(*($5 + [36]), (int_64)0, ($3 + [128]), [32])
	if ( (uint_64)($4 <= *((($3 + [88]) + [16]))) ){ goto $label$9 }
	*(($3 + [104])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	CALL eosio_assert($7, [9441])
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($3 + [8])), [9476])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [9522])
	$4 = *($6)
	*($3 + [184]) = [8192]
	*($3 + [188]) = CALL $98([8192])
	*($3) = *($3 + [184])
	*($6 + [8]) = *(CALL $9(($3 + [128]), $3))
	CALL eosio_assert(((int_64)$4 == (int_64)*($6)), [9573])
	CALL eosio_assert([1], [9384])
	CALL memcpy(($3 + [128]), $6, [8])
	CALL eosio_assert([1], [9384])
	CALL memcpy((($3 + [128]) | [8]), ($6 + [8]), [8])
	CALL db_update_i64(*($6 + [20]), (int_64)0, ($3 + [128]), [16])
	$0 = (($3 + [8]) + [16])
	if ( (uint_64)($4 <= *($0)) ){ goto $label$10 }
	*($0) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$9 = *($3 + [32])
	if ( ($9 == 0) ){ goto $label$11 }
	$6 = ($3 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$13 }
	
.LOOP $label$14:
	$0 = ($0 + [-24])
	$10 = *($0)
	*($0) = [0]
	if ( ($10 == 0) ){ goto $label$15 }
	CALL _ZdlPv($10)
	
.LABEL $label$15
	if ( ((int_32)$9 != (int_32)$0) ){ goto $label$14 }
	$0 = *(($3 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$0 = $9
	
.LABEL $label$12
	*($6) = $9
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$9 = *($3 + [72])
	if ( ($9 == 0) ){ goto $label$16 }
	$6 = ($3 + [76])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$18 }
	
.LOOP $label$19:
	$0 = ($0 + [-24])
	$10 = *($0)
	*($0) = [0]
	if ( ($10 == 0) ){ goto $label$20 }
	CALL _ZdlPv($10)
	
.LABEL $label$20
	if ( ((int_32)$9 != (int_32)$0) ){ goto $label$19 }
	$0 = *(($3 + [72]))
	goto $label$17 
	
.LABEL $label$18
	$0 = $9
	
.LABEL $label$17
	*($6) = $9
	CALL _ZdlPv($0)
	
.LABEL $label$16
	$9 = *($3 + [112])
	if ( ($9 == 0) ){ goto $label$21 }
	$6 = ($3 + [116])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$23 }
	
.LOOP $label$24:
	$0 = ($0 + [-24])
	$10 = *($0)
	*($0) = [0]
	if ( ($10 == 0) ){ goto $label$25 }
	CALL _ZdlPv($10)
	
.LABEL $label$25
	if ( ((int_32)$9 != (int_32)$0) ){ goto $label$24 }
	$0 = *(($3 + [112]))
	goto $label$22 
	
.LABEL $label$23
	$0 = $9
	
.LABEL $label$22
	*($6) = $9
	CALL _ZdlPv($0)
	
.LABEL $label$21
	$global$0 = ($3 + [208])
}