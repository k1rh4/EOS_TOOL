(data (i32.const 8192) "transfer\00")
(data (i32.const 8201) "string is too long to be a valid name\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8325) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8392) "character is not in allowed character set for names\00")
(data (i32.const 8444) "seed transfer\00")
(data (i32.const 8458) "eosio\00")
(data (i32.const 8464) "eosio.stake\00")
(data (i32.const 8476) "auction ended\00")
(data (i32.const 8490) "wrong asset symbol\00")
(data (i32.const 8509) "below minimum amount\00")
(data (i32.const 8530) "wrong asset contract\00")
(data (i32.const 8551) "The account name supplied is not valid\00")
(data (i32.const 8590) "whitelisting required\00")
(data (i32.const 8612) "singleton does not exist\00")
(data (i32.const 8637) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8688) "error reading iterator\00")
(data (i32.const 8711) "read\00")
(data (i32.const 8716) "auction did not start yet\00")
(data (i32.const 8742) "get\00")
(data (i32.const 8746) "Retrieved a wrong payment row\00")
(data (i32.const 8776) "active\00")
(data (i32.const 8783) "sendtokens\00")
(data (i32.const 8794) "cannot create objects in table of another contract\00")
(data (i32.const 8845) "write\00")
(data (i32.const 8851) "cannot pass end iterator to modify\00")
(data (i32.const 8886) "object passed to modify is not in multi_index\00")
(data (i32.const 8932) "cannot modify objects in table of another contract\00")
(data (i32.const 8983) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9042) "attempt to add asset with different symbol\00")
(data (i32.const 9085) "addition underflow\00")
(data (i32.const 9104) "addition overflow\00")
(data (i32.const 9122) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9174) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9228) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9276) "Savings\00")
(data (i32.const 9284) "payout_cycles_per_user cannot be zero\00")
(data (i32.const 9322) "Cannot find cycle by number\00")
(data (i32.const 9350) "There is nothing to claim for this account\00")
(data (i32.const 9393) "receipt\00")
(data (i32.const 9401) "cannot pass end iterator to erase\00")
(data (i32.const 9435) "cannot increment end iterator\00")
(data (i32.const 9465) "object passed to erase is not in multi_index\00")
(data (i32.const 9510) "cannot erase objects in table of another contract\00")
(data (i32.const 9560) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9613) "DAPP token auction\00")
(import "env" "eosio_exit" (func $fimport$0 (param i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$5 (param i32 i32)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "is_account" (func $fimport$8 (param i64) (result i32)))
(import "env" "memset" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$10 (param i64)))
(import "env" "send_deferred" (func $fimport$11 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$12 (param i32 i32)))
(import "env" "db_get_i64" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "db_update_i64" (func $fimport$15 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$16 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$17 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx128_store" (func $fimport$19 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$21 (param i64 i64 i64) (result i32)))
(import "env" "db_idx128_find_primary" (func $fimport$22 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_update" (func $fimport$23 (param i32 i64 i32)))
(import "env" "abort" (func $fimport$24))
(import "env" "db_idx128_next" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$26 (param i32)))
(import "env" "db_idx128_remove" (func $fimport$27 (param i32)))
(import "env" "memmove" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$29 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$40 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$41 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$44 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$46 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$47 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$48 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $70))
(export "_Znwj" (func $68))
(export "_Znaj" (func $69))
(export "_ZdaPv" (func $71))
(export "_ZnwjSt11align_val_t" (func $72))
(export "_ZnajSt11align_val_t" (func $73))
(export "_ZdlPvSt11align_val_t" (func $74))
(export "_ZdaPvSt11align_val_t" (func $75))
(table $0 6 6 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $11)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18048))
(global $global$2 i32 (i32.const 18048))


int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $40($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $78($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $78($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $76($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9228])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6215770888931901440)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9174])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9174])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $47(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8711])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8711])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8711])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8711])
	CALL memcpy($4, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [8711])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($4 + [8]) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-6215770888931901440, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $47($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $49(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9122])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	$5 = *($5 + [12])
	*(($1 + [32])) = *(($5 + [8]))
	*($1 + [24]) = *($5)
	$6 = $2
	$5 = ($6 + [-48])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($6 + [-8])
	*($3 + [24]) = ($3 + [8])
	$6 = ($1 + [8])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$2 = ($1 + [16])
	*($3 + [40]) = $2
	*($3 + [44]) = ($1 + [24])
	CALL $45(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-6215770888931901440, *(*($0 + [8])), $7, $5, [40])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = ($4 + [8])
	$7 = *($4)
	$0 = *(($0 + [8]))
	$9 = *($0)
	$10 = *($1)
	*($3 + [40]) = *($6)
	*($3 + [32]) = *($2)
	*($1 + [48]) = CALL db_idx128_store($7, (int_64)-6215770888931901440, $9, $10, ($3 + [32]))
	$7 = *($0)
	$9 = *($4)
	$10 = *($1)
	*($3 + [40]) = *($2)
	*($3 + [32]) = *($6)
	*(($1 + [52])) = CALL db_idx128_store($9, (int_64)-6215770888931901439, $7, $10, ($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1 + [16]) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	*($1) = *($3)
	CALL eosio_assert([1], [8845])
	CALL memcpy($2, $1, [8])
	*($2 + [24]) = *($5)
	CALL eosio_assert([1], [8845])
	CALL memcpy(($2 | [8]), ($2 + [24]), [8])
	CALL eosio_assert([1], [8845])
	CALL memcpy(($2 + [16]), ($1 + [16]), [8])
	$6 = *($1 + [16])
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)5156926138060111872, *(*($0 + [8])), $6, $2, [24])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8742])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $34($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8711])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8688])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $86($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $48(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($5 + [48 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $44(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $89($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	$6 = *($4 + [4])
	*($3 + [24]) = *($6 + [8])
	*($3 + [16]) = *($6 + [16])
	if ( (CALL $82(*($4 + [8]), ($3 + [16]), [16]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [48])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx128_find_primary(*($5), *($5 + [8]), (int_64)-6215770888931901440, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [48]) = $6
	
.LABEL $label$2
	CALL db_idx128_update($6, *(*($4 + [20])), ($3 + [16]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	$0 = *($4 + [4])
	*($3 + [24]) = *($0 + [16])
	*($3 + [16]) = *($0 + [8])
	if ( (CALL $82((*($4 + [8]) + [16]), ($3 + [16]), [16]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [52]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx128_find_primary(*($6), *($6 + [8]), (int_64)-6215770888931901439, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [52])) = $0
	
.LABEL $label$4
	CALL db_idx128_update($0, *(*($4 + [20])), ($3 + [16]))
	
.LABEL $label$3
	$global$0 = ($3 + [32])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8845])
	CALL memcpy(*($0 + [4]), $4, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [8845])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [592])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $86($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = CALL memset((($4 + [176]) + [24]), [0], [80])
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = (int_64)0
	*((($4 + [176]) + [80])) = (int_64)0
	*(($4 + [264])) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [164]) = $2
	*($4 + [160]) = $2
	*($4 + [168]) = ($2 + $7)
	*($4 + [384]) = ($4 + [160])
	*($4 + [492]) = (($4 + [176]) + [8])
	*($4 + [496]) = ($4 + [192])
	*($4 + [500]) = $3
	*($4 + [504]) = ($4 + [208])
	*($4 + [508]) = ($4 + [216])
	*($4 + [512]) = ($4 + [224])
	*($4 + [516]) = ($4 + [248])
	*($4 + [520]) = ($4 + [272])
	*($4 + [524]) = ($4 + [274])
	*($4 + [528]) = ($4 + [276])
	*($4 + [488]) = ($4 + [176])
	CALL $19(($4 + [488]), ($4 + [384]))
	*(($3 = (($4 + [112]) + [8]))) = *($4 + [168])
	*($4 + [112]) = *($4 + [160])
	*(($8 = (($4 + [384]) + [8]))) = *($3)
	*($4 + [384]) = *($4 + [112])
	$3 = *($8)
	*((($4 + [488]) + [8])) = $3
	*((($4 + [128]) + [24])) = $3
	*($4 + [128]) = $0
	*($4 + [136]) = $1
	$0 = *($4 + [384])
	*($4 + [144]) = $0
	*($4 + [488]) = $0
	CALL memcpy(($4 + [280]), ($4 + [176]), [104])
	CALL memcpy(($4 + [384]), ($4 + [280]), [104])
	$3 = (($4 + [128]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL memcpy(($4 + [488]), ($4 + [384]), [104])
	CALL memcpy(($4 + [8]), ($4 + [488]), [104])
	CALL void $3((int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $89($2)
	
.LABEL $label$5
	$global$0 = ($4 + [592])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $86($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[1]), [8711])
	CALL memcpy(($4 + [40]), $2, [2])
	*(($4 + [28])) = ($2 + [2])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($8 & [65535])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $89($2)
	
.LABEL $label$5
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	CALL $20(($2 + [8]), $1, $3)
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($2 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdlPv($1)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($2 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $86($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $13(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $14(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $89($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [128])
	$global$0 = $2
	*((($2 + [72]) + [32])) = [0]
	*($2 + [88]) = (int_64)-1
	*($2 + [96]) = (int_64)0
	*($2 + [108]) = [0]
	$3 = *($0)
	*($2 + [72]) = $3
	*($2 + [80]) = $3
	*((($2 + [32]) + [32])) = [0]
	*($2 + [40]) = $3
	*($2 + [32]) = $3
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $15(($2 + [32]), $5)
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)($2 + [32])), [8637])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8612])
	$6 = *($4 + [32])
	$3 = *($4 + [40])
	CALL eosio_assert(((uint_64)CALL $fimport$7() >= (uint_64)$3), [8716])
	$7 = CALL current_time()
	*($2 + [24]) = ($2 + [72])
	*($2 + [120]) = (int_64)0
	*($2 + [112]) = (int_64)0
	$6 = ((uint_64)(int_64))($7 - $3) / (uint_64)((int_64)$6 * (int_64)1000000))
	CALL $21(($2 + [16]), ($2 + [24]), ($2 + [112]))
	if ( ($1 == 0) ){ goto $label$2 }
	$4 = *($2 + [20])
	
.LOOP $label$3:
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((uint_64)*($4 + [8]) >= (uint_64)$6) ){ goto $label$2 }
	CALL $22($0, *($4 + [16]), [0])
	*($2 + [120]) = (int_64)0
	*($2 + [112]) = (int_64)0
	CALL $21(($2 + [8]), ($2 + [24]), ($2 + [112]))
	$3 = *($2 + [8])
	*($2 + [16]) = $3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32))
	$1 = ($1 + [-1])
	if ( ($1 & [65535]) ){ goto $label$3 }
	
.LABEL $label$2
	$0 = *($2 + [56])
	if ( ($0 == 0) ){ goto $label$4 }
	$5 = ($2 + [60])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$7:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	CALL _ZdlPv($1)
	
.LABEL $label$8
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$7 }
	$4 = *(($2 + [56]))
	goto $label$5 
	
.LABEL $label$6
	$4 = $0
	
.LABEL $label$5
	*($5) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$0 = *($2 + [96])
	if ( ($0 == 0) ){ goto $label$9 }
	$5 = ($2 + [100])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$13 }
	CALL _ZdlPv($1)
	
.LABEL $label$13
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$12 }
	$4 = *(($2 + [96]))
	goto $label$10 
	
.LABEL $label$11
	$4 = $0
	
.LABEL $label$10
	*($5) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$9
	$global$0 = ($2 + [128])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8201])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8392])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8325])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8392])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$5 = ($global$0 - [272])
	$global$0 = $5
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$1 }
	$7 = *($4)
	$6 = CALL $83([8444])
	if ( ((int_32)$6 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	if ( (CALL $79($4, [0], [-1], [8444], $6) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($5 + [232]) = [8458]
	*($5 + [236]) = CALL $83([8458])
	*($5 + [64]) = *($5 + [232])
	if ( ((int_64)*(CALL $2(($5 + [128]), ($5 + [64]))) == (int_64)$1) ){ goto $label$1 }
	*($5 + [232]) = [8464]
	*($5 + [236]) = CALL $83([8464])
	*($5 + [56]) = *($5 + [232])
	$7 = CALL $2(($5 + [128]), ($5 + [56]))
	if ( ((int_64)$1 == (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$1 }
	CALL require_auth($1)
	*(($5 + [264])) = [0]
	*($5 + [248]) = (int_64)-1
	*($5 + [256]) = (int_64)0
	$2 = *($0)
	*($5 + [232]) = $2
	*($5 + [240]) = $2
	$7 = [0]
	$6 = CALL db_find_i64($2, $2, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $15(($5 + [232]), $6)
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)($5 + [232])), [8637])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8612])
	CALL memcpy(($5 + [128]), $7, [104])
	$2 = *($5 + [168])
	CALL eosio_assert(((uint_64)CALL $fimport$7() >= (uint_64)$2), [8716])
	$8 = ((uint_64)(int_64))(CALL current_time() - $2) / (uint_64)((int_64)*($5 + [160]) * (int_64)1000000)
	CALL eosio_assert((uint_64)($8) <= *($5 + [152])), [8476])
	$2 = *($3 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)*(($5 + [208]))), [8490])
	$9 = *($3)
	CALL eosio_assert(((int_64)$9 >= (int_64)*($5 + [200])), [8509])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($5 + [216]))), [8530])
	$6 = *($4)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$6 }
	if ( uint_32($6 >> [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( (*(($4 + [4])) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	if ( $7 ){ goto $label$8 }
	$4 = ($4 + [1])
	goto $label$7 
	
.LABEL $label$8
	$4 = *($4 + [8])
	
.LABEL $label$7
	*($5 + [112]) = $4
	*($5 + [116]) = CALL $83($4)
	*($5 + [48]) = *($5 + [112])
	$4 = CALL $2(($5 + [120]), ($5 + [48]))
	CALL eosio_assert(CALL $fimport$8(*($4)), [8551])
	$1 = *($4)
	
.LABEL $label$4
	CALL eosio_assert(CALL $16($0, $1), [8590])
	$10 = *(($3 + [8]))
	*((($5 + [96]) + [8])) = $10
	$11 = *($3)
	*((($5 + [32]) + [8])) = $10
	*($5 + [32]) = $11
	*($5 + [96]) = $11
	CALL $17($0, ($5 + [128]), $8, $1, ($5 + [32]))
	*((($5 + [8]) + [8])) = $2
	$1 = *(($5 + [216]))
	*(($5 + [24])) = $1
	*($5 + [72]) = $9
	*($5 + [80]) = $2
	*($5 + [8]) = $9
	*($5 + [88]) = $1
	CALL $18($0, ($5 + [8]))
	$3 = *($5 + [256])
	if ( ($3 == 0) ){ goto $label$1 }
	$7 = ($5 + [260])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($5 + [256]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $3
	
.LABEL $label$9
	*($7) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($5 + [272])
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL memory()
	*($3 + [96]) = [8192]
	*($3 + [100]) = CALL $83([8192])
	*($3 + [48]) = *($3 + [96])
	CALL $2(($3 + [104]), ($3 + [48]))
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [1]
	*($3 + [40]) = *($3 + [88])
	CALL $4($0, $1, ($3 + [40]))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$4 }
	if ( ((int_64)$2 > (int_64)4921564679018381311) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-5003315193367756800) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4420673558282371072) ){ goto $label$4 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [2]
	*($3 + [16]) = *($3 + [72])
	CALL $6($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$5
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$4 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [3]
	*($3 + [8]) = *($3 + [80])
	CALL $8($1, $1, ($3 + [8]))
	
.LABEL $label$4
	CALL eosio_exit([0])
	
.LABEL $label$3
	*($3 + [60]) = [0]
	*($3 + [56]) = [4]
	*($3 + [32]) = *($3 + [56])
	CALL $10($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$2
	*($3 + [68]) = [0]
	*($3 + [64]) = [5]
	*($3 + [24]) = *($3 + [64])
	CALL $12($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $77(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $77(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8688])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $86($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([120])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [104]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [72])
	*($3 + [64]) = ($5 + [96])
	*($3 + [68]) = ($5 + [98])
	*($3 + [72]) = ($5 + [100])
	CALL $19(($3 + [32]), ($3 + [24]))
	*($5 + [108]) = $1
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)-4417020450001911808
	*($3 + [4]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-4417020450001911808
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $37(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $89($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

int_32 .FUNC $16 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($2 + [72])) = [0]
	*($2 + [56]) = (int_64)-1
	*($2 + [64]) = (int_64)0
	$3 = *($0)
	*($2 + [40]) = $3
	*($2 + [48]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $15(($2 + [40]), $5)
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)($2 + [40])), [8637])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8612])
	$6 = [1]
	$3 = *($4)
	if ( ((int_64)$3 == (int_64)*($0)) ){ goto $label$2 }
	$6 = [0]
	*(($2 + [32])) = [0]
	*($2 + [8]) = $3
	*($2) = $3
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	*($2 + [36]) = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $25($2, $4)
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$2), [8637])
	$6 = ((uint_32)*($4 + [8]) > (uint_32)[70])
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$2 }
	$7 = ($2 + [28])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	if ( ((*($0 + [12]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($0 + [20])))
	
.LABEL $label$7
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	$4 = *(($2 + [24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $5
	
.LABEL $label$3
	*($7) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$5 = *($2 + [64])
	if ( ($5 == 0) ){ goto $label$8 }
	$7 = ($2 + [68])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	CALL _ZdlPv($0)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	$4 = *(($2 + [64]))
	goto $label$9 
	
.LABEL $label$10
	$4 = $5
	
.LABEL $label$9
	*($7) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$8
	$global$0 = ($2 + [80])
	return $6
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = ($global$0 - [224])
	$global$0 = $5
	*($5 + [192]) = $3
	*($5 + [184]) = $2
	*((($5 + [144]) + [32])) = [0]
	*($5 + [160]) = (int_64)-1
	*($5 + [168]) = (int_64)0
	*($5 + [180]) = [0]
	$3 = *($0)
	*($5 + [144]) = $3
	*($5 + [152]) = $3
	*((($5 + [104]) + [32])) = [0]
	*($5 + [112]) = $3
	*($5 + [104]) = $3
	*($5 + [120]) = (int_64)-1
	*($5 + [128]) = (int_64)0
	$6 = CALL db_find_i64($3, $3, (int_64)5156926138060111872, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $26(($5 + [104]), $6)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($5 + [104])), [8637])
	$3 = *($0)
	*($5 + [32]) = $4
	CALL eosio_assert([1], [8851])
	CALL $27(($5 + [104]), $6, $3, ($5 + [32]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *($0)
	*($5 + [36]) = $4
	*($5 + [32]) = ($5 + [184])
	CALL $28(($5 + [16]), ($5 + [104]), $3, ($5 + [32]))
	
.LABEL $label$1
	*($5 + [96]) = ($5 + [144])
	*($5 + [40]) = *($5 + [184])
	$3 = *($5 + [192])
	*($5 + [32]) = $3
	CALL $21(($5 + [16]), ($5 + [96]), ($5 + [32]))
	$6 = *($5 + [20])
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((int_64)(((int_64)((int_64)*($5 + [32]) ^ (int_64)*($6 + [16])) | (int_64)((int_64)*($5 + [40]) ^ (int_64)*($6 + [8]))) == 0) == 0) ){ goto $label$5 }
	$7 = [0]
	if ( ((int_64)*($6 + [8]) != (int_64)*($5 + [184])) ){ goto $label$6 }
	$7 = ((int_64)*($6 + [16]) == (int_64)$3)
	
.LABEL $label$6
	CALL eosio_assert($7, [8746])
	$3 = *($0)
	*($5 + [32]) = $4
	CALL $29(($5 + [144]), $6, $3, ($5 + [32]))
	if ( *($1 + [96]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = *($0)
	*($5 + [44]) = $4
	*($5 + [36]) = ($5 + [184])
	*($5 + [32]) = ($5 + [144])
	*($5 + [40]) = ($5 + [192])
	CALL $30(($5 + [16]), ($5 + [144]), $3, ($5 + [32]))
	if ( (*($1 + [96]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	*($5 + [40]) = (int_64)0
	*($5 + [32]) = (int_64)0
	CALL $21(($5 + [16]), ($5 + [96]), ($5 + [32]))
	if ( ((uint_64)*(*($5 + [20]) + [8]) >= (uint_64)*($5 + [184])) ){ goto $label$3 }
	$3 = CALL current_time()
	*(($5 + [60])) = (int_64)0
	*(($5 + [76])) = (int_64)0
	*(($5 + [84])) = (int_64)0
	*($5 + [44]) = [0]
	*($5 + [48]) = [0]
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [68 align=4]) = (int_64)0
	*($5 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [60])
	$3 = *($0)
	*($5 + [200]) = [8776]
	*($5 + [204]) = CALL $83([8776])
	*($5 + [8]) = *($5 + [200])
	*($5 + [24]) = *(CALL $2(($5 + [16]), ($5 + [8])))
	*($5 + [16]) = $3
	*($5 + [216]) = [8783]
	*($5 + [220]) = CALL $83([8783])
	*($5) = *($5 + [216])
	*($5 + [200]) = *(CALL $2(($5 + [200]), $5))
	*($5 + [216]) = *(($1 + [96]))
	CALL $31(($5 + [68]), ($5 + [16]), $0, ($5 + [200]), ($5 + [216]))
	$3 = *($0)
	$2 = *($5 + [192])
	*($5 + [52]) = *($1 + [98])
	*($5 + [24]) = (int_64)0
	*($5 + [16]) = $2
	CALL $32(($5 + [200]), ($5 + [32]))
	$0 = *($5 + [200])
	CALL send_deferred(($5 + [16]), $3, $0, (*($5 + [204]) - $0), [0])
	$0 = *($5 + [200])
	if ( ($0 == 0) ){ goto $label$7 }
	*($5 + [204]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$7
	CALL $33(($5 + [32]))
	
.LABEL $label$3
	$4 = *($5 + [128])
	if ( ($4 == 0) ){ goto $label$8 }
	$1 = ($5 + [132])
	$0 = *($1)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($5 + [128]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $4
	
.LABEL $label$9
	*($1) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$4 = *($5 + [168])
	if ( ($4 == 0) ){ goto $label$13 }
	$1 = ($5 + [172])
	$0 = *($1)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$15 }
	
.LOOP $label$16:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$17 }
	CALL _ZdlPv($6)
	
.LABEL $label$17
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$16 }
	$0 = *(($5 + [168]))
	goto $label$14 
	
.LABEL $label$15
	$0 = $4
	
.LABEL $label$14
	*($1) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$13
	$global$0 = ($5 + [224])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $86($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*(($3 = ($4 + [104]))) = (int_64)0
	*(($6 = ($4 + [112]))) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [64]) = ($2 + $5)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8711])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [60]) = ($2 + [8])
	$7 = (($4 + [72]) + [8])
	CALL $23(($4 + [56]), $7)
	CALL eosio_assert(((uint_32)(*($4 + [64]) - *($4 + [60])) > (uint_32)[7]), [8711])
	CALL memcpy((($4 + [72]) + [24]), *($4 + [60]), [8])
	$8 = (*($4 + [60]) + [8])
	*($4 + [60]) = $8
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [64]) - $8) > (uint_32)[7]), [8711])
	CALL memcpy(($4 + [24]), *($4 + [60]), [8])
	*($3) = *($4 + [24])
	$3 = (*($4 + [60]) + [8])
	*($4 + [60]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [64]) - $3) > (uint_32)[7]), [8711])
	CALL memcpy($6, *($4 + [60]), [8])
	*($4 + [60]) = (*($4 + [60]) + [8])
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $24(($4 + [144]), ($4 + [72]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $89($2)
	
.LABEL $label$4
	$2 = *($7)
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [84])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	CALL $22($0, $1, [1])
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $86($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8711])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $89($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8711])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8711])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8711])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8711])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $38(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [192])
	$global$0 = $2
	*(($2 + [152])) = [0]
	*($2 + [136]) = (int_64)-1
	*($2 + [144]) = (int_64)0
	$3 = *($0)
	*($2 + [120]) = $3
	*($2 + [128]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $15(($2 + [120]), $5)
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)($2 + [120])), [8637])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8612])
	$3 = *($4 + [16])
	$6 = *($0)
	*($2 + [80]) = [8776]
	*($2 + [84]) = CALL $83([8776])
	*($2 + [8]) = *($2 + [80])
	$7 = *(CALL $2(($2 + [32]), ($2 + [8])))
	$8 = *($1 + [16])
	*($2 + [80]) = [8192]
	*($2 + [84]) = CALL $83([8192])
	*($2) = *($2 + [80])
	$9 = *(CALL $2(($2 + [32]), $2))
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$4 = CALL $83([9276])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$8 }
	*($2 + [16]) = ($4 << [1])
	$5 = (($2 + [16]) | [1])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$10 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($10)
	*($2 + [16]) = ($10 | [1])
	*($2 + [24]) = $5
	*($2 + [20]) = $4
	
.LABEL $label$7
	CALL memcpy($5, [9276], $4)
	
.LABEL $label$6
	*(($5 + $4)) = [0]
	*((($2 + [32]) + [24])) = *(($1 + [8]))
	$4 = (($2 + [16]) + [8])
	*(($2 + [72])) = *($4)
	*($4) = [0]
	*($2 + [40]) = $3
	*($2 + [80]) = $8
	*($2 + [88]) = $9
	*($2 + [32]) = *($0)
	*($2 + [48]) = *($1)
	*($2 + [64]) = *($2 + [16])
	*($2 + [16]) = (int_64)0
	*(($4 = CALL _Znwj([16]))) = $6
	*($4 + [8]) = $7
	*((($2 + [80]) + [36])) = [0]
	$1 = ($4 + [16])
	*((($2 + [80]) + [24])) = $1
	*(($2 + [100])) = $1
	*($2 + [96]) = $4
	*($2 + [108 align=4]) = (int_64)0
	$4 = *($2 + [64])
	$1 = ( *((($2 + [32]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($1 + [32])
	$3 = (CASTING uint_64)(uint_32 $1)
	$1 = ($2 + [108])
	
.LOOP $label$9:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $34($1, $4)
	$1 = *(($2 + [112]))
	$4 = *(($2 + [108]))
	goto $label$10 
	
.LABEL $label$11
	$1 = [0]
	$4 = [0]
	
.LABEL $label$10
	*($2 + [180]) = $4
	*($2 + [176]) = $4
	*($2 + [184]) = $1
	*($2 + [160]) = ($2 + [176])
	*($2 + [168]) = ($2 + [32])
	CALL $35(($2 + [168]), ($2 + [160]))
	CALL $36(($2 + [176]), ($2 + [80]))
	$4 = *($2 + [176])
	CALL send_inline($4, (*($2 + [180]) - $4))
	$4 = *($2 + [176])
	if ( ($4 == 0) ){ goto $label$12 }
	*($2 + [180]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	$4 = *($2 + [108])
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [112])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = *($2 + [96])
	if ( ($4 == 0) ){ goto $label$14 }
	*(($2 + [100])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$14
	if ( (*(($2 + [64])) & [1]) ){ goto $label$16 }
	if ( (*($2 + [16]) & [1]) ){ goto $label$15 }
	goto $label$4 
	
.LABEL $label$16
	CALL _ZdlPv(*(($2 + [72])))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($2 + [24])))
	$0 = *($2 + [144])
	if ( ($0 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL $76(($2 + [16]))
	
.LABEL $label$4
	$0 = *($2 + [144])
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($2 + [192])
	return 
	
.LABEL $label$2
	$5 = ($2 + [148])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$18 }
	
.LOOP $label$19:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$20 }
	CALL _ZdlPv($1)
	
.LABEL $label$20
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$19 }
	$4 = *(($2 + [144]))
	goto $label$17 
	
.LABEL $label$18
	$4 = $0
	
.LABEL $label$17
	*($5) = $0
	CALL _ZdlPv($4)
	$global$0 = ($2 + [192])
	(unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8711])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8711])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8711])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8711])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8711])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8711])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8711])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8711])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8711])
	CALL memcpy(($3 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8711])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8711])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8711])
	CALL memcpy(($3 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[1]), [8711])
	CALL memcpy($3, *($4 + [4]), [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[1]), [8711])
	CALL memcpy($3, *($4 + [4]), [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$0 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[1]), [8711])
	CALL memcpy($0, *($4 + [4]), [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$global$0 = ($2 + [16])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [8794])
	*(($5 = CALL _Znwj([120])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [104]) = $1
	$5 = CALL memcpy($5, *($3), [102])
	*($4 + [112]) = ($4 + [102])
	*($4 + [108]) = $4
	*($4 + [104]) = $4
	*($4 + [120]) = ($4 + [104])
	*($4 + [132]) = ($5 + [8])
	*($4 + [128]) = $5
	*($4 + [136]) = ($5 + [16])
	*($4 + [140]) = ($5 + [24])
	*($4 + [144]) = ($5 + [32])
	*($4 + [148]) = ($5 + [40])
	*($4 + [152]) = ($5 + [48])
	*($4 + [156]) = ($5 + [72])
	*($4 + [160]) = ($5 + [96])
	*($4 + [164]) = ($5 + [98])
	*($4 + [168]) = ($5 + [100])
	CALL $59(($4 + [128]), ($4 + [120]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4417020450001911808, $2, (int_64)-4417020450001911808, $4, [102])
	*($5 + [108]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4417020450001911808) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-4417020450001911807
	
.LABEL $label$1
	*($4 + [128]) = $5
	*($4) = (int_64)-4417020450001911808
	*($4 + [104]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-4417020450001911808
	*($3 + [16]) = $6
	*($4 + [128]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $37(($1 + [24]), ($4 + [128]), $4, ($4 + [104]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [128])
	*($4 + [128]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [176])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), ($3 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), ($3 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[1]), [8845])
	CALL memcpy(*($4 + [4]), $3, [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[1]), [8845])
	CALL memcpy(*($4 + [4]), $3, [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$0 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[1]), [8845])
	CALL memcpy(*($4 + [4]), $0, [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8845])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8845])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8845])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8845])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8845])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8845])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8845])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8845])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8845])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $54(CALL $55($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8845])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8845])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $54($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8845])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8845])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $80($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8845])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8845])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8886])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [8932])
	$1 = CALL memcpy($1, *($3), [102])
	CALL eosio_assert([1], [8983])
	*($4 + [112]) = ($4 + [102])
	*($4 + [108]) = $4
	*($4 + [104]) = $4
	*($4 + [120]) = ($4 + [104])
	*($4 + [132]) = ($1 + [8])
	*($4 + [128]) = $1
	*($4 + [136]) = ($1 + [16])
	*($4 + [140]) = ($1 + [24])
	*($4 + [144]) = ($1 + [32])
	*($4 + [148]) = ($1 + [40])
	*($4 + [152]) = ($1 + [48])
	*($4 + [156]) = ($1 + [72])
	*($4 + [160]) = ($1 + [96])
	*($4 + [164]) = ($1 + [98])
	*($4 + [168]) = ($1 + [100])
	CALL $59(($4 + [128]), ($4 + [120]))
	CALL db_update_i64(*($1 + [108]), $2, $4, [102])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4417020450001911808) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-4417020450001911807
	
.LABEL $label$1
	$global$0 = ($4 + [176])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8845])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $56(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [144])
	$global$0 = $4
	*($4 + [128]) = $2
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8886])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [8932])
	$2 = *($1 + [16])
	*((($4 + [96]) + [24])) = $2
	$5 = *($1 + [8])
	*($4 + [104]) = $5
	*($4 + [96]) = $2
	*($4 + [112]) = $5
	$2 = *($1)
	*($4 + [88]) = $2
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [9042])
	$5 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9085])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [9104])
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [8983])
	*($4 + [80]) = ($4 + [40])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [136]) = ($4 + [72])
	*($4 + [52]) = ($1 + [8])
	*($4 + [48]) = $1
	*($4 + [56]) = ($1 + [16])
	*($4 + [60]) = ($1 + [24])
	CALL $45(($4 + [48]), ($4 + [136]))
	CALL db_update_i64(*($1 + [44]), *($4 + [128]), $4, [40])
	$3 = ($0 + [36])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [52]) = $1
	*($4 + [48]) = $0
	*($4 + [60]) = $1
	*($4 + [56]) = ($4 + [96])
	*($4 + [64]) = ($4 + [88])
	*($4 + [68]) = ($4 + [128])
	*($4 + [136]) = ($4 + [48])
	CALL $46(($4 + [136]), $3, ($3 + [1]))
	$global$0 = ($4 + [144])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [8794])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [24]) = $1
	CALL $41(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3 + [16])
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $42(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8845])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8845])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8845])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)-6215770888931901440, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [8637])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $47($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)-6215770888931901440, $6))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [8637])
	
.LABEL $label$2
	*(($4 + [48])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)$0), [8637])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $15($0, $4)
	CALL eosio_assert(((int_32)*($4 + [104]) == (int_32)$0), [8637])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [8851])
	CALL $57($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $58($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8742])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $67($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [8711])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	float_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$3 = ($global$0 - [336])
	$global$0 = $3
	$4 = [0]
	*((($3 + [280]) + [32])) = [0]
	*($3 + [296]) = (int_64)-1
	*($3 + [304]) = (int_64)0
	*($3 + [316]) = [0]
	$5 = *($0)
	*($3 + [280]) = $5
	*($3 + [288]) = $5
	*((($3 + [240]) + [32])) = [0]
	*($3 + [248]) = $5
	*($3 + [240]) = $5
	*($3 + [256]) = (int_64)-1
	*($3 + [264]) = (int_64)0
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $15(($3 + [240]), $7)
	CALL eosio_assert(((int_32)*($6 + [104]) == (int_32)($3 + [240])), [8637])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8612])
	$8 = *(($6 + [64]))
	$9 = *(($6 + [56]))
	$10 = *($6 + [48])
	$11 = *($6 + [32])
	$12 = *($6 + [100])
	$5 = *($6 + [40])
	CALL eosio_assert(((uint_64)CALL $fimport$7() >= (uint_64)$5), [8716])
	$13 = CALL current_time()
	*((($3 + [200]) + [32])) = [0]
	*($3 + [216]) = (int_64)-1
	*($3 + [224]) = (int_64)0
	$14 = *($0)
	*($3 + [200]) = $14
	*($3 + [208]) = $14
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [9284])
	*($3 + [192]) = [0]
	*($3 + [184]) = (int_64)0
	*($3 + [176]) = ($3 + [280])
	*($3 + [56]) = $1
	*($3 + [48]) = (int_64)0
	$14 = ((uint_64)(int_64))($13 - $5) / (uint_64)((int_64)$11 * (int_64)1000000))
	CALL $60(($3 + [168]), ($3 + [176]), ($3 + [48]))
	$15 = (float_64)0
	if ( ($12 == 0) ){ goto $label$5 }
	$6 = *($3 + [172])
	if ( ($6 == 0) ){ goto $label$5 }
	$15 = (float_64)0
	$16 = ($3 + [228])
	$17 = ($3 + [224])
	$18 = (($3 + [200]) + [8])
	$4 = [0]
	
.LOOP $label$6:
	if ( ((int_64)*($6 + [16]) != (int_64)$1) ){ goto $label$5 }
	if ( ((uint_64)*($6 + [8]) >= (uint_64)$14) ){ goto $label$5 }
	$5 = *($6 + [8])
	$4 = *($16)
	$19 = *($17)
	if ( ((int_32)$19 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$10:
	$6 = ($4 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7 + [16]) == (int_64)$5) ){ goto $label$9 }
	$4 = $6
	if ( ((int_32)$19 != (int_32)$6) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$19 == (int_32)$4) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [200])), [8637])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$6 = CALL db_find_i64(*($3 + [200]), *($18), (int_64)5156926138060111872, $5)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $26(($3 + [200]), $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [200])), [8637])
	
.LABEL $label$7
	$12 = ($12 + [-1])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9322])
	$6 = *($3 + [172])
	$4 = ($6 + [8])
	$19 = *($3 + [188])
	if ( ((uint_32)$19 >= (uint_32)*((($3 + [184]) + [8]))) ){ goto $label$12 }
	*($19) = *($4)
	*($3 + [188]) = ($19 + [8])
	goto $label$11 
	
.LABEL $label$12
	CALL $61(($3 + [184]), $4)
	$6 = *($3 + [172])
	
.LABEL $label$11
	$5 = *($7)
	$11 = *($6 + [24])
	$13 = *($3 + [168])
	*($3 + [48]) = $13
	$6 = (CASTING uint_32)(uint_64 (uint_64)$13 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [9401])
	CALL $62(($3 + [48]))
	CALL $63(*($3 + [176]), $6)
	$13 = *($3 + [48])
	*($3 + [168]) = $13
	$15 = ((float_64)$15 + (float_64)((float_64)(CASTING float_64)(int_64 ((int_64)$11 * (int_64)$10)) / (float_64)(CASTING float_64)(int_64 $5)))
	if ( (($12 & [65535]) == 0) ){ goto $label$4 }
	$4 = [1]
	$6 = (CASTING uint_32)(uint_64 (uint_64)$13 >> (uint_64)(int_64)32)
	if ( $6) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$4 = [1]
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert($4, [9350])
	
.LABEL $label$2
	if ( ((float_64)(float_64)|$15| < (float_64)(float_64)9223372036854775808) ){ goto $label$15 }
	$5 = (int_64)-9223372036854775808
	if ( ((int_64)-9223372036854775808 >= (int_64)1) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$5 = (Rounds 0)($15)
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$13 }
	
.LABEL $label$14
	*(($3 + [32])) = $9
	*(($3 + [40])) = $8
	*($3 + [152]) = $9
	*($3 + [144]) = $5
	*($3 + [160]) = $8
	*($3 + [24]) = $5
	CALL $64($0, $1, ($3 + [24]))
	
.LABEL $label$13
	$11 = *($0)
	*($3 + [104]) = [8776]
	*($3 + [108]) = CALL $83([8776])
	*($3 + [16]) = *($3 + [104])
	$13 = *(CALL $2(($3 + [48]), ($3 + [16])))
	$14 = *($0)
	*($3 + [104]) = [9393]
	*($3 + [108]) = CALL $83([9393])
	*($3 + [8]) = *($3 + [104])
	$10 = *(CALL $2(($3 + [48]), ($3 + [8])))
	*((($3 + [48]) + [16])) = [0]
	*($3 + [48]) = $1
	*($3 + [56]) = (int_64)0
	$6 = (*($3 + [188]) - *($3 + [184]))
	if ( ($6 == 0) ){ goto $label$17 }
	$7 = int_32($6 >> [3])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$16 }
	$6 = CALL _Znwj($6)
	*(($3 + [56])) = $6
	*(($4 = ($3 + [60]))) = $6
	*(($3 + [64])) = ($6 + ($7 << [3]))
	$19 = *($3 + [184])
	$7 = (*($3 + [188]) - $19)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$17 }
	CALL memcpy($6, $19, $7)
	*($4) = (*($4) + $7)
	
.LABEL $label$17
	*(($3 + [80])) = $9
	*(($3 + [88])) = $8
	*(($4 = ($3 + [128]))) = [0]
	*($3 + [72]) = $5
	*($3 + [104]) = $14
	*($3 + [112]) = $10
	*($3 + [120]) = (int_64)0
	*(($6 = CALL _Znwj([16]))) = $11
	*($6 + [8]) = $13
	$7 = ($6 + [16])
	*($4) = $7
	*(($3 + [124])) = $7
	*($3 + [120]) = $6
	CALL $65(($3 + [132]), ($3 + [48]))
	CALL $36(($3 + [320]), ($3 + [104]))
	$6 = *($3 + [320])
	CALL send_inline($6, (*($3 + [324]) - $6))
	$6 = *($3 + [320])
	if ( ($6 == 0) ){ goto $label$18 }
	*($3 + [324]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$18
	$6 = *($3 + [132])
	if ( ($6 == 0) ){ goto $label$19 }
	*(($3 + [136])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$6 = *($3 + [120])
	if ( ($6 == 0) ){ goto $label$20 }
	*(($3 + [124])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$20
	$6 = *($3 + [56])
	if ( ($6 == 0) ){ goto $label$21 }
	*(($3 + [60])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$21
	$6 = *($3 + [184])
	if ( ($6 == 0) ){ goto $label$22 }
	*($3 + [188]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$22
	$7 = *($3 + [224])
	if ( ($7 == 0) ){ goto $label$23 }
	$19 = ($3 + [228])
	$6 = *($19)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$25 }
	
.LOOP $label$26:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$27 }
	CALL _ZdlPv($4)
	
.LABEL $label$27
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$26 }
	$6 = *(($3 + [224]))
	goto $label$24 
	
.LABEL $label$25
	$6 = $7
	
.LABEL $label$24
	*($19) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$23
	$7 = *($3 + [264])
	if ( ($7 == 0) ){ goto $label$28 }
	$19 = ($3 + [268])
	$6 = *($19)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$30 }
	
.LOOP $label$31:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$32 }
	CALL _ZdlPv($4)
	
.LABEL $label$32
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$31 }
	$6 = *(($3 + [264]))
	goto $label$29 
	
.LABEL $label$30
	$6 = $7
	
.LABEL $label$29
	*($19) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$28
	$7 = *($3 + [304])
	if ( ($7 == 0) ){ goto $label$33 }
	$19 = ($3 + [308])
	$6 = *($19)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$35 }
	
.LOOP $label$36:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$37 }
	CALL _ZdlPv($4)
	
.LABEL $label$37
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$36 }
	$6 = *(($3 + [304]))
	goto $label$34 
	
.LABEL $label$35
	$6 = $7
	
.LABEL $label$34
	*($19) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$33
	$global$0 = ($3 + [336])
	return (unreachable)
	
.LABEL $label$16
	CALL $80(($3 + [56]))
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8688])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $86($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([40]))) = (int_64)0
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [28]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8711])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [8711])
	CALL memcpy(($5 + [8]), ($2 + [8]), [1])
	*($3 + [36]) = ($2 + [9])
	CALL $38(($3 + [32]), ($5 + [12]))
	CALL eosio_assert(((uint_32)(*($3 + [40]) - *($3 + [36])) > (uint_32)[3]), [8711])
	CALL memcpy(($5 + [24]), *($3 + [36]), [4])
	*($5 + [32]) = $1
	*($5 + [36]) = [-1]
	*($3 + [24]) = $5
	*($3 + [36]) = (*($3 + [36]) + [4])
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $39(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $89($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [20])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [128])
	$global$0 = $2
	*($2 + [48]) = (int_64)0
	$3 = [0]
	*($2 + [56]) = [0]
	$4 = *($1)
	$5 = (*(($1 + [12])) - *($1 + [8]))
	if ( ($5 == 0) ){ goto $label$6 }
	$3 = int_32($5 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$2 }
	$5 = CALL _Znwj($5)
	*((($2 + [48]) + [8])) = ($5 + ($3 << [3]))
	*($2 + [48]) = $5
	*($2 + [52]) = $5
	$6 = *(($1 + [8]))
	$3 = (*(($1 + [12])) - $6)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $6, $3)
	$3 = ($5 + $3)
	*($2 + [52]) = $3
	goto $label$4 
	
.LABEL $label$6
	$5 = [0]
	$7 = [0]
	$8 = [0]
	goto $label$3 
	
.LABEL $label$5
	$3 = $5
	
.LABEL $label$4
	$7 = $5
	$8 = $5
	
.LABEL $label$3
	*(($6 = (($2 + [24]) + [16]))) = *(($1 + [40]))
	*(($9 = (($2 + [24]) + [8]))) = *(($1 + [32]))
	*($2 + [24]) = *($1 + [24])
	*((($2 + [64]) + [16])) = *($6)
	*((($2 + [64]) + [8])) = *($9)
	*($2 + [64]) = *($2 + [24])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$6 = (*($0) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($6) + $1))
	
.LABEL $label$7
	*($2 + [120]) = [0]
	*($2 + [112]) = (int_64)0
	$0 = ($3 - $8)
	if ( ($0 == 0) ){ goto $label$8 }
	$8 = int_32($0 >> [3])
	if ( ((uint_32)$8 >= (uint_32)[536870912]) ){ goto $label$1 }
	$0 = CALL _Znwj($0)
	*(($2 + [120])) = ($0 + ($8 << [3]))
	*($2 + [112]) = $0
	*($2 + [116]) = $0
	$3 = ($3 - $7)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($0, $5, $3)
	*($2 + [116]) = ($0 + $3)
	
.LABEL $label$8
	$10 = *((($2 + [64]) + [16]))
	*((($2 + [88]) + [16])) = $10
	$11 = *((($2 + [64]) + [8]))
	*((($2 + [88]) + [8])) = $11
	*(($2 + [8])) = $11
	*(($2 + [16])) = $10
	$10 = *($2 + [64])
	*($2) = $10
	*($2 + [88]) = $10
	CALL void $6((int_32 $4), (int_64 ($2 + [112])), (int_32 $2), (int_32 $1))
	$1 = *($2 + [112])
	if ( ($1 == 0) ){ goto $label$9 }
	*($2 + [116]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2 + [48])
	if ( ($1 == 0) ){ goto $label$10 }
	*($2 + [52]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [128])
	return (unreachable)
	
.LABEL $label$2
	CALL $80(($2 + [48]))
	
.LABEL $label$1
	CALL $80(($2 + [112]))
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8886])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [8932])
	$5 = *($1 + [16])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($1 + [8])), [9042])
	$6 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9085])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9104])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1 + [16])), [8983])
	CALL eosio_assert([1], [8845])
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [8845])
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL eosio_assert([1], [8845])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8688])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $86($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8711])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8711])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	*($5 + [8]) = *($3 + [24])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8711])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5 + [16])
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $42(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $89($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $86($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9632])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $86($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [8]
	$4 = ($1 + [8])
	$6 = *($1 + [8])
	$5 = *(($1 + [12]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-8]) + $3)
	
.LABEL $label$2
	$3 = ($3 + [24])
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $34($0, $3)
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$3 = [0]
	
.LABEL $label$3
	*($2 + [8]) = $3
	*($2 + [16]) = $5
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[7]), [8845])
	CALL memcpy($3, $1, [8])
	*($2 + [12]) = ($3 + [8])
	CALL $66(($2 + [8]), $4)
	CALL eosio_assert(((int_32)(*($2 + [16]) - *($2 + [12])) > (int_32)[7]), [8845])
	CALL memcpy(*($2 + [12]), ($1 + [24]), [8])
	$3 = (*($2 + [12]) + [8])
	*($2 + [12]) = $3
	*($2 + [24]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($2 + [16]) - $3) > (int_32)[7]), [8845])
	CALL memcpy(*($2 + [12]), ($2 + [24]), [8])
	$3 = (*($2 + [12]) + [8])
	*($2 + [12]) = $3
	CALL eosio_assert(((int_32)(*($2 + [16]) - $3) > (int_32)[7]), [8845])
	CALL memcpy(*($2 + [12]), ($1 + [40]), [8])
	$global$0 = ($2 + [32])
}

void .FUNC $64 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($3 + [152])) = [0]
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	$4 = *($0)
	*($3 + [120]) = $4
	*($3 + [128]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $15(($3 + [120]), $6)
	CALL eosio_assert(((int_32)*($5 + [104]) == (int_32)($3 + [120])), [8637])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8612])
	$4 = *($5 + [8])
	$7 = *($0)
	*($3 + [80]) = [8776]
	*($3 + [84]) = CALL $83([8776])
	*($3 + [8]) = *($3 + [80])
	$8 = *(CALL $2(($3 + [32]), ($3 + [8])))
	$9 = *($2 + [16])
	*($3 + [80]) = [8192]
	*($3 + [84]) = CALL $83([8192])
	*($3) = *($3 + [80])
	$10 = *(CALL $2(($3 + [32]), $3))
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	$5 = CALL $83([9613])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [16]) = ($5 << [1])
	$0 = (($3 + [16]) | [1])
	if ( $5 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$6 = (($5 + [16]) & [-16])
	$0 = CALL _Znwj($6)
	*($3 + [16]) = ($6 | [1])
	*($3 + [24]) = $0
	*($3 + [20]) = $5
	
.LABEL $label$7
	CALL memcpy($0, [9613], $5)
	
.LABEL $label$6
	*(($0 + $5)) = [0]
	*((($3 + [32]) + [24])) = *(($2 + [8]))
	$5 = (($3 + [16]) + [8])
	*(($3 + [72])) = *($5)
	*($5) = [0]
	*($3 + [40]) = $1
	*($3 + [32]) = $4
	*($3 + [80]) = $9
	*($3 + [88]) = $10
	*($3 + [48]) = *($2)
	*($3 + [64]) = *($3 + [16])
	*($3 + [16]) = (int_64)0
	*(($5 = CALL _Znwj([16]))) = $7
	*($5 + [8]) = $8
	*((($3 + [80]) + [36])) = [0]
	$2 = ($5 + [16])
	*((($3 + [80]) + [24])) = $2
	*(($3 + [100])) = $2
	*($3 + [96]) = $5
	*($3 + [108 align=4]) = (int_64)0
	$5 = *($3 + [64])
	$2 = ( *((($3 + [32]) + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($2 + [32])
	$4 = (CASTING uint_64)(uint_32 $2)
	$2 = ($3 + [108])
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$9 }
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $34($2, $5)
	$2 = *(($3 + [112]))
	$5 = *(($3 + [108]))
	goto $label$10 
	
.LABEL $label$11
	$2 = [0]
	$5 = [0]
	
.LABEL $label$10
	*($3 + [180]) = $5
	*($3 + [176]) = $5
	*($3 + [184]) = $2
	*($3 + [160]) = ($3 + [176])
	*($3 + [168]) = ($3 + [32])
	CALL $35(($3 + [168]), ($3 + [160]))
	CALL $36(($3 + [176]), ($3 + [80]))
	$5 = *($3 + [176])
	CALL send_inline($5, (*($3 + [180]) - $5))
	$5 = *($3 + [176])
	if ( ($5 == 0) ){ goto $label$12 }
	*($3 + [180]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$12
	$5 = *($3 + [108])
	if ( ($5 == 0) ){ goto $label$13 }
	*(($3 + [112])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$13
	$5 = *($3 + [96])
	if ( ($5 == 0) ){ goto $label$14 }
	*(($3 + [100])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$14
	if ( (*(($3 + [64])) & [1]) ){ goto $label$16 }
	if ( (*($3 + [16]) & [1]) ){ goto $label$15 }
	goto $label$4 
	
.LABEL $label$16
	CALL _ZdlPv(*(($3 + [72])))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($3 + [24])))
	$0 = *($3 + [144])
	if ( ($0 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL $76(($3 + [16]))
	
.LABEL $label$4
	$0 = *($3 + [144])
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$2
	$6 = ($3 + [148])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$20 }
	CALL _ZdlPv($2)
	
.LABEL $label$20
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$19 }
	$5 = *(($3 + [144]))
	goto $label$17 
	
.LABEL $label$18
	$5 = $0
	
.LABEL $label$17
	*($6) = $0
	CALL _ZdlPv($5)
	$global$0 = ($3 + [192])
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $80($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8845])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [8845])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $80($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)-6215770888931901439, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [8637])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $47($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)-6215770888931901440, $6))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [8637])
	
.LABEL $label$2
	*(($4 + [52])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9465])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [9510])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9560])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [44]))
	$6 = *(($1 + [48]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-6215770888931901440, $2, *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx128_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [52]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-6215770888931901439, $2, *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx128_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

int_32 .FUNC $62 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9435])
	$2 = *($0 + [4])
	$3 = *(($2 + [52]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx128_find_primary(*($3), *($3 + [8]), (int_64)-6215770888931901439, $1, *($2))
	*((*(($0 + [4])) + [52])) = $3
	
.LABEL $label$1
	*($1) = (int_64)0
	$4 = CALL db_idx128_next($3, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1)
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [8637])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $47($6, CALL $fimport$4(*($6), *($6 + [8]), (int_64)-6215770888931901440, $5))
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [8637])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [52])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $89 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18036])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17844]
	$3 = (((int_32)$1 * (int_32)[12]) + [17844])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9644]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9648])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9644]) = [1]
	$2 = ($2 << [16])
	*([0] + [9648]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9648])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9648]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9644]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9644]) = [1]
	$3 = ($3 << [16])
	*([0] + [9648]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9648])
	
.LABEL $label$10
	*([0] + [9648]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $88($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8239])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $86 (int_32 $0)
{
	return CALL $87([9652], $0)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $86($1)
	
.LABEL $label$2
	*(CALL $81()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $86(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $89($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $81())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $85($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $83 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $81 ()
{
	return [9636]
}

void .FUNC $80 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $84(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9632])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $84(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $89($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $76 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $89($0)
	
.LABEL $label$1
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [20])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $34($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8845])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8845])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $54(CALL $55($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $82(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $50($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $34($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $51($2, $1)
	CALL $53(CALL $52(CALL $52($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [8794])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = $1
	CALL $43(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $44(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $34(($6 + [28]), [2])
	$2 = *($6 + [28])
	CALL eosio_assert(((int_32)(*(($6 + [32])) - $2) > (int_32)[1]), [8845])
	CALL memcpy($2, $4, [2])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}