(data (i32.const 8232) "failed to allocate pages\00unexpected error in fixed_bytes constructor\00")
(data (i32.const 8304) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 8384) "%d\00DAPP\00")
(data (i32.const 8400) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 8416) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 8432) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 8448) "Wed Oct 30 17:10:32 2019\00")
(data (i32.const 8473) "orasettings %.\00")
(data (i32.const 8488) "does not exist\00")
(data (i32.const 8503) "cant modify listing date\00")
(data (i32.const 8528) "\0d\ncancel: %, create: %\00")
(data (i32.const 8551) "NUT\00")
(data (i32.const 8555) "Wrong asset: %\00")
(data (i32.const 8570) "Wrong quantity: %\00")
(data (i32.const 8588) "subscribe\00")
(data (i32.const 8598) "Wrong memo value: %\00")
(data (i32.const 8618) "Wrong contract: %\00")
(data (i32.const 8636) "Unsubscribe % more that current %.\00")
(data (i32.const 8671) "unsubscribe\00")
(data (i32.const 8683) "\0d\ncontract: %, update: %, rate: %.\00")
(data (i32.const 8718) "USD\00")
(data (i32.const 8722) "rates does not exists for symbol: \'%\'.\00")
(data (i32.const 8761) "last_update for % is in the future\00")
(data (i32.const 8796) "\0d\nelapsed: %\00")
(data (i32.const 8809) "USD rate is out of date\00")
(data (i32.const 8833) "rate % is wrong.\00")
(data (i32.const 8850) "rate % is equal zero.\00")
(data (i32.const 8872) "\0d\nusd_rate: %, parsed: %\00")
(data (i32.const 8897) "Unsupported price type: %\00")
(data (i32.const 8923) "\0d\nparsed: %, setting rate: %\00")
(data (i32.const 8952) "\0d\nrateset hasn\'t succeded\00")
(data (i32.const 8978) "\0d\nemplace rate: %\00")
(data (i32.const 8996) "Unsupported source: %\00")
(data (i32.const 9018) "\0d\nchange rate: % => %\00")
(data (i32.const 9040) "\0d\nemplace query\00")
(data (i32.const 9056) "\0d\nchange query\00")
(data (i32.const 9071) "unknown symbol %.\00")
(data (i32.const 9089) "\0d\nnosuitable auth is found\00")
(data (i32.const 9116) "\0d\nquery_id: %\00")
(data (i32.const 9130) "query_id cannot be empty\00")
(data (i32.const 9155) "\0d\noraqueries: {checksum: %,asset_symbol: %}.\00")
(data (i32.const 9200) "\0d\nquery_id % is not found\00")
(data (i32.const 9226) "symbol % does not exists in oraqueries.\00")
(data (i32.const 9266) "\0d\nquery: %\00")
(data (i32.const 9277) "\0d\nelapsed(%) = curr_now(%) - query_executed_at(%)\00")
(data (i32.const 9327) "\0d\nSuch query is already running\00")
(data (i32.const 9359) "URL\00")
(data (i32.const 9363) "Bad query checksum. Try again later\00")
(data (i32.const 9399) "\0d\nquery_checksum: %\00")
(data (i32.const 9419) "\0d\ncancel: %, create: %, action: %, interval: %, delay: %.\00")
(data (i32.const 9477) "\0d\ncancel: %, create: %, action: %, symbol: %\00")
(data (i32.const 9522) "\0d\ntable datapoints(delphioracle) for eosusd is empty.\00")
(data (i32.const 9576) "\0d\ndelphioracle median: % (%).\00")
(data (i32.const 9606) "\0d\ntable datapoints(delphioracle) for eosnut is empty.\00")
(data (i32.const 9660) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9709) "invalid symbol name\00")
(data (i32.const 9729) "write\00")
(data (i32.const 9735) "% %.\00")
(data (i32.const 9740) "need to set up\00")
(data (i32.const 9755) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9806) "error reading iterator\00")
(data (i32.const 9829) "read\00")
(data (i32.const 9834) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9867) "attempt to add asset with different symbol\00")
(data (i32.const 9910) "addition underflow\00")
(data (i32.const 9929) "addition overflow\00")
(data (i32.const 9947) "price_type value out of range\00")
(data (i32.const 9977) "string is too long to be a valid symbol_code\00")
(data (i32.const 10022) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 10075) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10129) "cannot pass end iterator to erase\00")
(data (i32.const 10163) "cannot increment end iterator\00")
(data (i32.const 10193) "object passed to erase is not in multi_index\00")
(data (i32.const 10238) "cannot erase objects in table of another contract\00")
(data (i32.const 10288) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10341) "cannot create objects in table of another contract\00")
(data (i32.const 10392) "cannot pass end iterator to modify\00")
(data (i32.const 10427) "object passed to modify is not in multi_index\00")
(data (i32.const 10473) "cannot modify objects in table of another contract\00")
(data (i32.const 10524) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10583) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10642) "unexpected error in fixed_bytes constructor\00")
(data (i32.const 10686) "get\00")
(data (i32.const 0) "\c8)\00\00")
(import "env" "send_deferred" (func $fimport$0 (param i32 i64 i32 i32 i32)))
(import "env" "abort" (func $fimport$1))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memset" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$6 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$7 (param i32 i32)))
(import "env" "__multf3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$9 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$11 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$12 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$16 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$17 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$19 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$20 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "__floatditf" (func $fimport$24 (param i32 i64)))
(import "env" "__fixtfdi" (func $fimport$25 (param i64 i64) (result i64)))
(import "env" "require_auth" (func $fimport$26 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$28 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$29 (result i64)))
(import "env" "db_remove_i64" (func $fimport$30 (param i32)))
(import "env" "db_find_i64" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_store_i64" (func $fimport$32 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$33 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$34 (param i32 i32) (result i32)))
(import "env" "set_proposed_producers" (func $fimport$35 (param i32 i32) (result i64)))
(import "env" "current_time" (func $fimport$36 (result i64)))
(import "env" "get_active_producers" (func $fimport$37 (param i32 i32) (result i32)))
(import "env" "cancel_deferred" (func $fimport$38 (param i32) (result i32)))
(import "env" "prints" (func $fimport$39 (param i32)))
(import "env" "send_inline" (func $fimport$40 (param i32 i32)))
(import "env" "require_recipient" (func $fimport$41 (param i64)))
(import "env" "transaction_size" (func $fimport$42 (result i32)))
(import "env" "assert_sha256" (func $fimport$43 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$44 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$45 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$46 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$47 (param i32 i32 i32)))
(import "env" "__ashlti3" (func $fimport$48 (param i32 i64 i64 i32)))
(import "env" "sha1" (func $fimport$49 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$50 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$51 (param i32 i32 i32)))
(import "env" "recover_key" (func $fimport$52 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$53 (param i32 i32 i32 i32 i32)))
(import "env" "printhex" (func $fimport$54 (param i32 i32)))
(import "env" "tapos_block_num" (func $fimport$55 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$56 (result i32)))
(import "env" "has_auth" (func $fimport$57 (param i64) (result i32)))
(import "env" "db_end_i64" (func $fimport$58 (param i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$59 (param i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$60 (result i32)))
(import "env" "read_action_data" (func $fimport$61 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$62 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$63 (param i32 i64 i32 i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$64 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_find_primary" (func $fimport$65 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_next" (func $fimport$66 (param i32 i32) (result i32)))
(export "apply" (func $122))
(table $0 17 17 anyfunc)
(elem (i32.const 1) $20 $22 $113 $103 $73 $101 $40 $39 $66 $114 $96 $117 $115 $46 $119 $58)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 10690))
(global $global$2 i32 (i32.const 10690))


void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10427])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10473])
	
.LABEL $label$2
	$6 = *($1)
	*($1) = *(*($3))
	$7 = ($1 + [8])
	CALL $26($7, *($3 + [4]))
	*($1 + [20]) = *(*($3 + [8]))
	*($1 + [24]) = *(*($3 + [12]))
	*($1 + [28]) = [0]
	*(($5 + [56])) = (int_64)0
	*(($5 + [48])) = (int_64)0
	*($1 + [32]) = (int_64)0
	*(($1 + [40])) = (int_64)0
	*(($1 + [48])) = (int_64)0
	*(($1 + [56])) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [32]) = (int_64)0
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [10524])
	
.LABEL $label$3
	$8 = ($1 + [32])
	$9 = ($1 + [20])
	$3 = *($7)
	$10 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($10 + [52])
	$11 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $1($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $7
	*($5 + [40]) = $9
	*($5 + [52]) = $8
	*($5 + [32]) = $1
	*($5 + [44]) = ($1 + [24])
	*($5 + [48]) = ($1 + [28])
	CALL $159(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [68]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $2($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [64])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$5 = ($1 + [8])
	CALL $26($5, *($3 + [4]))
	*($1 + [20]) = *(*($3 + [8]))
	*($1 + [24]) = *(*($3 + [12]))
	*($1 + [28]) = [0]
	*((($6 = $2) + [40])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	*($1 + [32]) = (int_64)0
	*(($1 + [40])) = (int_64)0
	*(($1 + [48])) = (int_64)0
	*(($1 + [56])) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [16]) = (int_64)0
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [52])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [32])
	$9 = ($1 + [20])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($3)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($3 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $3)
	*($6 + [56]) = $6
	*($6 + [20]) = $5
	*($6 + [16]) = $1
	*($6 + [24]) = $9
	*($6 + [28]) = ($1 + [24])
	*($6 + [32]) = ($1 + [28])
	*($6 + [36]) = $7
	CALL $159(($6 + [16]), ($6 + [56]))
	$8 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-6499418656071090176, *(*($0 + [8])), $8, $2, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $2($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [64])
	return 
	
.LABEL $label$4
	$global$0 = ($6 + [64])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9729])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9729])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	$2 = ($3 + [12])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9729])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	CALL $95(*($1), ($3 + [16]))
	CALL $146(*($1), ($3 + [48]))
	CALL $146(*($1), ($3 + [60]))
	$0 = ($3 + [72])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $3) > (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert([0], [9729])
	$3 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $0, [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	*($2 + [11]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [10]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [9]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [8]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$4 = *(($1 + [8]))
	*($2 + [3]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [2]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [1]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2) = (uint_64)$4 >> (uint_64)(int_64)56)
	$5 = (CASTING uint_32)(uint_64 $3)
	*($2 + [15]) = $5
	*($2 + [14]) = uint_32($5 >> [8])
	*($2 + [13]) = uint_32($5 >> [16])
	*($2 + [12]) = uint_32($5 >> [24])
	$5 = (CASTING uint_32)(uint_64 $4)
	*($2 + [7]) = $5
	*($2 + [6]) = uint_32($5 >> [8])
	*($2 + [5]) = uint_32($5 >> [16])
	*($2 + [4]) = uint_32($5 >> [24])
	$3 = *(($1 + [24]))
	*($2 + [23]) = $3
	$4 = *($1 + [16])
	*($2 + [27]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [26]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [25]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2 + [24]) = (uint_64)$4 >> (uint_64)(int_64)56)
	*($2 + [19]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [18]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [17]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [16]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$1 = (CASTING uint_32)(uint_64 $3)
	*($2 + [22]) = uint_32($1 >> [8])
	*($2 + [21]) = uint_32($1 >> [16])
	*($2 + [20]) = uint_32($1 >> [24])
	$1 = (CASTING uint_32)(uint_64 $4)
	*($2 + [31]) = $1
	*($2 + [30]) = uint_32($1 >> [8])
	*($2 + [29]) = uint_32($1 >> [16])
	*($2 + [28]) = uint_32($1 >> [24])
	$1 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [9729])
	$1 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [32])
	*(($1 = ($0 + [4]))) = (*($1) + [32])
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [592])
	$global$0 = $4
	*($4 + [63]) = $3
	CALL require_auth(*($0))
	if ( ($3 <= [3]) ){ goto $label$1 }
	CALL eosio_assert([0], [9947])
	
.LABEL $label$1
	*($4 + [56]) = ((int_64)CALL $34() / (int_64)1000000)
	$3 = [0]
	*(($4 + [48])) = [0]
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	$5 = *($0)
	*($4 + [16]) = $5
	*($4 + [24]) = $5
	*($4 + [4]) = $2
	*($4 + [8]) = ($4 + [63])
	*($4 + [12]) = ($4 + [56])
	*($4) = $1
	$1 = CALL db_find_i64($5, $5, (int_64)-6499418656071090176, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $97(($4 + [16]), $1)
	if ( ((int_32)*($6 + [64]) == (int_32)($4 + [16])) ){ goto $label$7 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$7
	$7 = ($4 + [564])
	$1 = [13]
	$3 = [0]
	
.LOOP $label$8:
	if ( ((int_32)($1 & [255]) == (int_32)[37]) ){ goto $label$5 }
	*(($8 = (($4 + [64]) + $3))) = $1
	$2 = ($3 + [1])
	if ( ((uint_32)($8 + [1]) >= (uint_32)$7) ){ goto $label$9 }
	$1 = ($3 + [9057])
	$3 = $2
	$1 = *($1)
	if ( ($1 & [255]) ){ goto $label$8 }
	
.LABEL $label$9
	*((($4 + [64]) + $2)) = [0]
	CALL prints(($4 + [64]))
	CALL $98(($4 + [16]), $6, *($0), $4)
	$2 = *($4 + [40])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$7 = ($4 + [564])
	$1 = [13]
	
.LOOP $label$10:
	if ( ((int_32)($1 & [255]) == (int_32)[37]) ){ goto $label$5 }
	*(($8 = (($4 + [64]) + $3))) = $1
	$2 = ($3 + [1])
	if ( ((uint_32)($8 + [1]) >= (uint_32)$7) ){ goto $label$11 }
	$1 = ($3 + [9041])
	$3 = $2
	$1 = *($1)
	if ( ($1 & [255]) ){ goto $label$10 }
	
.LABEL $label$11
	*((($4 + [64]) + $2)) = [0]
	CALL prints(($4 + [64]))
	*($4 + [584]) = *($0)
	if ( ((int_64)CALL current_receiver() == (int_64)*($4 + [16])) ){ goto $label$12 }
	CALL eosio_assert([0], [10341])
	
.LABEL $label$12
	*($4 + [68]) = $4
	*($4 + [64]) = ($4 + [16])
	*($4 + [72]) = ($4 + [584])
	*(($3 = CALL $7([80]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*(($3 + [56])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*($3 + [64]) = ($4 + [16])
	CALL $99(($4 + [64]), $3)
	*($4 + [576]) = $3
	$5 = *($3)
	*($4 + [64]) = $5
	$2 = *($3 + [68])
	*($4 + [572]) = $2
	$8 = ($4 + [44])
	$1 = *($8)
	if ( ((uint_32)$1 >= (uint_32)*(($4 + [48]))) ){ goto $label$14 }
	*($1 + [8]) = $5
	*($1 + [16]) = $2
	*($4 + [576]) = [0]
	*($1) = $3
	*($8) = ($1 + [24])
	$3 = *($4 + [576])
	*($4 + [576]) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	goto $label$4 
	
.LABEL $label$14
	CALL $100(($4 + [40]), ($4 + [576]), ($4 + [64]), ($4 + [572]))
	$3 = *($4 + [576])
	*($4 + [576]) = [0]
	if ( $3 ){ goto $label$4 }
	
.LABEL $label$13
	$2 = *($4 + [40])
	if ( ($2 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$5
	
.LABEL $label$4
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL $9(*(($3 + [16])))
	
.LABEL $label$15
	CALL $9($3)
	$2 = *($4 + [40])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($4 + [44])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$17 }
	
.LOOP $label$18:
	$3 = ($3 + [-24])
	$1 = *($3)
	*($3) = [0]
	if ( ($1 == 0) ){ goto $label$19 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$20 }
	CALL $9(*(($1 + [16])))
	
.LABEL $label$20
	CALL $9($1)
	
.LABEL $label$19
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$18 }
	$3 = *(($4 + [40]))
	goto $label$16 
	
.LABEL $label$17
	$3 = $2
	
.LABEL $label$16
	*($8) = $2
	CALL $9($3)
	
.LABEL $label$2
	$global$0 = ($4 + [592])
	(unreachable)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9806])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $7([80]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [64]) = $0
	*(($5 + [56])) = (int_64)0
	*(($5 + [48])) = (int_64)0
	*(($5 + [40])) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [20])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [28])
	*($3 + [60]) = ($5 + [32])
	CALL $155(($3 + [40]), ($3 + [32]))
	*($5 + [68]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $100(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [16])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9806])
	
.LABEL $label$5
	$2 = CALL $1($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $7([24])) + [8]) = $0
	*($5) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9829])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = $7
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($8) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $153(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $9($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $91 (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [48])
	$global$0 = $1
	$2 = [0]
	*(($1 + [40])) = [0]
	*($1 + [16]) = (int_64)-5914999693434869968
	*($1 + [8]) = (int_64)-5914999693434869968
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$3 = CALL db_find_i64((int_64)-5914999693434869968, (int_64)-5914999693434869968, (int_64)-4257814626298757120, $0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $92(($1 + [8]), $3)
	if ( ((int_32)*($3 + [12]) == (int_32)($1 + [8])) ){ goto $label$2 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$2
	$2 = *($3 + [8])
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($1 + [36])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	CALL $9($6)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$5 }
	$3 = *(($1 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$3 = $4
	
.LABEL $label$3
	*($5) = $4
	CALL $9($3)
	
.LABEL $label$1
	$global$0 = ($1 + [48])
	return $2
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9806])
	
.LABEL $label$5
	$2 = CALL $1($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $7([24])) + [12]) = $0
	*($5) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9829])
	
.LABEL $label$7
	$7 = ($5 + [8])
	CALL memcpy($5, $2, [8])
	$8 = ($2 + [8])
	if ( ((int_32)($4 & [-4]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9829])
	
.LABEL $label$8
	CALL memcpy($7, $8, [4])
	*($5 + [16]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $154(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $2($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $9($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $93 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	$7 = ($global$0 - [160])
	$global$0 = $7
	*($7 + [88]) = $6
	*($7 + [128]) = CALL $91($6)
	*($7 + [152]) = CALL transaction_size()
	CALL memcpy($7, ($7 + [88]), [8])
	CALL memcpy(($7 | [8]), ($7 + [128]), [4])
	CALL memcpy(($7 | [12]), ($7 + [152]), [4])
	CALL $37($0, $7, [16])
	*(($7 + [24])) = *(($0 + [8]))
	*(($7 + [32])) = *(($0 + [16]))
	*(($7 + [40])) = *(($0 + [24]))
	*($7) = $6
	*($7 + [12]) = $2
	*($7 + [16]) = *($0)
	*($7 + [8]) = [1]
	$3 = CALL $25(($7 + [48]), $3)
	$4 = CALL $25(($7 + [60]), $4)
	*($7 + [88]) = (int_64)-5914999693434869968
	*($7 + [72]) = $5
	*($7 + [96]) = (int_64)-5290182123175542784
	*(($0 = CALL $7([16]))) = $1
	*($0 + [8]) = (int_64)3617214756542218240
	*(($7 + [124])) = [0]
	$5 = ($0 + [16])
	*((($7 + [88]) + [24])) = $5
	*(($7 + [108])) = $5
	*($7 + [104]) = $0
	*($7 + [116 align=4]) = (int_64)0
	$0 = *($3)
	$5 = ( *(($7 + [52])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($5 + [46])
	$6 = (CASTING uint_64)(uint_32 $5)
	$3 = ($7 + [116])
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($4)
	$5 = ( *(($7 + [64])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$0 = ($5 + $0)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$0 = ($0 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($0 == 0) ){ goto $label$4 }
	CALL $51($3, $0)
	$5 = *(($7 + [120]))
	$0 = *(($7 + [116]))
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$0 = [0]
	
.LABEL $label$3
	*($7 + [132]) = $0
	*($7 + [128]) = $0
	*($7 + [136]) = $5
	*($7 + [144]) = ($7 + [128])
	*($7 + [152]) = $7
	CALL $94(($7 + [152]), ($7 + [144]))
	CALL $70(($7 + [88]))
	$0 = *($7 + [116])
	if ( ($0 == 0) ){ goto $label$5 }
	*(($7 + [120])) = $0
	CALL $9($0)
	
.LABEL $label$5
	$0 = *($7 + [104])
	if ( ($0 == 0) ){ goto $label$6 }
	*(($7 + [108])) = $0
	CALL $9($0)
	
.LABEL $label$6
	if ( (*($7 + [60]) & [1]) ){ goto $label$9 }
	if ( (*($7 + [48]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $9(*(($7 + [68])))
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $9(*(($7 + [56])))
	$global$0 = ($7 + [160])
	return 
	
.LABEL $label$7
	$global$0 = ($7 + [160])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [9729])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [4])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [9729])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [2])
	$4 = (*($3) + [2])
	*($3) = $4
	$3 = ($1 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9729])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [4])
	$3 = (*($4) + [4])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [12])
	$8 = ($0 + [8])
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [9729])
	$3 = *($4)
	
.LABEL $label$5
	CALL memcpy($3, ($2 + [14]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$4 }
	$4 = ($1 + [16])
	$8 = ($0 + [8])
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [9729])
	$3 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $4, [1])
	$3 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [20])
	
.LOOP $label$7:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [9729])
	$3 = *($4)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$7 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $123 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$5 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$2 = CALL $1($7)
	goto $label$3 
	
.LABEL $label$5
	*($4 + [8]) = (int_64)0
	$2 = [0]
	$3 = ($4 + [8])
	$8 = $7
	goto $label$2 
	
.LABEL $label$4
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $7)
	*($4 + [8]) = (int_64)0
	$8 = ($2 + $7)
	$3 = ($4 + [8])
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [9829])
	
.LABEL $label$1
	CALL memcpy($3, $2, [8])
	$9 = *($4 + [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = $8
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $9
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 ($4 + [40])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $2($2)
	
.LABEL $label$7
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)-6499411808120471552, *($1))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $77(($2 + [8]), $4)
	if ( ((int_32)*($0 + [92]) == (int_32)($2 + [8])) ){ goto $label$1 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$1
	CALL $78(((int_32)$0 != (int_32)[0]), [8722], *($1))
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [10392])
	
.LABEL $label$2
	CALL $116(($2 + [8]), $0, (int_64)0)
	*($2) = (int_64)-7948407639397191472
	CALL $111($0, $1, $2)
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = ($2 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $9($1)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL $9($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	if ( ((int_64)$2 > (int_64)-4157529591092956977) ){ goto $label$15 }
	if ( ((int_64)$2 <= (int_64)-5065806084046679553) ){ goto $label$13 }
	if ( ((int_64)$2 > (int_64)-4417161094859697153) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-5065806084046679552) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)-5001399798565461504) ){ goto $label$1 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [3]
	*($3 + [72]) = *($3 + [144])
	CALL $123($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)-5065806084046679552) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$15
	if ( ((int_64)$2 <= (int_64)-3102518481125256193) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)5093418686737661951) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-3102518481125256192) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)4729645581788512256) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [4]
	*($3 + [64]) = *($3 + [152])
	CALL $124($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$14
	*($3 + [180]) = [0]
	*($3 + [176]) = [5]
	*($3 + [40]) = *($3 + [176])
	CALL $125($0, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)-7948407639397191472) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-5290182441238003712) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-5290182389027307520) ){ goto $label$1 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [6]
	*($3 + [56]) = *($3 + [160])
	CALL $123($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-4157529591092956976) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-4149684798235469312) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-4417161094859697152) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4417020449996259328) ){ goto $label$1 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [7]
	*($3 + [8]) = *($3 + [208])
	CALL $126($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)5378237740806428032) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)5093418686737661952) ){ goto $label$1 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [8]
	*($3) = *($3 + [216])
	CALL $127($1, $1, $3)
	goto $label$1 
	
.LABEL $label$9
	*($3 + [188]) = [0]
	*($3 + [184]) = [9]
	*($3 + [32]) = *($3 + [184])
	CALL $128($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [140]) = [0]
	*($3 + [136]) = [10]
	*($3 + [80]) = *($3 + [136])
	CALL $123($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [172]) = [0]
	*($3 + [168]) = [11]
	*($3 + [48]) = *($3 + [168])
	CALL $129($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [132]) = [0]
	*($3 + [128]) = [12]
	*($3 + [88]) = *($3 + [128])
	CALL $123($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [124]) = [0]
	*($3 + [120]) = [13]
	*($3 + [96]) = *($3 + [120])
	CALL $123($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [204]) = [0]
	*($3 + [200]) = [14]
	*($3 + [16]) = *($3 + [200])
	CALL $130($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [116]) = [0]
	*($3 + [112]) = [15]
	*($3 + [104]) = *($3 + [112])
	CALL $127($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [196]) = [0]
	*($3 + [192]) = [16]
	*($3 + [24]) = *($3 + [192])
	CALL $131($0, $1, ($3 + [24]))
	
.LABEL $label$1
	CALL $38([0])
	$global$0 = ($3 + [224])
}

int_32 .FUNC $130 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [32]) = [0]
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [9829])
	
.LABEL $label$4
	CALL memcpy(($4 + [32]), $2, [4])
	*(($4 + [20])) = ($2 + [4])
	*(($4 + [24])) = $3
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [40]) = *($4 + [32])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [40])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $131 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [64]) + [24]))) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $133(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($9 = (($4 + [160]) + [8]))) = *($3)
	*($4 + [160]) = *($4)
	*(($3 = (($4 + [112]) + [8]))) = *($9)
	*($4 + [112]) = *($4 + [160])
	$10 = *($3)
	*(($9 = (($4 + [128]) + [8]))) = $10
	*((($4 + [16]) + [24])) = $10
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($3) = *($8)
	*($4 + [112]) = *($4 + [80])
	$0 = *($4 + [72])
	$1 = *($4 + [64])
	$8 = CALL $25(($4 + [160]), ($4 + [96]))
	*($9) = *($3)
	*($4 + [152]) = $1
	*($4 + [144]) = $0
	*($4 + [128]) = *($4 + [112])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [152])), (int_32 ($4 + [144])), (int_32 ($4 + [128])), (int_32 $8), (int_32 $6))
	if ( (*($4 + [160]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $9(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$5
	CALL $9(*(($4 + [104])))
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [9829])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$3 = *($0)
	$2 = ($3 + [4])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [9829])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9829])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	$2 = ($3 + [12])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [9829])
	$4 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	$0 = ($3 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [9829])
	$3 = *(($1 + [4]))
	
.LABEL $label$5
	CALL memcpy($0, $3, [4])
	*(($1 = ($1 + [4]))) = (*($1) + [4])
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9829])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9829])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9829])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $156(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [9829])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$0 = ($5 + [16])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9829])
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $4, [8])
	$0 = (*($4) + [8])
	*(($4 = ($1 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($1 + [8])) - $0) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9829])
	$0 = *($4)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $0, [8])
	*(($5 + [24])) = *($2 + [8])
	*($4) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $121 (int_64 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_64 $17
	$2 = ($global$0 - [512])
	$global$0 = $2
	$4 = (int_64)$3 >> (int_64)63
	$3 = *($1)
	$5 = ((int_64)((int_64)$3 + (int_64)$4)) ^ (int_64)$4)
	$4 = *($1 + [8])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_64)$4 & (int_64)255)
	$8 = (CASTING uint_32)(uint_64 $7)
	$9 = ($8 + [2])
	$10 = ($8 + [1])
	$11 = ($2 + [500])
	$12 = [0]
	$13 = [9576]
	$1 = [13]
	$14 = $2
	
.LOOP $label$1:
	$13 = ($13 + [1])
	
.LOOP $label$4:
	if ( ((int_32)($1 & [255]) == (int_32)[37]) ){ goto $label$3 }
	*($14) = $1
	$14 = ($14 + [1])
	if ( ((uint_32)$14 >= (uint_32)$11) ){ goto $label$2 }
	$1 = *($13)
	$13 = ($13 + [1])
	if ( ($1 & [255]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$12 > (uint_32)[9]) ){ goto $label$5 }
	goto $label$12 
	
.LABEL $label$12
	$14 = ($14 + [1])
	$4 = $0
	if ( (uint_64)($0 <= (int_64)10) ){ goto $label$13 }
	
.LOOP $label$14:
	$14 = ($14 + [1])
	$1 = ((uint_64)$4 > (uint_64)(int_64)99)
	$4 = ((uint_64)$4 / (uint_64)(int_64)10)
	if ( $1 ){ goto $label$14 }
	
.LABEL $label$13
	if ( ((uint_32)$14 > (uint_32)$11) ){ goto $label$5 }
	$1 = ($14 + [-1])
	$4 = $0
	
.LOOP $label$15:
	$15 = ((uint_64)$4 / (uint_64)(int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$15 * (int_64)10))) | [48])
	$1 = ($1 + [-1])
	$16 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $15
	if ( $16 ){ goto $label$15 }
	goto $label$5 
	
.LABEL $label$11
	if ( (int_64)($7 == 0) ){ goto $label$16 }
	$1 = [1]
	$4 = $7
	
.LOOP $label$17:
	$1 = ((int_32)$1 * (int_32)[10])
	$4 = ((int_64)$4 + (int_64)-1)
	if ( ((int_64)($4 == 0) == 0) ){ goto $label$17 }
	$17 = (CASTING uint_64)(uint_32 $1)
	$4 = ((int_64)$3 / (int_64)$17)
	if ( ((int_64)$3 > (int_64)-1) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$16
	$17 = (int_64)1
	$4 = ((int_64)$3 / (int_64)1)
	if ( ((int_64)$3 <= (int_64)-1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	
.LABEL $label$9
	if ( ((int_64)($4 == 0) == 0) ){ goto $label$8 }
	*($14) = [45]
	$4 = (int_64)0
	$14 = ($14 + [2])
	if ( ((uint_32)$14 <= (uint_32)$11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((int_64)$4 > (int_64)-1) ){ goto $label$18 }
	*($14) = [45]
	$4 = (int_64))((int_64)0 - $4)
	$14 = ($14 + [1])
	
.LABEL $label$18
	$14 = ($14 + [1])
	if ( (uint_64)($4 <= (int_64)10) ){ goto $label$19 }
	$15 = $4
	
.LOOP $label$20:
	$14 = ($14 + [1])
	$1 = ((uint_64)$15 > (uint_64)(int_64)99)
	$15 = ((uint_64)$15 / (uint_64)(int_64)10)
	if ( $1 ){ goto $label$20 }
	
.LABEL $label$19
	if ( ((uint_32)$14 > (uint_32)$11) ){ goto $label$6 }
	
.LABEL $label$7
	$1 = ($14 + [-1])
	
.LOOP $label$21:
	$15 = ((uint_64)$4 / (uint_64)(int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$15 * (int_64)10))) | [48])
	$1 = ($1 + [-1])
	$16 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $15
	if ( $16 ){ goto $label$21 }
	
.LABEL $label$6
	$16 = ($14 + [1])
	if ( ((uint_32)$16 > (uint_32)$11) ){ goto $label$5 }
	*($14) = [46]
	if ( ((uint_32)($14 + $10) > (uint_32)$11) ){ goto $label$22 }
	if ( ($8 == 0) ){ goto $label$23 }
	$4 = ((uint_64)$5 % (uint_64)$17)
	$1 = $9
	
.LOOP $label$24:
	$15 = ((uint_64)$4 / (uint_64)(int_64)10)
	*((($14 + $1) + [-2])) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$15 * (int_64)10))) | [48])
	$4 = $15
	$1 = ($1 + [-1])
	if ( ((int_32)$1 > (int_32)[2]) ){ goto $label$24 }
	
.LABEL $label$23
	$16 = ($16 + $8)
	
.LABEL $label$22
	*($16) = [32]
	$14 = ($16 + [1])
	if ( (int_64)($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)($16 + [8]) > (uint_32)$11) ){ goto $label$5 }
	$4 = $6
	
.LOOP $label$25:
	*($14) = $4
	$14 = ($14 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)($4) == 0) == 0) ){ goto $label$25 }
	
.LABEL $label$5
	if ( ((uint_32)$14 >= (uint_32)$11) ){ goto $label$2 }
	$12 = ($12 + [1])
	$1 = *($13)
	if ( ($1 & [255]) ){ goto $label$1 }
	
.LABEL $label$2
	*($14) = [0]
	CALL prints($2)
	$global$0 = ($2 + [512])
	$12
	(unreachable)
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [9829])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy(($2 + [48]), $4, [32])
	*(($3 = ($3 + [4]))) = (*($3) + [32])
	$5 = (int_64)0
	$3 = [16]
	$6 = ($2 + [16])
	$4 = [0]
	$7 = (int_64)0
	
.LOOP $label$3:
	$8 = (($2 + [48]) + $4)
	if ( ($3 <= [2]) ){ goto $label$4 }
	$5 = ((int_64)$5 | (int_64)*($8))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$5 >> (uint_64)(int_64)56))
	$3 = ($3 + [-1])
	$5 = ((int_64)$5 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$5 }
	CALL eosio_assert([0], [10642])
	
.LABEL $label$5
	*($6 + [8]) = $7
	*($6) = ((int_64)$5 | (int_64)*($8))
	$3 = [16]
	$6 = ($6 + [16])
	$5 = (int_64)0
	$7 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)[16]) ){ goto $label$6 }
	if ( ($3 <= [2]) ){ goto $label$7 }
	CALL __ashlti3($2, $5, $7, (($3 << [3]) + [-8]))
	$7 = *(($2 + [8]))
	$5 = *($2)
	
.LABEL $label$7
	*($6) = $5
	*($6 + [8]) = $7
	
.LABEL $label$6
	*($0) = *($2 + [16])
	*(($0 + [8])) = *($2 + [24])
	*(($0 + [24])) = *((($2 + [16]) + [24]))
	*(($0 + [16])) = *((($2 + [16]) + [16]))
	CALL $160(*($1), ($0 + [32]))
	CALL $160(*($1), ($0 + [44]))
	$global$0 = ($2 + [80])
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [96])
	$global$0 = $2
	*((($2 + [32]) + [24])) = *(($1 + [24]))
	*((($2 + [32]) + [16])) = *(($1 + [16]))
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = [0]
	*($2 + [32]) = *($1)
	*($2 + [40]) = *(($1 + [8]))
	$3 = (*(($1 + [36])) - *($1 + [32]))
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$2 }
	$4 = CALL $7($3)
	*(($2 + [24])) = ($4 + $3)
	*($2 + [16]) = $4
	*($2 + [20]) = $4
	$5 = *(($1 + [32]))
	$3 = (*(($1 + [36])) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($4, $5, $3)
	*($2 + [20]) = ($4 + $3)
	
.LABEL $label$3
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$3 = (*(($1 + [48])) - *($1 + [44]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL $7($3)
	*(($2 + [8])) = ($4 + $3)
	*($2) = $4
	*($2 + [4]) = $4
	$3 = *(($1 + [44]))
	$1 = (*(($1 + [48])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $3, $1)
	*($2 + [4]) = ($4 + $1)
	
.LABEL $label$4
	*((($2 + [64]) + [24])) = *((($2 + [32]) + [24]))
	*((($2 + [64]) + [16])) = *((($2 + [32]) + [16]))
	*($2 + [72]) = *($2 + [40])
	*($2 + [64]) = *($2 + [32])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$1 = *((*($0) + $1))
	
.LABEL $label$5
	CALL void $0((int_32 ($2 + [64])), (int_32 ($2 + [16])), (int_32 $2), (int_32 $1))
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$6 }
	*($2 + [4]) = $1
	CALL $9($1)
	
.LABEL $label$6
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$7 }
	*($2 + [20]) = $1
	CALL $9($1)
	
.LABEL $label$7
	$global$0 = ($2 + [96])
	return (unreachable)
	
.LABEL $label$2
	CALL $33(($2 + [16]))
	
.LABEL $label$1
	CALL $33($2)
	(unreachable)
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$2 = $global$0
	$3 = $2
	$5 = *($0 + [24])
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_32)*(($4 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$4 = ($4 + [-24])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$4 = *(($4 + [-24]))
	$global$0 = $3
	return $4
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$6 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $6
	$7 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9806])
	
.LABEL $label$5
	$6 = CALL $1($4)
	$7 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $6, $4)
	*(($8 = CALL $7([56])) + [40]) = $0
	*($8 + [8]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9829])
	
.LABEL $label$7
	$5 = ($8 + [32])
	$2 = ($8 + [24])
	$9 = ($8 + [16])
	$10 = ($8 + [8])
	CALL memcpy($8, $6, [8])
	$11 = ($6 + [8])
	$12 = ($4 & [-8])
	if ( ((int_32)$12 != (int_32)[8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9829])
	CALL memcpy($10, $11, [8])
	$4 = ($6 + [16])
	goto $label$11 
	
.LABEL $label$12
	CALL memcpy($10, $11, [8])
	$4 = ($6 + [16])
	if ( ((int_32)$12 != (int_32)[16]) ){ goto $label$10 }
	CALL eosio_assert([0], [9829])
	
.LABEL $label$11
	CALL memcpy($9, $4, [8])
	$4 = ($6 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL memcpy($9, $4, [8])
	$4 = ($6 + [24])
	if ( ((int_32)$12 != (int_32)[24]) ){ goto $label$13 }
	CALL eosio_assert([0], [9829])
	goto $label$9 
	
.LABEL $label$13
	CALL memcpy($2, $4, [8])
	$4 = ($6 + [32])
	if ( ((int_32)$12 != (int_32)[32]) ){ goto $label$8 }
	CALL eosio_assert([0], [9829])
	goto $label$8 
	
.LABEL $label$9
	CALL memcpy($2, $4, [8])
	$4 = ($6 + [32])
	
.LABEL $label$8
	CALL memcpy($5, $4, [8])
	*($8 + [44]) = $1
	$13 = *($8)
	$9 = *(($0 + [32]))
	$5 = ($0 + [28])
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)$9) ){ goto $label$16 }
	*($4 + [8]) = $13
	*($4) = $8
	*($4 + [16]) = $1
	*($5) = ($4 + [24])
	if ( $7 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$10 = ($0 + [24])
	$2 = *($10)
	$5 = ((int_32)($4 - $2) / (int_32)[24])
	$11 = ($5 + [1])
	if ( ((uint_32)$11 >= (uint_32)[178956971]) ){ goto $label$18 }
	$10 = [178956970]
	$9 = ((int_32)($9 - $2) / (int_32)[24])
	if ( ((uint_32)$9 > (uint_32)[89478484]) ){ goto $label$20 }
	$9 = ($9 << [1])
	$10 = ( $11 ? $9 : ($9 <= $11) )
	if ( ($10 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$9 = CALL $7(((int_32)$10 * (int_32)[24]))
	$4 = *(($0 + [28]))
	$2 = *(($0 + [24]))
	goto $label$17 
	
.LABEL $label$19
	$10 = [0]
	$9 = [0]
	goto $label$17 
	
.LABEL $label$18
	CALL $33($10)
	
.LABEL $label$17
	*(($5 = ($9 + ($12 = ((int_32)$5 * (int_32)[24])))) + [8]) = $13
	*($5) = $8
	*($5 + [16]) = $1
	$10 = ($9 + ((int_32)$10 * (int_32)[24]))
	$11 = ($5 + [24])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$21 }
	$1 = (($9 + $12) + [-24])
	
.LOOP $label$22:
	$5 = ($4 + [-24])
	$9 = *($5)
	*($5) = [0]
	*($1) = $9
	*(($1 + [16])) = *(($4 + [-8]))
	*(($1 + [8])) = *(($4 + [-16]))
	$1 = ($1 + [-24])
	$4 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$22 }
	$5 = ($1 + [24])
	$4 = *(($0 + [28]))
	$2 = *(($0 + [24]))
	
.LABEL $label$21
	*(($0 + [28])) = $11
	*(($0 + [24])) = $5
	*(($0 + [32])) = $10
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$23 }
	
.LOOP $label$24:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$25 }
	CALL $9($1)
	
.LABEL $label$25
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$24 }
	
.LABEL $label$23
	if ( ($2 == 0) ){ goto $label$26 }
	CALL $9($2)
	
.LABEL $label$26
	if ( ($7 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $2($6)
	
.LABEL $label$14
	$global$0 = $3
	(unreachable)
	return $8
}

void .FUNC $38 (int_32 $0)
{
}

int_32 .FUNC $126 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = [0]
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $132(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4)
	*(($3 = (($4 + [112]) + [8]))) = *($8)
	*($4 + [112]) = *($4 + [96])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	$3 = *($4 + [80])
	$8 = *($4 + [76])
	$9 = *($4 + [72])
	$10 = *($4 + [64])
	*($4 + [112]) = *($4 + [68])
	*($4 + [128]) = $10
	*($4 + [96]) = $9
	*($4 + [92]) = $8
	*($4 + [88]) = $3
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [128])), (int_32 ($4 + [112])), (int_32 ($4 + [96])), (int_32 ($4 + [92])), (int_32 ($4 + [88])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $2($2)
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_32 $46
	int_32 $47
	int_32 $48
	int_32 $49
	int_32 $50
	int_32 $51
	int_32 $52
	int_32 $53
	int_32 $54
	int_32 $55
	int_32 $56
	int_32 $57
	int_32 $58
	int_32 $59
	$3 = ($global$0 - [688])
	$global$0 = $3
	*((($3 + [104]) + [32])) = [0]
	*($3 + [120]) = (int_64)-1
	$4 = *($0)
	*($3 + [104]) = $4
	*($3 + [112]) = $4
	*($3 + [128]) = (int_64)0
	$5 = CALL db_lowerbound_i64($4, $4, (int_64)-4138943994219073536, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = (($3 + [40]) + [36])
	$7 = ($3 + [644])
	$8 = (($3 + [144]) + [16])
	$9 = CALL $50(($3 + [104]), $5)
	$10 = (($3 + [40]) + [12])
	$11 = (($3 + [40]) + [28])
	$12 = ($3 + [84])
	$13 = ($3 + [92])
	$14 = (($3 + [40]) + [20])
	$15 = (($3 + [40]) + [40])
	
.LOOP $label$3:
	$4 = CALL $34()
	*($10) = [0]
	*((($3 + [40]) + [16])) = [0]
	*($11) = (int_64)0
	*($6) = (int_64)0
	*($12) = (int_64)0
	*($13) = (int_64)0
	*($14) = (int_64)0
	*($3 + [40]) = ((CASTING uint_32)(uint_64 ((int_64)$4 / (int_64)1000000)) + [60])
	*($3 + [40]) = ((CASTING uint_32)(uint_64 ((int_64)CALL $34() / (int_64)1000000)) + [300])
	*(($16 = (($3 + [16]) + [8]))) = (int_64)3617214756542218240
	*($3 + [16]) = *($0)
	*($3 + [8]) = (int_64)6138578721764523680
	*($3) = (int_64)-5065806084046679552
	*((($3 + [144]) + [8])) = *($1)
	$4 = *($9)
	*($8) = *($2)
	$17 = ($2 + [8])
	*(($8 + [8])) = *($17)
	*($3 + [144]) = $4
	$5 = *($15)
	if ( ((uint_32)$5 >= (uint_32)*($12)) ){ goto $label$5 }
	*($5 + [8]) = (int_64)-5065806084046679552
	*($5) = (int_64)6138578721764523680
	*($5 + [16 align=4]) = (int_64)0
	*(($18 = ($5 + [24]))) = [0]
	$19 = CALL $7([16])
	*($5 + [16]) = $19
	$20 = ($19 + [16])
	*($18) = $20
	*(($19 + [8])) = *($16)
	*($19) = *($3 + [16])
	*(($5 + [20])) = $20
	*($5 + [28 align=4]) = (int_64)0
	*(($5 + [36])) = [0]
	CALL $51(($5 + [28]), [28])
	$19 = *($5 + [28])
	*((($3 + [656]) + [8])) = *(($5 + [32]))
	*($3 + [660]) = $19
	*($3 + [656]) = $19
	*($3 + [672]) = ($3 + [656])
	*($3 + [680]) = ($3 + [144])
	CALL $52(($3 + [680]), ($3 + [672]))
	*($15) = (*($15) + [40])
	goto $label$4 
	
.LABEL $label$5
	CALL $53($6, ($3 + [16]), ($3 + [8]), $3, ($3 + [144]))
	
.LABEL $label$4
	*($3 + [24]) = *($17)
	*($3 + [16]) = *($9)
	$5 = CALL cancel_deferred(($3 + [16]))
	$21 = (CASTING int_64)(int_32 $5)
	$4 = *($3 + [24])
	$22 = *($3 + [16])
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$23 = ((int_64)(uint_64)$22 >> (uint_64)(int_64)8) | (int_64)((int_64)$4 << (int_64)56)
	$24 = ((int_64)$23) & (int_64)15
	$25 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($24) <= (int_64)10) ) + (int_64)$24))
	$23 = ((int_64)$23 & (int_64)255)
	$26 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)160) ) + (int_64)(uint_64)$23 >> (uint_64)(int_64)4)))
	$23 = ((int_64)(uint_64)$22 >> (uint_64)(int_64)16) | (int_64)((int_64)$4 << (int_64)48)
	$24 = ((int_64)$23) & (int_64)15
	$27 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($24) <= (int_64)10) ) + (int_64)$24))
	$23 = ((int_64)$23 & (int_64)255)
	$28 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)160) ) + (int_64)(uint_64)$23 >> (uint_64)(int_64)4)))
	$23 = ((int_64)(uint_64)$22 >> (uint_64)(int_64)24) | (int_64)((int_64)$4 << (int_64)40)
	$24 = ((int_64)$23) & (int_64)15
	$29 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($24) <= (int_64)10) ) + (int_64)$24))
	$23 = ((int_64)$23 & (int_64)255)
	$30 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)160) ) + (int_64)(uint_64)$23 >> (uint_64)(int_64)4)))
	$23 = ((int_64)(uint_64)$22 >> (uint_64)(int_64)32) | (int_64)((int_64)$4 << (int_64)32)
	$24 = ((int_64)$23) & (int_64)15
	$31 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($24) <= (int_64)10) ) + (int_64)$24))
	$23 = ((int_64)$23 & (int_64)255)
	$32 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)160) ) + (int_64)(uint_64)$23 >> (uint_64)(int_64)4)))
	$23 = ((int_64)(uint_64)$22 >> (uint_64)(int_64)40) | (int_64)((int_64)$4 << (int_64)24)
	$24 = ((int_64)$23) & (int_64)15
	$33 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($24) <= (int_64)10) ) + (int_64)$24))
	$23 = ((int_64)$23 & (int_64)255)
	$34 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)160) ) + (int_64)(uint_64)$23 >> (uint_64)(int_64)4)))
	$23 = ((int_64)(uint_64)$22 >> (uint_64)(int_64)48) | (int_64)((int_64)$4 << (int_64)16)
	$24 = ((int_64)$23) & (int_64)15
	$35 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($24) <= (int_64)10) ) + (int_64)$24))
	$23 = ((int_64)$23 & (int_64)255)
	$36 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)160) ) + (int_64)(uint_64)$23 >> (uint_64)(int_64)4)))
	$23 = ((int_64)(uint_64)$22 >> (uint_64)(int_64)56) | (int_64)((int_64)$4 << (int_64)8)
	$24 = ((int_64)$23) & (int_64)15
	$37 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($24) <= (int_64)10) ) + (int_64)$24))
	$23 = ((int_64)$23 & (int_64)255)
	$38 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)160) ) + (int_64)(uint_64)$23 >> (uint_64)(int_64)4)))
	$23 = ((int_64)$22 & (int_64)15)
	$39 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)10) ) + (int_64)$23))
	$22 = ((int_64)$22 & (int_64)255)
	$40 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$41 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($4 <= (int_64)-6917529027641081856) ) + (int_64)(uint_64)$4 >> (uint_64)(int_64)60)))
	$22 = ((int_64)$4 & (int_64)15)
	$42 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)10) ) + (int_64)$22))
	$22 = ((int_64)$4 & (int_64)255)
	$43 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$22 = (uint_64)$4 >> (uint_64)(int_64)8
	$23 = ((int_64)$22) & (int_64)15
	$44 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23) <= (int_64)10) ) + (int_64)$23))
	$22 = ((int_64)$22 & (int_64)255)
	$45 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$22 = (uint_64)$4 >> (uint_64)(int_64)16
	$23 = ((int_64)$22) & (int_64)15
	$46 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23) <= (int_64)10) ) + (int_64)$23))
	$22 = ((int_64)$22 & (int_64)255)
	$47 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$22 = (uint_64)$4 >> (uint_64)(int_64)24
	$23 = ((int_64)$22) & (int_64)15
	$48 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23) <= (int_64)10) ) + (int_64)$23))
	$22 = ((int_64)$22 & (int_64)255)
	$49 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$22 = (uint_64)$4 >> (uint_64)(int_64)32
	$23 = ((int_64)$22) & (int_64)15
	$50 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23) <= (int_64)10) ) + (int_64)$23))
	$22 = ((int_64)$22 & (int_64)255)
	$51 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$22 = (uint_64)$4 >> (uint_64)(int_64)40
	$23 = ((int_64)$22) & (int_64)15
	$52 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23) <= (int_64)10) ) + (int_64)$23))
	$22 = ((int_64)$22 & (int_64)255)
	$53 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$22 = (uint_64)$4 >> (uint_64)(int_64)48
	$23 = ((int_64)$22) & (int_64)15
	$54 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23) <= (int_64)10) ) + (int_64)$23))
	$22 = ((int_64)$22 & (int_64)255)
	$55 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$4 = ((int_64)(uint_64)$4 >> (uint_64)(int_64)56) & (int_64)15
	$56 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($4) <= (int_64)10) ) + (int_64)$4))
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$8 }
	$57 = [0]
	$58 = [8528]
	$19 = [13]
	$5 = ($3 + [144])
	
.LOOP $label$9:
	$20 = ($58 + [1])
	$17 = [0]
	
.LOOP $label$13:
	$16 = ($5 + $17)
	if ( ((int_32)($19 & [255]) == (int_32)[37]) ){ goto $label$12 }
	*($16) = $19
	$18 = ($17 + [1])
	if ( ((uint_32)($16 + [1]) >= (uint_32)$7) ){ goto $label$11 }
	$19 = ($20 + $17)
	$17 = $18
	$19 = *($19)
	if ( ($19 & [255]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)$57 > (uint_32)[9]) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$17
	$5 = (($5 + $17) + [1])
	$4 = $21
	
.LOOP $label$18:
	$19 = $5
	$5 = ($19 + [1])
	$16 = ((uint_64)$4 > (uint_64)(int_64)99)
	$4 = ((uint_64)$4 / (uint_64)(int_64)10)
	if ( $16 ){ goto $label$18 }
	$4 = $21
	if ( ((uint_32)$5 > (uint_32)$7) ){ goto $label$15 }
	
.LOOP $label$19:
	$22 = ((uint_64)$4 / (uint_64)(int_64)10)
	*($19) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$22 * (int_64)10))) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $22
	if ( $16 ){ goto $label$19 }
	goto $label$15 
	
.LABEL $label$16
	$5 = $16
	
.LABEL $label$15
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$6 }
	goto $label$10 
	
.LABEL $label$14
	$19 = ($5 + $17)
	$5 = ($19 + [32])
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$20 }
	$5 = $16
	if ( ($5 <= $7) ){ goto $label$10 }
	goto $label$6 
	
.LABEL $label$20
	*($16) = $41
	*(($19 + [1])) = $56
	*(($19 + [2])) = $55
	*(($19 + [3])) = $54
	*(($19 + [4])) = $53
	*(($19 + [5])) = $52
	*(($19 + [6])) = $51
	*(($19 + [7])) = $50
	*(($19 + [8])) = $49
	*(($19 + [9])) = $48
	*(($19 + [10])) = $47
	*(($19 + [11])) = $46
	*(($19 + [12])) = $45
	*(($19 + [13])) = $44
	*(($19 + [14])) = $43
	*(($19 + [15])) = $42
	*(($19 + [16])) = $38
	*(($19 + [17])) = $37
	*(($19 + [18])) = $36
	*(($19 + [20])) = $34
	*(($19 + [19])) = $35
	*(($19 + [21])) = $33
	*(($19 + [22])) = $32
	*(($19 + [23])) = $31
	*(($19 + [24])) = $30
	*(($19 + [25])) = $29
	*(($19 + [26])) = $28
	*(($19 + [27])) = $27
	*(($19 + [28])) = $26
	*(($19 + [29])) = $25
	*(($19 + [30])) = $40
	*(($19 + [31])) = $39
	if ( ($5 <= $7) ){ goto $label$10 }
	goto $label$6 
	
.LABEL $label$11
	$5 = ($5 + $18)
	goto $label$6 
	
.LABEL $label$10
	$57 = ($57 + [1])
	$58 = (($58 + $17) + [1])
	$19 = *($58)
	if ( ($19 & [255]) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$8
	$59 = [0]
	$57 = [8528]
	$19 = [13]
	$5 = ($3 + [144])
	
.LOOP $label$21:
	$58 = ($57 + [1])
	$18 = $5
	$17 = [0]
	
.LOOP $label$25:
	$16 = ($5 + $17)
	if ( ((int_32)($19 & [255]) == (int_32)[37]) ){ goto $label$24 }
	*($16) = $19
	$20 = ($17 + [1])
	if ( ((uint_32)($16 + [1]) >= (uint_32)$7) ){ goto $label$23 }
	$19 = ($58 + $17)
	$18 = ($18 + [1])
	$17 = $20
	$19 = *($19)
	if ( ($19 & [255]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	if ( ((uint_32)$59 > (uint_32)[9]) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$29
	$5 = (($5 + $17) + [1])
	if ( ((uint_32)$5 > (uint_32)$7) ){ goto $label$27 }
	$4 = $21
	
.LOOP $label$30:
	$22 = ((uint_64)$4 / (uint_64)(int_64)10)
	*($18) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$22 * (int_64)10))) | [48])
	$18 = ($18 + [-1])
	$19 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $22
	if ( $19 ){ goto $label$30 }
	goto $label$27 
	
.LABEL $label$28
	$5 = $16
	
.LABEL $label$27
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$6 }
	goto $label$22 
	
.LABEL $label$26
	$19 = ($5 + $17)
	$5 = ($19 + [32])
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$31 }
	$5 = $16
	if ( ($5 <= $7) ){ goto $label$22 }
	goto $label$6 
	
.LABEL $label$31
	*($16) = $41
	*(($19 + [1])) = $56
	*(($19 + [2])) = $55
	*(($19 + [3])) = $54
	*(($19 + [4])) = $53
	*(($19 + [5])) = $52
	*(($19 + [6])) = $51
	*(($19 + [7])) = $50
	*(($19 + [8])) = $49
	*(($19 + [9])) = $48
	*(($19 + [10])) = $47
	*(($19 + [11])) = $46
	*(($19 + [12])) = $45
	*(($19 + [13])) = $44
	*(($19 + [14])) = $43
	*(($19 + [15])) = $42
	*(($19 + [16])) = $38
	*(($19 + [17])) = $37
	*(($19 + [18])) = $36
	*(($19 + [20])) = $34
	*(($19 + [19])) = $35
	*(($19 + [21])) = $33
	*(($19 + [22])) = $32
	*(($19 + [23])) = $31
	*(($19 + [24])) = $30
	*(($19 + [25])) = $29
	*(($19 + [26])) = $28
	*(($19 + [27])) = $27
	*(($19 + [28])) = $26
	*(($19 + [29])) = $25
	*(($19 + [30])) = $40
	*(($19 + [31])) = $39
	if ( ($5 <= $7) ){ goto $label$22 }
	goto $label$6 
	
.LABEL $label$23
	$5 = ($5 + $20)
	goto $label$6 
	
.LABEL $label$22
	$59 = ($59 + [1])
	$57 = (($57 + $17) + [1])
	$19 = *($57)
	if ( ($19 & [255]) ){ goto $label$21 }
	goto $label$6 
	
.LABEL $label$7
	$23 = ((int_64)(uint_64)$22 >> (uint_64)(int_64)8) | (int_64)((int_64)$4 << (int_64)56)
	$24 = ((int_64)$23) & (int_64)15
	$25 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($24) <= (int_64)10) ) + (int_64)$24))
	$23 = ((int_64)$23 & (int_64)255)
	$26 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)160) ) + (int_64)(uint_64)$23 >> (uint_64)(int_64)4)))
	$23 = ((int_64)(uint_64)$22 >> (uint_64)(int_64)16) | (int_64)((int_64)$4 << (int_64)48)
	$24 = ((int_64)$23) & (int_64)15
	$27 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($24) <= (int_64)10) ) + (int_64)$24))
	$23 = ((int_64)$23 & (int_64)255)
	$28 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)160) ) + (int_64)(uint_64)$23 >> (uint_64)(int_64)4)))
	$23 = ((int_64)(uint_64)$22 >> (uint_64)(int_64)24) | (int_64)((int_64)$4 << (int_64)40)
	$24 = ((int_64)$23) & (int_64)15
	$29 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($24) <= (int_64)10) ) + (int_64)$24))
	$23 = ((int_64)$23 & (int_64)255)
	$30 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)160) ) + (int_64)(uint_64)$23 >> (uint_64)(int_64)4)))
	$23 = ((int_64)(uint_64)$22 >> (uint_64)(int_64)32) | (int_64)((int_64)$4 << (int_64)32)
	$24 = ((int_64)$23) & (int_64)15
	$31 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($24) <= (int_64)10) ) + (int_64)$24))
	$23 = ((int_64)$23 & (int_64)255)
	$32 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)160) ) + (int_64)(uint_64)$23 >> (uint_64)(int_64)4)))
	$23 = ((int_64)(uint_64)$22 >> (uint_64)(int_64)40) | (int_64)((int_64)$4 << (int_64)24)
	$24 = ((int_64)$23) & (int_64)15
	$33 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($24) <= (int_64)10) ) + (int_64)$24))
	$23 = ((int_64)$23 & (int_64)255)
	$34 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)160) ) + (int_64)(uint_64)$23 >> (uint_64)(int_64)4)))
	$23 = ((int_64)(uint_64)$22 >> (uint_64)(int_64)48) | (int_64)((int_64)$4 << (int_64)16)
	$24 = ((int_64)$23) & (int_64)15
	$35 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($24) <= (int_64)10) ) + (int_64)$24))
	$23 = ((int_64)$23 & (int_64)255)
	$36 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)160) ) + (int_64)(uint_64)$23 >> (uint_64)(int_64)4)))
	$23 = ((int_64)(uint_64)$22 >> (uint_64)(int_64)56) | (int_64)((int_64)$4 << (int_64)8)
	$24 = ((int_64)$23) & (int_64)15
	$37 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($24) <= (int_64)10) ) + (int_64)$24))
	$23 = ((int_64)$23 & (int_64)255)
	$38 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)160) ) + (int_64)(uint_64)$23 >> (uint_64)(int_64)4)))
	$23 = ((int_64)$22 & (int_64)15)
	$39 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23 <= (int_64)10) ) + (int_64)$23))
	$22 = ((int_64)$22 & (int_64)255)
	$40 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$41 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($4 <= (int_64)-6917529027641081856) ) + (int_64)(uint_64)$4 >> (uint_64)(int_64)60)))
	$22 = ((int_64)$4 & (int_64)15)
	$42 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)10) ) + (int_64)$22))
	$22 = ((int_64)$4 & (int_64)255)
	$43 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$22 = (uint_64)$4 >> (uint_64)(int_64)8
	$23 = ((int_64)$22) & (int_64)15
	$44 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23) <= (int_64)10) ) + (int_64)$23))
	$22 = ((int_64)$22 & (int_64)255)
	$45 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$22 = (uint_64)$4 >> (uint_64)(int_64)16
	$23 = ((int_64)$22) & (int_64)15
	$46 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23) <= (int_64)10) ) + (int_64)$23))
	$22 = ((int_64)$22 & (int_64)255)
	$47 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$22 = (uint_64)$4 >> (uint_64)(int_64)24
	$23 = ((int_64)$22) & (int_64)15
	$48 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23) <= (int_64)10) ) + (int_64)$23))
	$22 = ((int_64)$22 & (int_64)255)
	$49 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$22 = (uint_64)$4 >> (uint_64)(int_64)32
	$23 = ((int_64)$22) & (int_64)15
	$50 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23) <= (int_64)10) ) + (int_64)$23))
	$22 = ((int_64)$22 & (int_64)255)
	$51 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$22 = (uint_64)$4 >> (uint_64)(int_64)40
	$23 = ((int_64)$22) & (int_64)15
	$52 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23) <= (int_64)10) ) + (int_64)$23))
	$22 = ((int_64)$22 & (int_64)255)
	$53 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$22 = (uint_64)$4 >> (uint_64)(int_64)48
	$23 = ((int_64)$22) & (int_64)15
	$54 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($23) <= (int_64)10) ) + (int_64)$23))
	$22 = ((int_64)$22 & (int_64)255)
	$55 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($22 <= (int_64)160) ) + (int_64)(uint_64)$22 >> (uint_64)(int_64)4)))
	$4 = ((int_64)(uint_64)$4 >> (uint_64)(int_64)56) & (int_64)15
	$56 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($4) <= (int_64)10) ) + (int_64)$4))
	$21 = (int_64)
	if ( ((uint_64)$21((int_64)0 - $21)) <= (uint_64)(int_64)9) ){ goto $label$32 }
	$57 = [0]
	$58 = [8528]
	$19 = [13]
	$5 = ($3 + [144])
	
.LOOP $label$33:
	$20 = ($58 + [1])
	$17 = [0]
	
.LOOP $label$37:
	$16 = ($5 + $17)
	if ( ((int_32)($19 & [255]) == (int_32)[37]) ){ goto $label$36 }
	*($16) = $19
	$18 = ($17 + [1])
	if ( ((uint_32)($16 + [1]) >= (uint_32)$7) ){ goto $label$35 }
	$19 = ($20 + $17)
	$17 = $18
	$19 = *($19)
	if ( ($19 & [255]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	if ( ((uint_32)$57 > (uint_32)[9]) ){ goto $label$40 }
	goto $label$42 
	
.LABEL $label$42
	*($16) = [45]
	$5 = ($16 + [2])
	$4 = $21
	
.LOOP $label$43:
	$19 = $5
	$5 = ($19 + [1])
	$16 = ((uint_64)$4 > (uint_64)(int_64)99)
	$4 = ((uint_64)$4 / (uint_64)(int_64)10)
	if ( $16 ){ goto $label$43 }
	$4 = $21
	if ( ((uint_32)$5 > (uint_32)$7) ){ goto $label$39 }
	
.LOOP $label$44:
	$22 = ((uint_64)$4 / (uint_64)(int_64)10)
	*($19) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$22 * (int_64)10))) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $22
	if ( $16 ){ goto $label$44 }
	goto $label$39 
	
.LABEL $label$41
	$19 = ($5 + $17)
	$5 = ($19 + [32])
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$38 }
	$5 = $16
	if ( ($5 <= $7) ){ goto $label$34 }
	goto $label$6 
	
.LABEL $label$40
	$5 = $16
	
.LABEL $label$39
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$6 }
	goto $label$34 
	
.LABEL $label$38
	*($16) = $41
	*(($19 + [1])) = $56
	*(($19 + [2])) = $55
	*(($19 + [3])) = $54
	*(($19 + [4])) = $53
	*(($19 + [5])) = $52
	*(($19 + [6])) = $51
	*(($19 + [7])) = $50
	*(($19 + [8])) = $49
	*(($19 + [9])) = $48
	*(($19 + [10])) = $47
	*(($19 + [11])) = $46
	*(($19 + [12])) = $45
	*(($19 + [13])) = $44
	*(($19 + [14])) = $43
	*(($19 + [15])) = $42
	*(($19 + [16])) = $38
	*(($19 + [17])) = $37
	*(($19 + [18])) = $36
	*(($19 + [20])) = $34
	*(($19 + [19])) = $35
	*(($19 + [21])) = $33
	*(($19 + [22])) = $32
	*(($19 + [23])) = $31
	*(($19 + [24])) = $30
	*(($19 + [25])) = $29
	*(($19 + [26])) = $28
	*(($19 + [27])) = $27
	*(($19 + [28])) = $26
	*(($19 + [29])) = $25
	*(($19 + [30])) = $40
	*(($19 + [31])) = $39
	if ( ($5 <= $7) ){ goto $label$34 }
	goto $label$6 
	
.LABEL $label$35
	$5 = ($5 + $18)
	goto $label$6 
	
.LABEL $label$34
	$57 = ($57 + [1])
	$58 = (($58 + $17) + [1])
	$19 = *($58)
	if ( ($19 & [255]) ){ goto $label$33 }
	goto $label$6 
	
.LABEL $label$32
	$59 = [0]
	$57 = [8528]
	$19 = [13]
	$5 = ($3 + [144])
	
.LOOP $label$45:
	$18 = ($5 + [1])
	$58 = ($57 + [1])
	$17 = [0]
	
.LOOP $label$49:
	$16 = ($5 + $17)
	if ( ((int_32)($19 & [255]) == (int_32)[37]) ){ goto $label$48 }
	*($16) = $19
	$20 = ($17 + [1])
	if ( ((uint_32)($16 + [1]) >= (uint_32)$7) ){ goto $label$47 }
	$19 = ($58 + $17)
	$18 = ($18 + [1])
	$17 = $20
	$19 = *($19)
	if ( ($19 & [255]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	if ( ((uint_32)$59 > (uint_32)[9]) ){ goto $label$52 }
	goto $label$54 
	
.LABEL $label$54
	*($16) = [45]
	$5 = ($16 + [2])
	if ( ((uint_32)$5 > (uint_32)$7) ){ goto $label$51 }
	$4 = $21
	
.LOOP $label$55:
	$22 = ((uint_64)$4 / (uint_64)(int_64)10)
	*($18) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$22 * (int_64)10))) | [48])
	$18 = ($18 + [-1])
	$19 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $22
	if ( $19 ){ goto $label$55 }
	goto $label$51 
	
.LABEL $label$53
	$19 = ($5 + $17)
	$5 = ($19 + [32])
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$50 }
	$5 = $16
	if ( ($5 <= $7) ){ goto $label$46 }
	goto $label$6 
	
.LABEL $label$52
	$5 = $16
	
.LABEL $label$51
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$6 }
	goto $label$46 
	
.LABEL $label$50
	*($16) = $41
	*(($19 + [1])) = $56
	*(($19 + [2])) = $55
	*(($19 + [3])) = $54
	*(($19 + [4])) = $53
	*(($19 + [5])) = $52
	*(($19 + [6])) = $51
	*(($19 + [7])) = $50
	*(($19 + [8])) = $49
	*(($19 + [9])) = $48
	*(($19 + [10])) = $47
	*(($19 + [11])) = $46
	*(($19 + [12])) = $45
	*(($19 + [13])) = $44
	*(($19 + [14])) = $43
	*(($19 + [15])) = $42
	*(($19 + [16])) = $38
	*(($19 + [17])) = $37
	*(($19 + [18])) = $36
	*(($19 + [20])) = $34
	*(($19 + [19])) = $35
	*(($19 + [21])) = $33
	*(($19 + [22])) = $32
	*(($19 + [23])) = $31
	*(($19 + [24])) = $30
	*(($19 + [25])) = $29
	*(($19 + [26])) = $28
	*(($19 + [27])) = $27
	*(($19 + [28])) = $26
	*(($19 + [29])) = $25
	*(($19 + [30])) = $40
	*(($19 + [31])) = $39
	if ( ($5 <= $7) ){ goto $label$46 }
	goto $label$6 
	
.LABEL $label$47
	$5 = ($5 + $20)
	goto $label$6 
	
.LABEL $label$46
	$59 = ($59 + [1])
	$57 = (($57 + $17) + [1])
	$19 = *($57)
	if ( ($19 & [255]) ){ goto $label$45 }
	
.LABEL $label$6
	*($5) = [0]
	CALL prints(($3 + [144]))
	CALL $54(($3 + [40]), ($3 + [16]), *($0), [0])
	CALL $55(($3 + [40]))
	$5 = CALL db_next_i64(*($9 + [40]), ($3 + [144]))
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$9 = CALL $50(($3 + [104]), $5)
	goto $label$3 
	
.LABEL $label$2
	$7 = *($3 + [128])
	if ( ($7 == 0) ){ goto $label$56 }
	$19 = ($3 + [132])
	$5 = *($19)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$58 }
	
.LOOP $label$59:
	$5 = ($5 + [-24])
	$17 = *($5)
	*($5) = [0]
	if ( ($17 == 0) ){ goto $label$60 }
	CALL $9($17)
	
.LABEL $label$60
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$59 }
	$5 = *(($3 + [128]))
	goto $label$57 
	
.LABEL $label$58
	$5 = $7
	
.LABEL $label$57
	*($19) = $7
	CALL $9($5)
	
.LABEL $label$56
	$global$0 = ($3 + [688])
	return (unreachable)
	
.LABEL $label$1
	$57
	$59
	$57
	$59
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [32]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10427])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10473])
	
.LABEL $label$2
	*($1 + [8]) = *(*($3))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-32])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = $3
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = ($1 + [8])
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [12])
	*($5 + [44]) = ($1 + [16])
	*($5 + [48]) = ($1 + [20])
	*($5 + [52]) = ($1 + [24])
	*($5 + [56]) = ($1 + [28])
	CALL $44(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [64])
}

int_32 .FUNC $125 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [72]) + [24]))) = (int_64)0
	*($4 + [80]) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [120]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $134(($4 + [24]), ($4 + [120]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($9 = (($4 + [144]) + [8]))) = *($3)
	*($4 + [144]) = *($4 + [8])
	*(($3 = (($4 + [104]) + [8]))) = *($9)
	*($4 + [104]) = *($4 + [144])
	$10 = *($3)
	*(($9 = (($4 + [120]) + [8]))) = $10
	*((($4 + [24]) + [24])) = $10
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [104])
	*($4 + [40]) = $0
	*($4 + [120]) = $0
	*($3) = *($8)
	*($4 + [104]) = *($4 + [88])
	$8 = *($4 + [80])
	$0 = *($4 + [72])
	*($9) = *($3)
	*($4 + [144]) = $0
	*($4 + [136]) = $8
	*($4 + [120]) = *($4 + [104])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [144])), (int_32 ($4 + [136])), (int_32 ($4 + [120])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $2($2)
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [32]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10427])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10473])
	
.LABEL $label$2
	*($1 + [12]) = *(*($3))
	*($1 + [16]) = *(*($3 + [4]))
	*($1 + [20]) = *(*($3 + [8]))
	*($1 + [24]) = *(*($3 + [12]))
	$6 = *($1)
	*($1) = (int_64)0
	*($1 + [28]) = *(*($3 + [16]))
	$7 = ($1 + [28])
	$8 = ($1 + [24])
	$9 = ($1 + [20])
	$10 = ($1 + [16])
	$11 = ($1 + [12])
	if ( (int_64)($6 == 0) ){ goto $label$3 }
	CALL eosio_assert([0], [10524])
	
.LABEL $label$3
	$4 = $4
	$3 = ($4 + [-32])
	$global$0 = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = $4
	*($5 + [24]) = ($5 + [8])
	*($5 + [40]) = $11
	*($5 + [44]) = $10
	*($5 + [48]) = $9
	*($5 + [52]) = $8
	*($5 + [56]) = $7
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	CALL $44(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [36]), $2, $3, [32])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [64])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9806])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $7([48])) + [32]) = $0
	*($5 + [8]) = [0]
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [12])
	*($3 + [44]) = ($5 + [16])
	*($3 + [48]) = ($5 + [20])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [28])
	CALL $144(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $45(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = $global$0
	$3 = $2
	$5 = *($0 + [24])
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_32)*(($4 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$4 = ($4 + [-24])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$4 = *(($4 + [-24]))
	$global$0 = $3
	return $4
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$6 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $6
	$7 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9806])
	
.LABEL $label$5
	$6 = CALL $1($4)
	$7 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $6, $4)
	*(($8 = CALL $7([24])) + [8]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9829])
	
.LABEL $label$7
	CALL memcpy($8, $6, [8])
	*($8 + [12]) = $1
	$9 = *($8)
	$10 = *(($0 + [32]))
	$5 = ($0 + [28])
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)$10) ){ goto $label$10 }
	*($4 + [8]) = $9
	*($4) = $8
	*($4 + [16]) = $1
	*($5) = ($4 + [24])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$11 = ($0 + [24])
	$2 = *($11)
	$5 = ((int_32)($4 - $2) / (int_32)[24])
	$12 = ($5 + [1])
	if ( ((uint_32)$12 >= (uint_32)[178956971]) ){ goto $label$12 }
	$11 = [178956970]
	$10 = ((int_32)($10 - $2) / (int_32)[24])
	if ( ((uint_32)$10 > (uint_32)[89478484]) ){ goto $label$14 }
	$10 = ($10 << [1])
	$11 = ( $12 ? $10 : ($10 <= $12) )
	if ( ($11 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$10 = CALL $7(((int_32)$11 * (int_32)[24]))
	$4 = *(($0 + [28]))
	$2 = *(($0 + [24]))
	goto $label$11 
	
.LABEL $label$13
	$11 = [0]
	$10 = [0]
	goto $label$11 
	
.LABEL $label$12
	CALL $33($11)
	
.LABEL $label$11
	*(($5 = ($10 + ($13 = ((int_32)$5 * (int_32)[24])))) + [8]) = $9
	*($5) = $8
	*($5 + [16]) = $1
	$11 = ($10 + ((int_32)$11 * (int_32)[24]))
	$12 = ($5 + [24])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$15 }
	$1 = (($10 + $13) + [-24])
	
.LOOP $label$16:
	$5 = ($4 + [-24])
	$10 = *($5)
	*($5) = [0]
	*($1) = $10
	*(($1 + [16])) = *(($4 + [-8]))
	*(($1 + [8])) = *(($4 + [-16]))
	$1 = ($1 + [-24])
	$4 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$16 }
	$5 = ($1 + [24])
	$4 = *(($0 + [28]))
	$2 = *(($0 + [24]))
	
.LABEL $label$15
	*(($0 + [28])) = $12
	*(($0 + [24])) = $5
	*(($0 + [32])) = $11
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$19 }
	CALL $9($1)
	
.LABEL $label$19
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$18 }
	
.LABEL $label$17
	if ( ($2 == 0) ){ goto $label$20 }
	CALL $9($2)
	
.LABEL $label$20
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($6)
	
.LABEL $label$8
	$global$0 = $3
	(unreachable)
	return $8
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	$6 = ($global$0 - [208])
	$global$0 = $6
	CALL require_auth(*($0))
	$7 = [0]
	*((($6 + [72]) + [32])) = [0]
	*($6 + [88]) = (int_64)-1
	$8 = *($0)
	*($6 + [72]) = $8
	*($6 + [80]) = $8
	*($6 + [96]) = (int_64)0
	$9 = CALL db_lowerbound_i64($8, $8, (int_64)-6499392009015709696, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $41(($6 + [72]), $9)
	$11 = (($6 + [72]) + [24])
	$12 = ($6 + [100])
	
.LOOP $label$2:
	$15 = [0]
	$9 = CALL db_next_i64(*($10 + [12]), ($6 + [32]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$15 = CALL $41(($6 + [72]), $9)
	
.LABEL $label$3
	if ( ((int_32)*($10 + [8]) == (int_32)($6 + [72])) ){ goto $label$4 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$4
	if ( ((int_64)CALL current_receiver() == (int_64)*($6 + [72])) ){ goto $label$5 }
	CALL eosio_assert([0], [10238])
	
.LABEL $label$5
	$14 = *($12)
	$13 = $14
	$16 = *($11)
	if ( ((int_32)$14 == (int_32)$16) ){ goto $label$8 }
	$8 = *($10)
	$13 = $14
	
.LOOP $label$9:
	$9 = ($13 + [-24])
	if ( ((int_64)*(*($9)) == (int_64)$8) ){ goto $label$8 }
	$13 = $9
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$13 != (int_32)$16) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [10288])
	$14 = *($12)
	$13 = $16
	$16 = *($11)
	
.LABEL $label$6
	$9 = ($16 + ((int_32)((int_32)(($13 + [-24]) - $16) / (int_32)[24]) * (int_32)[24]))
	if ( ((int_32)($9 + [24]) != (int_32)$14) ){ goto $label$14 }
	$13 = $9
	$14 = ($14 + [-24])
	$9 = *($14)
	*($14) = [0]
	if ( $9 ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	$17 = ($14 + [-24])
	
.LOOP $label$15:
	$13 = ($9 + [24])
	$16 = *($13)
	*($13) = [0]
	$14 = *($9)
	*($9) = $16
	if ( ($14 == 0) ){ goto $label$16 }
	CALL $9($14)
	
.LABEL $label$16
	*(($9 + [16])) = *(($9 + [40]))
	*(($9 + [8])) = *(($9 + [32]))
	$9 = $13
	if ( ((int_32)$17 != (int_32)$13) ){ goto $label$15 }
	$14 = *($12)
	if ( ((int_32)$14 == (int_32)$13) ){ goto $label$11 }
	$18 = [2]
	goto $label$10 
	
.LABEL $label$13
	$18 = [1]
	goto $label$10 
	
.LABEL $label$12
	$18 = [0]
	goto $label$10 
	
.LABEL $label$11
	$18 = [3]
	
.LABEL $label$10
	
.LOOP $label$17:
	goto $label$22 
	
.LABEL $label$23
	$14 = ($14 + [-24])
	$9 = *($14)
	*($14) = [0]
	if ( ($9 == 0) ){ goto $label$19 }
	$18 = [0]
	goto $label$17 
	
.LABEL $label$22
	CALL $9($9)
	$18 = [1]
	goto $label$17 
	
.LABEL $label$21
	if ( ((int_32)$13 != (int_32)$14) ){ goto $label$18 }
	$18 = [3]
	goto $label$17 
	
.LABEL $label$20
	*($12) = $13
	CALL db_remove_i64(*(($10 + [12])))
	$10 = $15
	if ( $15 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$19
	$18 = [1]
	goto $label$17 
	
.LABEL $label$18
	$18 = [2]
	goto $label$17 
	
.LABEL $label$1
	*((($6 + [32]) + [32])) = [0]
	*($6 + [48]) = (int_64)-1
	$8 = *($0)
	*($6 + [32]) = $8
	*($6 + [40]) = $8
	*($6 + [56]) = (int_64)0
	$9 = CALL db_find_i64($8, $8, (int_64)-6499392009015709696, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$24 }
	$7 = CALL $42(($6 + [32]), $9)
	if ( ((int_32)*($7 + [32]) == (int_32)($6 + [32])) ){ goto $label$24 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$24
	*($6 + [12]) = $2
	*($6 + [8]) = $1
	*($6 + [16]) = $3
	*($6 + [20]) = $4
	*($6 + [24]) = $5
	if ( ($7 == 0) ){ goto $label$27 }
	CALL $43(($6 + [32]), $7, (int_64)0, ($6 + [8]))
	$14 = *($6 + [56])
	if ( $14 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$19 = *($0)
	if ( ((int_64)CALL current_receiver() == (int_64)*($6 + [32])) ){ goto $label$28 }
	CALL eosio_assert([0], [10341])
	
.LABEL $label$28
	*(($9 = CALL $7([48])) + [8]) = [0]
	*($9 + [32]) = ($6 + [32])
	*($9) = (int_64)0
	*($9 + [12]) = *($1)
	*($9 + [16]) = *($2)
	*($9 + [20]) = *($3)
	*($9 + [24]) = *($4)
	*($9 + [28]) = *($5)
	*($6 + [160]) = (($6 + [112]) + [32])
	*($6 + [156]) = ($6 + [112])
	*($6 + [152]) = ($6 + [112])
	*($6 + [168]) = ($6 + [152])
	*($6 + [180]) = ($9 + [8])
	*($6 + [176]) = $9
	*($6 + [184]) = ($9 + [12])
	*($6 + [188]) = ($9 + [16])
	*($6 + [192]) = ($9 + [20])
	*($6 + [196]) = ($9 + [24])
	*($6 + [200]) = ($9 + [28])
	CALL $44(($6 + [176]), ($6 + [168]))
	$8 = *($9)
	$14 = CALL db_store_i64(*((($6 + [32]) + [8])), (int_64)-6499392009015709696, $19, $8, ($6 + [112]), [32])
	*($9 + [36]) = $14
	$13 = (($6 + [32]) + [16])
	if ( (uint_64)($8 <= *($13)) ){ goto $label$29 }
	*($13) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$29
	*($6 + [176]) = $9
	$8 = *($9)
	*($6 + [112]) = $8
	*($6 + [152]) = $14
	$13 = *((($6 + [32]) + [28]))
	if ( ((uint_32)$13 >= (uint_32)*((($6 + [32]) + [32]))) ){ goto $label$32 }
	*($13 + [8]) = $8
	*($13 + [16]) = $14
	*($6 + [176]) = [0]
	*($13) = $9
	*(($6 + [60])) = ($13 + [24])
	$9 = *($6 + [176])
	*($6 + [176]) = [0]
	if ( $9 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	CALL $45(($6 + [56]), ($6 + [176]), ($6 + [112]), ($6 + [152]))
	$9 = *($6 + [176])
	*($6 + [176]) = [0]
	if ( ($9 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL $9($9)
	
.LABEL $label$30
	$14 = *($6 + [56])
	if ( ($14 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$16 = ($6 + [60])
	$9 = *($16)
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$34 }
	
.LOOP $label$35:
	$9 = ($9 + [-24])
	$13 = *($9)
	*($9) = [0]
	if ( ($13 == 0) ){ goto $label$36 }
	CALL $9($13)
	
.LABEL $label$36
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$35 }
	$9 = *(($6 + [56]))
	goto $label$33 
	
.LABEL $label$34
	$9 = $14
	
.LABEL $label$33
	*($16) = $14
	CALL $9($9)
	
.LABEL $label$25
	$14 = *($6 + [96])
	if ( ($14 == 0) ){ goto $label$37 }
	$16 = ($6 + [100])
	$9 = *($16)
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$39 }
	
.LOOP $label$40:
	$9 = ($9 + [-24])
	$13 = *($9)
	*($9) = [0]
	if ( ($13 == 0) ){ goto $label$41 }
	CALL $9($13)
	
.LABEL $label$41
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$40 }
	$9 = *(($6 + [96]))
	goto $label$38 
	
.LABEL $label$39
	$9 = $14
	
.LABEL $label$38
	*($16) = $14
	CALL $9($9)
	
.LABEL $label$37
	$global$0 = ($6 + [208])
	$18
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [512])
	$global$0 = $3
	if ( $0 ){ goto $label$2 }
	$0 = *($1)
	if ( ($0 == 0) ){ goto $label$4 }
	$4 = ($3 + [500])
	$5 = ($2 + [1])
	$6 = [0]
	$7 = $3
	
.LOOP $label$5:
	$1 = ($1 + [1])
	
.LOOP $label$7:
	if ( ((int_32)($0 & [255]) == (int_32)[37]) ){ goto $label$6 }
	*($7) = $0
	$7 = ($7 + [1])
	if ( ((uint_32)$7 >= (uint_32)$4) ){ goto $label$3 }
	$0 = *($1)
	$1 = ($1 + [1])
	if ( ($0 & [255]) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$6
	if ( ((uint_32)$6 > (uint_32)[9]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$9
	$8 = *($2)
	if ( ($8 == 0) ){ goto $label$8 }
	$0 = [0]
	
.LOOP $label$11:
	*(($9 = ($7 + $0))) = $8
	$10 = ($0 + [1])
	if ( ((uint_32)($9 + [1]) >= (uint_32)$4) ){ goto $label$10 }
	$8 = ($5 + $0)
	$0 = $10
	$8 = *($8)
	if ( ($8 & [255]) ){ goto $label$11 }
	
.LABEL $label$10
	$7 = ($7 + $10)
	
.LABEL $label$8
	if ( ((uint_32)$7 >= (uint_32)$4) ){ goto $label$3 }
	$6 = ($6 + [1])
	$0 = *($1)
	if ( ($0 & [255]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = $3
	
.LABEL $label$3
	*($7) = [0]
	CALL eosio_assert([0], $3)
	
.LABEL $label$2
	$global$0 = ($3 + [512])
	return (unreachable)
	
.LABEL $label$1
	$6
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [560])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)0
	$4 = [0]
	$0 = CALL db_find_i64($3, $3, (int_64)-6499392009015709696, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $42(($2 + [8]), $0)
	if ( ((int_32)*($4 + [32]) == (int_32)($2 + [8])) ){ goto $label$1 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$1
	CALL $47(((int_32)$4 != (int_32)[0]), [8473], [8488])
	if ( (*($4 + [8]) == 0) ){ goto $label$3 }
	$3 = CALL $34()
	if ( ((uint_32)*(($4 + [8])) > (uint_32)(CASTING uint_32)(uint_64 ((int_64)$3 / (int_64)1000000))) ){ goto $label$3 }
	$5 = ($2 + [548])
	$6 = [99]
	$0 = [0]
	
.LOOP $label$4:
	if ( ((int_32)($6 & [255]) == (int_32)[37]) ){ goto $label$2 }
	*(($7 = (($2 + [48]) + $0))) = $6
	$8 = ($0 + [1])
	if ( ((uint_32)($7 + [1]) >= (uint_32)$5) ){ goto $label$5 }
	$6 = ($0 + [8504])
	$0 = $8
	$6 = *($6)
	if ( ($6 & [255]) ){ goto $label$4 }
	
.LABEL $label$5
	*((($2 + [48]) + $8)) = [0]
	CALL eosio_assert([0], ($2 + [48]))
	
.LABEL $label$3
	*($2 + [48]) = $1
	if ( $4 ){ goto $label$6 }
	CALL eosio_assert([0], [10392])
	
.LABEL $label$6
	CALL $48(($2 + [8]), $4, (int_64)0, ($2 + [48]))
	$8 = *($2 + [32])
	if ( ($8 == 0) ){ goto $label$7 }
	$7 = ($2 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $9($6)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($2 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $8
	
.LABEL $label$8
	*($7) = $8
	CALL $9($0)
	
.LABEL $label$7
	$global$0 = ($2 + [560])
	return (unreachable)
	
.LABEL $label$2
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $33($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9729])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [9729])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9729])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [9729])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [9729])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [9729])
	$4 = *(($3 + [4]))
	
.LABEL $label$6
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$3 = *($0 + [24])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [9729])
	$1 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($1, $3, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
}

int_32 .FUNC $124 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [136]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $1($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*((($4 + [64]) + [24])) = (int_64)0
	*(($4 + [80])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $3
	*($4 + [48]) = $3
	*($4 + [56]) = ($3 + $2)
	*($4 + [16]) = ($4 + [48])
	CALL $136(($4 + [64]), ($4 + [16]))
	*(($5 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [144]) + [8]))) = *($5)
	*($4 + [144]) = *($4)
	*(($5 = (($4 + [160]) + [8]))) = *($6)
	*($4 + [160]) = *($4 + [144])
	$5 = *($5)
	*((($4 + [176]) + [8])) = $5
	*((($4 + [16]) + [24])) = $5
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [160])
	*($4 + [32]) = $0
	*($4 + [176]) = $0
	*($4 + [180]) = ($4 + [136])
	*($4 + [176]) = ($4 + [16])
	CALL $137(($4 + [176]), ($4 + [64]))
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL $2($3)
	
.LABEL $label$5
	$3 = *(($4 + [108]))
	if ( ($3 == 0) ){ goto $label$6 }
	*(($4 + [112])) = $3
	CALL $9($3)
	
.LABEL $label$6
	$3 = *(($4 + [96]))
	if ( ($3 == 0) ){ goto $label$7 }
	*(($4 + [100])) = $3
	CALL $9($3)
	
.LABEL $label$7
	$global$0 = ($4 + [192])
	return [1]
}

int_32 .FUNC $128 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [32]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9829])
	
.LABEL $label$5
	CALL memcpy(($4 + [32]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = $3
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [40]) = *($4 + [32])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 ($4 + [40])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $2($2)
	
.LABEL $label$7
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $8 (int_32 $0)
{
	return CALL $7($0)
}

void .FUNC $9 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

int_32 .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $4())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $5($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $1($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $1($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $4 ()
{
	return [8208]
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $1($1)
	
.LABEL $label$2
	*(CALL $4()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $1(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $2($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $2 (int_32 $0)
{
}

void .FUNC $3 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

void .FUNC $0 ()
{
	CALL $3()
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8232])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	CALL $13($0, $1)
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_64 .FUNC $17 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $10 (int_32 $0)
{
	CALL $9($0)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $6(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $6(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	return CALL $11($0, $1)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = *($2)
	$5 = ((CASTING uint_32)(uint_64 $4) & [255])
	$6 = (int_64)0
	$7 = [0]
	$8 = [0]
	$2 = *($3)
	if ( ((int_32)$2 > (int_32)[43]) ){ goto $label$2 }
	$9 = [21]
	goto $label$1 
	
.LABEL $label$2
	$9 = [4]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$64 
	
.LABEL $label$71
	$3 = ($3 + [1])
	$2 = *($3)
	if ( ((int_32)$2 > (int_32)[43]) ){ goto $label$35 }
	$9 = [21]
	goto $label$3 
	
.LABEL $label$70
	if ( ($2 == 0) ){ goto $label$26 }
	$9 = [22]
	goto $label$3 
	
.LABEL $label$69
	if ( ((int_32)$2 == (int_32)[32]) ){ goto $label$31 }
	$9 = [1]
	goto $label$3 
	
.LABEL $label$68
	if ( ((uint_32)(($2 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$30 }
	$9 = [32]
	goto $label$3 
	
.LABEL $label$67
	if ( (($8 & [1]) == 0) ){ goto $label$4 }
	$9 = [35]
	goto $label$3 
	
.LABEL $label$66
	$10 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$65
	if ( ((int_32)$2 == (int_32)[44]) ){ goto $label$32 }
	$9 = [0]
	goto $label$3 
	
.LABEL $label$64
	if ( ((int_32)$2 != (int_32)[125]) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$63
	$10 = ((int_32)$8 ^ (int_32)[-1])
	$8 = [1]
	if ( ($10 & ((int_32)$2 == (int_32)[46])) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$62
	$10 = $7
	$9 = [34]
	goto $label$3 
	
.LABEL $label$61
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	$7 = $10
	goto $label$27 
	
.LABEL $label$60
	$10 = $7
	$9 = [6]
	goto $label$3 
	
.LABEL $label$59
	$2 = ($5 - $10)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$22 }
	$9 = [19]
	goto $label$3 
	
.LABEL $label$58
	$9 = [20]
	goto $label$3 
	
.LABEL $label$57
	$6 = ((int_64)$6 * (int_64)10)
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$23 }
	$9 = [7]
	goto $label$3 
	
.LABEL $label$56
	*($0 + [8]) = $4
	*($0) = $6
	if ( (uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$21 }
	$9 = [8]
	goto $label$3 
	
.LABEL $label$55
	CALL eosio_assert([0], [9660])
	$9 = [9]
	goto $label$3 
	
.LABEL $label$54
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	$9 = [10]
	goto $label$3 
	
.LABEL $label$53
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$9 = [13]
	goto $label$3 
	
.LABEL $label$52
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$9 = [14]
	goto $label$3 
	
.LABEL $label$51
	$6 = $4
	$3 = $2
	$2 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$50
	$6 = $4
	$9 = [16]
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$9 = [17]
	goto $label$3 
	
.LABEL $label$48
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$8 = ($2 + [1])
	$2 = $8
	if ( $3 ){ goto $label$9 }
	$9 = [18]
	goto $label$3 
	
.LABEL $label$47
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$46
	CALL eosio_assert([0], [9709])
	$9 = [12]
	goto $label$3 
	
.LABEL $label$45
	return 
	
.LABEL $label$44
	*($0 + [8]) = $4
	*($0) = (int_64)0
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	$9 = [24]
	goto $label$3 
	
.LABEL $label$43
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = [26]
	goto $label$3 
	
.LABEL $label$42
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$9 = [27]
	goto $label$3 
	
.LABEL $label$41
	$6 = $4
	$3 = $2
	$2 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$40
	$6 = $4
	$9 = [29]
	goto $label$3 
	
.LABEL $label$39
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$9 = [30]
	goto $label$3 
	
.LABEL $label$38
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$8 = ($2 + [1])
	$2 = $8
	if ( $3 ){ goto $label$5 }
	$9 = [31]
	goto $label$3 
	
.LABEL $label$37
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$36
	CALL eosio_assert([0], [9709])
	return 
	
.LABEL $label$35
	$9 = [4]
	goto $label$3 
	
.LABEL $label$34
	$9 = [5]
	goto $label$3 
	
.LABEL $label$33
	$9 = [1]
	goto $label$3 
	
.LABEL $label$32
	$9 = [5]
	goto $label$3 
	
.LABEL $label$31
	$9 = [5]
	goto $label$3 
	
.LABEL $label$30
	$9 = [2]
	goto $label$3 
	
.LABEL $label$29
	$9 = [23]
	goto $label$3 
	
.LABEL $label$28
	$9 = [3]
	goto $label$3 
	
.LABEL $label$27
	$9 = [3]
	goto $label$3 
	
.LABEL $label$26
	$9 = [5]
	goto $label$3 
	
.LABEL $label$25
	$9 = [6]
	goto $label$3 
	
.LABEL $label$24
	$9 = [34]
	goto $label$3 
	
.LABEL $label$23
	$9 = [20]
	goto $label$3 
	
.LABEL $label$22
	$9 = [7]
	goto $label$3 
	
.LABEL $label$21
	$9 = [9]
	goto $label$3 
	
.LABEL $label$20
	$9 = [10]
	goto $label$3 
	
.LABEL $label$19
	$9 = [12]
	goto $label$3 
	
.LABEL $label$18
	$9 = [10]
	goto $label$3 
	
.LABEL $label$17
	$9 = [12]
	goto $label$3 
	
.LABEL $label$16
	$9 = [11]
	goto $label$3 
	
.LABEL $label$15
	$9 = [11]
	goto $label$3 
	
.LABEL $label$14
	$9 = [24]
	goto $label$3 
	
.LABEL $label$13
	$9 = [12]
	goto $label$3 
	
.LABEL $label$12
	$9 = [24]
	goto $label$3 
	
.LABEL $label$11
	$9 = [12]
	goto $label$3 
	
.LABEL $label$10
	$9 = [15]
	goto $label$3 
	
.LABEL $label$9
	$9 = [16]
	goto $label$3 
	
.LABEL $label$8
	$9 = [25]
	goto $label$3 
	
.LABEL $label$7
	$9 = [25]
	goto $label$3 
	
.LABEL $label$6
	$9 = [28]
	goto $label$3 
	
.LABEL $label$5
	$9 = [29]
	goto $label$3 
	
.LABEL $label$4
	$9 = [33]
	goto $label$3 
	$9
}

int_64 .FUNC $18 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_32 .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [1] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $21($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $21($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $21($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $21($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [8304]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $21($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $21($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $21($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	$5 = ($global$0 - [688])
	$global$0 = $5
	if ( ((int_64)*($2) != (int_64)*($0)) ){ goto $label$1 }
	$2 = CALL $15([8387])
	if ( ($2 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9977])
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = (int_64)0
	
.LOOP $label$6:
	$7 = *(($2 + [8386]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [10022])
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$2 
	
.LABEL $label$3
	$6 = (int_64)0
	
.LABEL $label$2
	if ( ((int_64)*($3 + [8]) == (int_64)((int_64)$6 | (int_64)4)) ){ goto $label$1 }
	$6 = *($0 + [8])
	CALL $59(($5 + [80]), $0)
	$2 = [0]
	if ( ((int_64)$6 != (int_64)*($5 + [128])) ){ goto $label$8 }
	$2 = CALL $15([8551])
	if ( ($2 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9977])
	goto $label$11 
	
.LABEL $label$12
	if ( ($2 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$6 = (int_64)0
	
.LOOP $label$13:
	$7 = *(($2 + [8550]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [10022])
	
.LABEL $label$14
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$13 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$9 
	
.LABEL $label$10
	$6 = (int_64)0
	
.LABEL $label$9
	$2 = ((int_64)*(($3 + [8])) == (int_64)((int_64)$6 | (int_64)9))
	
.LABEL $label$8
	$8 = ($3 + [8])
	*(($7 = (($5 + [64]) + [8]))) = *($8)
	*($5 + [64]) = *($3)
	*(($9 = (($5 + [664]) + [8]))) = *($7)
	*($5 + [664]) = *($5 + [64])
	if ( $2 ){ goto $label$15 }
	$6 = *($9)
	*((($5 + [592]) + [8])) = $6
	*((($5 + [16]) + [8])) = $6
	$6 = *($5 + [664])
	*($5 + [16]) = $6
	*($5 + [592]) = $6
	CALL eosio_assert([0], CALL $60([8555], ($5 + [16])))
	
.LABEL $label$15
	$6 = *($8)
	if ( (int_64)($6 == 0) ){ goto $label$17 }
	$2 = [1]
	
.LOOP $label$18:
	$2 = ((int_32)$2 * (int_32)[10])
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)($6 == 0) == 0) ){ goto $label$18 }
	$10 = (CASTING float_64)(int_32 $2)
	goto $label$16 
	
.LABEL $label$17
	$10 = (float_64)1
	
.LABEL $label$16
	*(($2 = (($5 + [48]) + [8]))) = *(($3 + [8]))
	$6 = *($3)
	*($5 + [48]) = $6
	*(($7 = (($5 + [592]) + [8]))) = *($2)
	*($5 + [592]) = *($5 + [48])
	if ( ((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)$10) >= (float_64)(float_64)2) ){ goto $label$19 }
	$6 = *($7)
	*((($5 + [80]) + [8])) = $6
	*(($5 + [8])) = $6
	$6 = *($5 + [592])
	*($5) = $6
	*($5 + [80]) = $6
	CALL eosio_assert([0], CALL $60([8570], $5))
	
.LABEL $label$19
	$2 = *($4)
	$7 = CALL $15([8588])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$26 }
	$2 = CALL $31($4, [0], [-1], [8588], $7)
	CALL $25(($5 + [32]), $4)
	if ( $2 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	CALL $25(($5 + [32]), $4)
	
.LABEL $label$25
	$11 = CALL $25(($5 + [592]), ($5 + [32]))
	$12 = ($11 + [1])
	$8 = ($5 + [580])
	$13 = [0]
	$4 = [8598]
	$2 = [87]
	$7 = ($5 + [80])
	$14 = ($11 + [8])
	
.LOOP $label$27:
	$4 = ($4 + [1])
	
.LOOP $label$30:
	if ( ((int_32)($2 & [255]) == (int_32)[37]) ){ goto $label$29 }
	*($7) = $2
	$7 = ($7 + [1])
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$28 }
	$2 = *($4)
	$4 = ($4 + [1])
	if ( ($2 & [255]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	if ( ((uint_32)$13 > (uint_32)[9]) ){ goto $label$31 }
	goto $label$32 
	
.LABEL $label$32
	$2 = ( *($14) ? $12 : (*($5 + [592]) & [1]) )
	$9 = *($2)
	if ( ($9 == 0) ){ goto $label$31 }
	$15 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$34:
	*(($16 = ($7 + $2))) = $9
	$17 = ($2 + [1])
	if ( ((uint_32)($16 + [1]) >= (uint_32)$8) ){ goto $label$33 }
	$9 = ($15 + $2)
	$2 = $17
	$9 = *($9)
	if ( ($9 & [255]) ){ goto $label$34 }
	
.LABEL $label$33
	$7 = ($7 + $17)
	
.LABEL $label$31
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$28 }
	$13 = ($13 + [1])
	$2 = *($4)
	if ( ($2 & [255]) ){ goto $label$27 }
	
.LABEL $label$28
	*($7) = [0]
	CALL eosio_assert([0], ($5 + [80]))
	if ( ((*($5 + [592]) & [1]) == 0) ){ goto $label$24 }
	CALL $9(*(($11 + [8])))
	
.LABEL $label$24
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$35 }
	CALL $9(*($5 + [40]))
	
.LABEL $label$35
	*(($5 + [112])) = [0]
	*($5 + [96]) = (int_64)-1
	*($5 + [104]) = (int_64)0
	$6 = *($0)
	*($5 + [80]) = $6
	*($5 + [88]) = $6
	$2 = CALL db_find_i64($6, $6, (int_64)-4138943994219073536, *($1))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$36 }
	$2 = CALL $50(($5 + [80]), $2)
	if ( ((int_32)*($2 + [36]) == (int_32)($5 + [80])) ){ goto $label$37 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$37
	*($5 + [592]) = $3
	CALL $61(($5 + [80]), $2, (int_64)0, ($5 + [592]))
	$4 = *($5 + [104])
	if ( $4 ){ goto $label$20 }
	goto $label$1 
	
.LABEL $label$36
	$18 = *($0)
	if ( ((int_64)CALL current_receiver() == (int_64)*($5 + [80])) ){ goto $label$38 }
	CALL eosio_assert([0], [10341])
	
.LABEL $label$38
	*(($2 = CALL $7([48])) + [16]) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [28]) = [0]
	*($2 + [36]) = ($5 + [80])
	*($2) = *($1)
	*($2 + [8]) = *($3)
	*($2 + [16]) = *(($3 + [8]))
	*($2 + [32]) = ((CASTING uint_32)(uint_64 ((int_64)CALL $34() / (int_64)1000000)) + [86400])
	*($5 + [648]) = (($5 + [592]) + [36])
	*($5 + [644]) = ($5 + [592])
	*($5 + [640]) = ($5 + [592])
	*($5 + [656]) = ($5 + [640])
	*($5 + [668]) = ($2 + [8])
	*($5 + [664]) = $2
	*($5 + [672]) = ($2 + [24])
	*($5 + [676]) = ($2 + [28])
	*($5 + [680]) = ($2 + [32])
	CALL $62(($5 + [664]), ($5 + [656]))
	$6 = *($2)
	$4 = CALL db_store_i64(*((($5 + [80]) + [8])), (int_64)-4138943994219073536, $18, $6, ($5 + [592]), [36])
	*($2 + [40]) = $4
	$7 = ($5 + [96])
	if ( (uint_64)($6 <= *($7)) ){ goto $label$39 }
	*($7) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$39
	*($5 + [664]) = $2
	$6 = *($2)
	*($5 + [592]) = $6
	*($5 + [640]) = $4
	$7 = *((($5 + [80]) + [28]))
	if ( ((uint_32)$7 >= (uint_32)*((($5 + [80]) + [32]))) ){ goto $label$40 }
	*($7 + [8]) = $6
	*($7 + [16]) = $4
	*($5 + [664]) = [0]
	*($7) = $2
	*(($5 + [108])) = ($7 + [24])
	$2 = *($5 + [664])
	*($5 + [664]) = [0]
	if ( ($2 == 0) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$40
	CALL $63(($5 + [104]), ($5 + [664]), ($5 + [592]), ($5 + [640]))
	$2 = *($5 + [664])
	*($5 + [664]) = [0]
	if ( $2 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	
.LABEL $label$22
	CALL $9($2)
	
.LABEL $label$21
	$4 = *($5 + [104])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$20
	$8 = ($5 + [108])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$42 }
	
.LOOP $label$43:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$44 }
	CALL $9($7)
	
.LABEL $label$44
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$43 }
	$2 = *(($5 + [104]))
	goto $label$41 
	
.LABEL $label$42
	$2 = $4
	
.LABEL $label$41
	*($8) = $4
	CALL $9($2)
	$global$0 = ($5 + [688])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [688])
	$13
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [16]) = (int_64)6138578513746825616
	*($2 + [8]) = (int_64)6138578513746825616
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = [0]
	$4 = CALL db_find_i64((int_64)6138578513746825616, (int_64)6138578513746825616, (int_64)5075421983279886336, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $64(($2 + [8]), $4)
	if ( ((int_32)*($3 + [200]) == (int_32)($2 + [8])) ){ goto $label$1 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$1
	CALL $65(((int_32)$3 != (int_32)[0]), (int_64)5075421983279886336)
	CALL memcpy($0, $3, [200])
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ($2 + [36])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $9($0)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$5 }
	$3 = *(($2 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$3 = $4
	
.LABEL $label$3
	*($5) = $4
	CALL $9($3)
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9806])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $7([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [28 align=4]) = (int_64)0
	*($5 + [36]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [28])
	*($3 + [56]) = ($5 + [32])
	CALL $147(($3 + [40]), ($3 + [32]))
	*($5 + [40]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $63(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $7($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $33($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $9($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [9729])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$0 = ($5 + [16])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9729])
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $0, [8])
	$0 = (*($4) + [8])
	*(($4 = ($1 + [4]))) = $0
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($1 + [8])) - $0) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9729])
	$0 = *($4)
	
.LABEL $label$4
	CALL memcpy($0, ($2 + [8]), [8])
	*($4) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $7(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $33($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL $7([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $51(($7 + [28]), [28])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $52(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL $9($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL $9($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $9($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = [0]
	CALL $56(($4 + [16]), $0)
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $51($4, $6)
	$5 = *($4 + [4])
	$6 = *($4)
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $6
	*($4 + [16]) = $6
	*($4 + [24]) = $5
	CALL $57(($4 + [16]), $0)
	$0 = *($4)
	CALL send_deferred($1, $2, $0, (*($4 + [4]) - $0), $3)
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$3 }
	*($4 + [4]) = $0
	CALL $9($0)
	
.LABEL $label$3
	$global$0 = ($4 + [32])
}

int_64 .FUNC $34 ()
{
	int_64 $0
	if ( (*([0] + [8220]) == 0) ){ goto $label$1 }
	return *([0] + [8224])
	
.LABEL $label$1
	$0 = CALL current_time()
	*([0] + [8220]) = [1]
	*([0] + [8224]) = $0
	return $0
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $138($0, $1)
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9729])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [14]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *(($1 + [28]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $72($0, $6)
	$6 = ($6 + [40])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [40])) - *($1 + [36])) / (int_32)[40]))
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$5:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [9729])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$5 }
	$6 = *(($1 + [40]))
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $72($0, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = CALL $139($0, ($1 + [48]))
	$global$0 = ($2 + [16])
	return $4
}

void .FUNC $116 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [92]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10427])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10473])
	
.LABEL $label$2
	*($1 + [40]) = [0]
	*($1 + [64]) = [0]
	*($1 + [88]) = [0]
	$5 = *($1 + [8])
	$6 = $3
	$3 = ($6 + [-80])
	$global$0 = $3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = $6
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = ($1 + [16])
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [24])
	*($4 + [44]) = ($1 + [40])
	*($4 + [48]) = ($1 + [48])
	*($4 + [52]) = ($1 + [64])
	*($4 + [56]) = ($1 + [72])
	*($4 + [60]) = ($1 + [88])
	CALL $152(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [96]), $2, $3, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [96])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [88])) = [0]
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	$3 = *($0)
	*($2 + [56]) = $3
	*($2 + [64]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-6499411808120471552, *($1))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $77(($2 + [56]), $5)
	if ( ((int_32)*($4 + [92]) == (int_32)($2 + [56])) ){ goto $label$1 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$1
	CALL $78(((int_32)$4 != (int_32)[0]), [8722], *($1))
	$3 = CALL $34()
	CALL $79(($2 + [16]), $0)
	*($2 + [48]) = ((CASTING uint_32)(uint_64 ((int_64)$3 / (int_64)1000000)) - *($2 + [28]))
	*($2 + [8]) = ($2 + [48])
	if ( $4 ){ goto $label$2 }
	CALL eosio_assert([0], [10392])
	
.LABEL $label$2
	CALL $118(($2 + [56]), $4, (int_64)0, ($2 + [8]))
	CALL $112($0, $1, $0)
	$1 = *($2 + [80])
	if ( ($1 == 0) ){ goto $label$3 }
	$5 = ($2 + [84])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $9($4)
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [80]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $1
	
.LABEL $label$4
	*($5) = $1
	CALL $9($0)
	
.LABEL $label$3
	$global$0 = ($2 + [96])
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	CALL $112($0, $1, $0)
}

int_64 .FUNC $35 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = CALL $34()
	CALL $79(($3 + [48]), $0)
	$5 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$6 = *($0)
	*($3 + [8]) = $6
	*($3 + [16]) = $6
	$4 = ((int_64)$4 / (int_64)1000000)
	$7 = CALL db_find_i64($6, $6, (int_64)-6499411808120471552, *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = (CASTING uint_32)(uint_64 $4)
	$5 = CALL $77(($3 + [8]), $7)
	if ( ((int_32)*($5 + [92]) == (int_32)($3 + [8])) ){ goto $label$4 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$4
	$7 = *($5 + [40])
	if ( ((uint_32)$7 >= (uint_32)($8 - *($3 + [60]))) ){ goto $label$1 }
	if ( (CALL $106($0, $1) == 0) ){ goto $label$3 }
	$5 = ($5 + [40])
	goto $label$2 
	
.LABEL $label$3
	CALL $107($0, $1)
	$5 = ($5 + [40])
	
.LABEL $label$2
	$7 = *($5)
	
.LABEL $label$1
	if ( ($7 == 0) ){ goto $label$5 }
	*($3) = (int_64)-7948407639397191472
	CALL $109($0, $1, $3, ($3 + [68]))
	
.LABEL $label$5
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$6 }
	$7 = ($3 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($3 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $5
	
.LABEL $label$7
	*($7) = $5
	CALL $9($0)
	
.LABEL $label$6
	$global$0 = ($3 + [80])
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	CALL $112($0, $1, $0)
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $7(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $33($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL $7([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $51(($7 + [28]), [8])
	$1 = *(($7 + [32]))
	$2 = *($7 + [28])
	*($5 + [8]) = *($4)
	$9 = ((int_32)$9 * (int_32)[40])
	if ( ((int_32)($1 - $2) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9729])
	
.LABEL $label$5
	$10 = ($6 + $9)
	CALL memcpy($2, ($5 + [8]), [8])
	$11 = ($7 + [40])
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$7 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$8:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$8 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$6 
	
.LABEL $label$7
	$6 = $2
	
.LABEL $label$6
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$11 }
	*(($2 + [-8])) = $9
	CALL $9($9)
	
.LABEL $label$11
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$12 }
	*(($2 + [-20])) = $1
	CALL $9($1)
	
.LABEL $label$12
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $9($6)
	
.LABEL $label$13
	$global$0 = ($5 + [16])
	(unreachable)
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_64 $41
	int_64 $42
	int_64 $43
	int_32 $44
	int_32 $45
	int_32 $46
	int_32 $47
	int_32 $48
	int_32 $49
	int_32 $50
	$3 = ($global$0 - [528])
	$global$0 = $3
	*($3 + [8]) = *($1)
	*($3) = *($2)
	$4 = CALL cancel_deferred($3)
	$6 = *($3 + [8])
	$5 = *($3)
	$7 = ((int_64)(uint_64)$5 >> (uint_64)(int_64)8) | (int_64)((int_64)$6 << (int_64)56)
	$8 = ((int_64)$7) & (int_64)15
	$9 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($8) <= (int_64)10) ) + (int_64)$8))
	$7 = ((int_64)$7 & (int_64)255)
	$10 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($7 <= (int_64)160) ) + (int_64)(uint_64)$7 >> (uint_64)(int_64)4)))
	$7 = ((int_64)(uint_64)$5 >> (uint_64)(int_64)16) | (int_64)((int_64)$6 << (int_64)48)
	$8 = ((int_64)$7) & (int_64)15
	$11 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($8) <= (int_64)10) ) + (int_64)$8))
	$7 = ((int_64)$7 & (int_64)255)
	$12 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($7 <= (int_64)160) ) + (int_64)(uint_64)$7 >> (uint_64)(int_64)4)))
	$7 = ((int_64)(uint_64)$5 >> (uint_64)(int_64)24) | (int_64)((int_64)$6 << (int_64)40)
	$8 = ((int_64)$7) & (int_64)15
	$13 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($8) <= (int_64)10) ) + (int_64)$8))
	$7 = ((int_64)$7 & (int_64)255)
	$14 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($7 <= (int_64)160) ) + (int_64)(uint_64)$7 >> (uint_64)(int_64)4)))
	$7 = ((int_64)(uint_64)$5 >> (uint_64)(int_64)32) | (int_64)((int_64)$6 << (int_64)32)
	$8 = ((int_64)$7) & (int_64)15
	$15 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($8) <= (int_64)10) ) + (int_64)$8))
	$7 = ((int_64)$7 & (int_64)255)
	$16 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($7 <= (int_64)160) ) + (int_64)(uint_64)$7 >> (uint_64)(int_64)4)))
	$7 = ((int_64)(uint_64)$5 >> (uint_64)(int_64)40) | (int_64)((int_64)$6 << (int_64)24)
	$8 = ((int_64)$7) & (int_64)15
	$17 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($8) <= (int_64)10) ) + (int_64)$8))
	$7 = ((int_64)$7 & (int_64)255)
	$18 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($7 <= (int_64)160) ) + (int_64)(uint_64)$7 >> (uint_64)(int_64)4)))
	$7 = ((int_64)(uint_64)$5 >> (uint_64)(int_64)48) | (int_64)((int_64)$6 << (int_64)16)
	$8 = ((int_64)$7) & (int_64)15
	$19 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($8) <= (int_64)10) ) + (int_64)$8))
	$7 = ((int_64)$7 & (int_64)255)
	$20 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($7 <= (int_64)160) ) + (int_64)(uint_64)$7 >> (uint_64)(int_64)4)))
	$7 = ((int_64)(uint_64)$5 >> (uint_64)(int_64)56) | (int_64)((int_64)$6 << (int_64)8)
	$8 = ((int_64)$7) & (int_64)15
	$21 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($8) <= (int_64)10) ) + (int_64)$8))
	$7 = ((int_64)$7 & (int_64)255)
	$22 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($7 <= (int_64)160) ) + (int_64)(uint_64)$7 >> (uint_64)(int_64)4)))
	$23 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($6 <= (int_64)-6917529027641081856) ) + (int_64)(uint_64)$6 >> (uint_64)(int_64)60)))
	$7 = ((int_64)$5 & (int_64)15)
	$24 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($7 <= (int_64)10) ) + (int_64)$7))
	$5 = ((int_64)$5 & (int_64)255)
	$25 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($5 <= (int_64)160) ) + (int_64)(uint_64)$5 >> (uint_64)(int_64)4)))
	$5 = ((int_64)$6 & (int_64)15)
	$26 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($5 <= (int_64)10) ) + (int_64)$5))
	$5 = ((int_64)$6 & (int_64)255)
	$27 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($5 <= (int_64)160) ) + (int_64)(uint_64)$5 >> (uint_64)(int_64)4)))
	$5 = (uint_64)$6 >> (uint_64)(int_64)8
	$7 = ((int_64)$5) & (int_64)15
	$28 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($7) <= (int_64)10) ) + (int_64)$7))
	$5 = ((int_64)$5 & (int_64)255)
	$29 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($5 <= (int_64)160) ) + (int_64)(uint_64)$5 >> (uint_64)(int_64)4)))
	$5 = (uint_64)$6 >> (uint_64)(int_64)16
	$7 = ((int_64)$5) & (int_64)15
	$30 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($7) <= (int_64)10) ) + (int_64)$7))
	$5 = ((int_64)$5 & (int_64)255)
	$31 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($5 <= (int_64)160) ) + (int_64)(uint_64)$5 >> (uint_64)(int_64)4)))
	$5 = (uint_64)$6 >> (uint_64)(int_64)24
	$7 = ((int_64)$5) & (int_64)15
	$32 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($7) <= (int_64)10) ) + (int_64)$7))
	$5 = ((int_64)$5 & (int_64)255)
	$33 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($5 <= (int_64)160) ) + (int_64)(uint_64)$5 >> (uint_64)(int_64)4)))
	$5 = (uint_64)$6 >> (uint_64)(int_64)32
	$7 = ((int_64)$5) & (int_64)15
	$34 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($7) <= (int_64)10) ) + (int_64)$7))
	$5 = ((int_64)$5 & (int_64)255)
	$35 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($5 <= (int_64)160) ) + (int_64)(uint_64)$5 >> (uint_64)(int_64)4)))
	$5 = (uint_64)$6 >> (uint_64)(int_64)40
	$7 = ((int_64)$5) & (int_64)15
	$36 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($7) <= (int_64)10) ) + (int_64)$7))
	$5 = ((int_64)$5 & (int_64)255)
	$37 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($5 <= (int_64)160) ) + (int_64)(uint_64)$5 >> (uint_64)(int_64)4)))
	$5 = (uint_64)$6 >> (uint_64)(int_64)48
	$7 = ((int_64)$5) & (int_64)15
	$38 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($7) <= (int_64)10) ) + (int_64)$7))
	$5 = ((int_64)$5 & (int_64)255)
	$39 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($5 <= (int_64)160) ) + (int_64)(uint_64)$5 >> (uint_64)(int_64)4)))
	$6 = ((int_64)(uint_64)$6 >> (uint_64)(int_64)56) & (int_64)15
	$40 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($6) <= (int_64)10) ) + (int_64)$6))
	$6 = *($1)
	$41 = (uint_64)$6 >> (uint_64)(int_64)8)
	$42 = (CASTING int_64)(int_32 $4)
	$43 = (int_64))((int_64)0 - $42)
	$7 = ((int_64)$6 & (int_64)255)
	$8 = *($2)
	$44 = ($3 + [516])
	$45 = [0]
	$46 = [9477]
	$47 = ($3 + [16])
	$48 = ((int_32)$4 > (int_32)[-1])
	$1 = [13]
	
.LOOP $label$3:
	$49 = ($46 + [1])
	$2 = [0]
	
.LOOP $label$6:
	$4 = ($47 + $2)
	if ( ((int_32)($1 & [255]) == (int_32)[37]) ){ goto $label$5 }
	*($4) = $1
	$50 = ($2 + [1])
	if ( ((uint_32)($4 + [1]) >= (uint_32)$44) ){ goto $label$4 }
	$1 = ($49 + $2)
	$2 = $50
	$1 = *($1)
	if ( ($1 & [255]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((uint_32)$45 > (uint_32)[9]) ){ goto $label$13 }
	goto $label$15 
	
.LABEL $label$15
	if ( $48 ){ goto $label$18 }
	*($4) = [45]
	$47 = (($4 + [1]) + [1])
	$6 = $43
	$5 = $6
	if ( ((uint_64)$6 >= (uint_64)(int_64)10) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$47 = ($4 + [1])
	$6 = $42
	$5 = $6
	if ( (uint_64)($6 <= (int_64)10) ){ goto $label$16 }
	
.LABEL $label$17
	
.LOOP $label$19:
	$47 = ($47 + [1])
	$1 = ((uint_64)$5 > (uint_64)(int_64)99)
	$5 = ((uint_64)$5 / (uint_64)(int_64)10)
	if ( $1 ){ goto $label$19 }
	
.LABEL $label$16
	if ( ((uint_32)$47 > (uint_32)$44) ){ goto $label$8 }
	$1 = ($47 + [-1])
	
.LOOP $label$20:
	$5 = ((uint_64)$6 / (uint_64)(int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($6 - ((int_64)$5 * (int_64)10))) | [48])
	$1 = ($1 + [-1])
	$4 = ((uint_64)$6 > (uint_64)(int_64)9)
	$6 = $5
	if ( $4 ){ goto $label$20 }
	goto $label$8 
	
.LABEL $label$14
	$1 = ($47 + $2)
	$47 = ($1 + [32])
	if ( ((uint_32)$47 <= (uint_32)$44) ){ goto $label$10 }
	
.LABEL $label$13
	$47 = $4
	if ( ($47 <= $44) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$12
	$47 = CALL $67($4, $44, $8)
	if ( ($47 <= $44) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$11
	$4 = (($47 + $2) + [1])
	$6 = $7
	if ( (uint_64)($7 <= (int_64)10) ){ goto $label$21 }
	
.LOOP $label$22:
	$4 = ($4 + [1])
	$1 = ((uint_64)$6 > (uint_64)(int_64)99)
	$6 = ((uint_64)$6 / (uint_64)(int_64)10)
	if ( $1 ){ goto $label$22 }
	
.LABEL $label$21
	if ( ((uint_32)$4 > (uint_32)$44) ){ goto $label$23 }
	$1 = ($4 + [-1])
	$6 = $7
	
.LOOP $label$24:
	$5 = ((uint_64)$6 / (uint_64)(int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($6 - ((int_64)$5 * (int_64)10))) | [48])
	$1 = ($1 + [-1])
	$50 = ((uint_64)$6 > (uint_64)(int_64)9)
	$6 = $5
	if ( $50 ){ goto $label$24 }
	
.LABEL $label$23
	$47 = ($4 + [1])
	if ( ((uint_32)$47 <= (uint_32)$44) ){ goto $label$9 }
	$47 = $4
	if ( ($47 <= $44) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$10
	*($4) = $23
	*(($1 + [1])) = $40
	*(($1 + [2])) = $39
	*(($1 + [3])) = $38
	*(($1 + [4])) = $37
	*(($1 + [5])) = $36
	*(($1 + [6])) = $35
	*(($1 + [7])) = $34
	*(($1 + [8])) = $33
	*(($1 + [9])) = $32
	*(($1 + [10])) = $31
	*(($1 + [11])) = $30
	*(($1 + [12])) = $29
	*(($1 + [13])) = $28
	*(($1 + [14])) = $27
	*(($1 + [15])) = $26
	*(($1 + [16])) = $22
	*(($1 + [17])) = $21
	*(($1 + [18])) = $20
	*(($1 + [20])) = $18
	*(($1 + [19])) = $19
	*(($1 + [21])) = $17
	*(($1 + [22])) = $16
	*(($1 + [23])) = $15
	*(($1 + [24])) = $14
	*(($1 + [25])) = $13
	*(($1 + [26])) = $12
	*(($1 + [27])) = $11
	*(($1 + [28])) = $10
	*(($1 + [29])) = $9
	*(($1 + [30])) = $25
	*(($1 + [31])) = $24
	if ( ($47 <= $44) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	*($4) = [44]
	if ( (int_64)($41 == 0) ){ goto $label$8 }
	if ( ((uint_32)($4 + [8]) > (uint_32)$44) ){ goto $label$8 }
	$6 = $41
	
.LOOP $label$25:
	*($47) = $6
	$47 = ($47 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)($6) == 0) == 0) ){ goto $label$25 }
	
.LABEL $label$8
	if ( ((uint_32)$47 >= (uint_32)$44) ){ goto $label$2 }
	
.LABEL $label$7
	$45 = ($45 + [1])
	$46 = (($46 + $2) + [1])
	$1 = *($46)
	if ( ($1 & [255]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$47 = ($47 + $50)
	
.LABEL $label$2
	*($47) = [0]
	CALL prints(($3 + [16]))
	$global$0 = ($3 + [528])
	return (unreachable)
	
.LABEL $label$1
	$45
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9729])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$7 = ($0 + [4])
	$1 = ($0 + [8])
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$5 }
	$8 = [2]
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	goto $label$3 
	
.LABEL $label$4
	$8 = [3]
	
.LABEL $label$3
	
.LOOP $label$6:
	goto $label$10 
	
.LABEL $label$12
	$4 = *($7)
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$7 }
	$8 = [2]
	goto $label$6 
	
.LABEL $label$11
	CALL eosio_assert([0], [9729])
	$4 = *($7)
	$8 = [0]
	goto $label$6 
	
.LABEL $label$10
	CALL memcpy($4, $6, [2])
	*($7) = (*($7) + [2])
	CALL $140($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$8 = [3]
	goto $label$6 
	
.LABEL $label$9
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$8
	$8 = [1]
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	goto $label$6 
	return $8
}

void .FUNC $118 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [92]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10427])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10473])
	
.LABEL $label$2
	$3 = *($3)
	*($1 + [40]) = *($3)
	*($1 + [64]) = *($3)
	*($1 + [88]) = *($3)
	$6 = *($1 + [8])
	$3 = $4
	$4 = ($3 + [-80])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = $3
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = ($1 + [16])
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [24])
	*($5 + [44]) = ($1 + [40])
	*($5 + [48]) = ($1 + [48])
	*($5 + [52]) = ($1 + [64])
	*($5 + [56]) = ($1 + [72])
	*($5 + [60]) = ($1 + [88])
	CALL $152(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [96]), $2, $4, [80])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [64])
}

void .FUNC $119 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	float_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$1 = ($global$0 - [624])
	$global$0 = $1
	$2 = [0]
	*(($1 + [104])) = [0]
	*($1 + [88]) = (int_64)-1
	*($1 + [80]) = (int_64)6138877037701496832
	*($1 + [72]) = (int_64)5378237739411055264
	*($1 + [96]) = (int_64)0
	$3 = CALL db_lowerbound_i64((int_64)5378237739411055264, (int_64)6138877037701496832, (int_64)5310424360057438208, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$14 }
	CALL $120(($1 + [72]), $3)
	$2 = CALL db_end_i64(*($1 + [72]), *(($1 + [80])), (int_64)5310424360057438208)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$15 }
	CALL eosio_assert([0], [10075])
	
.LABEL $label$15
	$2 = CALL db_previous_i64($2, ($1 + [112]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$16 }
	CALL eosio_assert([0], [10075])
	
.LABEL $label$16
	$4 = *(CALL $120(($1 + [72]), $2) + [24])
	$5 = CALL $36((float_64)10, (float_64)0)
	$2 = CALL $15([8718])
	$3 = ($2 <= [8])
	$5 = ((float_64)$5 * (float_64)(CASTING float_64)(uint_64 $4))
	if ( ((float_64)(float_64)|$5| < (float_64)(float_64)9223372036854775808) ){ goto $label$13 }
	$6 = (int_64)-9223372036854775808
	if ( ($3 == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$7 = ($1 + [612])
	$3 = [13]
	
.LOOP $label$17:
	if ( ((int_32)($3 & [255]) == (int_32)[37]) ){ goto $label$6 }
	*(($8 = (($1 + [112]) + $2))) = $3
	$9 = ($2 + [1])
	if ( ((uint_32)($8 + [1]) >= (uint_32)$7) ){ goto $label$18 }
	$3 = ($2 + [9523])
	$2 = $9
	$3 = *($3)
	if ( ($3 & [255]) ){ goto $label$17 }
	
.LABEL $label$18
	*((($1 + [112]) + $9)) = [0]
	CALL prints(($1 + [112]))
	$9 = *($1 + [96])
	if ( $9 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$13
	$6 = (Rounds 0)($5)
	if ( $3 ){ goto $label$11 }
	
.LABEL $label$12
	CALL eosio_assert([0], [9977])
	goto $label$10 
	
.LABEL $label$11
	if ( $2 ){ goto $label$10 }
	$4 = (int_64)0
	goto $label$9 
	
.LABEL $label$10
	$4 = (int_64)0
	
.LOOP $label$19:
	$3 = *(($2 + [8717]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$20 }
	CALL eosio_assert([0], [10022])
	
.LABEL $label$20
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$19 }
	$4 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$9
	*($1 + [120]) = ((int_64)$4 | (int_64)4)
	*($1 + [112]) = $6
	if ( (uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$21 }
	CALL eosio_assert([0], [9660])
	
.LABEL $label$21
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$4 = $6
	$3 = $2
	$2 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$25
	$4 = $6
	
.LOOP $label$26:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$23 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $3 ){ goto $label$26 }
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	CALL eosio_assert([0], [9709])
	
.LABEL $label$22
	$2 = CALL db_end_i64(*($1 + [72]), *(($1 + [80])), (int_64)5310424360057438208)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$27 }
	CALL eosio_assert([0], [10075])
	
.LABEL $label$27
	$2 = CALL db_previous_i64($2, ($1 + [616]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$28 }
	CALL eosio_assert([0], [10075])
	
.LABEL $label$28
	$2 = CALL $120(($1 + [72]), $2)
	$4 = *((($1 + [112]) + [8]))
	*((($1 + [56]) + [8])) = $4
	$6 = *($2 + [24])
	*((($1 + [16]) + [8])) = $4
	$4 = *($1 + [112])
	*($1 + [56]) = $4
	*($1 + [16]) = $4
	CALL $121($6, ($1 + [16]))
	*($1 + [616]) = [1]
	*($1 + [52]) = [1]
	CALL $84($0, ($1 + [616]), ($1 + [52]), ($1 + [112]))
	$9 = *($1 + [96])
	if ( ($9 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$8 = ($1 + [100])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$30 }
	
.LOOP $label$31:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$32 }
	CALL $9($3)
	
.LABEL $label$32
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$31 }
	$2 = *(($1 + [96]))
	goto $label$29 
	
.LABEL $label$30
	$2 = $9
	
.LABEL $label$29
	*($8) = $9
	CALL $9($2)
	
.LABEL $label$7
	$2 = [0]
	*(($1 + [104])) = [0]
	*($1 + [88]) = (int_64)-1
	*($1 + [80]) = (int_64)6138755266788720640
	*($1 + [72]) = (int_64)5378237739411055264
	*($1 + [96]) = (int_64)0
	$3 = CALL db_lowerbound_i64((int_64)5378237739411055264, (int_64)6138755266788720640, (int_64)5310424360057438208, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$35 }
	CALL $120(($1 + [72]), $3)
	$2 = CALL db_end_i64(*($1 + [72]), *(($1 + [80])), (int_64)5310424360057438208)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$36 }
	CALL eosio_assert([0], [10075])
	
.LABEL $label$36
	$2 = CALL db_previous_i64($2, ($1 + [112]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$37 }
	CALL eosio_assert([0], [10075])
	
.LABEL $label$37
	$4 = *(CALL $120(($1 + [72]), $2) + [24])
	$5 = CALL $36((float_64)10, (float_64)5)
	$2 = CALL $15([8551])
	$3 = ($2 <= [8])
	$5 = ((float_64)$5 * (float_64)(CASTING float_64)(uint_64 $4))
	if ( ((float_64)(float_64)|$5| < (float_64)(float_64)9223372036854775808) ){ goto $label$34 }
	$6 = (int_64)-9223372036854775808
	if ( ($3 == 0) ){ goto $label$33 }
	goto $label$5 
	
.LABEL $label$35
	$7 = ($1 + [612])
	$3 = [13]
	
.LOOP $label$38:
	if ( ((int_32)($3 & [255]) == (int_32)[37]) ){ goto $label$6 }
	*(($8 = (($1 + [112]) + $2))) = $3
	$9 = ($2 + [1])
	if ( ((uint_32)($8 + [1]) >= (uint_32)$7) ){ goto $label$39 }
	$3 = ($2 + [9607])
	$2 = $9
	$3 = *($3)
	if ( ($3 & [255]) ){ goto $label$38 }
	
.LABEL $label$39
	*((($1 + [112]) + $9)) = [0]
	CALL prints(($1 + [112]))
	$9 = *($1 + [96])
	if ( $9 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$34
	$6 = (Rounds 0)($5)
	if ( $3 ){ goto $label$5 }
	
.LABEL $label$33
	CALL eosio_assert([0], [9977])
	goto $label$4 
	
.LABEL $label$6
	
.LABEL $label$5
	if ( $2 ){ goto $label$4 }
	$4 = (int_64)9
	goto $label$3 
	
.LABEL $label$4
	$4 = (int_64)0
	
.LOOP $label$40:
	$3 = *(($2 + [8550]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$41 }
	CALL eosio_assert([0], [10022])
	
.LABEL $label$41
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$40 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)9)
	
.LABEL $label$3
	*($1 + [120]) = $4
	*($1 + [112]) = $6
	if ( (uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$42 }
	CALL eosio_assert([0], [9660])
	
.LABEL $label$42
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$45:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$44 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$46 }
	$4 = $6
	$3 = $2
	$2 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$45 }
	goto $label$43 
	
.LABEL $label$46
	$4 = $6
	
.LOOP $label$47:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$44 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $3 ){ goto $label$47 }
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$45 }
	goto $label$43 
	
.LABEL $label$44
	CALL eosio_assert([0], [9709])
	
.LABEL $label$43
	$2 = CALL db_end_i64(*($1 + [72]), *(($1 + [80])), (int_64)5310424360057438208)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$48 }
	CALL eosio_assert([0], [10075])
	
.LABEL $label$48
	$2 = CALL db_previous_i64($2, ($1 + [616]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$49 }
	CALL eosio_assert([0], [10075])
	
.LABEL $label$49
	$2 = CALL $120(($1 + [72]), $2)
	$4 = *((($1 + [112]) + [8]))
	*((($1 + [32]) + [8])) = $4
	$6 = *($2 + [24])
	*(($1 + [8])) = $4
	$4 = *($1 + [112])
	*($1 + [32]) = $4
	*($1) = $4
	CALL $121($6, $1)
	*($1 + [616]) = [1]
	*($1 + [52]) = [0]
	CALL $84($0, ($1 + [616]), ($1 + [52]), ($1 + [112]))
	$9 = *($1 + [96])
	if ( ($9 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($1 + [100])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$51 }
	
.LOOP $label$52:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$53 }
	CALL $9($3)
	
.LABEL $label$53
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$52 }
	$2 = *(($1 + [96]))
	goto $label$50 
	
.LABEL $label$51
	$2 = $9
	
.LABEL $label$50
	*($8) = $9
	CALL $9($2)
	$global$0 = ($1 + [624])
	return 
	
.LABEL $label$1
	$global$0 = ($1 + [624])
	(unreachable)
}

void .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9729])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $6, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $6, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, $6, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9729])
	$6 = *($5)
	
.LABEL $label$8
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$9 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, $6, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$6 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($5, $6, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [28])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[3]) ){ goto $label$12 }
	CALL eosio_assert([0], [9729])
	$1 = *(($0 + [4]))
	
.LABEL $label$12
	CALL memcpy($1, $4, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $33($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $150 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$5 = ($global$0 - [16])
	$global$0 = $5
	$4 = CALL $149($0, $1, $2, $4)
	if ( ((int_64)*($3 + [8]) != (int_64)*($2 + [8])) ){ goto $label$3 }
	if ( ((int_64)*($3) < (int_64)*($2)) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [10583])
	if ( ((int_64)*($3) >= (int_64)*($2)) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = *($2)
	*($2) = *($3)
	$7 = ($2 + [8])
	$8 = *($7)
	$9 = ($3 + [8])
	*($7) = *($9)
	*(($5 + [8])) = $8
	*($3) = $6
	*($9) = $8
	*($5) = $6
	if ( ((int_64)*($7) == (int_64)*($1 + [8])) ){ goto $label$4 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$4
	if ( ((int_64)*($2) >= (int_64)*($1)) ){ goto $label$6 }
	$6 = *($1)
	*($1) = *($2)
	$3 = ($1 + [8])
	$8 = *($3)
	$7 = ($2 + [8])
	*($3) = *($7)
	*(($5 + [8])) = $8
	*($2) = $6
	*($7) = $8
	*($5) = $6
	if ( ((int_64)*($3) == (int_64)*($0 + [8])) ){ goto $label$7 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$7
	if ( ((int_64)*($1) >= (int_64)*($0)) ){ goto $label$5 }
	$6 = *($0)
	*($0) = *($1)
	$2 = ($0 + [8])
	$8 = *($2)
	$3 = ($1 + [8])
	*($2) = *($3)
	*(($5 + [8])) = $8
	*($1) = $6
	*($3) = $8
	*($5) = $6
	$global$0 = ($5 + [16])
	return ($4 + [3])
	
.LABEL $label$6
	$global$0 = ($5 + [16])
	return ($4 + [1])
	
.LABEL $label$5
	$global$0 = ($5 + [16])
	return ($4 + [2])
	
.LABEL $label$1
	$global$0 = ($5 + [16])
	return $4
}

int_32 .FUNC $151 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [1]
	$5 = int_32(($1 - $0) >> [4])
	if ( ((uint_32)$5 > (uint_32)[5]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$5 = ($1 + [-16])
	if ( ((int_64)*(($1 + [-8])) == (int_64)*($0 + [8])) ){ goto $label$8 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$8
	if ( ((int_64)*($5) >= (int_64)*($0)) ){ goto $label$5 }
	$6 = *($0)
	*($0) = *($5)
	$2 = ($0 + [8])
	$7 = *($2)
	$0 = ($5 + [8])
	*($2) = *($0)
	*(($3 + [8])) = $7
	*($5) = $6
	*($0) = $7
	*($3) = $6
	$global$0 = ($3 + [16])
	return [1]
	
.LABEL $label$6
	$5 = ($0 + [32])
	CALL $149($0, ($0 + [16]), $5, $2)
	$2 = ($0 + [48])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$5 }
	$8 = [0]
	$9 = [0]
	
.LOOP $label$9:
	$4 = $2
	if ( ((int_64)*($4 + [8]) == (int_64)*($5 + [8])) ){ goto $label$10 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$10
	$6 = *($4)
	if ( ((int_64)$6 >= (int_64)*($5)) ){ goto $label$11 }
	$7 = *(($4 + [8]))
	$2 = $8
	
.LOOP $label$14:
	*((($5 = ($0 + $2)) + [56])) = *(($5 + [40]))
	*(($5 + [48])) = *(($5 + [32]))
	if ( ((int_32)$2 == (int_32)[-32]) ){ goto $label$13 }
	if ( ((int_64)$7 == (int_64)*(($5 + [24]))) ){ goto $label$15 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$15
	$2 = ($2 + [-16])
	if ( ((int_64)$6 < (int_64)*(($5 + [16]))) ){ goto $label$14 }
	$5 = (($0 + $2) + [48])
	goto $label$12 
	
.LABEL $label$13
	$5 = $0
	
.LABEL $label$12
	*($5 + [8]) = $7
	*($5) = $6
	$9 = ($9 + [1])
	if ( ((int_32)$9 == (int_32)[8]) ){ goto $label$1 }
	
.LABEL $label$11
	$8 = ($8 + [16])
	$5 = $4
	$2 = ($4 + [16])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	$4 = [1]
	
.LABEL $label$5
	$global$0 = ($3 + [16])
	return $4
	
.LABEL $label$4
	CALL $149($0, ($0 + [16]), ($1 + [-16]), $2)
	$global$0 = ($3 + [16])
	return [1]
	
.LABEL $label$3
	CALL $148($0, ($0 + [16]), ($0 + [32]), ($0 + [48]), ($1 + [-16]), $2)
	$global$0 = ($3 + [16])
	return [1]
	
.LABEL $label$2
	CALL $150($0, ($0 + [16]), ($0 + [32]), ($1 + [-16]), $2)
	$global$0 = ($3 + [16])
	return [1]
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	$5
	return ((int_32)($4 + [16]) == (int_32)$1)
}

int_32 .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $158($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $7($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $28($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $28($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $24($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $9($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $157 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [9829])
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	CALL memcpy(($3 + [48]), $4, [32])
	*(($1 = ($1 + [4]))) = (*($1) + [32])
	$5 = (int_64)0
	$1 = [16]
	$6 = ($3 + [16])
	$4 = [0]
	$7 = (int_64)0
	
.LOOP $label$3:
	$8 = (($3 + [48]) + $4)
	if ( ($1 <= [2]) ){ goto $label$4 }
	$5 = ((int_64)$5 | (int_64)*($8))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$5 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$5 = ((int_64)$5 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$5 }
	CALL eosio_assert([0], [10642])
	
.LABEL $label$5
	*($6 + [8]) = $7
	*($6) = ((int_64)$5 | (int_64)*($8))
	$1 = [16]
	$6 = ($6 + [16])
	$5 = (int_64)0
	$7 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$6 }
	if ( ($1 <= [2]) ){ goto $label$7 }
	CALL __ashlti3($3, $5, $7, (($1 << [3]) + [-8]))
	$7 = *(($3 + [8]))
	$5 = *($3)
	
.LABEL $label$7
	*($6) = $5
	*($6 + [8]) = $7
	
.LABEL $label$6
	*($0) = *($3 + [16])
	*(($0 + [8])) = *($3 + [24])
	*(($0 + [24])) = *((($3 + [16]) + [24]))
	*(($0 + [16])) = *((($3 + [16]) + [16]))
	$global$0 = ($3 + [80])
}

void .FUNC $154 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $33($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	$5 = *($4 + [4])
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy(($2 + [8]), $5, [8])
	*($3) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $156(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	CALL $157(*($0 + [20]), $1, [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10686])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $51($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9829])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2 + [8]) = *(*($0))
	$4 = *($3 + [4])
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9729])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, ($2 + [8]), [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $146(*($1), *($0 + [4]))
	$5 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [9729])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $5, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$5 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9729])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $5, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$5 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [9729])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, $5, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $95(*($1), *($0 + [20]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10686])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$5 = *($1 + [4])
	$6 = ($5 - $7)
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $161($1, ($2 - $6))
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($7 + $2)
	*(($1 + [4])) = $5
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($0 + [4])
	$2 = *($6)
	$4 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((int_32)*($4) != (int_32)$2) ){ goto $label$8 }
	CALL eosio_assert([0], [9829])
	$2 = *($6)
	
.LABEL $label$8
	CALL memcpy($7, $2, [1])
	$2 = (*($6) + [1])
	*($6) = $2
	$7 = ($7 + [1])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $30($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $7(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $9($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL $9($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL $9($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL $9($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL $9($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL $9($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL $9($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL $9($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL $9($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	$2 = ($global$0 - [736])
	$global$0 = $2
	*($2 + [200]) = ((int_64)CALL $34() / (int_64)1000000)
	$3 = [0]
	*(($2 + [192])) = [0]
	*($2 + [176]) = (int_64)-1
	*($2 + [184]) = (int_64)0
	$4 = *($0)
	*($2 + [160]) = $4
	*($2 + [168]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)-6499418656071090176, *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $97(($2 + [160]), $6)
	if ( ((int_32)*($5 + [64]) == (int_32)($2 + [160])) ){ goto $label$1 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$1
	CALL $78(((int_32)$5 != (int_32)[0]), [9071], *($1))
	$7 = CALL $25(($2 + [144]), ($5 + [8]))
	$8 = *($5 + [28])
	$9 = CALL $25(($2 + [128]), $7)
	$10 = CALL $25(($2 + [96]), $9)
	$11 = ($10 + [1])
	$12 = ($2 + [708])
	$13 = [9266]
	$6 = [13]
	$14 = ($2 + [208])
	
.LOOP $label$3:
	$13 = ($13 + [1])
	
.LOOP $label$6:
	if ( ((int_32)($6 & [255]) == (int_32)[37]) ){ goto $label$5 }
	*($14) = $6
	$14 = ($14 + [1])
	if ( ((uint_32)$14 >= (uint_32)$12) ){ goto $label$4 }
	$6 = *($13)
	$13 = ($13 + [1])
	if ( ($6 & [255]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$8
	$6 = ( *(($10 + [8])) ? $11 : (*($2 + [96]) & [1]) )
	$15 = *($6)
	if ( ($15 == 0) ){ goto $label$7 }
	$16 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$10:
	*(($17 = ($14 + $6))) = $15
	$18 = ($6 + [1])
	if ( ((uint_32)($17 + [1]) >= (uint_32)$12) ){ goto $label$9 }
	$15 = ($16 + $6)
	$6 = $18
	$15 = *($15)
	if ( ($15 & [255]) ){ goto $label$10 }
	
.LABEL $label$9
	$14 = ($14 + $18)
	
.LABEL $label$7
	if ( ((uint_32)$14 >= (uint_32)$12) ){ goto $label$4 }
	$3 = ($3 + [1])
	$6 = *($13)
	if ( ($6 & [255]) ){ goto $label$3 }
	
.LABEL $label$4
	*($14) = [0]
	CALL prints(($2 + [208]))
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($10 + [8])))
	
.LABEL $label$11
	if ( ((*($9) & [1]) == 0) ){ goto $label$12 }
	CALL $9(*($9 + [8]))
	
.LABEL $label$12
	$17 = *($2 + [200])
	$19 = (int_64)
	if ( ((int_64)$19((CASTING uint_64)(uint_32 $17) - (CASTING uint_64)(uint_32 $8))) < (int_64)0) ){ goto $label$16 }
	if ( ((uint_64)$19 <= (uint_64)(int_64)9) ){ goto $label$15 }
	$18 = [0]
	$13 = [9277]
	$14 = [13]
	$6 = ($2 + [208])
	
.LOOP $label$17:
	$13 = ($13 + [1])
	
.LOOP $label$19:
	if ( ((int_32)($14 & [255]) == (int_32)[37]) ){ goto $label$18 }
	*($6) = $14
	$6 = ($6 + [1])
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$13 }
	$14 = *($13)
	$13 = ($13 + [1])
	if ( ($14 & [255]) ){ goto $label$19 }
	goto $label$13 
	
.LABEL $label$18
	if ( ((uint_32)$18 > (uint_32)[9]) ){ goto $label$21 }
	goto $label$24 
	
.LABEL $label$24
	$6 = ($6 + [1])
	$4 = $19
	
.LOOP $label$25:
	$14 = $6
	$6 = ($14 + [1])
	$15 = ((uint_64)$4 > (uint_64)(int_64)99)
	$4 = ((uint_64)$4 / (uint_64)(int_64)10)
	if ( $15 ){ goto $label$25 }
	$4 = $19
	if ( ((uint_32)$6 > (uint_32)$12) ){ goto $label$21 }
	
.LOOP $label$26:
	$20 = ((uint_64)$4 / (uint_64)(int_64)10)
	*($14) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$20 * (int_64)10))) | [48])
	$14 = ($14 + [-1])
	$15 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $20
	if ( $15 ){ goto $label$26 }
	goto $label$21 
	
.LABEL $label$23
	$6 = CALL $68($6, $12, $17)
	if ( ($6 <= $12) ){ goto $label$20 }
	goto $label$13 
	
.LABEL $label$22
	$6 = CALL $68($6, $12, $8)
	
.LABEL $label$21
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$13 }
	
.LABEL $label$20
	$18 = ($18 + [1])
	$14 = *($13)
	if ( ($14 & [255]) ){ goto $label$17 }
	goto $label$13 
	
.LABEL $label$16
	$19 = (int_64)
	if ( ((uint_64)$19((int_64)0 - $19)) <= (uint_64)(int_64)9) ){ goto $label$14 }
	$18 = [0]
	$13 = [9277]
	$14 = [13]
	$6 = ($2 + [208])
	
.LOOP $label$27:
	$13 = ($13 + [1])
	
.LOOP $label$29:
	if ( ((int_32)($14 & [255]) == (int_32)[37]) ){ goto $label$28 }
	*($6) = $14
	$6 = ($6 + [1])
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$13 }
	$14 = *($13)
	$13 = ($13 + [1])
	if ( ($14 & [255]) ){ goto $label$29 }
	goto $label$13 
	
.LABEL $label$28
	if ( ((uint_32)$18 > (uint_32)[9]) ){ goto $label$31 }
	goto $label$34 
	
.LABEL $label$34
	*($6) = [45]
	$6 = ($6 + [2])
	$4 = $19
	
.LOOP $label$35:
	$14 = $6
	$6 = ($14 + [1])
	$15 = ((uint_64)$4 > (uint_64)(int_64)99)
	$4 = ((uint_64)$4 / (uint_64)(int_64)10)
	if ( $15 ){ goto $label$35 }
	$4 = $19
	if ( ((uint_32)$6 > (uint_32)$12) ){ goto $label$31 }
	
.LOOP $label$36:
	$20 = ((uint_64)$4 / (uint_64)(int_64)10)
	*($14) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$20 * (int_64)10))) | [48])
	$14 = ($14 + [-1])
	$15 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $20
	if ( $15 ){ goto $label$36 }
	goto $label$31 
	
.LABEL $label$33
	$6 = CALL $68($6, $12, $17)
	if ( ($6 <= $12) ){ goto $label$30 }
	goto $label$13 
	
.LABEL $label$32
	$6 = CALL $68($6, $12, $8)
	
.LABEL $label$31
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$13 }
	
.LABEL $label$30
	$18 = ($18 + [1])
	$14 = *($13)
	if ( ($14 & [255]) ){ goto $label$27 }
	goto $label$13 
	
.LABEL $label$15
	$15 = [0]
	$13 = [9277]
	$14 = [13]
	$6 = ($2 + [208])
	
.LOOP $label$37:
	$13 = ($13 + [1])
	
.LOOP $label$39:
	if ( ((int_32)($14 & [255]) == (int_32)[37]) ){ goto $label$38 }
	*($6) = $14
	$6 = ($6 + [1])
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$13 }
	$14 = *($13)
	$13 = ($13 + [1])
	if ( ($14 & [255]) ){ goto $label$39 }
	goto $label$13 
	
.LABEL $label$38
	if ( ((uint_32)$15 > (uint_32)[9]) ){ goto $label$41 }
	goto $label$44 
	
.LABEL $label$44
	$18 = ($6 + [1])
	if ( ((uint_32)$18 > (uint_32)$12) ){ goto $label$45 }
	$4 = $19
	
.LOOP $label$46:
	$20 = ((uint_64)$4 / (uint_64)(int_64)10)
	*($6) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$20 * (int_64)10))) | [48])
	$6 = ($6 + [-1])
	$14 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $20
	if ( $14 ){ goto $label$46 }
	
.LABEL $label$45
	$6 = $18
	if ( ($6 <= $12) ){ goto $label$40 }
	goto $label$13 
	
.LABEL $label$43
	$6 = CALL $68($6, $12, $17)
	if ( ($6 <= $12) ){ goto $label$40 }
	goto $label$13 
	
.LABEL $label$42
	$6 = CALL $68($6, $12, $8)
	
.LABEL $label$41
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$13 }
	
.LABEL $label$40
	$15 = ($15 + [1])
	$14 = *($13)
	if ( ($14 & [255]) ){ goto $label$37 }
	goto $label$13 
	
.LABEL $label$14
	$18 = [0]
	$13 = [9277]
	$14 = [13]
	$6 = ($2 + [208])
	
.LOOP $label$47:
	$15 = ($6 + [1])
	$13 = ($13 + [1])
	
.LOOP $label$49:
	if ( ((int_32)($14 & [255]) == (int_32)[37]) ){ goto $label$48 }
	*($6) = $14
	$6 = ($6 + [1])
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$13 }
	$15 = ($15 + [1])
	$14 = *($13)
	$13 = ($13 + [1])
	if ( ($14 & [255]) ){ goto $label$49 }
	goto $label$13 
	
.LABEL $label$48
	if ( ((uint_32)$18 > (uint_32)[9]) ){ goto $label$51 }
	goto $label$54 
	
.LABEL $label$54
	*($6) = [45]
	$6 = ($6 + [2])
	if ( ((uint_32)$6 > (uint_32)$12) ){ goto $label$51 }
	$4 = $19
	
.LOOP $label$55:
	$20 = ((uint_64)$4 / (uint_64)(int_64)10)
	*($15) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$20 * (int_64)10))) | [48])
	$15 = ($15 + [-1])
	$14 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $20
	if ( $14 ){ goto $label$55 }
	goto $label$51 
	
.LABEL $label$53
	$6 = CALL $68($6, $12, $17)
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$13 }
	goto $label$50 
	
.LABEL $label$52
	$6 = CALL $68($6, $12, $8)
	
.LABEL $label$51
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$13 }
	
.LABEL $label$50
	$18 = ($18 + [1])
	$14 = *($13)
	if ( ($14 & [255]) ){ goto $label$47 }
	
.LABEL $label$13
	$14 = [0]
	*($6) = [0]
	CALL prints(($2 + [208]))
	if ( (CALL $106($0, $1) == 0) ){ goto $label$58 }
	$6 = [13]
	
.LOOP $label$59:
	if ( ((int_32)($6 & [255]) == (int_32)[37]) ){ goto $label$2 }
	*(($15 = (($2 + [208]) + $14))) = $6
	$13 = ($14 + [1])
	if ( ((uint_32)($15 + [1]) >= (uint_32)$12) ){ goto $label$60 }
	$6 = ($14 + [9328])
	$14 = $13
	$6 = *($6)
	if ( ($6 & [255]) ){ goto $label$59 }
	
.LABEL $label$60
	*((($2 + [208]) + $13)) = [0]
	CALL prints(($2 + [208]))
	if ( (*($2 + [144]) & [1]) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	*(($2 + [88])) = [0]
	*($2 + [80]) = (int_64)0
	$4 = *($0)
	$6 = CALL $15([9359])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$66 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$69 }
	*($2 + [80]) = ($6 << [1])
	$14 = (($2 + [80]) | [1])
	if ( $6 ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	$13 = (($6 + [16]) & [-16])
	$14 = CALL $7($13)
	*($2 + [80]) = ($13 | [1])
	*($2 + [88]) = $14
	*($2 + [84]) = $6
	
.LABEL $label$68
	CALL memcpy($14, [9359], $6)
	
.LABEL $label$67
	*(($14 + $6)) = [0]
	$6 = CALL $25(($2 + [64]), $7)
	$20 = *($0)
	$13 = CALL $25(($2 + [720]), $6)
	$14 = CALL $25(($2 + [208]), ($2 + [80]))
	CALL $93(($2 + [96]), $4, [0], $14, $13, [17], $20)
	if ( (*($2 + [720]) & [1]) ){ goto $label$71 }
	if ( (*($2 + [208]) & [1]) ){ goto $label$70 }
	goto $label$65 
	
.LABEL $label$71
	CALL $9(*($13 + [8]))
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$65 }
	
.LABEL $label$70
	CALL $9(*($14 + [8]))
	$14 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$66
	CALL $24(($2 + [80]))
	
.LABEL $label$65
	$14 = [1]
	if ( (*($6) & [1]) ){ goto $label$63 }
	
.LABEL $label$64
	if ( ((*($2 + [80]) & $14) == 0) ){ goto $label$61 }
	goto $label$62 
	
.LABEL $label$63
	CALL $9(*($6 + [8]))
	if ( ((*($2 + [80]) & $14) == 0) ){ goto $label$61 }
	
.LABEL $label$62
	CALL $9(*($2 + [88]))
	
.LABEL $label$61
	if ( ((int_64)((int_64)*($2 + [96]) | (int_64)*($2 + [104])) != (int_64)0) ){ goto $label$72 }
	if ( ((int_64)((int_64)*($2 + [112]) | (int_64)*(($2 + [120]))) != (int_64)0) ){ goto $label$72 }
	$14 = [66]
	$6 = [0]
	
.LOOP $label$73:
	if ( ((int_32)($14 & [255]) == (int_32)[37]) ){ goto $label$2 }
	*(($15 = (($2 + [208]) + $6))) = $14
	$13 = ($6 + [1])
	if ( ((uint_32)($15 + [1]) >= (uint_32)$12) ){ goto $label$74 }
	$14 = ($6 + [9364])
	$6 = $13
	$14 = *($14)
	if ( ($14 & [255]) ){ goto $label$73 }
	
.LABEL $label$74
	*((($2 + [208]) + $13)) = [0]
	CALL eosio_assert([0], ($2 + [208]))
	
.LABEL $label$72
	$4 = *($0)
	*($2 + [212]) = ($2 + [200])
	*($2 + [208]) = ($2 + [96])
	if ( $5 ){ goto $label$75 }
	CALL eosio_assert([0], [10392])
	
.LABEL $label$75
	CALL $108(($2 + [160]), $5, $4, ($2 + [208]))
	$4 = *((($2 + [96]) + [24]))
	*((($2 + [32]) + [24])) = $4
	$20 = *((($2 + [96]) + [16]))
	*((($2 + [32]) + [16])) = $20
	*(($2 + [16])) = $20
	*(($2 + [24])) = $4
	$4 = *($2 + [104])
	*($2 + [40]) = $4
	$20 = *($2 + [96])
	*($2) = $20
	*($2 + [32]) = $20
	*($2 + [8]) = $4
	CALL $104([9399], $2)
	if ( ((*($2 + [144]) & [1]) == 0) ){ goto $label$56 }
	
.LABEL $label$57
	CALL $9(*($7 + [8]))
	
.LABEL $label$56
	$13 = *($2 + [184])
	if ( ($13 == 0) ){ goto $label$76 }
	$12 = ($2 + [188])
	$6 = *($12)
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$78 }
	
.LOOP $label$79:
	$6 = ($6 + [-24])
	$14 = *($6)
	*($6) = [0]
	if ( ($14 == 0) ){ goto $label$80 }
	if ( ((*($14 + [8]) & [1]) == 0) ){ goto $label$81 }
	CALL $9(*(($14 + [16])))
	
.LABEL $label$81
	CALL $9($14)
	
.LABEL $label$80
	if ( ((int_32)$13 != (int_32)$6) ){ goto $label$79 }
	$6 = *(($2 + [184]))
	goto $label$77 
	
.LABEL $label$78
	$6 = $13
	
.LABEL $label$77
	*($12) = $13
	CALL $9($6)
	
.LABEL $label$76
	$global$0 = ($2 + [736])
	return (unreachable)
	
.LABEL $label$2
	$3
	$18
	$18
	$15
	$18
	(unreachable)
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($2 + [88])) = [0]
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	$3 = *($0)
	*($2 + [56]) = $3
	*($2 + [64]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-6499418656071090176, *($1))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $97(($2 + [56]), $5)
	if ( ((int_32)*($4 + [64]) == (int_32)($2 + [56])) ){ goto $label$1 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$1
	CALL $78(((int_32)$4 != (int_32)[0]), [9226], *($1))
	$1 = CALL $25(($2 + [40]), ($4 + [8]))
	$6 = *(($4 + [56]))
	$7 = *(($4 + [48]))
	$3 = *(($4 + [40]))
	$8 = *($4 + [32])
	$9 = *($4 + [28])
	$10 = CALL $34()
	CALL $79(($2 + [8]), $0)
	$10 = ((int_64)$10 / (int_64)1000000)
	if ( ((int_64)(((int_64)$8 | (int_64)$3) == 0) == 0) ){ goto $label$5 }
	if ( (int_64)(((int_64)$7 | (int_64)$6) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$5 = ((int_64))(((int_64)$10 & (int_64)4294967295) - $9) <= (int_64)(CASTING int_64)(int_32 *($2 + [24])))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $9(*($1 + [8]))
	
.LABEL $label$2
	$0 = *($2 + [80])
	if ( ($0 == 0) ){ goto $label$6 }
	$11 = ($2 + [84])
	$4 = *($11)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [16])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($2 + [80]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $0
	
.LABEL $label$7
	*($11) = $0
	CALL $9($4)
	
.LABEL $label$6
	$global$0 = ($2 + [96])
	return $5
}

int_32 .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $19([2], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $7($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $24 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $7($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $9($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $27($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_64 $45
	int_64 $46
	int_32 $47
	int_64 $48
	int_64 $49
	int_32 $50
	int_32 $51
	int_32 $52
	int_32 $53
	$4 = ($global$0 - [608])
	$global$0 = $4
	if ( ((int_32)*($3) < (int_32)[1]) ){ goto $label$1 }
	$5 = CALL $34()
	CALL $34()
	*((($4 + [32]) + [32])) = (int_64)0
	*(($4 + [72])) = (int_64)0
	$6 = [0]
	*(($4 + [88])) = [0]
	*($4 + [48]) = [0]
	*($4 + [44]) = [0]
	*($4 + [56]) = (int_64)0
	*($4 + [80]) = (int_64)0
	$8 = (CASTING uint_32)(uint_64 ((int_64)$5 / (int_64)1000000))
	$7 = *($3)
	$9 = ($7 - ((uint_32)$8 % (uint_32)$7))
	$9 = ($9 + ( $7 ? [0] : ($9 <= [15]) ))
	*($4 + [52]) = $9
	*($4 + [32]) = (($7 + $8) + $9)
	*($4 + [104]) = (int_64)3617214756542218240
	*($4 + [96]) = *($0)
	*($4) = (int_64)6138578721764523680
	*($4 + [24]) = *($1)
	CALL $110(($4 + [68]), ($4 + [96]), $4, $2, ($4 + [24]))
	$5 = *($2)
	*($4 + [8]) = *($1)
	*($4) = $5
	$7 = CALL cancel_deferred($4)
	$5 = *($4 + [8])
	$10 = *($4)
	$11 = ((int_64)(uint_64)$10 >> (uint_64)(int_64)8) | (int_64)((int_64)$5 << (int_64)56)
	$12 = ((int_64)$11) & (int_64)15
	$13 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($12) <= (int_64)10) ) + (int_64)$12))
	$11 = ((int_64)$11 & (int_64)255)
	$14 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($11 <= (int_64)160) ) + (int_64)(uint_64)$11 >> (uint_64)(int_64)4)))
	$11 = ((int_64)(uint_64)$10 >> (uint_64)(int_64)16) | (int_64)((int_64)$5 << (int_64)48)
	$12 = ((int_64)$11) & (int_64)15
	$15 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($12) <= (int_64)10) ) + (int_64)$12))
	$11 = ((int_64)$11 & (int_64)255)
	$16 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($11 <= (int_64)160) ) + (int_64)(uint_64)$11 >> (uint_64)(int_64)4)))
	$11 = ((int_64)(uint_64)$10 >> (uint_64)(int_64)24) | (int_64)((int_64)$5 << (int_64)40)
	$12 = ((int_64)$11) & (int_64)15
	$17 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($12) <= (int_64)10) ) + (int_64)$12))
	$11 = ((int_64)$11 & (int_64)255)
	$18 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($11 <= (int_64)160) ) + (int_64)(uint_64)$11 >> (uint_64)(int_64)4)))
	$11 = ((int_64)(uint_64)$10 >> (uint_64)(int_64)32) | (int_64)((int_64)$5 << (int_64)32)
	$12 = ((int_64)$11) & (int_64)15
	$19 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($12) <= (int_64)10) ) + (int_64)$12))
	$11 = ((int_64)$11 & (int_64)255)
	$20 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($11 <= (int_64)160) ) + (int_64)(uint_64)$11 >> (uint_64)(int_64)4)))
	$11 = ((int_64)(uint_64)$10 >> (uint_64)(int_64)40) | (int_64)((int_64)$5 << (int_64)24)
	$12 = ((int_64)$11) & (int_64)15
	$21 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($12) <= (int_64)10) ) + (int_64)$12))
	$11 = ((int_64)$11 & (int_64)255)
	$22 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($11 <= (int_64)160) ) + (int_64)(uint_64)$11 >> (uint_64)(int_64)4)))
	$11 = ((int_64)(uint_64)$10 >> (uint_64)(int_64)48) | (int_64)((int_64)$5 << (int_64)16)
	$12 = ((int_64)$11) & (int_64)15
	$23 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($12) <= (int_64)10) ) + (int_64)$12))
	$11 = ((int_64)$11 & (int_64)255)
	$24 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($11 <= (int_64)160) ) + (int_64)(uint_64)$11 >> (uint_64)(int_64)4)))
	$11 = ((int_64)(uint_64)$10 >> (uint_64)(int_64)56) | (int_64)((int_64)$5 << (int_64)8)
	$12 = ((int_64)$11) & (int_64)15
	$25 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($12) <= (int_64)10) ) + (int_64)$12))
	$11 = ((int_64)$11 & (int_64)255)
	$26 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($11 <= (int_64)160) ) + (int_64)(uint_64)$11 >> (uint_64)(int_64)4)))
	$27 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($5 <= (int_64)-6917529027641081856) ) + (int_64)(uint_64)$5 >> (uint_64)(int_64)60)))
	$11 = ((int_64)$10 & (int_64)15)
	$28 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($11 <= (int_64)10) ) + (int_64)$11))
	$10 = ((int_64)$10 & (int_64)255)
	$29 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($10 <= (int_64)160) ) + (int_64)(uint_64)$10 >> (uint_64)(int_64)4)))
	$10 = ((int_64)$5 & (int_64)15)
	$30 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($10 <= (int_64)10) ) + (int_64)$10))
	$10 = ((int_64)$5 & (int_64)255)
	$31 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($10 <= (int_64)160) ) + (int_64)(uint_64)$10 >> (uint_64)(int_64)4)))
	$10 = (uint_64)$5 >> (uint_64)(int_64)8
	$11 = ((int_64)$10) & (int_64)15
	$32 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($11) <= (int_64)10) ) + (int_64)$11))
	$10 = ((int_64)$10 & (int_64)255)
	$33 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($10 <= (int_64)160) ) + (int_64)(uint_64)$10 >> (uint_64)(int_64)4)))
	$10 = (uint_64)$5 >> (uint_64)(int_64)16
	$11 = ((int_64)$10) & (int_64)15
	$34 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($11) <= (int_64)10) ) + (int_64)$11))
	$10 = ((int_64)$10 & (int_64)255)
	$35 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($10 <= (int_64)160) ) + (int_64)(uint_64)$10 >> (uint_64)(int_64)4)))
	$10 = (uint_64)$5 >> (uint_64)(int_64)24
	$11 = ((int_64)$10) & (int_64)15
	$36 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($11) <= (int_64)10) ) + (int_64)$11))
	$10 = ((int_64)$10 & (int_64)255)
	$37 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($10 <= (int_64)160) ) + (int_64)(uint_64)$10 >> (uint_64)(int_64)4)))
	$10 = (uint_64)$5 >> (uint_64)(int_64)32
	$11 = ((int_64)$10) & (int_64)15
	$38 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($11) <= (int_64)10) ) + (int_64)$11))
	$10 = ((int_64)$10 & (int_64)255)
	$39 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($10 <= (int_64)160) ) + (int_64)(uint_64)$10 >> (uint_64)(int_64)4)))
	$10 = (uint_64)$5 >> (uint_64)(int_64)40
	$11 = ((int_64)$10) & (int_64)15
	$40 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($11) <= (int_64)10) ) + (int_64)$11))
	$10 = ((int_64)$10 & (int_64)255)
	$41 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($10 <= (int_64)160) ) + (int_64)(uint_64)$10 >> (uint_64)(int_64)4)))
	$10 = (uint_64)$5 >> (uint_64)(int_64)48
	$11 = ((int_64)$10) & (int_64)15
	$42 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($11) <= (int_64)10) ) + (int_64)$11))
	$10 = ((int_64)$10 & (int_64)255)
	$43 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($10 <= (int_64)160) ) + (int_64)(uint_64)$10 >> (uint_64)(int_64)4)))
	$5 = ((int_64)(uint_64)$5 >> (uint_64)(int_64)56) & (int_64)15
	$44 = (CASTING uint_32)(uint_64 ((int_64)( (int_64)48 ? (int_64)55 : (uint_64)($5) <= (int_64)10) ) + (int_64)$5))
	$45 = (CASTING int_64)(int_32 $7)
	$46 = (int_64))((int_64)0 - $45)
	$47 = *($3)
	$48 = (CASTING int_64)(int_32 $47)
	$49 = (int_64))((int_64)0 - $48)
	$12 = *($2)
	$9 = ($4 + [596])
	$50 = *($4 + [52])
	$11 = (CASTING uint_64)(uint_32 $50)
	$51 = [9419]
	$8 = ($4 + [96])
	$52 = ((int_32)$7 > (int_32)[-1])
	$2 = [13]
	
.LOOP $label$2:
	$53 = ($51 + [1])
	$3 = [0]
	
.LOOP $label$13:
	$7 = ($8 + $3)
	if ( ((int_32)($2 & [255]) == (int_32)[37]) ){ goto $label$12 }
	*($7) = $2
	$1 = ($3 + [1])
	if ( ((uint_32)($7 + [1]) >= (uint_32)$9) ){ goto $label$11 }
	$2 = ($53 + $3)
	$3 = $1
	$2 = *($2)
	if ( ($2 & [255]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)$6 > (uint_32)[9]) ){ goto $label$17 }
	goto $label$22 
	
.LABEL $label$22
	if ( ($52 == 0) ){ goto $label$15 }
	$8 = ($7 + [1])
	$5 = $45
	$10 = $5
	if ( (uint_64)($5 <= (int_64)10) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$21
	$8 = CALL $67($7, $9, $12)
	if ( ($8 <= $9) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$20
	$8 = (($8 + $3) + [1])
	$5 = $11
	if ( ($50 <= [10]) ){ goto $label$23 }
	
.LOOP $label$24:
	$8 = ($8 + [1])
	$2 = ((uint_64)$5 > (uint_64)(int_64)99)
	$5 = ((uint_64)$5 / (uint_64)(int_64)10)
	if ( $2 ){ goto $label$24 }
	
.LABEL $label$23
	if ( ((uint_32)$8 > (uint_32)$9) ){ goto $label$5 }
	$2 = ($8 + [-1])
	$5 = $11
	
.LOOP $label$25:
	$10 = ((uint_64)$5 / (uint_64)(int_64)10)
	*($2) = ((CASTING uint_32)(uint_64 (int_64))($5 - ((int_64)$10 * (int_64)10))) | [48])
	$2 = ($2 + [-1])
	$7 = ((uint_64)$5 > (uint_64)(int_64)9)
	$5 = $10
	if ( $7 ){ goto $label$25 }
	goto $label$5 
	
.LABEL $label$19
	$2 = ($8 + $3)
	$8 = ($2 + [32])
	if ( ((uint_32)$8 <= (uint_32)$9) ){ goto $label$16 }
	$8 = $7
	if ( ($8 <= $9) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$18
	if ( ((int_32)$47 <= (int_32)[-1]) ){ goto $label$14 }
	$8 = ($7 + [1])
	$5 = $48
	$10 = $5
	if ( (uint_64)($5 <= (int_64)10) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$17
	$8 = $7
	goto $label$5 
	
.LABEL $label$16
	*($7) = $27
	*(($2 + [1])) = $44
	*(($2 + [2])) = $43
	*(($2 + [3])) = $42
	*(($2 + [4])) = $41
	*(($2 + [5])) = $40
	*(($2 + [6])) = $39
	*(($2 + [7])) = $38
	*(($2 + [8])) = $37
	*(($2 + [9])) = $36
	*(($2 + [10])) = $35
	*(($2 + [11])) = $34
	*(($2 + [12])) = $33
	*(($2 + [13])) = $32
	*(($2 + [14])) = $31
	*(($2 + [15])) = $30
	*(($2 + [16])) = $26
	*(($2 + [17])) = $25
	*(($2 + [18])) = $24
	*(($2 + [20])) = $22
	*(($2 + [19])) = $23
	*(($2 + [21])) = $21
	*(($2 + [22])) = $20
	*(($2 + [23])) = $19
	*(($2 + [24])) = $18
	*(($2 + [25])) = $17
	*(($2 + [26])) = $16
	*(($2 + [27])) = $15
	*(($2 + [28])) = $14
	*(($2 + [29])) = $13
	*(($2 + [30])) = $29
	*(($2 + [31])) = $28
	if ( ($8 <= $9) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	*($7) = [45]
	$8 = (($7 + [1]) + [1])
	$5 = $46
	$10 = $5
	if ( ((uint_64)$5 >= (uint_64)(int_64)10) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$14
	*($7) = [45]
	$8 = (($7 + [1]) + [1])
	$5 = $49
	$10 = $5
	if ( ((uint_64)$5 >= (uint_64)(int_64)10) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$8 = ($8 + $1)
	goto $label$3 
	
.LABEL $label$10
	
.LABEL $label$9
	
.LOOP $label$26:
	$8 = ($8 + [1])
	$2 = ((uint_64)$10 > (uint_64)(int_64)99)
	$10 = ((uint_64)$10 / (uint_64)(int_64)10)
	if ( $2 ){ goto $label$26 }
	
.LABEL $label$8
	if ( ((uint_32)$8 > (uint_32)$9) ){ goto $label$5 }
	$2 = ($8 + [-1])
	
.LOOP $label$27:
	$10 = ((uint_64)$5 / (uint_64)(int_64)10)
	*($2) = ((CASTING uint_32)(uint_64 (int_64))($5 - ((int_64)$10 * (int_64)10))) | [48])
	$2 = ($2 + [-1])
	$7 = ((uint_64)$5 > (uint_64)(int_64)9)
	$5 = $10
	if ( $7 ){ goto $label$27 }
	goto $label$5 
	
.LABEL $label$7
	
.LOOP $label$28:
	$8 = ($8 + [1])
	$2 = ((uint_64)$10 > (uint_64)(int_64)99)
	$10 = ((uint_64)$10 / (uint_64)(int_64)10)
	if ( $2 ){ goto $label$28 }
	
.LABEL $label$6
	if ( ((uint_32)$8 > (uint_32)$9) ){ goto $label$5 }
	$2 = ($8 + [-1])
	
.LOOP $label$29:
	$10 = ((uint_64)$5 / (uint_64)(int_64)10)
	*($2) = ((CASTING uint_32)(uint_64 (int_64))($5 - ((int_64)$10 * (int_64)10))) | [48])
	$2 = ($2 + [-1])
	$7 = ((uint_64)$5 > (uint_64)(int_64)9)
	$5 = $10
	if ( $7 ){ goto $label$29 }
	
.LABEL $label$5
	if ( ((uint_32)$8 >= (uint_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($6 + [1])
	$51 = (($51 + $3) + [1])
	$2 = *($51)
	if ( ($2 & [255]) ){ goto $label$2 }
	
.LABEL $label$3
	*($8) = [0]
	CALL prints(($4 + [96]))
	CALL $54(($4 + [32]), $4, *($0), [0])
	CALL $55(($4 + [32]))
	
.LABEL $label$1
	$global$0 = ($4 + [608])
	$6
	(unreachable)
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	$5 = *($4 + [4])
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy(($2 + [8]), $5, [8])
	*($3) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	CALL $156(*($1), ($4 + [8]))
	$0 = ($4 + [20])
	$1 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$1) ){ goto $label$2 }
	CALL eosio_assert([0], [9829])
	$1 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $1, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9729])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9729])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9729])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $146(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	if ( ((uint_32)($0 + [15]) > (uint_32)$1) ){ goto $label$1 }
	$3 = ((uint_32)$2 / (uint_32)[86400])
	$4 = (((int_32)($3 - ((uint_32)(($3 + [730]) & [65535]) / (uint_32)[1461])) / (int_32)[365]) + [1970])
	if ( ((uint_32)($0 + [4]) <= (uint_32)$1) ){ goto $label$3 }
	$5 = $0
	goto $label$2 
	
.LABEL $label$3
	$5 = ($0 + [8])
	$6 = (CASTING int_64)(int_32 $4)
	
.LOOP $label$4:
	$8 = ((uint_64)$6 / (uint_64)(int_64)10)
	*(($7 = ($5 + [-5]))) = ((CASTING uint_32)(uint_64 (int_64))($6 - ((int_64)$8 * (int_64)10))) | [48])
	$5 = ($5 + [-1])
	$6 = $8
	if ( ((uint_32)$7 > (uint_32)$0) ){ goto $label$4 }
	
.LABEL $label$2
	$6 = (int_64)1
	$7 = (((uint_32)$3 % (uint_32)[365]) - ((uint_32)($3 + [365]) / (uint_32)[1461]))
	$9 = ( ($7 + [365]) ? $7 : ((int_32)$7 < (int_32)[0]) )
	if ( ((int_32)$9 < (int_32)[31]) ){ goto $label$8 }
	$6 = (int_64)2
	$7 = ( [28] ? [29] : ($4 & [3]) )
	$9 = ($9 + [-31])
	if ( ((int_32)$9 < (int_32)$7) ){ goto $label$8 }
	$6 = (int_64)3
	$9 = ($9 - $7)
	if ( ((int_32)$9 < (int_32)[31]) ){ goto $label$8 }
	if ( ((int_32)$9 >= (int_32)[61]) ){ goto $label$7 }
	$9 = ($9 + [-31])
	$6 = (int_64)4
	
.LABEL $label$8
	$7 = ($5 + [2])
	if ( ((uint_32)$7 > (uint_32)$1) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$9 >= (int_32)[92]) ){ goto $label$9 }
	$9 = ($9 + [-61])
	$6 = (int_64)5
	$7 = ($5 + [2])
	if ( ((uint_32)$7 <= (uint_32)$1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$9
	if ( ((int_32)$9 >= (int_32)[122]) ){ goto $label$10 }
	$9 = ($9 + [-92])
	$6 = (int_64)6
	$7 = ($5 + [2])
	if ( ((uint_32)$7 <= (uint_32)$1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$10
	if ( ((int_32)$9 >= (int_32)[153]) ){ goto $label$11 }
	$9 = ($9 + [-122])
	$6 = (int_64)7
	$7 = ($5 + [2])
	if ( ((uint_32)$7 <= (uint_32)$1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$11
	if ( ((int_32)$9 >= (int_32)[184]) ){ goto $label$12 }
	$9 = ($9 + [-153])
	$6 = (int_64)8
	$7 = ($5 + [2])
	if ( ((uint_32)$7 <= (uint_32)$1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ((int_32)$9 >= (int_32)[214]) ){ goto $label$13 }
	$9 = ($9 + [-184])
	$6 = (int_64)9
	$7 = ($5 + [2])
	if ( ((uint_32)$7 <= (uint_32)$1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$13
	if ( ((int_32)$9 >= (int_32)[245]) ){ goto $label$14 }
	$9 = ($9 + [-214])
	$6 = (int_64)10
	$7 = ($5 + [2])
	if ( ((uint_32)$7 <= (uint_32)$1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$14
	if ( ((int_32)$9 >= (int_32)[275]) ){ goto $label$15 }
	$9 = ($9 + [-245])
	$6 = (int_64)11
	$7 = ($5 + [2])
	if ( ((uint_32)$7 <= (uint_32)$1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$15
	$7 = ((int_32)$9 < (int_32)[306])
	$6 = ( (int_64)12 ? (int_64)1 : $7 )
	$9 = (( [-275] ? [-306] : $7 ) + $9)
	$7 = ($5 + [2])
	if ( ((uint_32)$7 > (uint_32)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + [6])
	
.LOOP $label$16:
	$8 = ((uint_64)$6 / (uint_64)(int_64)10)
	*(($0 = ($7 + [-5]))) = ((CASTING uint_32)(uint_64 (int_64))($6 - ((int_64)$8 * (int_64)10))) | [48])
	$7 = ($7 + [-1])
	$6 = $8
	if ( ((uint_32)$0 > (uint_32)$5) ){ goto $label$16 }
	$5 = ($7 + [-2])
	
.LABEL $label$5
	if ( ((uint_32)$7 > (uint_32)$1) ){ goto $label$17 }
	$6 = ((int_64)(CASTING int_64)(int_32 $9) + (int_64)1)
	
.LOOP $label$18:
	$8 = ((uint_64)$6 / (uint_64)(int_64)10)
	*(($7 = ($7 + [-1]))) = ((CASTING uint_32)(uint_64 (int_64))($6 - ((int_64)$8 * (int_64)10))) | [48])
	$6 = $8
	if ( ((uint_32)$7 > (uint_32)$5) ){ goto $label$18 }
	$5 = ($7 + [2])
	
.LABEL $label$17
	*($5) = [32]
	$7 = ($5 + [3])
	if ( ((uint_32)$7 <= (uint_32)$1) ){ goto $label$20 }
	$7 = ($5 + [1])
	goto $label$19 
	
.LABEL $label$20
	$0 = ($2 - ((int_32)$3 * (int_32)[86400]))
	*(($5 + [1])) = (((uint_32)((uint_32)$0 / (uint_32)[36000]) % (uint_32)[10]) | [48])
	*($5 + [2]) = (((uint_32)((uint_32)$0 / (uint_32)[3600]) % (uint_32)[10]) | [48])
	
.LABEL $label$19
	*($7) = [58]
	$5 = ((uint_32)$2 % (uint_32)[3600])
	if ( ((uint_32)($7 + [3]) <= (uint_32)$1) ){ goto $label$22 }
	$7 = ($7 + [1])
	goto $label$21 
	
.LABEL $label$22
	*(($7 + [1])) = (((uint_32)((uint_32)$5 / (uint_32)[600]) % (uint_32)[10]) | [48])
	*($7 + [2]) = (((uint_32)((uint_32)$5 / (uint_32)[60]) % (uint_32)[10]) | [48])
	$7 = ($7 + [3])
	
.LABEL $label$21
	*($7) = [58]
	$5 = ((uint_32)$2 % (uint_32)[60])
	$0 = ($7 + [3])
	if ( ((uint_32)$0 <= (uint_32)$1) ){ goto $label$23 }
	return ($7 + [1])
	
.LABEL $label$23
	$1 = ((uint_32)$5 / (uint_32)[10])
	*(($7 + [1])) = (((uint_32)$1 % (uint_32)[10]) | [48])
	*($7 + [2]) = (($5 - ((int_32)$1 * (int_32)[10])) | [48])
	
.LABEL $label$1
	return $0
}

void .FUNC $108 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10427])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10473])
	
.LABEL $label$2
	$6 = *($3)
	*($1 + [32]) = *($6)
	*(($1 + [56])) = *(($6 + [24]))
	*(($1 + [48])) = *(($6 + [16]))
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [28]) = *(*($3 + [4]))
	$6 = *($1 + [8])
	$3 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($3 + [52])
	$7 = (CASTING uint_64)(uint_32 $3)
	$8 = ($1 + [8])
	$9 = ($1 + [32])
	$10 = *($1)
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ($6 <= [513]) ){ goto $label$5 }
	$3 = CALL $1($6)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$4
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	*($5 + [16]) = $5
	*($5 + [28]) = $8
	*($5 + [44]) = $9
	*($5 + [24]) = $1
	*($5 + [32]) = ($1 + [20])
	*($5 + [36]) = ($1 + [24])
	*($5 + [40]) = ($1 + [28])
	CALL $159(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [68]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$10 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $2($3)
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [48])
}

void .FUNC $65 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [512])
	$global$0 = $2
	if ( $0 ){ goto $label$1 }
	$3 = ($2 + [500])
	$4 = [0]
	$5 = [9735]
	$6 = $2
	$0 = [37]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	
.LOOP $label$5:
	if ( ((int_32)($0 & [255]) == (int_32)[37]) ){ goto $label$4 }
	*($6) = $0
	$6 = ($6 + [1])
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$3 }
	$0 = *($5)
	$5 = ($5 + [1])
	if ( ($0 & [255]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$8 }
	goto $label$10 
	
.LABEL $label$10
	$7 = [110]
	$0 = [0]
	
.LOOP $label$12:
	*(($8 = ($6 + $0))) = $7
	$9 = ($0 + [1])
	if ( ((uint_32)($8 + [1]) >= (uint_32)$3) ){ goto $label$11 }
	$7 = ($0 + [9741])
	$0 = $9
	$7 = *($7)
	if ( ($7 & [255]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = ($6 + $9)
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$3 }
	goto $label$6 
	
.LABEL $label$9
	$6 = CALL $67($6, $3, $1)
	
.LABEL $label$8
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	
.LABEL $label$6
	$4 = ($4 + [1])
	$0 = *($5)
	if ( ($0 & [255]) ){ goto $label$2 }
	
.LABEL $label$3
	*($6) = [0]
	CALL eosio_assert([0], $2)
	
.LABEL $label$1
	$global$0 = ($2 + [512])
	$4
	(unreachable)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [128])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9806])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $7([216])) + [32]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [160]) = (int_64)0
	*($5 + [168]) = (int_64)0
	*($5 + [176]) = (int_64)0
	*($5 + [184]) = (int_64)0
	*($5 + [200]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [72])
	*($3 + [72]) = ($5 + [80])
	*($3 + [76]) = ($5 + [88])
	*($3 + [80]) = ($5 + [96])
	*($3 + [84]) = ($5 + [112])
	*($3 + [88]) = ($5 + [120])
	*($3 + [92]) = ($5 + [128])
	*($3 + [96]) = ($5 + [136])
	*($3 + [100]) = ($5 + [140])
	*($3 + [104]) = ($5 + [144])
	*($3 + [112]) = ($5 + [160])
	*($3 + [108]) = ($5 + [152])
	*($3 + [116]) = ($5 + [168])
	*($3 + [120]) = ($5 + [176])
	*($3 + [124]) = ($5 + [192])
	CALL $142(($3 + [32]), ($3 + [24]))
	*($5 + [204]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $143(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [128])
	return $5
}

int_32 .FUNC $67 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	$3 = ($0 + [13])
	if ( ((uint_32)$3 > (uint_32)$1) ){ goto $label$1 }
	*($0) = *(((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)59)) + [9834]))
	*($0 + [1]) = *((((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)54)) & [31]) + [9834]))
	*($0 + [2]) = *((((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)49)) & [31]) + [9834]))
	*($0 + [3]) = *((((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)44)) & [31]) + [9834]))
	*($0 + [4]) = *((((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)39)) & [31]) + [9834]))
	*($0 + [5]) = *((((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)34)) & [31]) + [9834]))
	*($0 + [6]) = *((((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)29)) & [31]) + [9834]))
	$1 = (CASTING uint_32)(uint_64 $2)
	*($0 + [7]) = *(((uint_32($1 >> [24]) & [31]) + [9834]))
	*($0 + [8]) = *(((uint_32($1 >> [19]) & [31]) + [9834]))
	*($0 + [9]) = *(((uint_32($1 >> [14]) & [31]) + [9834]))
	*($0 + [10]) = *(((uint_32($1 >> [9]) & [31]) + [9834]))
	*($0 + [11]) = *(((uint_32($1 >> [4]) & [31]) + [9834]))
	
.LOOP $label$2:
	$1 = ($3 + [-2])
	$0 = ($3 + [-1])
	$3 = $0
	if ( ((int_32)*($1) == (int_32)[46]) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [688])
	$global$0 = $2
	CALL require_auth(*($1))
	$3 = [0]
	*(($2 + [136])) = [0]
	*($2 + [120]) = (int_64)-1
	*($2 + [128]) = (int_64)0
	$4 = *($0)
	*($2 + [104]) = $4
	*($2 + [112]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)-4138943994219073536, *($1))
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$3 = CALL $50(($2 + [104]), $5)
	if ( ((int_32)*($3 + [36]) == (int_32)($2 + [104])) ){ goto $label$3 }
	CALL eosio_assert([0], [9755])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($1)
	$6 = ($2 + [644])
	$7 = [8618]
	$5 = [87]
	$8 = ($2 + [144])
	
.LOOP $label$5:
	$7 = ($7 + [1])
	
.LOOP $label$8:
	if ( ((int_32)($5 & [255]) == (int_32)[37]) ){ goto $label$7 }
	*($8) = $5
	$8 = ($8 + [1])
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$6 }
	$5 = *($7)
	$7 = ($7 + [1])
	if ( ($5 & [255]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$10
	$8 = CALL $67($8, $6, $4)
	
.LABEL $label$9
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$6 }
	$3 = ($3 + [1])
	$5 = *($7)
	if ( ($5 & [255]) ){ goto $label$5 }
	
.LABEL $label$6
	$3 = [0]
	*($8) = [0]
	CALL eosio_assert([0], ($2 + [144]))
	
.LABEL $label$3
	$4 = CALL $34()
	$10 = (CASTING uint_32)(uint_64 ((int_64)$4 / (int_64)1000000))
	$9 = *($3 + [32])
	if ( ((uint_32)$9 <= (uint_32)$10) ){ goto $label$11 }
	$6 = ($2 + [644])
	$11 = [0]
	$7 = [8636]
	$5 = [85]
	$8 = ($2 + [144])
	
.LOOP $label$12:
	$7 = ($7 + [1])
	
.LOOP $label$15:
	if ( ((int_32)($5 & [255]) == (int_32)[37]) ){ goto $label$14 }
	*($8) = $5
	$8 = ($8 + [1])
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$13 }
	$5 = *($7)
	$7 = ($7 + [1])
	if ( ($5 & [255]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((uint_32)$11 > (uint_32)[9]) ){ goto $label$16 }
	$5 = $9
	goto $label$17 
	
.LABEL $label$18
	$5 = $10
	
.LABEL $label$17
	$8 = CALL $68($8, $6, $5)
	
.LABEL $label$16
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$13 }
	$11 = ($11 + [1])
	$5 = *($7)
	if ( ($5 & [255]) ){ goto $label$12 }
	
.LABEL $label$13
	*($8) = [0]
	CALL eosio_assert([0], ($2 + [144]))
	
.LABEL $label$11
	if ( ((int_64)*($3 + [8]) < (int_64)1) ){ goto $label$19 }
	$4 = *($0)
	CALL $59(($2 + [144]), $0)
	$12 = *($2 + [192])
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$5 = CALL $15([8671])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	$8 = ($3 + [8])
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$22 }
	*($2) = ($5 << [1])
	$7 = ($2 | [1])
	if ( $5 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$6 = (($5 + [16]) & [-16])
	$7 = CALL $7($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $7
	*($2 + [4]) = $5
	
.LABEL $label$21
	CALL memcpy($7, [8671], $5)
	
.LABEL $label$20
	*(($7 + $5)) = [0]
	*($2 + [24]) = *($1)
	$13 = *(($8 + [8]))
	$14 = *($8)
	$5 = ($2 + [8])
	*(($2 + [56])) = *($5)
	*($5) = [0]
	*((($2 + [16]) + [24])) = $13
	*($2 + [64]) = $12
	*($2 + [16]) = *($0)
	$12 = *($2)
	*($2) = (int_64)0
	*($2 + [72]) = (int_64)-3617168760277827584
	*($2 + [48]) = $12
	*($2 + [32]) = $14
	*(($5 = CALL $7([16]))) = $4
	*($5 + [8]) = (int_64)3617214756542218240
	*((($2 + [64]) + [36])) = [0]
	$7 = ($5 + [16])
	*((($2 + [64]) + [24])) = $7
	*(($2 + [84])) = $7
	*($2 + [80]) = $5
	*($2 + [92 align=4]) = (int_64)0
	$5 = *($2 + [48])
	$7 = ( *((($2 + [16]) + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [32])
	$4 = (CASTING uint_64)(uint_32 $7)
	$7 = ($2 + [92])
	
.LOOP $label$23:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$23 }
	if ( ($5 == 0) ){ goto $label$25 }
	CALL $51($7, $5)
	$7 = *(($2 + [96]))
	$5 = *(($2 + [92]))
	goto $label$24 
	
.LABEL $label$25
	$7 = [0]
	$5 = [0]
	
.LABEL $label$24
	*($2 + [660]) = $5
	*($2 + [656]) = $5
	*($2 + [664]) = $7
	*($2 + [672]) = ($2 + [656])
	*($2 + [680]) = ($2 + [16])
	CALL $69(($2 + [680]), ($2 + [672]))
	CALL $70(($2 + [64]))
	$5 = *($2 + [92])
	if ( ($5 == 0) ){ goto $label$26 }
	*(($2 + [96])) = $5
	CALL $9($5)
	
.LABEL $label$26
	$5 = *($2 + [80])
	if ( ($5 == 0) ){ goto $label$27 }
	*(($2 + [84])) = $5
	CALL $9($5)
	
.LABEL $label$27
	if ( ((*(($2 + [48])) & [1]) == 0) ){ goto $label$28 }
	CALL $9(*(($2 + [56])))
	
.LABEL $label$28
	if ( ((*($2) & [1]) == 0) ){ goto $label$19 }
	CALL $9(*(($2 + [8])))
	
.LABEL $label$19
	if ( $3 ){ goto $label$29 }
	CALL eosio_assert([0], [10129])
	CALL eosio_assert([0], [10163])
	
.LABEL $label$29
	$5 = CALL db_next_i64(*($3 + [40]), ($2 + [144]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$30 }
	CALL $50(($2 + [104]), $5)
	
.LABEL $label$30
	CALL $71(($2 + [104]), $3)
	$8 = *($2 + [128])
	if ( ($8 == 0) ){ goto $label$31 }
	$6 = ($2 + [132])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$33 }
	
.LOOP $label$34:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$35 }
	CALL $9($7)
	
.LABEL $label$35
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$34 }
	$5 = *(($2 + [128]))
	goto $label$32 
	
.LABEL $label$33
	$5 = $8
	
.LABEL $label$32
	*($6) = $8
	CALL $9($5)
	
.LABEL $label$31
	$global$0 = ($2 + [688])
	return (unreachable)
	
.LABEL $label$2
	
.LABEL $label$1
	CALL $24($2)
	$3
	$11
	(unreachable)
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [36]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10427])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10473])
	
.LABEL $label$2
	$6 = *($1)
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))) ){ goto $label$3 }
	CALL eosio_assert([0], [9867])
	
.LABEL $label$3
	$7 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $7
	if ( ((int_64)$7 <= (int_64)-4611686018427387904) ){ goto $label$8 }
	if ( ((int_64)$7 >= (int_64)4611686018427387904) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert([0], [9910])
	if ( ((int_64)*(($1 + [8])) < (int_64)4611686018427387904) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [9929])
	if ( ((int_64)$6 != (int_64)*($1)) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [10524])
	
.LABEL $label$4
	$3 = $4
	$4 = ($3 + [-48])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-12])
	*($5 + [16]) = $5
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [32]) = ($1 + [24])
	*($5 + [36]) = ($1 + [28])
	*($5 + [40]) = ($1 + [32])
	CALL $62(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [40]), $2, $4, [36])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$global$0 = ($5 + [48])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [512])
	$global$0 = $2
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	$4 = ($2 + [500])
	$5 = [0]
	$6 = $2
	$7 = ($1 + [8])
	
.LOOP $label$3:
	$0 = ($0 + [1])
	
.LOOP $label$5:
	if ( ((int_32)($3 & [255]) == (int_32)[37]) ){ goto $label$4 }
	*($6) = $3
	$6 = ($6 + [1])
	if ( ((uint_32)$6 >= (uint_32)$4) ){ goto $label$1 }
	$3 = *($0)
	$0 = ($0 + [1])
	if ( ($3 & [255]) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$6 }
	goto $label$12 
	
.LABEL $label$12
	$8 = *($1)
	$9 = *($7)
	$10 = ((int_64)$9 & (int_64)255)
	if ( (int_64)($10 == 0) ){ goto $label$13 }
	$3 = [1]
	$11 = $10
	
.LOOP $label$14:
	$3 = ((int_32)$3 * (int_32)[10])
	$11 = ((int_64)$11 + (int_64)-1)
	if ( ((int_64)($11 == 0) == 0) ){ goto $label$14 }
	$12 = (CASTING uint_32)(uint_64 $10)
	$13 = (CASTING uint_64)(uint_32 $3)
	$11 = ((int_64)$8 / (int_64)$13)
	if ( ((int_64)$8 > (int_64)-1) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$13
	$12 = [0]
	$13 = (int_64)1
	$11 = ((int_64)$8 / (int_64)1)
	if ( ((int_64)$8 <= (int_64)-1) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	
.LABEL $label$10
	if ( ((int_64)($11 == 0) == 0) ){ goto $label$9 }
	*($6) = [45]
	$11 = (int_64)0
	$6 = ($6 + [2])
	if ( ((uint_32)$6 <= (uint_32)$4) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((int_64)$11 > (int_64)-1) ){ goto $label$15 }
	*($6) = [45]
	$11 = (int_64))((int_64)0 - $11)
	$6 = ($6 + [1])
	
.LABEL $label$15
	$6 = ($6 + [1])
	if ( (uint_64)($11 <= (int_64)10) ){ goto $label$16 }
	$10 = $11
	
.LOOP $label$17:
	$6 = ($6 + [1])
	$3 = ((uint_64)$10 > (uint_64)(int_64)99)
	$10 = ((uint_64)$10 / (uint_64)(int_64)10)
	if ( $3 ){ goto $label$17 }
	
.LABEL $label$16
	if ( ((uint_32)$6 > (uint_32)$4) ){ goto $label$7 }
	
.LABEL $label$8
	$3 = ($6 + [-1])
	
.LOOP $label$18:
	$10 = ((uint_64)$11 / (uint_64)(int_64)10)
	*($3) = ((CASTING uint_32)(uint_64 (int_64))($11 - ((int_64)$10 * (int_64)10))) | [48])
	$3 = ($3 + [-1])
	$14 = ((uint_64)$11 > (uint_64)(int_64)9)
	$11 = $10
	if ( $14 ){ goto $label$18 }
	
.LABEL $label$7
	$15 = ($6 + [1])
	if ( ((uint_32)$15 > (uint_32)$4) ){ goto $label$6 }
	*($6) = [46]
	if ( ((uint_32)(($6 + $12) + [1]) > (uint_32)$4) ){ goto $label$19 }
	if ( ($12 == 0) ){ goto $label$20 }
	$11 = (int_64)$8 >> (int_64)63
	$11 = ((uint_64)((int_64)((int_64)$8 + (int_64)$11)) ^ (int_64)$11) % (uint_64)$13)
	$3 = $12
	
.LOOP $label$21:
	$10 = ((uint_64)$11 / (uint_64)(int_64)10)
	*(($6 + $3)) = ((CASTING uint_32)(uint_64 (int_64))($11 - ((int_64)$10 * (int_64)10))) | [48])
	$14 = ($3 + [1])
	$3 = ($3 + [-1])
	$11 = $10
	if ( ((int_32)$14 > (int_32)[2]) ){ goto $label$21 }
	
.LABEL $label$20
	$15 = ($15 + $12)
	
.LABEL $label$19
	*($15) = [32]
	$6 = ($15 + [1])
	$11 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( (int_64)($11) == 0) ){ goto $label$6 }
	if ( ((uint_32)($15 + [8]) > (uint_32)$4) ){ goto $label$6 }
	
.LOOP $label$22:
	*($6) = $11
	$6 = ($6 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)($11) == 0) == 0) ){ goto $label$22 }
	
.LABEL $label$6
	if ( ((uint_32)$6 >= (uint_32)$4) ){ goto $label$1 }
	$5 = ($5 + [1])
	$3 = *($0)
	if ( ($3 & [255]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = $2
	
.LABEL $label$1
	*($6) = [0]
	$global$0 = ($2 + [512])
	$5
	(unreachable)
	return $2
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $33($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [9729])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$4 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [9729])
	$1 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($1, $4, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)-6499418656071090176, *($1))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $97($2, $4)
	if ( ((int_32)*($0 + [64]) == (int_32)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$1
	CALL $78(((int_32)$0 != (int_32)[0]), [9071], *($1))
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [10129])
	CALL eosio_assert([0], [10163])
	
.LABEL $label$2
	$1 = CALL db_next_i64(*($0 + [68]), ($2 + [40]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	CALL $97($2, $1)
	
.LABEL $label$3
	CALL $102($2, $0)
	$4 = *($2 + [24])
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = ($2 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL $9(*(($1 + [16])))
	
.LABEL $label$9
	CALL $9($1)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($2 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $4
	
.LABEL $label$5
	*($5) = $4
	CALL $9($0)
	
.LABEL $label$4
	$global$0 = ($2 + [48])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $33($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [16])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $9($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_32 $46
	int_32 $47
	int_32 $48
	int_32 $49
	int_32 $50
	int_32 $51
	int_32 $52
	int_32 $53
	int_32 $54
	int_32 $55
	int_32 $56
	int_32 $57
	int_32 $58
	int_32 $59
	int_32 $60
	int_32 $61
	int_32 $62
	int_32 $63
	int_32 $64
	int_32 $65
	int_32 $66
	int_32 $67
	int_32 $68
	int_32 $69
	int_32 $70
	int_32 $71
	int_32 $72
	int_32 $73
	int_32 $74
	$4 = ($global$0 - [752])
	$global$0 = $4
	if ( (CALL has_auth(CALL $89()) == 0) ){ goto $label$5 }
	*(($4 + [200])) = [0]
	$5 = ($1 + [8])
	$6 = *($5)
	$7 = *($0)
	$8 = ($1 + [24])
	$9 = *($8)
	*((($4 + [32]) + [24])) = $9
	$10 = *($1)
	$11 = *(($1 + [16]))
	*((($4 + [32]) + [16])) = $11
	*((($4 + [128]) + [24])) = $9
	*((($4 + [128]) + [16])) = $11
	*($4 + [184]) = (int_64)-1
	*($4 + [168]) = $7
	*($4 + [176]) = $7
	*($4 + [128]) = $10
	*($4 + [40]) = $6
	*($4 + [32]) = $10
	*($4 + [136]) = $6
	*($4 + [192]) = (int_64)0
	CALL $104([9116], ($4 + [32]))
	if ( ((int_64)((int_64)*($1) | (int_64)*($5)) != (int_64)0) ){ goto $label$6 }
	if ( ((int_64)((int_64)*($1 + [16]) | (int_64)*($8)) != (int_64)0) ){ goto $label$6 }
	$12 = ($4 + [708])
	$8 = [113]
	$5 = [0]
	
.LOOP $label$7:
	if ( ((int_32)($8 & [255]) == (int_32)[37]) ){ goto $label$4 }
	*(($13 = (($4 + [208]) + $5))) = $8
	$14 = ($5 + [1])
	if ( ((uint_32)($13 + [1]) >= (uint_32)$12) ){ goto $label$8 }
	$8 = ($5 + [9131])
	$5 = $14
	$8 = *($8)
	if ( ($8 & [255]) ){ goto $label$7 }
	
.LABEL $label$8
	*((($4 + [208]) + $14)) = [0]
	CALL eosio_assert([0], ($4 + [208]))
	
.LABEL $label$6
	$5 = CALL db_lowerbound_i64(*($4 + [168]), *((($4 + [168]) + [8])), (int_64)-6499418656071090176, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$15 = (($4 + [720]) | [1])
	$13 = ($4 + [708])
	$16 = CALL $97(($4 + [168]), $5)
	$17 = ($1 + [24])
	$18 = ($1 + [16])
	$19 = ($4 + [734])
	$20 = ($4 + [733])
	$21 = ($4 + [732])
	$22 = ($4 + [731])
	$23 = ($4 + [751])
	$24 = ($4 + [750])
	$25 = ($4 + [749])
	$26 = ($4 + [747])
	$27 = ($4 + [748])
	$28 = ($4 + [746])
	$29 = ($4 + [745])
	$30 = ($4 + [743])
	$31 = ($4 + [742])
	$32 = ($4 + [741])
	$33 = ($4 + [740])
	$34 = ($4 + [739])
	$35 = ($4 + [738])
	$36 = ($4 + [737])
	
.LOOP $label$11:
	$7 = *(($16 + [56]))
	$10 = *(($16 + [48]))
	$37 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$10 >> (uint_64)(int_64)56) | (int_64)((int_64)$7 << (int_64)8)))
	$38 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$10 >> (uint_64)(int_64)48) | (int_64)((int_64)$7 << (int_64)16)))
	$39 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$10 >> (uint_64)(int_64)40) | (int_64)((int_64)$7 << (int_64)24)))
	$6 = *(($16 + [40]))
	$9 = *($16 + [32])
	$40 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$9 >> (uint_64)(int_64)56) | (int_64)((int_64)$6 << (int_64)8)))
	$41 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$9 >> (uint_64)(int_64)48) | (int_64)((int_64)$6 << (int_64)16)))
	$42 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$9 >> (uint_64)(int_64)40) | (int_64)((int_64)$6 << (int_64)24)))
	$43 = (CASTING uint_32)(uint_64 $7)
	$44 = (CASTING uint_32)(uint_64 $10)
	$45 = (CASTING uint_32)(uint_64 $6)
	$46 = (CASTING uint_32)(uint_64 (uint_64)$9 >> (uint_64)(int_64)32))
	$47 = (CASTING uint_32)(uint_64 (uint_64)$9 >> (uint_64)(int_64)24))
	$48 = (CASTING uint_32)(uint_64 (uint_64)$9 >> (uint_64)(int_64)16))
	$49 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)56))
	$50 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)48))
	$51 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)40))
	$52 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$53 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)24))
	$54 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)16))
	$55 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)8))
	$56 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)32))
	$57 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)24))
	$58 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)16))
	$59 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)8))
	$60 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)56))
	$61 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)48))
	$62 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)40))
	$63 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32))
	$64 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)24))
	$65 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)16))
	$66 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)8))
	$67 = (CASTING uint_32)(uint_64 $9)
	$10 = *($1)
	$5 = (CASTING uint_32)(uint_64 $10)
	$68 = (CASTING uint_32)(uint_64 (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_32)($68) & [255]) != (int_32)(uint_32($5 >> [8]) & [255])) ){ goto $label$12 }
	if ( ((int_32)($48 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)16)) & [255])) ){ goto $label$12 }
	if ( ((int_32)($47 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)24)) & [255])) ){ goto $label$12 }
	if ( ((int_32)($46 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)32)) & [255])) ){ goto $label$12 }
	$7 = *(($1 + [8]))
	if ( ((int_32)($42 & [255]) != (int_32)((CASTING uint_32)(uint_64 ((int_64)(uint_64)$10 >> (uint_64)(int_64)40) | (int_64)((int_64)$7 << (int_64)24))) & [255])) ){ goto $label$12 }
	if ( ((int_32)($41 & [255]) != (int_32)((CASTING uint_32)(uint_64 ((int_64)(uint_64)$10 >> (uint_64)(int_64)48) | (int_64)((int_64)$7 << (int_64)16))) & [255])) ){ goto $label$12 }
	if ( ((int_32)($40 & [255]) != (int_32)((CASTING uint_32)(uint_64 ((int_64)(uint_64)$10 >> (uint_64)(int_64)56) | (int_64)((int_64)$7 << (int_64)8))) & [255])) ){ goto $label$12 }
	if ( ((int_32)($45 & [255]) != (int_32)((CASTING uint_32)(uint_64 $7) & [255])) ){ goto $label$12 }
	if ( ((int_32)($66 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)8)) & [255])) ){ goto $label$12 }
	if ( ((int_32)($65 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)16)) & [255])) ){ goto $label$12 }
	if ( ((int_32)($64 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)24)) & [255])) ){ goto $label$12 }
	if ( ((int_32)($63 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)) & [255])) ){ goto $label$12 }
	if ( ((int_32)($62 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)40)) & [255])) ){ goto $label$12 }
	if ( ((int_32)$60 != (int_32)(CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)56))) ){ goto $label$12 }
	if ( ((int_32)($61 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)48)) & [255])) ){ goto $label$12 }
	$7 = *($18)
	if ( ((int_32)($44 & [255]) != (int_32)((CASTING uint_32)(uint_64 $7) & [255])) ){ goto $label$12 }
	if ( ((int_32)($59 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)8)) & [255])) ){ goto $label$12 }
	if ( ((int_32)($58 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)16)) & [255])) ){ goto $label$12 }
	if ( ((int_32)($57 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)24)) & [255])) ){ goto $label$12 }
	if ( ((int_32)($56 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)) & [255])) ){ goto $label$12 }
	$10 = *($17)
	if ( ((int_32)($39 & [255]) != (int_32)((CASTING uint_32)(uint_64 ((int_64)(uint_64)$7 >> (uint_64)(int_64)40) | (int_64)((int_64)$10 << (int_64)24))) & [255])) ){ goto $label$12 }
	if ( ((int_32)($38 & [255]) != (int_32)((CASTING uint_32)(uint_64 ((int_64)(uint_64)$7 >> (uint_64)(int_64)48) | (int_64)((int_64)$10 << (int_64)16))) & [255])) ){ goto $label$12 }
	if ( ((int_32)($37 & [255]) != (int_32)((CASTING uint_32)(uint_64 ((int_64)(uint_64)$7 >> (uint_64)(int_64)56) | (int_64)((int_64)$10 << (int_64)8))) & [255])) ){ goto $label$12 }
	if ( ((int_32)($43 & [255]) != (int_32)((CASTING uint_32)(uint_64 $10) & [255])) ){ goto $label$12 }
	if ( ((int_32)($55 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)8)) & [255])) ){ goto $label$12 }
	if ( ((int_32)($54 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)16)) & [255])) ){ goto $label$12 }
	if ( ((int_32)($53 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)24)) & [255])) ){ goto $label$12 }
	if ( ((int_32)($52 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)32)) & [255])) ){ goto $label$12 }
	if ( ((int_32)($51 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)40)) & [255])) ){ goto $label$12 }
	if ( ((int_32)($50 & [255]) != (int_32)((CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)48)) & [255])) ){ goto $label$12 }
	if ( ((int_32)($67 & [255]) != (int_32)($5 & [255])) ){ goto $label$12 }
	if ( ((int_32)$49 == (int_32)(CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)56))) ){ goto $label$9 }
	
.LABEL $label$12
	$5 = ($60 & [15])
	$69 = (( [48] ? [55] : ($5 <= [10]) ) + $5)
	$70 = (( [48] ? [55] : ($60 <= [160]) ) + (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)60)))
	$6 = *($16)
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	$10 = ((int_64)$6 & (int_64)255)
	$71 = [0]
	$14 = [9155]
	$5 = [13]
	$8 = ($4 + [208])
	
.LOOP $label$13:
	$14 = ($14 + [1])
	
.LOOP $label$16:
	if ( ((int_32)($5 & [255]) == (int_32)[37]) ){ goto $label$15 }
	*($8) = $5
	$8 = ($8 + [1])
	if ( ((uint_32)$8 >= (uint_32)$13) ){ goto $label$14 }
	$5 = *($14)
	$14 = ($14 + [1])
	if ( ($5 & [255]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((uint_32)$71 > (uint_32)[9]) ){ goto $label$18 }
	goto $label$20 
	
.LABEL $label$20
	$72 = ($8 + [64])
	if ( ((uint_32)$72 > (uint_32)$13) ){ goto $label$18 }
	*($19) = $68
	*((($4 + [720]) + [15])) = $67
	*($20) = $48
	*($21) = $47
	*($22) = $46
	*((($4 + [720]) + [10])) = $42
	*((($4 + [720]) + [9])) = $41
	*((($4 + [720]) + [8])) = $40
	*($23) = $44
	*($24) = $59
	*($25) = $58
	*($4 + [727]) = $45
	*($4 + [726]) = $66
	*($4 + [725]) = $65
	*($4 + [724]) = $64
	*($4 + [723]) = $63
	*($4 + [722]) = $62
	*($4 + [721]) = $61
	*($4 + [720]) = $60
	*($26) = $56
	*($27) = $57
	*($28) = $39
	*($29) = $38
	*((($4 + [720]) + [24])) = $37
	*($30) = $43
	*($31) = $55
	*($32) = $54
	*($33) = $53
	*($34) = $52
	*($35) = $51
	*($36) = $50
	*((($4 + [720]) + [16])) = $49
	*($8) = $70
	*(($8 + [1])) = $69
	$5 = [0]
	$12 = $15
	
.LOOP $label$21:
	$74 = *($12)
	*((($73 = ($8 + $5)) + [2])) = (( [48] ? [55] : ($74 <= [160]) ) + uint_32($74 >> [4]))
	$74 = ($74 & [15])
	*(($73 + [3])) = (( [48] ? [55] : ($74 <= [10]) ) + $74)
	$12 = ($12 + [1])
	$5 = ($5 + [2])
	if ( ((int_32)$5 != (int_32)[62]) ){ goto $label$21 }
	$8 = $72
	if ( ((uint_32)$8 >= (uint_32)$13) ){ goto $label$14 }
	goto $label$17 
	
.LABEL $label$19
	$12 = ($8 + [1])
	$6 = $10
	if ( (uint_64)($10 <= (int_64)10) ){ goto $label$22 }
	
.LOOP $label$23:
	$12 = ($12 + [1])
	$5 = ((uint_64)$6 > (uint_64)(int_64)99)
	$6 = ((uint_64)$6 / (uint_64)(int_64)10)
	if ( $5 ){ goto $label$23 }
	
.LABEL $label$22
	if ( ((uint_32)$12 > (uint_32)$13) ){ goto $label$24 }
	$5 = ($12 + [-1])
	$6 = $10
	
.LOOP $label$25:
	$7 = ((uint_64)$6 / (uint_64)(int_64)10)
	*($5) = ((CASTING uint_32)(uint_64 (int_64))($6 - ((int_64)$7 * (int_64)10))) | [48])
	$5 = ($5 + [-1])
	$8 = ((uint_64)$6 > (uint_64)(int_64)9)
	$6 = $7
	if ( $8 ){ goto $label$25 }
	
.LABEL $label$24
	$8 = ($12 + [1])
	if ( ((uint_32)$8 <= (uint_32)$13) ){ goto $label$26 }
	$8 = $12
	if ( ($8 <= $13) ){ goto $label$17 }
	goto $label$14 
	
.LABEL $label$26
	*($12) = [44]
	if ( (int_64)($9 == 0) ){ goto $label$18 }
	if ( ((uint_32)($12 + [8]) > (uint_32)$13) ){ goto $label$18 }
	$6 = $9
	
.LOOP $label$27:
	*($8) = $6
	$8 = ($8 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)($6) == 0) == 0) ){ goto $label$27 }
	
.LABEL $label$18
	if ( ((uint_32)$8 >= (uint_32)$13) ){ goto $label$14 }
	
.LABEL $label$17
	$71 = ($71 + [1])
	$5 = *($14)
	if ( ($5 & [255]) ){ goto $label$13 }
	
.LABEL $label$14
	*($8) = [0]
	CALL prints(($4 + [208]))
	$5 = CALL db_next_i64(*($16 + [68]), ($4 + [208]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$16 = CALL $97(($4 + [168]), $5)
	goto $label$11 
	
.LABEL $label$10
	$10 = *(($1 + [24]))
	*((($4 + [96]) + [24])) = $10
	$9 = *(($1 + [16]))
	*((($4 + [96]) + [16])) = $9
	$6 = *(($1 + [8]))
	$7 = *($1)
	*(($4 + [16])) = $9
	*(($4 + [24])) = $10
	*($4 + [96]) = $7
	*($4 + [104]) = $6
	*($4) = $7
	*($4 + [8]) = $6
	CALL $104([9200], $4)
	goto $label$3 
	
.LABEL $label$9
	CALL $105(($4 + [168]), $16, *($0))
	*($4 + [88]) = [0]
	*($4 + [80]) = (int_64)0
	$14 = [0]
	$5 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$29 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$28 }
	$14 = CALL $7($8)
	*(($4 + [88])) = ($14 + $8)
	*($4 + [80]) = $14
	*($4 + [84]) = $14
	$8 = *($2)
	$5 = (*(($2 + [4])) - $8)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$30 }
	CALL memcpy($14, $8, $5)
	$14 = (*($4 + [84]) + $5)
	*($4 + [84]) = $14
	$5 = *($4 + [80])
	goto $label$29 
	
.LABEL $label$30
	$5 = $14
	
.LABEL $label$29
	*(($4 + [728])) = [0]
	*($4 + [720]) = (int_64)0
	$12 = ($14 - $5)
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$12 > (uint_32)[10]) ){ goto $label$34 }
	*($4 + [720]) = ($12 << [1])
	$13 = (($4 + [720]) | [1])
	if ( ((int_32)$5 != (int_32)$14) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$8 = (($12 + [16]) & [-16])
	$13 = CALL $7($8)
	*($4 + [720]) = ($8 | [1])
	*($4 + [728]) = $13
	*($4 + [724]) = $12
	if ( ((int_32)$5 == (int_32)$14) ){ goto $label$32 }
	
.LABEL $label$33
	$8 = $13
	
.LOOP $label$35:
	*($8) = *($5)
	$8 = ($8 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$14 != (int_32)$5) ){ goto $label$35 }
	$13 = ($13 + $12)
	
.LABEL $label$32
	*($13) = [0]
	$5 = *($4 + [80])
	if ( ($5 == 0) ){ goto $label$36 }
	*($4 + [84]) = $5
	CALL $9($5)
	
.LABEL $label$36
	*($4 + [76]) = [0]
	$5 = *($16 + [20])
	if ( ($5 <= [3]) ){ goto $label$37 }
	CALL eosio_assert([0], [9947])
	
.LABEL $label$37
	*($4 + [72]) = $5
	CALL $75(($4 + [208]), $5, $16, ( *($4 + [728]) ? (($4 + [720]) | [1]) : (*($4 + [720]) & [1]) ))
	CALL $84($0, ($4 + [76]), ($4 + [72]), ($4 + [208]))
	if ( ((*($4 + [720]) & [1]) == 0) ){ goto $label$3 }
	CALL $9(*(($4 + [728])))
	$14 = *($4 + [192])
	if ( $14 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$31
	CALL $24(($4 + [720]))
	
.LABEL $label$28
	CALL $33(($4 + [80]))
	
.LABEL $label$5
	$12 = ($4 + [708])
	$8 = [13]
	$5 = [0]
	
.LOOP $label$38:
	if ( ((int_32)($8 & [255]) == (int_32)[37]) ){ goto $label$4 }
	*(($13 = (($4 + [208]) + $5))) = $8
	$14 = ($5 + [1])
	if ( ((uint_32)($13 + [1]) >= (uint_32)$12) ){ goto $label$39 }
	$8 = ($5 + [9090])
	$5 = $14
	$8 = *($8)
	if ( ($8 & [255]) ){ goto $label$38 }
	
.LABEL $label$39
	*((($4 + [208]) + $14)) = [0]
	CALL prints(($4 + [208]))
	$global$0 = ($4 + [752])
	return (unreachable)
	
.LABEL $label$4
	
.LABEL $label$3
	$14 = *($4 + [192])
	if ( ($14 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$13 = ($4 + [196])
	$5 = *($13)
	if ( ((int_32)$5 == (int_32)$14) ){ goto $label$41 }
	
.LOOP $label$42:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$43 }
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$44 }
	CALL $9(*(($8 + [16])))
	
.LABEL $label$44
	CALL $9($8)
	
.LABEL $label$43
	if ( ((int_32)$14 != (int_32)$5) ){ goto $label$42 }
	$5 = *(($4 + [192]))
	goto $label$40 
	
.LABEL $label$41
	$5 = $14
	
.LABEL $label$40
	*($13) = $14
	CALL $9($5)
	
.LABEL $label$1
	$global$0 = ($4 + [752])
	$71
	(unreachable)
	(unreachable)
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10238])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [10288])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($5 + [16])))
	
.LABEL $label$13
	CALL $9($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$16 }
	CALL $9(*(($8 + [16])))
	
.LABEL $label$16
	CALL $9($8)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $105 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10427])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10473])
	
.LABEL $label$2
	$5 = *($1)
	*(($4 + [56])) = (int_64)0
	*(($4 + [48])) = (int_64)0
	*($1 + [32]) = (int_64)0
	*(($1 + [40])) = (int_64)0
	*(($1 + [48])) = (int_64)0
	*(($1 + [56])) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	$6 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [52])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	$9 = ($1 + [32])
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($6 <= [513]) ){ goto $label$5 }
	$3 = CALL $1($6)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$4
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = $7
	*($4 + [52]) = $9
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [20])
	*($4 + [44]) = ($1 + [24])
	*($4 + [48]) = ($1 + [28])
	CALL $159(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [68]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $2($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$6
	$global$0 = ($4 + [64])
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_32 $46
	int_32 $47
	int_32 $48
	int_32 $49
	int_32 $50
	int_32 $51
	int_32 $52
	int_32 $53
	int_32 $54
	int_32 $55
	int_32 $56
	int_32 $57
	int_32 $58
	int_32 $59
	int_32 $60
	int_32 $61
	int_32 $62
	int_32 $63
	int_32 $64
	int_32 $65
	int_32 $66
	int_32 $67
	int_32 $68
	int_32 $69
	$2 = ($global$0 - [544])
	$global$0 = $2
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = ($2 + [500])
	$5 = *(($1 + [8]))
	$6 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)56)
	$7 = (( [48] ? [55] : ($6) <= [160]) ) + (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)60)))
	$8 = ($6 & [15])
	$9 = (( [48] ? [55] : ($8 <= [10]) ) + $8)
	$11 = *(($1 + [24]))
	$10 = *($1 + [16])
	$12 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$10 >> (uint_64)(int_64)56) | (int_64)((int_64)$11 << (int_64)8)))
	$13 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$10 >> (uint_64)(int_64)48) | (int_64)((int_64)$11 << (int_64)16)))
	$14 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$10 >> (uint_64)(int_64)40) | (int_64)((int_64)$11 << (int_64)24)))
	$15 = *($1)
	$16 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$15 >> (uint_64)(int_64)56) | (int_64)((int_64)$5 << (int_64)8)))
	$17 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$15 >> (uint_64)(int_64)48) | (int_64)((int_64)$5 << (int_64)16)))
	$18 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$15 >> (uint_64)(int_64)40) | (int_64)((int_64)$5 << (int_64)24)))
	$19 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)32))
	$20 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)24))
	$21 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)16))
	$22 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)8))
	$23 = (CASTING uint_32)(uint_64 (uint_64)$15 >> (uint_64)(int_64)32))
	$24 = (CASTING uint_32)(uint_64 (uint_64)$15 >> (uint_64)(int_64)24))
	$25 = (CASTING uint_32)(uint_64 (uint_64)$15 >> (uint_64)(int_64)16))
	$26 = (CASTING uint_32)(uint_64 (uint_64)$15 >> (uint_64)(int_64)8))
	$27 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)56))
	$28 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)48))
	$29 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)40))
	$30 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$31 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)24))
	$32 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)16))
	$33 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)8))
	$34 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)48))
	$35 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)40))
	$36 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32))
	$37 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)24))
	$38 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)16))
	$39 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)8))
	$40 = (($2 + [512]) | [1])
	$41 = (CASTING uint_32)(uint_64 $10)
	$42 = (CASTING uint_32)(uint_64 $15)
	$43 = (CASTING uint_32)(uint_64 $11)
	$44 = (CASTING uint_32)(uint_64 $5)
	$45 = [0]
	$1 = $2
	$46 = ($2 + [526])
	$47 = ($2 + [525])
	$48 = ($2 + [524])
	$49 = ($2 + [523])
	$50 = (($2 + [512]) + [8])
	$51 = ($2 + [543])
	$52 = ($2 + [542])
	$53 = ($2 + [541])
	$54 = ($2 + [539])
	$55 = ($2 + [540])
	$56 = ($2 + [538])
	$57 = ($2 + [537])
	$58 = (($2 + [512]) + [24])
	$59 = ($2 + [535])
	$60 = ($2 + [534])
	$61 = ($2 + [533])
	$62 = ($2 + [532])
	$63 = ($2 + [531])
	$64 = ($2 + [530])
	$65 = ($2 + [529])
	$66 = ($2 + [528])
	
.LOOP $label$4:
	$0 = ($0 + [1])
	
.LOOP $label$6:
	if ( ((int_32)($3 & [255]) == (int_32)[37]) ){ goto $label$5 }
	*($1) = $3
	$1 = ($1 + [1])
	if ( ((uint_32)$1 >= (uint_32)$4) ){ goto $label$2 }
	$3 = *($0)
	$0 = ($0 + [1])
	if ( ($3 & [255]) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$5
	if ( ((uint_32)$45 > (uint_32)[9]) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$8
	$67 = ($1 + [64])
	if ( ((uint_32)$67 > (uint_32)$4) ){ goto $label$7 }
	*($46) = $26
	*((($2 + [512]) + [15])) = $42
	*($47) = $25
	*($48) = $24
	*($49) = $23
	*((($2 + [512]) + [10])) = $18
	*((($2 + [512]) + [9])) = $17
	*($50) = $16
	*($51) = $41
	*($52) = $22
	*($53) = $21
	*($2 + [519]) = $44
	*($2 + [518]) = $39
	*($2 + [517]) = $38
	*($2 + [516]) = $37
	*($2 + [515]) = $36
	*($2 + [514]) = $35
	*($2 + [513]) = $34
	*($2 + [512]) = $6
	*($54) = $19
	*($55) = $20
	*($56) = $14
	*($57) = $13
	*($58) = $12
	*($59) = $43
	*($60) = $33
	*($61) = $32
	*($62) = $31
	*($63) = $30
	*($64) = $29
	*($65) = $28
	*($66) = $27
	*($1) = $7
	*(($1 + [1])) = $9
	$3 = [0]
	$8 = $40
	
.LOOP $label$9:
	$69 = *($8)
	*((($68 = ($1 + $3)) + [2])) = (( [48] ? [55] : ($69 <= [160]) ) + uint_32($69 >> [4]))
	$69 = ($69 & [15])
	*(($68 + [3])) = (( [48] ? [55] : ($69 <= [10]) ) + $69)
	$8 = ($8 + [1])
	$3 = ($3 + [2])
	if ( ((int_32)$3 != (int_32)[62]) ){ goto $label$9 }
	$1 = $67
	
.LABEL $label$7
	if ( ((uint_32)$1 >= (uint_32)$4) ){ goto $label$2 }
	$45 = ($45 + [1])
	$3 = *($0)
	if ( ($3 & [255]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$1 = $2
	
.LABEL $label$2
	*($1) = [0]
	CALL prints($2)
	$global$0 = ($2 + [544])
	return (unreachable)
	
.LABEL $label$1
	$45
}

int_64 .FUNC $89 ()
{
	int_32 $0
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$0 = ($global$0 - [48])
	$global$0 = $0
	*(($0 + [40])) = [0]
	*($0 + [16]) = (int_64)-5914999693434869968
	*($0 + [8]) = (int_64)-5914999693434869968
	*($0 + [24]) = (int_64)-1
	$1 = (int_64)0
	*($0 + [32]) = (int_64)0
	$2 = CALL db_lowerbound_i64((int_64)-5914999693434869968, (int_64)-5914999693434869968, (int_64)4741328180328005632, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = *(CALL $90(($0 + [8]), $2))
	$3 = *($0 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($0 + [36])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $9($5)
	
.LABEL $label$5
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($0 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $3
	
.LABEL $label$2
	*($4) = $3
	CALL $9($2)
	
.LABEL $label$1
	$global$0 = ($0 + [48])
	return $1
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [92]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10427])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10473])
	
.LABEL $label$2
	$6 = *($3)
	$7 = *($1 + [8])
	$8 = (CASTING uint_32)(uint_64 ((int_64)CALL $34() / (int_64)1000000))
	*($1 + [16]) = $8
	$9 = *(*($3 + [4]))
	if ( ((int_32)$9 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$5 }
	if ( $9 ){ goto $label$4 }
	$3 = *($3 + [8])
	*($1 + [24]) = *($3)
	$10 = *(($3 + [8]))
	*($1 + [40]) = $8
	*(($1 + [32])) = $10
	goto $label$3 
	
.LABEL $label$6
	$3 = *($3 + [8])
	*($1 + [72]) = *($3)
	$10 = *(($3 + [8]))
	*($1 + [88]) = $8
	*(($1 + [80])) = $10
	goto $label$3 
	
.LABEL $label$5
	$3 = *($3 + [8])
	*($1 + [48]) = *($3)
	$10 = *(($3 + [8]))
	*($1 + [64]) = $8
	*(($1 + [56])) = $10
	goto $label$3 
	
.LABEL $label$4
	CALL $32(($5 + [32]), $9)
	if ( (*($5 + [32]) & [1]) ){ goto $label$8 }
	$3 = (($5 + [32]) | [1])
	goto $label$7 
	
.LABEL $label$8
	$3 = *($5 + [40])
	CALL $9($3)
	
.LABEL $label$7
	CALL $47([0], [8996], $3)
	
.LABEL $label$3
	CALL $79(($5 + [32]), $6)
	*($5 + [32]) = *($5 + [44])
	CALL $80($5, ($5 + [32]), $1)
	if ( ((int_64)$7 == (int_64)*(($1 + [8]))) ){ goto $label$9 }
	CALL eosio_assert([0], [10524])
	
.LABEL $label$9
	$4 = $4
	$3 = ($4 + [-80])
	$global$0 = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = $4
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [16])
	*($5 + [40]) = ($1 + [24])
	*($5 + [44]) = ($1 + [40])
	*($5 + [48]) = ($1 + [48])
	*($5 + [52]) = ($1 + [64])
	*($5 + [56]) = ($1 + [72])
	*($5 + [60]) = ($1 + [88])
	CALL $152(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [96]), $2, $3, [80])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$global$0 = ($5 + [64])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $33($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = (CASTING uint_32)(uint_64 ((int_64)CALL $34() / (int_64)1000000))
	*($1 + [16]) = $7
	$8 = *(*($5 + [4]))
	if ( ((int_32)$8 == (int_32)[2]) ){ goto $label$4 }
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$3 }
	if ( $8 ){ goto $label$2 }
	$5 = *($5 + [8])
	*($1 + [24]) = *($5)
	$9 = *(($5 + [8]))
	*($1 + [40]) = $7
	*(($1 + [32])) = $9
	goto $label$1 
	
.LABEL $label$4
	$5 = *($5 + [8])
	*($1 + [72]) = *($5)
	$9 = *(($5 + [8]))
	*($1 + [88]) = $7
	*(($1 + [80])) = $9
	goto $label$1 
	
.LABEL $label$3
	$5 = *($5 + [8])
	*($1 + [48]) = *($5)
	$9 = *(($5 + [8]))
	*($1 + [64]) = $7
	*(($1 + [56])) = $9
	goto $label$1 
	
.LABEL $label$2
	CALL $32(($3 + [32]), $8)
	if ( (*($3 + [32]) & [1]) ){ goto $label$6 }
	$5 = (($3 + [32]) | [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($3 + [40])
	CALL $9($5)
	
.LABEL $label$5
	CALL $47([0], [8996], $5)
	
.LABEL $label$1
	CALL $79(($3 + [32]), $6)
	*($3 + [32]) = *($3 + [44])
	CALL $80($3, ($3 + [32]), $1)
	$5 = $2
	$2 = ($5 + [-80])
	$global$0 = $2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = $5
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [16])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [24])
	*($3 + [44]) = ($1 + [40])
	*($3 + [48]) = ($1 + [48])
	*($3 + [52]) = ($1 + [64])
	*($3 + [56]) = ($1 + [72])
	*($3 + [60]) = ($1 + [88])
	CALL $152(($3 + [32]), ($3 + [24]))
	$9 = *($1 + [8])
	*($1 + [96]) = CALL db_store_i64(*($4 + [8]), (int_64)-6499411808120471552, *(*($0 + [8])), $9, $2, [80])
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$7 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$global$0 = ($3 + [64])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	$3 = ($global$0 - [512])
	$global$0 = $3
	$4 = *($0)
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ($3 + [500])
	$7 = (int_64)$6 >> (int_64)63
	$6 = *($2)
	$8 = ((int_64)((int_64)$6 + (int_64)$7)) ^ (int_64)$7)
	$7 = (int_64)$9 >> (int_64)63
	$9 = *($1)
	$10 = ((int_64)((int_64)$9 + (int_64)$7)) ^ (int_64)$7)
	$7 = *($2 + [8])
	$11 = (uint_64)$7 >> (uint_64)(int_64)8)
	$12 = *($1 + [8])
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	$14 = ((int_64)$12 & (int_64)255)
	$15 = (CASTING uint_32)(uint_64 $14)
	$16 = ($15 + [2])
	$17 = ((int_64)$7 & (int_64)255)
	$18 = (CASTING uint_32)(uint_64 $17)
	$19 = ($18 + [2])
	$20 = ($18 + [1])
	$21 = ($15 + [1])
	$22 = [0]
	$1 = $3
	
.LOOP $label$3:
	$0 = ($0 + [1])
	
.LOOP $label$5:
	if ( ((int_32)($4 & [255]) == (int_32)[37]) ){ goto $label$4 }
	*($1) = $4
	$1 = ($1 + [1])
	if ( ((uint_32)$1 >= (uint_32)$5) ){ goto $label$1 }
	$4 = *($0)
	$0 = ($0 + [1])
	if ( ($4 & [255]) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((uint_32)$22 > (uint_32)[9]) ){ goto $label$6 }
	goto $label$19 
	
.LABEL $label$19
	if ( (int_64)($14 == 0) ){ goto $label$17 }
	$4 = [1]
	$7 = $14
	
.LOOP $label$20:
	$4 = ((int_32)$4 * (int_32)[10])
	$7 = ((int_64)$7 + (int_64)-1)
	if ( ((int_64)($7 == 0) == 0) ){ goto $label$20 }
	$23 = (CASTING uint_64)(uint_32 $4)
	$7 = ((int_64)$9 / (int_64)$23)
	if ( ((int_64)$9 > (int_64)-1) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$18
	if ( (int_64)($17 == 0) ){ goto $label$16 }
	$4 = [1]
	$7 = $17
	
.LOOP $label$21:
	$4 = ((int_32)$4 * (int_32)[10])
	$7 = ((int_64)$7 + (int_64)-1)
	if ( ((int_64)($7 == 0) == 0) ){ goto $label$21 }
	$23 = (CASTING uint_64)(uint_32 $4)
	$7 = ((int_64)$6 / (int_64)$23)
	if ( ((int_64)$6 > (int_64)-1) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	$23 = (int_64)1
	$7 = ((int_64)$9 / (int_64)1)
	if ( ((int_64)$9 <= (int_64)-1) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$16
	$23 = (int_64)1
	$7 = ((int_64)$6 / (int_64)1)
	if ( ((int_64)$6 <= (int_64)-1) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	
.LABEL $label$14
	if ( ((int_64)($7 == 0) == 0) ){ goto $label$13 }
	*($1) = [45]
	$7 = (int_64)0
	$1 = ($1 + [2])
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((int_64)$7 > (int_64)-1) ){ goto $label$22 }
	*($1) = [45]
	$7 = (int_64))((int_64)0 - $7)
	$1 = ($1 + [1])
	
.LABEL $label$22
	$1 = ($1 + [1])
	if ( (uint_64)($7 <= (int_64)10) ){ goto $label$23 }
	$12 = $7
	
.LOOP $label$24:
	$1 = ($1 + [1])
	$4 = ((uint_64)$12 > (uint_64)(int_64)99)
	$12 = ((uint_64)$12 / (uint_64)(int_64)10)
	if ( $4 ){ goto $label$24 }
	
.LABEL $label$23
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$11 }
	
.LABEL $label$12
	$4 = ($1 + [-1])
	
.LOOP $label$25:
	$12 = ((uint_64)$7 / (uint_64)(int_64)10)
	*($4) = ((CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$12 * (int_64)10))) | [48])
	$4 = ($4 + [-1])
	$2 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $12
	if ( $2 ){ goto $label$25 }
	
.LABEL $label$11
	$2 = ($1 + [1])
	if ( ((uint_32)$2 > (uint_32)$5) ){ goto $label$6 }
	*($1) = [46]
	if ( ((uint_32)($1 + $20) > (uint_32)$5) ){ goto $label$26 }
	if ( ($18 == 0) ){ goto $label$27 }
	$7 = ((uint_64)$8 % (uint_64)$23)
	$4 = $19
	
.LOOP $label$28:
	$12 = ((uint_64)$7 / (uint_64)(int_64)10)
	*((($1 + $4) + [-2])) = ((CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$12 * (int_64)10))) | [48])
	$7 = $12
	$4 = ($4 + [-1])
	if ( ((int_32)$4 > (int_32)[2]) ){ goto $label$28 }
	
.LABEL $label$27
	$2 = ($2 + $18)
	
.LABEL $label$26
	*($2) = [32]
	$1 = ($2 + [1])
	if ( (int_64)($11 == 0) ){ goto $label$6 }
	if ( ((uint_32)($2 + [8]) > (uint_32)$5) ){ goto $label$6 }
	$7 = $11
	
.LOOP $label$29:
	*($1) = $7
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)($7) == 0) == 0) ){ goto $label$29 }
	goto $label$6 
	
.LABEL $label$10
	if ( ((int_64)($7 == 0) == 0) ){ goto $label$9 }
	*($1) = [45]
	$7 = (int_64)0
	$1 = ($1 + [2])
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((int_64)$7 > (int_64)-1) ){ goto $label$30 }
	*($1) = [45]
	$7 = (int_64))((int_64)0 - $7)
	$1 = ($1 + [1])
	
.LABEL $label$30
	$1 = ($1 + [1])
	if ( (uint_64)($7 <= (int_64)10) ){ goto $label$31 }
	$12 = $7
	
.LOOP $label$32:
	$1 = ($1 + [1])
	$4 = ((uint_64)$12 > (uint_64)(int_64)99)
	$12 = ((uint_64)$12 / (uint_64)(int_64)10)
	if ( $4 ){ goto $label$32 }
	
.LABEL $label$31
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$7 }
	
.LABEL $label$8
	$4 = ($1 + [-1])
	
.LOOP $label$33:
	$12 = ((uint_64)$7 / (uint_64)(int_64)10)
	*($4) = ((CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$12 * (int_64)10))) | [48])
	$4 = ($4 + [-1])
	$2 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $12
	if ( $2 ){ goto $label$33 }
	
.LABEL $label$7
	$2 = ($1 + [1])
	if ( ((uint_32)$2 > (uint_32)$5) ){ goto $label$6 }
	*($1) = [46]
	if ( ((uint_32)($1 + $21) > (uint_32)$5) ){ goto $label$34 }
	if ( ($15 == 0) ){ goto $label$35 }
	$7 = ((uint_64)$10 % (uint_64)$23)
	$4 = $16
	
.LOOP $label$36:
	$12 = ((uint_64)$7 / (uint_64)(int_64)10)
	*((($1 + $4) + [-2])) = ((CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$12 * (int_64)10))) | [48])
	$7 = $12
	$4 = ($4 + [-1])
	if ( ((int_32)$4 > (int_32)[2]) ){ goto $label$36 }
	
.LABEL $label$35
	$2 = ($2 + $15)
	
.LABEL $label$34
	*($2) = [32]
	$1 = ($2 + [1])
	if ( (int_64)($13 == 0) ){ goto $label$6 }
	if ( ((uint_32)($2 + [8]) > (uint_32)$5) ){ goto $label$6 }
	$7 = $13
	
.LOOP $label$37:
	*($1) = $7
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)($7) == 0) == 0) ){ goto $label$37 }
	
.LABEL $label$6
	if ( ((uint_32)$1 >= (uint_32)$5) ){ goto $label$1 }
	$22 = ($22 + [1])
	$4 = *($0)
	if ( ($4 & [255]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$1 = $3
	
.LABEL $label$1
	*($1) = [0]
	CALL prints($3)
	$global$0 = ($3 + [512])
	$22
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [1040])
	$global$0 = $4
	$5 = (int_64)0
	*($4 + [472]) = (int_64)0
	*($4 + [464]) = (int_64)0
	$2 = *($2)
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$13 }
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$12 }
	if ( $2 ){ goto $label$11 }
	CALL __extenddftf2(($4 + [144]), CALL $36((float_64)10, (CASTING float_64)(uint_32 *($3 + [8]))))
	$5 = *((($4 + [144]) + [8]))
	$6 = *($4 + [144])
	$7 = *($3 + [8])
	$8 = ((int_64)$7 & (int_64)255)
	if ( (int_64)($8 == 0) ){ goto $label$10 }
	$2 = [1]
	
.LOOP $label$14:
	$2 = ((int_32)$2 * (int_32)[10])
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)($8 == 0) == 0) ){ goto $label$14 }
	CALL __floatsitf(($4 + [128]), $2)
	$8 = *(($4 + [136]))
	$9 = *($4 + [128])
	goto $label$9 
	
.LABEL $label$13
	CALL $76(($4 + [480]), $0)
	$2 = (($4 + [480]) + [8])
	$6 = *($2)
	*((($4 + [448]) + [8])) = $6
	$8 = *(($3 + [8]))
	$7 = *($3)
	*((($4 + [320]) + [8])) = $6
	*((($4 + [304]) + [8])) = $8
	*((($4 + [432]) + [8])) = $8
	$8 = *($4 + [480])
	*($4 + [448]) = $8
	*($4 + [320]) = $8
	*($4 + [304]) = $7
	*($4 + [432]) = $7
	CALL $85([8872], ($4 + [320]), ($4 + [304]))
	$7 = (int_64)4611404543450677248
	$6 = (int_64)4611404543450677248
	$8 = *($2)
	if ( (int_64)($8 == 0) ){ goto $label$15 }
	$2 = [1]
	
.LOOP $label$16:
	$2 = ((int_32)$2 * (int_32)[10])
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)($8 == 0) == 0) ){ goto $label$16 }
	CALL __floatsitf(($4 + [288]), $2)
	$6 = *(($4 + [296]))
	$5 = *($4 + [288])
	
.LABEL $label$15
	CALL __floatditf(($4 + [272]), *($4 + [480]))
	CALL __divtf3(($4 + [256]), *($4 + [272]), *((($4 + [272]) + [8])), $5, $6)
	$6 = *((($4 + [256]) + [8]))
	$9 = *($4 + [256])
	$5 = *($3 + [8])
	if ( (int_64)($5 == 0) ){ goto $label$8 }
	$2 = [1]
	$8 = $5
	
.LOOP $label$17:
	$2 = ((int_32)$2 * (int_32)[10])
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)($8 == 0) == 0) ){ goto $label$17 }
	CALL __floatsitf(($4 + [240]), $2)
	$7 = *(($4 + [248]))
	$8 = *($4 + [240])
	goto $label$7 
	
.LABEL $label$12
	*((($4 + [464]) + [8])) = *(($3 + [8]))
	*($4 + [464]) = *($3)
	goto $label$2 
	
.LABEL $label$11
	$7 = (CASTING int_64)(int_32 $2)
	$10 = ($4 + [980])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$2 <= (uint_32)[9]) ){ goto $label$5 }
	$11 = [0]
	$12 = [8897]
	$13 = [85]
	$2 = ($4 + [480])
	
.LOOP $label$18:
	$12 = ($12 + [1])
	
.LOOP $label$20:
	if ( ((int_32)($13 & [255]) == (int_32)[37]) ){ goto $label$19 }
	*($2) = $13
	$2 = ($2 + [1])
	if ( ((uint_32)$2 >= (uint_32)$10) ){ goto $label$3 }
	$13 = *($12)
	$12 = ($12 + [1])
	if ( ($13 & [255]) ){ goto $label$20 }
	goto $label$3 
	
.LABEL $label$19
	if ( ((uint_32)$11 > (uint_32)[9]) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$22
	$2 = ($2 + [1])
	$8 = $7
	
.LOOP $label$23:
	$13 = $2
	$2 = ($13 + [1])
	$14 = ((uint_64)$8 > (uint_64)(int_64)99)
	$8 = ((uint_64)$8 / (uint_64)(int_64)10)
	if ( $14 ){ goto $label$23 }
	$8 = $7
	if ( ((uint_32)$2 > (uint_32)$10) ){ goto $label$21 }
	
.LOOP $label$24:
	$5 = ((uint_64)$8 / (uint_64)(int_64)10)
	*($13) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$5 * (int_64)10))) | [48])
	$13 = ($13 + [-1])
	$14 = ((uint_64)$8 > (uint_64)(int_64)9)
	$8 = $5
	if ( $14 ){ goto $label$24 }
	
.LABEL $label$21
	if ( ((uint_32)$2 >= (uint_32)$10) ){ goto $label$3 }
	$11 = ($11 + [1])
	$13 = *($12)
	if ( ($13 & [255]) ){ goto $label$18 }
	goto $label$3 
	
.LABEL $label$10
	$8 = (int_64)4611404543450677248
	$9 = (int_64)0
	
.LABEL $label$9
	CALL __floatditf(($4 + [112]), *($3))
	CALL __divtf3(($4 + [96]), *($4 + [112]), *((($4 + [112]) + [8])), $9, $8)
	CALL __divtf3(($4 + [80]), $6, $5, *($4 + [96]), *((($4 + [96]) + [8])))
	$6 = CALL __fixtfdi(*($4 + [80]), *((($4 + [80]) + [8])))
	if ( (uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$25 }
	CALL eosio_assert([0], [9660])
	
.LABEL $label$25
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$5 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$8 = $5
	$13 = $2
	$2 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$8 = $5
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$13 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $13 ){ goto $label$30 }
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	CALL eosio_assert([0], [9709])
	
.LABEL $label$26
	*(($4 + [472])) = $7
	*($4 + [464]) = $6
	goto $label$2 
	
.LABEL $label$8
	$8 = (int_64)0
	
.LABEL $label$7
	CALL __floatditf(($4 + [224]), *($3))
	CALL __divtf3(($4 + [208]), *($4 + [224]), *((($4 + [224]) + [8])), $8, $7)
	CALL __multf3(($4 + [192]), $9, $6, *($4 + [208]), *((($4 + [208]) + [8])))
	CALL __extenddftf2(($4 + [176]), CALL $36((float_64)10, (CASTING float_64)(uint_32 (CASTING uint_32)(uint_64 $5))))
	CALL __multf3(($4 + [160]), *($4 + [192]), *((($4 + [192]) + [8])), *($4 + [176]), *((($4 + [176]) + [8])))
	$7 = CALL __fixtfdi(*($4 + [160]), *((($4 + [160]) + [8])))
	$6 = *(($3 + [8]))
	if ( (uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$31 }
	CALL eosio_assert([0], [9660])
	
.LABEL $label$31
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$5 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$8 = $5
	$13 = $2
	$2 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$8 = $5
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$13 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $13 ){ goto $label$36 }
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	CALL eosio_assert([0], [9709])
	
.LABEL $label$32
	*(($4 + [472])) = $6
	*($4 + [464]) = $7
	goto $label$2 
	
.LABEL $label$6
	$7 = (int_64)
	if ( ((uint_64)$7((int_64)0 - $7)) <= (uint_64)(int_64)9) ){ goto $label$4 }
	$11 = [0]
	$12 = [8897]
	$13 = [85]
	$2 = ($4 + [480])
	
.LOOP $label$37:
	$12 = ($12 + [1])
	
.LOOP $label$39:
	if ( ((int_32)($13 & [255]) == (int_32)[37]) ){ goto $label$38 }
	*($2) = $13
	$2 = ($2 + [1])
	if ( ((uint_32)$2 >= (uint_32)$10) ){ goto $label$3 }
	$13 = *($12)
	$12 = ($12 + [1])
	if ( ($13 & [255]) ){ goto $label$39 }
	goto $label$3 
	
.LABEL $label$38
	if ( ((uint_32)$11 > (uint_32)[9]) ){ goto $label$40 }
	goto $label$41 
	
.LABEL $label$41
	*($2) = [45]
	$2 = ($2 + [2])
	$8 = $7
	
.LOOP $label$42:
	$13 = $2
	$2 = ($13 + [1])
	$14 = ((uint_64)$8 > (uint_64)(int_64)99)
	$8 = ((uint_64)$8 / (uint_64)(int_64)10)
	if ( $14 ){ goto $label$42 }
	$8 = $7
	if ( ((uint_32)$2 > (uint_32)$10) ){ goto $label$40 }
	
.LOOP $label$43:
	$5 = ((uint_64)$8 / (uint_64)(int_64)10)
	*($13) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$5 * (int_64)10))) | [48])
	$13 = ($13 + [-1])
	$14 = ((uint_64)$8 > (uint_64)(int_64)9)
	$8 = $5
	if ( $14 ){ goto $label$43 }
	
.LABEL $label$40
	if ( ((uint_32)$2 >= (uint_32)$10) ){ goto $label$3 }
	$11 = ($11 + [1])
	$13 = *($12)
	if ( ($13 & [255]) ){ goto $label$37 }
	goto $label$3 
	
.LABEL $label$5
	$14 = [0]
	$12 = [8897]
	$13 = [85]
	$2 = ($4 + [480])
	
.LOOP $label$44:
	$12 = ($12 + [1])
	
.LOOP $label$46:
	if ( ((int_32)($13 & [255]) == (int_32)[37]) ){ goto $label$45 }
	*($2) = $13
	$2 = ($2 + [1])
	if ( ((uint_32)$2 >= (uint_32)$10) ){ goto $label$3 }
	$13 = *($12)
	$12 = ($12 + [1])
	if ( ($13 & [255]) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$45
	if ( ((uint_32)$14 > (uint_32)[9]) ){ goto $label$47 }
	goto $label$48 
	
.LABEL $label$48
	$11 = ($2 + [1])
	if ( ((uint_32)$11 > (uint_32)$10) ){ goto $label$49 }
	$8 = $7
	
.LOOP $label$50:
	$5 = ((uint_64)$8 / (uint_64)(int_64)10)
	*($2) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$5 * (int_64)10))) | [48])
	$2 = ($2 + [-1])
	$13 = ((uint_64)$8 > (uint_64)(int_64)9)
	$8 = $5
	if ( $13 ){ goto $label$50 }
	
.LABEL $label$49
	$2 = $11
	
.LABEL $label$47
	if ( ((uint_32)$2 >= (uint_32)$10) ){ goto $label$3 }
	$14 = ($14 + [1])
	$13 = *($12)
	if ( ($13 & [255]) ){ goto $label$44 }
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$12 = [8897]
	$13 = [85]
	$2 = ($4 + [480])
	
.LOOP $label$51:
	$14 = ($2 + [1])
	$12 = ($12 + [1])
	
.LOOP $label$53:
	if ( ((int_32)($13 & [255]) == (int_32)[37]) ){ goto $label$52 }
	*($2) = $13
	$2 = ($2 + [1])
	if ( ((uint_32)$2 >= (uint_32)$10) ){ goto $label$3 }
	$14 = ($14 + [1])
	$13 = *($12)
	$12 = ($12 + [1])
	if ( ($13 & [255]) ){ goto $label$53 }
	goto $label$3 
	
.LABEL $label$52
	if ( ((uint_32)$11 > (uint_32)[9]) ){ goto $label$54 }
	goto $label$55 
	
.LABEL $label$55
	*($2) = [45]
	$2 = ($2 + [2])
	if ( ((uint_32)$2 > (uint_32)$10) ){ goto $label$54 }
	$8 = $7
	
.LOOP $label$56:
	$5 = ((uint_64)$8 / (uint_64)(int_64)10)
	*($14) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$5 * (int_64)10))) | [48])
	$14 = ($14 + [-1])
	$13 = ((uint_64)$8 > (uint_64)(int_64)9)
	$8 = $5
	if ( $13 ){ goto $label$56 }
	
.LABEL $label$54
	if ( ((uint_32)$2 >= (uint_32)$10) ){ goto $label$3 }
	$11 = ($11 + [1])
	$13 = *($12)
	if ( ($13 & [255]) ){ goto $label$51 }
	
.LABEL $label$3
	*($2) = [0]
	CALL eosio_assert([0], ($4 + [480]))
	
.LABEL $label$2
	$5 = *(($3 + [8]))
	*((($4 + [416]) + [8])) = $5
	$7 = *((($4 + [464]) + [8]))
	*((($4 + [400]) + [8])) = $7
	$8 = *($3)
	*((($4 + [64]) + [8])) = $5
	*((($4 + [48]) + [8])) = $7
	$5 = *($4 + [464])
	*($4 + [400]) = $5
	*($4 + [416]) = $8
	*($4 + [64]) = $8
	*($4 + [48]) = $5
	CALL $85([8923], ($4 + [64]), ($4 + [48]))
	if ( ((int_64)*($4 + [464]) <= (int_64)0) ){ goto $label$63 }
	*($4 + [388]) = $1
	*($4 + [392]) = ($4 + [464])
	*($4 + [384]) = $0
	*(($4 + [512])) = [0]
	*($4 + [496]) = (int_64)-1
	*($4 + [504]) = (int_64)0
	$8 = *($0)
	*($4 + [480]) = $8
	*($4 + [488]) = $8
	$2 = CALL db_find_i64($8, $8, (int_64)-6499411808120471552, *($3 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$62 }
	$2 = CALL $77(($4 + [480]), $2)
	if ( ((int_32)*($2 + [92]) == (int_32)($4 + [480])) ){ goto $label$64 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$64
	$13 = *($1)
	if ( ($13 == 0) ){ goto $label$61 }
	if ( ((int_32)$13 == (int_32)[1]) ){ goto $label$60 }
	if ( ((int_32)$13 != (int_32)[2]) ){ goto $label$59 }
	$8 = *(($2 + [80]))
	$5 = *($2 + [72])
	goto $label$58 
	
.LABEL $label$63
	$3 = ($4 + [980])
	$13 = [13]
	$2 = [0]
	
.LOOP $label$65:
	if ( ((int_32)($13 & [255]) == (int_32)[37]) ){ goto $label$1 }
	*(($12 = (($4 + [480]) + $2))) = $13
	$10 = ($2 + [1])
	if ( ((uint_32)($12 + [1]) >= (uint_32)$3) ){ goto $label$66 }
	$13 = ($2 + [8953])
	$2 = $10
	$13 = *($13)
	if ( ($13 & [255]) ){ goto $label$65 }
	
.LABEL $label$66
	*((($4 + [480]) + $10)) = [0]
	CALL prints(($4 + [480]))
	$global$0 = ($4 + [1040])
	return 
	
.LABEL $label$62
	*(($2 = (($4 + [368]) + [8]))) = *((($4 + [464]) + [8]))
	*($4 + [368]) = *($4 + [464])
	$8 = *($2)
	*((($4 + [992]) + [8])) = $8
	*((($4 + [1008]) + [8])) = $8
	*(($4 + [8])) = $8
	$8 = *($4 + [368])
	*($4 + [1008]) = $8
	*($4 + [992]) = $8
	*($4) = $8
	CALL prints(CALL $60([8978], $4))
	*($4 + [992]) = *($0)
	if ( ((int_64)CALL current_receiver() == (int_64)*($4 + [480])) ){ goto $label$67 }
	CALL eosio_assert([0], [10341])
	
.LABEL $label$67
	*($4 + [1012]) = ($4 + [384])
	*($4 + [1008]) = ($4 + [480])
	*($4 + [1016]) = ($4 + [992])
	*(($2 = CALL $7([104])) + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = [0]
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = [0]
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = (int_64)0
	*($2 + [64]) = [0]
	*($2 + [72]) = (int_64)0
	*($2 + [80]) = (int_64)0
	*($2 + [88]) = [0]
	*($2 + [92]) = ($4 + [480])
	CALL $86(($4 + [1008]), $2)
	*($4 + [1032]) = $2
	$8 = *($2 + [8])
	*($4 + [1008]) = $8
	$10 = *($2 + [96])
	*($4 + [1028]) = $10
	$12 = ($4 + [508])
	$13 = *($12)
	if ( ((uint_32)$13 >= (uint_32)*(($4 + [512]))) ){ goto $label$69 }
	*($13 + [8]) = $8
	*($13 + [16]) = $10
	*($4 + [1032]) = [0]
	*($13) = $2
	*($12) = ($13 + [24])
	$13 = *($4 + [1032])
	$2 = [0]
	*($4 + [1032]) = [0]
	if ( $13 ){ goto $label$68 }
	goto $label$57 
	
.LABEL $label$69
	CALL $87(($4 + [504]), ($4 + [1032]), ($4 + [1008]), ($4 + [1028]))
	$13 = *($4 + [1032])
	$2 = [0]
	*($4 + [1032]) = [0]
	if ( ($13 == 0) ){ goto $label$57 }
	
.LABEL $label$68
	CALL $9($13)
	goto $label$57 
	
.LABEL $label$61
	$8 = *(($2 + [32]))
	$5 = *($2 + [24])
	goto $label$58 
	
.LABEL $label$60
	$8 = *(($2 + [56]))
	$5 = *($2 + [48])
	goto $label$58 
	
.LABEL $label$59
	CALL $32(($4 + [1008]), $13)
	if ( (*($4 + [1008]) & [1]) ){ goto $label$71 }
	$13 = (($4 + [1008]) | [1])
	goto $label$70 
	
.LABEL $label$71
	$13 = *($4 + [1016])
	CALL $9($13)
	
.LABEL $label$70
	CALL $47([0], [8996], $13)
	$8 = (int_64)0
	$5 = (int_64)0
	
.LABEL $label$58
	*((($4 + [32]) + [8])) = $8
	$7 = *((($4 + [464]) + [8]))
	*((($4 + [336]) + [8])) = $7
	*((($4 + [16]) + [8])) = $7
	*($4 + [360]) = $8
	*($4 + [352]) = $5
	$8 = *($4 + [464])
	*($4 + [336]) = $8
	*($4 + [32]) = $5
	*($4 + [16]) = $8
	CALL $85([9018], ($4 + [32]), ($4 + [16]))
	CALL $88(($4 + [480]), $2, *($0), ($4 + [384]))
	
.LABEL $label$57
	CALL $49($0, ($2 + [16]), ($4 + [464]))
	$10 = *($4 + [504])
	if ( ($10 == 0) ){ goto $label$72 }
	$12 = ($4 + [508])
	$2 = *($12)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$74 }
	
.LOOP $label$75:
	$2 = ($2 + [-24])
	$13 = *($2)
	*($2) = [0]
	if ( ($13 == 0) ){ goto $label$76 }
	CALL $9($13)
	
.LABEL $label$76
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$75 }
	$2 = *(($4 + [504]))
	goto $label$73 
	
.LABEL $label$74
	$2 = $10
	
.LABEL $label$73
	*($12) = $10
	CALL $9($2)
	
.LABEL $label$72
	$global$0 = ($4 + [1040])
	return (unreachable)
	
.LABEL $label$1
	$11
	$11
	$14
	$11
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$3 = ($global$0 - [16])
	$global$0 = $3
	
.LOOP $label$1:
	$6 = ($1 + [-32])
	$7 = ($1 + [-16])
	
.LOOP $label$6:
	$5 = $0
	$8 = ($1 - $5)
	$0 = int_32($8 >> [4])
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$16 }
	if ( ((int_32)$8 <= (int_32)[495]) ){ goto $label$15 }
	$9 = (((int_32)$0 / (int_32)[2]) << [4])
	$10 = ($5 + $9)
	if ( ((int_32)$8 < (int_32)[15985]) ){ goto $label$18 }
	$8 = (((int_32)$0 / (int_32)[4]) << [4])
	$11 = CALL $148($5, ($5 + $8), $10, ($10 + $8), $7, $2)
	goto $label$17 
	
.LABEL $label$18
	$11 = CALL $149($5, $10, $7, $2)
	
.LABEL $label$17
	$8 = ($5 + $9)
	if ( ((int_64)*($5 + [8]) == (int_64)*($8 + [8])) ){ goto $label$19 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$19
	$12 = *($10)
	if ( ((int_64)*($5) >= (int_64)$12) ){ goto $label$22 }
	$8 = $7
	$4 = ($5 + [16])
	if ( ($4 <= $8) ){ goto $label$21 }
	goto $label$11 
	
.LABEL $label$22
	$0 = ($8 + [8])
	$8 = $6
	
.LOOP $label$23:
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$20 }
	if ( ((int_64)*(($8 + [8])) == (int_64)*($0)) ){ goto $label$24 }
	CALL eosio_assert([0], [10583])
	$12 = *($10)
	
.LABEL $label$24
	$13 = *($8)
	$9 = ($8 + [-16])
	$8 = $9
	if ( ((int_64)$13 >= (int_64)$12) ){ goto $label$23 }
	$8 = ($5 + [8])
	$13 = *($8)
	$0 = ($9 + [24])
	*($8) = *($0)
	$12 = *($5)
	$8 = ($9 + [16])
	*($5) = *($8)
	*(($3 + [8])) = $13
	*($8) = $12
	*($0) = $13
	*($3) = $12
	$11 = ($11 + [1])
	$4 = ($5 + [16])
	if ( ((uint_32)$4 >= (uint_32)$8) ){ goto $label$11 }
	
.LABEL $label$21
	
.LOOP $label$25:
	$0 = ($4 + [-16])
	
.LOOP $label$26:
	$9 = ($10 + [8])
	if ( ((int_64)*(($0 + [24])) == (int_64)*($9)) ){ goto $label$27 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$27
	$13 = *($10)
	$0 = ($0 + [16])
	if ( ((int_64)*($0) < (int_64)$13) ){ goto $label$26 }
	$8 = ($8 + [-16])
	$4 = ($0 + [16])
	
.LOOP $label$28:
	if ( ((int_64)*(($8 + [8])) == (int_64)*($9)) ){ goto $label$29 }
	CALL eosio_assert([0], [10583])
	$13 = *($10)
	
.LABEL $label$29
	$12 = *($8)
	$14 = ($8 + [-16])
	$8 = $14
	if ( ((int_64)$12 >= (int_64)$13) ){ goto $label$28 }
	$8 = ($14 + [16])
	if ( ((uint_32)$0 > (uint_32)$8) ){ goto $label$30 }
	$9 = ($0 + [8])
	$13 = *($9)
	$14 = ($14 + [24])
	*($9) = *($14)
	$12 = *($0)
	*($0) = *($8)
	*(($3 + [8])) = $13
	*($8) = $12
	*($14) = $13
	*($3) = $12
	$10 = ( $8 ? $10 : ((int_32)$10 == (int_32)$0) )
	$11 = ($11 + [1])
	goto $label$25 
	
.LABEL $label$30
	$4 = $0
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$20
	if ( ((int_64)*($5 + [8]) == (int_64)*(($1 + [-8]))) ){ goto $label$31 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$31
	$14 = ($5 + [16])
	$13 = *($5)
	if ( ((int_64)$13 < (int_64)*($7)) ){ goto $label$32 }
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$3 }
	$14 = ($5 + [32])
	
.LOOP $label$33:
	$8 = ($14 + [-8])
	if ( ((int_64)*(($5 + [8])) == (int_64)*($8)) ){ goto $label$34 }
	CALL eosio_assert([0], [10583])
	$13 = *($5)
	
.LABEL $label$34
	$0 = ($14 + [-16])
	if ( ((int_64)$13 < (int_64)*($0)) ){ goto $label$35 }
	$14 = ($14 + [16])
	if ( ((int_32)$1 != (int_32)$14) ){ goto $label$33 }
	goto $label$3 
	
.LABEL $label$35
	$13 = *($8)
	$10 = ($7 + [8])
	*($8) = *($10)
	$12 = *($0)
	*($0) = *($7)
	*(($3 + [8])) = $13
	*($7) = $12
	*($10) = $13
	*($3) = $12
	
.LABEL $label$32
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$36:
	$0 = ($14 + [-16])
	
.LOOP $label$37:
	$10 = ($5 + [8])
	if ( ((int_64)*($10) == (int_64)*(($0 + [24]))) ){ goto $label$38 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$38
	$0 = ($0 + [16])
	$13 = *($5)
	if ( ((int_64)$13 >= (int_64)*($0)) ){ goto $label$37 }
	$8 = ($7 + [-16])
	$14 = ($0 + [16])
	
.LOOP $label$39:
	if ( ((int_64)*($10) == (int_64)*(($8 + [8]))) ){ goto $label$40 }
	CALL eosio_assert([0], [10583])
	$13 = *($5)
	
.LABEL $label$40
	$12 = *($8)
	$9 = ($8 + [-16])
	$8 = $9
	if ( ((int_64)$13 < (int_64)$12) ){ goto $label$39 }
	$7 = ($9 + [16])
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$41 }
	$8 = ($0 + [8])
	$13 = *($8)
	$10 = ($9 + [24])
	*($8) = *($10)
	$12 = *($0)
	$8 = ($9 + [16])
	*($0) = *($8)
	*(($3 + [8])) = $13
	*($8) = $12
	*($10) = $13
	*($3) = $12
	goto $label$36 
	
.LABEL $label$41
	$8 = ([4] & [7])
	if ( ((uint_32)$8 > (uint_32)[4]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$16
	goto $label$3 
	
.LABEL $label$42
	$8 = ($1 + [-16])
	if ( ((int_64)*(($1 + [-8])) == (int_64)*($5 + [8])) ){ goto $label$43 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$43
	if ( ((int_64)*($8) >= (int_64)*($5)) ){ goto $label$3 }
	$13 = *($5)
	*($5) = *($8)
	$0 = ($5 + [8])
	$12 = *($0)
	$10 = ($8 + [8])
	*($0) = *($10)
	*(($3 + [8])) = $12
	*($8) = $13
	*($10) = $12
	*($3) = $13
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$15
	$8 = ($5 + [32])
	CALL $149($5, ($5 + [16]), $8, $2)
	$0 = ($5 + [48])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	$9 = [0]
	
.LOOP $label$44:
	$10 = $0
	if ( ((int_64)*($10 + [8]) == (int_64)*($8 + [8])) ){ goto $label$45 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$45
	$13 = *($10)
	if ( ((int_64)$13 >= (int_64)*($8)) ){ goto $label$46 }
	$12 = *(($10 + [8]))
	$0 = $9
	
.LOOP $label$49:
	*((($8 = ($5 + $0)) + [56])) = *(($8 + [40]))
	*(($8 + [48])) = *(($8 + [32]))
	if ( ((int_32)$0 == (int_32)[-32]) ){ goto $label$48 }
	if ( ((int_64)$12 == (int_64)*(($8 + [24]))) ){ goto $label$50 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$50
	$0 = ($0 + [-16])
	if ( ((int_64)$13 < (int_64)*(($8 + [16]))) ){ goto $label$49 }
	$8 = (($5 + $0) + [48])
	goto $label$47 
	
.LABEL $label$48
	$8 = $5
	
.LABEL $label$47
	*($8 + [8]) = $12
	*($8) = $13
	
.LABEL $label$46
	$9 = ($9 + [16])
	$8 = $10
	$0 = ($10 + [16])
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$44 }
	goto $label$3 
	
.LABEL $label$14
	CALL $149($5, ($5 + [16]), ($1 + [-16]), $2)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$13
	CALL $150($5, ($5 + [16]), ($5 + [32]), ($1 + [-16]), $2)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$12
	CALL $148($5, ($5 + [16]), ($5 + [32]), ($5 + [48]), ($1 + [-16]), $2)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$11
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$9 }
	
.LABEL $label$10
	if ( ((int_64)*($10 + [8]) == (int_64)*($4 + [8])) ){ goto $label$51 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$51
	if ( ((int_64)*($10) >= (int_64)*($4)) ){ goto $label$9 }
	$13 = *($4)
	*($4) = *($10)
	$8 = ($4 + [8])
	$12 = *($8)
	$0 = ($10 + [8])
	*($8) = *($0)
	*(($3 + [8])) = $12
	*($10) = $13
	*($0) = $12
	*($3) = $13
	if ( ($11 + [1]) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	if ( $11 ){ goto $label$7 }
	
.LABEL $label$8
	$8 = CALL $151($5, $4, $2)
	$0 = ($4 + [16])
	if ( CALL $151($0, $1, $2) ){ goto $label$5 }
	if ( $8 ){ goto $label$6 }
	
.LABEL $label$7
	if ( ((int_32)($4 - $5) >= (int_32)($1 - $4)) ){ goto $label$2 }
	CALL $83($5, $4, $2)
	$0 = ($4 + [16])
	goto $label$6 
	
.LABEL $label$5
	$1 = ( $1 ? $4 : $8 )
	$0 = $5
	$8 = (( [1] ? [2] : $8 ) & [7])
	if ( ((uint_32)$8 > (uint_32)[4]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (([1] << $8) & [21]) ){ goto $label$1 }
	
.LABEL $label$3
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$2
	CALL $83(($4 + [16]), $1, $2)
	$1 = $4
	$0 = $5
	goto $label$1 
	$0
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [4])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$6 = int_32($7 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL $7(($6 << [4]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $33($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [4])))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $9($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL $7(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $33($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $9($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [128])
	$global$0 = $3
	$4 = *($2 + [16])
	$1 = *($1)
	*($3 + [88]) = [0]
	*($3 + [80]) = (int_64)0
	*($3 + [72]) = [0]
	*($3 + [64]) = (int_64)0
	$5 = ($2 + [16])
	CALL $81(($3 + [64]), $5)
	$1 = ($4 - $1)
	if ( ((uint_32)*($2 + [40]) >= (uint_32)$1) ){ goto $label$5 }
	if ( ((uint_32)*($2 + [64]) >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = ($2 + [40])
	CALL $82(($3 + [80]), ($2 + [24]))
	$4 = *($3 + [68])
	if ( ((int_32)$4 == (int_32)*(($3 + [72]))) ){ goto $label$6 }
	*($4) = *($6)
	*($3 + [68]) = ($4 + [4])
	if ( (*($2 + [64]) <= $1) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	CALL $81(($3 + [64]), $6)
	if ( (*($2 + [64]) <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($2 + [48])
	$4 = *($3 + [84])
	if ( ((int_32)$4 == (int_32)*((($3 + [80]) + [8]))) ){ goto $label$8 }
	*($4) = *($6)
	*(($4 + [8])) = *(($6 + [8]))
	*($3 + [84]) = ($4 + [16])
	goto $label$7 
	
.LABEL $label$8
	CALL $82(($3 + [80]), $6)
	
.LABEL $label$7
	$6 = ($2 + [64])
	$4 = *($3 + [68])
	if ( ((int_32)$4 == (int_32)*(($3 + [72]))) ){ goto $label$9 }
	*($4) = *($6)
	*($3 + [68]) = ($4 + [4])
	if ( ((uint_32)*($2 + [88]) >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$9
	CALL $81(($3 + [64]), $6)
	if ( (*($2 + [88]) <= $1) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( (*($2 + [88]) <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($2 + [72])
	$1 = *($3 + [84])
	if ( ((int_32)$1 == (int_32)*((($3 + [80]) + [8]))) ){ goto $label$11 }
	*($1) = *($4)
	*(($1 + [8])) = *(($4 + [8]))
	*($3 + [84]) = ($1 + [16])
	goto $label$10 
	
.LABEL $label$11
	CALL $82(($3 + [80]), $4)
	
.LABEL $label$10
	$4 = ($2 + [88])
	$1 = *($3 + [68])
	if ( ((int_32)$1 == (int_32)*(($3 + [72]))) ){ goto $label$12 }
	*($1) = *($4)
	*($3 + [68]) = ($1 + [4])
	goto $label$1 
	
.LABEL $label$12
	CALL $81(($3 + [64]), $4)
	
.LABEL $label$1
	*(($6 = (($3 + [48]) + [8]))) = *(($2 + [8]))
	*($3 + [48]) = *($2)
	$1 = *($3 + [80])
	$4 = *($3 + [84])
	*(($7 = (($3 + [96]) + [8]))) = *($6)
	*($3 + [96]) = *($3 + [48])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$13 }
	$8 = *($7)
	*((($3 + [112]) + [8])) = $8
	*((($3 + [16]) + [8])) = $8
	$8 = *($3 + [96])
	*($3 + [16]) = $8
	*($3 + [112]) = $8
	CALL eosio_assert([0], CALL $60([8833], ($3 + [16])))
	$4 = *($3 + [84])
	$1 = *($3 + [80])
	
.LABEL $label$13
	CALL $83($1, $4, ($3 + [112]))
	$4 = int_32((*($3 + [84]) - $1) >> [4])
	$6 = uint_32(($4 + [-1]) >> [1])
	$1 = *($3 + [80])
	$7 = ($1 + ($6 << [4]))
	$8 = *($7)
	$1 = ($1 + (uint_32($4 >> [1]) << [4]))
	if ( ((int_64)*($1 + [8]) == (int_64)*($7 + [8])) ){ goto $label$14 }
	CALL eosio_assert([0], [9867])
	
.LABEL $label$14
	$9 = ((int_64)*($1) + (int_64)$8)
	if ( ((int_64)$9 <= (int_64)-4611686018427387904) ){ goto $label$16 }
	if ( ((int_64)$9 < (int_64)4611686018427387904) ){ goto $label$15 }
	CALL eosio_assert([0], [9929])
	goto $label$15 
	
.LABEL $label$16
	CALL eosio_assert([0], [9910])
	
.LABEL $label$15
	$10 = *((*($3 + [80]) + ($6 << [4])) + [8])
	$11 = ((int_64)$9 / (int_64)2)
	if ( (uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$17 }
	CALL eosio_assert([0], [9660])
	
.LABEL $label$17
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$8 = $12
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$8 = $12
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$22 }
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	CALL eosio_assert([0], [9709])
	
.LABEL $label$18
	*($2 + [8]) = $10
	*($2) = $11
	*(($1 = (($3 + [32]) + [8]))) = $10
	*($3 + [32]) = $11
	*(($4 = (($3 + [96]) + [8]))) = *($1)
	*($3 + [96]) = *($3 + [32])
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$23 }
	$8 = *($4)
	*((($3 + [112]) + [8])) = $8
	*(($3 + [8])) = $8
	$8 = *($3 + [96])
	*($3) = $8
	*($3 + [112]) = $8
	CALL eosio_assert([0], CALL $60([8850], $3))
	
.LABEL $label$23
	$6 = *($3 + [68])
	$2 = *($3 + [64])
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$26 }
	$4 = $2
	$1 = ($2 + [4])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$27 }
	
.LOOP $label$28:
	$4 = ( $1 ? $4 : (*($1) <= *($4)) )
	$1 = ($1 + [4])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$28 }
	
.LABEL $label$27
	*($5) = *($4)
	if ( ($2 == 0) ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$26
	*($5) = *($2)
	if ( ($2 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	*($3 + [68]) = $2
	CALL $9($2)
	
.LABEL $label$24
	$1 = *($3 + [80])
	if ( ($1 == 0) ){ goto $label$29 }
	*($3 + [84]) = $1
	CALL $9($1)
	
.LABEL $label$29
	$global$0 = ($3 + [128])
}

int_32 .FUNC $149 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *($1 + [8])
	if ( ((int_64)$5 == (int_64)*($0 + [8])) ){ goto $label$1 }
	CALL eosio_assert([0], [10583])
	$5 = *(($1 + [8]))
	
.LABEL $label$1
	$6 = *($0)
	$7 = *($1)
	$8 = $7
	if ( ((int_64)*($2 + [8]) == (int_64)$5) ){ goto $label$2 }
	CALL eosio_assert([0], [10583])
	$8 = *($1)
	
.LABEL $label$2
	$5 = *($2)
	if ( ((int_64)$7 >= (int_64)$6) ){ goto $label$6 }
	if ( ((int_64)$5 >= (int_64)$8) ){ goto $label$5 }
	$5 = *($0)
	*($0) = *($2)
	$1 = ($0 + [8])
	$8 = *($1)
	$0 = ($2 + [8])
	*($1) = *($0)
	*(($4 + [8])) = $8
	*($2) = $5
	*($0) = $8
	*($4) = $5
	$global$0 = ($4 + [16])
	return [1]
	
.LABEL $label$6
	$9 = [0]
	if ( ((int_64)$5 >= (int_64)$8) ){ goto $label$3 }
	$5 = *($1)
	*($1) = *($2)
	$9 = ($1 + [8])
	$8 = *($9)
	$10 = ($2 + [8])
	*($9) = *($10)
	*(($4 + [8])) = $8
	*($2) = $5
	*($10) = $8
	*($4) = $5
	if ( ((int_64)*($9) == (int_64)*(($0 + [8]))) ){ goto $label$7 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$7
	$9 = [1]
	if ( ((int_64)*($1) >= (int_64)*($0)) ){ goto $label$3 }
	$5 = *($0)
	*($0) = *($1)
	$2 = ($0 + [8])
	$8 = *($2)
	$0 = ($1 + [8])
	*($2) = *($0)
	*(($4 + [8])) = $8
	*($1) = $5
	*($0) = $8
	*($4) = $5
	goto $label$4 
	
.LABEL $label$5
	$5 = *($0)
	*($0) = *($1)
	$9 = ($0 + [8])
	$8 = *($9)
	$0 = ($1 + [8])
	*($9) = *($0)
	*(($4 + [8])) = $8
	*($1) = $5
	*($0) = $8
	*($4) = $5
	if ( ((int_64)*(($2 + [8])) == (int_64)*($0)) ){ goto $label$8 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$8
	$9 = [1]
	if ( ((int_64)*($2) >= (int_64)*($1)) ){ goto $label$3 }
	$5 = *($1)
	*($1) = *($2)
	$1 = ($1 + [8])
	$8 = *($1)
	$0 = ($2 + [8])
	*($1) = *($0)
	*(($4 + [8])) = $8
	*($2) = $5
	*($0) = $8
	*($4) = $5
	
.LABEL $label$4
	$9 = [2]
	
.LABEL $label$3
	$global$0 = ($4 + [16])
	return $9
}

int_32 .FUNC $148 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$6 = ($global$0 - [16])
	$global$0 = $6
	$5 = CALL $150($0, $1, $2, $3, $5)
	if ( ((int_64)*($4 + [8]) != (int_64)*($3 + [8])) ){ goto $label$3 }
	if ( ((int_64)*($4) < (int_64)*($3)) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [10583])
	if ( ((int_64)*($4) >= (int_64)*($3)) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = *($3)
	*($3) = *($4)
	$8 = ($3 + [8])
	$9 = *($8)
	$10 = ($4 + [8])
	*($8) = *($10)
	*(($6 + [8])) = $9
	*($4) = $7
	*($10) = $9
	*($6) = $7
	if ( ((int_64)*($8) == (int_64)*($2 + [8])) ){ goto $label$4 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$4
	if ( ((int_64)*($3) >= (int_64)*($2)) ){ goto $label$7 }
	$7 = *($2)
	*($2) = *($3)
	$4 = ($2 + [8])
	$9 = *($4)
	$8 = ($3 + [8])
	*($4) = *($8)
	*(($6 + [8])) = $9
	*($3) = $7
	*($8) = $9
	*($6) = $7
	if ( ((int_64)*($4) == (int_64)*($1 + [8])) ){ goto $label$8 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$8
	if ( ((int_64)*($2) >= (int_64)*($1)) ){ goto $label$6 }
	$7 = *($1)
	*($1) = *($2)
	$3 = ($1 + [8])
	$9 = *($3)
	$4 = ($2 + [8])
	*($3) = *($4)
	*(($6 + [8])) = $9
	*($2) = $7
	*($4) = $9
	*($6) = $7
	if ( ((int_64)*($3) == (int_64)*($0 + [8])) ){ goto $label$9 }
	CALL eosio_assert([0], [10583])
	
.LABEL $label$9
	if ( ((int_64)*($1) >= (int_64)*($0)) ){ goto $label$5 }
	$7 = *($0)
	*($0) = *($1)
	$3 = ($0 + [8])
	$9 = *($3)
	$4 = ($1 + [8])
	*($3) = *($4)
	*(($6 + [8])) = $9
	*($1) = $7
	*($4) = $9
	*($6) = $7
	$global$0 = ($6 + [16])
	return ($5 + [4])
	
.LABEL $label$7
	$global$0 = ($6 + [16])
	return ($5 + [1])
	
.LABEL $label$6
	$global$0 = ($6 + [16])
	return ($5 + [2])
	
.LABEL $label$5
	$global$0 = ($6 + [16])
	return ($5 + [3])
	
.LABEL $label$1
	$global$0 = ($6 + [16])
	return $5
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9829])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($6, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($6 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($6, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9829])
	$6 = *($5)
	
.LABEL $label$8
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$9 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($6, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$6 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($6, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy(($2 + [8]), $5, [8])
	*($6 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [28])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[3]) ){ goto $label$12 }
	CALL eosio_assert([0], [9829])
	$1 = *(($0 + [4]))
	
.LABEL $label$12
	CALL memcpy($4, $1, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9829])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [9829])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9829])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [9829])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [9829])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [9829])
	$4 = *(($3 + [4]))
	
.LABEL $label$6
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$3 = *($0 + [24])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [9829])
	$1 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $1, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$4 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [9829])
	$1 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($4, $1, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9729])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [9729])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9729])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9729])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9729])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9729])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9729])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $33($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [36])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [40])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [44])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$12
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [48])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$13
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$14 }
	CALL eosio_assert([0], [9829])
	$3 = *($5)
	
.LABEL $label$14
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [52])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$15 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$15
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [56])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$16 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$16
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [60])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$17 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$17
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [64])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$18 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$18
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [68])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$19 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$19
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [72])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$20 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$20
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [76])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$21 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$21
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [80])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$22 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$22
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [84])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$23 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$23
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [88])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$24 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$24
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$25 }
	CALL eosio_assert([0], [9829])
	$5 = *(($4 + [4]))
	
.LABEL $label$25
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [92])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$26 }
	CALL eosio_assert([0], [9829])
	$1 = *(($0 + [4]))
	
.LABEL $label$26
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $140(CALL $141($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9729])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9729])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$4 = ($global$0 - [528])
	$global$0 = $4
	$6 = (int_64)$5 >> (int_64)63
	$5 = *($3)
	$7 = ((int_64)((int_64)$5 + (int_64)$6)) ^ (int_64)$6)
	$6 = *($3 + [8])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_64)$6 & (int_64)255)
	$10 = (CASTING uint_32)(uint_64 $9)
	$11 = ($10 + [2])
	$12 = ($10 + [1])
	$13 = *($2)
	$14 = *($1)
	$15 = ($4 + [516])
	$16 = [0]
	$17 = [8683]
	$3 = [13]
	$2 = ($4 + [16])
	
.LOOP $label$1:
	$17 = ($17 + [1])
	
.LOOP $label$4:
	if ( ((int_32)($3 & [255]) == (int_32)[37]) ){ goto $label$3 }
	*($2) = $3
	$2 = ($2 + [1])
	if ( ((uint_32)$2 >= (uint_32)$15) ){ goto $label$2 }
	$3 = *($17)
	$17 = ($17 + [1])
	if ( ($3 & [255]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$16 > (uint_32)[9]) ){ goto $label$6 }
	goto $label$14 
	
.LABEL $label$14
	$2 = CALL $67($2, $15, $14)
	if ( ((uint_32)$2 >= (uint_32)$15) ){ goto $label$2 }
	goto $label$5 
	
.LABEL $label$13
	$2 = CALL $68($2, $15, $13)
	if ( ($2 <= $15) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$12
	if ( (int_64)($9 == 0) ){ goto $label$15 }
	$3 = [1]
	$6 = $9
	
.LOOP $label$16:
	$3 = ((int_32)$3 * (int_32)[10])
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)($6 == 0) == 0) ){ goto $label$16 }
	$18 = (CASTING uint_64)(uint_32 $3)
	$6 = ((int_64)$5 / (int_64)$18)
	if ( ((int_64)$5 > (int_64)-1) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$15
	$18 = (int_64)1
	$6 = ((int_64)$5 / (int_64)1)
	if ( ((int_64)$5 <= (int_64)-1) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	
.LABEL $label$10
	if ( ((int_64)($6 == 0) == 0) ){ goto $label$9 }
	*($2) = [45]
	$6 = (int_64)0
	$2 = ($2 + [2])
	if ( ((uint_32)$2 <= (uint_32)$15) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((int_64)$6 > (int_64)-1) ){ goto $label$17 }
	*($2) = [45]
	$6 = (int_64))((int_64)0 - $6)
	$2 = ($2 + [1])
	
.LABEL $label$17
	$2 = ($2 + [1])
	if ( (uint_64)($6 <= (int_64)10) ){ goto $label$18 }
	$19 = $6
	
.LOOP $label$19:
	$2 = ($2 + [1])
	$3 = ((uint_64)$19 > (uint_64)(int_64)99)
	$19 = ((uint_64)$19 / (uint_64)(int_64)10)
	if ( $3 ){ goto $label$19 }
	
.LABEL $label$18
	if ( ((uint_32)$2 > (uint_32)$15) ){ goto $label$7 }
	
.LABEL $label$8
	$3 = ($2 + [-1])
	
.LOOP $label$20:
	$19 = ((uint_64)$6 / (uint_64)(int_64)10)
	*($3) = ((CASTING uint_32)(uint_64 (int_64))($6 - ((int_64)$19 * (int_64)10))) | [48])
	$3 = ($3 + [-1])
	$20 = ((uint_64)$6 > (uint_64)(int_64)9)
	$6 = $19
	if ( $20 ){ goto $label$20 }
	
.LABEL $label$7
	$20 = ($2 + [1])
	if ( ((uint_32)$20 > (uint_32)$15) ){ goto $label$6 }
	*($2) = [46]
	if ( ((uint_32)($2 + $12) > (uint_32)$15) ){ goto $label$21 }
	if ( ($10 == 0) ){ goto $label$22 }
	$6 = ((uint_64)$7 % (uint_64)$18)
	$3 = $11
	
.LOOP $label$23:
	$19 = ((uint_64)$6 / (uint_64)(int_64)10)
	*((($2 + $3) + [-2])) = ((CASTING uint_32)(uint_64 (int_64))($6 - ((int_64)$19 * (int_64)10))) | [48])
	$6 = $19
	$3 = ($3 + [-1])
	if ( ((int_32)$3 > (int_32)[2]) ){ goto $label$23 }
	
.LABEL $label$22
	$20 = ($20 + $10)
	
.LABEL $label$21
	*($20) = [32]
	$2 = ($20 + [1])
	if ( (int_64)($8 == 0) ){ goto $label$6 }
	if ( ((uint_32)($20 + [8]) > (uint_32)$15) ){ goto $label$6 }
	$6 = $8
	
.LOOP $label$24:
	*($2) = $6
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)($6) == 0) == 0) ){ goto $label$24 }
	
.LABEL $label$6
	if ( ((uint_32)$2 >= (uint_32)$15) ){ goto $label$2 }
	
.LABEL $label$5
	$16 = ($16 + [1])
	$3 = *($17)
	if ( ($3 & [255]) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = [0]
	*($2) = [0]
	CALL prints(($4 + [16]))
	CALL require_recipient(*($1))
	*(($4 + [48])) = [0]
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	$6 = *($0)
	*($4 + [16]) = $6
	*($4 + [24]) = $6
	$2 = CALL db_find_i64($6, $6, (int_64)-4138943994219073536, *($1))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$25 }
	$3 = CALL $50(($4 + [16]), $2)
	if ( ((int_32)*($3 + [36]) == (int_32)($4 + [16])) ){ goto $label$25 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$25
	*($4 + [8]) = ((int_64)CALL $34() / (int_64)1000000)
	if ( ($3 == 0) ){ goto $label$26 }
	*($4) = ($4 + [8])
	CALL $74(($4 + [16]), $3, (int_64)0, $4)
	
.LABEL $label$26
	$17 = *($4 + [40])
	if ( ($17 == 0) ){ goto $label$27 }
	$15 = ($4 + [44])
	$3 = *($15)
	if ( ((int_32)$3 == (int_32)$17) ){ goto $label$29 }
	
.LOOP $label$30:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$31 }
	CALL $9($2)
	
.LABEL $label$31
	if ( ((int_32)$17 != (int_32)$3) ){ goto $label$30 }
	$3 = *(($4 + [40]))
	goto $label$28 
	
.LABEL $label$29
	$3 = $17
	
.LABEL $label$28
	*($15) = $17
	CALL $9($3)
	
.LABEL $label$27
	$global$0 = ($4 + [528])
	$16
	(unreachable)
}

void .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $51($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $72(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $9($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [36]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10238])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [10288])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $9($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $9($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [40]))
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$2 = ($global$0 - [592])
	$global$0 = $2
	$3 = CALL $15([8718])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9977])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8717]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10022])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)4
	
.LABEL $label$1
	*(($2 + [72])) = [0]
	*($2 + [56]) = (int_64)-1
	*($2 + [64]) = (int_64)0
	$6 = *($1)
	*($2 + [40]) = $6
	*($2 + [48]) = $6
	$7 = [0]
	$3 = CALL db_find_i64($6, $6, (int_64)-6499411808120471552, $4)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $77(($2 + [40]), $3)
	if ( ((int_32)*($7 + [92]) == (int_32)($2 + [40])) ){ goto $label$7 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$7
	CALL $78(((int_32)$7 != (int_32)[0]), [8722], $4)
	$8 = (int_64)
	CALL $78(((int_64)$8(((int_64)((int_64)CALL $34() / (int_64)1000000) & (int_64)4294967295) - *($7 + [16]))) > (int_64)-1), [8761], $4)
	$9 = ($2 + [580])
	if ( ((int_64)$8 < (int_64)0) ){ goto $label$12 }
	if ( ((uint_64)$8 <= (uint_64)(int_64)9) ){ goto $label$11 }
	$10 = [0]
	$11 = [8796]
	$5 = [13]
	$3 = ($2 + [80])
	
.LOOP $label$13:
	$11 = ($11 + [1])
	
.LOOP $label$15:
	if ( ((int_32)($5 & [255]) == (int_32)[37]) ){ goto $label$14 }
	*($3) = $5
	$3 = ($3 + [1])
	if ( ((uint_32)$3 >= (uint_32)$9) ){ goto $label$9 }
	$5 = *($11)
	$11 = ($11 + [1])
	if ( ($5 & [255]) ){ goto $label$15 }
	goto $label$9 
	
.LABEL $label$14
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$17
	$3 = ($3 + [1])
	$4 = $8
	
.LOOP $label$18:
	$5 = $3
	$3 = ($5 + [1])
	$12 = ((uint_64)$4 > (uint_64)(int_64)99)
	$4 = ((uint_64)$4 / (uint_64)(int_64)10)
	if ( $12 ){ goto $label$18 }
	$4 = $8
	if ( ((uint_32)$3 > (uint_32)$9) ){ goto $label$16 }
	
.LOOP $label$19:
	$6 = ((uint_64)$4 / (uint_64)(int_64)10)
	*($5) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$6 * (int_64)10))) | [48])
	$5 = ($5 + [-1])
	$12 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $6
	if ( $12 ){ goto $label$19 }
	
.LABEL $label$16
	if ( ((uint_32)$3 >= (uint_32)$9) ){ goto $label$9 }
	$10 = ($10 + [1])
	$5 = *($11)
	if ( ($5 & [255]) ){ goto $label$13 }
	goto $label$9 
	
.LABEL $label$12
	$13 = (int_64)
	if ( ((uint_64)$13((int_64)0 - $8)) <= (uint_64)(int_64)9) ){ goto $label$10 }
	$10 = [0]
	$11 = [8796]
	$5 = [13]
	$3 = ($2 + [80])
	
.LOOP $label$20:
	$11 = ($11 + [1])
	
.LOOP $label$22:
	if ( ((int_32)($5 & [255]) == (int_32)[37]) ){ goto $label$21 }
	*($3) = $5
	$3 = ($3 + [1])
	if ( ((uint_32)$3 >= (uint_32)$9) ){ goto $label$9 }
	$5 = *($11)
	$11 = ($11 + [1])
	if ( ($5 & [255]) ){ goto $label$22 }
	goto $label$9 
	
.LABEL $label$21
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$24
	*($3) = [45]
	$3 = ($3 + [2])
	$4 = $13
	
.LOOP $label$25:
	$5 = $3
	$3 = ($5 + [1])
	$12 = ((uint_64)$4 > (uint_64)(int_64)99)
	$4 = ((uint_64)$4 / (uint_64)(int_64)10)
	if ( $12 ){ goto $label$25 }
	$4 = $13
	if ( ((uint_32)$3 > (uint_32)$9) ){ goto $label$23 }
	
.LOOP $label$26:
	$6 = ((uint_64)$4 / (uint_64)(int_64)10)
	*($5) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$6 * (int_64)10))) | [48])
	$5 = ($5 + [-1])
	$12 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $6
	if ( $12 ){ goto $label$26 }
	
.LABEL $label$23
	if ( ((uint_32)$3 >= (uint_32)$9) ){ goto $label$9 }
	$10 = ($10 + [1])
	$5 = *($11)
	if ( ($5 & [255]) ){ goto $label$20 }
	goto $label$9 
	
.LABEL $label$11
	$12 = [0]
	$11 = [8796]
	$5 = [13]
	$3 = ($2 + [80])
	
.LOOP $label$27:
	$11 = ($11 + [1])
	
.LOOP $label$29:
	if ( ((int_32)($5 & [255]) == (int_32)[37]) ){ goto $label$28 }
	*($3) = $5
	$3 = ($3 + [1])
	if ( ((uint_32)$3 >= (uint_32)$9) ){ goto $label$9 }
	$5 = *($11)
	$11 = ($11 + [1])
	if ( ($5 & [255]) ){ goto $label$29 }
	goto $label$9 
	
.LABEL $label$28
	if ( ((uint_32)$12 > (uint_32)[9]) ){ goto $label$30 }
	goto $label$31 
	
.LABEL $label$31
	$10 = ($3 + [1])
	if ( ((uint_32)$10 > (uint_32)$9) ){ goto $label$32 }
	$4 = $8
	
.LOOP $label$33:
	$6 = ((uint_64)$4 / (uint_64)(int_64)10)
	*($3) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$6 * (int_64)10))) | [48])
	$3 = ($3 + [-1])
	$5 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $6
	if ( $5 ){ goto $label$33 }
	
.LABEL $label$32
	$3 = $10
	
.LABEL $label$30
	if ( ((uint_32)$3 >= (uint_32)$9) ){ goto $label$9 }
	$12 = ($12 + [1])
	$5 = *($11)
	if ( ($5 & [255]) ){ goto $label$27 }
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	$11 = [8796]
	$5 = [13]
	$3 = ($2 + [80])
	
.LOOP $label$34:
	$12 = ($3 + [1])
	$11 = ($11 + [1])
	
.LOOP $label$36:
	if ( ((int_32)($5 & [255]) == (int_32)[37]) ){ goto $label$35 }
	*($3) = $5
	$3 = ($3 + [1])
	if ( ((uint_32)$3 >= (uint_32)$9) ){ goto $label$9 }
	$12 = ($12 + [1])
	$5 = *($11)
	$11 = ($11 + [1])
	if ( ($5 & [255]) ){ goto $label$36 }
	goto $label$9 
	
.LABEL $label$35
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$37 }
	goto $label$38 
	
.LABEL $label$38
	*($3) = [45]
	$3 = ($3 + [2])
	if ( ((uint_32)$3 > (uint_32)$9) ){ goto $label$37 }
	$4 = $13
	
.LOOP $label$39:
	$6 = ((uint_64)$4 / (uint_64)(int_64)10)
	*($12) = ((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$6 * (int_64)10))) | [48])
	$12 = ($12 + [-1])
	$5 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $6
	if ( $5 ){ goto $label$39 }
	
.LABEL $label$37
	if ( ((uint_32)$3 >= (uint_32)$9) ){ goto $label$9 }
	$10 = ($10 + [1])
	$5 = *($11)
	if ( ($5 & [255]) ){ goto $label$34 }
	
.LABEL $label$9
	$5 = [0]
	*($3) = [0]
	CALL prints(($2 + [80]))
	CALL $79(($2 + [8]), $1)
	if ( ((int_64)$8 < (int_64)*($2 + [20])) ){ goto $label$40 }
	$3 = [85]
	
.LOOP $label$41:
	if ( ((int_32)($3 & [255]) == (int_32)[37]) ){ goto $label$8 }
	*(($12 = (($2 + [80]) + $5))) = $3
	$11 = ($5 + [1])
	if ( ((uint_32)($12 + [1]) >= (uint_32)$9) ){ goto $label$42 }
	$3 = ($5 + [8810])
	$5 = $11
	$3 = *($3)
	if ( ($3 & [255]) ){ goto $label$41 }
	
.LABEL $label$42
	*((($2 + [80]) + $11)) = [0]
	CALL eosio_assert([0], ($2 + [80]))
	
.LABEL $label$40
	*($0) = *($7)
	*(($0 + [8])) = *(($7 + [8]))
	$9 = *($2 + [64])
	if ( ($9 == 0) ){ goto $label$43 }
	$11 = ($2 + [68])
	$3 = *($11)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$45 }
	
.LOOP $label$46:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$47 }
	CALL $9($5)
	
.LABEL $label$47
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$46 }
	$3 = *(($2 + [64]))
	goto $label$44 
	
.LABEL $label$45
	$3 = $9
	
.LABEL $label$44
	*($11) = $9
	CALL $9($3)
	
.LABEL $label$43
	$global$0 = ($2 + [592])
	return (unreachable)
	
.LABEL $label$8
	$10
	$10
	$12
	$10
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9806])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $7([104])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = [0]
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = [0]
	*($5 + [92]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [40])
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [64])
	*($3 + [56]) = ($5 + [72])
	*($3 + [60]) = ($5 + [88])
	CALL $145(($3 + [32]), ($3 + [24]))
	*($5 + [96]) = $1
	*($3 + [24]) = $5
	$7 = *($5 + [8])
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $87(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [36]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10427])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10473])
	
.LABEL $label$2
	*($1 + [24]) = (*($1 + [24]) + [1])
	*($1 + [28]) = *(*($3))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-48])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-12])
	*($5 + [16]) = $5
	*($5 + [28]) = ($1 + [8])
	*($5 + [24]) = $1
	*($5 + [32]) = ($1 + [24])
	*($5 + [36]) = ($1 + [28])
	*($5 + [40]) = ($1 + [32])
	CALL $62(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [40]), $2, $4, [36])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [48])
}

void .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [512])
	$global$0 = $1
	$2 = ($1 + [500])
	$3 = [87]
	$4 = [0]
	
.LOOP $label$2:
	if ( ((int_32)($3 & [255]) == (int_32)[37]) ){ goto $label$1 }
	*(($5 = ($1 + $4))) = $3
	$6 = ($4 + [1])
	if ( ((uint_32)($5 + [1]) >= (uint_32)$2) ){ goto $label$3 }
	$3 = ($4 + [8449])
	$4 = $6
	$3 = *($3)
	if ( ($3 & [255]) ){ goto $label$2 }
	
.LABEL $label$3
	*(($1 + $6)) = [0]
	CALL eosio_assert([0], $1)
	$global$0 = ($1 + [512])
	return (unreachable)
	
.LABEL $label$1
}

int_64 .FUNC $36 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $35($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $18($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [8416])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [8400]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [8432]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $17($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL sha256($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [8257])
	
.LABEL $label$4
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$5 }
	if ( ($1 <= [2]) ){ goto $label$6 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$6
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$5
	$global$0 = ($3 + [48])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [512])
	$global$0 = $3
	if ( $0 ){ goto $label$2 }
	$0 = *($1)
	if ( ($0 == 0) ){ goto $label$7 }
	$4 = ($3 + [500])
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_64)$2 & (int_64)255)
	if ( ((uint_64)$6 <= (uint_64)(int_64)9) ){ goto $label$6 }
	if ( (int_64)($5 == 0) ){ goto $label$5 }
	$7 = [0]
	$8 = $3
	
.LOOP $label$8:
	$9 = ($8 + [1])
	$10 = ($8 + [9])
	$1 = ($1 + [1])
	
.LOOP $label$10:
	if ( ((int_32)($0 & [255]) == (int_32)[37]) ){ goto $label$9 }
	*($8) = $0
	$8 = ($8 + [1])
	if ( ((uint_32)$8 >= (uint_32)$4) ){ goto $label$3 }
	$9 = ($9 + [1])
	$10 = ($10 + [1])
	$0 = *($1)
	$1 = ($1 + [1])
	if ( ($0 & [255]) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$9
	if ( ((uint_32)$7 > (uint_32)[9]) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$13
	$2 = $6
	
.LOOP $label$14:
	$0 = $9
	$9 = ($0 + [1])
	$10 = ($10 + [1])
	$8 = ((uint_64)$2 > (uint_64)(int_64)99)
	$2 = ((uint_64)$2 / (uint_64)(int_64)10)
	if ( $8 ){ goto $label$14 }
	$2 = $6
	$9 = ($10 + [-8])
	if ( ((uint_32)$9 > (uint_32)$4) ){ goto $label$15 }
	
.LOOP $label$16:
	$11 = ((uint_64)$2 / (uint_64)(int_64)10)
	*($0) = ((CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$11 * (int_64)10))) | [48])
	$0 = ($0 + [-1])
	$8 = ((uint_64)$2 > (uint_64)(int_64)9)
	$2 = $11
	if ( $8 ){ goto $label$16 }
	
.LABEL $label$15
	$8 = ($10 + [-7])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$17 }
	$8 = $9
	if ( ($8 <= $4) ){ goto $label$11 }
	goto $label$3 
	
.LABEL $label$17
	*($9) = [44]
	if ( ((uint_32)$10 > (uint_32)$4) ){ goto $label$12 }
	$2 = $5
	
.LOOP $label$18:
	*($8) = $2
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$18 }
	
.LABEL $label$12
	if ( ((uint_32)$8 >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$11
	$7 = ($7 + [1])
	$0 = *($1)
	if ( ($0 & [255]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$7
	$8 = $3
	goto $label$3 
	
.LABEL $label$6
	if ( (int_64)($5 == 0) ){ goto $label$4 }
	$12 = [0]
	$13 = $3
	
.LOOP $label$19:
	$14 = ($1 + [1])
	$9 = $13
	$10 = [0]
	
.LOOP $label$22:
	$8 = ($13 + $10)
	if ( ((int_32)($0 & [255]) == (int_32)[37]) ){ goto $label$21 }
	*($8) = $0
	$7 = ($10 + [1])
	if ( ((uint_32)($8 + [1]) >= (uint_32)$4) ){ goto $label$20 }
	$0 = ($14 + $10)
	$9 = ($9 + [1])
	$10 = $7
	$0 = *($0)
	if ( ($0 & [255]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((uint_32)$12 > (uint_32)[9]) ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$25
	$7 = ($13 + $10)
	$13 = ($7 + [1])
	if ( ((uint_32)$13 > (uint_32)$4) ){ goto $label$26 }
	$2 = $6
	
.LOOP $label$27:
	$11 = ((uint_64)$2 / (uint_64)(int_64)10)
	*($9) = ((CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$11 * (int_64)10))) | [48])
	$9 = ($9 + [-1])
	$0 = ((uint_64)$2 > (uint_64)(int_64)9)
	$2 = $11
	if ( $0 ){ goto $label$27 }
	
.LABEL $label$26
	$8 = ($7 + [2])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$28 }
	$8 = $13
	if ( ($8 <= $4) ){ goto $label$23 }
	goto $label$3 
	
.LABEL $label$28
	*($13) = [44]
	if ( ((uint_32)($7 + [9]) > (uint_32)$4) ){ goto $label$24 }
	$2 = $5
	
.LOOP $label$29:
	*($8) = $2
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)($2) == 0) == 0) ){ goto $label$29 }
	
.LABEL $label$24
	if ( ((uint_32)$8 >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$23
	$12 = ($12 + [1])
	$13 = $8
	$1 = (($1 + $10) + [1])
	$0 = *($1)
	if ( ($0 & [255]) ){ goto $label$19 }
	goto $label$3 
	
.LABEL $label$20
	$8 = ($13 + $7)
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	$8 = $3
	
.LOOP $label$30:
	$1 = ($1 + [1])
	
.LOOP $label$32:
	if ( ((int_32)($0 & [255]) == (int_32)[37]) ){ goto $label$31 }
	*($8) = $0
	$8 = ($8 + [1])
	if ( ((uint_32)$8 >= (uint_32)$4) ){ goto $label$3 }
	$0 = *($1)
	$1 = ($1 + [1])
	if ( ($0 & [255]) ){ goto $label$32 }
	goto $label$3 
	
.LABEL $label$31
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$35
	$10 = ($8 + [1])
	$2 = $6
	
.LOOP $label$36:
	$0 = $10
	$10 = ($0 + [1])
	$8 = ((uint_64)$2 > (uint_64)(int_64)99)
	$2 = ((uint_64)$2 / (uint_64)(int_64)10)
	if ( $8 ){ goto $label$36 }
	if ( ((uint_32)$10 > (uint_32)$4) ){ goto $label$37 }
	$2 = $6
	
.LOOP $label$38:
	$11 = ((uint_64)$2 / (uint_64)(int_64)10)
	*($0) = ((CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$11 * (int_64)10))) | [48])
	$0 = ($0 + [-1])
	$8 = ((uint_64)$2 > (uint_64)(int_64)9)
	$2 = $11
	if ( $8 ){ goto $label$38 }
	
.LABEL $label$37
	$8 = ($10 + [1])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$39 }
	$8 = $10
	if ( ($8 <= $4) ){ goto $label$33 }
	goto $label$3 
	
.LABEL $label$39
	*($10) = [44]
	
.LABEL $label$34
	if ( ((uint_32)$8 >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$33
	$9 = ($9 + [1])
	$0 = *($1)
	if ( ($0 & [255]) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$8 = $3
	
.LOOP $label$40:
	$1 = ($1 + [1])
	
.LOOP $label$42:
	if ( ((int_32)($0 & [255]) == (int_32)[37]) ){ goto $label$41 }
	*($8) = $0
	$8 = ($8 + [1])
	if ( ((uint_32)$8 >= (uint_32)$4) ){ goto $label$3 }
	$0 = *($1)
	$1 = ($1 + [1])
	if ( ($0 & [255]) ){ goto $label$42 }
	goto $label$3 
	
.LABEL $label$41
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$44 }
	goto $label$45 
	
.LABEL $label$45
	$7 = ($8 + [1])
	if ( ((uint_32)$7 > (uint_32)$4) ){ goto $label$46 }
	$0 = $8
	$2 = $6
	
.LOOP $label$47:
	$11 = ((uint_64)$2 / (uint_64)(int_64)10)
	*($0) = ((CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$11 * (int_64)10))) | [48])
	$0 = ($0 + [-1])
	$10 = ((uint_64)$2 > (uint_64)(int_64)9)
	$2 = $11
	if ( $10 ){ goto $label$47 }
	
.LABEL $label$46
	$8 = ($8 + [2])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$48 }
	$8 = $7
	if ( ($8 <= $4) ){ goto $label$43 }
	goto $label$3 
	
.LABEL $label$48
	*($7) = [44]
	
.LABEL $label$44
	if ( ((uint_32)$8 >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$43
	$9 = ($9 + [1])
	$0 = *($1)
	if ( ($0 & [255]) ){ goto $label$40 }
	
.LABEL $label$3
	*($8) = [0]
	CALL eosio_assert([0], $3)
	
.LABEL $label$2
	$global$0 = ($3 + [512])
	return (unreachable)
	
.LABEL $label$1
	$7
	$12
	$9
	$9
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1)
	*(($2 + [40])) = [0]
	*($2 + [16]) = $3
	*($2 + [8]) = $3
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$1 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)-6499392009015709696, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $42(($2 + [8]), $4)
	if ( ((int_32)*($1 + [32]) == (int_32)($2 + [8])) ){ goto $label$1 }
	CALL eosio_assert([0], [9755])
	
.LABEL $label$1
	CALL $65(((int_32)$1 != (int_32)[0]), (int_64)-6499392009015709696)
	*(($0 + [24])) = *(($1 + [24]))
	*(($0 + [16])) = *(($1 + [16]))
	*(($0 + [8])) = *(($1 + [8]))
	*($0) = *($1)
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ($2 + [36])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $9($0)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$5 }
	$1 = *(($2 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$1 = $4
	
.LABEL $label$3
	*($5) = $4
	CALL $9($1)
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $29(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $23(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8384], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $29(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $29(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $33 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $7($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $9($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $16(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $129 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [92]) = [0]
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [128]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $135(($4 + [24]), ($4 + [128]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	*(($3 = (($4 + [112]) + [8]))) = *($8)
	*($4 + [112]) = *($4 + [96])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$0 = *($4 + [72])
	$3 = CALL $25(($4 + [128]), (($4 + [72]) + [8]))
	$9 = *($4 + [92])
	*($4 + [112]) = $0
	$8 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	CALL void $8((int_32 ($4 + [112])), (int_32 $3), (int_32 ($9 & [255])), (int_32 $6))
	if ( (*($4 + [128]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $9(*($3 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$5
	CALL $9(*(($4 + [88])))
	$global$0 = ($4 + [144])
	return $2
}

int_32 .FUNC $127 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $7($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $33($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $9($1)
	return 
	
.LABEL $label$1
	(unreachable)
}