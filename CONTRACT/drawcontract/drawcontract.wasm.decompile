(data (i32.const 4) "\c0f\00\00")
(data (i32.const 16) "add active seed\00")
(data (i32.const 32) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 96) "active seed is already exists\00")
(data (i32.const 128) "cannot create objects in table of another contract\00")
(data (i32.const 192) "write\00")
(data (i32.const 208) "error reading iterator\00")
(data (i32.const 240) "read\00")
(data (i32.const 256) "get active seed\00")
(data (i32.const 272) "active seed is not exists.\00")
(data (i32.const 304) "remove active seed\00")
(data (i32.const 336) "cannot pass end iterator to erase\00")
(data (i32.const 384) "cannot increment end iterator\00")
(data (i32.const 416) "object passed to erase is not in multi_index\00")
(data (i32.const 464) "cannot erase objects in table of another contract\00")
(data (i32.const 528) "attempt to remove object that was not in multi_index\00")
(data (i32.const 592) "onerror\00")
(data (i32.const 608) "eosio\00")
(data (i32.const 624) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 688) "get\00")
(data (i32.const 704) "lottery contract : not exists table.\00")
(data (i32.const 752) "cannot pass end iterator to modify\00")
(data (i32.const 800) "active\00")
(data (i32.const 816) "lottery\00")
(data (i32.const 832) "object passed to modify is not in multi_index\00")
(data (i32.const 880) "cannot modify objects in table of another contract\00")
(data (i32.const 944) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1008) "resultseed\00")
(data (i32.const 1024) "send generateseed\00")
(data (i32.const 1056) "seedcontract\00")
(data (i32.const 1072) "generateseed\00")
(data (i32.const 1088) "lottery contract : not exists ticket.\00")
(data (i32.const 1136) "lottery contract : duplicated ticket_id.\00")
(data (i32.const 1184) "lottery contract : table is not exists.\00")
(data (i32.const 1232) "lottery contract : admin is not equal.\00")
(data (i32.const 1280) "lottery contract : item id is duplicated.\00")
(data (i32.const 1328) "lottery contract : already exists.\00")
(data (i32.const 1376) "lottery contract : invalid admin acount name.\00")
(data (i32.const 9824) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$7 (param i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$10 (param i32 i32)))
(import "env" "is_account" (func $fimport$11 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$15 (param i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "read_transaction" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$18 (param i64)))
(import "env" "require_auth2" (func $fimport$19 (param i64 i64)))
(import "env" "send_inline" (func $fimport$20 (param i32 i32)))
(import "env" "sha256" (func $fimport$21 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z14add_activeseedytyyy" (func $5))
(export "_Z14get_activeseedyyy" (func $10))
(export "_Z17remove_activeseedyyy" (func $11))
(export "apply" (func $13))
(export "malloc" (func $85))
(export "free" (func $88))
(export "memcmp" (func $97))
(table $0 9 9 anyfunc)
(elem (i32.const 0) $98 $17 $21 $26 $14 $24 $16 $22 $19)



void .FUNC $98 ()
{
	(unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $89(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $90($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $95 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $89($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $90 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $91 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $93($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $89($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $90($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [832])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [880])
	*($1 + [16]) = [2]
	$4 = *($1)
	$9 = CALL read_transaction([0], [0])
	$7 = CALL malloc($9)
	CALL read_transaction($7, $9)
	$10 = $11
	CALL sha256($7, $9, $10)
	*(($1 + [56])) = *(($10 + [24]))
	*(($1 + [48])) = *(($10 + [16]))
	*(($1 + [40])) = *($10 + [8])
	*($1 + [32]) = *($10)
	$5 = ($1 + [88])
	$6 = *($1 + [88])
	$8 = ($1 + [92])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$1 }
	$7 = ([0] - $6)
	$9 = ($9 + [-16])
	
.LOOP $label$2:
	if ( ((*($9) & [1]) == 0) ){ goto $label$3 }
	CALL $90(*(($9 + [8])))
	
.LABEL $label$3
	$9 = ($9 + [-32])
	if ( ((int_32)($9 + $7) != (int_32)[-16]) ){ goto $label$2 }
	
.LABEL $label$1
	*($8) = $6
	$9 = *($3)
	CALL $49($5, *($9), *($9 + [4]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [944])
	*($10) = [0]
	CALL $50($10, $1)
	$7 = *($10)
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($11 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL $51($10, $1)
	CALL db_update_i64(*(($1 + [104])), $2, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = int_32(($2 - $1) >> [5])
	if ( ((uint_32)$3 <= (uint_32)int_32(($7 - $6) >> [5])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-16])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $90(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $5) != (int_32)[-16]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = int_32($5 >> [5])
	$5 = (*($0 + [4]) - $6)
	$7 = ($1 + $5)
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	*($6) = *($1)
	*(($6 + [8])) = *(($1 + [8]))
	CALL $92(($6 + [16]), ($1 + [16]))
	$6 = ($6 + [32])
	$1 = ($1 + [32])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$6 = ($0 + [4])
	$1 = *($6)
	
.LOOP $label$12:
	*($1) = *($7)
	*(($1 + [8])) = *(($7 + [8]))
	CALL $96(($1 + [16]), ($7 + [16]))
	$1 = (*($6) + [32])
	*($6) = $1
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-16])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $90(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $7) != (int_32)[-16]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $90($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$1 }
	$6 = [134217727]
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$16 }
	$6 = $3
	$7 = int_32($7 >> [4])
	if ( ($7 <= $3) ){ goto $label$16 }
	$6 = $7
	if ( ((uint_32)$7 >= (uint_32)[134217728]) ){ goto $label$1 }
	
.LABEL $label$16
	$7 = ($6 << [5])
	$6 = CALL $89($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	*($6) = *($1)
	*(($6 + [8])) = *(($1 + [8]))
	CALL $96(($6 + [16]), ($1 + [16]))
	$6 = (*($7) + [32])
	*($7) = $6
	$1 = ($1 + [32])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $95($0)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [192])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [192])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$2 = ($1 + [48])
	$6 = *($1 + [48])
	$3 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($3 - $6) >> [5]))
	$5 = [40]
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = *($6 + [16])
	$4 = ( *(($6 + [20])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = (([-16] - $4) - $5)
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$6:
	$7 = ($7 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	$5 = ([0] - $7)
	$6 = ($6 + [32])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$5 }
	$5 = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	$5 = ([0] - $7)
	
.LABEL $label$4
	CALL $35($0, $5)
	$5 = *(($0 + [4]))
	$7 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	*($9) = $7
	*($9 + [8]) = $5
	CALL eosio_assert(((int_32)($5 - $7) > (int_32)[7]), [192])
	CALL memcpy($7, $1, [8])
	$6 = ($7 + [8])
	CALL eosio_assert(((int_32)($5 - $6) > (int_32)[31]), [192])
	CALL memcpy($6, ($1 + [16]), [32])
	*($9 + [4]) = ($7 + [40])
	CALL $47($9, $2)
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $42 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $89($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	CALL $43(($9 + [52]), $3)
	CALL $44(($9 + [64]), ($9 + [24]))
	$8 = *($9 + [64])
	CALL send_inline($8, (*($9 + [68]) - $8))
	$8 = *($9 + [64])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [68]) = $8
	CALL $90($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $90($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $90($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $90($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $95(($9 + [8]))
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = int_32((*($0 + [4]) - $6) >> [5])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$3 }
	$5 = [134217727]
	$6 = (*($0 + [8]) - $6)
	if ( ((uint_32)int_32($6 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$6 = int_32($6 >> [4])
	$5 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$4 = CALL $89(($5 << [5]))
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $95($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($6 = ($4 + ($2 << [5])))) = *($1)
	*(($6 + [8])) = *(($1 + [8]))
	CALL $96(($6 + [16]), ($1 + [16]))
	$2 = ($4 + ($5 << [5]))
	$3 = ($6 + [32])
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$7 }
	$4 = ([0] - $1)
	$1 = ($5 + [-16])
	
.LOOP $label$8:
	*(($6 + [-24])) = *(($1 + [-8]))
	*(($6 + [-32])) = *(($1 + [-16]))
	*(($6 + [-16])) = *($1)
	$5 = ($1 + [8])
	*(($6 + [-8])) = *($5)
	*($1) = [0]
	*(($1 + [4])) = [0]
	*($5) = [0]
	$6 = ($6 + [-32])
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $4) != (int_32)[-16]) ){ goto $label$8 }
	$1 = *(($0 + [4]))
	$5 = *($0)
	goto $label$6 
	
.LABEL $label$7
	$5 = $1
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$9 }
	$6 = ([0] - $5)
	$1 = ($1 + [-16])
	
.LOOP $label$10:
	if ( ((*($1) & [1]) == 0) ){ goto $label$11 }
	CALL $90(*(($1 + [8])))
	
.LABEL $label$11
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $6) != (int_32)[-16]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $90($5)
	
.LABEL $label$12
	(unreachable)
	(unreachable)
}

void .FUNC $40 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	*((($3 = CALL $89([16])) + [12])) = *(($1 + [12]))
	*(($3 + [8])) = *(($1 + [8]))
	*(($3 + [4])) = *(($1 + [4]))
	*($3) = *($1)
	*($5 + [64]) = $3
	$3 = ($3 + [16])
	*($5 + [72]) = $3
	*($5 + [68]) = $3
	$1 = CALL memcpy($5, $2, [48])
	$4 = *($2 + [48 align=4])
	*(($2 + [52])) = [0]
	$3 = ($2 + [56])
	$5 = *($3)
	*($3) = [0]
	*(($1 + [56])) = $5
	*($2 + [48]) = [0]
	*($1 + [48]) = $4
	CALL $42($0, (int_64)-4994024814571159552, ($1 + [64]), $1)
	$5 = *($1 + [48])
	if ( ($5 == 0) ){ goto $label$1 }
	$2 = *(($1 + [52]))
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$3 }
	$3 = ([0] - $5)
	$2 = ($2 + [-16])
	
.LOOP $label$4:
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	CALL $90(*(($2 + [8])))
	
.LABEL $label$5
	$2 = ($2 + [-32])
	if ( ((int_32)($2 + $3) != (int_32)[-16]) ){ goto $label$4 }
	$2 = *(($1 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $5
	
.LABEL $label$2
	*(($1 + [52])) = $5
	CALL $90($2)
	
.LABEL $label$1
	$2 = *($1 + [64])
	if ( ($2 == 0) ){ goto $label$6 }
	*($1 + [68]) = $2
	CALL $90($2)
	
.LABEL $label$6
	*([0] + [4]) = ($1 + [80])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [5]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [192])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [192])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [192])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $48($0, ($7 + [16]))
	$7 = ($7 + [32])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [192])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [192])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [192])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [192])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [192])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $35($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [192])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [192])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $46(CALL $45($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $89(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $95($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $90($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $90($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [240])
	CALL memcpy(($1 + [8]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [208])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $89([56])) + [40]) = $0
	CALL $9(($8 + [32]), $6)
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $8(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $90($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [192])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [192])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [192])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [192])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [192])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z14add_activeseedytyyy (int_64 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	CALL prints([16])
	CALL require_auth($2)
	$7 = [0]
	*(($8 + [32])) = [0]
	*($8 + [8]) = $3
	*($8) = $3
	*($8 + [16]) = (int_64)-1
	*($8 + [24]) = (int_64)0
	$5 = CALL db_find_i64($3, $3, (int_64)3617214769600282624, $0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $6($8, $5) + [40]) == (int_32)$8), [32])
	goto $label$1 
	
.LABEL $label$2
	$7 = [1]
	
.LABEL $label$1
	CALL eosio_assert($7, [96])
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL $fimport$2()), [128])
	*(($7 = CALL $89([56])) + [40]) = $8
	*($7 + [8]) = $1
	*($7) = $0
	*($7 + [16]) = $2
	*($7 + [24]) = $3
	*($7 + [32]) = $4
	*($8 + [104]) = (($8 + [48]) + [34])
	*($8 + [100]) = ($8 + [48])
	*($8 + [96]) = ($8 + [48])
	CALL $7(($8 + [96]), $7)
	$3 = *($7)
	$5 = CALL db_store_i64(*(($8 + [8])), (int_64)3617214769600282624, $2, $3, ($8 + [48]), [34])
	*($7 + [44]) = $5
	$1 = ($8 + [16])
	if ( (uint_64)($3 <= *($1)) ){ goto $label$3 }
	*($1) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($8 + [96]) = $7
	$3 = *($7)
	*($8 + [48]) = $3
	*($8 + [44]) = $5
	$6 = ($8 + [28])
	$1 = *($6)
	if ( ((uint_32)$1 >= (uint_32)*(($8 + [32]))) ){ goto $label$5 }
	*($1 + [8]) = $3
	*($1 + [16]) = $5
	*($8 + [96]) = [0]
	*($1) = $7
	*($6) = ($1 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $8(($8 + [24]), ($8 + [96]), ($8 + [48]), ($8 + [44]))
	
.LABEL $label$4
	$7 = *($8 + [96])
	*($8 + [96]) = [0]
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $90($7)
	
.LABEL $label$6
	$5 = *($8 + [24])
	if ( ($5 == 0) ){ goto $label$7 }
	$6 = ($8 + [28])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $90($1)
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$10 }
	$7 = *(($8 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$7 = $5
	
.LABEL $label$8
	*($6) = $5
	CALL $90($7)
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [112])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	*($10 + [56]) = $1
	*($10 + [48]) = $2
	$5 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$1 }
	$8 = ($7 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$7 = $8
	$9 = ($8 + [-24])
	$8 = $9
	if ( ((int_32)($9 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$4 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [100]) == (int_32)$6), [32])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-8272103851651112288, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $36($6, $9)
	CALL eosio_assert(((int_32)*($8 + [100]) == (int_32)$6), [32])
	
.LABEL $label$3
	CALL eosio_assert(($8 == 0), [1328])
	CALL eosio_assert(CALL $fimport$11($2), [1376])
	CALL require_auth($2)
	*($10 + [40]) = [0]
	*($10 + [32]) = (int_64)0
	$8 = (*($3 + [4]) - *($3))
	$9 = ((int_32)$8 / (int_32)[24])
	if ( ($8 == 0) ){ goto $label$6 }
	if ( ((uint_32)$9 >= (uint_32)[178956971]) ){ goto $label$5 }
	$8 = CALL $89($8)
	*((($10 + [32]) + [8])) = ($8 + ((int_32)$9 * (int_32)[24]))
	*($10 + [32]) = $8
	*($10 + [36]) = $8
	$7 = *(($3 + [4]))
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	*($8) = *($9)
	CALL $96(($8 + [8]), ($9 + [8]))
	$8 = ($8 + [24])
	$9 = ($9 + [24])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$7 }
	*($10 + [36]) = $8
	
.LABEL $label$6
	CALL $76($0, ($10 + [32]))
	$7 = *($10 + [32])
	if ( ($7 == 0) ){ goto $label$8 }
	$8 = *($10 + [36])
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	$9 = ([0] - $7)
	$8 = ($8 + [-16])
	
.LOOP $label$11:
	if ( ((*($8) & [1]) == 0) ){ goto $label$12 }
	CALL $90(*(($8 + [8])))
	
.LABEL $label$12
	$8 = ($8 + [-24])
	if ( ((int_32)($8 + $9) != (int_32)[-16]) ){ goto $label$11 }
	$8 = *($10 + [32])
	goto $label$9 
	
.LABEL $label$10
	$8 = $7
	
.LABEL $label$9
	*($10 + [36]) = $7
	CALL $90($8)
	$2 = *($10 + [48])
	
.LABEL $label$8
	*($10 + [16]) = $3
	*($10 + [20]) = $4
	*($10 + [12]) = ($10 + [48])
	*($10 + [8]) = ($10 + [56])
	CALL $83(($10 + [24]), $6, $2, ($10 + [8]))
	*([0] + [4]) = ($10 + [64])
	return (unreachable)
	
.LABEL $label$5
	CALL $95(($10 + [32]))
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*([0] + [4]) - [80])
	*([0] + [4]) = $2
	*(($4 = $2) + [60]) = $0
	*($4 + [48]) = *($1)
	*($4 + [52]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($4 + [32])) = (int_64)0
	*(($4 + [40])) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [64]) = $1
	$2 = ($1 + $0)
	*($4 + [72]) = $2
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [240])
	CALL memcpy(($4 + [8]), $1, [8])
	$3 = ($1 + [8])
	CALL eosio_assert(((uint_32)($2 - $3) > (uint_32)[7]), [240])
	CALL memcpy((($4 + [8]) + [8]), $3, [8])
	*($4 + [68]) = ($1 + [16])
	CALL $56(($4 + [64]), (($4 + [8]) + [16]))
	CALL $57(($4 + [64]), ($4 + [36]))
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($4 + [68]) = ($4 + [48])
	*($4 + [64]) = ($4 + [60])
	CALL $81(($4 + [64]), ($4 + [8]))
	$2 = *($4 + [36])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ($4 + [40])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	$0 = ([0] - $2)
	$1 = ($1 + [-16])
	
.LOOP $label$9:
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL $90(*(($1 + [8])))
	
.LABEL $label$10
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $0) != (int_32)[-16]) ){ goto $label$9 }
	$1 = *(($4 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$1 = $2
	
.LABEL $label$7
	*($3) = $2
	CALL $90($1)
	
.LABEL $label$6
	$2 = *($4 + [24])
	if ( ($2 == 0) ){ goto $label$11 }
	$3 = ($4 + [28])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$13 }
	$0 = ([0] - $2)
	$1 = ($1 + [-16])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $90(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $0) != (int_32)[-16]) ){ goto $label$14 }
	$1 = *(($4 + [24]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $2
	
.LABEL $label$12
	*($3) = $2
	CALL $90($1)
	
.LABEL $label$11
	*([0] + [4]) = ($4 + [80])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	$6 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$1 }
	$9 = ($8 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$1 }
	$8 = $9
	$10 = ($9 + [-24])
	$9 = $10
	if ( ((int_32)($10 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [100]) == (int_32)$5), [32])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$9 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-8272103851651112288, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $36($5, $9)
	CALL eosio_assert(((int_32)*($7 + [100]) == (int_32)$5), [32])
	
.LABEL $label$3
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [1184])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$2), [1232])
	CALL require_auth(*($7 + [8]))
	*($11 + [24]) = [0]
	*($11 + [16]) = (int_64)0
	$9 = (*($3 + [4]) - *($3))
	$10 = ((int_32)$9 / (int_32)[24])
	if ( ($9 == 0) ){ goto $label$6 }
	if ( ((uint_32)$10 >= (uint_32)[178956971]) ){ goto $label$5 }
	$9 = CALL $89($9)
	*((($11 + [16]) + [8])) = ($9 + ((int_32)$10 * (int_32)[24]))
	*($11 + [16]) = $9
	*($11 + [20]) = $9
	$8 = *(($3 + [4]))
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	*($9) = *($10)
	CALL $96(($9 + [8]), ($10 + [8]))
	$9 = ($9 + [24])
	$10 = ($10 + [24])
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$7 }
	*($11 + [20]) = $9
	
.LABEL $label$6
	CALL $76($0, ($11 + [16]))
	$8 = *($11 + [16])
	if ( ($8 == 0) ){ goto $label$8 }
	$9 = *($11 + [20])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$10 }
	$10 = ([0] - $8)
	$9 = ($9 + [-16])
	
.LOOP $label$11:
	if ( ((*($9) & [1]) == 0) ){ goto $label$12 }
	CALL $90(*(($9 + [8])))
	
.LABEL $label$12
	$9 = ($9 + [-24])
	if ( ((int_32)($9 + $10) != (int_32)[-16]) ){ goto $label$11 }
	$9 = *($11 + [16])
	goto $label$9 
	
.LABEL $label$10
	$9 = $8
	
.LABEL $label$9
	*($11 + [20]) = $8
	CALL $90($9)
	
.LABEL $label$8
	$1 = *(($7 + [8]))
	*($11 + [12]) = $4
	*($11 + [8]) = $3
	CALL eosio_assert($6, [752])
	CALL $77($5, $7, $1, ($11 + [8]))
	*([0] + [4]) = ($11 + [32])
	return (unreachable)
	
.LABEL $label$5
	CALL $95(($11 + [16]))
}

void .FUNC $17 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [100]) == (int_32)$4), [32])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-8272103851651112288, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $36($4, $6)
	CALL eosio_assert(((int_32)*($5 + [100]) == (int_32)$4), [32])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [704])
	CALL require_auth(*($5 + [8]))
	CALL eosio_assert($6, [336])
	CALL eosio_assert($6, [384])
	$6 = CALL db_next_i64(*($5 + [104]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $36($4, $6)
	
.LABEL $label$5
	CALL $71($4, $5)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC _Z14get_activeseedyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL prints([256])
	CALL require_auth($2)
	*(($7 + [40])) = [0]
	*($7 + [16]) = $3
	*($7 + [8]) = $3
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$6 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)3617214769600282624, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $6(($7 + [8]), $4)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)($7 + [8])), [32])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [272])
	CALL memcpy($0, $6, [40])
	$4 = *($7 + [32])
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ($7 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $90($0)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($7 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$6 = $4
	
.LABEL $label$3
	*($5) = $4
	CALL $90($6)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [48])
}

void .FUNC _Z17remove_activeseedyyy (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL prints([304])
	CALL require_auth($1)
	*(($7 + [32])) = [0]
	*($7 + [8]) = $2
	*($7) = $2
	*($7 + [16]) = (int_64)-1
	*($7 + [24]) = (int_64)0
	$6 = [0]
	$4 = CALL db_find_i64($2, $2, (int_64)3617214769600282624, $0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $6($7, $4)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$7), [32])
	
.LABEL $label$1
	$4 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($4, [272])
	CALL eosio_assert($4, [336])
	CALL eosio_assert($4, [384])
	$4 = CALL db_next_i64(*($6 + [44]), ($7 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $6($7, $4)
	
.LABEL $label$2
	CALL $12($7, $6)
	$3 = *($7 + [24])
	if ( ($3 == 0) ){ goto $label$3 }
	$5 = ($7 + [28])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $90($4)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	$6 = *(($7 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$6 = $3
	
.LABEL $label$4
	*($5) = $3
	CALL $90($6)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [464])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [528])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $90($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $90($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [176])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [592]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [608]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [624])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [592]
	$9 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$17
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($11 + [144])) = $0
	*(($11 + [152])) = (int_64)-1
	*(($11 + [160])) = (int_64)0
	*(($11 + [168])) = [0]
	*($11 + [136]) = $0
	*($11 + [128]) = $0
	if ( ((int_64)$2 > (int_64)-3075276113203932161) ){ goto $label$29 }
	if ( ((int_64)$2 > (int_64)-4997502813886737009) ){ goto $label$28 }
	if ( ((int_64)$2 == (int_64)-8272103852073811968) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)-4997502814021463040) ){ goto $label$22 }
	*($11 + [108]) = [0]
	*($11 + [104]) = [1]
	*($11 + [16 align=4]) = *($11 + [104])
	CALL $18(($11 + [128]), ($11 + [16]))
	goto $label$22 
	
.LABEL $label$29
	if ( ((int_64)$2 > (int_64)3626408297428942847) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)-3075276113203932160) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)-3075276113069206128) ){ goto $label$22 }
	*($11 + [92]) = [0]
	*($11 + [88]) = [2]
	*($11 + [32 align=4]) = *($11 + [88])
	CALL $20(($11 + [128]), ($11 + [32]))
	goto $label$22 
	
.LABEL $label$28
	if ( ((int_64)$2 == (int_64)-4997502813886737008) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)-4994024801513095168) ){ goto $label$22 }
	*($11 + [68]) = [0]
	*($11 + [64]) = [3]
	*($11 + [56 align=4]) = *($11 + [64])
	CALL $27(($11 + [128]), ($11 + [56]))
	goto $label$22 
	
.LABEL $label$27
	if ( ((int_64)$2 == (int_64)3626408297428942848) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)5031766166016381952) ){ goto $label$22 }
	*($11 + [124]) = [0]
	*($11 + [120]) = [4]
	*($11) = *($11 + [120])
	CALL $15(($11 + [128]), $11)
	goto $label$22 
	
.LABEL $label$26
	*($11 + [76]) = [0]
	*($11 + [72]) = [5]
	*($11 + [48 align=4]) = *($11 + [72])
	CALL $25(($11 + [128]), ($11 + [48]))
	goto $label$22 
	
.LABEL $label$25
	*($11 + [116]) = [0]
	*($11 + [112]) = [6]
	*($11 + [8 align=4]) = *($11 + [112])
	CALL $15(($11 + [128]), ($11 + [8]))
	goto $label$22 
	
.LABEL $label$24
	*($11 + [84]) = [0]
	*($11 + [80]) = [7]
	*($11 + [40 align=4]) = *($11 + [80])
	CALL $23(($11 + [128]), ($11 + [40]))
	goto $label$22 
	
.LABEL $label$23
	*($11 + [100]) = [0]
	*($11 + [96]) = [8]
	*($11 + [24 align=4]) = *($11 + [96])
	CALL $20(($11 + [128]), ($11 + [24]))
	
.LABEL $label$22
	$4 = *(($11 + [160]))
	if ( ($4 == 0) ){ goto $label$14 }
	$5 = ($11 + [164])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$31 }
	
.LOOP $label$32:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$33 }
	CALL $28($3)
	CALL $90($3)
	
.LABEL $label$33
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$32 }
	$6 = *(($11 + [160]))
	goto $label$30 
	
.LABEL $label$31
	$6 = $4
	
.LABEL $label$30
	*($5) = $4
	CALL $90($6)
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [176])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $7) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$7 = ((int_32)(*($0 + [8]) - $7) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $89(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $95($0)
	
.LABEL $label$1
	*(($7 = ($5 + ((int_32)$4 * (int_32)[24])))) = *($1)
	CALL $96(($7 + [8]), ($1 + [8]))
	$2 = ($5 + ((int_32)$6 * (int_32)[24]))
	$3 = ($7 + [24])
	$6 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$6 }
	$4 = ([0] - $6)
	$6 = ($1 + [-24])
	
.LOOP $label$7:
	*(($7 + [-24])) = *($6)
	$1 = ($6 + [12])
	*(($7 + [-12])) = *($1)
	$5 = ($6 + [8])
	*(($7 + [-16])) = *($5)
	*($5) = [0]
	*($1) = [0]
	*(($6 + [16])) = [0]
	$7 = ($7 + [-24])
	$6 = ($6 + [-24])
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$7 }
	$6 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $6
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$8 }
	$7 = ([0] - $1)
	$6 = ($6 + [-16])
	
.LOOP $label$9:
	if ( ((*($6) & [1]) == 0) ){ goto $label$10 }
	CALL $90(*(($6 + [8])))
	
.LABEL $label$10
	$6 = ($6 + [-24])
	if ( ((int_32)($6 + $7) != (int_32)[-16]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $90($1)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [240])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	*($11 + [8]) = $2
	$7 = *(($0 + [32]))
	$10 = *(($0 + [36]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$1 }
	$8 = ($10 + [-24])
	$6 = ([0] - $7)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$10 = $8
	$9 = ($8 + [-24])
	$8 = $9
	if ( ((int_32)($9 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$4 }
	$7 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [100]) == (int_32)$4), [32])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-8272103851651112288, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $36($4, $8)
	CALL eosio_assert(((int_32)*($7 + [100]) == (int_32)$4), [32])
	
.LABEL $label$3
	$8 = [0]
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [704])
	CALL require_auth(*($7 + [8]))
	$9 = *($7 + [76])
	$6 = ($7 + [80])
	if ( ((int_32)*($6) == (int_32)$9) ){ goto $label$5 }
	$0 = ($7 + [76])
	$10 = [0]
	
.LOOP $label$6:
	CALL eosio_assert(((int_64)*(($9 + $8)) != (int_64)$2), [1136])
	$8 = ($8 + [24])
	$9 = *($0)
	$10 = ($10 + [1])
	if ( ($10 <= ((int_32)(*($6) - $9) / (int_32)[24])) ){ goto $label$6 }
	
.LABEL $label$5
	$2 = *(($7 + [8]))
	*($11 + [4]) = $3
	*($11) = ($11 + [8])
	CALL eosio_assert($5, [752])
	CALL $74($4, $7, $2, $11)
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [688])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$6 = *($1)
	$2 = *($1 + [4])
	$7 = int_32(($2 - $6) >> [5])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $59($1, ($4 - $7))
	$2 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ($4 << [5])
	$3 = ($6 + $4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	$7 = (([0] - $6) - $4)
	$4 = ($2 + [-16])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $90(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-32])
	if ( ((int_32)($4 + $7) != (int_32)[-16]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$7 }
	$4 = ($0 + [4])
	
.LOOP $label$8:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($4)) > (uint_32)[7]), [240])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [240])
	CALL memcpy(($7 + [8]), *($4), [8])
	*($4) = (*($4) + [8])
	CALL $33($0, ($7 + [16]))
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $6) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$2 = int_32(($6 - $4) >> [5])
	$5 = ($2 + $1)
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$4 }
	$6 = [134217727]
	$7 = ($7 - $4)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$6 = int_32($7 >> [4])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $89(($6 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$7 = ($0 + [4])
	
.LOOP $label$8:
	*(($4 = ($6 + [16]))) = (int_64)0
	*($6) = (int_64)0
	*(($5 = ($6 + [24]))) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*($4) = [0]
	*(($6 + [20])) = [0]
	*($5) = [0]
	$6 = (*($7) + [32])
	*($7) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $95($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($7 + ($6 << [5]))
	$7 = ($7 + ($2 << [5]))
	$6 = $7
	
.LOOP $label$9:
	*(($4 = ($6 + [24]))) = (int_64)0
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*($4) = [0]
	$6 = ($6 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$11 }
	$5 = ([0] - $4)
	$1 = ($1 + [-16])
	
.LOOP $label$12:
	*(($7 + [-24])) = *(($1 + [-8]))
	*(($7 + [-32])) = *(($1 + [-16]))
	*(($7 + [-16])) = *($1)
	$4 = ($1 + [8])
	*(($7 + [-8])) = *($4)
	*($1) = [0]
	*(($1 + [4])) = [0]
	*($4) = [0]
	$7 = ($7 + [-32])
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $5) != (int_32)[-16]) ){ goto $label$12 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$5 = $4
	
.LABEL $label$10
	*($0) = $7
	*(($0 + [4])) = $6
	*(($0 + [8])) = $3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	$1 = ([0] - $5)
	$6 = ($4 + [-16])
	
.LOOP $label$14:
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	CALL $90(*(($6 + [8])))
	
.LABEL $label$15
	$6 = ($6 + [-32])
	if ( ((int_32)($6 + $1) != (int_32)[-16]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $90($5)
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$5 = (*($0) + [50])
	*($0) = $5
	$6 = *($1 + [64])
	$2 = *(($1 + [68]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($2 - $6) / (int_32)[24]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	*($0) = $5
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = ($5 + [8])
	*($0) = $5
	$3 = *($6 + [8])
	$4 = ($6 + [12])
	$7 = (CASTING uint_64)(uint_32 ( *($4) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	*($0) = $5
	$4 = *(($6 + [8]))
	$4 = ( *($4) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$5 }
	$5 = ($4 + $5)
	*($0) = $5
	
.LABEL $label$5
	$6 = ($6 + [24])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	$6 = *($1 + [76])
	$2 = *(($1 + [80]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($2 - $6) / (int_32)[24]))
	
.LOOP $label$6:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	*($0) = $5
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [8])
	*($0) = $5
	$3 = *($6 + [8])
	$4 = ($6 + [12])
	$7 = (CASTING uint_64)(uint_32 ( *($4) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$9 }
	*($0) = $5
	$4 = *(($6 + [8]))
	$4 = ( *($4) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$10 }
	$5 = ($4 + $5)
	*($0) = $5
	
.LABEL $label$10
	$6 = ($6 + [24])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = *($1 + [88])
	$2 = *(($1 + [92]))
	$7 = (CASTING uint_64)(uint_32 int_32(($2 - $6) >> [5]))
	
.LOOP $label$11:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$11 }
	*($0) = $5
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($5 + [16])
	*($0) = $5
	$3 = *($6 + [16])
	$4 = ($6 + [20])
	$7 = (CASTING uint_64)(uint_32 ( *($4) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$14:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$14 }
	*($0) = $5
	$4 = *(($6 + [16]))
	$4 = ( *($4) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$15 }
	$5 = ($4 + $5)
	*($0) = $5
	
.LABEL $label$15
	$6 = ($6 + [32])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $47(CALL $53(CALL $52($0, ($1 + [64])), ($1 + [76])), ($1 + [88]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [192])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [192])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [192])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [192])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [32])
	return *($0 + [4]) = (*($0 + [4]) + [32])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$7 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$5 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $7) > (int_32)[0]), [192])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$7 = (*($4) + [1])
	*($4) = $7
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$5 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [192])
	CALL memcpy(*($5), $4, [8])
	*($5) = (*($5) + [8])
	CALL $48($0, ($4 + [8]))
	$4 = ($4 + [24])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$7 = *($5)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$7 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$5 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $7) > (int_32)[0]), [192])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$7 = (*($4) + [1])
	*($4) = $7
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$5 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [192])
	CALL memcpy(*($5), $4, [8])
	*($5) = (*($5) + [8])
	CALL $48($0, ($4 + [8]))
	$4 = ($4 + [24])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$7 = *($5)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $58(CALL $57(CALL $56($0, ($1 + [64])), ($1 + [76])), ($1 + [88]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [240])
	CALL memcpy(($1 + [16]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [240])
	CALL memcpy(($1 + [32]), *($0 + [4]), [32])
	return *($0 + [4]) = (*($0 + [4]) + [32])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [688])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $35($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [240])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [688])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$7 = *($1 + [4])
	$5 = ((int_32)($7 - $3) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$3 }
	CALL $61($1, ($4 - $5))
	$7 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[24])
	$2 = ($3 + $4)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$5 = (([0] - $3) - $4)
	$4 = ($7 + [-16])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $90(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-24])
	if ( ((int_32)($4 + $5) != (int_32)[-16]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$7 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$7 }
	$5 = ($0 + [4])
	
.LOOP $label$8:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - *($5)) > (uint_32)[7]), [240])
	CALL memcpy($4, *($5), [8])
	*($5) = (*($5) + [8])
	CALL $33($0, ($4 + [8]))
	$4 = ($4 + [24])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [688])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$7 = *($1 + [4])
	$5 = ((int_32)($7 - $3) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$3 }
	CALL $60($1, ($4 - $5))
	$7 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[24])
	$2 = ($3 + $4)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$5 = (([0] - $3) - $4)
	$4 = ($7 + [-16])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $90(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-24])
	if ( ((int_32)($4 + $5) != (int_32)[-16]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$7 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$7 }
	$5 = ($0 + [4])
	
.LOOP $label$8:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - *($5)) > (uint_32)[7]), [240])
	CALL memcpy($4, *($5), [8])
	*($5) = (*($5) + [8])
	CALL $33($0, ($4 + [8]))
	$4 = ($4 + [24])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $89($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $95($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $90($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [688])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$5 = *($1 + [4])
	$7 = ((int_32)($5 - $3) / (int_32)[12])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $32($1, ($4 - $7))
	$5 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[12])
	$2 = ($3 + $4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $90(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $7) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $33($0, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [88])
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [92])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$4 = ($4 + [-16])
	
.LOOP $label$4:
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL $90(*(($4 + [8])))
	
.LABEL $label$5
	$4 = ($4 + [-32])
	if ( ((int_32)($4 + $2) != (int_32)[-16]) ){ goto $label$4 }
	$4 = *(($0 + [88]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $90($4)
	
.LABEL $label$1
	$1 = *($0 + [76])
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [80])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$4 = ($4 + [-16])
	
.LOOP $label$9:
	if ( ((*($4) & [1]) == 0) ){ goto $label$10 }
	CALL $90(*(($4 + [8])))
	
.LABEL $label$10
	$4 = ($4 + [-24])
	if ( ((int_32)($4 + $2) != (int_32)[-16]) ){ goto $label$9 }
	$4 = *(($0 + [76]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $90($4)
	
.LABEL $label$6
	$1 = *($0 + [64])
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [68])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	$2 = ([0] - $1)
	$4 = ($4 + [-16])
	
.LOOP $label$14:
	if ( ((*($4) & [1]) == 0) ){ goto $label$15 }
	CALL $90(*(($4 + [8])))
	
.LABEL $label$15
	$4 = ($4 + [-24])
	if ( ((int_32)($4 + $2) != (int_32)[-16]) ){ goto $label$14 }
	$4 = *(($0 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $90($4)
	
.LABEL $label$11
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $89(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $95($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $28($1)
	CALL $90($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $90($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$5 = *(($0 + [32]))
	$9 = *(($0 + [36]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$4 }
	$6 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [100]) == (int_32)$4), [32])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$8 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-8272103851651112288, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $36($4, $8)
	CALL eosio_assert(((int_32)*($6 + [100]) == (int_32)$4), [32])
	
.LABEL $label$3
	$7 = [0]
	$0 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($0, [704])
	CALL require_auth(*($6 + [8]))
	*($10 + [12]) = [-1]
	$9 = [-1]
	$8 = *($6 + [76])
	$5 = *(($6 + [80]))
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$5 }
	$9 = ((int_32)($5 - $8) / (int_32)[24])
	
.LOOP $label$7:
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$6 }
	$8 = ($8 + [24])
	$7 = ($7 + [1])
	if ( ($7 <= $9) ){ goto $label$7 }
	$9 = [-1]
	goto $label$5 
	
.LABEL $label$6
	*($10 + [12]) = $7
	$9 = $7
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$9 != (int_32)[-1]), [1088])
	$1 = *(($6 + [8]))
	*($10 + [4]) = $3
	*($10) = ($10 + [12])
	CALL eosio_assert($0, [752])
	CALL $72($4, $6, $1, $10)
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [240])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [240])
	CALL memcpy(($3 + [8]), $2, [8])
	*($3 + [52]) = ($1 + [16])
	CALL $33(($3 + [48]), ($3 + [16]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $73(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $90(*(($3 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [240])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [240])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [100]) == (int_32)$5), [32])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-8272103851651112288, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $36($5, $7)
	CALL eosio_assert(((int_32)*($6 + [100]) == (int_32)$5), [32])
	
.LABEL $label$3
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [704])
	CALL require_auth(*($6 + [8]))
	CALL eosio_assert($7, [336])
	CALL eosio_assert($7, [384])
	$7 = CALL db_next_i64(*($6 + [104]), ($8 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	CALL $36($5, $7)
	
.LABEL $label$5
	CALL $71($5, $6)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = (*([0] + [4]) - [128])
	*([0] + [4]) = $2
	*(($5 = $2) + [76]) = $0
	*($5 + [64]) = *($1)
	*($5 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 = ($5 + [32]))) = (int_64)0
	*(($3 = ($5 + [24]))) = (int_64)0
	*(($4 = ($5 + [16]))) = (int_64)0
	*(($5 + [48])) = [0]
	*($5 + [8]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [52]) = [0]
	*(($5 + [56])) = [0]
	*(($5 + [60])) = [0]
	*($5 + [84]) = $1
	*($5 + [80]) = $1
	*($5 + [88]) = ($1 + $0)
	*($5 + [96]) = ($5 + [80])
	*($5 + [108]) = $4
	*($5 + [112]) = $3
	*($5 + [116]) = $2
	*($5 + [120]) = ($5 + [40])
	*($5 + [124]) = ($5 + [52])
	*($5 + [104]) = ($5 + [8])
	CALL $62(($5 + [104]), ($5 + [96]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($5 + [108]) = ($5 + [64])
	*($5 + [104]) = ($5 + [76])
	CALL $63(($5 + [104]), ($5 + [8]))
	$2 = *($5 + [52])
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = ($5 + [56])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$7 }
	$0 = ([0] - $2)
	$1 = ($1 + [-12])
	
.LOOP $label$8:
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL $90(*(($1 + [8])))
	
.LABEL $label$9
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $0) != (int_32)[-12]) ){ goto $label$8 }
	$1 = *(($5 + [52]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $2
	
.LABEL $label$6
	*($3) = $2
	CALL $90($1)
	
.LABEL $label$5
	if ( ((*(($5 + [40])) & [1]) == 0) ){ goto $label$10 }
	CALL $90(*(($5 + [48])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [128])
	return [1]
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [48])
	*([0] + [4]) = $14
	$11 = *($1 + [24])
	$2 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$1 }
	$9 = ($8 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$11) ){ goto $label$1 }
	$8 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$4 }
	$8 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [100]) == (int_32)$3), [32])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-8272103851651112288, $11)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $36($3, $9)
	CALL eosio_assert(((int_32)*($8 + [100]) == (int_32)$3), [32])
	
.LABEL $label$3
	$2 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($2, [704])
	CALL require_auth(*($8 + [8]))
	$6 = *($0)
	$5 = *($8 + [8])
	$4 = *($1)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [1008]
	$12 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$11 > (uint_64)(int_64)9) ){ goto $label$10 }
	$7 = *($9)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [165])
	goto $label$8 
	
.LABEL $label$10
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$6
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$5 }
	CALL _Z14add_activeseedytyyy($4, [0], _Z14add_activeseedytyyy, $6, $12)
	$9 = ($8 + [8])
	$11 = *($9)
	CALL eosio_assert($2, [752])
	CALL $65($3, $8, $11, ($14 + [8]))
	*(($14 + [40])) = [0]
	*($14 + [32]) = (int_64)0
	*($14 + [8]) = *($1)
	*($14 + [16]) = *($8)
	*($14 + [24]) = *($0)
	CALL $66(($14 + [32]), *($1 + [44]), *(($1 + [48])))
	CALL $67(*($9), ($14 + [8]))
	$8 = *($14 + [32])
	if ( ($8 == 0) ){ goto $label$11 }
	$3 = ($14 + [36])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$13 }
	$7 = ([0] - $8)
	$9 = ($9 + [-12])
	
.LOOP $label$14:
	if ( ((*($9) & [1]) == 0) ){ goto $label$15 }
	CALL $90(*(($9 + [8])))
	
.LABEL $label$15
	$9 = ($9 + [-12])
	if ( ((int_32)($9 + $7) != (int_32)[-12]) ){ goto $label$14 }
	$9 = *(($14 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$9 = $8
	
.LABEL $label$12
	*($3) = $8
	CALL $90($9)
	
.LABEL $label$11
	*([0] + [4]) = ($14 + [48])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = (*([0] + [4]) - [112])
	*([0] + [4]) = $3
	*(($2 = $3) + [92]) = $0
	*($2 + [80]) = *($1)
	*($2 + [84]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*((($2 = CALL memset($2, [0], [40])) + [32])) = [0]
	*(($2 + [76])) = [0]
	*(($2 + [72])) = [0]
	*(($2 + [68])) = [0]
	*(($2 + [64])) = [0]
	*(($2 + [60])) = [0]
	*(($2 + [56])) = [0]
	*(($2 + [52])) = [0]
	*($2 + [24]) = (int_64)0
	*($2 + [48]) = [0]
	*($2 + [96]) = $1
	$3 = ($1 + $0)
	*($2 + [104]) = $3
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [240])
	CALL memcpy($2, $1, [8])
	$4 = ($1 + [8])
	CALL eosio_assert(((uint_32)($3 - $4) > (uint_32)[7]), [240])
	CALL memcpy(($2 | [8]), $4, [8])
	$4 = ($1 + [16])
	CALL eosio_assert(((uint_32)($3 - $4) > (uint_32)[7]), [240])
	CALL memcpy(($2 + [16]), $4, [8])
	*($2 + [100]) = ($1 + [24])
	CALL $29(($2 + [96]), ($2 + [24]))
	CALL eosio_assert(((uint_32)(*($2 + [104]) - *($2 + [100])) > (uint_32)[31]), [240])
	CALL memcpy(($2 + [48]), *($2 + [100]), [32])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [100]) = ($2 + [80])
	*($2 + [96]) = ($2 + [92])
	CALL $30(($2 + [96]), $2)
	$3 = *($2 + [24])
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = ($2 + [28])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$7 }
	$0 = ([0] - $3)
	$1 = ($1 + [-12])
	
.LOOP $label$8:
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL $90(*(($1 + [8])))
	
.LABEL $label$9
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $0) != (int_32)[-12]) ){ goto $label$8 }
	$1 = *(($2 + [24]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $3
	
.LABEL $label$6
	*($4) = $3
	CALL $90($1)
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [112])
	return [1]
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_32 $23
	int_32 $24
	int_32 $25
	$25 = (*([0] + [4]) - [192])
	*([0] + [4]) = $25
	$17 = *($1 + [8])
	$5 = *(($0 + [32]))
	$24 = *(($0 + [36]))
	if ( ((int_32)$24 == (int_32)$5) ){ goto $label$1 }
	$23 = ($24 + [-24])
	$16 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($23)) == (int_64)$17) ){ goto $label$1 }
	$24 = $23
	$9 = ($23 + [-24])
	$23 = $9
	if ( ((int_32)($9 + $16) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [8])
	if ( ((int_32)$24 == (int_32)$5) ){ goto $label$4 }
	$20 = *(($24 + [-24]))
	CALL eosio_assert(((int_32)*($20 + [100]) == (int_32)$3), [32])
	goto $label$3 
	
.LABEL $label$4
	$20 = [0]
	$23 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-8272103851651112288, $17)
	if ( ((int_32)$23 < (int_32)[0]) ){ goto $label$3 }
	$20 = CALL $36($3, $23)
	CALL eosio_assert(((int_32)*($20 + [100]) == (int_32)$3), [32])
	
.LABEL $label$3
	$4 = ((int_32)$20 != (int_32)[0])
	CALL eosio_assert($4, [704])
	CALL require_auth(*($20 + [8]))
	CALL _Z17remove_activeseedyyy(*($1), *($20 + [8]), *($0))
	*(($25 + [184])) = [0]
	$21 = (int_64)0
	*($25 + [176]) = (int_64)0
	$17 = *($20)
	$10 = ($2 + [24])
	*((($25 + [128]) + [40])) = *($10)
	*((($25 + [128]) + [36])) = *(($2 + [20]))
	$11 = ($2 + [16])
	*((($25 + [128]) + [32])) = *($11)
	*((($25 + [128]) + [28])) = *(($2 + [12]))
	$12 = ($2 + [8])
	*((($25 + [128]) + [24])) = *($12)
	*((($25 + [128]) + [20])) = *(($2 + [4]))
	*(($25 + [172])) = *(($2 + [28]))
	*($25 + [128]) = $17
	*($25 + [144]) = *($2)
	$17 = *($10)
	$22 = *($11)
	$18 = *($12)
	$8 = *($2)
	*($25 + [120]) = [0]
	*($25 + [112]) = (int_64)0
	*($25 + [104]) = [0]
	*($25 + [96]) = (int_64)0
	CALL $37(($25 + [96]), *($20 + [76]), *(($20 + [80])))
	$23 = *($20 + [64])
	$13 = ($20 + [68])
	$9 = *($13)
	if ( ((int_32)$9 == (int_32)$23) ){ goto $label$5 }
	$17 = ((int_64)((int_64)((int_64)$18 ^ (int_64)$8) ^ (int_64)$22) ^ (int_64)$17)
	$5 = (($25 + [64]) + [16])
	$19 = ($20 + [64])
	$6 = [0]
	
.LOOP $label$6:
	$14 = ((int_32)$6 * (int_32)[24])
	if ( (int_64)(*(($23 + $14)) == 0) ){ goto $label$7 }
	$22 = (int_64)0
	
.LOOP $label$8:
	$9 = *($25 + [96])
	$24 = *($25 + [100])
	*(($15 = (($25 + [64]) + [24]))) = [0]
	*($5) = (int_64)0
	CALL $92($5, (($23 + $14) + [8]))
	*(($16 = (($25 + [64]) + [8]))) = $17
	$9 = ((int_32)(CASTING uint_32)(uint_64 ((uint_64)$17 % (uint_64)(CASTING uint_64)(uint_32 ((int_32)($24 - $9) / (int_32)[24])))) * (int_32)[24])
	*($25 + [64]) = *((*($25 + [96]) + $9))
	$23 = *($25 + [116])
	if ( ((int_32)$23 == (int_32)*((($25 + [112]) + [8]))) ){ goto $label$10 }
	*($23) = *($25 + [64])
	*(($23 + [8])) = *($16)
	CALL $96(($23 + [16]), $5)
	*($25 + [116]) = (*($25 + [116]) + [32])
	goto $label$9 
	
.LABEL $label$10
	CALL $41(($25 + [112]), ($25 + [64]))
	
.LABEL $label$9
	$24 = *($25 + [100])
	$23 = (*($25 + [96]) + $9)
	$9 = ($23 + [24])
	if ( ((int_32)$9 == (int_32)$24) ){ goto $label$13 }
	$1 = ($24 + [-24])
	
.LOOP $label$14:
	$24 = ($23 + [24])
	*($23) = *($24)
	$9 = ($23 + [8])
	if ( (*($9) & [1]) ){ goto $label$16 }
	*($9) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*(($23 + [16]))) = [0]
	*(($23 + [12])) = [0]
	
.LABEL $label$15
	CALL $94($9, [0])
	$16 = ($23 + [32])
	$17 = *($16)
	*(($23 + [36])) = [0]
	*($16) = [0]
	$23 = ($23 + [40])
	*(($9 + [8])) = *($23)
	*($9) = $17
	*($23) = [0]
	$23 = $24
	if ( ((int_32)$1 != (int_32)$24) ){ goto $label$14 }
	$9 = *($25 + [100])
	if ( ((int_32)$9 != (int_32)$24) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$24 = $23
	
.LABEL $label$12
	
.LOOP $label$17:
	$23 = ($9 + [-24])
	if ( ((*(($9 + [-16])) & [1]) == 0) ){ goto $label$18 }
	CALL $90(*(($9 + [-8])))
	
.LABEL $label$18
	$9 = $23
	if ( ((int_32)$24 != (int_32)$23) ){ goto $label$17 }
	
.LABEL $label$11
	*($25 + [100]) = $24
	CALL sha256($2, [32], $2)
	$17 = ((int_64)((int_64)*($12) ^ (int_64)*($2)) ^ (int_64)*($11))
	$18 = *($10)
	if ( ((*($5) & [1]) == 0) ){ goto $label$19 }
	CALL $90(*($15))
	
.LABEL $label$19
	$17 = ((int_64)$17 ^ (int_64)$18)
	$23 = *($19)
	$22 = ((int_64)$22 + (int_64)1)
	if ( (uint_64)($22 <= *(($23 + $14))) ){ goto $label$8 }
	$9 = *($13)
	
.LABEL $label$7
	$6 = ($6 + [1])
	if ( ($6 <= ((int_32)($9 - $23) / (int_32)[24])) ){ goto $label$6 }
	
.LABEL $label$5
	$17 = *($0)
	*($25 + [64]) = ($25 + [112])
	CALL eosio_assert($4, [752])
	CALL $38($3, $20, $17, ($25 + [64]))
	CALL $39(($25 + [176]), *($25 + [112]), *($25 + [116]))
	$7 = *($0)
	$8 = *(($20 + [8]))
	$22 = (int_64)59
	$23 = [800]
	$18 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$21 > (uint_64)(int_64)5) ){ goto $label$25 }
	$9 = *($23)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$9 = ($9 + [165])
	goto $label$23 
	
.LABEL $label$25
	$17 = (int_64)0
	if ( ((uint_64)$21 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$21
	$23 = ($23 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$18 = ((int_64)$17 | (int_64)$18)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$20 }
	*($25 + [72]) = $18
	*($25 + [64]) = $8
	*((($16 = CALL memcpy($25, ($25 + [128]), [48])) + [56])) = [0]
	*($16 + [48]) = (int_64)0
	$9 = (*(($16 + [180])) - *((($16 + [128]) + [48])))
	$23 = int_32($9 >> [5])
	if ( ($23 == 0) ){ goto $label$27 }
	if ( ((uint_32)$23 >= (uint_32)[134217728]) ){ goto $label$26 }
	$9 = CALL $89($9)
	*(($24 = ($16 + [52]))) = $9
	*(($16 + [48])) = $9
	*(($16 + [56])) = ($9 + ($23 << [5]))
	$1 = *((($16 + [128]) + [52]))
	$23 = *((($16 + [128]) + [48]))
	if ( ((int_32)$23 == (int_32)$1) ){ goto $label$27 }
	
.LOOP $label$28:
	*($9) = *($23)
	*(($9 + [8])) = *(($23 + [8]))
	CALL $96(($9 + [16]), ($23 + [16]))
	$9 = (*($24) + [32])
	*($24) = $9
	$23 = ($23 + [32])
	if ( ((int_32)$23 != (int_32)$1) ){ goto $label$28 }
	
.LABEL $label$27
	CALL $40($7, ($16 + [64]), $16)
	$24 = *($16 + [48])
	if ( ($24 == 0) ){ goto $label$29 }
	$1 = ($16 + [52])
	$23 = *($1)
	if ( ((int_32)$23 == (int_32)$24) ){ goto $label$31 }
	$9 = ([0] - $24)
	$23 = ($23 + [-16])
	
.LOOP $label$32:
	if ( ((*($23) & [1]) == 0) ){ goto $label$33 }
	CALL $90(*(($23 + [8])))
	
.LABEL $label$33
	$23 = ($23 + [-32])
	if ( ((int_32)($23 + $9) != (int_32)[-16]) ){ goto $label$32 }
	$23 = *(($16 + [48]))
	goto $label$30 
	
.LABEL $label$31
	$23 = $24
	
.LABEL $label$30
	*($1) = $24
	CALL $90($23)
	
.LABEL $label$29
	CALL prints([816])
	$24 = *($16 + [96])
	if ( ($24 == 0) ){ goto $label$34 }
	$23 = *($16 + [100])
	if ( ((int_32)$23 == (int_32)$24) ){ goto $label$36 }
	$9 = ([0] - $24)
	$23 = ($23 + [-16])
	
.LOOP $label$37:
	if ( ((*($23) & [1]) == 0) ){ goto $label$38 }
	CALL $90(*(($23 + [8])))
	
.LABEL $label$38
	$23 = ($23 + [-24])
	if ( ((int_32)($23 + $9) != (int_32)[-16]) ){ goto $label$37 }
	$23 = *($16 + [96])
	goto $label$35 
	
.LABEL $label$36
	$23 = $24
	
.LABEL $label$35
	*($16 + [100]) = $24
	CALL $90($23)
	
.LABEL $label$34
	$24 = *($16 + [112])
	if ( ($24 == 0) ){ goto $label$39 }
	$23 = *($16 + [116])
	if ( ((int_32)$23 == (int_32)$24) ){ goto $label$41 }
	$9 = ([0] - $24)
	$23 = ($23 + [-16])
	
.LOOP $label$42:
	if ( ((*($23) & [1]) == 0) ){ goto $label$43 }
	CALL $90(*(($23 + [8])))
	
.LABEL $label$43
	$23 = ($23 + [-32])
	if ( ((int_32)($23 + $9) != (int_32)[-16]) ){ goto $label$42 }
	$23 = *($16 + [112])
	goto $label$40 
	
.LABEL $label$41
	$23 = $24
	
.LABEL $label$40
	*($16 + [116]) = $24
	CALL $90($23)
	
.LABEL $label$39
	$24 = *($16 + [176])
	if ( ($24 == 0) ){ goto $label$44 }
	$1 = ($16 + [180])
	$23 = *($1)
	if ( ((int_32)$23 == (int_32)$24) ){ goto $label$46 }
	$9 = ([0] - $24)
	$23 = ($23 + [-16])
	
.LOOP $label$47:
	if ( ((*($23) & [1]) == 0) ){ goto $label$48 }
	CALL $90(*(($23 + [8])))
	
.LABEL $label$48
	$23 = ($23 + [-32])
	if ( ((int_32)($23 + $9) != (int_32)[-16]) ){ goto $label$47 }
	$23 = *(($16 + [176]))
	goto $label$45 
	
.LABEL $label$46
	$23 = $24
	
.LABEL $label$45
	*($1) = $24
	CALL $90($23)
	
.LABEL $label$44
	*([0] + [4]) = ($16 + [192])
	return (unreachable)
	
.LABEL $label$26
	CALL $95(($16 + [48]))
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [192])
	CALL memcpy(*($4 + [4]), $5, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$5 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [192])
	CALL memcpy(*($4 + [4]), $5, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$5 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [192])
	CALL memcpy(*($4 + [4]), $5, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$2 = *($0 + [12])
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($2 + [4]) - *($2)) / (int_32)[12]))
	$3 = *($1)
	$1 = *($3 + [4])
	$0 = ($3 + [4])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$5 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($5) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($3 + [8])) - $1) > (int_32)[0]), [192])
	CALL memcpy(*($0), ($7 + [15]), [1])
	$1 = (*($0) + [1])
	*($0) = $1
	if ( $5 ){ goto $label$1 }
	$1 = *(($2 + [4]))
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $48($3, $0)
	$0 = ($0 + [12])
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [24]
	$2 = ($1 + [24])
	$6 = *($1 + [24])
	$3 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($3 - $6) / (int_32)[12]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = *($6)
	$4 = ( *($6 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ([0] - ($4 + $5))
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$6:
	$7 = ($7 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	$5 = ([0] - $7)
	$6 = ($6 + [12])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$5 }
	$5 = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	$5 = ([0] - $7)
	
.LABEL $label$4
	CALL $35($0, $5)
	$5 = *(($0 + [4]))
	$7 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	*($9 + [12]) = $7
	*($9 + [8]) = $7
	*($9 + [16]) = $5
	*($9 + [24]) = ($9 + [8])
	*($9 + [44]) = $2
	*($9 + [32]) = $1
	*($9 + [36]) = ($1 + [8])
	*($9 + [40]) = ($1 + [16])
	CALL $69(($9 + [32]), ($9 + [24]))
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [832])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [880])
	$4 = *($1)
	*(($5 = CALL $70((($7 = $6) + [16]), $1)) + [16]) = [1]
	CALL $28($5)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [944])
	*($7) = [0]
	CALL $50($7, $1)
	$5 = *($7)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $51($7, $1)
	CALL db_update_i64(*(($1 + [104])), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [128])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$2 = (*(*($0)) + int_32($6 >> [1]))
	$5 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$5 = *((*($2) + $5))
	
.LABEL $label$1
	*((($7 + [8]) + [24])) = *(($1 + [24]))
	*((($7 + [8]) + [16])) = *(($1 + [16]))
	*((($7 + [8]) + [8])) = *(($1 + [8]))
	*($7 + [8]) = *($1)
	CALL $96((($7 + [8]) + [32]), ($1 + [32]))
	*(($7 + [60])) = [0]
	*($7 + [52 align=4]) = (int_64)0
	$0 = (*(($1 + [48])) - *($1 + [44]))
	$3 = ((int_32)$0 / (int_32)[12])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = CALL $89($0)
	*((($7 + [8]) + [44])) = $6
	*(($4 = (($7 + [8]) + [48]))) = $6
	*(($7 + [60])) = ($6 + ((int_32)$3 * (int_32)[12]))
	$1 = *(($1 + [48]))
	$0 = *(($1 + [44]))
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $96($6, $0)
	$6 = (*($4) + [12])
	*($4) = $6
	$0 = ($0 + [12])
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	CALL void $2((int_32 ($7 + [8])), (int_32 $5))
	$4 = *($7 + [52])
	if ( ($4 == 0) ){ goto $label$5 }
	$1 = ($7 + [56])
	$0 = *($1)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$7 }
	$6 = ([0] - $4)
	$0 = ($0 + [-12])
	
.LOOP $label$8:
	if ( ((*($0) & [1]) == 0) ){ goto $label$9 }
	CALL $90(*(($0 + [8])))
	
.LABEL $label$9
	$0 = ($0 + [-12])
	if ( ((int_32)($0 + $6) != (int_32)[-12]) ){ goto $label$8 }
	$0 = *(($7 + [52]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $4
	
.LABEL $label$6
	*($1) = $4
	CALL $90($0)
	
.LABEL $label$5
	if ( ((*(($7 + [40])) & [1]) == 0) ){ goto $label$10 }
	CALL $90(*(($7 + [48])))
	
.LABEL $label$10
	*([0] + [4]) = ($7 + [64])
	return (unreachable)
	
.LABEL $label$2
	CALL $95(($7 + [52]))
}

void .FUNC $67 (int_64 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	CALL prints([1024])
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [800]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [1056]
	$9 = (int_64)0
	
.LOOP $label$7:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$8 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$2 = ($2 + [165])
	goto $label$9 
	
.LABEL $label$10
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$5 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [1072]
	$10 = (int_64)0
	
.LOOP $label$11:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$12 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$2 = ($2 + [165])
	goto $label$13 
	
.LABEL $label$14
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$12
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$10 = ((int_64)$5 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$11 }
	*(($11 + [16])) = *(($1 + [16]))
	*(($11 + [8])) = *(($1 + [8]))
	*($11) = *($1)
	*($11 + [24]) = [0]
	*(($11 + [28])) = [0]
	*(($11 + [32])) = [0]
	$4 = (*(($1 + [28])) - *($1 + [24]))
	$2 = ((int_32)$4 / (int_32)[12])
	if ( ($4 == 0) ){ goto $label$16 }
	if ( ((uint_32)$2 >= (uint_32)[357913942]) ){ goto $label$15 }
	$4 = CALL $89($4)
	*(($11 + [24])) = $4
	*(($11 + [28])) = $4
	*(($11 + [32])) = ($4 + ((int_32)$2 * (int_32)[12]))
	$1 = *(($1 + [28]))
	$2 = *(($1 + [24]))
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$16 }
	
.LOOP $label$17:
	CALL $96($4, $2)
	$4 = ($4 + [12])
	$2 = ($2 + [12])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	*(($11 + [28])) = $4
	
.LABEL $label$16
	*($11 + [48]) = $10
	*($11 + [40]) = $9
	*(($4 = CALL $89([16]))) = $0
	*($4 + [8]) = $7
	$2 = ($4 + [16])
	*((($11 + [40]) + [24])) = $2
	*(($11 + [60])) = $2
	*($11 + [56]) = $4
	CALL $68((($11 + [40]) + [28]), $11)
	CALL $44(($11 + [80]), ($11 + [40]))
	$4 = *($11 + [80])
	CALL send_inline($4, (*($11 + [84]) - $4))
	$4 = *($11 + [80])
	if ( ($4 == 0) ){ goto $label$18 }
	*($11 + [84]) = $4
	CALL $90($4)
	
.LABEL $label$18
	$4 = *($11 + [68])
	if ( ($4 == 0) ){ goto $label$19 }
	*(($11 + [72])) = $4
	CALL $90($4)
	
.LABEL $label$19
	$4 = *($11 + [56])
	if ( ($4 == 0) ){ goto $label$20 }
	*(($11 + [60])) = $4
	CALL $90($4)
	
.LABEL $label$20
	$1 = *($11 + [24])
	if ( ($1 == 0) ){ goto $label$21 }
	$3 = ($11 + [28])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$23 }
	$2 = ([0] - $1)
	$4 = ($4 + [-12])
	
.LOOP $label$24:
	if ( ((*($4) & [1]) == 0) ){ goto $label$25 }
	CALL $90(*(($4 + [8])))
	
.LABEL $label$25
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $2) != (int_32)[-12]) ){ goto $label$24 }
	$4 = *(($11 + [24]))
	goto $label$22 
	
.LABEL $label$23
	$4 = $1
	
.LABEL $label$22
	*($3) = $1
	CALL $90($4)
	
.LABEL $label$21
	*([0] + [4]) = ($11 + [96])
	return (unreachable)
	
.LABEL $label$15
	CALL $95(($11 + [24]))
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[12])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $90(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $5) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$7 = ($1 + ((int_32)$4 * (int_32)[12]))
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $92($6, $1)
	$6 = ($6 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$6 = *($1)
	
.LOOP $label$12:
	CALL $96($6, $7)
	$6 = (*($1) + [12])
	*($1) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-12])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $90(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $7) != (int_32)[-12]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $90($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$6 = [357913941]
	$7 = ((int_32)$7 / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$16 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$16
	$7 = ((int_32)$6 * (int_32)[12])
	$6 = CALL $89($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	CALL $96($6, $1)
	$6 = (*($7) + [12])
	*($7) = $6
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $95($0)
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($6 - $4) / (int_32)[24])
	$3 = ($5 + $1)
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$7 = ((int_32)($7 - $4) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL $89(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$7 = ($0 + [4])
	
.LOOP $label$7:
	*(($4 = ($6 + [16]))) = (int_64)0
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*($4) = [0]
	$6 = (*($7) + [24])
	*($7) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $95($0)
	
.LABEL $label$2
	$2 = ($7 + ((int_32)$6 * (int_32)[24]))
	$7 = ($7 + ((int_32)$5 * (int_32)[24]))
	$6 = $7
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$10 }
	$3 = ([0] - $4)
	$1 = ($1 + [-24])
	
.LOOP $label$11:
	*(($7 + [-24])) = *($1)
	$4 = ($1 + [12])
	*(($7 + [-12])) = *($4)
	$5 = ($1 + [8])
	*(($7 + [-16])) = *($5)
	*($5) = [0]
	*($4) = [0]
	*(($1 + [16])) = [0]
	$7 = ($7 + [-24])
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$11 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$5 = $4
	
.LABEL $label$9
	*($0) = $7
	*(($0 + [4])) = $6
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	$1 = ([0] - $5)
	$6 = ($4 + [-16])
	
.LOOP $label$13:
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL $90(*(($6 + [8])))
	
.LABEL $label$14
	$6 = ($6 + [-24])
	if ( ((int_32)($6 + $1) != (int_32)[-16]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $90($5)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($6 - $4) / (int_32)[24])
	$3 = ($5 + $1)
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$7 = ((int_32)($7 - $4) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL $89(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$7 = ($0 + [4])
	
.LOOP $label$7:
	*(($4 = ($6 + [16]))) = (int_64)0
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*($4) = [0]
	$6 = (*($7) + [24])
	*($7) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $95($0)
	
.LABEL $label$2
	$2 = ($7 + ((int_32)$6 * (int_32)[24]))
	$7 = ($7 + ((int_32)$5 * (int_32)[24]))
	$6 = $7
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$10 }
	$3 = ([0] - $4)
	$1 = ($1 + [-24])
	
.LOOP $label$11:
	*(($7 + [-24])) = *($1)
	$4 = ($1 + [12])
	*(($7 + [-12])) = *($4)
	$5 = ($1 + [8])
	*(($7 + [-16])) = *($5)
	*($5) = [0]
	*($4) = [0]
	*(($1 + [16])) = [0]
	$7 = ($7 + [-24])
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$11 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$5 = $4
	
.LABEL $label$9
	*($0) = $7
	*(($0 + [4])) = $6
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	$1 = ([0] - $5)
	$6 = ($4 + [-16])
	
.LOOP $label$13:
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL $90(*(($6 + [8])))
	
.LABEL $label$14
	$6 = ($6 + [-24])
	if ( ((int_32)($6 + $1) != (int_32)[-16]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $90($5)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*((($6 + [8]) + [24])) = *(($1 + [24]))
	*((($6 + [8]) + [16])) = *(($1 + [16]))
	*((($6 + [8]) + [8])) = *(($1 + [8]))
	*($6 + [8]) = *($1)
	CALL $96((($6 + [8]) + [32]), ($1 + [32]))
	*(($6 + [60])) = [0]
	*($6 + [52 align=4]) = (int_64)0
	$5 = (*(($1 + [48])) - *($1 + [44]))
	$2 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[357913942]) ){ goto $label$1 }
	$4 = CALL $89($5)
	*((($6 + [8]) + [44])) = $4
	*(($3 = (($6 + [8]) + [48]))) = $4
	*(($6 + [60])) = ($4 + ((int_32)$2 * (int_32)[12]))
	$1 = *(($1 + [48]))
	$5 = *(($1 + [44]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $96($4, $5)
	$4 = (*($3) + [12])
	*($3) = $4
	$5 = ($5 + [12])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	CALL $64($0, ($6 + [8]))
	$3 = *($6 + [52])
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($6 + [56])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	$4 = ([0] - $3)
	$5 = ($5 + [-12])
	
.LOOP $label$7:
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $90(*(($5 + [8])))
	
.LABEL $label$8
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $4) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($6 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$5 = $3
	
.LABEL $label$5
	*($1) = $3
	CALL $90($5)
	
.LABEL $label$4
	if ( ((*(($6 + [40])) & [1]) == 0) ){ goto $label$9 }
	CALL $90(*(($6 + [48])))
	
.LABEL $label$9
	*([0] + [4]) = ($6 + [64])
	return (unreachable)
	
.LABEL $label$1
	CALL $95(($6 + [52]))
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $33(*($1), *($0 + [16]))
	CALL $29(*($1), *($0 + [20]))
}

int_32 .FUNC $89 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9916])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9808])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9616]
	$1 = (((int_32)$2 * (int_32)[12]) + [9616])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9910]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9912])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9910]) = [1]
	$7 = ($7 << [16])
	*([0] + [9912]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9912])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9912]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9910]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9910]) = [1]
	$3 = ($3 << [16])
	*([0] + [9912]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9912])
	
.LABEL $label$8
	*([0] + [9912]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $87($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9824])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $86([1424], $0)
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$6 = *($0 + [4])
	*($1) = *(*($6))
	*($1 + [8]) = *(*($6 + [4]))
	$2 = *($0)
	*($1 + [16]) = [0]
	$3 = *($6 + [8])
	CALL $79(($1 + [64]), *($3), *($3 + [4]))
	$6 = *($6 + [12])
	CALL $80(($1 + [76]), *($6), *($6 + [4]))
	*(($6 = $5)) = [0]
	CALL $50($6, $1)
	$3 = *($6)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL $51($6, $1)
	$4 = *($1)
	*($1 + [104]) = CALL db_store_i64(*($2 + [8]), (int_64)-8272103851651112288, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [128])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $89([112])) + [64 align=4]) = (int_64)0
	*($3 + [72 align=4]) = (int_64)0
	*($3 + [80 align=4]) = (int_64)0
	*($3 + [88 align=4]) = (int_64)0
	*($3 + [96]) = [0]
	*($3 + [100]) = $1
	CALL $84(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [104])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $55(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $28($3)
	CALL $90($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $82 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$5 = (*(*($0)) + int_32($7 >> [1]))
	$6 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$6 = *((*($5) + $6))
	
.LABEL $label$1
	*($8 + [24]) = [0]
	*($8 + [16]) = (int_64)0
	$0 = (*($3 + [4]) - *($3))
	$7 = ((int_32)$0 / (int_32)[24])
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$3 }
	$0 = CALL $89($0)
	*((($8 + [16]) + [8])) = ($0 + ((int_32)$7 * (int_32)[24]))
	*($8 + [16]) = $0
	*($8 + [20]) = $0
	$3 = *(($3 + [4]))
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	*($0) = *($7)
	CALL $96(($0 + [8]), ($7 + [8]))
	$0 = ($0 + [24])
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$5 }
	*($8 + [20]) = $0
	
.LABEL $label$4
	*($8 + [8]) = [0]
	*($8) = (int_64)0
	$0 = (*($4 + [4]) - *($4))
	$7 = ((int_32)$0 / (int_32)[24])
	if ( ($0 == 0) ){ goto $label$6 }
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$0 = CALL $89($0)
	*(($8 + [8])) = ($0 + ((int_32)$7 * (int_32)[24]))
	*($8) = $0
	*($8 + [4]) = $0
	$3 = *(($4 + [4]))
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	*($0) = *($7)
	CALL $96(($0 + [8]), ($7 + [8]))
	$0 = ($0 + [24])
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$7 }
	*($8 + [4]) = $0
	
.LABEL $label$6
	CALL void $5((int_32 $1), (int_64 $2), (int_64 ($8 + [16])), (int_32 $8), (int_32 $6))
	$3 = *($8)
	if ( ($3 == 0) ){ goto $label$8 }
	$0 = *($8 + [4])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$10 }
	$7 = ([0] - $3)
	$0 = ($0 + [-16])
	
.LOOP $label$11:
	if ( ((*($0) & [1]) == 0) ){ goto $label$12 }
	CALL $90(*(($0 + [8])))
	
.LABEL $label$12
	$0 = ($0 + [-24])
	if ( ((int_32)($0 + $7) != (int_32)[-16]) ){ goto $label$11 }
	$0 = *($8)
	goto $label$9 
	
.LABEL $label$10
	$0 = $3
	
.LABEL $label$9
	*($8 + [4]) = $3
	CALL $90($0)
	
.LABEL $label$8
	$3 = *($8 + [16])
	if ( ($3 == 0) ){ goto $label$13 }
	$0 = *($8 + [20])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$15 }
	$7 = ([0] - $3)
	$0 = ($0 + [-16])
	
.LOOP $label$16:
	if ( ((*($0) & [1]) == 0) ){ goto $label$17 }
	CALL $90(*(($0 + [8])))
	
.LABEL $label$17
	$0 = ($0 + [-24])
	if ( ((int_32)($0 + $7) != (int_32)[-16]) ){ goto $label$16 }
	$0 = *($8 + [16])
	goto $label$14 
	
.LABEL $label$15
	$0 = $3
	
.LABEL $label$14
	*($8 + [20]) = $3
	CALL $90($0)
	
.LABEL $label$13
	*([0] + [4]) = ($8 + [32])
	return (unreachable)
	
.LABEL $label$3
	CALL $95(($8 + [16]))
	
.LABEL $label$2
	CALL $95($8)
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [16]) = (int_64)0
	*($7 + [24]) = [0]
	$5 = (*(($1 + [20])) - *($1 + [16]))
	$6 = ((int_32)$5 / (int_32)[24])
	$3 = *($1 + [8])
	$2 = *($1)
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = CALL $89($5)
	*((($7 + [16]) + [8])) = ($5 + ((int_32)$6 * (int_32)[24]))
	*($7 + [16]) = $5
	*($7 + [20]) = $5
	$4 = *(($1 + [20]))
	$6 = *(($1 + [16]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	*($5) = *($6)
	CALL $96(($5 + [8]), ($6 + [8]))
	$5 = ($5 + [24])
	$6 = ($6 + [24])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$4 }
	*($7 + [20]) = $5
	
.LABEL $label$3
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	$5 = (*(($1 + [32])) - *($1 + [28]))
	$6 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$1 }
	$5 = CALL $89($5)
	*(($7 + [8])) = ($5 + ((int_32)$6 * (int_32)[24]))
	*($7) = $5
	*($7 + [4]) = $5
	$4 = *(($1 + [32]))
	$6 = *(($1 + [28]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	*($5) = *($6)
	CALL $96(($5 + [8]), ($6 + [8]))
	$5 = ($5 + [24])
	$6 = ($6 + [24])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$6 }
	*($7 + [4]) = $5
	
.LABEL $label$5
	CALL $82($0, $2, $3, ($7 + [16]), $7)
	$4 = *($7)
	if ( ($4 == 0) ){ goto $label$7 }
	$5 = *($7 + [4])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$9 }
	$6 = ([0] - $4)
	$5 = ($5 + [-16])
	
.LOOP $label$10:
	if ( ((*($5) & [1]) == 0) ){ goto $label$11 }
	CALL $90(*(($5 + [8])))
	
.LABEL $label$11
	$5 = ($5 + [-24])
	if ( ((int_32)($5 + $6) != (int_32)[-16]) ){ goto $label$10 }
	$5 = *($7)
	goto $label$8 
	
.LABEL $label$9
	$5 = $4
	
.LABEL $label$8
	*($7 + [4]) = $4
	CALL $90($5)
	
.LABEL $label$7
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$12 }
	$5 = *($7 + [20])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$14 }
	$6 = ([0] - $4)
	$5 = ($5 + [-16])
	
.LOOP $label$15:
	if ( ((*($5) & [1]) == 0) ){ goto $label$16 }
	CALL $90(*(($5 + [8])))
	
.LABEL $label$16
	$5 = ($5 + [-24])
	if ( ((int_32)($5 + $6) != (int_32)[-16]) ){ goto $label$15 }
	$5 = *($7 + [16])
	goto $label$13 
	
.LABEL $label$14
	$5 = $4
	
.LABEL $label$13
	*($7 + [20]) = $4
	CALL $90($5)
	
.LABEL $label$12
	*([0] + [4]) = ($7 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $95(($7 + [16]))
	
.LABEL $label$1
	CALL $95($7)
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[24])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[24])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-16])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $90(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-24])
	if ( ((int_32)($7 + $5) != (int_32)[-16]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$7 = ($1 + ((int_32)$4 * (int_32)[24]))
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	*($6) = *($1)
	CALL $92(($6 + [8]), ($1 + [8]))
	$6 = ($6 + [24])
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$6 = ($0 + [4])
	$1 = *($6)
	
.LOOP $label$12:
	*($1) = *($7)
	CALL $96(($1 + [8]), ($7 + [8]))
	$1 = (*($6) + [24])
	*($6) = $1
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-16])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $90(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $7) != (int_32)[-16]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $90($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$1 }
	$6 = [178956970]
	$7 = ((int_32)$7 / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$16 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$16
	$7 = ((int_32)$6 * (int_32)[24])
	$6 = CALL $89($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	*($6) = *($1)
	CALL $96(($6 + [8]), ($1 + [8]))
	$6 = (*($7) + [24])
	*($7) = $6
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $95($0)
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [832])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [880])
	$4 = *($1)
	CALL $92(((*($1 + [76]) + ((int_32)*(*($3)) * (int_32)[24])) + [8]), *($3 + [4]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [944])
	*(($3 = $6)) = [0]
	CALL $50($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $51($3, $1)
	CALL db_update_i64(*(($1 + [104])), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $96($5, ($1 + [16]))
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $96(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($5 + [16])), (int_32 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $90(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $90(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($2 = CALL memcpy($0, $1, [64])) + [64 align=4]) = (int_64)0
	*(($2 + [72])) = [0]
	$0 = (*(($1 + [68])) - *($1 + [64]))
	$3 = ((int_32)$0 / (int_32)[24])
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$3 }
	$5 = CALL $89($0)
	*(($4 = ($2 + [68]))) = $5
	*(($2 + [72])) = ($5 + ((int_32)$3 * (int_32)[24]))
	*(($2 + [64])) = $5
	$3 = *(($1 + [68]))
	$0 = *(($1 + [64]))
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	*($5) = *($0)
	CALL $96(($5 + [8]), ($0 + [8]))
	$5 = (*($4) + [24])
	*($4) = $5
	$0 = ($0 + [24])
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$5 }
	
.LABEL $label$4
	*($2 + [76 align=4]) = (int_64)0
	*(($2 + [84])) = [0]
	$0 = (*(($1 + [80])) - *($1 + [76]))
	$3 = ((int_32)$0 / (int_32)[24])
	if ( ($0 == 0) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = CALL $89($0)
	*(($4 = ($2 + [80]))) = $5
	*(($2 + [84])) = ($5 + ((int_32)$3 * (int_32)[24]))
	*(($2 + [76])) = $5
	$3 = *(($1 + [80]))
	$0 = *(($1 + [76]))
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	*($5) = *($0)
	CALL $96(($5 + [8]), ($0 + [8]))
	$5 = (*($4) + [24])
	*($4) = $5
	$0 = ($0 + [24])
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$7 }
	
.LABEL $label$6
	*($2 + [88 align=4]) = (int_64)0
	*(($2 + [96])) = [0]
	$5 = (*(($1 + [92])) - *($1 + [88]))
	$0 = int_32($5 >> [5])
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((uint_32)$0 >= (uint_32)[134217728]) ){ goto $label$1 }
	$5 = CALL $89($5)
	*(($4 = ($2 + [92]))) = $5
	*(($2 + [96])) = ($5 + ($0 << [5]))
	*(($2 + [88])) = $5
	$3 = *(($1 + [92]))
	$0 = *(($1 + [88]))
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	*($5) = *($0)
	*(($5 + [8])) = *(($0 + [8]))
	CALL $96(($5 + [16]), ($0 + [16]))
	$5 = (*($4) + [32])
	*($4) = $5
	$0 = ($0 + [32])
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$8
	return $2
	
.LABEL $label$3
	CALL $95(($2 + [64]))
	
.LABEL $label$2
	CALL $95(($2 + [76]))
	
.LABEL $label$1
	CALL $95(($2 + [88]))
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [464])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [528])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $28($4)
	CALL $90($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $28($4)
	CALL $90($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [104])))
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$10 = *($1)
	$11 = *($1 + [4])
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$1 }
	$6 = ($1 + [4])
	$7 = [0]
	
.LOOP $label$2:
	$2 = $7
	$7 = ($2 + [1])
	if ( ((uint_32)$7 >= (uint_32)((int_32)($11 - $10) / (int_32)[24])) ){ goto $label$3 }
	$8 = $7
	
.LOOP $label$4:
	$11 = ($11 & [1])
	$11 = *($10 + [8])
	$10 = ($10 + ((int_32)$8 * (int_32)[24]))
	$3 = ($11 & [1])
	$11 = *($9 + [8])
	$4 = uint_32($11 >> [1])
	$9 = ($10 + ((int_32)$2 * (int_32)[24]))
	$5 = ( *(($9 + [12])) ? $4 : $3 )
	if ( ((int_32)$5 != (int_32)( *(($10 + [12])) ? uint_32($11 >> [1]) : $11 )) ){ goto $label$5 }
	$10 = ( *(($10 + [16])) ? (($10 + [8]) + [1]) : $11 )
	$11 = (($9 + [8]) + [1])
	if ( $3 ){ goto $label$7 }
	if ( ($5 == 0) ){ goto $label$6 }
	$9 = ([0] - $4)
	
.LOOP $label$8:
	if ( ((int_32)*($11) != (int_32)*($10)) ){ goto $label$5 }
	$10 = ($10 + [1])
	$11 = ($11 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ($5 == 0) ){ goto $label$6 }
	if ( CALL memcmp(( *(($9 + [16])) ? $11 : $3 ), $10, $5) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([0], [1280])
	
.LABEL $label$5
	$10 = *($1)
	$11 = *($6)
	$8 = ($8 + [1])
	if ( ($8 <= ((int_32)($11 - $10) / (int_32)[24])) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($7 <= ((int_32)($11 - $10) / (int_32)[24])) ){ goto $label$2 }
	
.LABEL $label$1
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [832])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [880])
	$4 = *($1)
	CALL $78($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [944])
	*(($3 = $6)) = [0]
	CALL $50($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $51($3, $1)
	CALL db_update_i64(*(($1 + [104])), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [832])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [880])
	$4 = *($1)
	*((($7 = $8) + [24])) = [0]
	*($7 + [16]) = (int_64)0
	*($7 + [8]) = *(*($3))
	$5 = (($7 + [8]) + [8])
	CALL $92($5, *($3 + [4]))
	$3 = ($1 + [80])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)*(($1 + [84]))) ){ goto $label$2 }
	*($6) = *($7 + [8])
	CALL $96(($6 + [8]), $5)
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $75(($1 + [76]), ($7 + [8]))
	
.LABEL $label$1
	if ( ((*(($7 + [16])) & [1]) == 0) ){ goto $label$3 }
	CALL $90(*(($7 + [24])))
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [944])
	*($7 + [8]) = [0]
	CALL $50(($7 + [8]), $1)
	$6 = *($7 + [8])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$3 = CALL malloc($6)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$4
	*($7 + [12]) = $3
	*($7 + [8]) = $3
	*($7 + [16]) = ($3 + $6)
	CALL $51(($7 + [8]), $1)
	CALL db_update_i64(*(($1 + [104])), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$6 }
	CALL free($3)
	
.LABEL $label$6
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = int_32(($2 - $1) >> [5])
	if ( ((uint_32)$3 <= (uint_32)int_32(($7 - $6) >> [5])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-16])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $90(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $5) != (int_32)[-16]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = int_32($5 >> [5])
	$5 = (*($0 + [4]) - $6)
	$7 = ($1 + $5)
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	*($6) = *($1)
	*(($6 + [8])) = *(($1 + [8]))
	CALL $92(($6 + [16]), ($1 + [16]))
	$6 = ($6 + [32])
	$1 = ($1 + [32])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$6 = ($0 + [4])
	$1 = *($6)
	
.LOOP $label$12:
	*($1) = *($7)
	*(($1 + [8])) = *(($7 + [8]))
	CALL $96(($1 + [16]), ($7 + [16]))
	$1 = (*($6) + [32])
	*($6) = $1
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-16])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $90(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $7) != (int_32)[-16]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $90($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$1 }
	$6 = [134217727]
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$16 }
	$6 = $3
	$7 = int_32($7 >> [4])
	if ( ($7 <= $3) ){ goto $label$16 }
	$6 = $7
	if ( ((uint_32)$7 >= (uint_32)[134217728]) ){ goto $label$1 }
	
.LABEL $label$16
	$7 = ($6 << [5])
	$6 = CALL $89($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	*($6) = *($1)
	*(($6 + [8])) = *(($1 + [8]))
	CALL $96(($6 + [16]), ($1 + [16]))
	$6 = (*($7) + [32])
	*($7) = $6
	$1 = ($1 + [32])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $95($0)
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [208])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $89([112])) + [64 align=4]) = (int_64)0
	*($6 + [72 align=4]) = (int_64)0
	*($6 + [80 align=4]) = (int_64)0
	*($6 + [88 align=4]) = (int_64)0
	*($6 + [96]) = [0]
	*($6 + [100]) = $0
	CALL $54(($8 + [32]), $6)
	*($6 + [104]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [104])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $55(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $28($4)
	CALL $90($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[24])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[24])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-16])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $90(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-24])
	if ( ((int_32)($7 + $5) != (int_32)[-16]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$7 = ($1 + ((int_32)$4 * (int_32)[24]))
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	*($6) = *($1)
	CALL $92(($6 + [8]), ($1 + [8]))
	$6 = ($6 + [24])
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$6 = ($0 + [4])
	$1 = *($6)
	
.LOOP $label$12:
	*($1) = *($7)
	CALL $96(($1 + [8]), ($7 + [8]))
	$1 = (*($6) + [24])
	*($6) = $1
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-16])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $90(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $7) != (int_32)[-16]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $90($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$1 }
	$6 = [178956970]
	$7 = ((int_32)$7 / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$16 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$16
	$7 = ((int_32)$6 * (int_32)[24])
	$6 = CALL $89($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	*($6) = *($1)
	CALL $96(($6 + [8]), ($1 + [8]))
	$6 = (*($7) + [24])
	*($7) = $6
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $95($0)
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($1 + [16]) = [0]
	*(($1 + [56])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($1 + [48])) = (int_64)0
	*(($7 + [16])) = (int_64)0
	*(($1 + [40])) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($7) = (int_64)0
	*($7 + [8]) = (int_64)0
	$2 = ($1 + [64])
	$3 = *($1 + [64])
	$5 = ($1 + [68])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($6 + [-16])
	
.LOOP $label$2:
	if ( ((*($6) & [1]) == 0) ){ goto $label$3 }
	CALL $90(*(($6 + [8])))
	
.LABEL $label$3
	$6 = ($6 + [-24])
	if ( ((int_32)($6 + $4) != (int_32)[-16]) ){ goto $label$2 }
	
.LABEL $label$1
	*($5) = $3
	$6 = *($0)
	CALL $79($2, *($6), *($6 + [4]))
	$2 = ($1 + [76])
	$3 = *($1 + [76])
	$5 = ($1 + [80])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$4 }
	$4 = ([0] - $3)
	$6 = ($6 + [-16])
	
.LOOP $label$5:
	if ( ((*($6) & [1]) == 0) ){ goto $label$6 }
	CALL $90(*(($6 + [8])))
	
.LABEL $label$6
	$6 = ($6 + [-24])
	if ( ((int_32)($6 + $4) != (int_32)[-16]) ){ goto $label$5 }
	
.LABEL $label$4
	*($5) = $3
	$6 = *($0 + [4])
	CALL $80($2, *($6), *($6 + [4]))
	$1 = *($1 + [88])
	$0 = ($1 + [92])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$7 }
	$4 = ([0] - $1)
	$6 = ($6 + [-16])
	
.LOOP $label$8:
	if ( ((*($6) & [1]) == 0) ){ goto $label$9 }
	CALL $90(*(($6 + [8])))
	
.LABEL $label$9
	$6 = ($6 + [-32])
	if ( ((int_32)($6 + $4) != (int_32)[-16]) ){ goto $label$8 }
	
.LABEL $label$7
	*($0) = $1
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[24])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[24])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-16])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $90(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-24])
	if ( ((int_32)($7 + $5) != (int_32)[-16]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$7 = ($1 + ((int_32)$4 * (int_32)[24]))
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	*($6) = *($1)
	CALL $92(($6 + [8]), ($1 + [8]))
	$6 = ($6 + [24])
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$6 = ($0 + [4])
	$1 = *($6)
	
.LOOP $label$12:
	*($1) = *($7)
	CALL $96(($1 + [8]), ($7 + [8]))
	$1 = (*($6) + [24])
	*($6) = $1
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-16])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $90(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $7) != (int_32)[-16]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $90($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$1 }
	$6 = [178956970]
	$7 = ((int_32)$7 / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$16 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$16
	$7 = ((int_32)$6 * (int_32)[24])
	$6 = CALL $89($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	*($6) = *($1)
	CALL $96(($6 + [8]), ($1 + [8]))
	$6 = (*($7) + [24])
	*($7) = $6
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $95($0)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((uint_32)((int_32)($6 - $5) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$2 = *($0)
	$5 = ((int_32)($5 - $2) / (int_32)[12])
	$3 = ($5 + $1)
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$2 }
	$4 = [357913941]
	$6 = ((int_32)($6 - $2) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$5 }
	$4 = ($6 << [1])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$6 = CALL $89(((int_32)$4 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	$6 = $1
	
.LOOP $label$6:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$6 }
	*(($0 + [4])) = ($5 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$4 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $95($0)
	
.LABEL $label$1
	$2 = ($6 + ((int_32)$4 * (int_32)[12]))
	$6 = ($6 + ((int_32)$5 * (int_32)[12]))
	$4 = $6
	$5 = $1
	
.LOOP $label$7:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$3 = ($6 + ((int_32)$1 * (int_32)[12]))
	$4 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$9 }
	$1 = ([0] - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$10:
	*(($6 + [-12])) = *($4)
	$5 = ($4 + [8])
	*(($6 + [-4])) = *($5)
	*($4) = [0]
	*(($4 + [4])) = [0]
	*($5) = [0]
	$6 = ($6 + [-12])
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $1) != (int_32)[-12]) ){ goto $label$10 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$5 = $4
	
.LABEL $label$8
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$11 }
	$6 = ([0] - $5)
	$4 = ($4 + [-12])
	
.LOOP $label$12:
	if ( ((*($4) & [1]) == 0) ){ goto $label$13 }
	CALL $90(*(($4 + [8])))
	
.LABEL $label$13
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $6) != (int_32)[-12]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $90($5)
	
.LABEL $label$14
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $34($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $94($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $89($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $94($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $90($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $91($7)
	return (unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	*((($5 + [72]) + [16])) = *(($1 + [16]))
	*((($5 + [72]) + [8])) = *(($1 + [8]))
	*($5 + [72]) = *($1)
	*($5 + [96]) = [0]
	*((($5 + [72]) + [28])) = [0]
	*(($5 + [104])) = [0]
	$4 = (*(($1 + [28])) - *($1 + [24]))
	$3 = ((int_32)$4 / (int_32)[12])
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$4 = CALL $89($4)
	*((($5 + [72]) + [24])) = $4
	*((($5 + [72]) + [28])) = $4
	*(($5 + [104])) = ($4 + ((int_32)$3 * (int_32)[12]))
	$2 = *(($1 + [28]))
	$3 = *(($1 + [24]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $96($4, $3)
	$4 = ($4 + [12])
	$3 = ($3 + [12])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	*(($5 + [100])) = $4
	
.LABEL $label$2
	*(($4 = (($5 + [32]) + [24]))) = *(($1 + [72]))
	*(($3 = (($5 + [32]) + [16]))) = *(($1 + [64]))
	*($5 + [32]) = *($1 + [48])
	*($5 + [40]) = *(($1 + [56]))
	*(($5 + [24])) = *($4)
	*(($5 + [16])) = *($3)
	*($5) = *($5 + [32])
	*($5 + [8]) = *($5 + [40])
	CALL $31($0, ($5 + [72]), $5)
	$2 = *($5 + [96])
	if ( ($2 == 0) ){ goto $label$4 }
	$1 = ($5 + [100])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$4 = ($4 + [-12])
	
.LOOP $label$7:
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL $90(*(($4 + [8])))
	
.LABEL $label$8
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $3) != (int_32)[-12]) ){ goto $label$7 }
	$4 = *(($5 + [96]))
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($1) = $2
	CALL $90($4)
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [112])
	return (unreachable)
	
.LABEL $label$1
	CALL $95((($5 + [72]) + [24]))
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*(*($0)) + int_32($5 >> [1]))
	$4 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$4 = *((*($3) + $4))
	
.LABEL $label$1
	*((($6 + [72]) + [16])) = *(($1 + [16]))
	*((($6 + [72]) + [8])) = *(($1 + [8]))
	*($6 + [72]) = *($1)
	*($6 + [96]) = [0]
	*((($6 + [72]) + [28])) = [0]
	*(($6 + [104])) = [0]
	$0 = (*(($1 + [28])) - *($1 + [24]))
	$5 = ((int_32)$0 / (int_32)[12])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$0 = CALL $89($0)
	*((($6 + [72]) + [24])) = $0
	*((($6 + [72]) + [28])) = $0
	*(($6 + [104])) = ($0 + ((int_32)$5 * (int_32)[12]))
	$1 = *(($1 + [28]))
	$5 = *(($1 + [24]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $96($0, $5)
	$0 = ($0 + [12])
	$5 = ($5 + [12])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$4 }
	*(($6 + [100])) = $0
	
.LABEL $label$3
	*(($0 = (($6 + [32]) + [24]))) = *(($2 + [24]))
	*(($5 = (($6 + [32]) + [16]))) = *(($2 + [16]))
	*($6 + [32]) = *($2)
	*($6 + [40]) = *(($2 + [8]))
	*(($6 + [24])) = *($0)
	*(($6 + [16])) = *($5)
	*($6) = *($6 + [32])
	*($6 + [8]) = *($6 + [40])
	CALL void $3((int_32 ($6 + [72])), (int_32 $6), (int_32 $4))
	$1 = *($6 + [96])
	if ( ($1 == 0) ){ goto $label$5 }
	$2 = ($6 + [100])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$7 }
	$5 = ([0] - $1)
	$0 = ($0 + [-12])
	
.LOOP $label$8:
	if ( ((*($0) & [1]) == 0) ){ goto $label$9 }
	CALL $90(*(($0 + [8])))
	
.LABEL $label$9
	$0 = ($0 + [-12])
	if ( ((int_32)($0 + $5) != (int_32)[-12]) ){ goto $label$8 }
	$0 = *(($6 + [96]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $1
	
.LABEL $label$6
	*($2) = $1
	CALL $90($0)
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [112])
	return (unreachable)
	
.LABEL $label$2
	CALL $95((($6 + [72]) + [24]))
}