(data (i32.const 8192) ",\00")
(data (i32.const 8194) " \00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8282) "settings already defined\00")
(data (i32.const 8307) "minimum reporters must be positive\00")
(data (i32.const 8342) "minimum limit must be non-negative\00")
(data (i32.const 8377) "minimum limit must be lower or equal than the maximum issue limit\00")
(data (i32.const 8443) "minimum limit must be lower or equal than the maximum destroy limit\00")
(data (i32.const 8511) "limit increment must be positive\00")
(data (i32.const 8544) "maximum issue limit must be non-negative\00")
(data (i32.const 8585) "maximum destroy limit must be non-negative\00")
(data (i32.const 8628) "reporter already defined\00")
(data (i32.const 8653) "reporter does not exist\00")
(data (i32.const 8677) "memo has more than 256 bytes\00")
(data (i32.const 8706) "reporting is disabled\00")
(data (i32.const 8728) "below min limit\00")
(data (i32.const 8744) "the signer is not a known reporter\00")
(data (i32.const 8779) "above max limit\00")
(data (i32.const 8795) "{\00")
(data (i32.const 8797) "version\00")
(data (i32.const 8805) "1.2\00")
(data (i32.const 8809) "etype\00")
(data (i32.const 8815) "txreport\00")
(data (i32.const 8824) "reporter\00")
(data (i32.const 8833) "from_blockchain\00")
(data (i32.const 8849) "transaction\00")
(data (i32.const 8861) "target\00")
(data (i32.const 8868) "quantity\00")
(data (i32.const 8877) "x_transfer_id\00")
(data (i32.const 8891) "memo\00")
(data (i32.const 8896) "}\n\00")
(data (i32.const 8899) "the reporter already reported the transfer\00")
(data (i32.const 8942) "transfer data doesn\'t match\00")
(data (i32.const 8970) "active\00")
(data (i32.const 8977) "issue\00")
(data (i32.const 8983) "1.1\00")
(data (i32.const 8987) "x_transfer_id already exists\00")
(data (i32.const 9016) "xtransfercomplete\00")
(data (i32.const 9034) "id\00")
(data (i32.const 9037) "missing required authority to close row\00")
(data (i32.const 9077) "amount doesn\'t exist in table\00")
(data (i32.const 9107) "x transfers are disabled\00")
(data (i32.const 9132) "retire\00")
(data (i32.const 9139) "destroy on x transfer\00")
(data (i32.const 9161) "destroy\00")
(data (i32.const 9169) "from\00")
(data (i32.const 9174) "xtransfer\00")
(data (i32.const 9184) "blockchain\00")
(data (i32.const 9195) "transfer\00")
(data (i32.const 9204) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9263) "string is too long to be a valid name\00")
(data (i32.const 9301) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9368) "character is not in allowed character set for names\00")
(data (i32.const 9420) "write\00")
(data (i32.const 9426) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9477) "error reading iterator\00")
(data (i32.const 9500) "read\00")
(data (i32.const 9505) "cannot pass end iterator to modify\00")
(data (i32.const 9540) "object passed to modify is not in multi_index\00")
(data (i32.const 9586) "cannot modify objects in table of another contract\00")
(data (i32.const 9637) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9696) "cannot create objects in table of another contract\00")
(data (i32.const 9747) "singleton does not exist\00")
(data (i32.const 9772) "cannot pass end iterator to erase\00")
(data (i32.const 9806) "cannot increment end iterator\00")
(data (i32.const 9836) "object passed to erase is not in multi_index\00")
(data (i32.const 9881) "cannot erase objects in table of another contract\00")
(data (i32.const 9931) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9984) "get\00")
(data (i32.const 9988) ".\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$1 (param i64)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "prints" (func $fimport$8 (param i32)))
(import "env" "prints_l" (func $fimport$9 (param i32 i32)))
(import "env" "printn" (func $fimport$10 (param i64)))
(import "env" "printui" (func $fimport$11 (param i64)))
(import "env" "send_inline" (func $fimport$12 (param i32 i32)))
(import "env" "has_auth" (func $fimport$13 (param i64) (result i32)))
(import "env" "eosio_exit" (func $fimport$14 (param i32)))
(import "env" "action_data_size" (func $fimport$15 (result i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "abort" (func $fimport$20))
(import "env" "printi" (func $fimport$21 (param i64)))
(import "env" "memset" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$34 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$35 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$38 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$40 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$41 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$42 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $36))
(export "_ZdlPv" (func $70))
(export "_Znwj" (func $68))
(export "_Znaj" (func $69))
(export "_ZdaPv" (func $71))
(export "_ZnwjSt11align_val_t" (func $72))
(export "_ZnajSt11align_val_t" (func $73))
(export "_ZdlPvSt11align_val_t" (func $74))
(export "_ZdaPvSt11align_val_t" (func $75))
(table $0 10 10 anyfunc)
(elem (i32.const 1) $33 $14 $9 $11 $3 $16 $31 $8 $10)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18408))
(global $global$2 i32 (i32.const 18408))


int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $91($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8196])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10004]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10008])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10004]) = [1]
	$2 = ($2 << [16])
	*([0] + [10008]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10008])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10008]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10004]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10004]) = [1]
	$3 = ($3 << [16])
	*([0] + [10008]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10008])
	
.LABEL $label$10
	*([0] + [10008]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $92 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18396])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18204]
	$3 = (((int_32)$1 * (int_32)[12]) + [18204])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $38 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $89($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9500])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $92($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $77(($2 + [64]), ($1 + [8]))
	*(($5 = (($2 + [48]) + [8]))) = *(($1 + [56]))
	*($2 + [48]) = *($1 + [48])
	$6 = *($1 + [40])
	$7 = *($1 + [32])
	$8 = *($1 + [24])
	$9 = CALL $77(($2 + [32]), ($1 + [64]))
	$1 = CALL $77(($2 + [16]), ($1 + [76]))
	*(($2 + [8])) = *($5)
	*($2) = *($2 + [48])
	CALL $67($0, $3, $4, $8, $7, $6, $2, $9, $1)
	if ( (*($1) & [1]) ){ goto $label$5 }
	if ( (*($9) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($9) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($4) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [80])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	CALL $56(*($1), ($0 + [8]))
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2 + [8]) = $0
	CALL $66(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $43 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $89($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [128]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $47(($4 + [24]), ($4 + [128]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($8)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [104])
	$1 = *($4 + [96])
	$9 = *($4 + [88])
	$10 = *($4 + [80])
	$11 = *($4 + [72])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $11), (int_64 $10), (int_64 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $92($2)
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

int_32 .FUNC $42 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $89($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9500])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $92($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $41 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $89($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = [0]
	*(($4 + [120])) = (int_64)0
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [176]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $48(($4 + [16]), ($4 + [176]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [160]) + [8]))) = *($3)
	*($4 + [160]) = *($4)
	$3 = *($6)
	*((($4 + [176]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [160])
	*($4 + [32]) = $0
	*($4 + [176]) = $0
	*($4 + [180]) = ($4 + [152])
	*($4 + [176]) = ($4 + [16])
	CALL $49(($4 + [176]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$10 }
	$2 = [1]
	if ( (*($4 + [140]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $92($2)
	$2 = [1]
	if ( ((*($4 + [140]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [148])))
	if ( ((*($4 + [128]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($4 + [128]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [72]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [136])))
	$2 = [1]
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [80])))
	$global$0 = ($4 + [192])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [192])
	return $2
}

int_32 .FUNC $40 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $89($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $46(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($8)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [104])
	$1 = *($4 + [96])
	$9 = *($4 + [88])
	$10 = *($4 + [80])
	$11 = *($4 + [72])
	$12 = *($4 + [64])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $12), (int_64 $11), (int_64 $10), (int_64 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $92($2)
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy(($3 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy(($3 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy(($3 + [40]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $77(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $77(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9500])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $56(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$6 = ($global$0 - [128])
	$global$0 = $6
	CALL require_auth(*($0))
	CALL eosio_assert(((int_64)$1 != (int_64)0), [8307])
	CALL eosio_assert([1], [8342])
	CALL eosio_assert(((uint_64)$2 <= (uint_64)$4), [8377])
	CALL eosio_assert(((uint_64)$2 <= (uint_64)$5), [8443])
	CALL eosio_assert(((int_64)$3 != (int_64)0), [8511])
	CALL eosio_assert([1], [8544])
	CALL eosio_assert([1], [8585])
	*(($6 + [120])) = [0]
	*($6 + [104]) = (int_64)-1
	*($6 + [112]) = (int_64)0
	$7 = *($0)
	*($6 + [88]) = $7
	*($6 + [96]) = $7
	$8 = [0]
	$9 = CALL db_find_i64($7, $7, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $4(($6 + [88]), $9)
	CALL eosio_assert(((int_32)*($8 + [88]) == (int_32)($6 + [88])), [9426])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9747])
	*(($9 = CALL memcpy($6, $8, [88])) + [40]) = $4
	*($9 + [16]) = $1
	*($9 + [24]) = $2
	*($9 + [32]) = $3
	*($9 + [64]) = $5
	CALL $5(($9 + [88]), $9, *($0))
	$8 = *($9 + [112])
	if ( ($8 == 0) ){ goto $label$2 }
	$10 = ($9 + [116])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($9 + [112]))
	goto $label$3 
	
.LABEL $label$4
	$6 = $8
	
.LABEL $label$3
	*($10) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$2
	$global$0 = ($9 + [128])
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [128])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [120])) = [0]
	*($2 + [104]) = (int_64)-1
	*($2 + [112]) = (int_64)0
	$3 = *($0)
	*($2 + [88]) = $3
	*($2 + [96]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $4(($2 + [88]), $5)
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)($2 + [88])), [9426])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9747])
	*(($5 = CALL memcpy($2, $4, [88])) + [8]) = $1
	CALL $5(($5 + [88]), $5, *($0))
	$4 = *($5 + [112])
	if ( ($4 == 0) ){ goto $label$2 }
	$1 = ($5 + [116])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$5 }
	$2 = *(($5 + [112]))
	goto $label$3 
	
.LABEL $label$4
	$2 = $4
	
.LABEL $label$3
	*($1) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$global$0 = ($5 + [128])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [9540])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9586])
	$1 = CALL memcpy($1, *($3), [88])
	CALL eosio_assert([1], [9637])
	*($4 + [104]) = ($4 + [82])
	*($4 + [100]) = $4
	*($4 + [96]) = $4
	CALL $54(($4 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $4, [82])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4417020450001911808) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-4417020450001911807
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$5()), [9696])
	*(($5 = CALL _Znwj([104])) + [88]) = $1
	*($5) = (int_64)0
	$5 = CALL memcpy($5, *($3), [88])
	*($4 + [120]) = (($4 + [16]) + [82])
	*($4 + [116]) = ($4 + [16])
	*($4 + [112]) = ($4 + [16])
	CALL $54(($4 + [112]), $5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4417020450001911808, $2, (int_64)-4417020450001911808, ($4 + [16]), [82])
	*($5 + [92]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4417020450001911808) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-4417020450001911807
	
.LABEL $label$1
	*($4 + [112]) = $5
	*($4 + [16]) = (int_64)-4417020450001911808
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-4417020450001911808
	*($3 + [16]) = $6
	*($4 + [112]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $53(($1 + [24]), ($4 + [112]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [112])
	*($4 + [112]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [128])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9477])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $89($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([104])) + [88]) = $0
	*($5) = (int_64)0
	CALL $52(($3 + [32]), $5)
	*($5 + [92]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-4417020450001911808
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-4417020450001911808
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $53(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $92($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $5 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$0), [9426])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $4($0, $4)
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$0), [9426])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9505])
	CALL $6($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $7($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $77(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5, int_64 $6)
{
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$7 = ($global$0 - [128])
	$global$0 = $7
	CALL require_auth(*($0))
	*(($7 + [120])) = [0]
	*($7 + [104]) = (int_64)-1
	*($7 + [112]) = (int_64)0
	$8 = *($0)
	*($7 + [88]) = $8
	*($7 + [96]) = $8
	$9 = [1]
	$10 = CALL db_find_i64($8, $8, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $4(($7 + [88]), $10) + [88]) == (int_32)($7 + [88])), [9426])
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8282])
	CALL eosio_assert(((int_64)$2 != (int_64)0), [8307])
	CALL eosio_assert([1], [8342])
	CALL eosio_assert(((uint_64)$3 <= (uint_64)$5), [8377])
	CALL eosio_assert(((uint_64)$3 <= (uint_64)$6), [8443])
	CALL eosio_assert(((int_64)$4 != (int_64)0), [8511])
	CALL eosio_assert([1], [8544])
	CALL eosio_assert([1], [8585])
	*($7) = $1
	*($7 + [8]) = [0]
	*($7 + [16]) = $2
	*($7 + [24]) = $3
	*($7 + [32]) = $4
	*($7 + [40]) = $5
	*($7 + [48]) = $5
	$3 = CALL current_time()
	*($7 + [64]) = $6
	*($7 + [72]) = $6
	*($7 + [56]) = ((uint_64)$3 / (uint_64)(int_64)500000)
	*($7 + [80]) = ((uint_64)CALL current_time() / (uint_64)(int_64)500000)
	CALL $5(($7 + [88]), $7, *($0))
	$10 = *($7 + [112])
	if ( ($10 == 0) ){ goto $label$2 }
	$11 = ($7 + [116])
	$0 = *($11)
	if ( ((int_32)$0 == (int_32)$10) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$9 = *($0)
	*($0) = [0]
	if ( ($9 == 0) ){ goto $label$6 }
	CALL _ZdlPv($9)
	
.LABEL $label$6
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($7 + [112]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $10
	
.LABEL $label$3
	*($11) = $10
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($7 + [128])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($2 + [1])
	$6 = ($1 + [1])
	$7 = *($1 + [4])
	$8 = *($1)
	$9 = ($2 + [4])
	
.LOOP $label$1:
	$10 = ($8 & [1])
	$7 = ( $7 ? uint_32(($8 & [254]) >> [1]) : $10 )
	if ( ($7 <= $4) ){ goto $label$3 }
	$11 = $4
	$13 = ($8 & [1])
	$8 = *($2)
	$8 = ( *($9) ? uint_32($8 >> [1]) : $13 )
	if ( ($8 == 0) ){ goto $label$2 }
	$7 = ($12 + $4)
	$12 = ( *(($1 + [8])) ? $6 : $10 )
	$10 = ($12 + $7)
	$11 = ($10 - $7)
	if ( ((int_32)$11 < (int_32)$8) ){ goto $label$3 }
	$14 = ( *(($2 + [8])) ? $5 : $13 )
	$13 = *($14)
	
.LOOP $label$4:
	$11 = (($11 - $8) + [1])
	if ( ($11 == 0) ){ goto $label$3 }
	$11 = CALL $84($7, $13, $11)
	if ( ($11 == 0) ){ goto $label$3 }
	if ( (CALL $85($11, $14, $8) == 0) ){ goto $label$5 }
	$7 = ($11 + [1])
	$11 = ($10 - $7)
	if ( ((int_32)$11 >= (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$3 }
	$11 = ($11 - $12)
	if ( ((int_32)$11 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = *($1)
	if ( ($8 & [1]) ){ goto $label$6 }
	$11 = uint_32($8 >> [1])
	goto $label$2 
	
.LABEL $label$6
	$11 = *(($1 + [4]))
	
.LABEL $label$2
	$8 = CALL $78($3, $1, $4, ($11 - $4), $1)
	$4 = ($0 + [4])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)*(($0 + [8]))) ){ goto $label$8 }
	CALL $77($7, $8)
	*($4) = (*($4) + [12])
	goto $label$7 
	
.LABEL $label$8
	CALL $2($0, $8)
	
.LABEL $label$7
	$4 = *($2)
	$10 = *($9)
	if ( ((*($3) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$9
	$8 = *($1)
	$7 = *(($1 + [4]))
	$13 = ( $7 ? uint_32($8 >> [1]) : ($8 & [1]) )
	if ( ((uint_32)$11 >= (uint_32)$13) ){ goto $label$10 }
	$4 = (( $10 ? uint_32($4 >> [1]) : ($4 & [1]) ) + $11)
	if ( ($4 <= $13) ){ goto $label$1 }
	
.LABEL $label$10
	$global$0 = ($3 + [16])
}

void .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)-4995815913245638656, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $12($2, $4)
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$2), [9426])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [8653])
	CALL eosio_assert($4, [9772])
	CALL eosio_assert($4, [9806])
	$4 = CALL db_next_i64(*($0 + [12]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $12($2, $4)
	
.LABEL $label$2
	CALL $15($2, $0)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9836])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9881])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9931])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_64 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$9 = ($global$0 - [384])
	$global$0 = $9
	*($9 + [328]) = $5
	*($9 + [336]) = $1
	*($9 + [320]) = $3
	*($9 + [312]) = $4
	CALL require_auth($1)
	$10 = *($7)
	if ( ($10 & [1]) ){ goto $label$2 }
	$10 = uint_32($10 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$10 = *($7 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($10 <= [257]), [8677])
	$11 = [0]
	*((($9 + [272]) + [32])) = [0]
	*($9 + [288]) = (int_64)-1
	*($9 + [296]) = (int_64)0
	$1 = *($0)
	*($9 + [272]) = $1
	*($9 + [280]) = $1
	$10 = [0]
	$12 = CALL db_find_i64($1, $1, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $4(($9 + [272]), $12)
	CALL eosio_assert(((int_32)*($10 + [88]) == (int_32)($9 + [272])), [9426])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [9747])
	CALL memcpy(($9 + [184]), $10, [88])
	CALL eosio_assert(*($9 + [192]), [8706])
	$13 = *($9 + [232])
	$14 = *($9 + [216])
	$4 = *($9 + [240])
	$3 = CALL current_time()
	$5 = *($9 + [224])
	CALL eosio_assert(((uint_64)*($6) >= (uint_64)*($9 + [208])), [8728])
	*((($9 + [144]) + [32])) = [0]
	*($9 + [160]) = (int_64)-1
	*($9 + [168]) = (int_64)0
	$1 = *($0)
	*($9 + [144]) = $1
	*($9 + [152]) = $1
	$3 = ((uint_64)$3 / (uint_64)(int_64)500000)
	$10 = CALL db_find_i64($1, $1, (int_64)-4995815913245638656, *($9 + [336]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	$11 = CALL $12(($9 + [144]), $10)
	CALL eosio_assert(((int_32)*($11 + [8]) == (int_32)($9 + [144])), [9426])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8744])
	*(($11 = ($9 + [136]))) = [0]
	*($9 + [120]) = (int_64)-1
	*($9 + [128]) = (int_64)0
	$1 = *($0)
	*($9 + [104]) = $1
	*($9 + [112]) = $1
	$10 = CALL db_find_i64($1, $1, (int_64)-3617168760265244672, *($9 + [320]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$14 }
	$12 = CALL $17(($9 + [104]), $10)
	CALL eosio_assert(((int_32)*($12 + [88]) == (int_32)($9 + [104])), [9426])
	$11 = *(($12 + [80]))
	$10 = *($12 + [76])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$15 }
	$1 = *($9 + [336])
	
.LOOP $label$16:
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$15 }
	$10 = ($10 + [8])
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$16 }
	$10 = $11
	
.LABEL $label$15
	CALL eosio_assert(((int_32)$10 == (int_32)$11), [8899])
	$10 = [0]
	if ( ((int_64)*($12 + [8]) != (int_64)*($9 + [312])) ){ goto $label$8 }
	if ( ((int_64)*($12 + [16]) != (int_64)*($9 + [328])) ){ goto $label$8 }
	CALL eosio_assert(((int_64)*(($12 + [32])) == (int_64)*($6 + [8])), [9204])
	if ( ((int_64)*($12 + [24]) != (int_64)*($6)) ){ goto $label$8 }
	$18 = ($11 & [1])
	$11 = *($2)
	$16 = ($11 & [1])
	$11 = *($12 + [40])
	$15 = uint_32($11 >> [1])
	$17 = ( *(($12 + [44])) ? $15 : $16 )
	if ( ((int_32)$17 != (int_32)( *($2 + [4]) ? uint_32($11 >> [1]) : $18 )) ){ goto $label$8 }
	$11 = (($12 + [40]) + [1])
	$18 = ( *($2 + [8]) ? ($2 + [1]) : $18 )
	if ( $16 ){ goto $label$13 }
	if ( ($17 == 0) ){ goto $label$12 }
	$16 = ([0] - $15)
	
.LOOP $label$17:
	if ( ((int_32)*($11) != (int_32)*($18)) ){ goto $label$11 }
	$18 = ($18 + [1])
	$11 = ($11 + [1])
	$16 = ($16 + [1])
	if ( $16 ){ goto $label$17 }
	goto $label$12 
	
.LABEL $label$14
	$1 = ((int_64)((int_64))(( $3 ? $4 : ((uint_64)$3 > (uint_64)$4) ) - $4) * (int_64)$14) + (int_64)$13
	$1 = ( $5 ? $1) : (uint_64)($5 <= $1) 
	CALL eosio_assert(((uint_64)*($6) <= (uint_64)$1)), [8779])
	$4 = *($0)
	*($9 + [76]) = $6
	*($9 + [80]) = $2
	*($9 + [84]) = $7
	*($9 + [88]) = $8
	*($9 + [68]) = ($9 + [312])
	*($9 + [64]) = ($9 + [320])
	*($9 + [72]) = ($9 + [328])
	*($9 + [92]) = ($9 + [336])
	*($9 + [368]) = $4
	CALL eosio_assert(((int_64)*($9 + [104]) == (int_64)CALL $fimport$5()), [9696])
	*($9 + [20]) = ($9 + [64])
	*($9 + [16]) = ($9 + [104])
	*($9 + [24]) = ($9 + [368])
	*(($10 = CALL _Znwj([104])) + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [32]) = (int_64)0
	*($10 + [40 align=4]) = (int_64)0
	*($10 + [48 align=4]) = (int_64)0
	*($10 + [56 align=4]) = (int_64)0
	*($10 + [64 align=4]) = (int_64)0
	*($10 + [72 align=4]) = (int_64)0
	*($10 + [80 align=4]) = (int_64)0
	*($10 + [88]) = ($9 + [104])
	CALL $18(($9 + [16]), $10)
	*($9 + [344]) = $10
	$4 = *($10)
	*($9 + [16]) = $4
	$8 = *($10 + [92])
	*($9 + [360]) = $8
	$18 = ($9 + [132])
	$12 = *($18)
	if ( ((uint_32)$12 >= (uint_32)*($11)) ){ goto $label$18 }
	*($12 + [8]) = $4
	*($12 + [16]) = $8
	*($9 + [344]) = [0]
	*($12) = $10
	*($18) = ($12 + [24])
	$10 = *($9 + [344])
	*($9 + [344]) = [0]
	if ( ($10 == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$18
	CALL $19(($9 + [128]), ($9 + [344]), ($9 + [16]), ($9 + [360]))
	$10 = *($9 + [344])
	*($9 + [344]) = [0]
	if ( $10 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$13
	if ( ($17 == 0) ){ goto $label$12 }
	if ( CALL $85(( *(($12 + [48])) ? $11 : $16 ), $18, $17) ){ goto $label$8 }
	
.LABEL $label$12
	$18 = ($11 & [1])
	$11 = *($7)
	$16 = ($11 & [1])
	$11 = *($12 + [52])
	$15 = uint_32($11 >> [1])
	$17 = ( *(($12 + [56])) ? $15 : $16 )
	if ( ((int_32)$17 != (int_32)( *($7 + [4]) ? uint_32($11 >> [1]) : $18 )) ){ goto $label$8 }
	$11 = (($12 + [52]) + [1])
	$18 = ( *($7 + [8]) ? ($7 + [1]) : $18 )
	if ( $16 ){ goto $label$20 }
	if ( ($17 == 0) ){ goto $label$19 }
	$10 = [0]
	$16 = ([0] - $15)
	
.LOOP $label$21:
	if ( ((int_32)*($11) != (int_32)*($18)) ){ goto $label$8 }
	$18 = ($18 + [1])
	$11 = ($11 + [1])
	$16 = ($16 + [1])
	if ( $16 ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	if ( ($17 == 0) ){ goto $label$19 }
	if ( CALL $85(( *(($12 + [60])) ? $11 : $16 ), $18, $17) ){ goto $label$8 }
	
.LABEL $label$19
	$10 = [0]
	$17 = ($11 & [1])
	$11 = *($8)
	$18 = ($11 & [1])
	$11 = *($12 + [64])
	$15 = uint_32($11 >> [1])
	$16 = ( *(($12 + [68])) ? $15 : $18 )
	if ( ((int_32)$16 != (int_32)( *($8 + [4]) ? uint_32($11 >> [1]) : $17 )) ){ goto $label$8 }
	$11 = (($12 + [64]) + [1])
	$8 = ( *($8 + [8]) ? ($8 + [1]) : $17 )
	if ( $18 ){ goto $label$10 }
	if ( ($16 == 0) ){ goto $label$9 }
	$18 = ([0] - $15)
	
.LOOP $label$22:
	if ( ((int_32)*($11) != (int_32)*($8)) ){ goto $label$11 }
	$10 = [1]
	$8 = ($8 + [1])
	$11 = ($11 + [1])
	$18 = ($18 + [1])
	if ( $18 ){ goto $label$22 }
	goto $label$8 
	
.LABEL $label$11
	$10 = [0]
	goto $label$8 
	
.LABEL $label$10
	if ( ($16 == 0) ){ goto $label$9 }
	$10 = (CALL $85(( *(($12 + [72])) ? $11 : $18 ), $8, $16) == 0)
	goto $label$8 
	
.LABEL $label$9
	$10 = [1]
	
.LABEL $label$8
	CALL eosio_assert($10, [8942])
	$1 = *($0)
	*($9 + [64]) = ($9 + [336])
	CALL eosio_assert([1], [9505])
	CALL $20(($9 + [104]), $12, $1, ($9 + [64]))
	CALL prints([8795])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8797])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8805])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8809])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8815])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8824])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL printn(*($9 + [336]))
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8833])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	$10 = *($2)
	$11 = ($10 & [1])
	CALL prints_l(( *($2 + [8]) ? ($2 + [1]) : $11 ), ( *($2 + [4]) ? uint_32($10 >> [1]) : $11 ))
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8849])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL printui(*($9 + [320]))
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8861])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL printn(*($9 + [328]))
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8868])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL $21($6)
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8877])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL printui(*($9 + [312]))
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8891])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	$10 = *($7)
	$11 = ($10 & [1])
	CALL prints_l(( *($7 + [8]) ? ($7 + [1]) : $11 ), ( *($7 + [4]) ? uint_32($10 >> [1]) : $11 ))
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8896])
	goto $label$5 
	
.LABEL $label$7
	$11 = *($10 + [76])
	if ( ($11 == 0) ){ goto $label$23 }
	*(($10 + [80])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$23
	if ( (*($10 + [64]) & [1]) ){ goto $label$28 }
	if ( (*($10 + [52]) & [1]) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	CALL _ZdlPv(*(($10 + [72])))
	if ( ((*($10 + [52]) & [1]) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL _ZdlPv(*(($10 + [60])))
	if ( (*($10 + [40]) & [1]) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	if ( ((*($10 + [40]) & [1]) == 0) ){ goto $label$24 }
	
.LABEL $label$25
	CALL _ZdlPv(*(($10 + [48])))
	
.LABEL $label$24
	CALL _ZdlPv($10)
	
.LABEL $label$6
	*(($9 + [240])) = $3
	*(($9 + [232])) = (int_64))($1 - *($6))
	CALL $5(($9 + [272]), ($9 + [184]), *($0))
	CALL prints([8795])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8797])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8805])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8809])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8815])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8824])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL printn(*($9 + [336]))
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8833])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	$10 = *($2)
	$11 = ($10 & [1])
	CALL prints_l(( *($2 + [8]) ? ($2 + [1]) : $11 ), ( *($2 + [4]) ? uint_32($10 >> [1]) : $11 ))
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8849])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL printui(*($9 + [320]))
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8861])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL printn(*($9 + [328]))
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8868])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL $21($6)
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8877])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL printui(*($9 + [312]))
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8891])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	$10 = *($7)
	$11 = ($10 & [1])
	CALL prints_l(( *($7 + [8]) ? ($7 + [1]) : $11 ), ( *($7 + [4]) ? uint_32($10 >> [1]) : $11 ))
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8896])
	
.LABEL $label$5
	$1 = *($9 + [320])
	$11 = *(($9 + [132]))
	$12 = *(($9 + [128]))
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$30 }
	
.LOOP $label$32:
	$10 = ($11 + [-24])
	$2 = *($10)
	if ( ((int_64)*($2) == (int_64)$1) ){ goto $label$31 }
	$11 = $10
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$30 }
	CALL eosio_assert(((int_32)*($2 + [88]) == (int_32)($9 + [104])), [9426])
	goto $label$29 
	
.LABEL $label$30
	$2 = [0]
	$10 = CALL db_find_i64(*($9 + [104]), *(($9 + [112])), (int_64)-3617168760265244672, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$29 }
	$2 = CALL $17(($9 + [104]), $10)
	CALL eosio_assert(((int_32)*($2 + [88]) == (int_32)($9 + [104])), [9426])
	
.LABEL $label$29
	if ( ((uint_64)*($9 + [200]) > (uint_64)(CASTING uint_64)(uint_32 int_32((*(($2 + [80])) - *($2 + [76])) >> [3]))) ){ goto $label$33 }
	$1 = *($0)
	*($9 + [16]) = [8970]
	*($9 + [20]) = CALL $86([8970])
	*($9 + [8]) = *($9 + [16])
	$4 = *(CALL $22(($9 + [64]), ($9 + [8])))
	$3 = *($9 + [184])
	*($9 + [16]) = [8977]
	*($9 + [20]) = CALL $86([8977])
	*($9) = *($9 + [16])
	$5 = *(CALL $22(($9 + [64]), $9))
	$13 = *($2 + [16])
	*((($9 + [16]) + [16])) = *(($2 + [32]))
	*($9 + [16]) = $13
	*($9 + [24]) = *($2 + [24])
	$11 = CALL $77((($9 + [16]) + [24]), $7)
	*(($12 = (($9 + [64]) + [24]))) = [0]
	*($9 + [72]) = $5
	*($9 + [64]) = $3
	*($9 + [80]) = (int_64)0
	*(($10 = CALL _Znwj([16]))) = $1
	*($10 + [8]) = $4
	*(($9 + [100])) = [0]
	$7 = ($10 + [16])
	*($12) = $7
	*(($9 + [84])) = $7
	*($9 + [80]) = $10
	*($9 + [92 align=4]) = (int_64)0
	$10 = *($11)
	$12 = ( *((($9 + [16]) + [28])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($12 + [24])
	$1 = (CASTING uint_64)(uint_32 $12)
	$12 = (($9 + [64]) + [28])
	
.LOOP $label$34:
	$10 = ($10 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$34 }
	if ( ($10 == 0) ){ goto $label$36 }
	CALL $23($12, $10)
	$12 = *(($9 + [96]))
	$10 = *(($9 + [92]))
	goto $label$35 
	
.LABEL $label$36
	$12 = [0]
	$10 = [0]
	
.LABEL $label$35
	*($9 + [372]) = $10
	*($9 + [368]) = $10
	*($9 + [376]) = $12
	CALL eosio_assert(((int_32)($12 - $10) > (int_32)[7]), [9420])
	CALL memcpy(*($9 + [372]), ($9 + [16]), [8])
	$10 = (*($9 + [372]) + [8])
	*($9 + [372]) = $10
	CALL eosio_assert(((int_32)(*($9 + [376]) - $10) > (int_32)[7]), [9420])
	CALL memcpy(*($9 + [372]), (($9 + [16]) + [8]), [8])
	$10 = (*($9 + [372]) + [8])
	*($9 + [372]) = $10
	*($9 + [344]) = *(($9 + [32]))
	CALL eosio_assert(((int_32)(*($9 + [376]) - $10) > (int_32)[7]), [9420])
	CALL memcpy(*($9 + [372]), ($9 + [344]), [8])
	*($9 + [372]) = (*($9 + [372]) + [8])
	CALL $24(($9 + [368]), $11)
	CALL $25(($9 + [368]), ($9 + [64]))
	$10 = *($9 + [368])
	CALL send_inline($10, (*($9 + [372]) - $10))
	$10 = *($9 + [368])
	if ( ($10 == 0) ){ goto $label$37 }
	*($9 + [372]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$37
	$10 = *($9 + [92])
	if ( ($10 == 0) ){ goto $label$38 }
	*(($9 + [96])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$38
	$10 = *($9 + [80])
	if ( ($10 == 0) ){ goto $label$39 }
	*(($9 + [84])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$39
	if ( ((*($9 + [40]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*(($9 + [48])))
	
.LABEL $label$40
	CALL prints([8795])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8797])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8983])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8809])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8977])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8861])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL printn(*($9 + [328]))
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8868])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL $21($6)
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8896])
	$10 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($10, [9772])
	CALL eosio_assert($10, [9806])
	$10 = CALL db_next_i64(*($2 + [92]), ($9 + [64]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$41 }
	CALL $17(($9 + [104]), $10)
	
.LABEL $label$41
	CALL $26(($9 + [104]), $2)
	$4 = *($9 + [312])
	if ( (int_64)($4 == 0) ){ goto $label$42 }
	$10 = [0]
	*((($9 + [64]) + [32])) = [0]
	*($9 + [80]) = (int_64)-1
	*($9 + [88]) = (int_64)0
	$1 = *($0)
	*($9 + [64]) = $1
	*($9 + [72]) = $1
	$11 = CALL db_find_i64($1, $1, (int_64)3794750970638893056, $4)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$44 }
	CALL eosio_assert(((int_32)*(CALL $27(($9 + [64]), $11) + [32]) == (int_32)($9 + [64])), [9426])
	goto $label$43 
	
.LABEL $label$44
	$10 = [1]
	
.LABEL $label$43
	CALL eosio_assert($10, [8987])
	$4 = *($0)
	CALL eosio_assert(((int_64)*($9 + [64]) == (int_64)CALL $fimport$5()), [9696])
	*(($10 = CALL _Znwj([48])) + [32]) = ($9 + [64])
	*($10) = *($9 + [312])
	*($10 + [8]) = *($9 + [328])
	*($10 + [16]) = *($6)
	*(($10 + [24])) = *(($6 + [8]))
	*($9 + [352]) = (($9 + [16]) + [32])
	*($9 + [348]) = ($9 + [16])
	*($9 + [344]) = ($9 + [16])
	*($9 + [360]) = ($9 + [344])
	*($9 + [372]) = ($10 + [8])
	*($9 + [368]) = $10
	*($9 + [376]) = ($10 + [16])
	CALL $28(($9 + [368]), ($9 + [360]))
	$1 = *($10)
	$2 = CALL db_store_i64(*((($9 + [64]) + [8])), (int_64)3794750970638893056, $4, $1, ($9 + [16]), [32])
	*($10 + [36]) = $2
	$11 = (($9 + [64]) + [16])
	if ( (uint_64)($1 <= *($11)) ){ goto $label$45 }
	*($11) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$45
	*($9 + [368]) = $10
	$1 = *($10)
	*($9 + [16]) = $1
	*($9 + [344]) = $2
	$12 = ($9 + [92])
	$11 = *($12)
	if ( ((uint_32)$11 >= (uint_32)*(($9 + [96]))) ){ goto $label$48 }
	*($11 + [8]) = $1
	*($11 + [16]) = $2
	*($9 + [368]) = [0]
	*($11) = $10
	*($12) = ($11 + [24])
	$10 = *($9 + [368])
	*($9 + [368]) = [0]
	if ( $10 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	CALL $29(($9 + [88]), ($9 + [368]), ($9 + [16]), ($9 + [344]))
	$10 = *($9 + [368])
	*($9 + [368]) = [0]
	if ( ($10 == 0) ){ goto $label$46 }
	
.LABEL $label$47
	CALL _ZdlPv($10)
	
.LABEL $label$46
	$2 = *($9 + [88])
	if ( ($2 == 0) ){ goto $label$42 }
	$12 = ($9 + [92])
	$10 = *($12)
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$50 }
	
.LOOP $label$51:
	$10 = ($10 + [-24])
	$11 = *($10)
	*($10) = [0]
	if ( ($11 == 0) ){ goto $label$52 }
	CALL _ZdlPv($11)
	
.LABEL $label$52
	if ( ((int_32)$2 != (int_32)$10) ){ goto $label$51 }
	$10 = *(($9 + [88]))
	goto $label$49 
	
.LABEL $label$50
	$10 = $2
	
.LABEL $label$49
	*($12) = $2
	CALL _ZdlPv($10)
	
.LABEL $label$42
	CALL prints([8795])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8797])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8805])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8809])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([9016])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8861])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL printn(*($9 + [328]))
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8192])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([9034])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [58]
	CALL prints_l(($9 + [64]), [1])
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL printui(*($9 + [312]))
	*($9 + [64]) = [34]
	CALL prints_l(($9 + [64]), [1])
	CALL prints([8896])
	
.LABEL $label$33
	CALL $30(($9 + [128]))
	$2 = *($9 + [168])
	if ( ($2 == 0) ){ goto $label$53 }
	$12 = ($9 + [172])
	$10 = *($12)
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$55 }
	
.LOOP $label$56:
	$10 = ($10 + [-24])
	$11 = *($10)
	*($10) = [0]
	if ( ($11 == 0) ){ goto $label$57 }
	CALL _ZdlPv($11)
	
.LABEL $label$57
	if ( ((int_32)$2 != (int_32)$10) ){ goto $label$56 }
	$10 = *(($9 + [168]))
	goto $label$54 
	
.LABEL $label$55
	$10 = $2
	
.LABEL $label$54
	*($12) = $2
	CALL _ZdlPv($10)
	
.LABEL $label$53
	$2 = *($9 + [296])
	if ( ($2 == 0) ){ goto $label$58 }
	$12 = ($9 + [300])
	$10 = *($12)
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$60 }
	
.LOOP $label$61:
	$10 = ($10 + [-24])
	$11 = *($10)
	*($10) = [0]
	if ( ($11 == 0) ){ goto $label$62 }
	CALL _ZdlPv($11)
	
.LABEL $label$62
	if ( ((int_32)$2 != (int_32)$10) ){ goto $label$61 }
	$10 = *(($9 + [296]))
	goto $label$59 
	
.LABEL $label$60
	$10 = $2
	
.LABEL $label$59
	*($12) = $2
	CALL _ZdlPv($10)
	
.LABEL $label$58
	$global$0 = ($9 + [384])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9477])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $89($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([104])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [80 align=4]) = (int_64)0
	*($5 + [88]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [52])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [76])
	CALL $55(($3 + [32]), ($3 + [24]))
	*($5 + [92]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $19(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $92($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [76])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [80])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( (*($1 + [64]) & [1]) ){ goto $label$15 }
	if ( (*($1 + [52]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [72])))
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [60])))
	if ( (*($1 + [40]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [128])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [120])) = [0]
	*($2 + [104]) = (int_64)-1
	*($2 + [112]) = (int_64)0
	$3 = *($0)
	*($2 + [88]) = $3
	*($2 + [96]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $4(($2 + [88]), $5)
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)($2 + [88])), [9426])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9747])
	*(($5 = CALL memcpy($2, $4, [88])) + [9]) = $1
	CALL $5(($5 + [88]), $5, *($0))
	$4 = *($5 + [112])
	if ( ($4 == 0) ){ goto $label$2 }
	$1 = ($5 + [116])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$5 }
	$2 = *(($5 + [112]))
	goto $label$3 
	
.LABEL $label$4
	$2 = $4
	
.LABEL $label$3
	*($1) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$global$0 = ($5 + [128])
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = [1]
	$5 = CALL db_find_i64($3, $3, (int_64)-4995815913245638656, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $12(($2 + [8]), $5) + [8]) == (int_32)($2 + [8])), [9426])
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8628])
	$6 = *($0)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$5()), [9696])
	*(($0 = CALL _Znwj([24])) + [8]) = ($2 + [8])
	*($0) = $1
	CALL eosio_assert([1], [9420])
	CALL memcpy(($2 + [64]), $0, [8])
	$3 = *($0)
	$5 = CALL db_store_i64(*((($2 + [8]) + [8])), (int_64)-4995815913245638656, $6, $3, ($2 + [64]), [8])
	*($0 + [12]) = $5
	$4 = ($2 + [24])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$2 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($2 + [56]) = $0
	$3 = *($0)
	*($2 + [64]) = $3
	*($2 + [52]) = $5
	$7 = ($2 + [36])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($2 + [40]))) ){ goto $label$5 }
	*($4 + [8]) = $3
	*($4 + [16]) = $5
	*($2 + [56]) = [0]
	*($4) = $0
	*($7) = ($4 + [24])
	$0 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $13(($2 + [32]), ($2 + [56]), ($2 + [64]), ($2 + [52]))
	$0 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$6 }
	$7 = ($2 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($2 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $5
	
.LABEL $label$7
	*($7) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$global$0 = ($2 + [80])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9477])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $89($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9500])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $13(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $92($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [16]) = *(*($4 + [8]))
	$5 = *($0)
	$6 = *($4 + [12])
	*(($1 + [32])) = *(($6 + [8]))
	*($1 + [24]) = *($6)
	$7 = ($1 + [40])
	CALL $79($7, *($4 + [16]))
	$8 = ($1 + [52])
	CALL $79($8, *($4 + [20]))
	$9 = ($1 + [64])
	CALL $79($9, *($4 + [24]))
	$10 = ($1 + [24])
	$11 = ($1 + [8])
	$6 = *($4 + [28])
	$12 = ($1 + [80])
	$4 = *($12)
	if ( ((int_32)$4 == (int_32)*(($1 + [84]))) ){ goto $label$2 }
	*($12) = ($4 + [8])
	*($4) = *($6)
	$12 = ($1 + [76])
	goto $label$1 
	
.LABEL $label$2
	$12 = ($1 + [76])
	CALL $61($12, $6)
	
.LABEL $label$1
	*($3 + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [36]) = $11
	*($3 + [44]) = $10
	*($3 + [48]) = $7
	*($3 + [52]) = $8
	*($3 + [56]) = $9
	*($3 + [60]) = $12
	*($3 + [32]) = $1
	$13 = ($1 + [16])
	*($3 + [40]) = $13
	CALL $62(($3 + [32]), ($3 + [8]))
	$6 = *($3 + [24])
	if ( ($6 <= [513]) ){ goto $label$4 }
	$4 = CALL $89($6)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $11
	*($3 + [32]) = $1
	*($3 + [40]) = $13
	*($3 + [44]) = $10
	*($3 + [48]) = $7
	*($3 + [52]) = $8
	*($3 + [56]) = $9
	*($3 + [60]) = $12
	CALL $63(($3 + [32]), ($3 + [24]))
	$14 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($5 + [8]), (int_64)-3617168760265244672, *(*($0 + [8])), $14, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$14 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $92($4)
	if ( (uint_64)($14 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [64])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $60(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9984])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $23($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9500])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $82($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9420])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9420])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9420])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9420])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9420])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9500])
	CALL memcpy(($2 + [14]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [8]) = ((int_32)*($2 + [14]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9500])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [9]) = ((int_32)*($2 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9500])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9500])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9500])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9500])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9500])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9500])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9500])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9500])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9500])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [14]) = *($1 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9420])
	CALL memcpy(*($0 + [4]), ($2 + [14]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [9])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9420])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9420])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9420])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9420])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9420])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9420])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9420])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9420])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9420])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9420])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [24 align=4]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $86([8192])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [8192], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	CALL $1(($3 + [16]), $2, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$5
	CALL $79($0, *($3 + [16]))
	CALL $79(($0 + [12]), (*($3 + [16]) + [12]))
	CALL $79(($0 + [24]), (*($3 + [16]) + [24]))
	CALL $79(($0 + [36]), (*($3 + [16]) + [36]))
	$5 = *($3 + [16])
	if ( ($5 == 0) ){ goto $label$6 }
	$4 = *($3 + [20])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($4 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$10
	$4 = $0
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$9 }
	$0 = *($3 + [16])
	goto $label$7 
	
.LABEL $label$8
	$0 = $5
	
.LABEL $label$7
	*($3 + [20]) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $76($3)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $58($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $81($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $81($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $76($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9984])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $59($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [9500])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$6 = ($global$0 - [256])
	$global$0 = $6
	*(($6 + [224])) = [0]
	*($6 + [208]) = (int_64)-1
	*($6 + [216]) = (int_64)0
	$7 = *($0)
	*($6 + [192]) = $7
	*($6 + [200]) = $7
	$8 = [0]
	$9 = CALL db_find_i64($7, $7, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $4(($6 + [192]), $9)
	CALL eosio_assert(((int_32)*($8 + [88]) == (int_32)($6 + [192])), [9426])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9747])
	CALL memcpy(($6 + [104]), $8, [88])
	CALL eosio_assert(*($6 + [113]), [9107])
	$10 = *($6 + [176])
	$11 = *($6 + [136])
	$7 = *($6 + [184])
	$12 = CALL current_time()
	$13 = *($6 + [168])
	$14 = *($4)
	CALL eosio_assert(((uint_64)$14 >= (uint_64)*($6 + [128])), [8728])
	$12 = ((uint_64)$12 / (uint_64)(int_64)500000)
	$7 = ((int_64)$10 + (int_64)((int_64)$11 * (int_64))(( $12 ? $7 : ((uint_64)$12 > (uint_64)$7) ) - $7))
	$13 = ( $13 ? $7) : (uint_64)($13 <= $7) 
	CALL eosio_assert(((uint_64)$14 <= (uint_64)$13)), [8779])
	$7 = *($0)
	*($6 + [32]) = [8970]
	*($6 + [36]) = CALL $86([8970])
	*($6 + [8]) = *($6 + [32])
	$10 = *(CALL $22(($6 + [64]), ($6 + [8])))
	$11 = *($6 + [104])
	*($6 + [32]) = [9132]
	*($6 + [36]) = CALL $86([9132])
	*($6) = *($6 + [32])
	$14 = *(CALL $22(($6 + [64]), $6))
	*(($6 + [24])) = [0]
	*($6 + [16]) = (int_64)0
	$8 = CALL $86([9139])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$5 }
	*($6 + [16]) = ($8 << [1])
	$9 = (($6 + [16]) | [1])
	if ( $8 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$15 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($15)
	*($6 + [16]) = ($15 | [1])
	*($6 + [24]) = $9
	*($6 + [20]) = $8
	
.LABEL $label$4
	CALL memcpy($9, [9139], $8)
	
.LABEL $label$3
	*(($9 + $8)) = [0]
	*((($6 + [32]) + [8])) = *(($4 + [8]))
	$8 = (($6 + [16]) + [8])
	*((($6 + [32]) + [24])) = *($8)
	*($8) = [0]
	*($6 + [64]) = $11
	*($6 + [72]) = $14
	*($6 + [32]) = *($4)
	*($6 + [48]) = *($6 + [16])
	*($6 + [16]) = (int_64)0
	*(($8 = CALL _Znwj([16]))) = $7
	*($8 + [8]) = $10
	*(($6 + [100])) = [0]
	$9 = ($8 + [16])
	*((($6 + [64]) + [24])) = $9
	*((($6 + [64]) + [20])) = $9
	*($6 + [80]) = $8
	*($6 + [92 align=4]) = (int_64)0
	$8 = *($6 + [48])
	$9 = ( *((($6 + [32]) + [20])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($9 + [16])
	$7 = (CASTING uint_64)(uint_32 $9)
	$15 = (($6 + [32]) + [16])
	$9 = ($6 + [92])
	
.LOOP $label$6:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	if ( ($8 == 0) ){ goto $label$8 }
	CALL $23($9, $8)
	$9 = *(($6 + [96]))
	$8 = *(($6 + [92]))
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	$8 = [0]
	
.LABEL $label$7
	*($6 + [232]) = $8
	*($6 + [240]) = $9
	$9 = ($9 - $8)
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [9420])
	CALL memcpy($8, ($6 + [32]), [8])
	*($6 + [248]) = *($6 + [40])
	CALL eosio_assert(((int_32)($9 + [-8]) > (int_32)[7]), [9420])
	CALL memcpy(($8 + [8]), ($6 + [248]), [8])
	*($6 + [236]) = ($8 + [16])
	CALL $24(($6 + [232]), $15)
	CALL $25(($6 + [232]), ($6 + [64]))
	$8 = *($6 + [232])
	CALL send_inline($8, (*($6 + [236]) - $8))
	$8 = *($6 + [232])
	if ( ($8 == 0) ){ goto $label$9 }
	*($6 + [236]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$8 = *($6 + [92])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($6 + [96])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = *($6 + [80])
	if ( ($8 == 0) ){ goto $label$11 }
	*(($6 + [84])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	if ( ((*(($6 + [48])) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($6 + [56])))
	
.LABEL $label$12
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [24])))
	
.LABEL $label$13
	*(($6 + [184])) = $12
	*(($6 + [176])) = (int_64))($13 - *($4))
	CALL $5(($6 + [192]), ($6 + [104]), *($0))
	CALL prints([8795])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8797])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [58]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8983])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8192])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8809])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [58]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([9161])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8192])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([9169])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [58]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL printn($2)
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8192])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8868])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [58]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL $21($4)
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8896])
	CALL prints([8795])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8797])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [58]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8805])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8192])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8809])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [58]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([9174])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8192])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([9184])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [58]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	$8 = *($1)
	$0 = ($8 & [1])
	CALL prints_l(( *($1 + [8]) ? ($1 + [1]) : $0 ), ( *($1 + [4]) ? uint_32($8 >> [1]) : $0 ))
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8192])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8861])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [58]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	$8 = *($3)
	$1 = ($8 & [1])
	CALL prints_l(( *($3 + [8]) ? ($3 + [1]) : $1 ), ( *($3 + [4]) ? uint_32($8 >> [1]) : $1 ))
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8192])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8868])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [58]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL $21($4)
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8192])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([9034])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [58]
	CALL prints_l(($6 + [64]), [1])
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	$8 = *($5)
	$4 = ($8 & [1])
	CALL prints_l(( *($5 + [8]) ? ($5 + [1]) : $4 ), ( *($5 + [4]) ? uint_32($8 >> [1]) : $4 ))
	*($6 + [64]) = [34]
	CALL prints_l(($6 + [64]), [1])
	CALL prints([8896])
	$1 = *($6 + [216])
	if ( ($1 == 0) ){ goto $label$14 }
	$3 = ($6 + [220])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$16 }
	
.LOOP $label$17:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$18 }
	CALL _ZdlPv($4)
	
.LABEL $label$18
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$17 }
	$8 = *(($6 + [216]))
	goto $label$15 
	
.LABEL $label$16
	$8 = $1
	
.LABEL $label$15
	*($3) = $1
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$global$0 = ($6 + [256])
	return (unreachable)
	
.LABEL $label$2
	CALL $76(($6 + [16]))
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $82($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9420])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9500])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $56(*($1), *($0 + [16]))
	CALL $56(*($1), *($0 + [20]))
	CALL $56(*($1), *($0 + [24]))
	CALL $57(*($1), *($0 + [28]))
	$global$0 = ($2 + [16])
}

void .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = *($0 + [8])
	$4 = (CASTING uint_32)(uint_64 $3)
	$5 = ((int_64)$3 & (int_64)255)
	$6 = (int_64)($5 == 0)
	if ( $6 ){ goto $label$2 }
	$3 = ((int_64)$5 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$3:
	$7 = ((int_64)$7 * (int_64)10)
	$3 = ((int_64)$3 + (int_64)-1)
	if ( ((int_64)$3 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)1
	
.LABEL $label$1
	$4 = ($4 & [255])
	$8 = ($1 - (($4 + [16]) & [496]))
	$global$0 = $8
	*(($1 = ($8 + $4))) = [0]
	$9 = *($0)
	if ( $6 ){ goto $label$4 }
	$5 = ((int_64)$5 + (int_64)1)
	$3 = ((int_64)$9 % (int_64)$7)
	$1 = ($1 + [-1])
	
.LOOP $label$5:
	$10 = ((int_64)$3 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$10 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$3 = $10
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)$5 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	CALL printi(((int_64)$9 / (int_64)$7))
	CALL prints([9988])
	CALL prints_l($8, $4)
	CALL prints([8194])
	$3 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$6 }
	$1 = [0]
	
.LOOP $label$8:
	*((($2 + [9]) + $1)) = $3
	$0 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$7 }
	$1 = $0
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	
.LABEL $label$7
	CALL prints_l(($2 + [9]), $0)
	
.LABEL $label$6
	$global$0 = ($2 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [9540])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9586])
	$6 = *($3)
	$7 = *($1)
	$8 = ($1 + [80])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)*(($1 + [84]))) ){ goto $label$2 }
	*($8) = ($3 + [8])
	*($3) = *($6)
	$8 = ($1 + [76])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [76])
	CALL $61($8, $6)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9637])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$6 = ($1 + [8])
	*($5 + [36]) = $6
	*($5 + [32]) = $1
	$9 = ($1 + [16])
	*($5 + [40]) = $9
	$10 = ($1 + [24])
	*($5 + [44]) = $10
	$11 = ($1 + [40])
	*($5 + [48]) = $11
	$12 = ($1 + [52])
	*($5 + [52]) = $12
	$13 = ($1 + [64])
	*($5 + [56]) = $13
	*($5 + [60]) = $8
	CALL $62(($5 + [32]), ($5 + [8]))
	$3 = *($5 + [24])
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $89($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $6
	*($5 + [40]) = $9
	*($5 + [44]) = $10
	*($5 + [48]) = $11
	*($5 + [52]) = $12
	*($5 + [56]) = $13
	*($5 + [60]) = $8
	*($5 + [32]) = $1
	CALL $63(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $92($4)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [64])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $82($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9263])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9368])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9301])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9368])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $23($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9420])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9420])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $51(CALL $50($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9420])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9420])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9477])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $89($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	CALL $65(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $29(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $92($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [9836])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9881])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9931])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [76])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [80])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($3 + [72])))
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($3 + [60])))
	if ( (*($3 + [40]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$16:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$17 }
	$8 = *($5 + [76])
	if ( ($8 == 0) ){ goto $label$18 }
	*(($5 + [80])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$18
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($5 + [72])))
	if ( ((*($5 + [52]) & [1]) == 0) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((*($5 + [52]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($5 + [60])))
	if ( (*($5 + [40]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$19
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$16 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [92]))
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $89($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9992])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $89($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9500])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9420])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [9420])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $67 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_64 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$9 = ($global$0 - [80])
	$global$0 = $9
	$0 = *($0 + [4])
	$10 = *($0 + [4])
	$11 = (*($0) + int_32($10 >> [1]))
	$12 = *($0)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$12 = *((*($11) + $12))
	
.LABEL $label$1
	$0 = CALL $77(($9 + [64]), $2)
	*(($10 = (($9 + [48]) + [8]))) = *(($6 + [8]))
	*($9 + [48]) = *($6)
	$6 = CALL $77(($9 + [32]), $7)
	$2 = CALL $77(($9 + [16]), $8)
	*(($9 + [8])) = *($10)
	*($9) = *($9 + [48])
	CALL void $11((int_32 $1), (int_64 $0), (int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9), (int_32 $6), (int_32 $2), (int_32 $12))
	if ( (*($2) & [1]) ){ goto $label$6 }
	if ( (*($6) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($2 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($0) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($0) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($9 + [80])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($0 + [8]))
	$global$0 = ($9 + [80])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy(($3 + [40]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9500])
	CALL memcpy(($0 + [48]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9500])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [56])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $56(*($1), ($0 + [64]))
	CALL $56(*($1), ($0 + [76]))
	$global$0 = ($2 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $82($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = *($1 + [76])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [80])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($1 + [72])))
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($1 + [60])))
	if ( (*($1 + [40]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$5
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9420])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $24(*($1), *($0 + [16]))
	CALL $24(*($1), *($0 + [20]))
	CALL $24(*($1), *($0 + [24]))
	CALL $64(*($1), *($0 + [28]))
	$global$0 = ($2 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [40])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$4 = *($3)
	$3 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$6
	$0 = *($0)
	$0 = *($0 + [28])
	$3 = *($0 + [4])
	$4 = ($3 - $0)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$8 }
	$1 = (($4 & [-8]) + $1)
	
.LABEL $label$8
	*($2) = $1
}

int_32 .FUNC $89 (int_32 $0)
{
	return CALL $90([10012], $0)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $89($1)
	
.LABEL $label$2
	*(CALL $83()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $89(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $92($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $87 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $83())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $88($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $83 ()
{
	return [9996]
}

void .FUNC $82 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $87(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9992])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $87(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $92($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $76 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $92($0)
	
.LABEL $label$1
}

int_32 .FUNC $39 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $89($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9500])
	CALL memcpy($4, $2, [1])
	$8 = *($4)
	*(($4 + [20])) = ($2 + [1])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $92($2)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	*($3 + [160]) = [9195]
	*($3 + [164]) = CALL $86([9195])
	*($3 + [80]) = *($3 + [160])
	CALL $22(($3 + [168]), ($3 + [80]))
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [1]
	*($3 + [72]) = *($3 + [152])
	CALL $37($0, $1, ($3 + [72]))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$6 }
	if ( ((int_64)$2 > (int_64)4923678603215172095) ){ goto $label$9 }
	if ( ((int_64)$2 > (int_64)-3075276126730321921) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-4995815905104494592) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4850751925528444928) ){ goto $label$6 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [2]
	*($3 + [48]) = *($3 + [104])
	CALL $38($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$9
	if ( ((int_64)$2 > (int_64)6110391473373446143) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)4923678603215172096) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)6110391470098219008) ){ goto $label$6 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [3]
	*($3 + [24]) = *($3 + [128])
	CALL $39($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-3075276126730321920) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)3626371139737660928) ){ goto $label$6 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [4]
	*($3 + [40]) = *($3 + [112])
	CALL $38($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)6110391473373446144) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$6 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [5]
	*($3 + [8]) = *($3 + [144])
	CALL $40($1, $1, ($3 + [8]))
	
.LABEL $label$6
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [100]) = [0]
	*($3 + [96]) = [6]
	*($3 + [56]) = *($3 + [96])
	CALL $41($1, $1, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$4
	*($3 + [92]) = [0]
	*($3 + [88]) = [7]
	*($3 + [64]) = *($3 + [88])
	CALL $42($1, $1, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$3
	*($3 + [140]) = [0]
	*($3 + [136]) = [8]
	*($3 + [16]) = *($3 + [136])
	CALL $43($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$2
	*($3 + [124]) = [0]
	*($3 + [120]) = [9]
	*($3 + [32]) = *($3 + [120])
	CALL $39($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $37 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $89($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $44(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $45(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $92($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $80($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9836])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9881])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9931])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $33 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [192])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	*(($5 + [184])) = [0]
	*($5 + [160]) = $2
	*($5 + [152]) = $2
	*($5 + [168]) = (int_64)-1
	*($5 + [176]) = (int_64)0
	$7 = [0]
	$8 = CALL db_find_i64($2, $2, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $4(($5 + [152]), $8)
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)($5 + [152])), [9426])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9747])
	if ( ((int_64)*($0 + [8]) != (int_64)*($7)) ){ goto $label$3 }
	$7 = CALL $77(($5 + [88]), $4)
	CALL $34(($5 + [104]), $0, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$4
	$4 = CALL $77(($5 + [72]), ($5 + [116]))
	$8 = CALL $77(($5 + [56]), ($5 + [128]))
	*(($9 = (($5 + [40]) + [8]))) = *(($3 + [8]))
	*($5 + [40]) = *($3)
	$7 = CALL $77(($5 + [24]), ($5 + [140]))
	*((($5 + [8]) + [8])) = *($9)
	*($5 + [8]) = *($5 + [40])
	CALL $35($0, $4, $1, $8, ($5 + [8]), $7)
	if ( (*($7) & [1]) ){ goto $label$9 }
	$0 = [1]
	if ( (*($8) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($7 + [8]))
	$0 = [1]
	if ( ((*($8) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( (*($4) & $0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($4) & $0) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$5
	if ( ((*(($5 + [140])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [148])))
	
.LABEL $label$10
	if ( ((*(($5 + [128])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($5 + [136])))
	
.LABEL $label$11
	if ( ((*(($5 + [116])) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($5 + [124])))
	
.LABEL $label$12
	if ( ((*($5 + [104]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($5 + [112]))
	
.LABEL $label$3
	$3 = *($5 + [176])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($5 + [180])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$16 }
	CALL _ZdlPv($7)
	
.LABEL $label$16
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$15 }
	$0 = *(($5 + [176]))
	goto $label$13 
	
.LABEL $label$14
	$0 = $3
	
.LABEL $label$13
	*($4) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($5 + [192])
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [76])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [80])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [72])))
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [60])))
	if ( (*($3 + [40]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$7
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($2 + [80])) = [0]
	*($2 + [64]) = (int_64)-1
	*($2 + [72]) = (int_64)0
	$3 = *($0)
	*($2 + [48]) = $3
	*($2 + [56]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $4(($2 + [48]), $5)
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)($2 + [48])), [9426])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9747])
	$5 = [1]
	if ( CALL has_auth(*($4)) ){ goto $label$2 }
	$5 = CALL has_auth(*($0))
	
.LABEL $label$2
	CALL eosio_assert($5, [9037])
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = [0]
	$0 = CALL db_find_i64($3, $3, (int_64)3794750970638893056, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $27(($2 + [8]), $0)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($2 + [8])), [9426])
	
.LABEL $label$3
	$0 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($0, [9077])
	CALL eosio_assert($0, [9772])
	CALL eosio_assert($0, [9806])
	$0 = CALL db_next_i64(*($4 + [36]), ($2 + [88]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	CALL $27(($2 + [8]), $0)
	
.LABEL $label$4
	CALL $32(($2 + [8]), $4)
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$5 }
	$6 = ($2 + [36])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$8 }
	$4 = *(($2 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$4 = $5
	
.LABEL $label$6
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$5 = *($2 + [72])
	if ( ($5 == 0) ){ goto $label$10 }
	$6 = ($2 + [76])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$13 }
	$4 = *(($2 + [72]))
	goto $label$11 
	
.LABEL $label$12
	$4 = $5
	
.LABEL $label$11
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$global$0 = ($2 + [96])
}