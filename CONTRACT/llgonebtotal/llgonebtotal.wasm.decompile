(data (i32.const 8192) "invalid symbol name\00")
(data (i32.const 8212) "invalid supply\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8313) "max-supply must be positive\00")
(data (i32.const 8341) "token with symbol already exists\00")
(data (i32.const 8374) "memo has more than 256 bytes\00")
(data (i32.const 8403) "token with symbol does not exist, create token before issue\00")
(data (i32.const 8463) "invalid quantity\00")
(data (i32.const 8480) "must issue positive quantity\00")
(data (i32.const 8509) "symbol precision mismatch\00")
(data (i32.const 8535) "quantity exceeds available supply\00")
(data (i32.const 8569) "tothemoonllp\00")
(data (i32.const 8582) "your transfers are temporarily frozen\00")
(data (i32.const 8620) "vip121vip121\00")
(data (i32.const 8633) "zhuchzhwjsz1\00")
(data (i32.const 8646) "eostaijiquan\00")
(data (i32.const 8659) "cannot transfer to self\00")
(data (i32.const 8683) "founders may not transfer\00")
(data (i32.const 8709) "to account does not exist\00")
(data (i32.const 8735) "unable to find key\00")
(data (i32.const 8754) "must transfer positive quantity\00")
(data (i32.const 8786) "founders may not stake\00")
(data (i32.const 8809) "you can only stake LLG\00")
(data (i32.const 8832) "must specify positive quantity\00")
(data (i32.const 8863) "no balance object found\00")
(data (i32.const 8887) "overdrawn balance\00")
(data (i32.const 8905) "New record\00")
(data (i32.const 8916) "Existing record\00")
(data (i32.const 8932) "Save history\00")
(data (i32.const 8945) "you can only unstake LLG\00")
(data (i32.const 8970) "you have no staked balance\00")
(data (i32.const 8997) "Create refund\00")
(data (i32.const 9011) "Modify refund\00")
(data (i32.const 9025) "Modify stake\00")
(data (i32.const 9038) "no refunding entry found\00")
(data (i32.const 9063) "refund not yet available - you must wait 3 days from last unstake\00")
(data (i32.const 9129) "founders may not claim dividends\00")
(data (i32.const 9162) "dividend claiming is temporarily frozen\00")
(data (i32.const 9202) "Paying out: \00")
(data (i32.const 9215) "eosio.token\00")
(data (i32.const 9227) "transfer\00")
(data (i32.const 9236) "Lelego Dividend\00")
(data (i32.const 9252) "no reserve funds\00")
(data (i32.const 9269) "Create dividend\00")
(data (i32.const 9285) "dividend\00")
(data (i32.const 9294) "can\'t find config for dividend account\00")
(data (i32.const 9333) "issuediv\00")
(data (i32.const 9342) "Update dividend\00")
(data (i32.const 9358) "this founder has already been added\00")
(data (i32.const 9394) "this founder does not exist\00")
(data (i32.const 9422) "you can only specify EOS\00")
(data (i32.const 9447) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 9511) "attempt to add asset with different symbol\00")
(data (i32.const 9554) "addition underflow\00")
(data (i32.const 9573) "addition overflow\00")
(data (i32.const 9591) "attempt to subtract asset with different symbol\00")
(data (i32.const 9639) "subtraction underflow\00")
(data (i32.const 9661) "subtraction overflow\00")
(data (i32.const 9682) "write\00")
(data (i32.const 9688) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9737) "llg4dividend\00")
(data (i32.const 9750) "llgcontract1\00")
(data (i32.const 9763) "llgfundpoool\00")
(data (i32.const 9776) "llgconfigure\00")
(data (i32.const 9789) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9840) "error reading iterator\00")
(data (i32.const 9863) "read\00")
(data (i32.const 9868) "get\00")
(data (i32.const 9872) "singleton does not exist\00")
(data (i32.const 9897) "cannot pass end iterator to modify\00")
(data (i32.const 9932) "object passed to modify is not in multi_index\00")
(data (i32.const 9978) "cannot modify objects in table of another contract\00")
(data (i32.const 10029) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10088) "cannot create objects in table of another contract\00")
(data (i32.const 10139) "object passed to erase is not in multi_index\00")
(data (i32.const 10184) "cannot erase objects in table of another contract\00")
(data (i32.const 10234) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10287) "cannot pass end iterator to erase\00")
(data (i32.const 10321) "cannot increment end iterator\00")
(data (i32.const 10351) ".\00")
(data (i32.const 10353) " \00")
(data (i32.const 10355) ",\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_store_i64" (func $fimport$4 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$7 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$8 (param i64)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "printui" (func $fimport$10 (param i64)))
(import "env" "prints" (func $fimport$11 (param i32)))
(import "env" "cancel_deferred" (func $fimport$12 (param i32) (result i32)))
(import "env" "send_deferred" (func $fimport$13 (param i32 i64 i32 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$14 (param i32)))
(import "env" "db_lowerbound_i64" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$17 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$18 (result i32)))
(import "env" "read_action_data" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "abort" (func $fimport$20))
(import "env" "db_get_i64" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$22 (param i64)))
(import "env" "prints_l" (func $fimport$23 (param i32 i32)))
(import "env" "memset" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$36 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$37 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$40 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$42 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$43 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$44 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $54))
(export "_Znwj" (func $100))
(export "_ZdlPv" (func $102))
(export "_Znaj" (func $101))
(export "_ZdaPv" (func $103))
(table $0 14 14 anyfunc)
(elem (i32.const 1) $1 $53 $47 $11 $40 $31 $28 $49 $23 $44 $52 $19 $6)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18768))
(global $global$2 i32 (i32.const 18768))


int_32 .FUNC $98 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9688])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8192])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [9863])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9868])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $37($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9863])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9688])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8192])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [9863])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [9863])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9688])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8192])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [9863])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [9863])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([10355])
	
.LABEL $label$1
	$3 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)8)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)16)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)24)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)56)
	*($2 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	
.LABEL $label$2
	$global$0 = ($2 + [16])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), $0, [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9863])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9863])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9682])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9682])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9863])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $92(*($1), ($0 + [32]))
}

void .FUNC $49 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	$0 = ($0 + [72])
	CALL $51($0, CALL $50($0, $1, [9394]))
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9840])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $110($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9863])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9863])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $97(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $113($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [4]) = [0]
	*($0) = [0]
	$5 = *($1 + [4])
	$6 = ((int_32)$5 * (int_32)[40])
	$4 = *($1)
	$7 = ($4 + $6)
	if ( ($6 == 0) ){ goto $label$4 }
	$8 = ((int_32)$6 / (int_32)[40])
	$9 = *($2)
	$6 = $4
	
.LOOP $label$5:
	$11 = (uint_64)(*($11) <= $9)
	$10 = uint_32($8 >> [1])
	$11 = ($6 + ((int_32)$10 * (int_32)[40]))
	$6 = ( ($11 + [40]) ? $6 : $11 )
	$8 = ( (($8 + [-1]) - $10) ? $10 : $11 )
	if ( $8 ){ goto $label$5 }
	$8 = ((int_32)$7 != (int_32)$6)
	if ( ($8 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = $4
	$8 = ((int_32)$7 != (int_32)$6)
	if ( $8 ){ goto $label$2 }
	
.LABEL $label$3
	*(($0 + [4])) = [1]
	goto $label$1 
	
.LABEL $label$2
	$12 = *($6)
	$9 = *($2)
	*(($0 + [4])) = (uint_64)($9 <= $12)
	if ( (uint_64)($9 <= $12) ){ goto $label$1 }
	$6 = ($4 + ((int_32)((int_32)($6 - $4) / (int_32)[40]) * (int_32)[40]))
	*($0) = $6
	*($3) = $6
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $6
	if ( ((int_32)*($1 + [8]) != (int_32)$5) ){ goto $label$6 }
	CALL $83($3, $1, ($3 + [8]), [1], $2)
	*($0) = *($3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$11 = ((int_32)($6 - $4) / (int_32)[40])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($8 = ($4 + ((int_32)$5 * (int_32)[40]))) + [8]) = *(($7 + [-32]))
	*(($8 + [32])) = *(($7 + [-8]))
	*(($8 + [24])) = *(($7 + [-16]))
	*(($8 + [16])) = *(($7 + [-24]))
	$8 = ($7 + [-40])
	*($7) = *($8)
	*(($10 = ($1 + [4]))) = (*($10) + [1])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$10 = ($8 + [-40])
	*($8) = *($10)
	*(($8 + [8])) = *(($8 + [-32]))
	*(($8 + [16])) = *(($8 + [-24]))
	*(($8 + [24])) = *(($8 + [-16]))
	*(($8 + [32])) = *(($8 + [-8]))
	$8 = $10
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$9
	*($6) = *($2)
	*(($6 + [32])) = *(($2 + [32]))
	*(($6 + [24])) = *(($2 + [24]))
	*(($6 + [16])) = *(($2 + [16]))
	*($6 + [8]) = *($2 + [8])
	goto $label$7 
	
.LABEL $label$8
	*($7) = *($2)
	*((($6 = ($4 + ((int_32)$5 * (int_32)[40]))) + [32])) = *(($2 + [32]))
	*(($6 + [24])) = *(($2 + [24]))
	*(($6 + [16])) = *(($2 + [16]))
	*($6 + [8]) = *($2 + [8])
	*(($6 = ($1 + [4]))) = (*($6) + [1])
	
.LABEL $label$7
	$6 = (*($1) + ((int_32)$11 * (int_32)[40]))
	*($3) = $6
	*($0) = $6
	$global$0 = ($3 + [16])
}

int_32 .FUNC $41 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9789])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)5455799419163115520, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $43($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9789])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$1 = ($global$0 - [176])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [9215]
	$5 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$6 }
	$6 = *($4)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$6 = ($6 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$7 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$3 = ((int_64)$3 + (int_64)4294967291)
	$5 = ((int_64)$7 | (int_64)$5)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$1 }
	*(($1 + [120])) = [0]
	*($1 + [88]) = $5
	*($1 + [104]) = (int_64)-1
	*($1 + [112]) = (int_64)0
	*($1 + [96]) = *($0 + [32])
	CALL eosio_assert([1], [9688])
	$4 = [0]
	$2 = (int_64)5459781
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $7
	$6 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [8192])
	$6 = CALL $15(($1 + [88]), (int_64)5459781, [9252])
	*(($4 = (($1 + [72]) + [8]))) = *(($6 + [8]))
	*($1 + [72]) = *($6)
	$2 = *($4)
	*(($6 = (($1 + [56]) + [8]))) = $2
	*($1 + [56]) = *($1 + [72])
	CALL eosio_assert(((int_64)$2 == (int_64)*(($0 + [176]))), [9591])
	$2 = (int_64)
	*($1 + [56]) = $2(*($1 + [56]) - *(($0 + [168]))))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9639])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [9661])
	if ( ((int_64)*($1 + [56]) > (int_64)-1) ){ goto $label$12 }
	*($6) = (int_64)1397703940
	*($1 + [56]) = (int_64)0
	
.LABEL $label$12
	CALL $36(($1 + [56]))
	$2 = CALL current_time()
	$4 = ((int_32)*(($0 + [192])) * (int_32)[40])
	$9 = ($0 + [188])
	$10 = *($9)
	$11 = ($10 + $4)
	$12 = ((int_64)((uint_64)((int_64)((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)*($0 + [64])) / (uint_64)*($0 + [48])) + (int_64)-1)
	if ( ($4 == 0) ){ goto $label$13 }
	$4 = ((int_32)$4 / (int_32)[40])
	$6 = $10
	
.LOOP $label$14:
	$13 = (uint_64)(*($13) <= $12)
	$8 = uint_32($4 >> [1])
	$13 = ($6 + ((int_32)$8 * (int_32)[40]))
	$14 = ($13 + [40])
	$6 = ( $14 ? $6 : $13 )
	$10 = ( $14 ? $10 : $13 )
	$4 = ( (($4 + [-1]) - $8) ? $8 : $13 )
	if ( $4 ){ goto $label$14 }
	
.LABEL $label$13
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$15 }
	$10 = ( $11 ? $10 : (uint_64)($12 <= *($10)) )
	
.LABEL $label$15
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$16 }
	CALL prints([9269])
	$15 = *($0 + [40])
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [9285]
	$5 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$22 }
	$6 = *($4)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [-91])
	goto $label$20 
	
.LABEL $label$22
	$7 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$7 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$17 }
	*(($1 + [48])) = [0]
	*($1 + [24]) = $5
	*($1 + [16]) = $15
	*($1 + [32]) = (int_64)-1
	*($1 + [40]) = (int_64)0
	$2 = *(CALL $41(($1 + [16]), *($0 + [16]), [9294]) + [8])
	$7 = *($1 + [56])
	CALL eosio_assert([1], [9688])
	$3 = ((uint_64)((int_64)$7 * (int_64)$2) / (uint_64)(int_64)100)
	$2 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$7 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$2 = $7
	$6 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$2 = $7
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $6 ){ goto $label$27 }
	$6 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$6 = [0]
	
.LABEL $label$23
	CALL eosio_assert($6, [8192])
	*(($4 = ($1 + [8]))) = *(($0 + [160]))
	*($1) = *($0 + [152])
	*(($1 + [152])) = (int_64)1397703940
	*(($1 + [160])) = *($1)
	*(($1 + [168])) = *($4)
	*($1 + [144]) = $3
	*($1 + [136]) = $12
	CALL $42(($1 + [128]), $9, ($1 + [136]))
	if ( ((int_64)*($1 + [56]) < (int_64)1) ){ goto $label$28 }
	$15 = *($0 + [24])
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [9285]
	$5 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$34 }
	$6 = *($4)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$6 = ($6 + [-91])
	goto $label$32 
	
.LABEL $label$34
	$7 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$7 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$29 }
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [9333]
	$12 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$40 }
	$6 = *($4)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$6 = ($6 + [-91])
	goto $label$38 
	
.LABEL $label$40
	$7 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$12 = ((int_64)$7 | (int_64)$12)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$35 }
	*($1 + [144]) = $12
	*($1 + [136]) = $15
	*(($4 = CALL _Znwj([16]))) = $15
	*($4 + [8]) = $5
	*(($1 + [172])) = [0]
	$6 = ($4 + [16])
	*(($1 + [160])) = $6
	*(($1 + [156])) = $6
	*($1 + [152]) = $4
	*($1 + [164 align=4]) = (int_64)0
	CALL $37(($1 + [164]), [16])
	$4 = *($1 + [164])
	$6 = (*(($1 + [168])) - $4)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [9682])
	CALL memcpy($4, ($1 + [56]), [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[7]), [9682])
	CALL memcpy(($4 + [8]), (($1 + [56]) + [8]), [8])
	CALL $39($1, ($1 + [136]))
	$4 = *($1)
	CALL send_inline($4, (*($1 + [4]) - $4))
	$4 = *($1)
	if ( ($4 == 0) ){ goto $label$41 }
	*($1 + [4]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$41
	$4 = *($1 + [164])
	if ( ($4 == 0) ){ goto $label$42 }
	*(($1 + [168])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$42
	$4 = *($1 + [152])
	if ( ($4 == 0) ){ goto $label$28 }
	*(($1 + [156])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$28
	$8 = *($1 + [40])
	if ( ($8 == 0) ){ goto $label$16 }
	$13 = ($1 + [44])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$44 }
	
.LOOP $label$45:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$46 }
	CALL _ZdlPv($6)
	
.LABEL $label$46
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$45 }
	$4 = *(($1 + [40]))
	goto $label$43 
	
.LABEL $label$44
	$4 = $8
	
.LABEL $label$43
	*($13) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$8 = *($1 + [112])
	if ( ($8 == 0) ){ goto $label$47 }
	$13 = ($1 + [116])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$49 }
	
.LOOP $label$50:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$51 }
	CALL _ZdlPv($6)
	
.LABEL $label$51
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$50 }
	$4 = *(($1 + [112]))
	goto $label$48 
	
.LABEL $label$49
	$4 = $8
	
.LABEL $label$48
	*($13) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$47
	$global$0 = ($1 + [176])
}

void .FUNC $47 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [9789])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)6716332328202797056, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $12($3, $6)
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [9789])
	
.LABEL $label$1
	CALL eosio_assert(($7 == 0), [9358])
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$3()), [10088])
	*(($6 = CALL _Znwj([24])) + [8]) = $3
	*($6) = $1
	CALL eosio_assert([1], [9682])
	CALL memcpy(($2 + [16]), $6, [8])
	$1 = *($6)
	$7 = CALL db_store_i64(*(($0 + [80])), (int_64)6716332328202797056, $8, $1, ($2 + [16]), [8])
	*($6 + [12]) = $7
	$5 = ($0 + [88])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$5 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($2 + [8]) = $6
	$1 = *($6)
	*($2 + [16]) = $1
	*($2 + [4]) = $7
	$4 = ($0 + [100])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [104]))) ){ goto $label$8 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($2 + [8]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $48(($0 + [96]), ($2 + [8]), ($2 + [16]), ($2 + [4]))
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($2 + [32])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [16])
	$global$0 = $4
	$6 = *($1 + [4])
	$5 = *($1)
	$7 = ($5 + ((int_32)$6 * (int_32)[40]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	$8 = *($3)
	if ( ((uint_64)$8 >= (uint_64)*($2)) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$8 = *($3)
	$9 = ($2 + [-40])
	$10 = *($9)
	if ( (uint_64)($10 <= $8) ){ goto $label$4 }
	if ( ((uint_64)$8 >= (uint_64)$10) ){ goto $label$3 }
	$11 = ($9 - $5)
	if ( ($11 == 0) ){ goto $label$6 }
	$11 = ((int_32)$11 / (int_32)[40])
	$2 = $5
	
.LOOP $label$9:
	$13 = (uint_64)(*($13) <= $8)
	$12 = uint_32($11 >> [1])
	$13 = ($2 + ((int_32)$12 * (int_32)[40]))
	$2 = ( ($13 + [40]) ? $2 : $13 )
	$11 = ( (($11 + [-1]) - $12) ? $12 : $13 )
	if ( $11 ){ goto $label$9 }
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$7
	$11 = ($7 - $2)
	if ( ($11 == 0) ){ goto $label$10 }
	$11 = ((int_32)$11 / (int_32)[40])
	
.LOOP $label$11:
	$13 = (uint_64)(*($13) <= $8)
	$12 = uint_32($11 >> [1])
	$13 = ($2 + ((int_32)$12 * (int_32)[40]))
	$2 = ( ($13 + [40]) ? $2 : $13 )
	$11 = ( (($11 + [-1]) - $12) ? $12 : $13 )
	if ( $11 ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$9 = $2
	if ( ((uint_64)$8 >= (uint_64)*($2)) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	$2 = $5
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	$9 = $2
	if ( ((uint_64)$8 >= (uint_64)*($2)) ){ goto $label$3 }
	
.LABEL $label$4
	*($4 + [8]) = $2
	if ( ((int_32)*($1 + [8]) != (int_32)$6) ){ goto $label$12 }
	CALL $83($0, $1, ($4 + [8]), [1], $3)
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$12
	$13 = ((int_32)($2 - $5) / (int_32)[40])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	*(($11 = ($5 + ((int_32)$6 * (int_32)[40]))) + [8]) = *(($7 + [-32]))
	*(($11 + [32])) = *(($7 + [-8]))
	*(($11 + [24])) = *(($7 + [-16]))
	*(($11 + [16])) = *(($7 + [-24]))
	$11 = ($7 + [-40])
	*($7) = *($11)
	*(($12 = ($1 + [4]))) = (*($12) + [1])
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$12 = ($11 + [-40])
	*($11) = *($12)
	*(($11 + [8])) = *(($11 + [-32]))
	*(($11 + [16])) = *(($11 + [-24]))
	*(($11 + [24])) = *(($11 + [-16]))
	*(($11 + [32])) = *(($11 + [-8]))
	$11 = $12
	if ( ((int_32)$2 != (int_32)$12) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = *($3)
	*(($2 + [32])) = *(($3 + [32]))
	*(($2 + [24])) = *(($3 + [24]))
	*(($2 + [16])) = *(($3 + [16]))
	*($2 + [8]) = *($3 + [8])
	goto $label$1 
	
.LABEL $label$3
	*($0) = ($5 + ((int_32)((int_32)($9 - $5) / (int_32)[40]) * (int_32)[40]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$2
	*($7) = *($3)
	*((($11 = ($5 + ((int_32)$6 * (int_32)[40]))) + [32])) = *(($3 + [32]))
	*(($11 + [24])) = *(($3 + [24]))
	*(($11 + [16])) = *(($3 + [16]))
	*($11 + [8]) = *($3 + [8])
	*(($11 = ($1 + [4]))) = (*($11) + [1])
	
.LABEL $label$1
	*($0) = (*($1) + ((int_32)$13 * (int_32)[40]))
	$global$0 = ($4 + [16])
}

int_32 .FUNC $45 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9688])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8192])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [9688])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $3
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$1 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [8192])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8192])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [8192])
	return $0
}

void .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_64 $16
	$1 = ($global$0 - [192])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [9215]
	$5 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$6 }
	$6 = *($4)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$6 = ($6 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$7 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$3 = ((int_64)$3 + (int_64)4294967291)
	$5 = ((int_64)$7 | (int_64)$5)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$1 }
	*(($1 + [104])) = [0]
	*($1 + [72]) = $5
	*($1 + [88]) = (int_64)-1
	*($1 + [96]) = (int_64)0
	*($1 + [80]) = *($0 + [32])
	CALL eosio_assert([1], [9688])
	$4 = [0]
	$2 = (int_64)5459781
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $7
	$6 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [8192])
	$6 = CALL $15(($1 + [72]), (int_64)5459781, [9252])
	*(($4 = (($1 + [56]) + [8]))) = *(($6 + [8]))
	*($1 + [56]) = *($6)
	$2 = *($4)
	*(($6 = (($1 + [40]) + [8]))) = $2
	*($1 + [40]) = *($1 + [56])
	CALL eosio_assert(((int_64)$2 == (int_64)*(($0 + [176]))), [9591])
	$9 = (int_64)
	*($1 + [40]) = $9(*($1 + [40]) - *(($0 + [168]))))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9639])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [9661])
	if ( ((int_64)$9 > (int_64)-1) ){ goto $label$12 }
	*($6) = (int_64)1397703940
	$9 = (int_64)0
	*($1 + [40]) = (int_64)0
	
.LABEL $label$12
	$2 = CALL current_time()
	$4 = ((int_32)*(($0 + [192])) * (int_32)[40])
	$10 = ($0 + [188])
	$11 = *($10)
	$12 = ($11 + $4)
	$13 = ((int_64)((uint_64)((int_64)((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)*($0 + [64])) / (uint_64)*($0 + [48])) + (int_64)-1)
	if ( ($4 == 0) ){ goto $label$13 }
	$4 = ((int_32)$4 / (int_32)[40])
	$6 = $11
	
.LOOP $label$14:
	$14 = (uint_64)(*($14) <= $13)
	$8 = uint_32($4 >> [1])
	$14 = ($6 + ((int_32)$8 * (int_32)[40]))
	$15 = ($14 + [40])
	$6 = ( $15 ? $6 : $14 )
	$11 = ( $15 ? $11 : $14 )
	$4 = ( (($4 + [-1]) - $8) ? $8 : $14 )
	if ( $4 ){ goto $label$14 }
	
.LABEL $label$13
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$15 }
	$11 = ( $12 ? $11 : (uint_64)($13 <= *($11)) )
	
.LABEL $label$15
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$16 }
	CALL prints([9342])
	$16 = *($0 + [40])
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [9285]
	$5 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$22 }
	$6 = *($4)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [-91])
	goto $label$20 
	
.LABEL $label$22
	$7 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$7 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$17 }
	*(($1 + [32])) = [0]
	*($1 + [8]) = $5
	*($1) = $16
	*($1 + [16]) = (int_64)-1
	*($1 + [24]) = (int_64)0
	$2 = *(CALL $41($1, *($0 + [16]), [9294]) + [8])
	CALL eosio_assert([1], [9688])
	$3 = ((uint_64)((int_64)$9 * (int_64)$2) / (uint_64)(int_64)100)
	$2 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$7 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$2 = $7
	$6 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$2 = $7
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $6 ){ goto $label$27 }
	$6 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$6 = [0]
	
.LABEL $label$23
	CALL eosio_assert($6, [8192])
	$4 = ((int_32)*(($0 + [192])) * (int_32)[40])
	$11 = *(($0 + [188]))
	$12 = ($11 + $4)
	if ( ($4 == 0) ){ goto $label$28 }
	$4 = ((int_32)$4 / (int_32)[40])
	$6 = $11
	
.LOOP $label$29:
	$14 = (uint_64)(*($14) <= $13)
	$8 = uint_32($4 >> [1])
	$14 = ($6 + ((int_32)$8 * (int_32)[40]))
	$15 = ($14 + [40])
	$6 = ( $15 ? $6 : $14 )
	$11 = ( $15 ? $11 : $14 )
	$4 = ( (($4 + [-1]) - $8) ? $8 : $14 )
	if ( $4 ){ goto $label$29 }
	
.LABEL $label$28
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$31 }
	if ( ((uint_64)$13 >= (uint_64)*($11)) ){ goto $label$30 }
	
.LABEL $label$31
	*(($4 = (($1 + [152]) + [24]))) = (int_64)0
	*(($6 = (($1 + [152]) + [16]))) = (int_64)0
	*(($8 = ($1 + [160]))) = (int_64)0
	*($1 + [152]) = (int_64)0
	CALL $45(($1 + [152]))
	*((($1 + [112]) + [16])) = *($8)
	*((($1 + [112]) + [24])) = *($6)
	*(($1 + [144])) = *($4)
	*($1 + [112]) = $13
	*($1 + [120]) = *($1 + [152])
	CALL $46(($1 + [184]), $10, $11, ($1 + [112]))
	$11 = *($1 + [184])
	$9 = *($1 + [40])
	
.LABEL $label$30
	CALL eosio_assert(((int_64)1397703940 == (int_64)*(($11 + [16]))), [9511])
	$2 = ((int_64)*($11 + [8]) + (int_64)$3)
	*($11 + [8]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9554])
	CALL eosio_assert(((int_64)*($11 + [8]) < (int_64)4611686018427387904), [9573])
	if ( ((int_64)$9 < (int_64)1) ){ goto $label$32 }
	$9 = *($0 + [24])
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [9285]
	$5 = (int_64)0
	
.LOOP $label$33:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$38 }
	$6 = *($4)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$6 = ($6 + [-91])
	goto $label$36 
	
.LABEL $label$38
	$7 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$37
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$34
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$7 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$33 }
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [9333]
	$13 = (int_64)0
	
.LOOP $label$39:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$44 }
	$6 = *($4)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$6 = ($6 + [-91])
	goto $label$42 
	
.LABEL $label$44
	$7 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$43
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$41
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$40
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$13 = ((int_64)$7 | (int_64)$13)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$39 }
	*($1 + [120]) = $13
	*($1 + [112]) = $9
	*(($4 = CALL _Znwj([16]))) = $9
	*($4 + [8]) = $5
	*(($1 + [148])) = [0]
	$6 = ($4 + [16])
	*(($1 + [136])) = $6
	*(($1 + [132])) = $6
	*($1 + [128]) = $4
	*($1 + [140 align=4]) = (int_64)0
	CALL $37(($1 + [140]), [16])
	$4 = *($1 + [140])
	$6 = (*(($1 + [144])) - $4)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [9682])
	CALL memcpy($4, ($1 + [40]), [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[7]), [9682])
	CALL memcpy(($4 + [8]), (($1 + [40]) + [8]), [8])
	CALL $39(($1 + [152]), ($1 + [112]))
	$4 = *($1 + [152])
	CALL send_inline($4, (*($1 + [156]) - $4))
	$4 = *($1 + [152])
	if ( ($4 == 0) ){ goto $label$45 }
	*($1 + [156]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$45
	$4 = *($1 + [140])
	if ( ($4 == 0) ){ goto $label$46 }
	*(($1 + [144])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$46
	$4 = *($1 + [128])
	if ( ($4 == 0) ){ goto $label$32 }
	*(($1 + [132])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$32
	$8 = *($1 + [24])
	if ( ($8 == 0) ){ goto $label$16 }
	$14 = ($1 + [28])
	$4 = *($14)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$48 }
	
.LOOP $label$49:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$50 }
	CALL _ZdlPv($6)
	
.LABEL $label$50
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$49 }
	$4 = *(($1 + [24]))
	goto $label$47 
	
.LABEL $label$48
	$4 = $8
	
.LABEL $label$47
	*($14) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$8 = *($1 + [96])
	if ( ($8 == 0) ){ goto $label$51 }
	$14 = ($1 + [100])
	$4 = *($14)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$53 }
	
.LOOP $label$54:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$55 }
	CALL _ZdlPv($6)
	
.LABEL $label$55
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$54 }
	$4 = *(($1 + [96]))
	goto $label$52 
	
.LABEL $label$53
	$4 = $8
	
.LABEL $label$52
	*($14) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$51
	$global$0 = ($1 + [192])
}

void .FUNC $8 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $37($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $38(($4 + [72]), ($4 + [64]))
	CALL $39(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $107(($4 + [8]))
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9840])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $110($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([32])
	$6 = CALL $98($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $10(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $113($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $6 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [224])
	$global$0 = $4
	$5 = [0]
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	$8 = $7)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8192])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [8374])
	$10 = [0]
	*((($4 + [88]) + [32])) = [0]
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	$8 = *($0)
	*($4 + [88]) = $8
	*($4 + [96]) = $7
	$11 = [0]
	$5 = CALL db_find_i64($8, $7, (int_64)-4157508551318700032, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $2(($4 + [88]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [88])), [9789])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8403])
	CALL require_auth(*($11 + [32]))
	$12 = ($11 + [32])
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $9
	$10 = [1]
	$13 = $5
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $9
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$13 = ($5 + [1])
	$5 = $13
	if ( $10 ){ goto $label$13 }
	$10 = [1]
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	
.LABEL $label$9
	CALL eosio_assert($10, [8463])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8480])
	CALL eosio_assert(((int_64)$6 == (int_64)*($11 + [8])), [8509])
	CALL eosio_assert(((int_64)$8 <= (int_64))(*($11 + [16]) - *($11))), [8535])
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [88])), [9932])
	CALL eosio_assert(((int_64)*($4 + [88]) == (int_64)CALL $fimport$3()), [9978])
	$7 = *($11 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [9511])
	$8 = ((int_64)*($11) + (int_64)$8)
	*($11) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9554])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [9573])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$8) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [10029])
	*($4 + [192]) = (($4 + [128]) + [40])
	*($4 + [188]) = ($4 + [128])
	*($4 + [184]) = ($4 + [128])
	*($4 + [200]) = ($4 + [184])
	*($4 + [212]) = ($11 + [16])
	*($4 + [208]) = $11
	*($4 + [216]) = $12
	CALL $4(($4 + [208]), ($4 + [200]))
	CALL db_update_i64(*($11 + [44]), (int_64)0, ($4 + [128]), [40])
	$5 = (($4 + [88]) + [16])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$14 }
	*($5) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$14
	$9 = *(($2 + [8]))
	*((($4 + [72]) + [8])) = $9
	$8 = *($12)
	$7 = *($2)
	*((($4 + [8]) + [8])) = $9
	*($4 + [72]) = $7
	*($4 + [8]) = $7
	CALL $7($0, $8, ($4 + [8]), $8)
	$7 = *($12)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$15 }
	$9 = *($0)
	$8 = (int_64)6
	
.LOOP $label$16:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$16 }
	*(($10 = (($4 + [24]) + [24]))) = *(($2 + [8]))
	*($4 + [32]) = $1
	*($4 + [24]) = $7
	*($4 + [40]) = *($2)
	CALL $105(($4 + [56]), $3)
	*(($5 = CALL _Znwj([16]))) = $7
	*($5 + [8]) = (int_64)3617214756542218240
	*((($4 + [128]) + [24])) = *($10)
	$10 = (($4 + [24]) + [40])
	*(($11 = (($4 + [128]) + [40]))) = *($10)
	*($10) = [0]
	*($4 + [208]) = $5
	$5 = ($5 + [16])
	*($4 + [216]) = $5
	*($4 + [212]) = $5
	*($4 + [128]) = *($4 + [24])
	*($4 + [136]) = *($4 + [32])
	*($4 + [144]) = *($4 + [40])
	*($4 + [160]) = *($4 + [56])
	*($4 + [56]) = (int_64)0
	CALL $8($9, (int_64)-3617168760277827584, ($4 + [208]), ($4 + [128]))
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$17
	$5 = *($4 + [208])
	if ( ($5 == 0) ){ goto $label$18 }
	*($4 + [212]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$15
	$11 = *($4 + [112])
	if ( ($11 == 0) ){ goto $label$19 }
	$13 = ($4 + [116])
	$5 = *($13)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$10 = *($5)
	*($5) = [0]
	if ( ($10 == 0) ){ goto $label$23 }
	CALL _ZdlPv($10)
	
.LABEL $label$23
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($4 + [112]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $11
	
.LABEL $label$20
	*($13) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$global$0 = ($4 + [224])
}

void .FUNC $7 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = [0]
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$6 = *($0)
	*($4 + [8]) = $6
	$7 = *($2 + [8])
	*($4 + [16]) = $1
	$0 = CALL db_find_i64($6, $1, (int_64)3607749779137757184, (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $9(($4 + [8]), $0)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [8])), [9789])
	CALL eosio_assert([1], [9897])
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [8])), [9932])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$3()), [9978])
	$1 = *($5 + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [9511])
	$7 = ((int_64)*($5) + (int_64)*($2))
	*($5) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9554])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [9573])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8)), [10029])
	CALL eosio_assert([1], [9682])
	CALL memcpy(($4 + [64]), $5, [8])
	CALL eosio_assert([1], [9682])
	CALL memcpy((($4 + [64]) | [8]), ($5 + [8]), [8])
	CALL db_update_i64(*($5 + [20]), (int_64)0, ($4 + [64]), [16])
	$5 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$3 }
	*($5) = ((int_64)$1 + (int_64)1)
	$8 = *($4 + [32])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$6 == (int_64)CALL $fimport$3()), [10088])
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($9) = (int_64)0
	CALL eosio_assert([1], [9688])
	$10 = ($9 + [8])
	$1 = (int_64)5462355
	
.LOOP $label$6:
	$11 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$1 = $7
	$11 = [1]
	$0 = $5
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$0 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $0 ){ goto $label$8 }
	$11 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$6 }
	
.LABEL $label$5
	CALL eosio_assert($11, [8192])
	*($9 + [16]) = ($4 + [8])
	*(($5 = ($9 + [8]))) = *(($2 + [8]))
	*($9) = *($2)
	CALL eosio_assert([1], [9682])
	CALL memcpy(($4 + [64]), $9, [8])
	CALL eosio_assert([1], [9682])
	CALL memcpy((($4 + [64]) | [8]), $10, [8])
	$1 = (uint_64)*($5) >> (uint_64)(int_64)8
	$0 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3607749779137757184, $3, $1), ($4 + [64]), [16]
	*($9 + [20]) = $0)
	$8 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$9 }
	*($8) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$9
	*($4 + [56]) = $9
	$1 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($4 + [64]) = $1)
	*($4 + [52]) = $0
	$8 = ($4 + [36])
	$5 = *($8)
	if ( ((uint_32)$5 >= (uint_32)*(($4 + [40]))) ){ goto $label$11 }
	*($5 + [8]) = $1
	*($5 + [16]) = $0
	*($4 + [56]) = [0]
	*($5) = $9
	*($8) = ($5 + [24])
	$5 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( $5 ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$11
	CALL $10(($4 + [32]), ($4 + [56]), ($4 + [64]), ($4 + [52]))
	$5 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$8 = *($4 + [32])
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$9 = ($4 + [36])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	CALL _ZdlPv($0)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($4 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $8
	
.LABEL $label$12
	*($9) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9840])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $110($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([56])
	CALL $3($5)
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $91(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $5(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $113($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $3 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9688])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8192])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [9688])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $3
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$1 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [8192])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8192])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [8192])
	return $0
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8192])
	$9 = [0]
	$11 = *($2)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$7 = $6
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$10 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [8212])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [8313])
	*((($3 + [8]) + [32])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$7 = *($0)
	*($3 + [8]) = $7
	*($3 + [16]) = $6
	$4 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $2(($3 + [8]), $4) + [40]) == (int_32)($3 + [8])), [9789])
	$4 = [0]
	goto $label$11 
	
.LABEL $label$12
	$4 = [1]
	
.LABEL $label$11
	CALL eosio_assert($4, [8341])
	$8 = *($0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [10088])
	$4 = CALL _Znwj([56])
	CALL $3($4)
	*($4 + [40]) = ($3 + [8])
	*($4 + [8]) = $5
	*($4 + [32]) = $1
	*($4 + [16]) = *($2)
	*(($4 + [24])) = *(($2 + [8]))
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($4 + [16])
	*($3 + [112]) = $4
	*($3 + [120]) = ($4 + [32])
	CALL $4(($3 + [112]), ($3 + [104]))
	$7 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	$10 = CALL db_store_i64(*((($3 + [8]) + [8])), (int_64)-4157508551318700032, $8, $7), ($3 + [48]), [40]
	*($4 + [44]) = $10)
	$9 = (($3 + [8]) + [16])
	if ( (uint_64)($7 <= *($9)) ){ goto $label$13 }
	*($9) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$13
	*($3 + [112]) = $4
	$7 = (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8
	*($3 + [48]) = $7)
	*($3 + [88]) = $10
	$2 = ($3 + [36])
	$9 = *($2)
	if ( ((uint_32)$9 >= (uint_32)*(($3 + [40]))) ){ goto $label$16 }
	*($9 + [8]) = $7
	*($9 + [16]) = $10
	*($3 + [112]) = [0]
	*($9) = $4
	*($2) = ($9 + [24])
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $5(($3 + [32]), ($3 + [112]), ($3 + [48]), ($3 + [88]))
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$10 = *($3 + [32])
	if ( ($10 == 0) ){ goto $label$17 }
	$2 = ($3 + [36])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$21 }
	CALL _ZdlPv($9)
	
.LABEL $label$21
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$20 }
	$4 = *(($3 + [32]))
	goto $label$18 
	
.LABEL $label$19
	$4 = $10
	
.LABEL $label$18
	*($2) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$global$0 = ($3 + [128])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [144])
	$global$0 = $3
	*((($3 + [88]) + [32])) = [0]
	*($3 + [96]) = $1
	*($3 + [104]) = (int_64)-1
	*($3 + [112]) = (int_64)0
	*($3 + [88]) = *($0)
	$4 = *($2 + [8])
	$5 = CALL $15(($3 + [88]), (uint_64)$4 >> (uint_64)(int_64)8), [8863])
	*((($3 + [48]) + [32])) = [0]
	*($3 + [56]) = $1
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	$6 = *($0)
	*($3 + [48]) = $6
	$7 = (int_64)0
	$8 = CALL db_find_i64($6, $1, (int_64)-4157661383434960896, (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$8) < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $16(($3 + [48]), $8)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)($3 + [48])), [9789])
	$7 = *($8)
	
.LABEL $label$1
	*((($3 + [8]) + [32])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$6 = *($0)
	*($3 + [8]) = $6
	$9 = *(($0 + [8]))
	*($3 + [16]) = $1
	$0 = CALL db_find_i64($6, $1, (int_64)-5001342339331915776, (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $17(($3 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)($3 + [8])), [9789])
	$7 = ((int_64)*($0) + (int_64)$7)
	
.LABEL $label$2
	$7 = *($2)
	CALL eosio_assert(((uint_64)(int_64))(*($5) - $7) >= (uint_64)$7), [8887])
	if ( ((int_64)$7 != (int_64)*($5)) ){ goto $label$5 }
	CALL $18(($3 + [88]), $5)
	$2 = *($3 + [32])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($3 + [88])), [9932])
	CALL eosio_assert(((int_64)*($3 + [88]) == (int_64)CALL $fimport$3()), [9978])
	$6 = *($5 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)$6), [9591])
	$7 = (int_64)
	*($5) = $7(*($5) - $7))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9639])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [9661])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8)), [10029])
	CALL eosio_assert([1], [9682])
	CALL memcpy(($3 + [128]), $5, [8])
	CALL eosio_assert([1], [9682])
	CALL memcpy((($3 + [128]) | [8]), ($5 + [8]), [8])
	CALL db_update_i64(*($5 + [20]), $1, ($3 + [128]), [16])
	$5 = (($3 + [88]) + [16])
	if ( (uint_64)($7 <= *($5)) ){ goto $label$6 }
	*($5) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$6
	$2 = *($3 + [32])
	if ( ($2 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = ($3 + [36])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	$5 = *(($3 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	*($8) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$2 = *($3 + [72])
	if ( ($2 == 0) ){ goto $label$11 }
	$8 = ($3 + [76])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	CALL _ZdlPv($0)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($3 + [72]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $2
	
.LABEL $label$12
	*($8) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$2 = *($3 + [112])
	if ( ($2 == 0) ){ goto $label$16 }
	$8 = ($3 + [116])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$20 }
	CALL _ZdlPv($0)
	
.LABEL $label$20
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$19 }
	$5 = *(($3 + [112]))
	goto $label$17 
	
.LABEL $label$18
	$5 = $2
	
.LABEL $label$17
	*($8) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$global$0 = ($3 + [144])
}

int_32 .FUNC $15 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9789])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $9($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9789])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [9840])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $110($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [12]) = $7
	*($3 + [8]) = $7
	*($3 + [16]) = ($7 + $6)
	*(($9 = CALL _Znwj([48])) + [8]) = (int_64)1398362884
	*($9) = (int_64)0
	CALL eosio_assert([1], [9688])
	$10 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$10 = $11
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$10 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [8192])
	*($9 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($9 + [16])
	*($3 + [32]) = $9
	*($3 + [40]) = ($9 + [24])
	CALL $93(($3 + [32]), ($3 + [24]))
	*($9 + [36]) = $1
	*($3 + [24]) = $9
	$10 = (uint_64)*(($9 + [8])) >> (uint_64)(int_64)8
	*($3 + [32]) = $10)
	*($3 + [4]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $10
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $21($8, ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $113($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [48])
	return $9
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9840])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $110($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([40])
	$6 = CALL $94($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [28])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $24(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $113($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$5 = ($global$0 - [112])
	$global$0 = $5
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8569]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$11 = ($11 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$9 != (int_64)$1), [8582])
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8620]
	$9 = (int_64)0
	
.LOOP $label$5:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$6 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$11 = ($11 + [-91])
	goto $label$7 
	
.LABEL $label$8
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$6
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$5 }
	CALL eosio_assert(((int_64)$9 != (int_64)$1), [8582])
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8633]
	$9 = (int_64)0
	
.LOOP $label$9:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$10 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$11 = ($11 + [-91])
	goto $label$11 
	
.LABEL $label$12
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$9 }
	CALL eosio_assert(((int_64)$9 != (int_64)$1), [8582])
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8646]
	$9 = (int_64)0
	
.LOOP $label$13:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$14 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$11 = ($11 + [-91])
	goto $label$15 
	
.LABEL $label$16
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$14
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$13 }
	CALL eosio_assert(((int_64)$9 != (int_64)$1), [8582])
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8659])
	$12 = ($0 + [72])
	$11 = *(($0 + [100]))
	$13 = *(($0 + [96]))
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$18 }
	
.LOOP $label$20:
	$8 = ($11 + [-24])
	$14 = *($8)
	if ( ((int_64)*($14) == (int_64)$1) ){ goto $label$19 }
	$11 = $8
	if ( ((int_32)$13 != (int_32)$8) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*($14 + [8]) == (int_32)$12), [9789])
	goto $label$17 
	
.LABEL $label$18
	$14 = [0]
	$8 = CALL db_find_i64(*($12), *(($0 + [80])), (int_64)6716332328202797056, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$17 }
	$14 = CALL $12($12, $8)
	CALL eosio_assert(((int_32)*($14 + [8]) == (int_32)$12), [9789])
	
.LABEL $label$17
	CALL eosio_assert(($14 == 0), [8683])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$7($2), [8709])
	$10 = *($3 + [8])
	$11 = [0]
	*(($5 + [104])) = [0]
	$6 = (uint_64)$10 >> (uint_64)(int_64)8
	*($5 + [80]) = $6)
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($0)
	$13 = CALL $13(($5 + [72]), $6, [8735])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$21 }
	$8 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$6 = $7
	$11 = [1]
	$14 = $8
	$8 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$6 = $7
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$14 = ($8 + [1])
	$8 = $14
	if ( $11 ){ goto $label$25 }
	$11 = [1]
	$8 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$11 = [0]
	
.LABEL $label$21
	CALL eosio_assert($11, [8463])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [8754])
	CALL eosio_assert(((int_64)$10 == (int_64)*($13 + [8])), [8509])
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$27 }
	$8 = uint_32($8 >> [1])
	goto $label$26 
	
.LABEL $label$27
	$8 = *($4 + [4])
	
.LABEL $label$26
	CALL eosio_assert(($8 <= [257]), [8374])
	$8 = ($3 + [8])
	$7 = *($8)
	*((($5 + [56]) + [8])) = $7
	$6 = *($3)
	*((($5 + [24]) + [8])) = $7
	*($5 + [24]) = $6
	*($5 + [56]) = $6
	CALL $14($0, $1, ($5 + [24]))
	$7 = *($8)
	*((($5 + [40]) + [8])) = $7
	$6 = *($3)
	*((($5 + [8]) + [8])) = $7
	*($5 + [8]) = $6
	*($5 + [40]) = $6
	CALL $7($0, $2, ($5 + [8]), $1)
	$14 = *($5 + [96])
	if ( ($14 == 0) ){ goto $label$28 }
	$13 = ($5 + [100])
	$8 = *($13)
	if ( ((int_32)$8 == (int_32)$14) ){ goto $label$30 }
	
.LOOP $label$31:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$32 }
	CALL _ZdlPv($11)
	
.LABEL $label$32
	if ( ((int_32)$14 != (int_32)$8) ){ goto $label$31 }
	$8 = *(($5 + [96]))
	goto $label$29 
	
.LABEL $label$30
	$8 = $14
	
.LABEL $label$29
	*($13) = $14
	CALL _ZdlPv($8)
	
.LABEL $label$28
	$global$0 = ($5 + [112])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9840])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $110($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9863])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $48(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $113($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [9789])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $2($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [9789])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9682])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9682])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9682])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $77(CALL $78($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [10139])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10184])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10234])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL require_auth($1)
	$4 = ($0 + [72])
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$4), [9789])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [80])), (int_64)6716332328202797056, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $12($4, $7)
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$4), [9789])
	
.LABEL $label$1
	CALL eosio_assert(($8 == 0), [8786])
	$7 = [0]
	$9 = *($2 + [8])
	$10 = (uint_64)$9 >> (uint_64)(int_64)8
	$11 = $10)
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$11 = $12
	$6 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$11 = $12
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$8 = ($7 + [1])
	$7 = $8
	if ( $6 ){ goto $label$9 }
	$6 = [1]
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	
.LABEL $label$5
	CALL eosio_assert($6, [8192])
	CALL eosio_assert(((int_64)$9 == (int_64)*($0 + [8])), [8809])
	$12 = *($2)
	CALL eosio_assert(((int_64)$12 > (int_64)0), [8832])
	*((($3 + [128]) + [32])) = [0]
	*($3 + [136]) = $1
	*($3 + [144]) = (int_64)-1
	*($3 + [152]) = (int_64)0
	*($3 + [128]) = *($0)
	$7 = CALL $15(($3 + [128]), $10, [8863])
	*((($3 + [88]) + [32])) = [0]
	*($3 + [96]) = $1
	*($3 + [104]) = (int_64)-1
	*($3 + [112]) = (int_64)0
	$11 = *($0)
	*($3 + [88]) = $11
	$6 = CALL db_find_i64($11, $1, (int_64)-4157661383434960896, (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$6) < (int_32)[0]) ){ goto $label$11 }
	$6 = CALL $16(($3 + [88]), $6)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($3 + [88])), [9789])
	$11 = *($6)
	$4 = $6
	goto $label$10 
	
.LABEL $label$11
	$6 = [0]
	$4 = [0]
	$11 = (int_64)0
	
.LABEL $label$10
	*((($3 + [48]) + [32])) = [0]
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	$10 = *($0)
	*($3 + [48]) = $10
	$13 = *(($0 + [8]))
	*($3 + [56]) = $1
	$8 = CALL db_find_i64($10, $1, (int_64)-5001342339331915776, (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_32)$8) < (int_32)[0]) ){ goto $label$12 }
	$8 = CALL $17(($3 + [48]), $8)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($3 + [48])), [9789])
	$11 = ((int_64)*($8) + (int_64)$11)
	
.LABEL $label$12
	CALL eosio_assert(((uint_64)(int_64))(*($7) - $11) >= (uint_64)$12), [8887])
	$10 = ((uint_64)((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)*($0 + [64])) / (uint_64)*($0 + [48]))
	CALL printui($10)
	if ( ($6 == 0) ){ goto $label$17 }
	CALL prints([8916])
	if ( ((uint_64)*($4 + [24]) >= (uint_64)$10) ){ goto $label$14 }
	if ( ((uint_64)*($4 + [16]) >= (uint_64)$10) ){ goto $label$14 }
	CALL prints([8932])
	*(($3 + [32])) = [0]
	*($3 + [8]) = $1
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$13 = *($0)
	*($3) = $13
	CALL eosio_assert(((int_64)$13 == (int_64)CALL $fimport$3()), [10088])
	*(($2 = CALL _Znwj([40])) + [8]) = (int_64)1398362884
	*($2) = (int_64)0
	CALL eosio_assert([1], [9688])
	$14 = ($2 + [8])
	$11 = (int_64)5462355
	$7 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$1 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$11 = $1
	$8 = [1]
	$5 = $7
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$15 
	
.LABEL $label$19
	$11 = $1
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $8 ){ goto $label$20 }
	$8 = [1]
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$15 
	
.LABEL $label$17
	CALL prints([8905])
	CALL eosio_assert(((int_64)*($3 + [88]) == (int_64)CALL $fimport$3()), [10088])
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)1398362884
	*($5) = (int_64)0
	CALL eosio_assert([1], [9688])
	$11 = (int_64)5462355
	$7 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$13 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$11 = $13
	$6 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$11 = $13
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$8 = ($7 + [1])
	$7 = $8
	if ( $6 ){ goto $label$25 }
	$6 = [1]
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$6 = [0]
	
.LABEL $label$21
	CALL eosio_assert($6, [8192])
	*($5 + [32]) = ($3 + [88])
	*($5 + [16]) = $10
	*($5 + [24]) = $10
	*(($7 = ($5 + [8]))) = *(($2 + [8]))
	*($5) = *($2)
	*($3 + [176]) = ($3 + [32])
	*($3 + [172]) = $3
	*($3 + [168]) = $3
	*($3 + [184]) = ($3 + [168])
	*($3 + [196]) = ($5 + [16])
	*($3 + [192]) = $5
	*($3 + [200]) = ($5 + [24])
	CALL $20(($3 + [192]), ($3 + [184]))
	$11 = (uint_64)*($7) >> (uint_64)(int_64)8
	$6 = CALL db_store_i64(*((($3 + [88]) + [8])), (int_64)-4157661383434960896, $1, $11), $3, [32]
	*($5 + [36]) = $6)
	$8 = (($3 + [88]) + [16])
	if ( (uint_64)($11 <= *($8)) ){ goto $label$26 }
	*($8) = ((int_64)$11 + (int_64)1)
	
.LABEL $label$26
	*($3 + [192]) = $5
	$11 = (uint_64)*($7) >> (uint_64)(int_64)8
	*($3) = $11)
	*($3 + [168]) = $6
	$8 = ($3 + [116])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*((($3 + [88]) + [32]))) ){ goto $label$28 }
	*($7 + [8]) = $11
	*($7 + [16]) = $6
	*($3 + [192]) = [0]
	*($7) = $5
	*($8) = ($7 + [24])
	$7 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( $7 ){ goto $label$27 }
	goto $label$13 
	
.LABEL $label$28
	CALL $21(($3 + [112]), ($3 + [192]), $3, ($3 + [168]))
	$7 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( ($7 == 0) ){ goto $label$13 }
	
.LABEL $label$27
	CALL _ZdlPv($7)
	goto $label$13 
	
.LABEL $label$16
	$8 = [0]
	
.LABEL $label$15
	CALL eosio_assert($8, [8192])
	*($2 + [24]) = $3
	*(($2 + [8])) = *(($4 + [8]))
	*($2) = *($4)
	*($2 + [16]) = *(($4 + [16]))
	CALL eosio_assert([1], [9682])
	CALL memcpy(($3 + [192]), $2, [8])
	CALL eosio_assert([1], [9682])
	CALL memcpy((($3 + [192]) | [8]), $14, [8])
	CALL eosio_assert([1], [9682])
	$7 = ($2 + [16])
	CALL memcpy((($3 + [192]) + [16]), $7, [8])
	$11 = *($2 + [16])
	$8 = CALL db_store_i64(*(($3 + [8])), (int_64)7760153368969871360, $13, $11, ($3 + [192]), [24])
	*($2 + [28]) = $8
	$5 = ($3 + [16])
	if ( (uint_64)($11 <= *($5)) ){ goto $label$29 }
	*($5) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$29
	*($3 + [168]) = $2
	$11 = *($7)
	*($3 + [192]) = $11
	*($3 + [184]) = $8
	$5 = ($3 + [28])
	$7 = *($5)
	if ( ((uint_32)$7 >= (uint_32)*(($3 + [32]))) ){ goto $label$32 }
	*($7 + [8]) = $11
	*($7 + [16]) = $8
	*($3 + [168]) = [0]
	*($7) = $2
	*($5) = ($7 + [24])
	$7 = *($3 + [168])
	*($3 + [168]) = [0]
	if ( $7 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	CALL $22(($3 + [24]), ($3 + [168]), ($3 + [192]), ($3 + [184]))
	$7 = *($3 + [168])
	*($3 + [168]) = [0]
	if ( ($7 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL _ZdlPv($7)
	
.LABEL $label$30
	$5 = *($3 + [24])
	if ( ($5 == 0) ){ goto $label$14 }
	$2 = ($3 + [28])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$34 }
	
.LOOP $label$35:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$36 }
	CALL _ZdlPv($8)
	
.LABEL $label$36
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$35 }
	$7 = *(($3 + [24]))
	goto $label$33 
	
.LABEL $label$34
	$7 = $5
	
.LABEL $label$33
	*($2) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$14
	CALL eosio_assert([1], [9897])
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($3 + [88])), [9932])
	CALL eosio_assert(((int_64)*($3 + [88]) == (int_64)CALL $fimport$3()), [9978])
	$11 = *($6 + [8])
	CALL eosio_assert(((int_64)$9 == (int_64)$11), [9511])
	$1 = ((int_64)*($6) + (int_64)$12)
	*($6) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9554])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [9573])
	*($6 + [16]) = $10
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$11) == (int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8)), [10029])
	*($3 + [176]) = ($3 + [32])
	*($3 + [172]) = $3
	*($3 + [168]) = $3
	*($3 + [184]) = ($3 + [168])
	*($3 + [196]) = ($6 + [16])
	*($3 + [192]) = $4
	*($3 + [200]) = ($6 + [24])
	CALL $20(($3 + [192]), ($3 + [184]))
	CALL db_update_i64(*($6 + [36]), (int_64)0, $3, [32])
	$7 = (($3 + [88]) + [16])
	if ( (uint_64)($11 <= *($7)) ){ goto $label$13 }
	*($7) = ((int_64)$11 + (int_64)1)
	
.LABEL $label$13
	CALL eosio_assert(((int_64)$9 == (int_64)*(($0 + [160]))), [9511])
	$11 = ((int_64)*($0 + [152]) + (int_64)$12)
	*($0 + [152]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [9554])
	CALL eosio_assert(((int_64)*($0 + [152]) < (int_64)4611686018427387904), [9573])
	$8 = *($3 + [72])
	if ( ($8 == 0) ){ goto $label$37 }
	$0 = ($3 + [76])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$39 }
	
.LOOP $label$40:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$41 }
	CALL _ZdlPv($6)
	
.LABEL $label$41
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$40 }
	$7 = *(($3 + [72]))
	goto $label$38 
	
.LABEL $label$39
	$7 = $8
	
.LABEL $label$38
	*($0) = $8
	CALL _ZdlPv($7)
	
.LABEL $label$37
	$8 = *($3 + [112])
	if ( ($8 == 0) ){ goto $label$42 }
	$0 = ($3 + [116])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$44 }
	
.LOOP $label$45:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$46 }
	CALL _ZdlPv($6)
	
.LABEL $label$46
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$45 }
	$7 = *(($3 + [112]))
	goto $label$43 
	
.LABEL $label$44
	$7 = $8
	
.LABEL $label$43
	*($0) = $8
	CALL _ZdlPv($7)
	
.LABEL $label$42
	$8 = *($3 + [152])
	if ( ($8 == 0) ){ goto $label$47 }
	$0 = ($3 + [156])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$49 }
	
.LOOP $label$50:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$51 }
	CALL _ZdlPv($6)
	
.LABEL $label$51
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$50 }
	$7 = *(($3 + [152]))
	goto $label$48 
	
.LABEL $label$49
	$7 = $8
	
.LABEL $label$48
	*($0) = $8
	CALL _ZdlPv($7)
	
.LABEL $label$47
	$global$0 = ($3 + [224])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $110($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9863])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $113($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $110($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9688])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8192])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $69(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $113($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $70(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $50 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [8]) == (int_32)$0), [9789])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)6716332328202797056, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $12($0, $4)
	CALL eosio_assert(((int_32)*($5 + [8]) == (int_32)$0), [9789])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [10139])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10184])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10234])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	*(($0 + [184])) = $1
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL require_auth(*($0))
	$2 = *($1 + [8])
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8192])
	CALL eosio_assert(((int_64)$2 == (int_64)1397703940), [9422])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($1) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8832])
	*(($0 + [176])) = *(($1 + [8]))
	*(($0 + [168])) = *($1)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [416])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [9447])
	
.LABEL $label$2
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$5 }
	$4 = (int_64)7
	
.LOOP $label$6:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$6 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	$5 = CALL $55(($3 + [216]), $0)
	if ( ((int_64)$2 <= (int_64)-3102536759825661953) ){ goto $label$19 }
	if ( ((int_64)$2 <= (int_64)4921564679018381311) ){ goto $label$18 }
	if ( ((int_64)$2 > (int_64)8516769789752901631) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$7 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [1]
	*($3 + [8]) = *($3 + [208])
	CALL $56($5, ($3 + [8]))
	goto $label$7 
	
.LABEL $label$19
	if ( ((int_64)$2 > (int_64)-4417261948374089729) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)-5001342339331915776) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-4997664720277880832) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)-4417265077363671040) ){ goto $label$7 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [2]
	*($3 + [80]) = *($3 + [136])
	CALL $57($5, ($3 + [80]))
	goto $label$7 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)-3102536759825661952) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-3075276121649446912) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)3626165616183197696) ){ goto $label$7 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [3]
	*($3 + [88]) = *($3 + [128])
	CALL $58($5, ($3 + [88]))
	goto $label$7 
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)-4417261948374089728) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-4157661383434960896) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$7 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [4]
	*($3 + [24]) = *($3 + [192])
	CALL $59($5, ($3 + [24]))
	goto $label$7 
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)8516769789752901632) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)8516769952340901888) ){ goto $label$7 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [5]
	*($3 + [56]) = *($3 + [160])
	CALL $60($5, ($3 + [56]))
	goto $label$7 
	
.LABEL $label$15
	*($3 + [172]) = [0]
	*($3 + [168]) = [6]
	*($3 + [48]) = *($3 + [168])
	CALL $58($5, ($3 + [48]))
	goto $label$7 
	
.LABEL $label$14
	*($3 + [156]) = [0]
	*($3 + [152]) = [7]
	*($3 + [64]) = *($3 + [152])
	CALL $58($5, ($3 + [64]))
	goto $label$7 
	
.LABEL $label$13
	*($3 + [124]) = [0]
	*($3 + [120]) = [8]
	*($3 + [96]) = *($3 + [120])
	CALL $58($5, ($3 + [96]))
	goto $label$7 
	
.LABEL $label$12
	*($3 + [180]) = [0]
	*($3 + [176]) = [9]
	*($3 + [40]) = *($3 + [176])
	CALL $56($5, ($3 + [40]))
	goto $label$7 
	
.LABEL $label$11
	*($3 + [116]) = [0]
	*($3 + [112]) = [10]
	*($3 + [104]) = *($3 + [112])
	CALL $60($5, ($3 + [104]))
	goto $label$7 
	
.LABEL $label$10
	*($3 + [148]) = [0]
	*($3 + [144]) = [11]
	*($3 + [72]) = *($3 + [144])
	CALL $61($5, ($3 + [72]))
	goto $label$7 
	
.LABEL $label$9
	*($3 + [188]) = [0]
	*($3 + [184]) = [12]
	*($3 + [32]) = *($3 + [184])
	CALL $56($5, ($3 + [32]))
	goto $label$7 
	
.LABEL $label$8
	*($3 + [204]) = [0]
	*($3 + [200]) = [13]
	*($3 + [16]) = *($3 + [200])
	CALL $62($5, ($3 + [16]))
	
.LABEL $label$7
	CALL $63($5)
	
.LABEL $label$4
	CALL $108([0])
	$global$0 = ($3 + [416])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10139])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10184])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [16])
	if ( ((int_64)*(*(($5 + [-24])) + [16]) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8) + [16]) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10234])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $110($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1398362884
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [9688])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [8192])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9863])
	CALL memcpy(($3 + [24]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [9863])
	$1 = (($3 + [24]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [9863])
	CALL memcpy((($3 + [24]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $113($6)
	
.LABEL $label$8
	*(($2 = (($3 + [48]) + [8]))) = *(($1 + [8]))
	*($3 + [48]) = *($1)
	$8 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($2)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$10 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [64])
	*($3 + [8]) = $10
	*($3 + [80]) = $10
	CALL void $1((int_32 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $110($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $71(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $113($2)
	
.LABEL $label$5
	*(($1 = (($3 + [32]) + [8]))) = *((($3 + [16]) + [8]))
	*($3 + [32]) = *($3 + [16])
	*((($3 + [48]) + [8])) = *($1)
	*($3 + [48]) = *($3 + [32])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$6 = *((($3 + [48]) + [8]))
	*((($3 + [64]) + [8])) = $6
	*(($3 + [8])) = $6
	$6 = *($3 + [48])
	*($3) = $6
	*($3 + [64]) = $6
	CALL void $1((int_32 $3), (int_32 $5))
	$global$0 = ($3 + [80])
	return [1]
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [10139])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10184])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10234])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC $112 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10364]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10368])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10364]) = [1]
	$2 = ($2 << [16])
	*([0] + [10368]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10368])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10368]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10364]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10364]) = [1]
	$3 = ($3 << [16])
	*([0] + [10368]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10368])
	
.LABEL $label$10
	*([0] + [10368]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $113 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18756])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18564]
	$3 = (((int_32)$1 * (int_32)[12]) + [18564])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $110 (int_32 $0)
{
	return CALL $111([10372], $0)
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $112($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8227])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $29 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [9789])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5001342339331915776, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $17($0, $4)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$0), [9789])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $28 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [16]) = $1
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [8]) = *($0)
	$3 = CALL $29(($2 + [8]), (uint_64)*($0 + [8]) >> (uint_64)(int_64)8), [9038])
	CALL eosio_assert(((uint_64)((int_64)*($0 + [56]) + (int_64)*($3 + [16])) <= (uint_64)((int_64)((uint_64)CALL $fimport$9() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [9063])
	CALL $30(($2 + [8]), $3)
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($2 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($2 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

int_32 .FUNC $55 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($0 + [8]) = (int_64)1196182532
	*($0) = $1
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [9737]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	*(($0 + [16])) = $6
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [9750]
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$6 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$8 = ($8 + [-91])
	goto $label$7 
	
.LABEL $label$8
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$6
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$5 }
	*(($0 + [24])) = $6
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [9763]
	$6 = (int_64)0
	
.LOOP $label$9:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$10 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$8 = ($8 + [-91])
	goto $label$11 
	
.LABEL $label$12
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$10
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$9 }
	*(($0 + [32])) = $6
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [9776]
	$6 = (int_64)0
	
.LOOP $label$13:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$14 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$8 = ($8 + [-91])
	goto $label$15 
	
.LABEL $label$16
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$14
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$13 }
	*($0 + [48]) = (int_64)86400
	*($0 + [56]) = (int_64)259200
	*($0 + [64]) = (int_64)43200
	*($0 + [72]) = $1
	*($0 + [112]) = $1
	*(($0 + [40])) = $6
	*(($0 + [80])) = $1
	*(($0 + [88])) = (int_64)-1
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = [0]
	*(($9 = ($0 + [120]))) = $1
	*(($0 + [128])) = (int_64)-1
	*(($8 = ($0 + [136]))) = (int_64)0
	*(($0 + [144])) = [0]
	$10 = CALL $64(($0 + [152]))
	$5 = ($0 + [112])
	$11 = *(($0 + [140]))
	if ( ((int_32)$11 == (int_32)*($8)) ){ goto $label$20 }
	$8 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$5), [9789])
	if ( $8 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$8 = CALL db_find_i64(*($5), *($9), (int_64)5455799419175698432, (int_64)5455799419175698432)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*(CALL $65($5, $8) + [48]) == (int_32)$5), [9789])
	
.LABEL $label$19
	CALL $66($2, $5)
	$9 = *(($2 + [44]))
	$5 = *(($2 + [40]))
	$11 = *($2 + [36])
	goto $label$17 
	
.LABEL $label$18
	*($2) = (int_64)0
	$3 = *(($0 + [8]))
	*($2 + [8]) = $3
	CALL eosio_assert([1], [9688])
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$3 = $4
	$8 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$3 = $4
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $8 ){ goto $label$25 }
	$8 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$8 = [0]
	
.LABEL $label$21
	CALL eosio_assert($8, [8192])
	*(($2 + [24])) = (int_64)1397703940
	*($2 + [16]) = (int_64)800000000
	CALL eosio_assert([1], [9688])
	$3 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$3 = $4
	$8 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$3 = $4
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $8 ){ goto $label$30 }
	$8 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$8 = [0]
	
.LABEL $label$26
	CALL eosio_assert($8, [8192])
	$9 = [0]
	*(($2 + [44])) = [0]
	*($2 + [32]) = [1]
	*($2 + [36 align=4]) = (int_64)0
	$5 = [0]
	$11 = [0]
	
.LABEL $label$17
	*($10) = *($2)
	*(($0 + [192])) = $5
	*(($2 + [40])) = [0]
	*(($10 + [32])) = *(($2 + [32]))
	*(($10 + [24])) = *(($2 + [24]))
	*(($10 + [16])) = *(($2 + [16]))
	*(($10 + [8])) = *(($2 + [8]))
	$5 = ($0 + [188])
	$8 = *($5)
	*($5) = $11
	*(($2 + [36])) = $8
	$11 = ($0 + [196])
	$5 = *($11)
	*($11) = $9
	*(($2 + [44])) = $5
	if ( ($5 == 0) ){ goto $label$31 }
	CALL _ZdlPv($8)
	
.LABEL $label$31
	$global$0 = ($2 + [48])
	return $0
}

void .FUNC $107 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9682])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$3 = ($global$0 - [240])
	$global$0 = $3
	*($3 + [184]) = $1
	CALL require_auth($1)
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8192])
	CALL eosio_assert(((int_64)$5 == (int_64)*($0 + [8])), [8945])
	$8 = *($2)
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8832])
	*((($3 + [144]) + [32])) = [0]
	*($3 + [152]) = $1
	*($3 + [160]) = (int_64)-1
	*($3 + [168]) = (int_64)0
	*($3 + [144]) = *($0)
	CALL $15(($3 + [144]), $6, [8863])
	$7 = CALL current_time()
	$6 = *($0 + [48])
	$11 = *($0 + [64])
	*((($3 + [104]) + [32])) = [0]
	*($3 + [112]) = $1
	*($3 + [120]) = (int_64)-1
	*($3 + [128]) = (int_64)0
	$12 = *($0)
	*($3 + [104]) = $12
	$6 = ((uint_64)((int_64)$11 + (int_64)((int_64)((uint_64)$7 / (uint_64)(int_64)1000000) & (int_64)4294967295)) / (uint_64)$6)
	$10 = [0]
	$4 = CALL db_find_i64($12, $1, (int_64)-4157661383434960896, (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$4) < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $16(($3 + [104]), $4)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($3 + [104])), [9789])
	$1 = *($3 + [184])
	
.LABEL $label$6
	$13 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($13, [8970])
	CALL eosio_assert(((int_64)$8 <= (int_64)*($10)), [8887])
	*((($3 + [64]) + [32])) = [0]
	*($3 + [80]) = (int_64)-1
	*($3 + [88]) = (int_64)0
	$7 = *($0)
	*($3 + [64]) = $7
	$11 = *(($0 + [8]))
	*($3 + [72]) = $1
	$4 = CALL db_find_i64($7, $1, (int_64)-5001342339331915776, (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_32)$4) < (int_32)[0]) ){ goto $label$10 }
	$4 = CALL $17(($3 + [64]), $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($3 + [64])), [9789])
	CALL prints([9011])
	CALL eosio_assert([1], [9897])
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($3 + [64])), [9932])
	CALL eosio_assert(((int_64)*($3 + [64]) == (int_64)CALL $fimport$3()), [9978])
	$7 = *($4 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)$7), [9511])
	$1 = ((int_64)*($4) + (int_64)$8)
	*($4) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9554])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [9573])
	*($4 + [16]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($4 + [8]) >> (uint_64)(int_64)8)), [10029])
	CALL eosio_assert([1], [9682])
	CALL memcpy(($3 + [192]), $4, [8])
	CALL eosio_assert([1], [9682])
	CALL memcpy((($3 + [192]) | [8]), ($4 + [8]), [8])
	CALL eosio_assert([1], [9682])
	CALL memcpy((($3 + [192]) + [16]), ($4 + [16]), [8])
	CALL db_update_i64(*($4 + [28]), (int_64)0, ($3 + [192]), [24])
	$4 = (($3 + [64]) + [16])
	if ( (uint_64)($7 <= *($4)) ){ goto $label$9 }
	*($4) = ((int_64)$7 + (int_64)1)
	if ( ((uint_64)*($10 + [24]) >= (uint_64)$6) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$10
	CALL prints([8997])
	$11 = *($3 + [184])
	CALL eosio_assert(((int_64)*($3 + [64]) == (int_64)CALL $fimport$3()), [10088])
	*(($14 = CALL _Znwj([40])) + [8]) = (int_64)1398362884
	*($14) = (int_64)0
	CALL eosio_assert([1], [9688])
	$15 = ($14 + [8])
	$7 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$7 = $1
	$9 = [1]
	$16 = $4
	$4 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$7 = $1
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$16 = ($4 + [1])
	$4 = $16
	if ( $9 ){ goto $label$15 }
	$9 = [1]
	$4 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$9 = [0]
	
.LABEL $label$11
	CALL eosio_assert($9, [8192])
	*($14 + [24]) = ($3 + [64])
	*(($4 = ($14 + [8]))) = *(($2 + [8]))
	*($14) = *($2)
	*($14 + [16]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [9682])
	CALL memcpy(($3 + [192]), $14, [8])
	CALL eosio_assert([1], [9682])
	CALL memcpy((($3 + [192]) | [8]), $15, [8])
	CALL eosio_assert([1], [9682])
	CALL memcpy((($3 + [192]) + [16]), ($14 + [16]), [8])
	$7 = (uint_64)*($4) >> (uint_64)(int_64)8
	$9 = CALL db_store_i64(*((($3 + [64]) + [8])), (int_64)-5001342339331915776, $11, $7), ($3 + [192]), [24]
	*($14 + [28]) = $9)
	$16 = (($3 + [64]) + [16])
	if ( (uint_64)($7 <= *($16)) ){ goto $label$16 }
	*($16) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$16
	*($3 + [192]) = $14
	$7 = (uint_64)*($4) >> (uint_64)(int_64)8
	*($3) = $7)
	*($3 + [216]) = $9
	$16 = ($3 + [92])
	$4 = *($16)
	if ( ((uint_32)$4 >= (uint_32)*(($3 + [96]))) ){ goto $label$18 }
	*($4 + [8]) = $7
	*($4 + [16]) = $9
	*($3 + [192]) = [0]
	*($4) = $14
	*($16) = ($4 + [24])
	$4 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( $4 ){ goto $label$17 }
	goto $label$9 
	
.LABEL $label$18
	CALL $24(($3 + [88]), ($3 + [192]), $3, ($3 + [216]))
	$4 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	
.LABEL $label$17
	CALL _ZdlPv($4)
	
.LABEL $label$9
	if ( ((uint_64)*($10 + [24]) >= (uint_64)$6) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((uint_64)*($10 + [16]) >= (uint_64)$6) ){ goto $label$7 }
	CALL prints([8932])
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$11 = *($0)
	*($3) = $11
	*($3 + [8]) = *($3 + [184])
	CALL eosio_assert(((int_64)$11 == (int_64)CALL $fimport$3()), [10088])
	*(($14 = CALL _Znwj([40])) + [8]) = (int_64)1398362884
	*($14) = (int_64)0
	CALL eosio_assert([1], [9688])
	$15 = ($14 + [8])
	$7 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$7 = $1
	$9 = [1]
	$16 = $4
	$4 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$7 = $1
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$16 = ($4 + [1])
	$4 = $16
	if ( $9 ){ goto $label$23 }
	$9 = [1]
	$4 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$9 = [0]
	
.LABEL $label$19
	CALL eosio_assert($9, [8192])
	*($14 + [24]) = $3
	*(($14 + [8])) = *(($10 + [8]))
	*($14) = *($10)
	*($14 + [16]) = *(($10 + [16]))
	CALL eosio_assert([1], [9682])
	CALL memcpy(($3 + [192]), $14, [8])
	CALL eosio_assert([1], [9682])
	CALL memcpy((($3 + [192]) | [8]), $15, [8])
	CALL eosio_assert([1], [9682])
	$4 = ($14 + [16])
	CALL memcpy((($3 + [192]) + [16]), $4, [8])
	$7 = *($14 + [16])
	$9 = CALL db_store_i64(*(($3 + [8])), (int_64)7760153368969871360, $11, $7, ($3 + [192]), [24])
	*($14 + [28]) = $9
	$16 = ($3 + [16])
	if ( (uint_64)($7 <= *($16)) ){ goto $label$24 }
	*($16) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	*($3 + [216]) = $14
	$7 = *($4)
	*($3 + [192]) = $7
	*($3 + [232]) = $9
	$16 = ($3 + [28])
	$4 = *($16)
	if ( ((uint_32)$4 >= (uint_32)*(($3 + [32]))) ){ goto $label$27 }
	*($4 + [8]) = $7
	*($4 + [16]) = $9
	*($3 + [216]) = [0]
	*($4) = $14
	*($16) = ($4 + [24])
	$4 = *($3 + [216])
	*($3 + [216]) = [0]
	if ( $4 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	CALL $22(($3 + [24]), ($3 + [216]), ($3 + [192]), ($3 + [232]))
	$4 = *($3 + [216])
	*($3 + [216]) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	CALL _ZdlPv($4)
	
.LABEL $label$25
	$16 = *($3 + [24])
	if ( ($16 == 0) ){ goto $label$7 }
	$14 = ($3 + [28])
	$4 = *($14)
	if ( ((int_32)$4 == (int_32)$16) ){ goto $label$29 }
	
.LOOP $label$30:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$31 }
	CALL _ZdlPv($9)
	
.LABEL $label$31
	if ( ((int_32)$16 != (int_32)$4) ){ goto $label$30 }
	$4 = *(($3 + [24]))
	goto $label$28 
	
.LABEL $label$29
	$4 = $16
	
.LABEL $label$28
	*($14) = $16
	CALL _ZdlPv($4)
	
.LABEL $label$7
	CALL prints([9025])
	CALL eosio_assert($13, [9897])
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($3 + [104])), [9932])
	CALL eosio_assert(((int_64)*($3 + [104]) == (int_64)CALL $fimport$3()), [9978])
	$7 = *($10 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)$7), [9591])
	$1 = (int_64)
	*($10) = $1(*($10) - $8))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9639])
	CALL eosio_assert(((int_64)*($10) < (int_64)4611686018427387904), [9661])
	*($10 + [16]) = $6
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($10 + [8]) >> (uint_64)(int_64)8)), [10029])
	*($3 + [224]) = ($3 + [32])
	*($3 + [220]) = $3
	*($3 + [216]) = $3
	*($3 + [232]) = ($3 + [216])
	*($3 + [196]) = ($10 + [16])
	*($3 + [192]) = $10
	*($3 + [200]) = ($10 + [24])
	CALL $20(($3 + [192]), ($3 + [232]))
	CALL db_update_i64(*($10 + [36]), (int_64)0, $3, [32])
	$4 = (($3 + [104]) + [16])
	if ( (uint_64)($7 <= *($4)) ){ goto $label$32 }
	*($4) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$32
	CALL eosio_assert(((int_64)$5 == (int_64)*(($0 + [160]))), [9591])
	$7 = (int_64)
	*($0 + [152]) = $7(*($0 + [152]) - *($2)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9639])
	CALL eosio_assert(((int_64)*($0 + [152]) < (int_64)4611686018427387904), [9661])
	$7 = CALL current_time()
	*(($3 + [28])) = (int_64)0
	*(($3 + [44])) = (int_64)0
	*(($3 + [52])) = (int_64)0
	*($3 + [12]) = [0]
	*($3 + [16]) = [0]
	*($3 + [20 align=4]) = (int_64)0
	*($3 + [36 align=4]) = (int_64)0
	*($3) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	$4 = ($3 + [36])
	$1 = *($0)
	$7 = (int_64)6
	
.LOOP $label$33:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$33 }
	*($3 + [200]) = (int_64)3617214756542218240
	*($3 + [192]) = $1
	$7 = (int_64)6
	
.LOOP $label$34:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$34 }
	*($3 + [216]) = (int_64)-5001342339331915776
	CALL $25($4, ($3 + [192]), $0, ($3 + [216]), ($3 + [184]))
	$7 = *($3 + [184])
	*(($3 + [20])) = *($0 + [56])
	*($3 + [200]) = (int_64)0
	*($3 + [192]) = $7
	CALL cancel_deferred(($3 + [192]))
	*($3 + [200]) = (int_64)0
	$7 = *($3 + [184])
	*($3 + [192]) = $7
	CALL $26(($3 + [216]), $3)
	$4 = *($3 + [216])
	CALL send_deferred(($3 + [192]), $7, $4, (*($3 + [220]) - $4), [1])
	$4 = *($3 + [216])
	if ( ($4 == 0) ){ goto $label$35 }
	*($3 + [220]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$35
	CALL $27($3)
	$10 = *($3 + [88])
	if ( ($10 == 0) ){ goto $label$36 }
	$0 = ($3 + [92])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$38 }
	
.LOOP $label$39:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$40 }
	CALL _ZdlPv($9)
	
.LABEL $label$40
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$39 }
	$4 = *(($3 + [88]))
	goto $label$37 
	
.LABEL $label$38
	$4 = $10
	
.LABEL $label$37
	*($0) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$36
	$10 = *($3 + [128])
	if ( ($10 == 0) ){ goto $label$41 }
	$0 = ($3 + [132])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$43 }
	
.LOOP $label$44:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$45 }
	CALL _ZdlPv($9)
	
.LABEL $label$45
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$44 }
	$4 = *(($3 + [128]))
	goto $label$42 
	
.LABEL $label$43
	$4 = $10
	
.LABEL $label$42
	*($0) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$41
	$10 = *($3 + [168])
	if ( ($10 == 0) ){ goto $label$46 }
	$0 = ($3 + [172])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$48 }
	
.LOOP $label$49:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$50 }
	CALL _ZdlPv($9)
	
.LABEL $label$50
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$49 }
	$4 = *(($3 + [168]))
	goto $label$47 
	
.LABEL $label$48
	$4 = $10
	
.LABEL $label$47
	*($0) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$46
	$global$0 = ($3 + [240])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $37(($6 + [28]), [8])
	$2 = *($6 + [28])
	CALL eosio_assert(((int_32)(*(($6 + [32])) - $2) > (int_32)[7]), [9682])
	CALL memcpy($2, $4, [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $73($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $37($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $74($2, $1)
	CALL $76(CALL $75(CALL $75($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $109 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9863])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $67(*($1), ($0 + [32]))
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $105(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $105(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $108 (int_32 $0)
{
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9840])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $110($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([64])
	CALL $64($5)
	*($5 + [48]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	*($3 + [44]) = ($5 + [36])
	CALL $79(($3 + [32]), ($3 + [24]))
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)5455799419175698432
	*($3 + [4]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)5455799419175698432
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $80(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $113($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*(($1 + [44])) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($1 + [36]))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $64 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9688])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8192])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [9688])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [8192])
	*(($0 + [44])) = [0]
	*($0 + [36 align=4]) = (int_64)0
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $99($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $106($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $106($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $104($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *(($1 + [28]))
	if ( ((int_32)$2 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$3 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$1), [9789])
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	$2 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)5455799419175698432, (int_64)5455799419175698432)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $65($1, $2)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$1), [9789])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9872])
	*($0 + [36]) = [0]
	*(($0 + [44])) = [0]
	*(($0 + [32])) = *(($3 + [32]))
	*(($0 + [24])) = *(($3 + [24]))
	*(($0 + [16])) = *(($3 + [16]))
	*(($0 + [8])) = *(($3 + [8]))
	*($0) = *($3)
	$2 = *(($3 + [40]))
	*(($0 + [40])) = $2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[107374183]) ){ goto $label$3 }
	$1 = CALL _Znwj(((int_32)$2 * (int_32)[40]))
	*(($0 + [44])) = $2
	*(($0 + [36])) = $1
	$2 = *(($3 + [40]))
	if ( ($2 == 0) ){ goto $label$4 }
	$0 = *($3 + [36])
	
.LOOP $label$5:
	*($1) = *($0)
	*(($1 + [32])) = *(($0 + [32]))
	*(($1 + [24])) = *(($0 + [24]))
	*(($1 + [16])) = *(($0 + [16]))
	*(($1 + [8])) = *(($0 + [8]))
	$1 = ($1 + [40])
	$0 = ($0 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	
.LABEL $label$4
	return (unreachable)
	
.LABEL $label$3
	CALL abort()
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $110($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [9863])
	CALL memcpy(($3 + [15]), $6, [1])
	$2 = *($3 + [15])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $113($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ((int_32)($2 & [255]) != (int_32)[0])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $110($5)
	CALL read_action_data($2, $5)
	CALL $113($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $72(($0 + [112]), ($0 + [152]), *($0))
	if ( (*(($0 + [196])) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($0 + [188])))
	
.LABEL $label$1
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$2 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	if ( (*(($4 + [44])) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($4 + [36]))
	
.LABEL $label$7
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$5 }
	$3 = *(($0 + [136]))
	goto $label$3 
	
.LABEL $label$4
	$3 = $1
	
.LABEL $label$3
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$8 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$11 }
	$3 = *(($0 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$3 = $1
	
.LABEL $label$9
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$8
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $110($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	CALL eosio_assert([1], [9688])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8192])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [72]) = ($4 + $5)
	*($3 + [64]) = $4
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9863])
	CALL memcpy(($3 + [8]), $4, [8])
	$1 = ($5 & [-8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [9863])
	CALL memcpy((($3 + [8]) + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [9863])
	CALL memcpy((($3 + [8]) + [16]), ($4 + [16]), [8])
	*($3 + [68]) = ($4 + [24])
	CALL $67(($3 + [64]), (($3 + [8]) + [24]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $113($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $68(($3 + [64]), ($3 + [8]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return [1]
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $110($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10360])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $110($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $113($0)
	
.LABEL $label$1
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $104 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [31]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $3) > (int_32)[0]), [9682])
	CALL memcpy(*($6), ($2 + [31]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	if ( ($7 == 0) ){ goto $label$2 }
	$6 = *($1)
	$8 = ($6 + ((int_32)$7 * (int_32)[40]))
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $3) > (int_32)[7]), [9682])
	CALL memcpy(*($7), $6, [8])
	*($7) = (*($7) + [8])
	*($2 + [8]) = $0
	*($2 + [20]) = ($6 + [24])
	*($2 + [16]) = ($6 + [8])
	CALL $90(($2 + [16]), ($2 + [8]))
	$6 = ($6 + [40])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$3 = *($7)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9682])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9682])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9682])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9682])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [8]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9682])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	CALL $89(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($2 - $1)
	$5 = ((int_32)$4 / (int_32)[40])
	if ( ((uint_32)$5 <= (uint_32)*($0 + [8])) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$1 }
	$6 = CALL _Znwj($4)
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$6 }
	*(($0 + [4])) = [0]
	CALL _ZdlPv($7)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [8])) = $5
	$4 = [0]
	*(($5 = ($0 + [4]))) = [0]
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$7 = $6
	
.LOOP $label$7:
	*($7) = *($1)
	*(($7 + [8])) = *(($1 + [8]))
	*(($7 + [16])) = *(($1 + [16]))
	*(($7 + [24])) = *(($1 + [24]))
	*(($7 + [32])) = *(($1 + [32]))
	$7 = ($7 + [40])
	$1 = ($1 + [40])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	$7 = *($0)
	$6 = ((int_32)*($0 + [4]) * (int_32)[40])
	$4 = ($4 + [-40])
	
.LOOP $label$9:
	if ( ($6 == 0) ){ goto $label$2 }
	*($7) = *($1)
	*(($7 + [32])) = *(($1 + [32]))
	*(($7 + [24])) = *(($1 + [24]))
	*(($7 + [16])) = *(($1 + [16]))
	*($7 + [8]) = *(($1 + [8]))
	$6 = ($6 + [-40])
	$4 = ($4 + [-40])
	$7 = ($7 + [40])
	$1 = ($1 + [40])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	*(($0 + [4])) = $5
	return 
	
.LABEL $label$4
	$7 = $6
	
.LABEL $label$3
	*($5) = (((int_32)($7 - $6) / (int_32)[40]) + $4)
	return 
	
.LABEL $label$2
	$5 = (*($0) + ((int_32)*(($0 + [4])) * (int_32)[40]))
	$7 = [0]
	
.LOOP $label$10:
	$6 = ($1 + $7)
	*(($2 = ($5 + $7))) = *($6)
	*(($2 + [32])) = *(($6 + [32]))
	*(($2 + [24])) = *(($6 + [24]))
	*(($2 + [16])) = *(($6 + [16]))
	*(($2 + [8])) = *(($6 + [8]))
	$2 = ((int_32)$4 != (int_32)$7)
	$6 = ($7 + [40])
	$7 = $6
	if ( $2 ){ goto $label$10 }
	*(($1 = ($0 + [4]))) = (*($1) + ((int_32)$6 / (int_32)[40]))
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	*(($1 + [32])) = *(($5 + [32]))
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$1 }
	$6 = *($5 + [36])
	CALL $87(($1 + [36]), $6, ($6 + ((int_32)*(($5 + [40])) * (int_32)[40])), [0])
	
.LABEL $label$1
	$6 = *(($1 + [40]))
	$7 = (CASTING uint_64)(uint_32 $6)
	$5 = [0]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($6 == 0) ){ goto $label$6 }
	$6 = ((((int_32)((uint_32)(((int_32)$6 * (int_32)[40]) + [-40]) / (uint_32)[40]) * (int_32)[40]) + $5) + [73])
	if ( ($6 <= [513]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = ($5 + [33])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$4 }
	
.LABEL $label$5
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL $110($6)
	
.LABEL $label$3
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [16])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [32])
	*($3 + [44]) = ($1 + [36])
	CALL $88(($3 + [32]), ($3 + [24]))
	*($1 + [52]) = CALL db_store_i64(*($4 + [8]), (int_64)5455799419175698432, *(*($0 + [8])), (int_64)5455799419175698432, $5, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)5455799419175698432) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $113($5)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)5455799419175698432) ){ goto $label$7 }
	
.LABEL $label$8
	*(($4 + [16])) = (int_64)5455799419175698433
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [48])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [10088])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([64])
	CALL $64($3)
	*($3 + [48]) = $1
	CALL $86(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)5455799419175698432
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)5455799419175698432
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $80(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( (*(($1 + [44])) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($1 + [36]))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9932])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9978])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [32])) = *(($3 + [32]))
	*(($1 + [24])) = *(($3 + [24]))
	*(($1 + [16])) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$6 = *($3 + [36])
	CALL $87(($1 + [36]), $6, ($6 + ((int_32)*(($3 + [40])) * (int_32)[40])), [0])
	
.LABEL $label$1
	CALL eosio_assert([1], [10029])
	$6 = *(($1 + [40]))
	$7 = (CASTING uint_64)(uint_32 $6)
	$3 = [0]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($6 == 0) ){ goto $label$6 }
	$6 = ((((int_32)((uint_32)(((int_32)$6 * (int_32)[40]) + [-40]) / (uint_32)[40]) * (int_32)[40]) + $3) + [73])
	if ( ($6 <= [513]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = ($3 + [33])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	goto $label$3 
	
.LABEL $label$4
	$3 = CALL $110($6)
	
.LABEL $label$3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $6)
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [16])
	*($5 + [40]) = ($1 + [32])
	*($5 + [44]) = ($1 + [36])
	CALL $88(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [52]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)5455799419175698432) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $113($3)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)5455799419175698432) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = (int_64)5455799419175698433
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [48])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = *($2)
	$6 = ((int_32)($5 - *($1)) / (int_32)[40])
	$7 = *($1 + [4])
	$2 = *($1 + [8])
	if ( (([107374182] - $2) <= (($3 - $2) + $7)) ){ goto $label$1 }
	if ( ((uint_32)$2 > (uint_32)[536870911]) ){ goto $label$3 }
	$2 = ((uint_32)($2 << [3]) / (uint_32)[5])
	goto $label$2 
	
.LABEL $label$3
	$2 = ( [-1] ? ($2 << [3]) : ((uint_32)$2 > (uint_32)[-1610612737]) )
	
.LABEL $label$2
	$2 = ( $2 ? [107374182] : ($2 <= [107374182]) )
	$7 = ($7 + $3)
	$8 = ( $7 ? $2 : ((uint_32)$7 > (uint_32)$2) )
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$1 }
	$9 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	$2 = $9
	$10 = *($1)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$4 }
	$2 = $9
	if ( ($10 == 0) ){ goto $label$4 }
	$7 = $10
	$2 = $9
	
.LOOP $label$5:
	*($2) = *($7)
	*(($2 + [32])) = *(($7 + [32]))
	*(($2 + [24])) = *(($7 + [24]))
	*(($2 + [16])) = *(($7 + [16]))
	*(($2 + [8])) = *(($7 + [8]))
	$2 = ($2 + [40])
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$4
	*($2) = *($4)
	*(($2 + [32])) = *(($4 + [32]))
	*(($2 + [24])) = *(($4 + [24]))
	*(($2 + [16])) = *(($4 + [16]))
	*($2 + [8]) = *($4 + [8])
	$2 = ($2 + ((int_32)$3 * (int_32)[40]))
	if ( ($10 == 0) ){ goto $label$6 }
	$7 = ($10 + ((int_32)*(($1 + [4])) * (int_32)[40]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	*($2) = *($5)
	*(($2 + [32])) = *(($5 + [32]))
	*(($2 + [24])) = *(($5 + [24]))
	*(($2 + [16])) = *(($5 + [16]))
	*(($2 + [8])) = *(($5 + [8]))
	$2 = ($2 + [40])
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	CALL _ZdlPv(*($1))
	
.LABEL $label$6
	*($1) = $9
	*(($1 + [8])) = $8
	*(($1 + [4])) = ((int_32)($2 - $9) / (int_32)[40])
	*($0) = ($9 + ((int_32)$6 * (int_32)[40]))
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9863])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy($0, *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [9863])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = [0]
	*($1 + [4]) = [0]
	$4 = *($0 + [4])
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($6)), [9868])
	$4 = *($7)
	$8 = *($4)
	$4 = ($4 + [1])
	*($7) = $4
	$3 = ($3 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ($4 == 0) ){ goto $label$2 }
	$8 = (($2 + [56]) + [8])
	$7 = (($2 + [8]) + [16])
	$3 = ($0 + [4])
	
.LOOP $label$3:
	CALL $45(($2 + [8]))
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - *($3)) > (uint_32)[7]), [9863])
	CALL memcpy(($2 + [40]), *($3), [8])
	*($3) = (*($3) + [8])
	*($2 + [48]) = $0
	*($2 + [60]) = $7
	*($2 + [56]) = ($2 + [8])
	CALL $82(($2 + [56]), ($2 + [48]))
	*($8) = *($2 + [8])
	*(($8 + [8])) = *((($2 + [8]) + [8]))
	*(($8 + [16])) = *($7)
	*(($8 + [24])) = *((($2 + [8]) + [24]))
	*($2 + [56]) = *($2 + [40])
	CALL $42(($2 + [48]), $1, ($2 + [56]))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [96])
	return $0
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( (*(($1 + [44])) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($1 + [36]))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [9789])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)5455799419175698432, (int_64)5455799419175698432)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $65($0, $4)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [9789])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9897])
	CALL $84($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $85($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $105(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $105(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9688])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8192])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [9863])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [9863])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9682])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9682])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $77($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9682])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9682])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9682])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9682])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9682])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9682])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9682])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9682])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $37($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9682])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9682])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $77(CALL $78($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$1 = $global$0
	$2 = $1
	$3 = *($0 + [8])
	$4 = (int_64)($3 == 0)
	if ( $4 ){ goto $label$2 }
	$5 = ((int_64)$3 + (int_64)1)
	$6 = (int_64)1
	
.LOOP $label$3:
	$6 = ((int_64)$6 * (int_64)10)
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)$5 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)1
	
.LABEL $label$1
	$7 = ($0 + [8])
	$8 = (CASTING uint_32)(uint_64 $3)
	$1 = ($1 - (($8 + [16]) & [496]))
	$global$0 = $1
	*(($9 = ($1 + $8))) = [0]
	$10 = *($0)
	if ( $4 ){ goto $label$4 }
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$10 % (int_64)$6)
	$0 = ($9 + [-1])
	
.LOOP $label$5:
	$11 = ((int_64)$5 / (int_64)10)
	*($0) = ((CASTING uint_32)(uint_64 (int_64))($5 - ((int_64)$11 * (int_64)10))) + [48])
	$0 = ($0 + [-1])
	$5 = $11
	$3 = ((int_64)$3 + (int_64)-1)
	if ( ((int_64)$3 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	CALL printi(((int_64)$10 / (int_64)$6))
	CALL prints([10351])
	CALL prints_l($1, $8)
	CALL prints([10353])
	CALL $96($7, [0])
	$global$0 = $2
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $107($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9682])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9682])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9682])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9863])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9863])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9863])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9863])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	CALL $81(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $32 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$0), [9789])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157661383434960896, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $16($0, $4)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$0), [9789])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9840])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $110($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([40])
	$6 = CALL $95($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1 + [16])
	*($3 + [8]) = $7
	$8 = *($1 + [28])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $22(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $113($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10139])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10184])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10234])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	float_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	$2 = ($global$0 - [240])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [9789])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)6716332328202797056, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $12($3, $6)
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [9789])
	
.LABEL $label$1
	CALL eosio_assert(($7 == 0), [9129])
	CALL eosio_assert(((int_32)*(($0 + [184])) ^ (int_32)[1]), [9162])
	$5 = [0]
	*((($2 + [168]) + [32])) = [0]
	*($2 + [176]) = $1
	*($2 + [184]) = (int_64)-1
	*($2 + [192]) = (int_64)0
	*($2 + [168]) = *($0)
	$8 = CALL $32(($2 + [168]), (uint_64)*($0 + [8]) >> (uint_64)(int_64)8), [8970]
	$9 = *($8) + [24])
	*((($2 + [128]) + [32])) = [0]
	*($2 + [136]) = $1
	*($2 + [144]) = (int_64)-1
	*($2 + [152]) = (int_64)0
	$10 = *($0)
	*($2 + [128]) = $10
	$6 = CALL db_lowerbound_i64($10, $1, (int_64)7760153368969871360, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $33(($2 + [128]), $6)
	
.LABEL $label$5
	$4 = ($8 + [24])
	$3 = ($0 + [192])
	if ( (*($3) == 0) ){ goto $label$11 }
	$11 = ($0 + [188])
	$6 = *($11)
	$12 = (int_64)0
	
.LOOP $label$12:
	$10 = *($6)
	if ( ((uint_64)$10 <= (uint_64)*($4)) ){ goto $label$22 }
	if ( ($5 == 0) ){ goto $label$21 }
	$13 = ((float_64)((float_64)(CASTING float_64)(int_64 *($5)) / (float_64)(CASTING float_64)(int_64 *(($6 + [24])))) * (float_64)(CASTING float_64)(int_64 *(($6 + [8]))))
	if ( (((float_64)$13 < (float_64)(float_64)18446744073709551615) & ((float_64)$13 >= (float_64)(float_64)0)) ){ goto $label$20 }
	$12 = ((int_64)$12 + (int_64)0)
	if ( ((uint_64)*($5 + [16]) > (uint_64)$10) ){ goto $label$19 }
	goto $label$16 
	
.LABEL $label$22
	$10 = $9
	$7 = $5
	if ( $7 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$21
	$13 = ((float_64)((float_64)(CASTING float_64)(int_64 *($8)) / (float_64)(CASTING float_64)(int_64 *(($6 + [24])))) * (float_64)(CASTING float_64)(int_64 *(($6 + [8]))))
	if ( (((float_64)$13 < (float_64)(float_64)18446744073709551615) & ((float_64)$13 >= (float_64)(float_64)0)) ){ goto $label$18 }
	$9 = (int_64)0
	goto $label$17 
	
.LABEL $label$20
	$12 = ((int_64)$12 + (int_64)(Rounds 0)($13))
	if ( ((uint_64)*($5 + [16]) <= (uint_64)$10) ){ goto $label$16 }
	
.LABEL $label$19
	$7 = $5
	goto $label$15 
	
.LABEL $label$18
	$9 = (Rounds 0)($13)
	
.LABEL $label$17
	$12 = ((int_64)$12 + (int_64)$9)
	goto $label$14 
	
.LABEL $label$16
	CALL eosio_assert([1], [10287])
	CALL eosio_assert([1], [10321])
	$7 = [0]
	$14 = CALL db_next_i64(*($5 + [28]), ($2 + [16]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$23 }
	$7 = CALL $33(($2 + [128]), $14)
	
.LABEL $label$23
	CALL $34(($2 + [128]), $5)
	if ( ($7 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$9 = $10
	if ( ((uint_64)*($7 + [16]) <= (uint_64)*($6)) ){ goto $label$24 }
	$5 = $7
	goto $label$13 
	
.LABEL $label$24
	CALL eosio_assert([1], [10287])
	CALL eosio_assert([1], [10321])
	$5 = [0]
	$14 = CALL db_next_i64(*($7 + [28]), ($2 + [16]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$25 }
	$5 = CALL $33(($2 + [128]), $14)
	
.LABEL $label$25
	CALL $34(($2 + [128]), $7)
	goto $label$13 
	
.LABEL $label$14
	$5 = [0]
	$9 = $10
	
.LABEL $label$13
	$6 = ($6 + [40])
	if ( ((int_32)$6 != (int_32)(*($11) + ((int_32)*($3) * (int_32)[40]))) ){ goto $label$12 }
	$10 = (int_64)0
	if ( ((int_64)*($8) == (int_64)0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$12 = (int_64)0
	$10 = (int_64)0
	if ( ((int_64)*($8) != (int_64)0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $35(($2 + [168]), $8)
	if ( (int_64)($12 == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)($2 + [168])), [9932])
	CALL eosio_assert(((int_64)*($2 + [168]) == (int_64)CALL $fimport$3()), [9978])
	*(($8 + [24])) = $9
	$9 = *($8 + [8])
	CALL eosio_assert([1], [10029])
	*($2 + [120]) = (($2 + [16]) + [32])
	*($2 + [116]) = ($2 + [16])
	*($2 + [112]) = ($2 + [16])
	*($2 + [208]) = ($2 + [112])
	*($2 + [76]) = ($8 + [16])
	*($2 + [72]) = $8
	*($2 + [80]) = $4
	CALL $20(($2 + [72]), ($2 + [208]))
	CALL db_update_i64(*($8 + [36]), $10, ($2 + [16]), [32])
	$6 = (($2 + [168]) + [16])
	$10 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( (uint_64)($10) <= *($6)) ){ goto $label$26 }
	*($6) = ((int_64)$10 + (int_64)1)
	
.LABEL $label$26
	if ( (int_64)($12 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	*($2 + [120]) = (int_64)1397703940
	*($2 + [112]) = $12
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9688])
	$10 = (uint_64)*($2 + [120]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$10 = $9
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$30
	$10 = $9
	
.LOOP $label$31:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$31 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$5 = [0]
	
.LABEL $label$27
	CALL eosio_assert($5, [8192])
	CALL prints([9202])
	CALL $36(($2 + [112]))
	$15 = *($0 + [16])
	$10 = (int_64)6
	
.LOOP $label$32:
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$32 }
	$10 = (int_64)0
	$12 = (int_64)59
	$6 = [9215]
	$16 = (int_64)0
	
.LOOP $label$33:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$38 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$5 = ($5 + [-91])
	goto $label$36 
	
.LABEL $label$38
	$9 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$37
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$34
	$6 = ($6 + [1])
	$12 = ((int_64)$12 + (int_64)4294967291)
	$16 = ((int_64)$9 | (int_64)$16)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$33 }
	$10 = (int_64)0
	$12 = (int_64)59
	$6 = [9227]
	$17 = (int_64)0
	
.LOOP $label$39:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$44 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$5 = ($5 + [-91])
	goto $label$42 
	
.LABEL $label$44
	$9 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$43
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$41
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$40
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$17 = ((int_64)$9 | (int_64)$17)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$39 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$6 = CALL $109([9236])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$47 }
	*($2) = ($6 << [1])
	$5 = ($2 | [1])
	if ( $6 ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$47
	$7 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($2) = ($7 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $6
	
.LABEL $label$46
	CALL memcpy($5, [9236], $6)
	
.LABEL $label$45
	*(($5 + $6)) = [0]
	*((($2 + [16]) + [24])) = *((($2 + [112]) + [8]))
	$6 = ($2 + [8])
	*(($2 + [56])) = *($6)
	*($6) = [0]
	*($2 + [24]) = $1
	*($2 + [72]) = $16
	*($2 + [80]) = $17
	*($2 + [16]) = *(($0 + [16]))
	*($2 + [32]) = *($2 + [112])
	*($2 + [48]) = *($2)
	*($2) = (int_64)0
	*(($6 = CALL _Znwj([16]))) = $15
	*($6 + [8]) = (int_64)-4992121834821386240
	*((($2 + [72]) + [36])) = [0]
	$5 = ($6 + [16])
	*((($2 + [72]) + [24])) = $5
	*(($2 + [92])) = $5
	*($2 + [88]) = $6
	*($2 + [100 align=4]) = (int_64)0
	$6 = *($2 + [48])
	$5 = ( *((($2 + [16]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [32])
	$10 = (CASTING uint_64)(uint_32 $5)
	$5 = ($2 + [100])
	
.LOOP $label$48:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$48 }
	if ( ($6 == 0) ){ goto $label$50 }
	CALL $37($5, $6)
	$5 = *(($2 + [104]))
	$6 = *(($2 + [100]))
	goto $label$49 
	
.LABEL $label$50
	$5 = [0]
	$6 = [0]
	
.LABEL $label$49
	*($2 + [212]) = $6
	*($2 + [208]) = $6
	*($2 + [216]) = $5
	*($2 + [224]) = ($2 + [208])
	*($2 + [232]) = ($2 + [16])
	CALL $38(($2 + [232]), ($2 + [224]))
	CALL $39(($2 + [208]), ($2 + [72]))
	$6 = *($2 + [208])
	CALL send_inline($6, (*($2 + [212]) - $6))
	$6 = *($2 + [208])
	if ( ($6 == 0) ){ goto $label$51 }
	*($2 + [212]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$51
	$6 = *($2 + [100])
	if ( ($6 == 0) ){ goto $label$52 }
	*(($2 + [104])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$52
	$6 = *($2 + [88])
	if ( ($6 == 0) ){ goto $label$53 }
	*(($2 + [92])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$53
	if ( ((*(($2 + [48])) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*(($2 + [56])))
	
.LABEL $label$54
	if ( ((*($2) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$7
	$7 = *($2 + [152])
	if ( ($7 == 0) ){ goto $label$55 }
	$4 = ($2 + [156])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$57 }
	
.LOOP $label$58:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$59 }
	CALL _ZdlPv($5)
	
.LABEL $label$59
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$58 }
	$6 = *(($2 + [152]))
	goto $label$56 
	
.LABEL $label$57
	$6 = $7
	
.LABEL $label$56
	*($4) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$55
	$7 = *($2 + [192])
	if ( ($7 == 0) ){ goto $label$60 }
	$4 = ($2 + [196])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$62 }
	
.LOOP $label$63:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$64 }
	CALL _ZdlPv($5)
	
.LABEL $label$64
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$63 }
	$6 = *(($2 + [192]))
	goto $label$61 
	
.LABEL $label$62
	$6 = $7
	
.LABEL $label$61
	*($4) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$60
	$global$0 = ($2 + [240])
	return (unreachable)
	
.LABEL $label$6
	CALL $104($2)
}