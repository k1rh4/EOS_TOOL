(data (i32.const 8192) "Owner account does not exists.\00")
(data (i32.const 8223) "Post is already exists.\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8333) "You have already voted for this post with same score\00")
(data (i32.const 8386) "Voter account does not exists\00")
(data (i32.const 8416) "Payer account does not exists\00")
(data (i32.const 8446) "Post has more then 32 bytes\00")
(data (i32.const 8474) "Score should be btween 1 and 5\00")
(data (i32.const 8505) ":\00")
(data (i32.const 8507) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8558) "error reading iterator\00")
(data (i32.const 8581) "read\00")
(data (i32.const 8586) "cannot create objects in table of another contract\00")
(data (i32.const 8637) "write\00")
(data (i32.const 8643) "cannot pass end iterator to modify\00")
(data (i32.const 8678) "object passed to modify is not in multi_index\00")
(data (i32.const 8724) "cannot modify objects in table of another contract\00")
(data (i32.const 8775) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8834) "next primary key in table is at autoincrement limit\00")
(data (i32.const 8886) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 8940) "cannot decrement iterator at beginning of table\00")
(data (i32.const 8988) "get\00")
(import "env" "is_account" (func $fimport$0 (param i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$7 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$8 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$9 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$10 (param i32 i64 i32)))
(import "env" "db_idx128_find_primary" (func $fimport$11 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_update" (func $fimport$12 (param i32 i64 i32)))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$17 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx128_store" (func $fimport$19 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$21 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$22))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$25 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$36 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$37 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$40 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$42 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$43 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$44 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $12))
(export "_ZdlPv" (func $25))
(export "_Znwj" (func $23))
(export "_Znaj" (func $24))
(export "_ZdaPv" (func $26))
(export "_ZnwjSt11align_val_t" (func $27))
(export "_ZnajSt11align_val_t" (func $28))
(export "_ZdlPvSt11align_val_t" (func $29))
(export "_ZdaPvSt11align_val_t" (func $30))
(table $0 3 3 anyfunc)
(elem (i32.const 1) $11 $1)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17408))
(global $global$2 i32 (i32.const 17408))


int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8558])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $44($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [28]) = [0]
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = $0
	CALL $19(($3 + [32]), $5)
	*($5 + [36]) = $1
	*($5 + [40 align=4]) = (int_64)-1
	*($5 + [48]) = [-1]
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $10(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $47($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8581])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [8581])
	CALL memcpy(($1 + [24]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8581])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $47($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8988])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $22($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8581])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $20 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8940])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-2507752926491967488)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8886])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8886])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $18(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $44($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8992])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $44($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $35($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $47($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $42(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8992])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $42(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $44($1)
	
.LABEL $label$2
	*(CALL $36()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $44(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $47($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $36())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $43($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17396])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17204]
	$3 = (((int_32)$1 * (int_32)[12]) + [17204])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9004]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9008])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9004]) = [1]
	$2 = ($2 << [16])
	*([0] + [9008]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9008])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9008]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9004]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9004]) = [1]
	$3 = ($3 << [16])
	*([0] + [9008]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9008])
	
.LABEL $label$10
	*([0] + [9008]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $46($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8247])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $44 (int_32 $0)
{
	return CALL $45([9012], $0)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8637])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8637])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8637])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [8637])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8637])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-2507752926491967488, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $18($6, $8)
	*($3 + [20]) = [0]
	*($3 + [16]) = $6
	$7 = *(*(CALL $20(($3 + [16])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [8834])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	$6 = *(*($5 + [12]))
	*($1 + [28]) = *(*($5 + [16]))
	*($1 + [24]) = $6
	$6 = $2
	$5 = ($6 + [-32])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($6 + [-3])
	CALL $8($3, $1)
	$7 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-2507752926491967488, *(*($0 + [8])), $7, $5, [29])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$5 = ($4 + [8])
	$7 = *($5)
	$0 = *(($0 + [8]))
	$9 = *($0)
	$10 = *($1)
	$4 = ($1 + [8])
	*($3 + [16]) = *($4)
	*($1 + [40]) = CALL db_idx64_store($7, (int_64)-2507752926491967488, $9, $10, ($3 + [16]))
	$7 = *($0)
	$9 = *($5)
	$10 = *($1)
	$6 = ($1 + [16])
	*($3 + [16]) = *($6)
	*(($1 + [44])) = CALL db_idx64_store($9, (int_64)-2507752926491967487, $7, $10, ($3 + [16]))
	$7 = *($0)
	$9 = *($5)
	$10 = *($1)
	*($3 + [24]) = *($4)
	*($3 + [16]) = *($6)
	*(($1 + [48])) = CALL db_idx128_store($9, (int_64)-2507752926491967486, $7, $10, ($3 + [16]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $6 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [224])
	$global$0 = $5
	*($5 + [96]) = $1
	*($5 + [104]) = $2
	*($5 + [95]) = $3
	$6 = [0]
	*(($5 + [80])) = [0]
	*(($5 + [86])) = [0]
	*($5 + [64]) = (int_64)-1
	*($5 + [72]) = (int_64)0
	*($5 + [84]) = [0]
	$7 = *($0)
	*($5 + [48]) = $7
	*($5 + [56]) = $7
	*($5 + [40]) = ($5 + [48])
	*($5 + [24]) = $1
	*($5 + [16]) = $2
	CALL $7(($5 + [160]), ($5 + [40]), ($5 + [16]))
	$0 = *($5 + [164])
	if ( ($0 == 0) ){ goto $label$1 }
	$6 = ( $0 ? [0] : (int_64)(((int_64)((int_64)*($5 + [16]) ^ (int_64)*($0 + [16])) | (int_64)((int_64)*($5 + [24]) ^ (int_64)*($0 + [8]))) == 0) )
	
.LABEL $label$1
	*($5 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ($6 == 0) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($6 + [24]) != (int_32)$3), [8333])
	$8 = *($6 + [24])
	CALL eosio_assert([1], [8643])
	$0 = *($5 + [40])
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$0), [8678])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [8724])
	$3 = ($6 + [8])
	$2 = *($3)
	*(($5 + [184])) = $2
	*($6 + [24]) = *($5 + [95])
	*($6 + [28]) = *($5 + [8])
	$1 = *(($6 + [16]))
	*($5 + [176]) = $1
	*($5 + [160]) = $2
	*($5 + [168]) = $1
	$2 = *($6)
	CALL eosio_assert([1], [8775])
	*($5 + [152]) = (($5 + [112]) + [29])
	*($5 + [148]) = ($5 + [112])
	*($5 + [144]) = ($5 + [112])
	CALL $8(($5 + [144]), $6)
	CALL db_update_i64(*($6 + [36]), (int_64)0, ($5 + [112]), [29])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$9 = (($5 + [160]) | [8])
	*($5 + [208]) = *($3)
	if ( (CALL $40(($5 + [160]), ($5 + [208]), [8]) == 0) ){ goto $label$7 }
	$10 = ($6 + [40])
	$3 = *($10)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2507752926491967488, ($5 + [192]), $2)
	*($10) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, (int_64)0, ($5 + [208]))
	
.LABEL $label$7
	$3 = (($5 + [160]) + [16])
	$10 = ($6 + [16])
	*($5 + [208]) = *($10)
	if ( (CALL $40($9, ($5 + [208]), [8]) == 0) ){ goto $label$9 }
	$11 = ($6 + [44])
	$9 = *($11)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$10 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2507752926491967487, ($5 + [192]), $2)
	*($11) = $9
	
.LABEL $label$10
	CALL db_idx64_update($9, (int_64)0, ($5 + [208]))
	
.LABEL $label$9
	$1 = *($10)
	*($5 + [216]) = *(($6 + [8]))
	*($5 + [208]) = $1
	if ( (CALL $40($3, ($5 + [208]), [16]) == 0) ){ goto $label$4 }
	$3 = ($6 + [48])
	$6 = *($3)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$11 }
	$6 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-2507752926491967486, ($5 + [192]), $2)
	*($3) = $6
	
.LABEL $label$11
	CALL db_idx128_update($6, (int_64)0, ($5 + [208]))
	$3 = *($5 + [72])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($5 + [164]) = ($5 + [96])
	*($5 + [160]) = ($5 + [48])
	*($5 + [168]) = ($5 + [104])
	*($5 + [172]) = ($5 + [95])
	*($5 + [176]) = ($5 + [8])
	*($5 + [208]) = $4
	CALL eosio_assert(((int_64)*($5 + [48]) == (int_64)CALL $fimport$5()), [8586])
	*($5 + [116]) = ($5 + [160])
	*($5 + [112]) = ($5 + [48])
	*($5 + [120]) = ($5 + [208])
	*(($6 = CALL _Znwj([56])) + [28]) = [0]
	*($6 + [16]) = (int_64)0
	*($6 + [32]) = ($5 + [48])
	CALL $9(($5 + [112]), $6)
	*($5 + [192]) = $6
	$2 = *($6)
	*($5 + [112]) = $2
	$3 = *($6 + [36])
	*($5 + [144]) = $3
	$8 = ($5 + [76])
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)*(($5 + [80]))) ){ goto $label$13 }
	*($0 + [8]) = $2
	*($0 + [16]) = $3
	*($5 + [192]) = [0]
	*($0) = $6
	*($8) = ($0 + [24])
	$6 = *($5 + [192])
	$8 = [0]
	*($5 + [192]) = [0]
	if ( $6 ){ goto $label$12 }
	goto $label$4 
	
.LABEL $label$13
	CALL $10(($5 + [72]), ($5 + [192]), ($5 + [112]), ($5 + [144]))
	$6 = *($5 + [192])
	$8 = [0]
	*($5 + [192]) = [0]
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$12
	CALL _ZdlPv($6)
	
.LABEL $label$4
	$3 = *($5 + [72])
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = ($5 + [76])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$17 }
	CALL _ZdlPv($0)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$16 }
	$6 = *(($5 + [72]))
	goto $label$14 
	
.LABEL $label$15
	$6 = $3
	
.LABEL $label$14
	*($9) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$2
	$global$0 = ($5 + [224])
	return int_32(($8 << [24]) >> [24])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)-2507752926491967486, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [8507])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $18($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)-2507752926491967488, $6))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [8507])
	
.LABEL $label$2
	*(($4 + [48])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8637])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8637])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8637])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8637])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8637])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8637])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $35($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_64 .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$2 }
	$2 = uint_32($2 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$4 = [1]
	$5 = CALL $41([8505])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($3 + $2)
	if ( ((int_32)$2 < (int_32)$5) ){ goto $label$5 }
	$4 = $3
	
.LOOP $label$6:
	$2 = (($2 - $5) + [1])
	if ( ($2 == 0) ){ goto $label$5 }
	$2 = CALL $39($4, [58], $2)
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (CALL $40($2, [8505], $5) == 0) ){ goto $label$4 }
	$4 = ($2 + [1])
	$2 = ($6 - $4)
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$5
	$2 = $6
	
.LABEL $label$4
	$4 = ( [0] ? (([1] - $3) + $2) : ((int_32)$2 == (int_32)$6) )
	
.LABEL $label$3
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$8 }
	$2 = uint_32($2 >> [1])
	goto $label$7 
	
.LABEL $label$8
	$2 = *($0 + [4])
	
.LABEL $label$7
	$2 = CALL $33($1, $0, $4, $2, $0)
	$7 = (CASTING int_64)(int_32 CALL $38(( *($2 + [8]) ? ($2 + [1]) : (*($1) & [1]) )))
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$9
	$global$0 = ($1 + [16])
	return $7
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8558])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $44($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = [0]
	*($5 + [36]) = $0
	CALL $17(($3 + [32]), $5)
	*($5 + [44]) = [-1]
	*($5 + [40]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $5(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $47($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL eosio_assert(CALL $fimport$0($1), [8192])
	CALL require_auth($1)
	$4 = CALL $32(($3 + [48]), $2)
	$5 = CALL $2($4)
	$2 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$1
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [44]) = [0]
	$6 = *($0)
	*($3 + [8]) = $6
	*($3 + [16]) = $6
	$4 = CALL db_find_i64($6, $6, (int_64)-5966816507475263488, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $3(($3 + [8]), $4) + [36]) == (int_32)($3 + [8])), [8507])
	$2 = [0]
	
.LABEL $label$2
	CALL eosio_assert($2, [8223])
	$6 = CALL current_time()
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$5()), [8586])
	*(($2 = CALL _Znwj([48])) + [36]) = ($3 + [8])
	*($2 + [8]) = $1
	*($2) = $5
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = ((uint_64)$6 / (uint_64)(int_64)1000000)
	*($3 + [112]) = (($3 + [64]) + [36])
	*($3 + [108]) = ($3 + [64])
	*($3 + [104]) = ($3 + [64])
	CALL $4(($3 + [104]), $2)
	$6 = *($2)
	$4 = (($3 + [8]) + [8])
	*($2 + [40]) = CALL db_store_i64(*($4), (int_64)-5966816507475263488, $1, $6, ($3 + [64]), [36])
	$0 = ($3 + [24])
	if ( (uint_64)($6 <= *($0)) ){ goto $label$3 }
	*($0) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$6 = *($2)
	$5 = *($4)
	*($3 + [120]) = *(($2 + [8]))
	*($2 + [44]) = CALL db_idx64_store($5, (int_64)-5966816507475263488, $1, $6, ($3 + [120]))
	*($3 + [104]) = $2
	$1 = *($2)
	*($3 + [64]) = $1
	$0 = *(($2 + [40]))
	*($3 + [120]) = $0
	$7 = ($3 + [36])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($3 + [40]))) ){ goto $label$6 }
	*($4 + [8]) = $1
	*($4 + [16]) = $0
	*($3 + [104]) = [0]
	*($4) = $2
	*($7) = ($4 + [24])
	$2 = *($3 + [104])
	*($3 + [104]) = [0]
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $5(($3 + [32]), ($3 + [104]), ($3 + [64]), ($3 + [120]))
	$2 = *($3 + [104])
	*($3 + [104]) = [0]
	if ( ($2 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$7 }
	$7 = ($3 + [36])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($3 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $0
	
.LABEL $label$8
	*($7) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$global$0 = ($3 + [128])
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $44($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = ($2 + $7)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8581])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [60]) = ($2 + [8])
	$8 = (($4 + [72]) + [8])
	CALL $15(($4 + [56]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($9 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($9)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	$8 = CALL $32(($4 + [96]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $32(($4 + [112]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [96]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $47($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [128])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return $2
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $21($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $34($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $34($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $31($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $32($2, ($1 + [8]))
	$5 = *($1 + [24])
	$6 = *($1 + [20])
	$1 = *($0 + [4])
	$7 = *($1 + [4])
	$0 = (*($0) + int_32($7 >> [1]))
	$1 = *($1)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$7 = CALL $32(($2 + [16]), $4)
	CALL void $0((int_32 $3), (int_64 $7), (int_32 ($6 & [255])), (int_32 $5), (int_64 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8581])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8581])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8581])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8581])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $35($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$5 = ($global$0 - [144])
	$global$0 = $5
	CALL eosio_assert(CALL $fimport$0($1), [8386])
	CALL eosio_assert(CALL $fimport$0($4), [8416])
	$6 = *($2)
	if ( ($6 & [1]) ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($6 <= [33]), [8446])
	CALL eosio_assert(((($3 + [-1]) & [255]) <= [5]), [8474])
	CALL require_auth($4)
	$2 = CALL $32(($5 + [48]), $2)
	$7 = CALL $2($2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$3
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	*($5 + [44]) = [0]
	$8 = *($0)
	*($5 + [8]) = $8
	*($5 + [16]) = $8
	$2 = CALL db_find_i64($8, $8, (int_64)-5966816507475263488, $7)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$7 }
	$2 = CALL $3(($5 + [8]), $2)
	CALL eosio_assert(((int_32)*($2 + [36]) == (int_32)($5 + [8])), [8507])
	$0 = CALL $6($0, $7, $1, $3, $4)
	CALL eosio_assert([1], [8643])
	CALL eosio_assert(((int_32)*($2 + [36]) == (int_32)($5 + [8])), [8678])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)CALL $fimport$5()), [8724])
	$6 = (*($2 + [24]) + ((int_32)$0 < (int_32)[1]))
	*($2 + [24]) = $6
	$4 = ((int_64))(*($2 + [16]) - (CASTING int_64)(int_32 $0)) + (int_64)(CASTING uint_64)(uint_32 $3)
	*($2 + [16]) = $4)
	*($2 + [28]) = ((float_32)(CASTING float_32)(uint_64 $4) / (float_32)(CASTING float_32)(uint_32 $6))
	$3 = ($2 + [8])
	*($5 + [120]) = *($3)
	$4 = *($2)
	CALL eosio_assert([1], [8775])
	*($5 + [112]) = (($5 + [64]) + [36])
	*($5 + [108]) = ($5 + [64])
	*($5 + [104]) = ($5 + [64])
	CALL $4(($5 + [104]), $2)
	CALL db_update_i64(*($2 + [40]), (int_64)0, ($5 + [64]), [36])
	$0 = ($5 + [24])
	if ( (uint_64)($4 <= *($0)) ){ goto $label$8 }
	*($0) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [136]) = *($3)
	if ( (CALL $40(($5 + [120]), ($5 + [136]), [8]) == 0) ){ goto $label$6 }
	$3 = *($2 + [44])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$9 }
	$3 = CALL db_idx64_find_primary(*($5 + [8]), *(($5 + [16])), (int_64)-5966816507475263488, ($5 + [128]), $4)
	*(($2 + [44])) = $3
	
.LABEL $label$9
	CALL db_idx64_update($3, (int_64)0, ($5 + [136]))
	$0 = *($5 + [32])
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	CALL $6($0, $7, $1, $3, $4)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)CALL $fimport$5()), [8586])
	*(($2 = CALL _Znwj([48])) + [36]) = ($5 + [8])
	*($2 + [8]) = $4
	*($2) = $7
	*($2 + [24]) = [1]
	*($2 + [16]) = (CASTING uint_64)(uint_32 $3)
	*($2 + [28]) = (CASTING float_32)(uint_32 $3)
	*($2 + [32]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($5 + [112]) = (($5 + [64]) + [36])
	*($5 + [108]) = ($5 + [64])
	*($5 + [104]) = ($5 + [64])
	CALL $4(($5 + [104]), $2)
	$8 = *($2)
	$3 = (($5 + [8]) + [8])
	*($2 + [40]) = CALL db_store_i64(*($3), (int_64)-5966816507475263488, $4, $8, ($5 + [64]), [36])
	$0 = ($5 + [24])
	if ( (uint_64)($8 <= *($0)) ){ goto $label$10 }
	*($0) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$8 = *($2)
	$7 = *($3)
	*($5 + [136]) = *(($2 + [8]))
	*($2 + [44]) = CALL db_idx64_store($7, (int_64)-5966816507475263488, $4, $8, ($5 + [136]))
	*($5 + [104]) = $2
	$4 = *($2)
	*($5 + [64]) = $4
	$0 = *(($2 + [40]))
	*($5 + [136]) = $0
	$6 = ($5 + [36])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($5 + [40]))) ){ goto $label$12 }
	*($3 + [8]) = $4
	*($3 + [16]) = $0
	*($5 + [104]) = [0]
	*($3) = $2
	*($6) = ($3 + [24])
	$2 = *($5 + [104])
	*($5 + [104]) = [0]
	if ( $2 ){ goto $label$11 }
	goto $label$6 
	
.LABEL $label$12
	CALL $5(($5 + [32]), ($5 + [104]), ($5 + [64]), ($5 + [136]))
	$2 = *($5 + [104])
	*($5 + [104]) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	
.LABEL $label$11
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$0 = *($5 + [32])
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$6 = ($5 + [36])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$16 }
	CALL _ZdlPv($3)
	
.LABEL $label$16
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$15 }
	$2 = *(($5 + [32]))
	goto $label$13 
	
.LABEL $label$14
	$2 = $0
	
.LABEL $label$13
	*($6) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($5 + [144])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)-7297702339392045056) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)4733738213611405312) ){ goto $label$1 }
	*($3 + [28]) = [0]
	*($3 + [24]) = [1]
	*($3) = *($3 + [24])
	CALL $13($1, $1, $3)
	goto $label$1 
	
.LABEL $label$2
	*($3 + [20]) = [0]
	*($3 + [16]) = [2]
	*($3 + [8]) = *($3 + [16])
	CALL $14($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $37([0])
	$global$0 = ($3 + [32])
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $44($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [92]) = [0]
	*($4 + [96]) = (int_64)0
	*($4 + [64]) = ($2 + $5)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8581])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [60]) = ($2 + [8])
	CALL $15(($4 + [56]), (($4 + [72]) + [8]))
	CALL eosio_assert(((int_32)*($4 + [64]) != (int_32)*($4 + [60])), [8581])
	CALL memcpy(($4 + [92]), *($4 + [60]), [1])
	$3 = (*($4 + [60]) + [1])
	*($4 + [60]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [64]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy((($4 + [72]) + [24]), *($4 + [60]), [8])
	*($4 + [60]) = (*($4 + [60]) + [8])
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $16(($4 + [128]), ($4 + [72]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $47($2)
	
.LABEL $label$4
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [88])))
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return [1]
}

int_32 .FUNC $36 ()
{
	return [8996]
}

void .FUNC $37 (int_32 $0)
{
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $35 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $31 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}