(data (i32.const 8192) "active\00")
(data (i32.const 8199) "Task not found\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8300) "User is not owner of task\00")
(data (i32.const 8326) "task status doesnt allow to delete it\00")
(data (i32.const 8364) "transfer\00")
(data (i32.const 8373) "Job removed.\00")
(data (i32.const 8386) "user cant edit status\00")
(data (i32.const 8408) "user cant edit data\00")
(data (i32.const 8428) "status is not pending\00")
(data (i32.const 8450) "Must be owner\00")
(data (i32.const 8464) "worker account does not exist\00")
(data (i32.const 8494) "status is not TASK_STATUS::PENDING\00")
(data (i32.const 8529) "Must be reviewer\00")
(data (i32.const 8546) "status is not TASK_STATUS::APPROVED\00")
(data (i32.const 8582) "Worker is not found\00")
(data (i32.const 8602) "Job claimed.\00")
(data (i32.const 8615) "Reviewer is already set\00")
(data (i32.const 8639) "status is not TASK_STATUS::ON_REVIEW\00")
(data (i32.const 8676) "Reviewer is not in job\00")
(data (i32.const 8699) "reviewer account does not exist\00")
(data (i32.const 8731) "hash should be more than 0 characters long\00")
(data (i32.const 8774) "url should be more than 0 characters long\00")
(data (i32.const 8816) "invalid quantity\00")
(data (i32.const 8833) "must be positive amount\00")
(data (i32.const 8857) "hash should be more than 46 characters long\00")
(data (i32.const 8901) "url should be less than 255 characters long\00")
(data (i32.const 8945) "You haven\'t paid.\00")
(data (i32.const 8963) "Not enough balance\00")
(data (i32.const 8982) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9041) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9093) "error reading iterator\00")
(data (i32.const 9116) "nebulasystem\00")
(data (i32.const 9129) "ecafecafecaf\00")
(data (i32.const 9142) "read\00")
(data (i32.const 9147) "get\00")
(data (i32.const 9151) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9205) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9253) "cannot create objects in table of another contract\00")
(data (i32.const 9304) "write\00")
(data (i32.const 9310) "object passed to erase is not in multi_index\00")
(data (i32.const 9355) "cannot erase objects in table of another contract\00")
(data (i32.const 9405) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9458) "object passed to modify is not in multi_index\00")
(data (i32.const 9504) "cannot modify objects in table of another contract\00")
(data (i32.const 9555) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9614) "attempt to subtract asset with different symbol\00")
(data (i32.const 9662) "subtraction underflow\00")
(data (i32.const 9684) "subtraction overflow\00")
(data (i32.const 9705) "string is too long to be a valid name\00")
(data (i32.const 9743) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9810) "character is not in allowed character set for names\00")
(data (i32.const 9862) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9913) "cannot pass end iterator to modify\00")
(data (i32.const 9948) "attempt to add asset with different symbol\00")
(data (i32.const 9991) "addition underflow\00")
(data (i32.const 10010) "addition overflow\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "require_recipient" (func $fimport$1 (param i64)))
(import "env" "is_account" (func $fimport$2 (param i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$6 (result i64)))
(import "env" "memcpy" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$8 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "db_remove_i64" (func $fimport$11 (param i32)))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$15 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$17 (result i64)))
(import "env" "abort" (func $fimport$18))
(import "env" "memset" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$21 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$32 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$33 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$36 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$38 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$39 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$40 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $44))
(export "_ZdlPv" (func $77))
(export "_Znwj" (func $75))
(export "_Znaj" (func $76))
(export "_ZdaPv" (func $78))
(export "_ZnwjSt11align_val_t" (func $79))
(export "_ZnajSt11align_val_t" (func $80))
(export "_ZdlPvSt11align_val_t" (func $81))
(export "_ZdaPvSt11align_val_t" (func $82))
(table $0 13 13 anyfunc)
(elem (i32.const 1) $38 $13 $22 $1 $32 $28 $26 $16 $34 $30 $11 $36)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18444))
(global $global$2 i32 (i32.const 18444))


int_32 .FUNC $94 (int_32 $0)
{
	return CALL $95([10048], $0)
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $96($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8214])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $96 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10040]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10044])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10040]) = [1]
	$2 = ($2 << [16])
	*([0] + [10044]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10044])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10044]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10040]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10040]) = [1]
	$3 = ($3 << [16])
	*([0] + [10044]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10044])
	
.LABEL $label$10
	*([0] + [10044]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $97 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18432])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18240]
	$3 = (((int_32)$1 * (int_32)[12]) + [18240])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $90 (int_32 $0)
{
}

int_32 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $89())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $93($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $94($1)
	
.LABEL $label$2
	*(CALL $89()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $94(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $97($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $38 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL require_auth($1)
	$5 = CALL $17(($0 + [72]), $2, [8199])
	CALL eosio_assert(((int_32)*($5 + [104]) == (int_32)[4]), [8639])
	CALL eosio_assert(((int_64)*($5 + [112]) == (int_64)$1), [8676])
	$5 = *($5 + [72])
	$6 = *($0)
	*($4 + [48]) = [8192]
	*($4 + [52]) = CALL $91([8192])
	*($4 + [32]) = *($4 + [48])
	*($4 + [56]) = *(CALL $9(($4 + [72]), ($4 + [32])))
	*($4 + [48]) = $1
	*((($0 = CALL _Znwj([16])) + [8])) = *($4 + [56])
	*($0) = *($4 + [48])
	*(($7 = (($4 + [64]) + [6]))) = *((($4 + [41]) + [6]))
	*(($8 = (($4 + [64]) + [4]))) = *((($4 + [41]) + [4]))
	*(($4 + [95])) = *($7)
	*(($4 + [93])) = *($8)
	*((($4 + [8]) + [8])) = $2
	*($4 + [88]) = ( [2] ? [6] : ((uint_32)$5 > (uint_32)$3) )
	$5 = *($4 + [41 align=1])
	*($4 + [89 align=1]) = $5
	*((($4 + [8]) + [16])) = *($4 + [88])
	*($4 + [96]) = $0
	$0 = ($0 + [16])
	*($4 + [100]) = $0
	*($4 + [104]) = $0
	*($4 + [72]) = $1
	*($4 + [80]) = $2
	*($4 + [64]) = $5
	*($4 + [8]) = $1
	CALL $39($6, (int_64)-4417032211186843648, ($4 + [96]), ($4 + [8]))
	$0 = *($4 + [96])
	if ( ($0 == 0) ){ goto $label$1 }
	*($4 + [100]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

int_32 .FUNC $49 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9142])
	CALL memcpy(($4 + [112]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [9142])
	CALL memcpy((($4 + [112]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [9142])
	CALL memcpy((($4 + [112]) + [16]), ($2 + [16]), [8])
	*(($4 + [20])) = ($2 + [24])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	$3 = ($4 + [32])
	$8 = CALL db_find_i64($0, $0, (int_64)9011360703961366528, (int_64)9011360703961366528)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $40($3, $8) + [4]) == (int_32)$3), [9862])
	goto $label$4 
	
.LABEL $label$5
	*($4 + [142]) = [1029]
	CALL $41($3, ($4 + [142]), $0)
	
.LABEL $label$4
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *(($4 + [128]))
	$1 = *(($4 + [120]))
	$9 = *($4 + [112])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $97($2)
	
.LABEL $label$7
	CALL $54(($4 + [96]))
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$8 }
	$6 = ($4 + [60])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($4 + [56]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $5
	
.LABEL $label$9
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$global$0 = ($4 + [144])
	return [1]
}

int_32 .FUNC $48 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [128]) = (int_64)0
	*($4 + [120]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9142])
	CALL memcpy(($4 + [120]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9142])
	CALL memcpy((($4 + [120]) + [8]), ($2 + [8]), [8])
	*(($4 + [28])) = ($2 + [16])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	$3 = ($4 + [40])
	$8 = CALL db_find_i64($0, $0, (int_64)9011360703961366528, (int_64)9011360703961366528)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $40($3, $8) + [4]) == (int_32)$3), [9862])
	goto $label$4 
	
.LABEL $label$5
	*($4 + [142]) = [1029]
	CALL $41($3, ($4 + [142]), $0)
	
.LABEL $label$4
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *(($4 + [128]))
	$1 = *($4 + [120])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $97($2)
	
.LABEL $label$7
	CALL $54(($4 + [104]))
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$8 }
	$6 = ($4 + [68])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($4 + [64]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $5
	
.LABEL $label$9
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [9253])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([16])
	CALL $74($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)9011360703961366528
	$5 = *($3 + [8])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)9011360703961366528
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [4]) == (int_32)$0), [9458])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9504])
	*($1) = *(*($3))
	CALL eosio_assert([1], [9555])
	CALL eosio_assert([1], [9304])
	CALL memcpy($4, ($1 + [1]), [1])
	CALL eosio_assert([1], [9304])
	CALL memcpy(($4 | [1]), $1, [1])
	CALL db_update_i64(*($1 + [8]), $2, $4, [2])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)9011360703961366528) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)9011360703961366529
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)$0), [9862])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)9011360703961366528, (int_64)9011360703961366528)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $40($0, $4)
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)$0), [9862])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9913])
	CALL $42($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $43($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9093])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $94($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([16])) + [4]) = $0
	*($5) = [1029]
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9142])
	CALL memcpy(($5 + [1]), $2, [1])
	CALL eosio_assert(((int_32)$4 != (int_32)[1]), [9142])
	CALL memcpy($5, ($2 + [1]), [1])
	*($5 + [8]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)9011360703961366528
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)9011360703961366528
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $73(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $97($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $47 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [320])
	$global$0 = $3
	*(($4 = $3) + [264]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [160]) + [24])) = (int_64)0
	*((($4 + [160]) + [32])) = (int_64)0
	*((($4 + [160]) + [48])) = [0]
	*((($4 + [160]) + [64])) = (int_64)0
	*(($3 = (($4 + [160]) + [96]))) = (int_64)0
	*(($6 = (($4 + [160]) + [88]))) = (int_64)0
	*(($7 = (($4 + [160]) + [80]))) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [200]) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [232]) = [1]
	*($4 + [304]) = [9116]
	*($4 + [308]) = CALL $91([9116])
	*($4 + [8]) = *($4 + [304])
	*($7) = *(CALL $9(($4 + [32]), ($4 + [8])))
	*($4 + [304]) = [9129]
	*($4 + [308]) = CALL $91([9129])
	*($4) = *($4 + [304])
	$8 = *(CALL $9(($4 + [32]), $4))
	*($3) = [1]
	*($6) = $8
	*($4 + [148]) = $2
	*($4 + [144]) = $2
	*($4 + [152]) = ($2 + $5)
	*($4 + [304]) = ($4 + [144])
	*($4 + [32]) = ($4 + [160])
	CALL $52(($4 + [32]), ($4 + [304]))
	*(($3 = (($4 + [16]) + [8]))) = *($4 + [152])
	*($4 + [16]) = *($4 + [144])
	$3 = *($3)
	*((($4 + [272]) + [8])) = $3
	*(($6 = (($4 + [288]) + [8]))) = $3
	$8 = *($4 + [16])
	*($4 + [288]) = $8
	*($4 + [272]) = $8
	$3 = *($6)
	*((($4 + [304]) + [8])) = $3
	*((($4 + [32]) + [24])) = $3
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$1 = *($4 + [288])
	*($4 + [48]) = $1
	*($4 + [304]) = $1
	*(($4 + [72])) = $0
	*((($4 + [32]) + [48])) = (int_64)-1
	*(($4 + [88])) = (int_64)0
	*((($4 + [32]) + [64])) = [0]
	*((($4 + [32]) + [80])) = $0
	*((($4 + [32]) + [88])) = (int_64)-1
	*((($4 + [32]) + [96])) = (int_64)0
	*(($4 + [136])) = [0]
	*($4 + [64]) = $0
	*($4 + [104]) = $0
	$3 = (($4 + [32]) + [32])
	$6 = CALL db_find_i64($0, $0, (int_64)9011360703961366528, (int_64)9011360703961366528)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $40($3, $6) + [4]) == (int_32)$3), [9862])
	goto $label$4 
	
.LABEL $label$5
	*($4 + [304]) = [1029]
	CALL $41($3, ($4 + [304]), $0)
	
.LABEL $label$4
	*($4 + [308]) = ($4 + [264])
	*($4 + [304]) = ($4 + [32])
	CALL $53(($4 + [304]), ($4 + [160]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $97($2)
	
.LABEL $label$6
	CALL $54(($4 + [128]))
	$3 = *(($4 + [88]))
	if ( ($3 == 0) ){ goto $label$7 }
	$6 = ($4 + [92])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($4 + [88]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( (*($4 + [200]) & [1]) ){ goto $label$16 }
	if ( (*($4 + [188]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [208])))
	if ( ((*($4 + [188]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($4 + [196])))
	$2 = [1]
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$2 = [1]
	if ( (*($4 + [176]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	$global$0 = ($4 + [320])
	return $2
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [184])))
	$global$0 = ($4 + [320])
	return $2
}

int_32 .FUNC $46 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [256])
	$global$0 = $3
	*(($4 = $3) + [200]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [152]) + [24])) = (int_64)0
	*((($4 + [152]) + [40])) = [0]
	*($4 + [160]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [140]) = $2
	*($4 + [136]) = $2
	*($4 + [144]) = ($2 + $5)
	*($4 + [240]) = ($4 + [136])
	*($4 + [24]) = ($4 + [152])
	CALL $59(($4 + [24]), ($4 + [240]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [144])
	*($4 + [8]) = *($4 + [136])
	$3 = *($3)
	*((($4 + [208]) + [8])) = $3
	*(($6 = (($4 + [224]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [224]) = $7
	*($4 + [208]) = $7
	$3 = *($6)
	*((($4 + [240]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [224])
	*($4 + [40]) = $1
	*($4 + [240]) = $1
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	$3 = ($4 + [56])
	$6 = CALL db_find_i64($0, $0, (int_64)9011360703961366528, (int_64)9011360703961366528)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $40($3, $6) + [4]) == (int_32)$3), [9862])
	goto $label$4 
	
.LABEL $label$5
	*($4 + [240]) = [1029]
	CALL $41($3, ($4 + [240]), $0)
	
.LABEL $label$4
	*($4 + [244]) = ($4 + [200])
	*($4 + [240]) = ($4 + [24])
	CALL $60(($4 + [240]), ($4 + [152]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $97($2)
	
.LABEL $label$6
	CALL $54(($4 + [120]))
	$3 = *(($4 + [80]))
	if ( ($3 == 0) ){ goto $label$7 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($4 + [80]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((*($4 + [184]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [192])))
	
.LABEL $label$12
	$global$0 = ($4 + [256])
	return [1]
}

int_32 .FUNC $45 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9142])
	CALL memcpy(($4 + [112]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9142])
	CALL memcpy((($4 + [112]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [9142])
	CALL memcpy((($4 + [112]) + [16]), ($2 + [16]), [1])
	*(($4 + [20])) = ($2 + [17])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	$3 = ($4 + [32])
	$8 = CALL db_find_i64($0, $0, (int_64)9011360703961366528, (int_64)9011360703961366528)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $40($3, $8) + [4]) == (int_32)$3), [9862])
	goto $label$4 
	
.LABEL $label$5
	*($4 + [142]) = [1029]
	CALL $41($3, ($4 + [142]), $0)
	
.LABEL $label$4
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *(($4 + [128]))
	$0 = *(($4 + [120]))
	$1 = *($4 + [112])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($8 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $97($2)
	
.LABEL $label$7
	CALL $54(($4 + [96]))
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$8 }
	$6 = ($4 + [60])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($4 + [56]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $5
	
.LABEL $label$9
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$12 }
	if ( ((int_64)$2 <= (int_64)-4416964304264757249) ){ goto $label$11 }
	if ( ((int_64)$2 > (int_64)3626404174079459327) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-4416964304264757248) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-3075276121784614912) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-2507766120631500800) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [1]
	*($3 + [72]) = *($3 + [136])
	CALL $45($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [208]) = [8364]
	*($3 + [212]) = CALL $91([8364])
	*($3 + [104]) = *($3 + [208])
	CALL $9(($3 + [216]), ($3 + [104]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [2]
	*($3 + [96]) = *($3 + [112])
	CALL $46($0, (int_64)6138663591592764928, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 <= (int_64)-4997502814012571649) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-4997502814012571648) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-4417057695104586240) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4417032211186843648) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [3]
	*($3 + [32]) = *($3 + [176])
	CALL $45($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)3626404174113013760) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)3626404174079459328) ){ goto $label$1 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [4]
	*($3 + [8]) = *($3 + [200])
	CALL $47($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-4999377774400793152) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-4999377771550736384) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [5]
	*($3 + [56]) = *($3 + [152])
	CALL $48($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [172]) = [0]
	*($3 + [168]) = [6]
	*($3 + [40]) = *($3 + [168])
	CALL $49($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [164]) = [0]
	*($3 + [160]) = [7]
	*($3 + [48]) = *($3 + [160])
	CALL $50($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [188]) = [0]
	*($3 + [184]) = [8]
	*($3 + [24]) = *($3 + [184])
	CALL $48($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [148]) = [0]
	*($3 + [144]) = [9]
	*($3 + [64]) = *($3 + [144])
	CALL $49($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [124]) = [0]
	*($3 + [120]) = [10]
	*($3 + [88]) = *($3 + [120])
	CALL $48($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [196]) = [0]
	*($3 + [192]) = [11]
	*($3 + [16]) = *($3 + [192])
	CALL $51($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [132]) = [0]
	*($3 + [128]) = [12]
	*($3 + [80]) = *($3 + [128])
	CALL $48($1, $1, ($3 + [80]))
	
.LABEL $label$1
	CALL $90([0])
	$global$0 = ($3 + [224])
}

void .FUNC $8 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9458])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9504])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [9614])
	$6 = (int_64)
	*($1) = $6(*($1) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9662])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9684])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [9555])
	CALL eosio_assert([1], [9304])
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [9304])
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9705])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9810])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9743])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9810])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $6 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [9253])
	*($4 + [28]) = $3
	*($4 + [24]) = $1
	*($4 + [32]) = ($4 + [40])
	*(($3 = CALL _Znwj([152])) + [8]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = [1]
	*($4 + [48]) = [9116]
	*($4 + [52]) = CALL $91([9116])
	*($4 + [16]) = *($4 + [48])
	*($3 + [80]) = *(CALL $9(($4 + [56]), ($4 + [16])))
	*($4 + [48]) = [9129]
	*($4 + [52]) = CALL $91([9129])
	*($4 + [8]) = *($4 + [48])
	$2 = *(CALL $9(($4 + [56]), ($4 + [8])))
	*($3 + [96]) = [1]
	*($3 + [88]) = $2
	*($3 + [112]) = (int_64)0
	*($3 + [120]) = (int_64)0
	*($3 + [136 align=1]) = [0]
	*($3 + [140]) = $1
	CALL $61(($4 + [24]), $3)
	*($4 + [56]) = $3
	$2 = *($3)
	*($4 + [24]) = $2
	$5 = *($3 + [144])
	*($4 + [48]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [56]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $62(($1 + [24]), ($4 + [56]), ($4 + [24]), ($4 + [48]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($3 + [40]) & [1]) ){ goto $label$8 }
	if ( (*($3 + [28]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [48])))
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [36])))
	if ( (*($3 + [16]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9310])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9355])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9405])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9093])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $94($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([152])) + [8]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = [1]
	*($3 + [48]) = [9116]
	*($3 + [52]) = CALL $91([9116])
	*($3 + [16]) = *($3 + [48])
	*($5 + [80]) = *(CALL $9(($3 + [56]), ($3 + [16])))
	*($3 + [48]) = [9129]
	*($3 + [52]) = CALL $91([9129])
	*($3 + [8]) = *($3 + [48])
	$6 = *(CALL $9(($3 + [56]), ($3 + [8])))
	*($5 + [96]) = [1]
	*($5 + [88]) = $6
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [136 align=1]) = [0]
	*($5 + [140]) = $0
	CALL $63(($3 + [32]), $5)
	*($5 + [144]) = $1
	*($3 + [48]) = $5
	$6 = *($5)
	*($3 + [56]) = $6
	*($3 + [28]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [48]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $62(($0 + [24]), ($3 + [48]), ($3 + [56]), ($3 + [28]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $97($2)
	
.LABEL $label$6
	$1 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [40]) & [1]) ){ goto $label$14 }
	if ( (*($1 + [28]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [48])))
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [36])))
	if ( (*($1 + [16]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $5 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [144]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9205])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3913333407068717056)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9151])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9151])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $4(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_64 .FUNC $2 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$8 = ($global$0 - [176])
	$global$0 = $8
	*($8 + [120]) = $1
	*($8 + [112]) = $2
	CALL require_auth($1)
	CALL require_recipient(*($7 + [8]))
	CALL eosio_assert(CALL $fimport$2($2), [8699])
	$9 = *($3)
	if ( ($9 & [1]) ){ goto $label$2 }
	$9 = uint_32($9 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$9 = *($3 + [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8731])
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$4 }
	$9 = uint_32($9 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$9 = *($4 + [4])
	
.LABEL $label$3
	$10 = [0]
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8774])
	$11 = *($6)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$5 }
	$2 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$12 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$2 = $12
	$10 = [1]
	$13 = $9
	$9 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$2 = $12
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$10 = ((int_32)$9 < (int_32)[6])
	$13 = ($9 + [1])
	$9 = $13
	if ( $10 ){ goto $label$9 }
	$10 = [1]
	$9 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$10 = [0]
	
.LABEL $label$5
	CALL eosio_assert($10, [8816])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [8833])
	$9 = *($3)
	if ( ($9 & [1]) ){ goto $label$11 }
	$9 = uint_32($9 >> [1])
	goto $label$10 
	
.LABEL $label$11
	$9 = *($3 + [4])
	
.LABEL $label$10
	CALL eosio_assert(($9 <= [47]), [8857])
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$13 }
	$9 = uint_32($9 >> [1])
	goto $label$12 
	
.LABEL $label$13
	$9 = *($4 + [4])
	
.LABEL $label$12
	CALL eosio_assert(($9 <= [256]), [8901])
	*(($8 + [104])) = [0]
	*($8 + [80]) = $1
	$1 = (int_64)0
	*($8 + [96]) = (int_64)0
	*($8 + [72]) = *($0)
	$2 = *($6 + [8])
	*($8 + [88]) = (int_64)-1
	$9 = CALL $3(($8 + [72]), (uint_64)$2 >> (uint_64)(int_64)8), [8945]
	CALL eosio_assert(((int_64)$2 == (int_64)*($9) + [8])), [8982])
	CALL eosio_assert(((int_64)$11 <= (int_64)*($9)), [8963])
	$10 = ($0 + [72])
	$13 = ($0 + [88])
	$2 = *($13)
	if ( ((int_64)$2 != (int_64)-1) ){ goto $label$14 }
	$14 = CALL db_lowerbound_i64(*($10), *(($0 + [80])), (int_64)-3913333407068717056, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$15 }
	CALL $4($10, $14)
	*($8 + [132]) = [0]
	*($8 + [128]) = $10
	$2 = *(*(CALL $5(($8 + [128])) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*(($0 + [88])) = $1
	$2 = $1
	
.LABEL $label$14
	CALL eosio_assert((uint_64)($2 <= (int_64)-2), [9041])
	*($8 + [64]) = *($13)
	$2 = *($8 + [120])
	*($8 + [132]) = $5
	*($8 + [140]) = $3
	*($8 + [144]) = $4
	*($8 + [148]) = $7
	*($8 + [128]) = ($8 + [64])
	*($8 + [136]) = ($8 + [120])
	*($8 + [156]) = ($8 + [112])
	*($8 + [152]) = $6
	CALL $6(($8 + [48]), $10, $2, ($8 + [128]))
	CALL eosio_assert(((int_64)*(($6 + [8])) == (int_64)*(($9 + [8]))), [8982])
	if ( ((int_64)*($6) != (int_64)*($9)) ){ goto $label$17 }
	CALL $7(($8 + [72]), $9)
	goto $label$16 
	
.LABEL $label$17
	*($8 + [128]) = $6
	CALL $8(($8 + [72]), $9, (int_64)0, ($8 + [128]))
	
.LABEL $label$16
	$2 = *($0)
	$1 = *($8 + [120])
	*($8 + [48]) = [8192]
	*($8 + [52]) = CALL $91([8192])
	*($8 + [8]) = *($8 + [48])
	*($8 + [56]) = *(CALL $9(($8 + [128]), ($8 + [8])))
	*($8 + [48]) = $1
	*((($9 = CALL _Znwj([16])) + [8])) = *($8 + [56])
	*($9) = *($8 + [48])
	*($8 + [16]) = *($8 + [120])
	*($8 + [24]) = *($8 + [64])
	CALL $84((($8 + [16]) + [16]), $5)
	$10 = (($8 + [16]) + [24])
	*(($13 = (($8 + [128]) + [24]))) = *($10)
	*($10) = [0]
	$10 = ($9 + [16])
	*($8 + [164]) = $10
	*($8 + [160]) = $9
	*($8 + [168]) = $10
	*($8 + [128]) = *($8 + [16])
	*($8 + [136]) = *($8 + [24])
	*($8 + [144]) = *($8 + [32])
	*($8 + [32]) = (int_64)0
	CALL $10($2, (int_64)-4417217046090088448, ($8 + [160]), ($8 + [128]))
	if ( ((*($8 + [144]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($13))
	
.LABEL $label$18
	$9 = *($8 + [160])
	if ( ($9 == 0) ){ goto $label$19 }
	*($8 + [164]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$19
	if ( ((*(($8 + [32])) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($8 + [40])))
	
.LABEL $label$20
	$2 = *($8 + [64])
	$13 = *($8 + [96])
	if ( ($13 == 0) ){ goto $label$21 }
	$6 = ($8 + [100])
	$9 = *($6)
	if ( ((int_32)$9 == (int_32)$13) ){ goto $label$23 }
	
.LOOP $label$24:
	$9 = ($9 + [-24])
	$10 = *($9)
	*($9) = [0]
	if ( ($10 == 0) ){ goto $label$25 }
	CALL _ZdlPv($10)
	
.LABEL $label$25
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$24 }
	$9 = *(($8 + [96]))
	goto $label$22 
	
.LABEL $label$23
	$9 = $13
	
.LABEL $label$22
	*($6) = $13
	CALL _ZdlPv($9)
	
.LABEL $label$21
	$global$0 = ($8 + [176])
	return $2
}

int_32 .FUNC $3 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9862])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $14($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9862])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$8 = ($global$0 - [144])
	$global$0 = $8
	$3 = CALL $84(($8 + [128]), $3)
	$4 = CALL $84(($8 + [112]), $4)
	$5 = CALL $84(($8 + [96]), $5)
	$9 = *(($6 + [8]))
	*((($8 + [80]) + [8])) = $9
	$10 = *(($7 + [24]))
	$11 = *(($7 + [16]))
	$12 = *(($7 + [8]))
	$13 = *($7)
	$14 = *($6)
	*((($8 + [32]) + [8])) = $9
	*(($8 + [8])) = $12
	*(($8 + [16])) = $11
	*((($8 + [48]) + [8])) = $12
	*((($8 + [48]) + [16])) = $11
	*(($8 + [24])) = $10
	*((($8 + [48]) + [24])) = $10
	*($8 + [80]) = $14
	*($8 + [32]) = $14
	*($8) = $13
	*($8 + [48]) = $13
	CALL $2($0, $1, $2, $3, $4, $5, ($8 + [32]), $8)
	if ( (*($5) & [1]) ){ goto $label$5 }
	if ( (*($4) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($8 + [144])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($8 + [144])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9093])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $94($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9142])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9142])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $15(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $97($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL require_auth($1)
	$4 = ($0 + [72])
	$5 = CALL $17($4, $2, [8199])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)$1), [8300])
	$6 = *($5 + [104])
	CALL eosio_assert((((int_32)$6 == (int_32)[7]) | ((($6 + [-1]) & [255]) <= [2])), [8326])
	CALL $18($4, $5)
	if ( ((int_32)*($5 + [104]) == (int_32)[7]) ){ goto $label$2 }
	$2 = *($0)
	*($3 + [88]) = [8192]
	*($3 + [92]) = CALL $91([8192])
	*($3 + [16]) = *($3 + [88])
	$7 = *(CALL $9(($3 + [40]), ($3 + [16])))
	*($3 + [88]) = [8364]
	*($3 + [92]) = CALL $91([8364])
	*($3 + [8]) = *($3 + [88])
	$8 = *(CALL $9(($3 + [40]), ($3 + [8])))
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$4 = CALL $91([8373])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = ($5 + [56])
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [24]) = ($4 << [1])
	$5 = (($3 + [24]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($3 + [24]) = ($9 | [1])
	*($3 + [32]) = $5
	*($3 + [28]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [8373], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	*((($3 + [40]) + [24])) = *(($6 + [8]))
	$5 = (($3 + [24]) + [8])
	*(($3 + [80])) = *($5)
	*($5) = [0]
	*($3 + [48]) = $1
	*($3 + [88]) = (int_64)6138663591592764928
	*($3 + [96]) = $8
	*($3 + [40]) = *($0)
	*($3 + [56]) = *($6)
	*($3 + [72]) = *($3 + [24])
	*($3 + [24]) = (int_64)0
	*(($5 = CALL _Znwj([16]))) = $2
	*($5 + [8]) = $7
	*((($3 + [88]) + [36])) = [0]
	$0 = ($5 + [16])
	*((($3 + [88]) + [24])) = $0
	*(($3 + [108])) = $0
	*($3 + [104]) = $5
	*($3 + [116 align=4]) = (int_64)0
	$5 = *($3 + [72])
	$0 = ( *((($3 + [40]) + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($0 + [32])
	$1 = (CASTING uint_64)(uint_32 $0)
	$0 = ($3 + [116])
	
.LOOP $label$6:
	$5 = ($5 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$8 }
	CALL $19($0, $5)
	$0 = *(($3 + [120]))
	$5 = *(($3 + [116]))
	goto $label$7 
	
.LABEL $label$8
	$0 = [0]
	$5 = [0]
	
.LABEL $label$7
	*($3 + [148]) = $5
	*($3 + [144]) = $5
	*($3 + [152]) = $0
	*($3 + [128]) = ($3 + [144])
	*($3 + [136]) = ($3 + [40])
	CALL $20(($3 + [136]), ($3 + [128]))
	CALL $21(($3 + [144]), ($3 + [88]))
	$5 = *($3 + [144])
	CALL send_inline($5, (*($3 + [148]) - $5))
	$5 = *($3 + [144])
	if ( ($5 == 0) ){ goto $label$9 }
	*($3 + [148]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$5 = *($3 + [116])
	if ( ($5 == 0) ){ goto $label$10 }
	*(($3 + [120])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$5 = *($3 + [104])
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [108])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((*(($3 + [72])) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [80])))
	
.LABEL $label$12
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$2
	$global$0 = ($3 + [160])
	return (unreachable)
	
.LABEL $label$1
	CALL $83(($3 + [24]))
}

int_32 .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$0), [9862])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3913333407068717056, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $4($0, $4)
	CALL eosio_assert(((int_32)*($5 + [140]) == (int_32)$0), [9862])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $10 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*((($4 + [24]) + [20])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [16])
	$2 = ( *(($3 + [20])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [16])
	$0 = (CASTING uint_64)(uint_32 $2)
	$5 = ($3 + [16])
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $19($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [64]) = $7
	*($4 + [72]) = $2
	$2 = ($2 - $7)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [9304])
	CALL memcpy($7, $3, [8])
	CALL eosio_assert(((int_32)($2 + [-8]) > (int_32)[7]), [9304])
	CALL memcpy(($7 + [8]), ($3 + [8]), [8])
	*($4 + [68]) = ($7 + [16])
	CALL $68(($4 + [64]), $5)
	CALL $21(($4 + [64]), ($4 + [24]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $88(($4 + [8]))
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$9 = ($global$0 - [240])
	$global$0 = $9
	$4 = CALL $84(($9 + [184]), $4)
	$5 = CALL $84(($9 + [168]), $5)
	$6 = CALL $84(($9 + [152]), $6)
	$10 = *(($7 + [8]))
	*((($9 + [136]) + [8])) = $10
	$11 = *(($8 + [24]))
	$12 = *(($8 + [16]))
	$13 = *(($8 + [8]))
	$14 = *($8)
	$15 = *($7)
	*((($9 + [72]) + [8])) = $10
	*((($9 + [40]) + [8])) = $13
	*((($9 + [40]) + [16])) = $12
	*((($9 + [104]) + [8])) = $13
	*((($9 + [104]) + [16])) = $12
	*((($9 + [40]) + [24])) = $11
	*((($9 + [104]) + [24])) = $11
	*($9 + [136]) = $15
	*($9 + [72]) = $15
	*($9 + [40]) = $14
	*($9 + [104]) = $14
	$11 = CALL $2($0, $1, $2, $4, $5, $6, ($9 + [72]), ($9 + [40]))
	if ( (*($6) & [1]) ){ goto $label$5 }
	if ( (*($5) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( (*($4) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$1
	$12 = *($0)
	*($9 + [88]) = [8192]
	*($9 + [92]) = CALL $91([8192])
	*($9 + [32]) = *($9 + [88])
	*($9 + [96]) = *(CALL $9(($9 + [200]), ($9 + [32])))
	*($9 + [88]) = $1
	*((($8 = CALL _Znwj([16])) + [8])) = *($9 + [96])
	*($8) = *($9 + [88])
	*((($9 + [8]) + [8])) = $11
	*((($9 + [8]) + [16])) = $3
	$4 = ($8 + [16])
	*($9 + [228]) = $4
	*($9 + [224]) = $8
	*($9 + [232]) = $4
	*($9 + [200]) = $1
	*($9 + [208]) = $11
	*($9 + [216]) = $3
	*($9 + [8]) = $1
	CALL $12($12, (int_64)-4416964304264757248, ($9 + [224]), ($9 + [8]))
	$8 = *($9 + [224])
	if ( ($8 == 0) ){ goto $label$6 }
	*($9 + [228]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$6
	$global$0 = ($9 + [240])
}

void .FUNC $12 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*((($4 + [24]) + [24])) = $5
	*((($4 + [8]) + [8])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $19(($4 + [52]), [24])
	$7 = *($4 + [52])
	$2 = (*(($4 + [56])) - $7)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [9304])
	CALL memcpy($7, $3, [8])
	CALL eosio_assert(((int_32)($2 + [-8]) > (int_32)[7]), [9304])
	CALL memcpy(($7 + [8]), ($3 + [8]), [8])
	CALL eosio_assert(((int_32)($2 + [-16]) > (int_32)[7]), [9304])
	CALL memcpy(($7 + [16]), ($3 + [16]), [8])
	CALL $21(($4 + [64]), ($4 + [24]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $88(($4 + [8]))
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [80])
	$global$0 = $5
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$1 }
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	*($5 + [24]) = (int_64)0
	$6 = *($3 + [8])
	*($5 + [8]) = $1
	*($5) = $2
	$7 = CALL db_find_i64($2, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$7) < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $14($5, $7)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$5), [9862])
	CALL eosio_assert([1], [9913])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$5), [9458])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$6()), [9504])
	$2 = *($0 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$2), [9948])
	$1 = ((int_64)*($0) + (int_64)*($3))
	*($0) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9991])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [10010])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$2) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [9555])
	CALL eosio_assert([1], [9304])
	CALL memcpy(($5 + [48]), $0, [8])
	*($5 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [9304])
	CALL memcpy((($5 + [48]) | [8]), ($5 + [72]), [8])
	CALL db_update_i64(*($0 + [20]), (int_64)0, ($5 + [48]), [16])
	$0 = ($5 + [16])
	if ( (uint_64)($2 <= *($0)) ){ goto $label$3 }
	*($0) = ((int_64)$2 + (int_64)1)
	$7 = *($5 + [24])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$1 = *($0)
	CALL eosio_assert(((int_64)CALL $fimport$6() == (int_64)$2), [9253])
	*(($0 = CALL _Znwj([32])) + [16]) = $5
	*($0 + [8]) = *(($3 + [8]))
	*($0) = *($3)
	CALL eosio_assert([1], [9304])
	CALL memcpy(($5 + [48]), $0, [8])
	*($5 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [9304])
	CALL memcpy((($5 + [48]) | [8]), ($5 + [72]), [8])
	$2 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*(($5 + [8])), (int_64)3607749779137757184, $1, $2), ($5 + [48]), [16]
	*($0 + [20]) = $7)
	$3 = ($5 + [16])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$5 }
	*($3) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$5
	*($5 + [72]) = $0
	$2 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	*($5 + [48]) = $2)
	*($5 + [44]) = $7
	$8 = ($5 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($5 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($5 + [72]) = [0]
	*($3) = $0
	*($8) = ($3 + [24])
	$0 = *($5 + [72])
	*($5 + [72]) = [0]
	if ( $0 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $15(($5 + [24]), ($5 + [72]), ($5 + [48]), ($5 + [44]))
	$0 = *($5 + [72])
	*($5 + [72]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$7 = *($5 + [24])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($5 + [28])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($5 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $7
	
.LABEL $label$8
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($5 + [80])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $94($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10028])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $94($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [9310])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9355])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9405])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [48])))
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [36])))
	if ( (*($3 + [16]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($5 + [48])))
	if ( ((*($5 + [28]) & [1]) == 0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((*($5 + [28]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [36])))
	if ( (*($5 + [16]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$17
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$15 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [144]))
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $88($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$1 = CALL $84($2, ($1 + [16]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$5 = CALL $84(($2 + [16]), $1)
	CALL void $6((int_32 $4), (int_64 $3), (int_64 $5), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9142])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9142])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9142])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9142])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $57(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $50 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [240])
	$global$0 = $3
	*(($4 = $3) + [184]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [152]) + [24])) = [0]
	*($4 + [160]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [144]) = ($2 + $5)
	*($4 + [136]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9142])
	CALL memcpy(($4 + [152]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [9142])
	CALL memcpy((($4 + [152]) + [8]), ($2 + [8]), [8])
	*($4 + [140]) = ($2 + [16])
	CALL $57(($4 + [136]), (($4 + [152]) + [16]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [144])
	*($4 + [8]) = *($4 + [136])
	$3 = *($3)
	*((($4 + [192]) + [8])) = $3
	*(($6 = (($4 + [208]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [208]) = $7
	*($4 + [192]) = $7
	$3 = *($6)
	*((($4 + [224]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [208])
	*($4 + [40]) = $1
	*($4 + [224]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	$3 = ($4 + [56])
	$6 = CALL db_find_i64($0, $0, (int_64)9011360703961366528, (int_64)9011360703961366528)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $40($3, $6) + [4]) == (int_32)$3), [9862])
	goto $label$4 
	
.LABEL $label$5
	*($4 + [224]) = [1029]
	CALL $41($3, ($4 + [224]), $0)
	
.LABEL $label$4
	*($4 + [228]) = ($4 + [184])
	*($4 + [224]) = ($4 + [24])
	CALL $58(($4 + [224]), ($4 + [152]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $97($2)
	
.LABEL $label$6
	CALL $54(($4 + [120]))
	$3 = *(($4 + [80]))
	if ( ($3 == 0) ){ goto $label$7 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($4 + [80]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((*($4 + [168]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [176])))
	
.LABEL $label$12
	$global$0 = ($4 + [240])
	return [1]
}

int_32 .FUNC $51 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [336])
	$global$0 = $3
	*(($4 = $3) + [280]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $94($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [168]) + [32])) = (int_64)0
	*((($4 + [168]) + [40])) = (int_64)0
	*((($4 + [168]) + [56])) = [0]
	*(($4 + [240])) = (int_64)0
	*(($3 = (($4 + [168]) + [104]))) = (int_64)0
	*(($6 = (($4 + [168]) + [96]))) = (int_64)0
	*(($7 = (($4 + [168]) + [88]))) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [248]) = [1]
	*($4 + [320]) = [9116]
	*($4 + [324]) = CALL $91([9116])
	*($4 + [16]) = *($4 + [320])
	*($7) = *(CALL $9(($4 + [40]), ($4 + [16])))
	*($4 + [320]) = [9129]
	*($4 + [324]) = CALL $91([9129])
	*($4 + [8]) = *($4 + [320])
	$8 = *(CALL $9(($4 + [40]), ($4 + [8])))
	*($3) = [1]
	*($6) = $8
	*($4 + [156]) = $2
	*($4 + [152]) = $2
	*($4 + [160]) = ($2 + $5)
	*($4 + [320]) = ($4 + [152])
	*($4 + [40]) = ($4 + [168])
	CALL $55(($4 + [40]), ($4 + [320]))
	*(($3 = (($4 + [24]) + [8]))) = *($4 + [160])
	*($4 + [24]) = *($4 + [152])
	$3 = *($3)
	*((($4 + [288]) + [8])) = $3
	*(($6 = (($4 + [304]) + [8]))) = $3
	$8 = *($4 + [24])
	*($4 + [304]) = $8
	*($4 + [288]) = $8
	$3 = *($6)
	*((($4 + [320]) + [8])) = $3
	*(($4 + [64])) = $3
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$1 = *($4 + [304])
	*($4 + [56]) = $1
	*($4 + [320]) = $1
	*((($4 + [40]) + [40])) = $0
	*(($4 + [88])) = (int_64)-1
	*((($4 + [40]) + [56])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*((($4 + [40]) + [88])) = (int_64)-1
	*((($4 + [40]) + [96])) = (int_64)0
	*((($4 + [40]) + [104])) = [0]
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [40]) + [32])
	$6 = CALL db_find_i64($0, $0, (int_64)9011360703961366528, (int_64)9011360703961366528)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $40($3, $6) + [4]) == (int_32)$3), [9862])
	goto $label$4 
	
.LABEL $label$5
	*($4 + [320]) = [1029]
	CALL $41($3, ($4 + [320]), $0)
	
.LABEL $label$4
	*($4 + [324]) = ($4 + [280])
	*($4 + [320]) = ($4 + [40])
	CALL $56(($4 + [320]), ($4 + [168]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $97($2)
	
.LABEL $label$6
	CALL $54(($4 + [136]))
	$3 = *(($4 + [96]))
	if ( ($3 == 0) ){ goto $label$7 }
	$6 = ($4 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($4 + [96]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( (*($4 + [216]) & [1]) ){ goto $label$16 }
	if ( (*($4 + [204]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [224])))
	if ( ((*($4 + [204]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($4 + [212])))
	$2 = [1]
	if ( ((*($4 + [192]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$2 = [1]
	if ( (*($4 + [192]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	$global$0 = ($4 + [336])
	return $2
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [200])))
	$global$0 = ($4 + [336])
	return $2
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9142])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9142])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $57(*($1), ($0 + [16]))
	CALL $57(*($1), ($0 + [28]))
	CALL $57(*($1), ($0 + [40]))
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9142])
	CALL memcpy(($0 + [56]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9142])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [64])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $64(*($1), ($0 + [72]))
	$global$0 = ($2 + [16])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$2 = ($global$0 - [288])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $84(($2 + [128]), ($1 + [16]))
	$6 = CALL $84(($2 + [112]), ($1 + [28]))
	$7 = CALL $84(($2 + [96]), ($1 + [40]))
	*(($8 = (($2 + [80]) + [8]))) = *(($1 + [64]))
	*(($9 = (($2 + [48]) + [8]))) = *(($1 + [80]))
	*(($10 = (($2 + [48]) + [16]))) = *(($1 + [88]))
	*(($11 = (($2 + [48]) + [24]))) = *(($1 + [96]))
	*($2 + [80]) = *($1 + [56])
	*($2 + [48]) = *($1 + [72])
	*((($2 + [160]) + [24])) = *($11)
	*((($2 + [160]) + [16])) = *($10)
	*((($2 + [160]) + [8])) = *($9)
	*((($2 + [144]) + [8])) = *($8)
	*($2 + [160]) = *($2 + [48])
	*($2 + [144]) = *($2 + [80])
	$1 = *($0 + [4])
	$8 = *($1 + [4])
	$0 = (*($0) + int_32($8 >> [1]))
	$1 = *($1)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$8 = CALL $84(($2 + [272]), $5)
	$9 = CALL $84(($2 + [256]), $6)
	$10 = CALL $84(($2 + [240]), $7)
	$12 = *((($2 + [144]) + [8]))
	*((($2 + [224]) + [8])) = $12
	$13 = *((($2 + [160]) + [24]))
	*((($2 + [192]) + [24])) = $13
	$14 = *((($2 + [160]) + [16]))
	*((($2 + [192]) + [16])) = $14
	$15 = *((($2 + [160]) + [8]))
	*((($2 + [192]) + [8])) = $15
	*((($2 + [32]) + [8])) = $12
	*(($2 + [24])) = $13
	*(($2 + [16])) = $14
	*(($2 + [8])) = $15
	$12 = *($2 + [144])
	*($2 + [224]) = $12
	$13 = *($2 + [160])
	*($2 + [192]) = $13
	*($2 + [32]) = $12
	*($2) = $13
	CALL void $0((int_32 $4), (int_64 $3), (int_64 $8), (int_32 $9), (int_32 $10), (int_32 ($2 + [32])), (int_32 $2), (int_32 $1))
	if ( (*($2 + [240]) & [1]) ){ goto $label$12 }
	if ( (*($2 + [256]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($2 + [256]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($9 + [8]))
	$1 = [1]
	if ( ((*($2 + [272]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$1 = [1]
	if ( (*($2 + [272]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($7) & $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($7) & $1) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($7 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($5) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($5 + [8]))
	$global$0 = ($2 + [288])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [288])
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [48])))
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [36])))
	if ( (*($3 + [16]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [8]) = $3
	CALL require_auth($1)
	CALL require_recipient($3)
	$5 = ($0 + [72])
	$0 = CALL $17($5, $2, [8199])
	CALL eosio_assert(((int_32)*($0 + [104]) == (int_32)[1]), [8494])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)$1), [8300])
	CALL eosio_assert(((int_64)*($0 + [112]) != (int_64)$3), [8615])
	*($4) = ($4 + [8])
	CALL $35($5, $0, $4)
	$global$0 = ($4 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$2 = ($global$0 - [288])
	$global$0 = $2
	$3 = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = CALL $84(($2 + [128]), ($1 + [24]))
	$7 = CALL $84(($2 + [112]), ($1 + [36]))
	$8 = CALL $84(($2 + [96]), ($1 + [48]))
	*(($9 = (($2 + [80]) + [8]))) = *(($1 + [72]))
	*(($10 = (($2 + [48]) + [8]))) = *(($1 + [88]))
	*(($11 = (($2 + [48]) + [16]))) = *(($1 + [96]))
	*(($12 = (($2 + [48]) + [24]))) = *(($1 + [104]))
	*($2 + [80]) = *($1 + [64])
	*($2 + [48]) = *($1 + [80])
	*((($2 + [160]) + [24])) = *($12)
	*((($2 + [160]) + [16])) = *($11)
	*((($2 + [160]) + [8])) = *($10)
	*((($2 + [144]) + [8])) = *($9)
	*($2 + [160]) = *($2 + [48])
	*($2 + [144]) = *($2 + [80])
	$1 = *($0 + [4])
	$9 = *($1 + [4])
	$0 = (*($0) + int_32($9 >> [1]))
	$1 = *($1)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$9 = CALL $84(($2 + [272]), $6)
	$10 = CALL $84(($2 + [256]), $7)
	$11 = CALL $84(($2 + [240]), $8)
	$13 = *((($2 + [144]) + [8]))
	*((($2 + [224]) + [8])) = $13
	$14 = *((($2 + [160]) + [24]))
	*((($2 + [192]) + [24])) = $14
	$15 = *((($2 + [160]) + [16]))
	*((($2 + [192]) + [16])) = $15
	$16 = *((($2 + [160]) + [8]))
	*((($2 + [192]) + [8])) = $16
	*((($2 + [32]) + [8])) = $13
	*(($2 + [24])) = $14
	*(($2 + [16])) = $15
	*(($2 + [8])) = $16
	$13 = *($2 + [144])
	*($2 + [224]) = $13
	$14 = *($2 + [160])
	*($2 + [192]) = $14
	*($2 + [32]) = $13
	*($2) = $14
	CALL void $0((int_32 $5), (int_64 $4), (int_64 $3), (int_64 $9), (int_32 $10), (int_32 $11), (int_32 ($2 + [32])), (int_32 $2), (int_32 $1))
	if ( (*($2 + [240]) & [1]) ){ goto $label$12 }
	if ( (*($2 + [256]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($2 + [256]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($10 + [8]))
	$1 = [1]
	if ( ((*($2 + [272]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$1 = [1]
	if ( (*($2 + [272]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($8) & $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($8) & $1) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($8 + [8]))
	$1 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($7) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($6) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($2 + [288])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [288])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $66($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $87($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $87($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $83($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [9458])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9504])
	*($1 + [112]) = *(*($2))
	$4 = *($1)
	CALL eosio_assert([1], [9555])
	*(($2 = $3)) = [0]
	CALL $24($2, $1)
	$5 = *($2)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$3 = CALL $94($5)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = ($3 + $5)
	CALL $25($2, $1)
	CALL db_update_i64(*($1 + [144]), (int_64)0, $3, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $97($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($2 + [16])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [9458])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9504])
	*($1 + [120]) = *(*($2))
	$4 = *($1)
	CALL eosio_assert([1], [9555])
	*(($2 = $3)) = [0]
	CALL $24($2, $1)
	$5 = *($2)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$3 = CALL $94($5)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = ($3 + $5)
	CALL $25($2, $1)
	CALL db_update_i64(*($1 + [144]), (int_64)0, $3, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $97($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [8]) = $3
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$2($3), [8464])
	$5 = ($0 + [72])
	$0 = CALL $17($5, $2, [8199])
	CALL eosio_assert(((int_32)*($0 + [104]) == (int_32)[1]), [8494])
	if ( ((int_64)*($0 + [8]) == (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert(*(($0 + [96])), [8450])
	CALL eosio_assert(((int_64)*($0 + [112]) == (int_64)$1), [8529])
	
.LABEL $label$1
	*($4) = ($4 + [8])
	CALL $29($5, $0, $4)
	$global$0 = ($4 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9142])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9142])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9142])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $57(*($1), ($4 + [24]))
	CALL $57(*($1), ($4 + [36]))
	CALL $57(*($1), ($4 + [48]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9142])
	CALL memcpy(($4 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9142])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [72])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $64(*($1), ($4 + [80]))
	$global$0 = ($2 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $19($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9304])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9304])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $72(CALL $71($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9304])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9304])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9304])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9304])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $68(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [9458])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9504])
	*($1 + [104]) = *(*($2))
	$4 = *($1)
	CALL eosio_assert([1], [9555])
	*(($2 = $3)) = [0]
	CALL $24($2, $1)
	$5 = *($2)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$3 = CALL $94($5)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = ($3 + $5)
	CALL $25($2, $1)
	CALL db_update_i64(*($1 + [144]), (int_64)0, $3, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $97($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($2 + [16])
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [15]) = $3
	CALL require_auth($1)
	$5 = [0]
	$6 = ($0 + [72])
	$0 = CALL $17($6, $2, [8199])
	$7 = ((int_64)*($0 + [112]) != (int_64)$1)
	if ( $7 ){ goto $label$1 }
	if ( ((int_32)*($0 + [104]) != (int_32)[4]) ){ goto $label$1 }
	if ( ((int_32)($3 | [4]) != (int_32)[6]) ){ goto $label$1 }
	$5 = [1]
	
.LABEL $label$1
	if ( ((int_64)*($0 + [8]) == (int_64)$1) ){ goto $label$3 }
	if ( (*(($0 + [96])) == 0) ){ goto $label$2 }
	if ( $7 ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($5 | (((int_32)*($0 + [104]) == (int_32)[1]) & ((int_32)$3 == (int_32)[4])))
	
.LABEL $label$2
	CALL eosio_assert($5, [8386])
	*($4 + [8]) = ($4 + [15])
	CALL $23($6, $0, ($4 + [8]))
	$global$0 = ($4 + [16])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9304])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9304])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $68(CALL $68(CALL $68($0, ($1 + [16])), ($1 + [28])), ($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9304])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [64]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9304])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $69($0, ($1 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [9304])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9304])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9304])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9304])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $70($0, ($1 + [136]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = (*($0) + [16])
	*($0) = $2
	$3 = *($1 + [16])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *(($1 + [16]))
	$3 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$2
	$3 = *($1 + [28])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [32])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	$3 = *(($1 + [28]))
	$3 = ( *(($1 + [32])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$4
	$3 = *($1 + [40])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($0) = $2
	$1 = *(($1 + [40]))
	$1 = ( *(($1 + [44])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($1 + $2)
	*($0) = $2
	
.LABEL $label$6
	*($0) = ($2 + [63])
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [9458])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9504])
	$4 = *($1)
	CALL $85(($1 + [16]), *($2))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [9555])
	*(($2 = $3)) = [0]
	CALL $24($2, $1)
	$5 = *($2)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$3 = CALL $94($5)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = ($3 + $5)
	CALL $25($2, $1)
	CALL db_update_i64(*($1 + [144]), (int_64)0, $3, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $97($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($2 + [16])
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL require_auth($1)
	$5 = ($0 + [72])
	$0 = CALL $17($5, $2, [8199])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)$1), [8408])
	CALL eosio_assert(((int_32)*($0 + [104]) == (int_32)[1]), [8428])
	*($4 + [8]) = $3
	CALL $27($5, $0, ($4 + [8]))
	$global$0 = ($4 + [16])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [9304])
	CALL memcpy(*($0 + [4]), $1, [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9304])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9304])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [24])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9304])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9304])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9304])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9142])
	CALL memcpy($1, *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [9142])
	CALL memcpy(($1 + [1]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [9142])
	CALL memcpy(($1 + [2]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [9142])
	CALL memcpy(($1 + [3]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9142])
	CALL memcpy($1, *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9142])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9142])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9142])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [24]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [48])))
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [36])))
	if ( (*($1 + [16]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9147])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $19($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9142])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	CALL $85(($1 + [40]), *($3 + [4]))
	*($1 + [8]) = *(*($3 + [8]))
	CALL $85(($1 + [16]), *($3 + [12]))
	CALL $85(($1 + [28]), *($3 + [16]))
	$5 = *($3 + [20])
	*($1 + [72]) = *($5)
	*(($1 + [96])) = *(($5 + [24]))
	*(($1 + [88])) = *(($5 + [16]))
	*(($1 + [80])) = *(($5 + [8]))
	$5 = *($3 + [24])
	*($1 + [56]) = *($5)
	*(($1 + [64])) = *(($5 + [8]))
	*($1 + [104]) = [1]
	$6 = *(*($3 + [28]))
	*($1 + [136]) = [0]
	*($1 + [112]) = $6
	*($1 + [128]) = CALL current_time()
	*(($3 = $2)) = [0]
	CALL $24($3, $1)
	$7 = *($3)
	if ( ($7 <= [513]) ){ goto $label$2 }
	$5 = CALL $94($7)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$1
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($5 + $7)
	CALL $25($3, $1)
	$6 = *($1)
	*($1 + [144]) = CALL db_store_i64(*($4 + [8]), (int_64)-3913333407068717056, *(*($0 + [8])), $6, $5, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($4 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $97($5)
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $84(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $84(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9142])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9142])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $57(CALL $57(CALL $57($0, ($1 + [16])), ($1 + [28])), ($1 + [40]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9142])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9142])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [64])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $64($0, ($1 + [72]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9142])
	CALL memcpy(($1 + [104]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9142])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9142])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9142])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $65($0, ($1 + [136]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $67(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

int_32 .FUNC $89 ()
{
	return [10032]
}

void .FUNC $88 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $86($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $83 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $97($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9304])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9304])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [9304])
	CALL memcpy(*($0 + [4]), $1, [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [9304])
	CALL memcpy(*($0 + [4]), ($1 + [1]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [9304])
	CALL memcpy(*($0 + [4]), ($1 + [2]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [9304])
	CALL memcpy(*($0 + [4]), ($1 + [3]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9304])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9304])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9304])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $97($0)
	
.LABEL $label$1
}

int_32 .FUNC $74 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [4]) = $1
	*($0) = [1029]
	$1 = *($2)
	*($0) = *(*(*($2 + [4])))
	CALL eosio_assert([1], [9304])
	CALL memcpy($3, ($0 + [1]), [1])
	CALL eosio_assert([1], [9304])
	CALL memcpy(($3 | [1]), $0, [1])
	*($0 + [8]) = CALL db_store_i64(*($1 + [8]), (int_64)9011360703961366528, *(*($2 + [8])), (int_64)9011360703961366528, $3, [2])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)9011360703961366528) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)9011360703961366529
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $39 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*((($4 + [8]) + [8])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $19(($4 + [52]), [17])
	$7 = *($4 + [52])
	$2 = (*(($4 + [56])) - $7)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [9304])
	CALL memcpy($7, $3, [8])
	CALL eosio_assert(((int_32)($2 + [-8]) > (int_32)[7]), [9304])
	CALL memcpy(($7 + [8]), ($3 + [8]), [8])
	CALL eosio_assert(((int_32)($2 + [-16]) > (int_32)[0]), [9304])
	CALL memcpy(($7 + [16]), ($3 + [16]), [1])
	CALL $21(($4 + [64]), ($4 + [24]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $88(($4 + [8]))
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	CALL require_auth($1)
	$3 = ($0 + [72])
	$0 = CALL $17($3, $2, [8199])
	CALL eosio_assert(((int_32)*($0 + [104]) == (int_32)[4]), [8639])
	CALL eosio_assert(((int_64)*($0 + [112]) == (int_64)$1), [8676])
	CALL $37($3, $0)
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [9458])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9504])
	*($1 + [104]) = [2]
	$3 = *($1)
	CALL eosio_assert([1], [9555])
	*(($4 = $2)) = [0]
	CALL $24($4, $1)
	$5 = *($4)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $94($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $5)
	CALL $25($4, $1)
	CALL db_update_i64(*($1 + [144]), (int_64)0, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$3 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $97($2)
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [16])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $92(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10028])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $92(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	CALL require_auth($1)
	$3 = ($0 + [72])
	$0 = CALL $17($3, $2, [8199])
	CALL eosio_assert(((int_64)*($0 + [120]) == (int_64)$1), [8582])
	CALL eosio_assert(((int_32)*($0 + [104]) == (int_32)[1]), [8494])
	CALL $33($3, $0)
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [9458])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9504])
	*($1 + [104]) = [2]
	$3 = *($1)
	CALL eosio_assert([1], [9555])
	*(($4 = $2)) = [0]
	CALL $24($4, $1)
	$5 = *($4)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $94($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $5)
	CALL $25($4, $1)
	CALL db_update_i64(*($1 + [144]), (int_64)0, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$3 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $97($2)
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [16])
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL require_auth($1)
	$4 = ($0 + [72])
	$5 = CALL $17($4, $2, [8199])
	CALL eosio_assert(((int_32)*($5 + [104]) == (int_32)[6]), [8546])
	CALL eosio_assert(((int_64)*($5 + [120]) == (int_64)$1), [8582])
	CALL $31($4, $5)
	$2 = *($0)
	*($3 + [88]) = [8192]
	*($3 + [92]) = CALL $91([8192])
	*($3 + [16]) = *($3 + [88])
	$6 = *(CALL $9(($3 + [40]), ($3 + [16])))
	*($3 + [88]) = [8364]
	*($3 + [92]) = CALL $91([8364])
	*($3 + [8]) = *($3 + [88])
	$7 = *(CALL $9(($3 + [40]), ($3 + [8])))
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$4 = CALL $91([8602])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	$8 = ($5 + [56])
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [24]) = ($4 << [1])
	$5 = (($3 + [24]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($3 + [24]) = ($9 | [1])
	*($3 + [32]) = $5
	*($3 + [28]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [8602], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	*((($3 + [40]) + [24])) = *(($8 + [8]))
	$4 = (($3 + [24]) + [8])
	*(($3 + [80])) = *($4)
	*($4) = [0]
	*($3 + [48]) = $1
	*($3 + [88]) = (int_64)6138663591592764928
	*($3 + [96]) = $7
	*($3 + [40]) = *($0)
	*($3 + [56]) = *($8)
	*($3 + [72]) = *($3 + [24])
	*($3 + [24]) = (int_64)0
	*(($4 = CALL _Znwj([16]))) = $2
	*($4 + [8]) = $6
	*((($3 + [88]) + [36])) = [0]
	$0 = ($4 + [16])
	*((($3 + [88]) + [24])) = $0
	*(($3 + [108])) = $0
	*($3 + [104]) = $4
	*($3 + [116 align=4]) = (int_64)0
	$4 = *($3 + [72])
	$0 = ( *((($3 + [40]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($0 + [32])
	$1 = (CASTING uint_64)(uint_32 $0)
	$0 = ($3 + [116])
	
.LOOP $label$6:
	$4 = ($4 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$6 }
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $19($0, $4)
	$0 = *(($3 + [120]))
	$4 = *(($3 + [116]))
	goto $label$7 
	
.LABEL $label$8
	$0 = [0]
	$4 = [0]
	
.LABEL $label$7
	*($3 + [148]) = $4
	*($3 + [144]) = $4
	*($3 + [152]) = $0
	*($3 + [128]) = ($3 + [144])
	*($3 + [136]) = ($3 + [40])
	CALL $20(($3 + [136]), ($3 + [128]))
	CALL $21(($3 + [144]), ($3 + [88]))
	$4 = *($3 + [144])
	CALL send_inline($4, (*($3 + [148]) - $4))
	$4 = *($3 + [144])
	if ( ($4 == 0) ){ goto $label$9 }
	*($3 + [148]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$9
	$4 = *($3 + [116])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [120])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($3 + [104])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($3 + [108])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( (*(($3 + [72])) & [1]) ){ goto $label$13 }
	if ( (*($3 + [24]) & [1]) ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [80])))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($3 + [32])))
	$global$0 = ($3 + [160])
	return (unreachable)
	
.LABEL $label$2
	CALL $83(($3 + [24]))
	
.LABEL $label$1
	$global$0 = ($3 + [160])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [9458])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9504])
	*($1 + [104]) = [7]
	$3 = *($1)
	CALL eosio_assert([1], [9555])
	*(($4 = $2)) = [0]
	CALL $24($4, $1)
	$5 = *($4)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $94($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $5)
	CALL $25($4, $1)
	CALL db_update_i64(*($1 + [144]), (int_64)0, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$3 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $97($2)
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [16])
}