(data (i32.const 8192) "EOS\00")
(data (i32.const 8196) "unexpected asset symbol input\00")
(data (i32.const 8226) "invalid sell\00")
(data (i32.const 8239) "invalid conversion\00")
(data (i32.const 8258) "transfer aim is not me\00")
(data (i32.const 8281) "invalid quantity transfered\00")
(data (i32.const 8309) "quantity must be positive\00")
(data (i32.const 8335) "memo too long\00")
(data (i32.const 8349) "11111vs55555\00")
(data (i32.const 8362) "buy DOG token is disabled\00")
(data (i32.const 8388) "at least buy \00")
(data (i32.const 8402) "active\00")
(data (i32.const 8409) "eosio.token\00")
(data (i32.const 8421) "transfer\00")
(data (i32.const 8430) "buy DOG token fee from \00")
(data (i32.const 8454) "AGENCY\00")
(data (i32.const 8461) "DOG\00")
(data (i32.const 8465) "DOG token market does not exist\00")
(data (i32.const 8497) "buy DOG token fee from: \00")
(data (i32.const 8522) "buy token amount must > 0\00")
(data (i32.const 8548) "dogeoseoseos\00")
(data (i32.const 8561) "buy dogs\00")
(data (i32.const 8570) "sell DOG token is disabled\00")
(data (i32.const 8597) "sell DOG token fee from \00")
(data (i32.const 8622) "sell DOG token fee from: \00")
(data (i32.const 8648) "sell token amount must > 0\00")
(data (i32.const 8675) "sell dogs\00")
(data (i32.const 8685) "disablebuy\00")
(data (i32.const 8696) "disablesell\00")
(data (i32.const 8708) "setbuyfee\00")
(data (i32.const 8718) "setsellfee\00")
(data (i32.const 8729) "setfeerec\00")
(data (i32.const 8739) "setleastbuy\00")
(data (i32.const 8751) "addexclude\00")
(data (i32.const 8762) "string is too long to be a valid symbol_code\00")
(data (i32.const 8807) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8860) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8909) "invalid symbol name\00")
(data (i32.const 8929) "string is too long to be a valid name\00")
(data (i32.const 8967) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9034) "character is not in allowed character set for names\00")
(data (i32.const 9086) "-%lld.%s %s\00")
(data (i32.const 9098) "%lld.%s %s\00")
(data (i32.const 9112) "\9c#\00\00")
(data (i32.const 9116) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9149) "write\00")
(data (i32.const 9155) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9206) "error reading iterator\00")
(data (i32.const 9229) "read\00")
(data (i32.const 9234) "cannot create objects in table of another contract\00")
(data (i32.const 9285) "object passed to modify is not in multi_index\00")
(data (i32.const 9331) "cannot modify objects in table of another contract\00")
(data (i32.const 9382) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9441) "get\00")
(data (i32.const 9445) "fee receiver, forbid to buy and sell DOG token\00")
(data (i32.const 9492) "token contract, excluded\00")
(data (i32.const 9517) "dogdogeoseos\00")
(data (i32.const 9530) "bonus in/out account, excluded\00")
(data (i32.const 9561) "eosio.names\00")
(data (i32.const 9573) "system account, excluded\00")
(data (i32.const 9598) "eosio.ramfee\00")
(data (i32.const 9611) "eosio.ram\00")
(data (i32.const 18048) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 18064) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 18080) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 18096) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 18176) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "send_inline" (func $fimport$6 (param i32 i32)))
(import "env" "db_update_i64" (func $fimport$7 (param i32 i64 i32 i32)))
(import "env" "action_data_size" (func $fimport$8 (result i32)))
(import "env" "read_action_data" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$12 (result i64)))
(import "env" "db_lowerbound_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$14))
(import "env" "memmove" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$16 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$24 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$27 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$28 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$31 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$33 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$34 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$35 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $49))
(export "_Znwj" (func $86))
(export "_ZdlPv" (func $88))
(export "_Znaj" (func $87))
(export "_ZdaPv" (func $89))
(export "_ZnwjSt11align_val_t" (func $90))
(export "_ZnajSt11align_val_t" (func $91))
(export "_ZdlPvSt11align_val_t" (func $92))
(export "_ZdaPvSt11align_val_t" (func $93))
(table $0 12 12 anyfunc)
(elem (i32.const 1) $35 $47 $3 $9 $13 $17 $21 $25 $29 $110 $112)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18262))
(global $global$2 i32 (i32.const 18262))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $114($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $97($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $97($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $94 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $97($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $115(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9624])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $115(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $120($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $102())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $116($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $120 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18028])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17836]
	$3 = (((int_32)$1 * (int_32)[12]) + [17836])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $42($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $43(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [336])
	$global$0 = $3
	CALL memory()
	*($3 + [320]) = [8409]
	*($3 + [324]) = CALL $114([8409])
	*($3 + [152]) = *($3 + [320])
	CALL $36(($3 + [328]), ($3 + [152]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [304]) = [8421]
	*($3 + [308]) = CALL $114([8421])
	*($3 + [144]) = *($3 + [304])
	CALL $36(($3 + [312]), ($3 + [144]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [300]) = [0]
	*($3 + [296]) = [1]
	*($3 + [136]) = *($3 + [296])
	CALL $50($0, (int_64)6138663591592764928, ($3 + [136]))
	
.LABEL $label$1
	*($3 + [288]) = [8548]
	*($3 + [292]) = CALL $114([8548])
	*($3 + [128]) = *($3 + [288])
	CALL $36(($3 + [328]), ($3 + [128]))
	if ( ((int_64)$1 != (int_64)5555377475372099968) ){ goto $label$3 }
	*($3 + [280]) = [8421]
	*($3 + [284]) = CALL $114([8421])
	*($3 + [120]) = *($3 + [280])
	CALL $36(($3 + [312]), ($3 + [120]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$3 }
	*($3 + [276]) = [0]
	*($3 + [272]) = [2]
	*($3) = *($3 + [272])
	CALL $50($0, (int_64)5555377475372099968, $3)
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	*($3 + [264]) = [8685]
	*($3 + [268]) = CALL $114([8685])
	*($3 + [112]) = *($3 + [264])
	CALL $36(($3 + [328]), ($3 + [112]))
	if ( ((int_64)$2 != (int_64)5453968847710683136) ){ goto $label$4 }
	*($3 + [260]) = [0]
	*($3 + [256]) = [3]
	*($3 + [8]) = *($3 + [256])
	CALL $51($1, $1, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$4
	*($3 + [248]) = [8696]
	*($3 + [252]) = CALL $114([8696])
	*($3 + [104]) = *($3 + [248])
	CALL $36(($3 + [328]), ($3 + [104]))
	if ( ((int_64)$2 != (int_64)5453968847987302912) ){ goto $label$5 }
	*($3 + [244]) = [0]
	*($3 + [240]) = [4]
	*($3 + [16]) = *($3 + [240])
	CALL $51($1, $1, ($3 + [16]))
	goto $label$2 
	
.LABEL $label$5
	*($3 + [232]) = [8708]
	*($3 + [236]) = CALL $114([8708])
	*($3 + [96]) = *($3 + [232])
	CALL $36(($3 + [328]), ($3 + [96]))
	if ( ((int_64)$2 != (int_64)-4417330324068892672) ){ goto $label$6 }
	*($3 + [228]) = [0]
	*($3 + [224]) = [5]
	*($3 + [24]) = *($3 + [224])
	CALL $52($1, $1, ($3 + [24]))
	goto $label$2 
	
.LABEL $label$6
	*($3 + [216]) = [8718]
	*($3 + [220]) = CALL $114([8718])
	*($3 + [88]) = *($3 + [216])
	CALL $36(($3 + [328]), ($3 + [88]))
	if ( ((int_64)$2 != (int_64)-4417040273099292672) ){ goto $label$7 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [6]
	*($3 + [32]) = *($3 + [208])
	CALL $52($1, $1, ($3 + [32]))
	goto $label$2 
	
.LABEL $label$7
	*($3 + [200]) = [8729]
	*($3 + [204]) = CALL $114([8729])
	*($3 + [80]) = *($3 + [200])
	CALL $36(($3 + [328]), ($3 + [80]))
	if ( ((int_64)$2 != (int_64)-4417269088573718528) ){ goto $label$8 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [7]
	*($3 + [40]) = *($3 + [192])
	CALL $53($1, $1, ($3 + [40]))
	goto $label$2 
	
.LABEL $label$8
	*($3 + [184]) = [8739]
	*($3 + [188]) = CALL $114([8739])
	*($3 + [72]) = *($3 + [184])
	CALL $36(($3 + [328]), ($3 + [72]))
	if ( ((int_64)$2 != (int_64)-4417163603388482560) ){ goto $label$9 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [8]
	*($3 + [48]) = *($3 + [176])
	CALL $54($1, $1, ($3 + [48]))
	goto $label$2 
	
.LABEL $label$9
	*($3 + [168]) = [8751]
	*($3 + [172]) = CALL $114([8751])
	*($3 + [64]) = *($3 + [168])
	CALL $36(($3 + [328]), ($3 + [64]))
	if ( ((int_64)$2 != (int_64)3626152661772566528) ){ goto $label$2 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [9]
	*($3 + [56]) = *($3 + [160])
	CALL $55($1, $1, ($3 + [56]))
	
.LABEL $label$2
	CALL $103([0])
	$global$0 = ($3 + [336])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9285])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9331])
	
.LABEL $label$2
	$6 = *($1 + [8])
	$7 = *($3 + [4])
	$8 = *(($7 + [8]))
	*((($5 + [16]) + [8])) = $8
	$9 = *(*($3 + [8]))
	$10 = *($7)
	*(($5 + [8])) = $8
	*($5 + [16]) = $10
	*($5) = $10
	CALL $2(($5 + [32]), $1, $5, $9)
	*(*($3)) = *($5 + [32])
	if ( ((int_64)$6 == (int_64)*($1 + [8])) ){ goto $label$3 }
	CALL eosio_assert([0], [9382])
	
.LABEL $label$3
	$4 = $4
	$3 = ($4 + [-64])
	$global$0 = $3
	*($5 + [36]) = $3
	*($5 + [32]) = $3
	*($5 + [40]) = $4
	CALL $46(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $3, [64])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9149])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9149])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9149])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9149])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $65(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $101($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9285])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9331])
	
.LABEL $label$2
	$6 = *($1 + [8])
	$7 = *($3 + [4])
	$8 = *(($7 + [8]))
	*((($5 + [16]) + [8])) = $8
	$9 = *(*($3 + [8]))
	$10 = *($7)
	*(($5 + [8])) = $8
	*($5 + [16]) = $10
	*($5) = $10
	CALL $2(($5 + [32]), $1, $5, $9)
	*(*($3)) = *($5 + [32])
	if ( ((int_64)$6 == (int_64)*($1 + [8])) ){ goto $label$3 }
	CALL eosio_assert([0], [9382])
	
.LABEL $label$3
	$4 = $4
	$3 = ($4 + [-64])
	$global$0 = $3
	*($5 + [36]) = $3
	*($5 + [32]) = $3
	*($5 + [40]) = $4
	CALL $46(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $3, [64])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

int_32 .FUNC $40 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	if ( ((int_32)*($6 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9155])
	return $6
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)5555510502152994816, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $45($0, $5)
	if ( ((int_32)*($6 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9155])
	return $6
	
.LABEL $label$5
	CALL eosio_assert([0], $2)
	
.LABEL $label$1
	return $6
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	float_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [416])
	$global$0 = $2
	$3 = *($0)
	if ( ((int_64)*($1) == (int_64)$3) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$3 == (int_64)*($1 + [8])), [8258])
	$4 = *(($1 + [24]))
	$5 = CALL $114([8461])
	if ( ($5 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8762])
	goto $label$4 
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = (int_64)0
	
.LOOP $label$6:
	$6 = *(($5 + [8460]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$7
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$6 }
	if ( ((int_64)$4 != (int_64)((int_64)((int_64)$3 << (int_64)8) | (int_64)4)) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)$4 != (int_64)((int_64)0 | (int_64)4)) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = [0]
	$7 = ($1 + [16])
	if ( ((uint_64)((int_64)*($7) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$8 }
	$3 = (uint_64)*(($1 + [24])) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$3 = $4
	$6 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$3 = $4
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $6 ){ goto $label$12 }
	$6 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [8281])
	CALL eosio_assert(((int_64)*(($1 + [16])) > (int_64)0), [8309])
	$5 = *($1 + [32])
	if ( ($5 & [1]) ){ goto $label$14 }
	$5 = uint_32($5 >> [1])
	goto $label$13 
	
.LABEL $label$14
	$5 = *(($1 + [36]))
	
.LABEL $label$13
	CALL eosio_assert(($5 <= [257]), [8335])
	$9 = ($0 + [112])
	$3 = *($1)
	$6 = *(($0 + [140]))
	$8 = *(($0 + [136]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$15 }
	
.LOOP $label$17:
	$5 = ($6 + [-24])
	$10 = *($5)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$16 }
	$6 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$15 }
	if ( ((int_32)*($10 + [20]) == (int_32)$9) ){ goto $label$1 }
	CALL eosio_assert([0], [9155])
	$global$0 = ($2 + [416])
	return (unreachable)
	
.LABEL $label$15
	$5 = CALL db_find_i64(*($9), *(($0 + [120])), (int_64)6291842200389025792, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$18 }
	if ( ((int_32)*(CALL $31($9, $5) + [20]) == (int_32)$9) ){ goto $label$1 }
	CALL eosio_assert([0], [9155])
	$global$0 = ($2 + [416])
	return (unreachable)
	
.LABEL $label$18
	*($2 + [400]) = [8349]
	*($2 + [404]) = CALL $114([8349])
	*($2 + [80]) = *($2 + [400])
	$11 = CALL $36(($2 + [408]), ($2 + [80]))
	$9 = ($0 + [72])
	$6 = *(($0 + [100]))
	$10 = *(($0 + [96]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$23 }
	
.LOOP $label$25:
	$5 = ($6 + [-24])
	$8 = *($5)
	if ( ((int_64)*($8) == (int_64)1) ){ goto $label$24 }
	$6 = $5
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$23 }
	if ( ((int_32)*($8 + [64]) == (int_32)$9) ){ goto $label$22 }
	CALL eosio_assert([0], [9155])
	goto $label$22 
	
.LABEL $label$23
	$5 = CALL db_find_i64(*($9), *(($0 + [80])), (int_64)4982871454518345728, (int_64)1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$21 }
	$8 = CALL $5($9, $5)
	if ( ((int_32)*($8 + [64]) == (int_32)$9) ){ goto $label$22 }
	CALL eosio_assert([0], [9155])
	
.LABEL $label$22
	*($11) = *($8 + [40])
	$12 = *($8 + [32])
	CALL eosio_assert(((int_32)*($8 + [9]) ^ (int_32)[1]), [8570])
	$13 = *(($1 + [24]))
	$4 = (int_64)0
	if ( ((float_64)$12 == (float_64)(float_64)0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	CALL eosio_assert([1], [8570])
	$13 = *(($1 + [24]))
	$12 = (float_64)0.007
	
.LABEL $label$20
	$3 = *($1 + [16])
	$12 = CALL $104(((float_64)(float_64)1 / (float_64)$12))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)2147483648) ){ goto $label$27 }
	$5 = [-2147483648]
	goto $label$26 
	
.LABEL $label$27
	$5 = (CASTING int_32)(float_64 $12)
	
.LABEL $label$26
	$4 = (CASTING int_64)(int_32 $5)
	$4 = ((int_64)((int_64)((int_64)$3 + (int_64)$4) + (int_64)-1) / (int_64)$4)
	
.LABEL $label$19
	*((($2 + [384]) + [8])) = *(($7 + [8]))
	$3 = *($7)
	*($2 + [384]) = $3
	$3 = (int_64)
	*($2 + [384]) = $3($3 - $4))
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$28 }
	$3 = *($0)
	*($2 + [312]) = [8402]
	*($2 + [316]) = CALL $114([8402])
	*($2 + [72]) = *($2 + [312])
	$5 = CALL $36(($2 + [320]), ($2 + [72]))
	*($2 + [328]) = $3
	*($2 + [336]) = *($5)
	*($2 + [296]) = [8548]
	*($2 + [300]) = CALL $114([8548])
	*($2 + [64]) = *($2 + [296])
	$9 = CALL $36(($2 + [304]), ($2 + [64]))
	*($2 + [280]) = [8421]
	*($2 + [284]) = CALL $114([8421])
	*($2 + [56]) = *($2 + [280])
	$7 = CALL $36(($2 + [288]), ($2 + [56]))
	*((($2 + [216]) + [8])) = [0]
	*($2 + [216]) = (int_64)0
	$5 = CALL $114([8597])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$35 }
	*($2 + [216]) = ($5 << [1])
	$8 = (($2 + [216]) | [1])
	if ( $5 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$6 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($6)
	*($2 + [216]) = ($6 | [1])
	*($2 + [224]) = $8
	*($2 + [220]) = $5
	
.LABEL $label$34
	CALL memcpy($8, [8597], $5)
	
.LABEL $label$33
	$6 = [0]
	*(($8 + $5)) = [0]
	$3 = *($1)
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$39 }
	$8 = *([0] + [9112])
	
.LOOP $label$41:
	*((($2 + [232]) + ($5 = $6))) = *(($8 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$40 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$41 }
	
.LABEL $label$40
	*(($2 + [208])) = [0]
	*($2 + [200]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$38 }
	*($2 + [200]) = ($6 << [1])
	$8 = (($2 + [200]) | [1])
	goto $label$37 
	
.LABEL $label$39
	*(($2 + [208])) = [0]
	*($2 + [200]) = (int_64)0
	*($2 + [200]) = [0]
	$8 = (($2 + [200]) | [1])
	$5 = $8
	goto $label$36 
	
.LABEL $label$38
	$10 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($2 + [200]) = ($10 | [1])
	*($2 + [208]) = $8
	*($2 + [204]) = $6
	
.LABEL $label$37
	$10 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$42:
	*(($8 + $5)) = *((($2 + [232]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$42 }
	$5 = ($8 + $6)
	$8 = (($2 + [200]) | [1])
	
.LABEL $label$36
	*($5) = [0]
	$5 = *($2 + [200])
	$6 = ($5 & [1])
	$5 = CALL $100(($2 + [216]), ( *($2 + [208]) ? $8 : $6 ), ( *($2 + [204]) ? uint_32($5 >> [1]) : $6 ))
	$6 = *($5 + [8])
	*($5 + [8]) = [0]
	$3 = *($5)
	*($5) = (int_64)0
	*(($2 + [256])) = $13
	*(($2 + [272])) = $6
	*($2 + [232]) = *($0)
	*($2 + [240]) = *($11)
	*($2 + [248]) = $4
	*($2 + [264]) = $3
	$5 = CALL $38(($2 + [344]), ($2 + [328]), *($9), *($7), ($2 + [232]))
	CALL $39($5)
	$6 = *($5 + [28])
	if ( ($6 == 0) ){ goto $label$43 }
	*(($5 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$43
	$6 = *($5 + [16])
	if ( ($6 == 0) ){ goto $label$44 }
	*(($5 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$44
	if ( (*($2 + [264]) & [1]) ){ goto $label$46 }
	if ( (*($2 + [200]) & [1]) ){ goto $label$45 }
	goto $label$31 
	
.LABEL $label$46
	CALL _ZdlPv(*(($2 + [272])))
	if ( ((*($2 + [200]) & [1]) == 0) ){ goto $label$31 }
	
.LABEL $label$45
	CALL _ZdlPv(*(($2 + [208])))
	if ( (*($2 + [216]) & [1]) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	CALL $94(($2 + [216]))
	
.LABEL $label$31
	if ( ((*($2 + [216]) & [1]) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	CALL _ZdlPv(*($2 + [224]))
	
.LABEL $label$29
	$3 = *($2 + [384])
	
.LABEL $label$28
	if ( ((int_64)$3 < (int_64)1) ){ goto $label$1 }
	$5 = CALL $114([8454])
	if ( ($5 <= [8]) ){ goto $label$50 }
	CALL eosio_assert([0], [8762])
	goto $label$49 
	
.LABEL $label$50
	if ( ($5 == 0) ){ goto $label$48 }
	
.LABEL $label$49
	$3 = (int_64)0
	
.LOOP $label$51:
	$6 = *(($5 + [8453]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$52 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$52
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$51 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$47 
	
.LABEL $label$48
	$3 = (int_64)0
	
.LABEL $label$47
	$4 = ((int_64)$3 | (int_64)4)
	$5 = CALL $114([8192])
	if ( ($5 <= [8]) ){ goto $label$56 }
	CALL eosio_assert([0], [8762])
	goto $label$55 
	
.LABEL $label$56
	if ( ($5 == 0) ){ goto $label$54 }
	
.LABEL $label$55
	$3 = (int_64)0
	
.LOOP $label$57:
	$6 = *(($5 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$58 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$58
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$57 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$53 
	
.LABEL $label$54
	$3 = (int_64)0
	
.LABEL $label$53
	*($2 + [192]) = ((int_64)$3 | (int_64)4)
	$5 = ($0 + [32])
	$6 = CALL $40($5, $4, [8465])
	$3 = *($0)
	*($2 + [236]) = ($2 + [384])
	*($2 + [232]) = ($2 + [184])
	*($2 + [240]) = ($2 + [192])
	CALL $48($5, $6, $3, ($2 + [232]))
	if ( ((int_64)*($2 + [184]) <= (int_64)0) ){ goto $label$69 }
	CALL eosio_assert([1], [8648])
	$13 = *($2 + [192])
	$14 = *($2 + [184])
	if ( (uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$70 }
	CALL eosio_assert([0], [8860])
	
.LABEL $label$70
	$3 = (uint_64)$13 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$73:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$72 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$74 }
	$3 = $4
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$74
	$3 = $4
	
.LOOP $label$75:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$72 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $6 ){ goto $label$75 }
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$72
	CALL eosio_assert([0], [8909])
	
.LABEL $label$71
	$3 = *($0)
	*($2 + [120]) = [8402]
	*($2 + [124]) = CALL $114([8402])
	*($2 + [48]) = *($2 + [120])
	$5 = CALL $36(($2 + [128]), ($2 + [48]))
	*($2 + [328]) = $3
	*($2 + [336]) = *($5)
	*($2 + [104]) = [8409]
	*($2 + [108]) = CALL $114([8409])
	*($2 + [40]) = *($2 + [104])
	$8 = CALL $36(($2 + [112]), ($2 + [40]))
	*($2 + [88]) = [8421]
	*($2 + [92]) = CALL $114([8421])
	*($2 + [32]) = *($2 + [88])
	$10 = CALL $36(($2 + [96]), ($2 + [32]))
	*(($2 + [224])) = [0]
	*($2 + [216]) = (int_64)0
	$5 = CALL $114([8675])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$62 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$68 }
	*($2 + [216]) = ($5 << [1])
	$6 = (($2 + [216]) | [1])
	if ( $5 ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$69
	$3 = *($0)
	*($2 + [168]) = [8402]
	*($2 + [172]) = CALL $114([8402])
	*($2 + [24]) = *($2 + [168])
	$5 = CALL $36(($2 + [176]), ($2 + [24]))
	*($2 + [328]) = $3
	*($2 + [336]) = *($5)
	*($2 + [152]) = [8548]
	*($2 + [156]) = CALL $114([8548])
	*($2 + [16]) = *($2 + [152])
	$10 = CALL $36(($2 + [160]), ($2 + [16]))
	*($2 + [136]) = [8421]
	*($2 + [140]) = CALL $114([8421])
	*($2 + [8]) = *($2 + [136])
	$9 = CALL $36(($2 + [144]), ($2 + [8]))
	*(($2 + [224])) = [0]
	*($2 + [216]) = (int_64)0
	$5 = CALL $114([8622])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$61 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$65 }
	*($2 + [216]) = ($5 << [1])
	$8 = (($2 + [216]) | [1])
	if ( $5 ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$68
	$9 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($2 + [216]) = ($9 | [1])
	*($2 + [224]) = $6
	*($2 + [220]) = $5
	
.LABEL $label$67
	CALL memcpy($6, [8675], $5)
	
.LABEL $label$66
	*(($6 + $5)) = [0]
	*(($2 + [256])) = $13
	$5 = ($2 + [224])
	*(($2 + [272])) = *($5)
	*($5) = [0]
	*($2 + [248]) = $14
	*($2 + [232]) = *($0)
	*($2 + [240]) = *($1)
	*($2 + [264]) = *($2 + [216])
	*($2 + [216]) = (int_64)0
	$5 = CALL $38(($2 + [344]), ($2 + [328]), *($8), *($10), ($2 + [232]))
	CALL $39($5)
	$6 = *($5 + [28])
	if ( ($6 == 0) ){ goto $label$76 }
	*(($5 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$76
	$6 = *($5 + [16])
	if ( ($6 == 0) ){ goto $label$77 }
	*(($5 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$77
	if ( ((*(($2 + [264])) & [1]) == 0) ){ goto $label$78 }
	CALL _ZdlPv(*(($2 + [272])))
	
.LABEL $label$78
	if ( ((*($2 + [216]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($2 + [224])))
	$global$0 = ($2 + [416])
	return (unreachable)
	
.LABEL $label$65
	$6 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($6)
	*($2 + [216]) = ($6 | [1])
	*($2 + [224]) = $8
	*($2 + [220]) = $5
	
.LABEL $label$64
	CALL memcpy($8, [8622], $5)
	
.LABEL $label$63
	$6 = [0]
	*(($8 + $5)) = [0]
	$3 = *($1)
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$82 }
	$1 = *([0] + [9112])
	
.LOOP $label$84:
	*((($2 + [232]) + ($5 = $6))) = *(($1 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$83 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$84 }
	
.LABEL $label$83
	*(($2 + [208])) = [0]
	*($2 + [200]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$81 }
	*($2 + [200]) = ($6 << [1])
	$1 = (($2 + [200]) | [1])
	goto $label$80 
	
.LABEL $label$82
	*(($2 + [208])) = [0]
	*($2 + [200]) = (int_64)0
	*($2 + [200]) = [0]
	$5 = (($2 + [200]) | [1])
	$6 = $5
	goto $label$79 
	
.LABEL $label$81
	$8 = (($6 + [16]) & [-16])
	$1 = CALL _Znwj($8)
	*($2 + [200]) = ($8 | [1])
	*($2 + [208]) = $1
	*($2 + [204]) = $6
	
.LABEL $label$80
	$8 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$85:
	*(($1 + $5)) = *((($2 + [232]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$85 }
	$6 = ($1 + $6)
	$5 = (($2 + [200]) | [1])
	
.LABEL $label$79
	*($6) = [0]
	$6 = *($2 + [200])
	$1 = ($6 & [1])
	$5 = CALL $100(($2 + [216]), ( *($2 + [208]) ? $5 : $1 ), ( *($2 + [204]) ? uint_32($6 >> [1]) : $1 ))
	$6 = *($5 + [8])
	*($5 + [8]) = [0]
	$3 = *($5)
	*($5) = (int_64)0
	*(($2 + [272])) = $6
	*(($2 + [256])) = *(($2 + [392]))
	*($2 + [232]) = *($0)
	*($2 + [240]) = *($11)
	*($2 + [264]) = $3
	*($2 + [248]) = *($2 + [384])
	$5 = CALL $38(($2 + [344]), ($2 + [328]), *($10), *($9), ($2 + [232]))
	CALL $39($5)
	$6 = *($5 + [28])
	if ( ($6 == 0) ){ goto $label$86 }
	*(($5 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$86
	$6 = *($5 + [16])
	if ( ($6 == 0) ){ goto $label$87 }
	*(($5 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$87
	if ( (*($2 + [264]) & [1]) ){ goto $label$89 }
	if ( (*($2 + [200]) & [1]) ){ goto $label$88 }
	goto $label$60 
	
.LABEL $label$89
	CALL _ZdlPv(*(($2 + [272])))
	if ( ((*($2 + [200]) & [1]) == 0) ){ goto $label$60 }
	
.LABEL $label$88
	CALL _ZdlPv(*(($2 + [208])))
	if ( (*($2 + [216]) & [1]) ){ goto $label$59 }
	goto $label$1 
	
.LABEL $label$62
	CALL $94(($2 + [216]))
	
.LABEL $label$61
	CALL $94(($2 + [216]))
	
.LABEL $label$60
	if ( ((*($2 + [216]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$59
	CALL _ZdlPv(*($2 + [224]))
	
.LABEL $label$1
	$global$0 = ($2 + [416])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9149])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9149])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [8]), [8])
	*($3) = (*($3) + [8])
	$0 = CALL $69(CALL $69($0, ($1 + [16])), ($1 + [40]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9206])
	
.LABEL $label$5
	$4 = CALL $117($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)4602678819172646912
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)4602678819172646912
	*($5 + [64]) = $0
	CALL $66(($3 + [32]), $5)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$7 = *($5 + [8])
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $67(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $120($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $61(CALL $60($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9149])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9149])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL $10($0, $1)
}

void .FUNC $6 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9285])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9331])
	
.LABEL $label$2
	*($1 + [8]) = *(*($3))
	$6 = *($1)
	*($1 + [12]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [9382])
	
.LABEL $label$3
	$3 = $4
	$4 = ($3 + [-64])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-6])
	CALL $63($5, $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [58])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($0)
	*($1) = (int_64)1
	*($1 + [8]) = [0]
	*($1 + [12 align=4]) = (int_64)0
	*($1 + [24]) = (int_64)4569063951553953530
	*($1 + [32]) = (int_64)4574720472685930873
	$6 = CALL $114([8192])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8762])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $10
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [8909])
	
.LABEL $label$7
	*($1 + [48]) = (int_64)10000
	*(($1 + [56])) = $9
	*($3 + [24]) = [8349]
	*($3 + [28]) = CALL $114([8349])
	*($3) = *($3 + [24])
	*($1 + [40]) = *(CALL $36(($3 + [8]), $3))
	*(($1 + [8])) = *(*($4))
	$8 = $2
	$6 = ($8 + [-64])
	$global$0 = $6
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($8 + [-6])
	CALL $63(($3 + [8]), $1)
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($5 + [8]), (int_64)4982871454518345728, *(*($0 + [8])), $7, $6, [58])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$12 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($3 + [32])
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [11]) = $1
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$1 = ($5 + [-24])
	$6 = *($1)
	if ( ((int_64)*($6) == (int_64)1) ){ goto $label$4 }
	$5 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	if ( ((int_32)*($6 + [64]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9155])
	goto $label$2 
	
.LABEL $label$3
	$1 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)4982871454518345728, (int_64)1)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $5($3, $1)
	if ( ((int_32)*($6 + [64]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9155])
	
.LABEL $label$2
	$7 = *($0)
	*($2 + [16]) = ($2 + [11])
	CALL $6($3, $6, $7, ($2 + [16]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	$7 = *($0)
	*($2) = ($2 + [11])
	*($2 + [40]) = $7
	if ( ((int_64)*(($0 + [72])) == (int_64)CALL current_receiver()) ){ goto $label$6 }
	CALL eosio_assert([0], [9234])
	
.LABEL $label$6
	*($2 + [16]) = $3
	*($2 + [20]) = $2
	*($2 + [24]) = ($2 + [40])
	*(($1 = CALL _Znwj([80])) + [48]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = $3
	CALL $7(($2 + [16]), $1)
	*($2 + [32]) = $1
	$7 = *($1)
	*($2 + [16]) = $7
	$6 = *($1 + [68])
	*($2 + [12]) = $6
	$4 = ($0 + [100])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($2 + [32]) = [0]
	*($5) = $1
	*($4) = ($5 + [24])
	$1 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $8(($0 + [96]), ($2 + [32]), ($2 + [16]), ($2 + [12]))
	$1 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($2 + [48])
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9206])
	
.LABEL $label$5
	$4 = CALL $117($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL _Znwj([80])) + [48]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = $0
	CALL $62(($3 + [32]), $5)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $8(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $120($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	float_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [112])
	$global$0 = $4
	$5 = *(($1 + [48]))
	$6 = *(($1 + [24]))
	$7 = *($2 + [8])
	if ( ((int_64)$7 != (int_64)*($1 + [8])) ){ goto $label$10 }
	if ( ((int_64)$6 != (int_64)$3) ){ goto $label$9 }
	$8 = ($2 + [8])
	$7 = *($8)
	*((($4 + [80]) + [8])) = $7
	$6 = *($2)
	*((($4 + [16]) + [8])) = $7
	*($4 + [80]) = $6
	*($4 + [16]) = $6
	CALL $1(($4 + [96]), $1, ($1 + [16]), ($4 + [16]))
	*($8) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$7 != (int_64)$6) ){ goto $label$8 }
	$7 = *($1)
	$8 = ($1 + [16])
	$6 = *($2)
	$9 = CALL $107(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$6))) + (float_64)(float_64)1), ((float_64)*(($1 + [32])) / (float_64)(float_64)1e3))
	*($8) = ((int_64)$6 + (int_64)*($8))
	$9 = !(float_64)((float_64)(float_64))((float_64)1 - $9) * (float_64)(CASTING float_64)(int_64 $7)
	if ( ((float_64)(float_64)|$9)| < (float_64)(float_64)9223372036854775808) ){ goto $label$7 }
	$5 = (int_64)-9223372036854775808
	goto $label$6 
	
.LABEL $label$9
	if ( ((int_64)$5 != (int_64)$3) ){ goto $label$5 }
	$8 = ($2 + [8])
	$7 = *($8)
	*((($4 + [64]) + [8])) = $7
	$6 = *($2)
	*((($4 + [32]) + [8])) = $7
	*($4 + [64]) = $6
	*($4 + [32]) = $6
	CALL $1(($4 + [96]), $1, ($1 + [40]), ($4 + [32]))
	*($8) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$7 != (int_64)$5) ){ goto $label$4 }
	$7 = *($1)
	$8 = ($1 + [40])
	$6 = *($2)
	$9 = CALL $107(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$6))) + (float_64)(float_64)1), ((float_64)*(($1 + [56])) / (float_64)(float_64)1e3))
	*($8) = ((int_64)$6 + (int_64)*($8))
	$9 = !(float_64)((float_64)(float_64))((float_64)1 - $9) * (float_64)(CASTING float_64)(int_64 $7)
	if ( ((float_64)(float_64)|$9)| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$5 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$7
	$5 = (Rounds 0)($9)
	
.LABEL $label$6
	*($1) = ((int_64)*($1) + (int_64)$5)
	$10 = *(($1 + [8]))
	if ( (uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$11 }
	CALL eosio_assert([0], [8860])
	
.LABEL $label$11
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$6 = $7
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$6 = $7
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $11 ){ goto $label$16 }
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	CALL eosio_assert([0], [8909])
	
.LABEL $label$12
	*($2) = $5
	*(($2 + [8])) = $10
	goto $label$1 
	
.LABEL $label$5
	CALL eosio_assert([0], [8239])
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [8226])
	goto $label$1 
	
.LABEL $label$3
	$5 = (Rounds 0)($9)
	
.LABEL $label$2
	*($1) = ((int_64)*($1) + (int_64)$5)
	$10 = *(($1 + [8]))
	if ( (uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$17 }
	CALL eosio_assert([0], [8860])
	
.LABEL $label$17
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$6 = $7
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$6 = $7
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $11 ){ goto $label$22 }
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	CALL eosio_assert([0], [8909])
	
.LABEL $label$18
	*($2) = $5
	*(($2 + [8])) = $10
	
.LABEL $label$1
	$8 = ($2 + [8])
	if ( ((int_64)*($8) != (int_64)$3) ){ goto $label$23 }
	*($0) = *($2)
	*(($0 + [8])) = *($8)
	$global$0 = ($4 + [112])
	return 
	
.LABEL $label$23
	$7 = *($8)
	*((($4 + [48]) + [8])) = $7
	$6 = *($2)
	*(($4 + [8])) = $7
	*($4 + [48]) = $6
	*($4) = $6
	CALL $2($0, $1, $4, $3)
	$global$0 = ($4 + [112])
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL $4($0, $1)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	float_64 $6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($1 + [8])), [8196])
	$4 = *($2)
	$5 = *($3)
	$6 = CALL $107(((float_64)((float_64)(CASTING float_64)(int_64 $5) / (float_64)(CASTING float_64)(int_64 (int_64))(*($1) - $5))) + (float_64)(float_64)1), ((float_64)(float_64)1e3 / (float_64)*($2 + [16])))
	*($1) = (int_64))(*($1) - $5)
	$6 = ((float_64)((float_64)$6 + (float_64)(float_64)-1) * (float_64)(CASTING float_64)(int_64 $4))
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$5 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$5 = (Rounds 0)($6)
	
.LABEL $label$1
	*($0) = $5
	*($2) = (int_64))(*($2) - $5)
	$4 = *($2 + [8])
	*($0 + [8]) = $4
	if ( (uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$3 }
	CALL eosio_assert([0], [8860])
	
.LABEL $label$3
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$5 = $4
	$1 = $2
	$2 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$5 = $4
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$1 = ((int_32)$2 < (int_32)[6])
	$0 = ($2 + [1])
	$2 = $0
	if ( $1 ){ goto $label$8 }
	$2 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$6
	return 
	
.LABEL $label$4
	CALL eosio_assert([0], [8909])
}

void .FUNC $14 (int_32 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [16]) = $1
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	if ( ((int_32)*($7 + [64]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9155])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)4982871454518345728, (int_64)1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $5($3, $6)
	if ( ((int_32)*($7 + [64]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9155])
	
.LABEL $label$2
	$8 = *($0)
	*($2 + [32]) = ($2 + [16])
	CALL $15($3, $7, $8, ($2 + [32]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$8 = *($0)
	*($2 + [8]) = ($2 + [16])
	*($2 + [56]) = $8
	if ( ((int_64)*(($0 + [72])) == (int_64)CALL current_receiver()) ){ goto $label$6 }
	CALL eosio_assert([0], [9234])
	
.LABEL $label$6
	*($2 + [32]) = $3
	*($2 + [36]) = ($2 + [8])
	*($2 + [40]) = ($2 + [56])
	*(($6 = CALL _Znwj([80])) + [48]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = $3
	CALL $16(($2 + [32]), $6)
	*($2 + [48]) = $6
	$8 = *($6)
	*($2 + [32]) = $8
	$7 = *($6 + [68])
	*($2 + [28]) = $7
	$4 = ($0 + [100])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5 + [8]) = $8
	*($5 + [16]) = $7
	*($2 + [48]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $8(($0 + [96]), ($2 + [48]), ($2 + [32]), ($2 + [28]))
	$6 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$global$0 = ($2 + [64])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9285])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9331])
	
.LABEL $label$2
	*($1 + [24]) = *(*($3))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-64])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-6])
	CALL $63($5, $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [58])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [16])
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($0)
	*($1) = (int_64)1
	*($1 + [8]) = [0]
	*($1 + [12 align=4]) = (int_64)0
	*($1 + [24]) = (int_64)4569063951553953530
	*($1 + [32]) = (int_64)4574720472685930873
	$6 = CALL $114([8192])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8762])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $10
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [8909])
	
.LABEL $label$7
	*($1 + [48]) = (int_64)10000
	*(($1 + [56])) = $9
	*($3 + [24]) = [8349]
	*($3 + [28]) = CALL $114([8349])
	*($3) = *($3 + [24])
	*($1 + [40]) = *(CALL $36(($3 + [8]), $3))
	*(($1 + [24])) = *(*($4))
	$8 = $2
	$6 = ($8 + [-64])
	$global$0 = $6
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($8 + [-6])
	CALL $63(($3 + [8]), $1)
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($5 + [8]), (int_64)4982871454518345728, *(*($0 + [8])), $7, $6, [58])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$12 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($3 + [32])
}

void .FUNC $17 (int_32 $0, float_64 $1)
{
	CALL require_auth(*($0))
	CALL $18($0, $1)
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [11]) = $1
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$1 = ($5 + [-24])
	$6 = *($1)
	if ( ((int_64)*($6) == (int_64)1) ){ goto $label$4 }
	$5 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	if ( ((int_32)*($6 + [64]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9155])
	goto $label$2 
	
.LABEL $label$3
	$1 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)4982871454518345728, (int_64)1)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $5($3, $1)
	if ( ((int_32)*($6 + [64]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9155])
	
.LABEL $label$2
	$7 = *($0)
	*($2 + [16]) = ($2 + [11])
	CALL $11($3, $6, $7, ($2 + [16]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	$7 = *($0)
	*($2) = ($2 + [11])
	*($2 + [40]) = $7
	if ( ((int_64)*(($0 + [72])) == (int_64)CALL current_receiver()) ){ goto $label$6 }
	CALL eosio_assert([0], [9234])
	
.LABEL $label$6
	*($2 + [16]) = $3
	*($2 + [20]) = $2
	*($2 + [24]) = ($2 + [40])
	*(($1 = CALL _Znwj([80])) + [48]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = $3
	CALL $12(($2 + [16]), $1)
	*($2 + [32]) = $1
	$7 = *($1)
	*($2 + [16]) = $7
	$6 = *($1 + [68])
	*($2 + [12]) = $6
	$4 = ($0 + [100])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($2 + [32]) = [0]
	*($5) = $1
	*($4) = ($5 + [24])
	$1 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $8(($0 + [96]), ($2 + [32]), ($2 + [16]), ($2 + [12]))
	$1 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($2 + [48])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9285])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9331])
	
.LABEL $label$2
	*($1 + [9]) = *(*($3))
	$6 = *($1)
	*($1 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [9382])
	
.LABEL $label$3
	$3 = $4
	$4 = ($3 + [-64])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-6])
	CALL $63($5, $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [58])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($0)
	*($1) = (int_64)1
	*($1 + [8]) = [0]
	*($1 + [12 align=4]) = (int_64)0
	*($1 + [24]) = (int_64)4569063951553953530
	*($1 + [32]) = (int_64)4574720472685930873
	$6 = CALL $114([8192])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8762])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $10
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [8909])
	
.LABEL $label$7
	*($1 + [48]) = (int_64)10000
	*(($1 + [56])) = $9
	*($3 + [24]) = [8349]
	*($3 + [28]) = CALL $114([8349])
	*($3) = *($3 + [24])
	*($1 + [40]) = *(CALL $36(($3 + [8]), $3))
	*(($1 + [9])) = *(*($4))
	$8 = $2
	$6 = ($8 + [-64])
	$global$0 = $6
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($8 + [-6])
	CALL $63(($3 + [8]), $1)
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($5 + [8]), (int_64)4982871454518345728, *(*($0 + [8])), $7, $6, [58])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$12 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($3 + [32])
}

void .FUNC $13 (int_32 $0, float_64 $1)
{
	CALL require_auth(*($0))
	CALL $14($0, $1)
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [9234])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $83(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $34(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $18 (int_32 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [16]) = $1
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	if ( ((int_32)*($7 + [64]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9155])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)4982871454518345728, (int_64)1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $5($3, $6)
	if ( ((int_32)*($7 + [64]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9155])
	
.LABEL $label$2
	$8 = *($0)
	*($2 + [32]) = ($2 + [16])
	CALL $19($3, $7, $8, ($2 + [32]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$8 = *($0)
	*($2 + [8]) = ($2 + [16])
	*($2 + [56]) = $8
	if ( ((int_64)*(($0 + [72])) == (int_64)CALL current_receiver()) ){ goto $label$6 }
	CALL eosio_assert([0], [9234])
	
.LABEL $label$6
	*($2 + [32]) = $3
	*($2 + [36]) = ($2 + [8])
	*($2 + [40]) = ($2 + [56])
	*(($6 = CALL _Znwj([80])) + [48]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = $3
	CALL $20(($2 + [32]), $6)
	*($2 + [48]) = $6
	$8 = *($6)
	*($2 + [32]) = $8
	$7 = *($6 + [68])
	*($2 + [28]) = $7
	$4 = ($0 + [100])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5 + [8]) = $8
	*($5 + [16]) = $7
	*($2 + [48]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $8(($0 + [96]), ($2 + [48]), ($2 + [32]), ($2 + [28]))
	$6 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$global$0 = ($2 + [64])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9285])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9331])
	
.LABEL $label$2
	*($1 + [32]) = *(*($3))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-64])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-6])
	CALL $63($5, $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [58])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [16])
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [136]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$7 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($0 + [96]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $1
	
.LABEL $label$8
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	CALL _ZdlPv($4)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$15 }
	$3 = *(($0 + [56]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $64($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $98($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $98($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $94($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $50 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $117($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [248]))) = (int_64)0
	*(($3 = (($4 + [208]) + [8]))) = (int_64)0
	*(($9 = (($4 + [208]) + [16]))) = (int_64)0
	*(($10 = (($4 + [208]) + [24]))) = (int_64)0
	*(($11 = (($4 + [208]) + [32]))) = (int_64)0
	*($8) = [0]
	*($4 + [208]) = (int_64)0
	*($4 + [196]) = $2
	*($4 + [192]) = $2
	*($4 + [200]) = ($2 + $7)
	*($4 + [256]) = ($4 + [192])
	*($4 + [44]) = $3
	*($4 + [48]) = $9
	*($4 + [52]) = $11
	*($4 + [40]) = ($4 + [208])
	CALL $56(($4 + [40]), ($4 + [256]))
	$8 = *($4 + [200])
	*((($4 + [24]) + [8])) = $8
	*((($4 + [8]) + [8])) = $8
	$12 = *($4 + [192])
	*($4 + [8]) = $12
	*($4 + [24]) = $12
	$8 = CALL $57(($4 + [40]), $0, $1, ($4 + [8]))
	*((($4 + [256]) + [24])) = *($10)
	*((($4 + [256]) + [16])) = *($9)
	*((($4 + [256]) + [8])) = *($3)
	*($4 + [256]) = *($4 + [208])
	$9 = CALL $95((($4 + [256]) + [32]), $11)
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [256])), (int_32 $6))
	if ( ((*($9) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [296])))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $120($2)
	
.LABEL $label$6
	CALL $58($8)
	if ( ((*(($4 + [240])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [248])))
	
.LABEL $label$7
	$global$0 = ($4 + [304])
	return [1]
}

int_32 .FUNC $51 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $117($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	CALL eosio_assert([0], [9229])
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL memcpy(($4 + [40]), $2, [1])
	$8 = *($4 + [40])
	$3 = ($2 + $7)
	*(($4 + [16])) = $3
	*($4 + [28]) = ($2 + [1])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$9 = CALL $57(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $120($2)
	
.LABEL $label$6
	CALL $58($9)
	$global$0 = ($4 + [192])
	return [1]
}

int_32 .FUNC $52 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	float_64 $9
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $117($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [184]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9229])
	
.LABEL $label$5
	CALL memcpy(($4 + [184]), $2, [8])
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $57(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$9 = *($4 + [184])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $9), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $120($2)
	
.LABEL $label$7
	CALL $58($8)
	$global$0 = ($4 + [192])
	return [1]
}

int_32 .FUNC $53 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $117($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [184]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9229])
	
.LABEL $label$5
	CALL memcpy(($4 + [184]), $2, [8])
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $57(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [184])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $120($2)
	
.LABEL $label$7
	CALL $58($8)
	$global$0 = ($4 + [192])
	return [1]
}

int_32 .FUNC $54 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $117($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [216]) = (int_64)0
	*($4 + [208]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9229])
	
.LABEL $label$5
	$3 = ($2 + $7)
	CALL memcpy(($4 + [208]), $2, [8])
	*($4 + [56]) = (int_64)0
	$8 = ($2 + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9229])
	
.LABEL $label$6
	CALL memcpy(($4 + [56]), $8, [8])
	*(($8 = (($4 + [208]) + [8]))) = *($4 + [56])
	*((($4 + [24]) + [8])) = $3
	*($4 + [40]) = $2
	*($4 + [44]) = ($2 + [16])
	*($4 + [48]) = $3
	*($4 + [24]) = *($4 + [40])
	$9 = CALL $57(($4 + [56]), $0, $1, ($4 + [24]))
	*(($3 = (($4 + [224]) + [8]))) = *($8)
	*($4 + [224]) = *($4 + [208])
	*((($4 + [240]) + [8])) = *($3)
	*($4 + [240]) = *($4 + [224])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	$0 = *((($4 + [240]) + [8]))
	*((($4 + [256]) + [8])) = $0
	*((($4 + [8]) + [8])) = $0
	$0 = *($4 + [240])
	*($4 + [8]) = $0
	*($4 + [256]) = $0
	CALL void $3((int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $120($2)
	
.LABEL $label$8
	CALL $58($9)
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9229])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9229])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9229])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9229])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	CALL $59(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $57 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	*(($5 = (($4 + [32]) + [8]))) = *(($3 + [8]))
	*($4 + [32]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [48]) + [8])) = $3
	$2 = *($4 + [32])
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [48]) = $2
	*(($0 + [40])) = $1
	*($0 + [32]) = $1
	*(($0 + [48])) = (int_64)-1
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = [0]
	*($0 + [72]) = $1
	*(($0 + [80])) = $1
	*(($0 + [88])) = (int_64)-1
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = [0]
	*($0 + [112]) = $1
	*(($0 + [120])) = $1
	*(($0 + [128])) = (int_64)-1
	*(($0 + [136])) = (int_64)0
	*(($0 + [144])) = [0]
	$3 = CALL $114([8454])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8762])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$1 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8453]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$6
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$2 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)4
	
.LABEL $label$1
	*($4 + [48]) = $2
	$3 = CALL $114([8461])
	if ( ($3 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [8762])
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$1 = (int_64)0
	
.LOOP $label$11:
	$5 = *(($3 + [8460]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$12
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$11 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$7 
	
.LABEL $label$8
	$1 = (int_64)4
	
.LABEL $label$7
	$6 = ($0 + [32])
	*($4 + [24]) = $1
	$5 = *(($0 + [60]))
	$7 = *(($0 + [56]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$16:
	$3 = ($5 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8 + [8]) == (int_64)$2) ){ goto $label$15 }
	$5 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$14 }
	if ( ((int_32)*($8 + [64]) == (int_32)$6) ){ goto $label$13 }
	CALL eosio_assert([0], [9155])
	goto $label$13 
	
.LABEL $label$14
	$3 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)5555510502152994816, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$17 }
	if ( ((int_32)*(CALL $45($6, $3) + [64]) == (int_32)$6) ){ goto $label$13 }
	CALL eosio_assert([0], [9155])
	goto $label$13 
	
.LABEL $label$17
	$1 = *($0)
	*($4 + [12]) = ($4 + [24])
	*($4 + [8]) = ($4 + [48])
	CALL $70(($4 + [16]), $6, $1, ($4 + [8]))
	
.LABEL $label$13
	$6 = ($0 + [72])
	$5 = *(($0 + [100]))
	$7 = *(($0 + [96]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$19 }
	
.LOOP $label$21:
	$3 = ($5 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)1) ){ goto $label$20 }
	$5 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$19 }
	if ( ((int_32)*($8 + [64]) == (int_32)$6) ){ goto $label$18 }
	CALL eosio_assert([0], [9155])
	goto $label$18 
	
.LABEL $label$19
	$3 = CALL db_find_i64(*(($0 + [72])), *(($0 + [80])), (int_64)4982871454518345728, (int_64)1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$22 }
	if ( ((int_32)*(CALL $5($6, $3) + [64]) == (int_32)$6) ){ goto $label$18 }
	CALL eosio_assert([0], [9155])
	goto $label$18 
	
.LABEL $label$22
	CALL $71(($4 + [16]), $6, *($0), ($4 + [8]))
	
.LABEL $label$18
	$3 = ($0 + [112])
	$5 = CALL db_lowerbound_i64(*(($0 + [112])), *(($0 + [120])), (int_64)6291842200389025792, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$23 }
	CALL $31($3, $5)
	$global$0 = ($4 + [64])
	return $0
	
.LABEL $label$23
	CALL $72(($4 + [16]), $3, *($0), ($4 + [8]))
	CALL $73(($4 + [16]), $3, *($0), ($4 + [8]))
	CALL $74(($4 + [16]), $3, *($0), ($4 + [8]))
	CALL $75(($4 + [16]), $3, *($0), ($4 + [8]))
	CALL $76(($4 + [16]), $3, *($0), ($4 + [8]))
	CALL $77(($4 + [16]), $3, *($0), ($4 + [8]))
	$global$0 = ($4 + [64])
	return $0
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $117($1)
	
.LABEL $label$2
	*(CALL $102()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $117(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $120($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $117 (int_32 $0)
{
	return CALL $118([9644], $0)
}

int_32 .FUNC $114 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	float_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [432])
	$global$0 = $2
	$3 = *($0)
	if ( ((int_64)*($1) == (int_64)$3) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$3 == (int_64)*($1 + [8])), [8258])
	$4 = *(($1 + [24]))
	$5 = CALL $114([8192])
	if ( ($5 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8762])
	goto $label$4 
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = (int_64)0
	
.LOOP $label$6:
	$6 = *(($5 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$7
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$6 }
	if ( ((int_64)$4 != (int_64)((int_64)((int_64)$3 << (int_64)8) | (int_64)4)) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)$4 != (int_64)((int_64)0 | (int_64)4)) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = [0]
	$7 = ($1 + [16])
	if ( ((uint_64)((int_64)*($7) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$8 }
	$3 = (uint_64)*(($1 + [24])) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$3 = $4
	$6 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$3 = $4
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $6 ){ goto $label$12 }
	$6 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [8281])
	CALL eosio_assert(((int_64)*(($1 + [16])) > (int_64)0), [8309])
	$5 = *($1 + [32])
	if ( ($5 & [1]) ){ goto $label$14 }
	$5 = uint_32($5 >> [1])
	goto $label$13 
	
.LABEL $label$14
	$5 = *(($1 + [36]))
	
.LABEL $label$13
	CALL eosio_assert(($5 <= [257]), [8335])
	$9 = ($0 + [112])
	$3 = *($1)
	$6 = *(($0 + [140]))
	$8 = *(($0 + [136]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$15 }
	
.LOOP $label$17:
	$5 = ($6 + [-24])
	$10 = *($5)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$16 }
	$6 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$15 }
	if ( ((int_32)*($10 + [20]) == (int_32)$9) ){ goto $label$1 }
	CALL eosio_assert([0], [9155])
	$global$0 = ($2 + [432])
	return (unreachable)
	
.LABEL $label$15
	$5 = CALL db_find_i64(*($9), *(($0 + [120])), (int_64)6291842200389025792, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$18 }
	if ( ((int_32)*(CALL $31($9, $5) + [20]) == (int_32)$9) ){ goto $label$1 }
	CALL eosio_assert([0], [9155])
	$global$0 = ($2 + [432])
	return (unreachable)
	
.LABEL $label$18
	*($2 + [416]) = [8349]
	*($2 + [420]) = CALL $114([8349])
	*($2 + [80]) = *($2 + [416])
	$11 = CALL $36(($2 + [424]), ($2 + [80]))
	$5 = CALL $114([8192])
	if ( ($5 <= [8]) ){ goto $label$22 }
	CALL eosio_assert([0], [8762])
	goto $label$21 
	
.LABEL $label$22
	if ( ($5 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$3 = (int_64)0
	
.LOOP $label$23:
	$6 = *(($5 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$24 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$24
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$23 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$19 
	
.LABEL $label$20
	$3 = (int_64)0
	
.LABEL $label$19
	*($2 + [400]) = (int_64)10000
	*($2 + [408]) = ((int_64)$3 | (int_64)4)
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$3 = $4
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$3 = $4
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $6 ){ goto $label$29 }
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	CALL eosio_assert([0], [8909])
	
.LABEL $label$25
	$9 = ($0 + [72])
	$6 = *(($0 + [100]))
	$10 = *(($0 + [96]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$33 }
	
.LOOP $label$35:
	$5 = ($6 + [-24])
	$8 = *($5)
	if ( ((int_64)*($8) == (int_64)1) ){ goto $label$34 }
	$6 = $5
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$33 }
	if ( ((int_32)*($8 + [64]) == (int_32)$9) ){ goto $label$32 }
	CALL eosio_assert([0], [9155])
	goto $label$32 
	
.LABEL $label$33
	$5 = CALL db_find_i64(*($9), *(($0 + [80])), (int_64)4982871454518345728, (int_64)1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$31 }
	$8 = CALL $5($9, $5)
	if ( ((int_32)*($8 + [64]) == (int_32)$9) ){ goto $label$32 }
	CALL eosio_assert([0], [9155])
	
.LABEL $label$32
	*($11) = *($8 + [40])
	$5 = *($8 + [8])
	*(($2 + [408])) = *(($8 + [56]))
	*($2 + [400]) = *($8 + [48])
	$5 = ((int_32)$5 ^ (int_32)[1])
	$12 = *($8 + [24])
	goto $label$30 
	
.LABEL $label$31
	$12 = (float_64)0.003
	$5 = [1]
	
.LABEL $label$30
	CALL eosio_assert($5, [8362])
	$3 = *($7)
	$4 = *($2 + [400])
	*(($2 + [352])) = [0]
	*($2 + [344]) = (int_64)0
	$5 = CALL $114([8388])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$39 }
	$8 = ((int_64)$3 >= (int_64)$4)
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$42 }
	*($2 + [344]) = ($5 << [1])
	$6 = (($2 + [344]) | [1])
	if ( $5 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$10 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($2 + [344]) = ($10 | [1])
	*($2 + [352]) = $6
	*($2 + [348]) = $5
	
.LABEL $label$41
	CALL memcpy($6, [8388], $5)
	
.LABEL $label$40
	*(($6 + $5)) = [0]
	CALL $37(($2 + [384]), ($2 + [400]))
	$5 = *($2 + [384])
	$10 = ($5 & [1])
	$5 = CALL $100(($2 + [344]), ( *($2 + [392]) ? (($2 + [384]) | [1]) : $10 ), ( *($2 + [388]) ? uint_32($5 >> [1]) : $10 ))
	$10 = ($5 + [8])
	*(($6 = (($2 + [232]) + [8]))) = *($10)
	*($2 + [232]) = *($5)
	*($5) = (int_64)0
	*($10) = [0]
	CALL eosio_assert($8, ( *($6) ? (($2 + [232]) | [1]) : (*($2 + [232]) & [1]) ))
	if ( (*($2 + [232]) & [1]) ){ goto $label$44 }
	if ( (*($2 + [384]) & [1]) ){ goto $label$43 }
	goto $label$38 
	
.LABEL $label$44
	CALL _ZdlPv(*($6))
	if ( ((*($2 + [384]) & [1]) == 0) ){ goto $label$38 }
	
.LABEL $label$43
	CALL _ZdlPv(*(($2 + [392])))
	if ( (*($2 + [344]) & [1]) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	CALL $94(($2 + [344]))
	
.LABEL $label$38
	if ( ((*($2 + [344]) & [1]) == 0) ){ goto $label$36 }
	
.LABEL $label$37
	CALL _ZdlPv(*($2 + [352]))
	
.LABEL $label$36
	$13 = *(($1 + [24]))
	$4 = (int_64)0
	if ( ((float_64)$12 == (float_64)(float_64)0) ){ goto $label$45 }
	$3 = *($1 + [16])
	$12 = CALL $104(((float_64)(float_64)1 / (float_64)$12))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)2147483648) ){ goto $label$47 }
	$5 = [-2147483648]
	goto $label$46 
	
.LABEL $label$47
	$5 = (CASTING int_32)(float_64 $12)
	
.LABEL $label$46
	$4 = (CASTING int_64)(int_32 $5)
	$4 = ((int_64)((int_64)((int_64)$3 + (int_64)$4) + (int_64)-1) / (int_64)$4)
	
.LABEL $label$45
	*((($2 + [384]) + [8])) = *(($7 + [8]))
	$3 = (int_64)
	*($2 + [384]) = $3(*($7) - $4))
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$48 }
	$3 = *($0)
	*($2 + [312]) = [8402]
	*($2 + [316]) = CALL $114([8402])
	*($2 + [72]) = *($2 + [312])
	$5 = CALL $36(($2 + [320]), ($2 + [72]))
	*($2 + [328]) = $3
	*($2 + [336]) = *($5)
	*($2 + [296]) = [8409]
	*($2 + [300]) = CALL $114([8409])
	*($2 + [64]) = *($2 + [296])
	$9 = CALL $36(($2 + [304]), ($2 + [64]))
	*($2 + [280]) = [8421]
	*($2 + [284]) = CALL $114([8421])
	*($2 + [56]) = *($2 + [280])
	$7 = CALL $36(($2 + [288]), ($2 + [56]))
	*((($2 + [216]) + [8])) = [0]
	*($2 + [216]) = (int_64)0
	$5 = CALL $114([8430])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$52 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$55 }
	*($2 + [216]) = ($5 << [1])
	$8 = (($2 + [216]) | [1])
	if ( $5 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$6 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($6)
	*($2 + [216]) = ($6 | [1])
	*($2 + [224]) = $8
	*($2 + [220]) = $5
	
.LABEL $label$54
	CALL memcpy($8, [8430], $5)
	
.LABEL $label$53
	$6 = [0]
	*(($8 + $5)) = [0]
	$3 = *($1)
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$59 }
	$8 = *([0] + [9112])
	
.LOOP $label$61:
	*((($2 + [232]) + ($5 = $6))) = *(($8 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$60 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$61 }
	
.LABEL $label$60
	*(($2 + [208])) = [0]
	*($2 + [200]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$58 }
	*($2 + [200]) = ($6 << [1])
	$8 = (($2 + [200]) | [1])
	goto $label$57 
	
.LABEL $label$59
	*(($2 + [208])) = [0]
	*($2 + [200]) = (int_64)0
	*($2 + [200]) = [0]
	$8 = (($2 + [200]) | [1])
	$5 = $8
	goto $label$56 
	
.LABEL $label$58
	$10 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($2 + [200]) = ($10 | [1])
	*($2 + [208]) = $8
	*($2 + [204]) = $6
	
.LABEL $label$57
	$10 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$62:
	*(($8 + $5)) = *((($2 + [232]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$62 }
	$5 = ($8 + $6)
	$8 = (($2 + [200]) | [1])
	
.LABEL $label$56
	*($5) = [0]
	$5 = *($2 + [200])
	$6 = ($5 & [1])
	$5 = CALL $100(($2 + [216]), ( *($2 + [208]) ? $8 : $6 ), ( *($2 + [204]) ? uint_32($5 >> [1]) : $6 ))
	$6 = *($5 + [8])
	*($5 + [8]) = [0]
	$3 = *($5)
	*($5) = (int_64)0
	*(($2 + [256])) = $13
	*(($2 + [272])) = $6
	*($2 + [232]) = *($0)
	*($2 + [240]) = *($11)
	*($2 + [248]) = $4
	*($2 + [264]) = $3
	$5 = CALL $38(($2 + [344]), ($2 + [328]), *($9), *($7), ($2 + [232]))
	CALL $39($5)
	$6 = *($5 + [28])
	if ( ($6 == 0) ){ goto $label$63 }
	*(($5 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$63
	$6 = *($5 + [16])
	if ( ($6 == 0) ){ goto $label$64 }
	*(($5 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$64
	if ( (*($2 + [264]) & [1]) ){ goto $label$66 }
	if ( (*($2 + [200]) & [1]) ){ goto $label$65 }
	goto $label$51 
	
.LABEL $label$66
	CALL _ZdlPv(*(($2 + [272])))
	if ( ((*($2 + [200]) & [1]) == 0) ){ goto $label$51 }
	
.LABEL $label$65
	CALL _ZdlPv(*(($2 + [208])))
	if ( (*($2 + [216]) & [1]) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	CALL $94(($2 + [216]))
	
.LABEL $label$51
	if ( ((*($2 + [216]) & [1]) == 0) ){ goto $label$49 }
	
.LABEL $label$50
	CALL _ZdlPv(*($2 + [224]))
	
.LABEL $label$49
	$3 = *($2 + [384])
	
.LABEL $label$48
	if ( ((int_64)$3 < (int_64)1) ){ goto $label$1 }
	$5 = CALL $114([8454])
	if ( ($5 <= [8]) ){ goto $label$70 }
	CALL eosio_assert([0], [8762])
	goto $label$69 
	
.LABEL $label$70
	if ( ($5 == 0) ){ goto $label$68 }
	
.LABEL $label$69
	$3 = (int_64)0
	
.LOOP $label$71:
	$6 = *(($5 + [8453]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$72 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$72
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$71 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$67 
	
.LABEL $label$68
	$3 = (int_64)0
	
.LABEL $label$67
	$4 = ((int_64)$3 | (int_64)4)
	$5 = CALL $114([8461])
	if ( ($5 <= [8]) ){ goto $label$76 }
	CALL eosio_assert([0], [8762])
	goto $label$75 
	
.LABEL $label$76
	if ( ($5 == 0) ){ goto $label$74 }
	
.LABEL $label$75
	$3 = (int_64)0
	
.LOOP $label$77:
	$6 = *(($5 + [8460]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$78 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$78
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$77 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$73 
	
.LABEL $label$74
	$3 = (int_64)0
	
.LABEL $label$73
	*($2 + [192]) = ((int_64)$3 | (int_64)4)
	$5 = ($0 + [32])
	$6 = CALL $40($5, $4, [8465])
	$3 = *($0)
	*($2 + [236]) = ($2 + [384])
	*($2 + [232]) = ($2 + [184])
	*($2 + [240]) = ($2 + [192])
	CALL $41($5, $6, $3, ($2 + [232]))
	if ( ((int_64)*($2 + [184]) <= (int_64)0) ){ goto $label$89 }
	CALL eosio_assert([1], [8522])
	$13 = *($2 + [192])
	$14 = *($2 + [184])
	if ( (uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$90 }
	CALL eosio_assert([0], [8860])
	
.LABEL $label$90
	$3 = (uint_64)$13 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$93:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$92 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$94 }
	$3 = $4
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$93 }
	goto $label$91 
	
.LABEL $label$94
	$3 = $4
	
.LOOP $label$95:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$92 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $6 ){ goto $label$95 }
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$93 }
	goto $label$91 
	
.LABEL $label$92
	CALL eosio_assert([0], [8909])
	
.LABEL $label$91
	$3 = *($0)
	*($2 + [120]) = [8402]
	*($2 + [124]) = CALL $114([8402])
	*($2 + [48]) = *($2 + [120])
	$5 = CALL $36(($2 + [128]), ($2 + [48]))
	*($2 + [328]) = $3
	*($2 + [336]) = *($5)
	*($2 + [104]) = [8548]
	*($2 + [108]) = CALL $114([8548])
	*($2 + [40]) = *($2 + [104])
	$8 = CALL $36(($2 + [112]), ($2 + [40]))
	*($2 + [88]) = [8421]
	*($2 + [92]) = CALL $114([8421])
	*($2 + [32]) = *($2 + [88])
	$10 = CALL $36(($2 + [96]), ($2 + [32]))
	*(($2 + [224])) = [0]
	*($2 + [216]) = (int_64)0
	$5 = CALL $114([8561])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$82 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$88 }
	*($2 + [216]) = ($5 << [1])
	$6 = (($2 + [216]) | [1])
	if ( $5 ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$89
	$3 = *($0)
	*($2 + [168]) = [8402]
	*($2 + [172]) = CALL $114([8402])
	*($2 + [24]) = *($2 + [168])
	$5 = CALL $36(($2 + [176]), ($2 + [24]))
	*($2 + [328]) = $3
	*($2 + [336]) = *($5)
	*($2 + [152]) = [8409]
	*($2 + [156]) = CALL $114([8409])
	*($2 + [16]) = *($2 + [152])
	$10 = CALL $36(($2 + [160]), ($2 + [16]))
	*($2 + [136]) = [8421]
	*($2 + [140]) = CALL $114([8421])
	*($2 + [8]) = *($2 + [136])
	$9 = CALL $36(($2 + [144]), ($2 + [8]))
	*(($2 + [224])) = [0]
	*($2 + [216]) = (int_64)0
	$5 = CALL $114([8497])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$81 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$85 }
	*($2 + [216]) = ($5 << [1])
	$8 = (($2 + [216]) | [1])
	if ( $5 ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$88
	$9 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($2 + [216]) = ($9 | [1])
	*($2 + [224]) = $6
	*($2 + [220]) = $5
	
.LABEL $label$87
	CALL memcpy($6, [8561], $5)
	
.LABEL $label$86
	*(($6 + $5)) = [0]
	*(($2 + [256])) = $13
	$5 = ($2 + [224])
	*(($2 + [272])) = *($5)
	*($5) = [0]
	*($2 + [248]) = $14
	*($2 + [232]) = *($0)
	*($2 + [240]) = *($1)
	*($2 + [264]) = *($2 + [216])
	*($2 + [216]) = (int_64)0
	$5 = CALL $38(($2 + [344]), ($2 + [328]), *($8), *($10), ($2 + [232]))
	CALL $39($5)
	$6 = *($5 + [28])
	if ( ($6 == 0) ){ goto $label$96 }
	*(($5 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$96
	$6 = *($5 + [16])
	if ( ($6 == 0) ){ goto $label$97 }
	*(($5 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$97
	if ( ((*(($2 + [264])) & [1]) == 0) ){ goto $label$98 }
	CALL _ZdlPv(*(($2 + [272])))
	
.LABEL $label$98
	if ( ((*($2 + [216]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($2 + [224])))
	$global$0 = ($2 + [432])
	return (unreachable)
	
.LABEL $label$85
	$6 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($6)
	*($2 + [216]) = ($6 | [1])
	*($2 + [224]) = $8
	*($2 + [220]) = $5
	
.LABEL $label$84
	CALL memcpy($8, [8497], $5)
	
.LABEL $label$83
	$6 = [0]
	*(($8 + $5)) = [0]
	$3 = *($1)
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$102 }
	$1 = *([0] + [9112])
	
.LOOP $label$104:
	*((($2 + [232]) + ($5 = $6))) = *(($1 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$103 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$104 }
	
.LABEL $label$103
	*(($2 + [208])) = [0]
	*($2 + [200]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$101 }
	*($2 + [200]) = ($6 << [1])
	$1 = (($2 + [200]) | [1])
	goto $label$100 
	
.LABEL $label$102
	*(($2 + [208])) = [0]
	*($2 + [200]) = (int_64)0
	*($2 + [200]) = [0]
	$5 = (($2 + [200]) | [1])
	$6 = $5
	goto $label$99 
	
.LABEL $label$101
	$8 = (($6 + [16]) & [-16])
	$1 = CALL _Znwj($8)
	*($2 + [200]) = ($8 | [1])
	*($2 + [208]) = $1
	*($2 + [204]) = $6
	
.LABEL $label$100
	$8 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$105:
	*(($1 + $5)) = *((($2 + [232]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$105 }
	$6 = ($1 + $6)
	$5 = (($2 + [200]) | [1])
	
.LABEL $label$99
	*($6) = [0]
	$6 = *($2 + [200])
	$1 = ($6 & [1])
	$5 = CALL $100(($2 + [216]), ( *($2 + [208]) ? $5 : $1 ), ( *($2 + [204]) ? uint_32($6 >> [1]) : $1 ))
	$6 = *($5 + [8])
	*($5 + [8]) = [0]
	$3 = *($5)
	*($5) = (int_64)0
	*(($2 + [272])) = $6
	*(($2 + [256])) = *(($2 + [392]))
	*($2 + [232]) = *($0)
	*($2 + [240]) = *($11)
	*($2 + [264]) = $3
	*($2 + [248]) = *($2 + [384])
	$5 = CALL $38(($2 + [344]), ($2 + [328]), *($10), *($9), ($2 + [232]))
	CALL $39($5)
	$6 = *($5 + [28])
	if ( ($6 == 0) ){ goto $label$106 }
	*(($5 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$106
	$6 = *($5 + [16])
	if ( ($6 == 0) ){ goto $label$107 }
	*(($5 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$107
	if ( (*($2 + [264]) & [1]) ){ goto $label$109 }
	if ( (*($2 + [200]) & [1]) ){ goto $label$108 }
	goto $label$80 
	
.LABEL $label$109
	CALL _ZdlPv(*(($2 + [272])))
	if ( ((*($2 + [200]) & [1]) == 0) ){ goto $label$80 }
	
.LABEL $label$108
	CALL _ZdlPv(*(($2 + [208])))
	if ( (*($2 + [216]) & [1]) ){ goto $label$79 }
	goto $label$1 
	
.LABEL $label$82
	CALL $94(($2 + [216]))
	
.LABEL $label$81
	CALL $94(($2 + [216]))
	
.LABEL $label$80
	if ( ((*($2 + [216]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$79
	CALL _ZdlPv(*($2 + [224]))
	
.LABEL $label$1
	$global$0 = ($2 + [432])
	(unreachable)
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $109([11], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $119($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [18176])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $119 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9636]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9640])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9636]) = [1]
	$2 = ($2 << [16])
	*([0] + [9640]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9640])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9640]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9636]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9636]) = [1]
	$3 = ($3 << [16])
	*([0] + [9640]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9640])
	
.LABEL $label$10
	*([0] + [9640]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $29 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth(*($0))
	$2 = CALL $95($3, $2)
	CALL $30($0, $1, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($0)
	*($1) = (int_64)1
	*($1 + [8]) = [0]
	*($1 + [12 align=4]) = (int_64)0
	*($1 + [24]) = (int_64)4569063951553953530
	*($1 + [32]) = (int_64)4574720472685930873
	$6 = CALL $114([8192])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8762])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $10
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [8909])
	
.LABEL $label$7
	*($1 + [48]) = (int_64)10000
	*(($6 = ($1 + [56]))) = $9
	*($3 + [24]) = [8349]
	*($3 + [28]) = CALL $114([8349])
	*($3) = *($3 + [24])
	*($1 + [40]) = *(CALL $36(($3 + [8]), $3))
	$8 = *($4)
	*($1 + [48]) = *($8)
	*($6) = *(($8 + [8]))
	$8 = $2
	$6 = ($8 + [-64])
	$global$0 = $6
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($8 + [-6])
	CALL $63(($3 + [8]), $1)
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($5 + [8]), (int_64)4982871454518345728, *(*($0 + [8])), $7, $6, [58])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$12 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($3 + [32])
}

int_32 .FUNC $55 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $117($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [216])) = [0]
	*($4 + [200]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [188]) = $2
	*($4 + [184]) = $2
	*($4 + [192]) = ($2 + $7)
	$3 = $2
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9229])
	$3 = *($4 + [188])
	
.LABEL $label$4
	CALL memcpy(($4 + [200]), $3, [8])
	*($4 + [188]) = ($3 + [8])
	$8 = (($4 + [200]) + [8])
	CALL $59(($4 + [184]), $8)
	$3 = *((($4 + [184]) + [8]))
	*((($4 + [16]) + [8])) = $3
	*(($4 + [8])) = $3
	$9 = *($4 + [184])
	*($4) = $9
	*($4 + [16]) = $9
	$10 = CALL $57(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [200])
	$8 = CALL $95(($4 + [224]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$5 = CALL $95(($4 + [240]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [240]) & [1]) ){ goto $label$10 }
	if ( (*($4 + [224]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ($7 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $120($2)
	
.LABEL $label$6
	CALL $58($10)
	if ( ((*($4 + [208]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [216])))
	
.LABEL $label$11
	$global$0 = ($4 + [256])
	return [1]
}

int_64 .FUNC $107 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $105($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $106($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [18064])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [18048]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [18080]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $108($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC $106 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

void .FUNC $21 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL $22($0, $1)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($0)
	*($1) = (int_64)1
	*($1 + [8]) = [0]
	*($1 + [12 align=4]) = (int_64)0
	*($1 + [24]) = (int_64)4569063951553953530
	*($1 + [32]) = (int_64)4574720472685930873
	$6 = CALL $114([8192])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8762])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $10
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [8909])
	
.LABEL $label$7
	*($1 + [48]) = (int_64)10000
	*(($1 + [56])) = $9
	*($3 + [24]) = [8349]
	*($3 + [28]) = CALL $114([8349])
	*($3) = *($3 + [24])
	*($1 + [40]) = *(CALL $36(($3 + [8]), $3))
	*(($1 + [32])) = *(*($4))
	$8 = $2
	$6 = ($8 + [-64])
	$global$0 = $6
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($8 + [-6])
	CALL $63(($3 + [8]), $1)
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($5 + [8]), (int_64)4982871454518345728, *(*($0 + [8])), $7, $6, [58])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$12 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($3 + [32])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9285])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9331])
	
.LABEL $label$2
	*($1 + [40]) = *(*($3))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-64])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-6])
	CALL $63($5, $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [58])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [16])
}

void .FUNC $22 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [16]) = $1
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	if ( ((int_32)*($7 + [64]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9155])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)4982871454518345728, (int_64)1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $5($3, $6)
	if ( ((int_32)*($7 + [64]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9155])
	
.LABEL $label$2
	$1 = *($0)
	*($2 + [32]) = ($2 + [16])
	CALL $23($3, $7, $1, ($2 + [32]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($2 + [8]) = ($2 + [16])
	*($2 + [56]) = $1
	if ( ((int_64)*(($0 + [72])) == (int_64)CALL current_receiver()) ){ goto $label$6 }
	CALL eosio_assert([0], [9234])
	
.LABEL $label$6
	*($2 + [32]) = $3
	*($2 + [36]) = ($2 + [8])
	*($2 + [40]) = ($2 + [56])
	*(($6 = CALL _Znwj([80])) + [48]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = $3
	CALL $24(($2 + [32]), $6)
	*($2 + [48]) = $6
	$1 = *($6)
	*($2 + [32]) = $1
	$7 = *($6 + [68])
	*($2 + [28]) = $7
	$4 = ($0 + [100])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($2 + [48]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $8(($0 + [96]), ($2 + [48]), ($2 + [32]), ($2 + [28]))
	$6 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$global$0 = ($2 + [64])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = *(($1 + [8]))
	*((($2 + [16]) + [8])) = $3
	$4 = *($1)
	*(($2 + [8])) = $3
	*($2) = $4
	*($2 + [16]) = $4
	CALL $26($0, $2)
	$global$0 = ($2 + [32])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($0)
	*($1) = (int_64)1
	*($1 + [8]) = [0]
	*($1 + [12 align=4]) = (int_64)0
	*($1 + [24]) = (int_64)4569063951553953530
	*($1 + [32]) = (int_64)4574720472685930873
	$6 = CALL $114([8192])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8762])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $10
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [8909])
	
.LABEL $label$7
	*($1 + [48]) = (int_64)10000
	*(($1 + [56])) = $9
	*($3 + [24]) = [8349]
	*($3 + [28]) = CALL $114([8349])
	*($3) = *($3 + [24])
	*($1 + [40]) = *(CALL $36(($3 + [8]), $3))
	*($1 + [40]) = *(*($4))
	$8 = $2
	$6 = ($8 + [-64])
	$global$0 = $6
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($8 + [-6])
	CALL $63(($3 + [8]), $1)
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($5 + [8]), (int_64)4982871454518345728, *(*($0 + [8])), $7, $6, [58])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$12 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($3 + [32])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9285])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9331])
	
.LABEL $label$2
	$3 = *($3)
	*($1 + [48]) = *($3)
	*(($1 + [56])) = *(($3 + [8]))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-64])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-6])
	CALL $63($5, $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [58])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	if ( ((int_32)*($7 + [64]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9155])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)4982871454518345728, (int_64)1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $5($3, $6)
	if ( ((int_32)*($7 + [64]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9155])
	
.LABEL $label$2
	$8 = *($0)
	*($2 + [16]) = $1
	CALL $27($3, $7, $8, ($2 + [16]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	$8 = *($0)
	*($2 + [8]) = $1
	*($2 + [40]) = $8
	if ( ((int_64)*(($0 + [72])) == (int_64)CALL current_receiver()) ){ goto $label$6 }
	CALL eosio_assert([0], [9234])
	
.LABEL $label$6
	*($2 + [16]) = $3
	*($2 + [20]) = ($2 + [8])
	*($2 + [24]) = ($2 + [40])
	*(($6 = CALL _Znwj([80])) + [48]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = $3
	CALL $28(($2 + [16]), $6)
	*($2 + [32]) = $6
	$8 = *($6)
	*($2 + [16]) = $8
	$7 = *($6 + [68])
	*($2 + [12]) = $7
	$4 = ($0 + [100])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5 + [8]) = $8
	*($5 + [16]) = $7
	*($2 + [32]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $8(($0 + [96]), ($2 + [32]), ($2 + [16]), ($2 + [12]))
	$6 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$global$0 = ($2 + [48])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [10] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $111($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $111($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $111($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $111($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18096]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $111($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $111($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $111($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9149])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *($1 + [8])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9149])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9149])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [8])
	*(($3 = ($0 + [4]))) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9229])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9229])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*($1 + [8]) = *($2 + [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9229])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	*(($3 = ($0 + [4]))) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_64 .FUNC $108 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9149])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [9149])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [9441])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $42($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9229])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9229])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9229])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*($1 + [8]) = *($2 + [8])
	*($3) = (*($3) + [8])
	$0 = CALL $68(CALL $68($0, ($1 + [16])), ($1 + [40]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9149])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9149])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9149])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9149])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9149])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9149])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [6]) = *($1 + [8])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9149])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [6]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	*($2 + [7]) = *($1 + [9])
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert([0], [9149])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, ($2 + [7]), [1])
	$4 = (*($3) + [1])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [12])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [9149])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, $5, [4])
	$4 = (*($3) + [4])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [9149])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $3, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [24])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9149])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [32])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9149])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [40])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9149])
	$4 = *($3)
	
.LABEL $label$8
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [48])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9149])
	$4 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *(($1 + [56]))
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9149])
	$4 = *($3)
	
.LABEL $label$10
	CALL memcpy($4, ($2 + [8]), [8])
	*($3) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9229])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($0 + [8])
	if ( ((int_32)*($5) != (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert([0], [9229])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy(($2 + [6]), $4, [1])
	$4 = (*($3) + [1])
	*($3) = $4
	*(($1 + [8])) = ((int_32)*($2 + [6]) != (int_32)[0])
	if ( ((int_32)*($5) != (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert([0], [9229])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [7]), $4, [1])
	$4 = (*($3) + [1])
	*(($3 = ($0 + [4]))) = $4
	*(($1 + [9])) = ((int_32)*($2 + [7]) != (int_32)[0])
	$5 = ($1 + [12])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [9229])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($5, $4, [4])
	$4 = (*($3) + [4])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [9229])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $4, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [24])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9229])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [32])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9229])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [40])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9229])
	$4 = *($3)
	
.LABEL $label$8
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [48])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9229])
	$4 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9229])
	$4 = *($3)
	
.LABEL $label$10
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [56])) = *($2 + [8])
	*($3) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $101 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $100 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $97($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $103 (int_32 $0)
{
}

int_32 .FUNC $102 ()
{
	return [9628]
}

int_64 .FUNC $105 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_64 .FUNC $104 (float_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	float_64 $4
	$1 = ($global$0 - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$2 = (CASTING int_64)(float_64 $0)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$3) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = (float_64))(( ((float_64)((float_64)$0 + (float_64)(float_64)-4503599627370496) + (float_64)(float_64)4503599627370496) ? ((float_64)((float_64)$0 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) : ((int_64)$2 < (int_64)0) ) - $0)
	if ( ((uint_32)$3 > (uint_32)[1022]) ){ goto $label$2 }
	*($1 + [8]) = $4
	return (CASTING float_64)(int_32 (CASTING uint_32)(uint_64 (int_64)$2 >> (int_64)63)))
	
.LABEL $label$2
	$0 = ((float_64)$4 + (float_64)$0)
	if ( ((int_32)((float_64)$4 > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)-1)
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $120($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $117($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9624])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $117($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	*(($4 = $2) + [24]) = [9611]
	*($4 + [28]) = CALL $114([9611])
	*($4) = *($4 + [24])
	*($1) = *(CALL $36(($4 + [8]), $4))
	$5 = ($1 + [8])
	CALL $99($5, [9573])
	$6 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$2 = CALL $117($6)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + $6)
	$7 = $2
	if ( ((int_32)$6 > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9149])
	$7 = *($4 + [12])
	
.LABEL $label$4
	CALL memcpy($7, $1, [8])
	*($4 + [12]) = ($7 + [8])
	CALL $65(($4 + [8]), $5)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($3 + [8]), (int_64)6291842200389025792, *(*($0 + [8])), $8, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($3 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $120($2)
	if ( (uint_64)($8 <= *($3 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	*(($4 = $2) + [24]) = [9598]
	*($4 + [28]) = CALL $114([9598])
	*($4) = *($4 + [24])
	*($1) = *(CALL $36(($4 + [8]), $4))
	$5 = ($1 + [8])
	CALL $99($5, [9573])
	$6 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$2 = CALL $117($6)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + $6)
	$7 = $2
	if ( ((int_32)$6 > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9149])
	$7 = *($4 + [12])
	
.LABEL $label$4
	CALL memcpy($7, $1, [8])
	*($4 + [12]) = ($7 + [8])
	CALL $65(($4 + [8]), $5)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($3 + [8]), (int_64)6291842200389025792, *(*($0 + [8])), $8, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($3 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $120($2)
	if ( (uint_64)($8 <= *($3 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	*(($4 = $2) + [24]) = [9561]
	*($4 + [28]) = CALL $114([9561])
	*($4) = *($4 + [24])
	*($1) = *(CALL $36(($4 + [8]), $4))
	$5 = ($1 + [8])
	CALL $99($5, [9573])
	$6 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$2 = CALL $117($6)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + $6)
	$7 = $2
	if ( ((int_32)$6 > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9149])
	$7 = *($4 + [12])
	
.LABEL $label$4
	CALL memcpy($7, $1, [8])
	*($4 + [12]) = ($7 + [8])
	CALL $65(($4 + [8]), $5)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($3 + [8]), (int_64)6291842200389025792, *(*($0 + [8])), $8, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($3 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $120($2)
	if ( (uint_64)($8 <= *($3 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	*(($4 = $2) + [24]) = [9517]
	*($4 + [28]) = CALL $114([9517])
	*($4) = *($4 + [24])
	*($1) = *(CALL $36(($4 + [8]), $4))
	$5 = ($1 + [8])
	CALL $99($5, [9530])
	$6 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$2 = CALL $117($6)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + $6)
	$7 = $2
	if ( ((int_32)$6 > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9149])
	$7 = *($4 + [12])
	
.LABEL $label$4
	CALL memcpy($7, $1, [8])
	*($4 + [12]) = ($7 + [8])
	CALL $65(($4 + [8]), $5)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($3 + [8]), (int_64)6291842200389025792, *(*($0 + [8])), $8, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($3 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $120($2)
	if ( (uint_64)($8 <= *($3 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	*(($4 = $2) + [24]) = [8548]
	*($4 + [28]) = CALL $114([8548])
	*($4) = *($4 + [24])
	*($1) = *(CALL $36(($4 + [8]), $4))
	$5 = ($1 + [8])
	CALL $99($5, [9492])
	$6 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$2 = CALL $117($6)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + $6)
	$7 = $2
	if ( ((int_32)$6 > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9149])
	$7 = *($4 + [12])
	
.LABEL $label$4
	CALL memcpy($7, $1, [8])
	*($4 + [12]) = ($7 + [8])
	CALL $65(($4 + [8]), $5)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($3 + [8]), (int_64)6291842200389025792, *(*($0 + [8])), $8, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($3 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $120($2)
	if ( (uint_64)($8 <= *($3 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	*(($4 = $2) + [24]) = [8349]
	*($4 + [28]) = CALL $114([8349])
	*($4) = *($4 + [24])
	*($1) = *(CALL $36(($4 + [8]), $4))
	$5 = ($1 + [8])
	CALL $99($5, [9445])
	$6 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$2 = CALL $117($6)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + $6)
	$7 = $2
	if ( ((int_32)$6 > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9149])
	$7 = *($4 + [12])
	
.LABEL $label$4
	CALL memcpy($7, $1, [8])
	*($4 + [12]) = ($7 + [8])
	CALL $65(($4 + [8]), $5)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($3 + [8]), (int_64)6291842200389025792, *(*($0 + [8])), $8, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($3 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $120($2)
	if ( (uint_64)($8 <= *($3 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [9234])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $80(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $34(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [9234])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $81(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $34(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [9234])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)4602678819172646912
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)4602678819172646912
	*($3 + [64]) = $1
	CALL $78(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3 + [8])
	*($4 + [16]) = $2
	$5 = *($3 + [68])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $67(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [9234])
	
.LABEL $label$1
	*(($5 = CALL _Znwj([80])) + [48]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = $1
	CALL $79($3, $5)
	*($4 + [88]) = (($4 + [16]) + [58])
	*($4 + [84]) = ($4 + [16])
	*($4 + [80]) = ($4 + [16])
	CALL $63(($4 + [80]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)4982871454518345728, $2, $6, ($4 + [16]), [58])
	*($5 + [68]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$2 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($4 + [80]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [80]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $8(($1 + [24]), ($4 + [80]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($4 + [96])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [9234])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $84(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $34(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [9234])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $85(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $34(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [9234])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $82(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $34(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $42($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $44(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [8929])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [9034])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8967])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9034])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$11 = $10
	$global$0 = $11
	*(($12 = ($10 + $5))) = [0]
	$13 = *($1)
	$2 = ((int_64)$13 < (int_64)0)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : $2 ) * (int_64)((int_64)$13 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($12 + [-1])
	
.LOOP $label$5:
	$14 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$14 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $14
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ( [9086] ? [9098] : $2 )
	$9 = ((int_64)$13 / (int_64)$9)
	$15 = ($5 + [32])
	$11 = ($11 - (($5 + [47]) & [496]))
	$global$0 = $11
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*($3 + [8]) = $10
	*($3) = $9
	*($3 + [12]) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	CALL $113($11, $15, $12, $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $114($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $94($0)
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1) = (int_64)100000000000000
	$4 = *($0 + [4])
	*($1 + [8]) = *(*($4))
	*($1 + [16]) = (int_64)5000000000000
	$5 = *(*($4 + [4]))
	*($1 + [40]) = (int_64)20000000000
	*(($1 + [24])) = $5
	$6 = *($0)
	$4 = CALL $114([8192])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8762])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($4 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)4
	
.LABEL $label$1
	*(($1 + [48])) = $5
	$7 = $2
	$4 = ($7 + [-64])
	$global$0 = $4
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = $7
	CALL $46($3, $1)
	$5 = *(($1 + [8]))
	*($1 + [68]) = CALL db_store_i64(*($6 + [8]), (int_64)5555510502152994816, *(*($0 + [8])), $5, $4, [64])
	if ( (uint_64)($5 <= *($6 + [16])) ){ goto $label$7 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$global$0 = ($3 + [16])
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($1) = (int_64)1
	*($1 + [8]) = [0]
	*($1 + [12 align=4]) = (int_64)0
	*($1 + [24]) = (int_64)4569063951553953530
	*($1 + [32]) = (int_64)4574720472685930873
	*($2 + [16]) = [8349]
	*($2 + [20]) = CALL $114([8349])
	*($2 + [8]) = *($2 + [16])
	*($1 + [40]) = *(CALL $36(($2 + [24]), ($2 + [8])))
	$3 = CALL $114([8192])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8762])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8191]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8807])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$6 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)4
	
.LABEL $label$1
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$4 = $7
	$5 = $3
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$4 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $5 ){ goto $label$11 }
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [8909])
	
.LABEL $label$7
	*($1 + [48]) = (int_64)10000
	*(($1 + [56])) = $6
	$global$0 = ($2 + [32])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [20]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9285])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [9331])
	
.LABEL $label$2
	$6 = *($1)
	*($1) = *(*($3))
	$7 = ($1 + [8])
	CALL $96($7, *($3 + [4]))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [9382])
	
.LABEL $label$3
	$3 = *($7)
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [8])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $117($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	$8 = $4
	if ( ((int_32)$3 > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9149])
	$8 = *($5 + [4])
	
.LABEL $label$7
	CALL memcpy($8, $1, [8])
	*($5 + [4]) = ($8 + [8])
	CALL $65($5, $7)
	CALL db_update_i64(*($1 + [24]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $120($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $96($6, *($4 + [4]))
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $117($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	$7 = $2
	if ( ((int_32)$4 > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9149])
	$7 = *($3 + [4])
	
.LABEL $label$4
	CALL memcpy($7, $1, [8])
	*($3 + [4]) = ($7 + [8])
	CALL $65($3, $6)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($5 + [8]), (int_64)6291842200389025792, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $120($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $30 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [16]) = $1
	$4 = ($0 + [112])
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	if ( ((int_32)*($8 + [20]) == (int_32)$4) ){ goto $label$6 }
	CALL eosio_assert([0], [9155])
	
.LABEL $label$6
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)6291842200389025792, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $31($4, $7)
	if ( ((int_32)*($8 + [20]) == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert([0], [9155])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [36]) = $2
	*($3 + [32]) = ($3 + [16])
	CALL $32($4, $8, $1, ($3 + [32]))
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [12]) = $2
	*($3 + [8]) = ($3 + [16])
	*($3 + [56]) = $1
	if ( ((int_64)*(($0 + [112])) == (int_64)CALL current_receiver()) ){ goto $label$7 }
	CALL eosio_assert([0], [9234])
	
.LABEL $label$7
	*($3 + [32]) = $4
	*($3 + [36]) = ($3 + [8])
	*($3 + [40]) = ($3 + [56])
	*(($7 = CALL _Znwj([32]))) = (int_64)0
	*($7 + [8 align=4]) = (int_64)0
	*($7 + [16]) = [0]
	*($7 + [20]) = $4
	CALL $33(($3 + [32]), $7)
	*($3 + [48]) = $7
	$1 = *($7)
	*($3 + [32]) = $1
	$8 = *($7 + [24])
	*($3 + [28]) = $8
	$5 = ($0 + [140])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [144]))) ){ goto $label$10 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($3 + [48]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $34(($0 + [136]), ($3 + [48]), ($3 + [32]), ($3 + [28]))
	$7 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( $7 ){ goto $label$8 }
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$8
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($7 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($7)
	$global$0 = ($3 + [64])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	$7 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9206])
	
.LABEL $label$5
	$4 = CALL $117($6)
	$7 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $6)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $6)
	*(($5 = CALL _Znwj([32]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [20]) = $0
	$8 = ($5 + [8])
	$2 = $4
	if ( ((uint_32)$6 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9229])
	$2 = *($3 + [36])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $59(($3 + [32]), $8)
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($6 + [8]) = $9
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($2) = ($6 + [24])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $34(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $120($4)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $5
}