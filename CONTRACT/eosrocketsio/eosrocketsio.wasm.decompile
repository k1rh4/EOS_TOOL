(data (i32.const 4) " i\00\00")
(data (i32.const 16) "asset!positive\00")
(data (i32.const 32) "EOS\00")
(data (i32.const 48) "asset!EOS\00")
(data (i32.const 64) "setting!exist\00")
(data (i32.const 80) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 144) "error reading iterator\00")
(data (i32.const 176) "read\00")
(data (i32.const 192) "get\00")
(data (i32.const 208) "sku!exist\00")
(data (i32.const 224) "sku!stock\00")
(data (i32.const 240) "cannot pass end iterator to modify\00")
(data (i32.const 288) "object passed to modify is not in multi_index\00")
(data (i32.const 336) "cannot modify objects in table of another contract\00")
(data (i32.const 400) "updater cannot change primary key when modifying an object\00")
(data (i32.const 464) "write\00")
(data (i32.const 480) "active\00")
(data (i32.const 496) "eosio.token\00")
(data (i32.const 512) "transfer\00")
(data (i32.const 544) "cannot create objects in table of another contract\00")
(data (i32.const 608) "SYS\00")
(data (i32.const 624) "attempt to add asset with different symbol\00")
(data (i32.const 672) "addition underflow\00")
(data (i32.const 704) "addition overflow\00")
(data (i32.const 736) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 800) "invalid symbol name\00")
(data (i32.const 832) "ledger!account\00")
(data (i32.const 848) "ledger!balance\00")
(data (i32.const 864) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 928) "ledger>balance\00")
(data (i32.const 944) "attempt to subtract asset with different symbol\00")
(data (i32.const 992) "subtraction underflow\00")
(data (i32.const 1024) "subtraction overflow\00")
(data (i32.const 1056) "top_speed\00")
(data (i32.const 1072) "thrust\00")
(data (i32.const 1088) "weight\00")
(data (i32.const 1104) "fuel_capacity\00")
(data (i32.const 1120) "max_distance<=0\00")
(data (i32.const 1136) "sku!created\00")
(data (i32.const 1152) "sku!store\00")
(data (i32.const 1168) "self-ref\00")
(data (i32.const 1184) "referrer!exist\00")
(data (i32.const 1200) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1264) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1328) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1376) "rocket!exixst\00")
(data (i32.const 1392) "acount!owner\00")
(data (i32.const 1408) "rocket!sale\00")
(data (i32.const 1424) "cannot pass end iterator to erase\00")
(data (i32.const 1472) "object passed to erase is not in multi_index\00")
(data (i32.const 1520) "cannot erase objects in table of another contract\00")
(data (i32.const 1584) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1648) "cannot increment end iterator\00")
(data (i32.const 1680) "rocket!exist\00")
(data (i32.const 1696) "account=owner\00")
(data (i32.const 1712) "account!owner\00")
(data (i32.const 1728) "mission!exist\00")
(data (i32.const 1744) "mission!active\00")
(data (i32.const 1760) "active particpants\00")
(data (i32.const 1792) "rocket=for_sale\00")
(data (i32.const 1808) "divide by zero\00")
(data (i32.const 1824) "signed division overflow\00")
(data (i32.const 1856) "rocket<fuel_capacity\00")
(data (i32.const 1888) "fuel<=0\00")
(data (i32.const 1904) "fuel_launch<=0\00")
(data (i32.const 1920) "fuel_launch>fuel\00")
(data (i32.const 1952) "score\00")
(data (i32.const 1968) "ADMIN_ACCOUNT\00")
(data (i32.const 10384) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10480) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 10496) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 10512) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$8 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$9 (param i32)))
(import "env" "db_idx64_store" (func $fimport$10 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$11 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$15 (param i32)))
(import "env" "db_store_i64" (func $fimport$16 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$17 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$18 (param i32 i32)))
(import "env" "memcpy" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "read_transaction" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$24 (param i64)))
(import "env" "require_auth2" (func $fimport$25 (param i64 i64)))
(import "env" "send_inline" (func $fimport$26 (param i32 i32)))
(import "env" "sha256" (func $fimport$27 (param i32 i32 i32)))
(import "env" "transaction_size" (func $fimport$28 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN10eosrockets22require_positive_priceEN5eosio5assetE" (func $5))
(export "_ZN10eosrockets20require_eos_currencyEN5eosio5assetE" (func $6))
(export "_ZN10eosrockets14transaction_idEv" (func $8))
(export "_ZN10eosrockets7_sha256ENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $9))
(export "_ZN10eosrockets12_setting_keyENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $10))
(export "_ZN10eosrockets4game12_get_settingENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE" (func $11))
(export "_ZN10eosrockets4game12_get_settingEy" (func $26))
(export "_ZN10eosrockets7_randomEv" (func $27))
(export "_ZN10eosrockets4lerpEyym" (func $28))
(export "_ZN10eosrockets10lerp_bonusEyyym" (func $29))
(export "_ZN10eosrockets4game16_decrement_stockEy" (func $30))
(export "_ZN10eosrockets4game11transfer_toEyN5eosio5assetE" (func $38))
(export "_ZN10eosrockets4game9ledger_inEyN5eosio5assetE" (func $55))
(export "_ZN10eosrockets4game10ledger_outEyN5eosio5assetE" (func $69))
(export "_ZN10eosrockets4game7addtypeEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_mN5eosio5assetEmmmmmmmmy" (func $71))
(export "_ZN10eosrockets4game12buyretailrefEyyy" (func $84))
(export "_ZN10eosrockets4game19give_account_retailEyyb" (func $85))
(export "_ZN10eosrockets4game9buyretailEyy" (func $119))
(export "_ZN10eosrockets4game10buyauctionEyy" (func $120))
(export "_ZN10eosrockets4game4sellEyyN5eosio5assetE" (func $132))
(export "_ZN10eosrockets4game6unsellEyy" (func $134))
(export "_ZN10eosrockets4game10createmissEyhhhhN5eosio5assetEhyh" (func $135))
(export "_ZN10eosrockets4game9startmissEyyy" (func $162))
(export "_ZN10eosrockets4game7delmissEy" (func $165))
(export "_ZN10eosrockets4game6launchEyymmmm" (func $169))
(export "_ZN10eosrockets4game18do_low_earth_orbitEmmmymhhh" (func $171))
(export "_ZN10eosrockets4game25sort_truncate_leaderboardERKNSt3__16vectorINS_5entryENS1_9allocatorIS3_EEEEh" (func $183))
(export "_ZN10eosrockets4game20truncate_leaderboardERKNSt3__16vectorINS_5entryENS1_9allocatorIS3_EEEEh" (func $186))
(export "_ZN10eosrockets4game18do_target_approachEmmyymmy" (func $188))
(export "_ZN10eosrockets4game10finishmissEy" (func $189))
(export "_ZN10eosrockets4game11score_countERKNSt3__16vectorINS_5entryENS1_9allocatorIS3_EEEEy" (func $191))
(export "_ZN10eosrockets4game5clearEv" (func $192))
(export "_Z20eosio_system_accounty" (func $193))
(export "apply" (func $194))
(export "malloc" (func $232))
(export "free" (func $235))
(export "pow" (func $244))
(export "sqrt" (func $245))
(export "fabs" (func $246))
(export "scalbn" (func $247))
(export "llabs" (func $248))
(export "memcmp" (func $249))
(export "strlen" (func $250))
(table $0 12 12 anyfunc)
(elem (i32.const 0) $251 $162 $84 $71 $189 $169 $132 $120 $119 $134 $135 $165)



void .FUNC $220 (int_32 $0, int_32 $1)
{
	CALL $19(*($1), *($0))
	$0 = *($0)
	CALL $19(*($1), ($0 + [8]))
	CALL $19(CALL $68(*($1), ($0 + [16])), ($0 + [24]))
}

int_32 .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = int_32((*($1 + [4]) - *($1)) >> [3])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $185($0, $2)
	$3 = *($1)
	$1 = (*(($1 + [4])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$1 }
	$2 = ($0 + [4])
	CALL memcpy(*($2), $3, $1)
	*($2) = (*($2) + $1)
	
.LABEL $label$1
	return $0
}

void .FUNC _ZN10eosrockets20require_eos_currencyEN5eosio5assetE (int_32 $0)
{
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)CALL $7([32])), [48])
}

void .FUNC $176 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [336])
	*(($6 = $7)) = *($1 + [32])
	*($6 + [8]) = *($1 + [80])
	$4 = *($1)
	CALL _ZN10eosrockets4game25sort_truncate_leaderboardERKNSt3__16vectorINS_5entryENS1_9allocatorIS3_EEEEh(($6 + [32]), *($3), *($3 + [4]), [4])
	$5 = *($1 + [112])
	if ( ($5 == 0) ){ goto $label$2 }
	*(($1 + [116])) = $5
	CALL $237($5)
	*(($5 = ($1 + [120]))) = [0]
	*(($1 + [112])) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [120])
	
.LABEL $label$1
	*($5) = *($6 + [40])
	*(($1 + [112])) = *($6 + [32])
	*(($1 + [116])) = *($6 + [36])
	$3 = *($3 + [8])
	$5 = ($1 + [124])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$3 }
	CALL $184($5, *($3), *($3 + [4]))
	
.LABEL $label$3
	*($1 + [136]) = (*($1 + [136]) + [1])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [400])
	$5 = CALL $142($1)
	if ( ($5 <= [513]) ){ goto $label$5 }
	$3 = CALL malloc($5)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$4
	*($6 + [36]) = $3
	*($6 + [32]) = $3
	*($6 + [40]) = ($3 + $5)
	CALL $143(($6 + [32]), $1)
	CALL db_update_i64(*($1 + [144]), $2, $3, $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL free($3)
	
.LABEL $label$6
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$3 = ($6 + [8])
	*($6 + [24]) = *(($1 + [32]))
	if ( (CALL memcmp($6, ($6 + [24]), [8]) == 0) ){ goto $label$8 }
	$5 = *($1 + [148])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$9 }
	$5 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7804307891388678144, ($6 + [16]), $4)
	*(($1 + [148])) = $5
	
.LABEL $label$9
	CALL db_idx64_update($5, $2, ($6 + [24]))
	
.LABEL $label$8
	*($6 + [24]) = *(($1 + [80]))
	if ( (CALL memcmp($3, ($6 + [24]), [8]) == 0) ){ goto $label$10 }
	$3 = ($1 + [152])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$11 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7804307891388678143, ($6 + [16]), $4)
	*($3) = $1
	
.LABEL $label$11
	CALL db_idx64_update($1, $2, ($6 + [24]))
	
.LABEL $label$10
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$3 = *($0 + [4])
	$2 = *($0)
	$7 = $8
	CALL _ZN10eosrockets14transaction_idEv($7)
	$4 = ($7 + [31])
	$5 = (int_64)0
	$6 = (int_64)0
	
.LOOP $label$1:
	$6 = ((int_64)((int_64)*($4) << (int_64)$5) | (int_64)$6)
	$4 = ($4 + [-1])
	$5 = ((int_64)$5 + (int_64)8)
	if ( ((int_64)$5 != (int_64)64) ){ goto $label$1 }
	*($1) = $6
	*($1 + [8]) = *(*($3))
	*($1 + [16]) = *(*($3 + [4]))
	*($1 + [24]) = *(*($3 + [8]))
	*($1 + [32]) = *(*($3 + [12]))
	$3 = $8
	$4 = ($3 + [-48])
	*([0] + [4]) = $4
	*($7 + [4]) = $4
	*($7) = $4
	*($7 + [8]) = ($3 + [-8])
	CALL $182($7, $1)
	$5 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)-4455901713445945344, *(*($0 + [8])), $5, $4, [40])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$2 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $170 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [336])
	*(($6 = $5) + [16]) = *($1 + [32])
	*($6 + [24]) = *($1 + [80])
	$4 = *($1)
	$3 = *($3)
	*(($1 + [104])) = *(($3 + [8]))
	*($1 + [96]) = *($3)
	CALL eosio_assert([1], [400])
	$3 = CALL $142($1)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL $143($6, $1)
	CALL db_update_i64(*($1 + [144]), $2, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$5 = (($6 + [16]) + [8])
	*($6 + [40]) = *(($1 + [32]))
	if ( (CALL memcmp(($6 + [16]), ($6 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = *($1 + [148])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7804307891388678144, ($6 + [32]), $4)
	*(($1 + [148])) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($6 + [40]))
	
.LABEL $label$5
	*($6 + [40]) = *(($1 + [80]))
	if ( (CALL memcmp($5, ($6 + [40]), [8]) == 0) ){ goto $label$7 }
	$5 = ($1 + [152])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7804307891388678143, ($6 + [32]), $4)
	*($5) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($6 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($6 + [48])
}

int_64 .FUNC _ZN10eosrockets4game18do_low_earth_orbitEmmmymhhh (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$13 = ((int_64)(CASTING uint_64)(uint_32 $3) + (int_64)(CASTING uint_64)(uint_32 ($1 - $2)))
	if ( ((int_32)$5 == (int_32)[3]) ){ goto $label$4 }
	if ( ((int_32)$5 == (int_32)[2]) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[1]) ){ goto $label$2 }
	$13 = ((int_64)$13 + (int_64)(CASTING uint_64)(uint_32 ((uint_32)$3 / (uint_32)[10])))
	$14 = (int_64)30
	$15 = (int_64)20000
	goto $label$1 
	
.LABEL $label$4
	$13 = ((int_64)$13 + (int_64)(CASTING uint_64)(uint_32 uint_32($3 >> [3])))
	$14 = (int_64)10
	$15 = (int_64)40000
	goto $label$1 
	
.LABEL $label$3
	$13 = ((int_64)$13 + (int_64)(CASTING uint_64)(uint_32 ((uint_32)$3 / (uint_32)[9])))
	$14 = (int_64)20
	$15 = (int_64)30000
	goto $label$1 
	
.LABEL $label$2
	$14 = ( (int_64)0 ? (int_64)80 : $5 )
	$15 = (int_64)10000
	
.LABEL $label$1
	if ( ((uint_32)(($6 + [-1]) & [255]) > (uint_32)[1]) ){ goto $label$6 }
	$13 = ((int_64)$13 + (int_64)(CASTING uint_64)(uint_32 ((int_32)$7 * (int_32)((uint_32)$3 / (uint_32)[1000]))))
	$16 = (int_64)100
	goto $label$5 
	
.LABEL $label$6
	$16 = (int_64)100
	if ( ((int_32)$6 != (int_32)[3]) ){ goto $label$5 }
	$16 = (CASTING uint_64)(uint_32 (((uint_32)$7 / (uint_32)[10]) + [100]))
	
.LABEL $label$5
	$14 = ((uint_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $8) * (int_64)$14) * (int_64)10) / (uint_64)(int_64)300)
	if ( ($2 == 0) ){ goto $label$7 }
	$9 = ((int_64)$16 + (int_64)$14)
	$14 = ((int_64)(CASTING uint_64)(uint_32 $2) + (int_64)2000)
	$11 = (int_64))((int_64)-98000 - $15)
	$10 = ((int_64)$4 * (int_64)10000)
	$15 = (int_64)0
	$16 = (int_64)0
	$4 = (int_64)0
	
.LOOP $label$8:
	$12 = ((int_64)$11 + (int_64)$4)
	$15 = ((int_64)((uint_64)((int_64)$16 * (int_64)100) / (uint_64)$9) + (int_64)$15)
	$4 = ((int_64)((uint_64)$10 / (uint_64)((int_64)((int_64)$13 + (int_64)$14) + (int_64)-2000)) + (int_64)$4)
	$16 = ((int_64)$12 + (int_64)$16)
	$16 = ( $16 ? (int_64)0 : ((int_64)$16 > (int_64)0) )
	$14 = ((int_64)$14 + (int_64)-2000)
	if ( ((int_64)$14 > (int_64)2000) ){ goto $label$8 }
	return ((int_64)((int_64)$15 / (int_64)10000) + (int_64)-2000000)
	
.LABEL $label$7
	return (int_64)-2000000
}

int_32 .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = (*($1 + [4]) - *($1))
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $187($0, ((int_32)$2 / (int_32)[24]))
	$3 = *($1)
	$1 = (*(($1 + [4])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$1 }
	$2 = ($0 + [4])
	CALL memcpy(*($2), $3, $1)
	*($2) = (*($2) + ((int_32)((uint_32)$1 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$1
	return $0
}

int_64 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$3 = [-1]
	
.LOOP $label$1:
	$2 = ($0 + $3)
	$1 = ($3 + [1])
	$3 = $1
	if ( *(($2 + [1])) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$3 }
	$5 = (CASTING uint_64)(uint_32 $1)
	$4 = (int_64)0
	$6 = (int_64)8
	
.LOOP $label$4:
	$3 = *($0)
	if ( ((uint_32)(($3 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$6 & (int_64)4294967288)) | (int_64)$4)
	
.LABEL $label$5
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)8)
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)($5 == 0) == 0) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = (int_64)0
	
.LABEL $label$2
	return ((int_64)$4 | (int_64)4)
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

void .FUNC $178 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = ($0 + [8])
	$8 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	
.LABEL $label$2
	$8 = CALL $179(($9 + [8]), $8, $6, $4)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($8 + [8])) + [8]) = *($2)
	*($1) = $5
	*($1 + [16]) = *($3)
	*($8 + [8]) = ($1 + [24])
	CALL $180($0, $8)
	CALL $181($8)
	*([0] + [4]) = ($9 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC $221 (int_32 $0, int_32 $1)
{
	CALL $19(*($1), *($0))
	$0 = *($0)
	CALL $19(*($1), ($0 + [8]))
	CALL $19(*($1), ($0 + [16]))
}

void .FUNC _ZN10eosrockets22require_positive_priceEN5eosio5assetE (int_32 $0)
{
	CALL eosio_assert(((int_64)*($0) > (int_64)0), [16])
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = ($0 + [8])
	$8 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	
.LABEL $label$2
	$8 = CALL $128(($9 + [8]), $8, $6, $4)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($8 + [8])) + [8]) = *($2)
	*($1) = $5
	*($1 + [16]) = *($3)
	*($8 + [8]) = ($1 + [24])
	CALL $129($0, $8)
	CALL $130($8)
	*([0] + [4]) = ($9 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

void .FUNC _ZN10eosrockets4game10finishmissEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	float_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	$26 = (*([0] + [4]) - [304])
	*([0] + [4]) = $26
	CALL require_auth(*($0))
	$2 = ($0 + [128])
	CALL $163(($26 + [184]), $2, $1)
	CALL eosio_assert(((int_32)*($26 + [188]) != (int_32)[0]), [1728])
	CALL eosio_assert(*(*($26 + [188]) + [32]), [1744])
	$3 = CALL $172(($26 + [168]), (*($26 + [188]) + [112]))
	$9 = *($26 + [188])
	*(($12 = (($26 + [152]) + [8]))) = *(($9 + [104]))
	*($26 + [152]) = *($9 + [96])
	*(($13 = (($26 + [136]) + [8]))) = *($12)
	*($26 + [136]) = *($26 + [152])
	$17 = *($3)
	$9 = *($3 + [4])
	$24 = ($9 - $17)
	$25 = ((int_32)$24 / (int_32)[24])
	if ( ($24 == 0) ){ goto $label$1 }
	$5 = ($0 + [208])
	$4 = ($0 + [8])
	$6 = (($26 + [192]) + [65])
	$22 = ($0 + [16])
	$23 = ($3 + [4])
	$16 = [0]
	$24 = [0]
	
.LOOP $label$2:
	$20 = [0]
	if ( ((int_32)$9 == (int_32)$17) ){ goto $label$3 }
	$1 = *(($17 + ((int_32)$16 * (int_32)[24])) + [16])
	$9 = [0]
	$20 = [0]
	
.LOOP $label$4:
	$11 = *(($17 + ((int_32)$9 * (int_32)[24])) + [16])
	if ( ((uint_64)$11 > (uint_64)$1) ){ goto $label$3 }
	if ( ((int_64)$11 != (int_64)$1) ){ goto $label$5 }
	$20 = (($20 & [255]) + [1])
	
.LABEL $label$5
	$9 = (($9 + [1]) & [255])
	if ( ($9 <= $25) ){ goto $label$4 }
	
.LABEL $label$3
	$17 = CALL $57(($26 + [120]), (int_64)0, CALL $7([32]))
	$9 = ($20 & [255])
	$25 = ($24 & [255])
	if ( ((uint_32)$25 >= (uint_32)$9) ){ goto $label$6 }
	
.LOOP $label$7:
	$24 = (($24 & [255]) + [1])
	$14 = CALL pow((float_64)2, (CASTING float_64)(int_32 $24))
	*((($26 + [192]) + [8])) = *($12)
	*($26 + [192]) = *($26 + [152])
	$1 = (Rounds 0)($14)
	CALL eosio_assert(((int_64)$1 != (int_64)0), [1808])
	CALL eosio_assert((((int_64)$1 != (int_64)-1) | ((int_64)*($26 + [192]) != (int_64)-9223372036854775808)), [1824])
	*($26 + [192]) = ((int_64)*($26 + [192]) / (int_64)$1)
	CALL $60($17, ($26 + [192]))
	if ( (($24 & [255]) <= $9) ){ goto $label$7 }
	
.LABEL $label$6
	$15 = (($26 + [120]) + [8])
	CALL eosio_assert(((int_64)*($15) == (int_64)*($13)), [864])
	if ( ((int_64)*($26 + [120]) <= (int_64)*($26 + [136])) ){ goto $label$8 }
	*($15) = *($13)
	*($26 + [120]) = *($26 + [136])
	
.LABEL $label$8
	$24 = ($9 + $16)
	if ( ((uint_32)$25 >= (uint_32)$24) ){ goto $label$9 }
	$17 = (([10] - $16) & [255])
	$1 = ( (CASTING uint_64)(uint_32 ((uint_32)$17 % (uint_32)[100])) ? (int_64)0 : $17 )
	$8 = ((int_32)$9 != (int_32)[0])
	$7 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$10:
	$16 = ((int_32)$25 * (int_32)[24])
	CALL $121(($26 + [112]), $4, *((*($3) + $16) + [8]))
	CALL eosio_assert(((int_32)*($26 + [116]) != (int_32)[0]), [1680])
	CALL $72(($26 + [104]), $5, *(*($26 + [116]) + [16]))
	CALL eosio_assert(((int_32)*($26 + [108]) != (int_32)[0]), [208])
	$10 = *((*($3) + $16))
	$9 = *($26 + [116])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [240])
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)$4), [288])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$2()), [336])
	*($26 + [280]) = *($9 + [8])
	$11 = *($9)
	$20 = *($26 + [116])
	$21 = ((int_64)((uint_64)((int_64))($19 - $18) * (int_64)$1) / (uint_64)(int_64)100) + (int_64)*($20 + [24])
	$18 = *($17 + [72])
	$18 = ( $18 ? $21) : (uint_64)($21 <= $18) 
	$17 = *($26 + [108])
	$19 = *($17 + [76])
	*($9 + [24]) = ( $19 ? $18) : ((uint_64)$18 > (uint_64)$19) )
	$21 = ((int_64)((uint_64)((int_64))($19 - $18) * (int_64)$1) / (uint_64)(int_64)100) + (int_64)*($20 + [28])
	$18 = *($17 + [80])
	$18 = ( $18 ? $21) : (uint_64)($21 <= $18) 
	$19 = *($17 + [84])
	*($9 + [28]) = ( $19 ? $18) : ((uint_64)$18 > (uint_64)$19) )
	$21 = ((int_64)((uint_64)((int_64))($19 - $18) * (int_64)$1) / (uint_64)(int_64)100) + (int_64)*($20 + [32])
	$18 = *($17 + [88])
	$18 = ( $18 ? $21) : (uint_64)($21 <= $18) 
	$19 = *($17 + [92])
	*($9 + [32]) = ( $19 ? $18) : ((uint_64)$18 > (uint_64)$19) )
	$21 = ((int_64)((uint_64)((int_64))($19 - $18) * (int_64)$1) / (uint_64)(int_64)100) + (int_64)*($20 + [36])
	$18 = *($17 + [96])
	$18 = ( $18 ? $21) : (uint_64)($21 <= $18) 
	$19 = *($17 + [100])
	*($9 + [36]) = ( $19 ? $18) : ((uint_64)$18 > (uint_64)$19) )
	CALL eosio_assert([1], [400])
	*((($26 + [264]) + [8])) = $6
	*($26 + [268]) = ($26 + [192])
	*($26 + [264]) = ($26 + [192])
	CALL $107(($26 + [264]), $9)
	CALL db_update_i64(*($9 + [76]), $10, ($26 + [192]), [65])
	$17 = ($0 + [24])
	if ( (uint_64)($11 <= *($17)) ){ goto $label$11 }
	*($17) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($26 + [296]) = *(($9 + [8]))
	if ( (CALL memcmp(($26 + [280]), ($26 + [296]), [8]) == 0) ){ goto $label$12 }
	$17 = ($9 + [80])
	$9 = *($17)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$13 }
	$9 = CALL db_idx64_find_primary(*($4), *($22), (int_64)7612987020020809728, ($26 + [288]), $11)
	*($17) = $9
	
.LABEL $label$13
	CALL db_idx64_update($9, $10, ($26 + [296]))
	
.LABEL $label$12
	$11 = *((*($3) + $16))
	*((($26 + [88]) + [12])) = *((($26 + [120]) + [12]))
	*(($9 = (($26 + [88]) + [8]))) = *($15)
	*($26 + [92]) = *($26 + [124])
	*($26 + [88]) = *($26 + [120])
	CALL eosio_assert($8, [1808])
	CALL eosio_assert([1], [1824])
	*((($26 + [40]) + [8])) = *($9)
	$19 = ((int_64)*($26 + [88]) / (int_64)$7)
	*($26 + [88]) = $19
	*($26 + [40]) = $19
	CALL _ZN10eosrockets4game9ledger_inEyN5eosio5assetE($0, $11, ($26 + [40]))
	*((($26 + [192]) + [8])) = *($15)
	*($26 + [192]) = *($26 + [120])
	CALL eosio_assert($8, [1808])
	CALL eosio_assert([1], [1824])
	*($26 + [192]) = ((int_64)*($26 + [192]) / (int_64)$7)
	CALL $70(($26 + [136]), ($26 + [192]))
	$25 = (($25 + [1]) & [255])
	if ( ($25 <= $24) ){ goto $label$10 }
	
.LABEL $label$9
	$17 = *($3)
	$9 = *($23)
	$25 = ((int_32)($9 - $17) / (int_32)[24])
	$16 = ($24 & [255])
	if ( ($16 <= $25) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_64)*($26 + [136]) < (int_64)1) ){ goto $label$14 }
	$24 = [0]
	if ( ((int_32)$9 == (int_32)$17) ){ goto $label$15 }
	$1 = *(($9 + [-8]))
	$9 = [0]
	$24 = [0]
	
.LOOP $label$16:
	$11 = *(($17 + ((int_32)$9 * (int_32)[24])) + [16])
	if ( ((uint_64)$11 > (uint_64)$1) ){ goto $label$15 }
	if ( ((int_64)$11 != (int_64)$1) ){ goto $label$17 }
	$24 = (($24 & [255]) + [1])
	
.LABEL $label$17
	$9 = (($9 + [1]) & [255])
	if ( ($9 <= $25) ){ goto $label$16 }
	
.LABEL $label$15
	*(($20 = (($26 + [192]) + [8]))) = *((($26 + [136]) + [8]))
	*($26 + [192]) = *($26 + [136])
	$17 = ($24 & [255])
	CALL eosio_assert(((int_32)$17 != (int_32)[0]), [1808])
	CALL eosio_assert([1], [1824])
	*($26 + [192]) = ((int_64)*($26 + [192]) / (int_64)(CASTING uint_64)(uint_32 $17))
	if ( ($17 == 0) ){ goto $label$18 }
	$9 = [0]
	$4 = ($3 + [4])
	
.LOOP $label$19:
	$24 = *($3)
	$1 = *(($24 + ((int_32)(($9 - $17) + ((int_32)(*($4) - $24) / (int_32)[24])) * (int_32)[24])))
	*((($26 + [72]) + [12])) = *((($26 + [192]) + [12]))
	*(($24 = (($26 + [72]) + [8]))) = *($20)
	*($26 + [76]) = *($26 + [196])
	*($26 + [72]) = *($26 + [192])
	*((($26 + [24]) + [8])) = *($24)
	*($26 + [24]) = *($26 + [72])
	CALL _ZN10eosrockets4game9ledger_inEyN5eosio5assetE($0, $1, ($26 + [24]))
	CALL $70(($26 + [136]), ($26 + [192]))
	$9 = (($9 + [1]) & [255])
	if ( ($9 <= $17) ){ goto $label$19 }
	
.LABEL $label$18
	if ( ((int_64)*($26 + [136]) < (int_64)1) ){ goto $label$14 }
	$1 = *((*(($3 + [4])) + [-24]))
	*((($26 + [56]) + [12])) = *((($26 + [136]) + [12]))
	*(($9 = (($26 + [56]) + [8]))) = *((($26 + [136]) + [8]))
	*($26 + [60]) = *($26 + [140])
	*($26 + [56]) = *($26 + [136])
	*((($26 + [8]) + [8])) = *($9)
	*($26 + [8]) = *($26 + [56])
	CALL _ZN10eosrockets4game9ledger_inEyN5eosio5assetE($0, $1, ($26 + [8]))
	CALL $70(($26 + [136]), ($26 + [136]))
	
.LABEL $label$14
	$1 = *($0)
	$9 = *($26 + [188])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [240])
	CALL $190($2, $9, $1)
	$9 = *($3)
	if ( ($9 == 0) ){ goto $label$20 }
	*(($3 + [4])) = $9
	CALL $237($9)
	
.LABEL $label$20
	*([0] + [4]) = ($26 + [304])
}

int_64 .FUNC _ZN10eosrockets4game18do_target_approachEmmyymmy (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6, int_64 $7)
{
	int_64 $8
	$4 = (uint_64)((int_64)$4 * (int_64)3000) >> (uint_64)(int_64)1
	$3 = ((uint_64)((int_64)$3 * (int_64)100) / (uint_64)$8)
	$8 = (CASTING uint_64)(uint_32 $5)
	$3 = ((int_64)((int_64)((int_64)((int_64)((int_64)$8 * (int_64)((int_64)((int_64)( ((int_64)$3 * (int_64)10) ? $3 : ((uint_64)$4 > (uint_64)(int_64)99999999) ) * (int_64)10737418240000) + (int_64)536870912000000) >> (int_64)32)) * (int_64)10000) / (int_64)(CASTING uint_64)(uint_32 $6)) * (int_64)(CASTING uint_64)(uint_32 ($1 - $2))) / (int_64)10000000
	$7 = ((uint_64)((int_64))(( $7 ? $3) : ((uint_64)$3 > (uint_64)$7) ) - $4) * (int_64)10000000
	return ( $7 / (uint_64)(int_64)10000)) ? $4) : (uint_64)($7 <= $4) )
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = *($1)
	$2 = *($1 + [4])
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$1 = *($0)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$1 = (((($4 + [-16]) & [-16]) + $1) + [16])
	
.LABEL $label$2
	*($0) = $1
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = *($0 + [4])
	$6 = *($1)
	$4 = ($0 + [8])
	$1 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $5) > (int_32)[0]), [464])
	CALL memcpy(*($1), ($7 + [15]), [1])
	$5 = (*($1) + [1])
	*($1) = $5
	if ( $3 ){ goto $label$1 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $236 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10476])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0) = (*($0) + [16])
	$0 = CALL $49($0, ($1 + [16]))
	$3 = *($1 + [28])
	$2 = *(($1 + [32]))
	$1 = (($2 + *($0)) - $3)
	$4 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $1
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($3) = [0]
	CALL $43($3, $1)
	CALL $23($0, *($3))
	$2 = *($0)
	*($3) = $2
	*($3 + [4]) = $2
	*($3 + [8]) = *($0 + [4])
	CALL $44($3, $1)
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $41 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $42($1, $0)
	$0 = *($1)
	CALL send_inline($0, (*($1 + [4]) - $0))
	$0 = *($1)
	if ( ($0 == 0) ){ goto $label$1 }
	*($1 + [4]) = $0
	CALL $237($0)
	
.LABEL $label$1
	*([0] + [4]) = ($1 + [16])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$6 = CALL $236([16])
	*($0 + [16]) = $6
	*(($7 = ($0 + [20]))) = $6
	*($5) = ($6 + [16])
	*(($6 + [8])) = *(($1 + [8]))
	*($6) = *($1)
	*($7) = (*($7) + [16])
	CALL $50(($0 + [28]), $4)
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [8]) = (*($1 + [4]) - *($1))
	CALL $48($0, ($3 + [8]))
	$2 = *($1)
	$1 = (*($1 + [4]) - $2)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) >= (int_32)$1), [464])
	CALL memcpy(*($0 + [4]), $2, $1)
	*($0 + [4]) = (*($0 + [4]) + $1)
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [8]) = int_32((*($1 + [4]) - *($1)) >> [4])
	CALL $48($0, ($3 + [8]))
	$1 = *($1 + [4])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	
.LOOP $label$2:
	CALL $45(CALL $45($0, $2), ($2 + [8]))
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	return CALL $47(CALL $46(CALL $45(CALL $45($0, $1), ($1 + [8])), ($1 + [16])), ($1 + [28]))
}

void .FUNC $222 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [176])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [176])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

int_32 .FUNC $234 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10470]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10472])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10470]) = [1]
	$7 = ($7 << [16])
	*([0] + [10472]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10472])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10472]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10470]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10470]) = [1]
	$3 = ($3 << [16])
	*([0] + [10472]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10472])
	
.LABEL $label$8
	*([0] + [10472]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $233 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $234($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10384])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $226 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	CALL $19(*($1), *($0))
	$0 = *($0)
	CALL $20(*($1), ($0 + [8]))
	CALL $20(*($1), ($0 + [20]))
	CALL $20(*($1), ($0 + [32]))
	*($2 + [8]) = $0
	CALL $227(($2 + [8]), $1)
	*([0] + [4]) = ($2 + [16])
}

void .FUNC $167 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [1472])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1520])
	$3 = *($0 + [24])
	$4 = ($0 + [28])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$5 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$8 = ($6 + [-24])
	$6 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1584])
	$8 = ($7 + [-24])
	$6 = *($4)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = ([0] - $6)
	$6 = $8
	
.LOOP $label$5:
	$8 = ($6 + [24])
	$5 = *($8)
	*($8) = [0]
	$7 = *($6)
	*($6) = $5
	if ( ($7 == 0) ){ goto $label$6 }
	$5 = *($7 + [124])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($7 + [128])) = $5
	CALL $237($5)
	
.LABEL $label$7
	$5 = *($7 + [112])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($7 + [116])) = $5
	CALL $237($5)
	
.LABEL $label$8
	CALL $237($7)
	
.LABEL $label$6
	*(($6 + [16])) = *(($6 + [40]))
	*(($6 + [8])) = *(($6 + [32]))
	$6 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	$5 = *($6 + [124])
	if ( ($5 == 0) ){ goto $label$11 }
	*(($6 + [128])) = $5
	CALL $237($5)
	
.LABEL $label$11
	$5 = *($6 + [112])
	if ( ($5 == 0) ){ goto $label$12 }
	*(($6 + [116])) = $5
	CALL $237($5)
	
.LABEL $label$12
	CALL $237($6)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [144]))
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [8]) = $9
	CALL $168(($0 + [36]), ($9 + [8]))
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $166 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1648])
	$1 = CALL db_next_i64(*(*($0 + [4]) + [144]), ($3 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $149(*($0), $1)
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC _ZN10eosrockets4game7delmissEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL require_auth(*($0))
	$2 = ($0 + [128])
	CALL $163($3, $2, $1)
	CALL eosio_assert(((int_32)*($3 + [4]) != (int_32)[0]), [1728])
	$0 = *($3 + [4])
	if ( (int_64)(*($0 + [32]) == 0) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(($0 + [128])) == (int_32)*($0 + [124])), [1760])
	
.LABEL $label$1
	$1 = *($3)
	*($3 + [8]) = $1
	$0 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$0) != (int_32)[0]), [1424])
	CALL $166(($3 + [8]))
	CALL $167($2, $0)
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $164 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [336])
	*($1 + [40]) = (int_64)1
	$4 = *($1 + [80])
	*($1 + [80]) = *(*($3))
	*(($6 = $7) + [16]) = *($1 + [32])
	*($6 + [24]) = $4
	$4 = *($1)
	*($1 + [72]) = *(*($3 + [4]))
	CALL eosio_assert([1], [400])
	$5 = CALL $142($1)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$3 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$1
	*($6 + [4]) = $3
	*($6) = $3
	*($6 + [8]) = ($3 + $5)
	CALL $143($6, $1)
	CALL db_update_i64(*($1 + [144]), $2, $3, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($3)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$3 = ($6 + [24])
	*($6 + [40]) = *(($1 + [32]))
	if ( (CALL memcmp(($6 + [16]), ($6 + [40]), [8]) == 0) ){ goto $label$5 }
	$5 = *($1 + [148])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$6 }
	$5 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7804307891388678144, ($6 + [32]), $4)
	*(($1 + [148])) = $5
	
.LABEL $label$6
	CALL db_idx64_update($5, $2, ($6 + [40]))
	
.LABEL $label$5
	*($6 + [40]) = *(($1 + [80]))
	if ( (CALL memcmp($3, ($6 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = ($1 + [152])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7804307891388678143, ($6 + [32]), $4)
	*($3) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($6 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $163 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($1 + [24])
	$7 = *(($1 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-7804307891388678144, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $149($1, $6)
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	
.LABEL $label$3
	*($0) = $1
}

void .FUNC _ZN10eosrockets4game9startmissEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6 + [24]) = $2
	*($6 + [16]) = $3
	CALL require_auth(*($0))
	$4 = ($0 + [128])
	CALL $163(($6 + [8]), $4, $1)
	CALL eosio_assert(((int_32)*($6 + [12]) != (int_32)[0]), [1728])
	CALL eosio_assert(*(*($6 + [12]) + [32]), [1744])
	$5 = *($6 + [12])
	$1 = *($0)
	*($6 + [4]) = ($6 + [16])
	*($6) = ($6 + [24])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [240])
	CALL $164($4, $5, $1, $6)
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = (*($0 + [4]) - $3)
	$4 = (*($1 + [4]) + ((int_32)((int_32)$2 / (int_32)[-24]) * (int_32)[24]))
	*($1 + [4]) = $4
	if ( ((int_32)$2 <= (int_32)[0]) ){ goto $label$1 }
	CALL memcpy($4, $3, $2)
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	$2 = *($0)
	*($0) = $4
	*(($4 = ($1 + [4]))) = $2
	$2 = ($0 + [4])
	$3 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $3
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($4)
}

int_32 .FUNC $160 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $236(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$3 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $3
	*($0 + [4]) = $3
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $230 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL $57(($0 + [16]), (int_64)0, CALL $7([608]))
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	$3 = [32]
	
.LOOP $label$1:
	*(($0 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[44]) ){ goto $label$1 }
	*($4 + [4]) = $1
	*($4) = $1
	*($4 + [8]) = ($1 + $2)
	CALL $231($4, $0)
	*([0] + [4]) = ($4 + [16])
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [10496])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [10480]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [10512]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

void .FUNC _ZN10eosrockets4game6launchEyymmmm (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [240])
	*([0] + [4]) = $15
	*($15 + [192]) = $1
	$7 = ($0 + [128])
	CALL $163(($15 + [184]), $7, $1)
	$14 = [0]
	CALL eosio_assert(((int_32)*($15 + [188]) != (int_32)[0]), [1728])
	CALL eosio_assert(*(*($15 + [188]) + [32]), [1744])
	CALL $121(($15 + [176]), ($0 + [8]), $2)
	CALL eosio_assert(((int_32)*($15 + [180]) != (int_32)[0]), [1680])
	CALL eosio_assert((*(*($15 + [180]) + [48]) == 0), [1792])
	CALL require_auth(*(*($15 + [180]) + [8]))
	$9 = *($15 + [188])
	*((($15 + [160]) + [8])) = *(($9 + [24]))
	*($15 + [160]) = *($9 + [16])
	CALL eosio_assert([1], [1808])
	CALL eosio_assert([1], [1824])
	*($15 + [160]) = ((int_64)*($15 + [160]) / (int_64)10)
	$9 = *($15 + [188])
	*((($15 + [144]) + [8])) = *(($9 + [24]))
	*($15 + [144]) = *($9 + [16])
	CALL $70(($15 + [144]), ($15 + [160]))
	$1 = *(*($15 + [180]) + [8])
	$9 = *($15 + [188])
	*(($15 + [140])) = *(($9 + [28]))
	*(($8 = (($15 + [128]) + [8]))) = *(($9 + [24]))
	*($15 + [128]) = *($9 + [16])
	*($15 + [132]) = *(($9 + [20]))
	*(($15 + [8])) = *($8)
	*($15) = *($15 + [128])
	CALL _ZN10eosrockets4game10ledger_outEyN5eosio5assetE($0, $1, $15)
	$9 = *($15 + [188])
	*((($15 + [112]) + [8])) = *(($9 + [104]))
	*($15 + [112]) = *($9 + [96])
	CALL $60(($15 + [112]), ($15 + [144]))
	$9 = *($15 + [188])
	$1 = *($0)
	*($15 + [64]) = ($15 + [112])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [240])
	CALL $170($7, $9, $1, ($15 + [64]))
	CALL eosio_assert(((uint_32)*(*($15 + [180]) + [36]) >= (uint_32)$4), [1856])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1888])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1904])
	CALL eosio_assert(((uint_32)$4 > (uint_32)$5), [1920])
	$8 = *($15 + [180])
	$2 = *($8 + [40])
	$9 = *($15 + [188])
	$1 = *($9 + [56])
	$10 = *($8 + [28])
	$11 = *($8 + [32])
	$12 = ((int_64)CALL _ZN10eosrockets4game18do_low_earth_orbitEmmmymhhh($15, $4, $5, $11, $10, $6, *($9 + [10]), *($9 + [11]), *($9 + [8])) / (int_64)1000)
	*($15 + [104]) = $12
	$1 = (uint_64)((int_64)$1 * (int_64)3000) >> (uint_64)(int_64)1
	$13 = ((uint_64)((int_64)(CASTING uint_64)(uint_32 $3) * (int_64)100) / (uint_64)$10)
	$10 = ((int_64)((int_64)((int_64)((int_64)((int_64)$10 * (int_64)((int_64)((int_64)( ((int_64)$13 * (int_64)10) ? $13 : ((uint_64)$1 > (uint_64)(int_64)99999999) ) * (int_64)10737418240000) + (int_64)536870912000000) >> (int_64)32)) * (int_64)10000) / (int_64)(CASTING uint_64)(uint_32 $11)) * (int_64)(CASTING uint_64)(uint_32 ($4 - $5))) / (int_64)10000000
	$2 = ((uint_64)((int_64))(( $2 ? $10) : ((uint_64)$10 > (uint_64)$2) ) - $1) * (int_64)10000000
	$1 = ((uint_64)( $2 / (uint_64)(int_64)10000)) ? $1
	*($15 + [96]) = $1 : (uint_64)($2 <= $1) ) / (uint_64)(int_64)1000))
	$2 = ((int_64)CALL llabs($12) + (int_64)CALL llabs($1))
	*($15 + [88]) = $2
	*($15 + [80]) = $2
	$4 = *($15 + [180])
	*($15 + [64]) = *($4 + [8])
	*($15 + [72]) = *($4)
	$4 = *($8)
	$8 = CALL $172(($15 + [48]), (*($15 + [188]) + [112]))
	$9 = *($8 + [4])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$3 }
	$5 = ((int_32)($9 - $4) / (int_32)[24])
	$1 = *(*($15 + [180]) + [8])
	
.LOOP $label$4:
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$2 }
	$4 = ($4 + [24])
	$14 = ($14 + [1])
	if ( ($14 <= $5) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$9 == (int_32)*($8 + [8])) ){ goto $label$5 }
	*(($8 + [4])) = (CALL memcpy($9, ($15 + [64]), [24]) + [24])
	goto $label$1 
	
.LABEL $label$5
	CALL $173($8, ($15 + [64]))
	goto $label$1 
	
.LABEL $label$2
	if ( ((uint_64)$2 >= (uint_64)*(($4 + [16]))) ){ goto $label$1 }
	CALL memcpy($4, ($15 + [64]), [24])
	
.LABEL $label$1
	$9 = CALL $174(($15 + [32]), (*($15 + [188]) + [124]))
	$6 = *($15 + [180])
	$4 = *($9)
	$3 = *($9 + [4])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$7 }
	$5 = int_32(($3 - $4) >> [3])
	$1 = *($6 + [8])
	$14 = [0]
	
.LOOP $label$8:
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$6 }
	$4 = ($4 + [8])
	$14 = ($14 + [1])
	if ( ($14 <= $5) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = ($6 + [8])
	if ( ((int_32)$3 == (int_32)*($9 + [8])) ){ goto $label$9 }
	*(($9 + [4])) = ($3 + [8])
	*($3) = *($4)
	goto $label$6 
	
.LABEL $label$9
	CALL $175($9, $4)
	
.LABEL $label$6
	$1 = *($0)
	$4 = *($15 + [188])
	*($15 + [20]) = $8
	*($15 + [16]) = $0
	*($15 + [24]) = $9
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [240])
	CALL $176($7, $4, $1, ($15 + [16]))
	$1 = *(*($15 + [180]) + [8])
	*($15 + [20]) = ($15 + [104])
	*($15 + [16]) = ($15 + [88])
	*($15 + [24]) = ($15 + [96])
	*($15 + [28]) = ($15 + [192])
	*($15 + [232]) = $1
	CALL eosio_assert(((int_64)*($0 + [248]) == (int_64)CALL $fimport$2()), [544])
	$14 = ($0 + [248])
	*($15 + [208]) = $14
	*($15 + [212]) = ($15 + [16])
	*($15 + [216]) = ($15 + [232])
	*(($4 = CALL $236([56])) + [40]) = $14
	CALL $177(($15 + [208]), $4)
	*($15 + [224]) = $4
	$1 = *($4)
	*($15 + [208]) = $1
	$5 = *($4 + [44])
	*($15 + [204]) = $5
	$3 = ($0 + [276])
	$14 = *($3)
	if ( ((uint_32)$14 >= (uint_32)*(($0 + [280]))) ){ goto $label$11 }
	*($14 + [8]) = $1
	*($14 + [16]) = $5
	*($15 + [224]) = [0]
	*($14) = $4
	*($3) = ($14 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $178(($0 + [272]), ($15 + [224]), ($15 + [208]), ($15 + [204]))
	
.LABEL $label$10
	$4 = *($15 + [224])
	*($15 + [224]) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $237($4)
	
.LABEL $label$12
	$4 = *($9)
	if ( ($4 == 0) ){ goto $label$13 }
	*(($9 + [4])) = $4
	CALL $237($4)
	
.LABEL $label$13
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$14 }
	*(($8 + [4])) = $4
	CALL $237($4)
	
.LABEL $label$14
	*([0] + [4]) = ($15 + [240])
}

void .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($1)
	$2 = *($3 + [4])
	$4 = *($2 + [148])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$2 }
	$4 = *($3)
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-7804307891388678144, ($5 + [8]), *($2))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($4)
	
.LABEL $label$1
	$4 = *($1)
	$3 = *($4 + [4])
	$1 = *(($3 + [152]))
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$4 }
	$1 = *($4)
	$1 = CALL db_idx64_find_primary(*($1), *($1 + [8]), (int_64)-7804307891388678143, ($5 + [8]), *($3))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($1)
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [16])
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

void .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$3 = *($0)
	$4 = int_32((*($0 + [4]) - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$1 }
	$2 = ($0 + [8])
	$6 = [536870911]
	$3 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($3 >> [3]) > (uint_32)[268435454]) ){ goto $label$2 }
	$6 = int_32($3 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	
.LABEL $label$2
	*(($3 = *(($6 = CALL $155(($7 + [8]), $6, $4, $2)) + [8]))) = *($1)
	*($6 + [8]) = ($3 + [8])
	CALL $156($0, $6)
	$1 = *($6 + [4])
	$0 = *($6 + [8])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	*(($6 + [8])) = ($0 + (((int_32)(($0 + [-8]) - $1) ^ (int_32)[-1]) & [-8]))
	
.LABEL $label$3
	$6 = *($6)
	if ( ($6 == 0) ){ goto $label$4 }
	CALL $237($6)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

void .FUNC $242 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $243 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $236($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	return CALL $45(CALL $53(CALL $45($0, $1), ($1 + [8])), ($1 + [16]))
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = ($0 + [8])
	$8 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	
.LABEL $label$2
	$8 = CALL $61(($9 + [8]), $8, $6, $4)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($8 + [8])) + [8]) = *($2)
	*($1) = $5
	*($1 + [16]) = *($3)
	*($8 + [8]) = ($1 + [24])
	CALL $62($0, $8)
	CALL $63($8)
	*([0] + [4]) = ($9 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

void .FUNC $240 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $236($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $237($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [32])
	*([0] + [4]) = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($3) = [32]
	CALL $51($3, ($1 + [32]))
	CALL $23($0, *($3))
	$2 = *($0)
	*($3) = $2
	*($3 + [4]) = $2
	*($3 + [8]) = *($0 + [4])
	*($3 + [16]) = $3
	*($3 + [24]) = $1
	CALL $52(($3 + [24]), ($3 + [16]))
	*([0] + [4]) = ($3 + [32])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = *($1)
	$3 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	$2 = *($0)
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$1 = *($1)
	$1 = ( *(($1 + [4])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$2 }
	*($0) = ($1 + $2)
	
.LABEL $label$2
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	CALL $45(*($1), *($0))
	$0 = *($0)
	CALL $45(*($1), ($0 + [8]))
	CALL $45(CALL $53(*($1), ($0 + [16])), ($0 + [24]))
	CALL $54(*($1), ($0 + [32]))
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($1)
	*($5 + [8]) = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	CALL $48($0, ($5 + [8]))
	$2 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $2 )
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = *($1 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) >= (int_32)$3), [464])
	CALL memcpy(*($0 + [4]), ( $4 ? ($1 + [1]) : $2 ), $3)
	*($0 + [4]) = (*($0 + [4]) + $3)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
	return $0
}

void .FUNC _ZN10eosrockets4game9ledger_inEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	$3 = ($0 + [48])
	CALL $56(($7 + [8]), $3, $1)
	if ( (*($7 + [12]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$4 = *($7 + [12])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [240])
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$3), [288])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$2()), [336])
	$1 = *($4)
	CALL $60(($4 + [8]), $2)
	CALL eosio_assert(((int_64)$1 == (int_64)*($4)), [400])
	*($7 + [56]) = (($7 + [16]) + [24])
	*($7 + [52]) = ($7 + [16])
	*($7 + [48]) = ($7 + [16])
	CALL $58(($7 + [48]), $4)
	CALL db_update_i64(*($4 + [28]), $5, ($7 + [16]), [24])
	$0 = ($0 + [64])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$1 }
	*($0) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$2
	$5 = *($0)
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$2()), [544])
	$4 = CALL $236([40])
	CALL $57(($4 + [8]), (int_64)0, CALL $7([608]))
	*($4 + [24]) = $3
	*($4) = $1
	*(($4 + [20])) = *(($2 + [12]))
	*(($4 + [16])) = *(($2 + [8]))
	*(($4 + [12])) = *(($2 + [4]))
	*($4 + [8]) = *($2)
	*($7 + [56]) = (($7 + [16]) + [24])
	*($7 + [52]) = ($7 + [16])
	*($7 + [48]) = ($7 + [16])
	CALL $58(($7 + [48]), $4)
	$1 = *($4)
	$3 = CALL db_store_i64(*(($0 + [56])), (int_64)-8461483750948077568, $5, $1, ($7 + [16]), [24])
	*($4 + [28]) = $3
	$2 = ($0 + [64])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$3 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($7 + [48]) = $4
	$1 = *($4)
	*($7 + [16]) = $1
	*($7 + [44]) = $3
	$6 = ($0 + [76])
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [80]))) ){ goto $label$5 }
	*($2 + [8]) = $1
	*($2 + [16]) = $3
	*($7 + [48]) = [0]
	*($2) = $4
	*($6) = ($2 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $59(($0 + [72]), ($7 + [48]), ($7 + [16]), ($7 + [44]))
	
.LABEL $label$4
	$0 = *($7 + [48])
	*($7 + [48]) = [0]
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $237($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($1 + [24])
	$7 = *(($1 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-8461483750948077568, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $65($1, $6)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	
.LABEL $label$3
	*($0) = $1
}

int_32 .FUNC $57 (int_32 $0, int_64 $1, int_64 $2)
{
	*($0 + [8]) = $2
	*($0) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [736])
	CALL eosio_assert(CALL $64(($0 + [8])), [800])
	return $0
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $173 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$3 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $3) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$1 }
	$2 = ($0 + [8])
	$6 = [178956970]
	$3 = ((int_32)(*($0 + [8]) - $3) / (int_32)[24])
	if ( ((uint_32)$3 > (uint_32)[89478484]) ){ goto $label$2 }
	$6 = ($3 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	
.LABEL $label$2
	*(($6 = CALL $160(($7 + [8]), $6, $4, $2)) + [8]) = (CALL $fimport$19(*($6 + [8]), $1, [24]) + [24])
	CALL $161($0, $6)
	$1 = *($6 + [4])
	$0 = *($6 + [8])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	*(($6 + [8])) = ($0 + ((int_32)((int_32)((uint_32)(($0 + [-24]) - $1) / (uint_32)[24]) ^ (int_32)[-1]) * (int_32)[24]))
	
.LABEL $label$3
	$6 = *($6)
	if ( ($6 == 0) ){ goto $label$4 }
	CALL $237($6)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [8]) = [0]
	CALL $22($0, ($3 + [8]))
	CALL $153($1, *($3 + [8]))
	$1 = *($1 + [4])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	
.LOOP $label$2:
	CALL $19($0, $2)
	$2 = ($2 + [8])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = int_32((*($0 + [4]) - $2) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$1 }
	CALL $154($0, ($1 - $3))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$3 <= (uint_32)$1) ){ goto $label$2 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	
.LABEL $label$2
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	return CALL $33(CALL $152(CALL $151(CALL $19(CALL $68(CALL $118(CALL $19(CALL $19(CALL $19(CALL $19(CALL $118(CALL $19(CALL $19(CALL $19(CALL $68(CALL $118(CALL $118(CALL $118(CALL $118(CALL $19($0, $1), ($1 + [8])), ($1 + [9])), ($1 + [10])), ($1 + [11])), ($1 + [16])), ($1 + [24])), ($1 + [32])), ($1 + [40])), ($1 + [48])), ($1 + [56])), ($1 + [64])), ($1 + [72])), ($1 + [80])), ($1 + [88])), ($1 + [96])), ($1 + [104])), ($1 + [112])), ($1 + [124])), ($1 + [136]))
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [8]) = [0]
	CALL $22($0, ($3 + [8]))
	CALL $157($1, *($3 + [8]))
	$1 = *($1 + [4])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	
.LOOP $label$2:
	CALL $158($0, $2)
	$2 = ($2 + [24])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = (*($0 + [4]) - $3)
	$4 = (*($1 + [4]) - $2)
	*($1 + [4]) = $4
	if ( ((int_32)$2 <= (int_32)[0]) ){ goto $label$1 }
	CALL memcpy($4, $3, $2)
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	$2 = *($0)
	*($0) = $4
	*(($4 = ($1 + [4]))) = $2
	$2 = ($0 + [4])
	$3 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $3
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($4)
}

void .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[24])
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$1 }
	CALL $159($0, ($1 - $3))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$3 <= (uint_32)$1) ){ goto $label$2 }
	*(($0 + [4])) = ($2 + ((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
}

void .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$2 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((uint_32)int_32(($6 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$3 }
	$4 = *($0)
	$2 = int_32(($2 - $4) >> [3])
	$5 = ($2 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$1 }
	$3 = ($0 + [8])
	$7 = [536870911]
	$6 = ($6 - $4)
	if ( ((uint_32)int_32($6 >> [3]) > (uint_32)[268435454]) ){ goto $label$4 }
	$6 = int_32($6 >> [2])
	$7 = ( $5 ? $6 : ($6 <= $5) )
	
.LABEL $label$4
	$2 = CALL $155(($8 + [8]), $7, $2, $3)
	$4 = *($2 + [8])
	$6 = $4
	$7 = $1
	
.LOOP $label$5:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$5 }
	*(($6 = ($2 + [8]))) = ($4 + ($1 << [3]))
	CALL $156($0, $2)
	$0 = *($2 + [4])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$6 }
	*($6) = ($7 + (((int_32)(($7 + [-8]) - $0) ^ (int_32)[-1]) & [-8]))
	
.LABEL $label$6
	$6 = *($2)
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $237($6)
	goto $label$2 
	
.LABEL $label$3
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

int_32 .FUNC $155 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[536870912]) ){ goto $label$1 }
	$4 = CALL $236(($1 << [3]))
	
.LABEL $label$2
	*($0) = $4
	$3 = ($4 + ($2 << [3]))
	*($0 + [8]) = $3
	*($0 + [4]) = $3
	*(($0 + [12])) = ($4 + ($1 << [3]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	return CALL $19(CALL $19(CALL $19($0, $1), ($1 + [8])), ($1 + [16]))
}

void .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$7 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((uint_32)((int_32)($6 - $7) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$3 }
	$3 = *($0)
	$4 = ((int_32)($7 - $3) / (int_32)[24])
	$5 = ($4 + $1)
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$1 }
	$2 = ($0 + [8])
	$7 = [178956970]
	$6 = ((int_32)($6 - $3) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	
.LABEL $label$4
	$6 = CALL $160(($8 + [8]), $7, $4, $2)
	$7 = *($6 + [8])
	$3 = ($7 + ((int_32)$1 * (int_32)[24]))
	
.LOOP $label$5:
	$7 = (CALL memset($7, [0], [24]) + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	*(($1 = ($6 + [8]))) = $3
	CALL $161($0, $6)
	$0 = *($6 + [4])
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$6 }
	*($1) = ($7 + ((int_32)((int_32)((uint_32)(($7 + [-24]) - $0) / (uint_32)[24]) ^ (int_32)[-1]) * (int_32)[24]))
	
.LABEL $label$6
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$2 }
	CALL $237($1)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($0 + [4])
	
.LOOP $label$7:
	CALL memset($7, [0], [24])
	$7 = (*($0) + [24])
	*($0) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

int_32 .FUNC $179 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $236(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$3 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $3
	*($0 + [4]) = $3
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $224 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	$2 = *($1)
	CALL $243(($13 + [64]), ($1 + [8]))
	CALL $243(($13 + [48]), ($1 + [20]))
	CALL $243(($13 + [32]), ($1 + [32]))
	*(($13 + [28])) = *(($1 + [60]))
	*(($3 = (($13 + [16]) + [8]))) = *(($1 + [56]))
	*($13 + [20]) = *(($1 + [52]))
	*($13 + [16]) = *($1 + [48])
	$4 = *($1 + [44])
	$5 = *($1 + [96])
	$6 = *($1 + [92])
	$7 = *($1 + [88])
	$8 = *($1 + [84])
	$9 = *($1 + [80])
	$10 = *($1 + [76])
	$11 = *($1 + [72])
	$12 = *($1 + [68])
	$1 = *($1 + [64])
	*(($13 + [8])) = *($3)
	*($13) = *($13 + [16])
	CALL $225($0, $2, ($13 + [64]), ($13 + [48]), ($13 + [32]), $4, $13, $1, $12, $11, $10, $9, $8, $7, $6, $5)
	if ( ((*($13 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL $237(*($13 + [40]))
	
.LABEL $label$1
	if ( ((*($13 + [48]) & [1]) == 0) ){ goto $label$2 }
	CALL $237(*($13 + [56]))
	
.LABEL $label$2
	if ( ((*($13 + [64]) & [1]) == 0) ){ goto $label$3 }
	CALL $237(*($13 + [72]))
	
.LABEL $label$3
	*([0] + [4]) = ($13 + [80])
}

void .FUNC _ZN10eosrockets4game25sort_truncate_leaderboardERKNSt3__16vectorINS_5entryENS1_9allocatorIS3_EEEEh (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$6 = *($4 + [4])
	$4 = CALL $172(($8 + [8]), $2)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$1 }
	$7 = $5
	
.LOOP $label$2:
	$2 = $5
	
.LOOP $label$3:
	if ( ((uint_64)*(($7 + [16])) >= (uint_64)*(($2 + [16]))) ){ goto $label$4 }
	CALL memcpy(($8 + [24]), $7, [24])
	CALL memcpy($7, $2, [24])
	CALL memcpy($2, ($8 + [24]), [24])
	
.LABEL $label$4
	$2 = ($2 + [24])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$3 }
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$1
	CALL _ZN10eosrockets4game20truncate_leaderboardERKNSt3__16vectorINS_5entryENS1_9allocatorIS3_EEEEh($0, $2, $4, $3)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [4])) = $2
	CALL $237($2)
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [48])
}

void .FUNC _ZN10eosrockets4game10ledger_outEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	$3 = ($0 + [48])
	CALL $56(($6 + [8]), $3, $1)
	CALL eosio_assert(((int_32)*($6 + [12]) != (int_32)[0]), [832])
	CALL eosio_assert(((int_64)*(*($6 + [12]) + [8]) > (int_64)0), [848])
	$4 = *($6 + [12])
	CALL eosio_assert(((int_64)*(($4 + [16])) == (int_64)*($2 + [8])), [864])
	CALL eosio_assert(((int_64)*($4 + [8]) >= (int_64)*($2)), [928])
	$5 = *($0)
	$4 = *($6 + [12])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [240])
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$3), [288])
	CALL eosio_assert(((int_64)*($0 + [48]) == (int_64)CALL $fimport$2()), [336])
	$1 = *($4)
	CALL $70(($4 + [8]), $2)
	CALL eosio_assert(((int_64)$1 == (int_64)*($4)), [400])
	*($6 + [56]) = (($6 + [16]) + [24])
	*($6 + [52]) = ($6 + [16])
	*($6 + [48]) = ($6 + [16])
	CALL $58(($6 + [48]), $4)
	CALL db_update_i64(*($4 + [28]), $5, ($6 + [16]), [24])
	$4 = ($0 + [64])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$1 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_64 .FUNC llabs (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

void .FUNC $225 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14, int_64 $15)
{
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	$19 = (*([0] + [4]) - [80])
	*([0] + [4]) = $19
	$0 = *($0 + [4])
	$17 = *($0 + [4])
	$16 = (*(*($0)) + int_32($17 >> [1]))
	$0 = *($0)
	if ( (($17 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($16) + $0))
	
.LABEL $label$1
	CALL $243(($19 + [64]), $2)
	CALL $243(($19 + [48]), $3)
	CALL $243(($19 + [32]), $4)
	*(($2 = (($19 + [16]) + [8]))) = *(($6 + [8]))
	$18 = *($6)
	*(($19 + [12])) = *((($19 + [16]) + [12]))
	*(($19 + [8])) = *($2)
	*($19 + [16]) = $18
	*($19 + [4]) = *($19 + [20])
	*($19) = *($19 + [16])
	CALL void $16((int_32 $1), (int_64 ($19 + [64])), (int_32 ($19 + [48])), (int_32 ($19 + [32])), (int_32 $5), (int_32 $19), (int_32 $7), (int_32 $8), (int_32 $9), (int_32 $10), (int_32 $11), (int_32 $12), (int_32 $13), (int_32 $14), (int_32 $15), (int_64 $0))
	if ( ((*($19 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $237(*($19 + [40]))
	
.LABEL $label$2
	if ( ((*($19 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $237(*($19 + [56]))
	
.LABEL $label$3
	if ( ((*($19 + [64]) & [1]) == 0) ){ goto $label$4 }
	CALL $237(*($19 + [72]))
	
.LABEL $label$4
	*([0] + [4]) = ($19 + [80])
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [144])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $236([40])
	$6 = CALL $66($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $59(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $237($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $64 (int_32 $0)
{
	int_64 $1
	$1 = (uint_64)*($0) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$2:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	
.LOOP $label$4:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$1 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$4 }
	
.LABEL $label$3
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$2 }
	return [1]
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	return CALL $19(CALL $68(CALL $19($0, $1), ($1 + [8])), ($1 + [16]))
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $57(($0 + [8]), (int_64)0, CALL $7([608]))
	*($0 + [24]) = $1
	CALL $67(*($2 + [4]), $0)
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $236(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$3 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $3
	*($0 + [4]) = $3
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_64 $2
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*($0 + [8])), [624])
	$2 = ((int_64)*($0) + (int_64)*($1))
	*($0) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [672])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [704])
	return $0
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$3 = *($0 + [8])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($3 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $237($2)
	
.LABEL $label$3
	$3 = *($4)
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $237($3)
	
.LABEL $label$4
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$5 = *($0 + [4])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$2 }
	$3 = ($1 + [4])
	$6 = *($3)
	
.LOOP $label$3:
	$2 = ($5 + [-24])
	$4 = *($2)
	*($2) = [0]
	*(($6 + [-24])) = $4
	*(($6 + [-8])) = *(($5 + [-8]))
	*(($6 + [-12])) = *(($5 + [-12]))
	*(($6 + [-16])) = *(($5 + [-16]))
	$6 = (*($3) + [-24])
	*($3) = $6
	$5 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$6 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $6
	*(($6 = ($1 + [4]))) = $7
	$5 = ($0 + [4])
	$2 = *($5)
	*($5) = *($1 + [8])
	*($1 + [8]) = $2
	$5 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $5
	*($1) = *($6)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $227 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	CALL $33(*($1), (*($0) + [44]))
	$0 = *($0)
	CALL $19(CALL $68(*($1), ($0 + [48])), ($0 + [56]))
	CALL $33(*($1), ($0 + [64]))
	CALL $33(*($1), ($0 + [68]))
	*($2 + [8]) = $0
	CALL $228(($2 + [8]), $1)
	*([0] + [4]) = ($2 + [16])
}

void .FUNC $228 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	CALL $33(*($1), (*($0) + [72]))
	$0 = *($0)
	CALL $33(*($1), ($0 + [76]))
	CALL $33(*($1), ($0 + [80]))
	CALL $33(*($1), ($0 + [84]))
	*($2 + [8]) = $0
	CALL $229(($2 + [8]), $1)
	*([0] + [4]) = ($2 + [16])
}

void .FUNC $229 (int_32 $0, int_32 $1)
{
	CALL $33(*($1), (*($0) + [88]))
	$0 = *($0)
	CALL $33(*($1), ($0 + [92]))
	CALL $19(*($1), ($0 + [96]))
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [336])
	$4 = *($1)
	*(($7 = $8) + [8]) = *(*($3))
	*($7 + [16]) = *(*($3 + [4]))
	*($7 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = ($1 + [16])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)*(($1 + [20]))) ){ goto $label$2 }
	CALL memcpy($5, ($7 + [8]), [24])
	*($6) = (*($6) + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $90(($1 + [12]), ($7 + [8]))
	
.LABEL $label$1
	*($1 + [8]) = *(*($3 + [8]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [400])
	$6 = CALL $91($1)
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($7 + [12]) = $3
	*($7 + [8]) = $3
	*($7 + [16]) = ($3 + $6)
	CALL $92(($7 + [8]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = ($0 + [8])
	$8 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	
.LABEL $label$2
	$8 = CALL $97(($9 + [8]), $8, $6, $4)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($8 + [8])) + [8]) = *($2)
	*($1) = $5
	*($1 + [16]) = *($3)
	*($8 + [8]) = ($1 + [24])
	CALL $98($0, $8)
	CALL $99($8)
	*([0] + [4]) = ($9 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	$6 = $5
	*([0] + [4]) = $5
	*($1) = *(*(*($0 + [4])))
	$2 = *($0)
	$3 = CALL $91($1)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL $92($6, $1)
	$4 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-5001621371260764160, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($1 + [24])
	$7 = *(($1 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-5001621371260764160, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $100($1, $6)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	
.LABEL $label$3
	*($0) = $1
}

int_64 .FUNC _ZN10eosrockets4game19give_account_retailEyyb (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [144])
	*([0] + [4]) = $10
	*($10 + [40]) = $1
	CALL _ZN10eosrockets4game16_decrement_stockEy($0, $2)
	CALL $72(($10 + [32]), ($0 + [208]), $2)
	CALL eosio_assert(((int_32)*($10 + [36]) != (int_32)[0]), [208])
	$4 = *(( ($10 + [40]) ? $0 : $3 ))
	$7 = ($0 + [8])
	$5 = CALL $106($7)
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)CALL $fimport$2()), [544])
	*(($6 = CALL $236([88])) + [48]) = [0]
	CALL $57(($6 + [56]), (int_64)0, CALL $7([608]))
	*($6 + [72]) = $7
	*($6) = $5
	*($6 + [8]) = $1
	*($6 + [16]) = $2
	CALL _ZN10eosrockets14transaction_idEv(($10 + [48]))
	$2 = *($7 + [72])
	$7 = *($10 + [36])
	*($6 + [24]) = ((int_64)((uint_64)((int_64)(CASTING uint_64)(uint_32 ((uint_32)*($10 + [48]) % (uint_32)[100])) * (int_64))(*($7 + [76]) - $2)) / (uint_64)(int_64)100) + (int_64)$2)
	$2 = *($7 + [80])
	*($6 + [28]) = ((int_64)((uint_64)((int_64)(CASTING uint_64)(uint_32 ((uint_32)*($10 + [56]) % (uint_32)[100])) * (int_64))(*($7 + [84]) - $2)) / (uint_64)(int_64)100) + (int_64)$2)
	$2 = *($7 + [88])
	*($6 + [32]) = ((int_64)((uint_64)((int_64)(CASTING uint_64)(uint_32 ((uint_32)*($10 + [64]) % (uint_32)[100])) * (int_64))(*($7 + [92]) - $2)) / (uint_64)(int_64)100) + (int_64)$2)
	$2 = *($7 + [96])
	*($6 + [36]) = ((int_64)((uint_64)((int_64)(CASTING uint_64)(uint_32 ((uint_32)*($10 + [72]) % (uint_32)[100])) * (int_64))(*($7 + [100]) - $2)) / (uint_64)(int_64)100) + (int_64)$2)
	*($6 + [40]) = *($7 + [64])
	*($10 + [128]) = (($10 + [48]) + [65])
	*($10 + [124]) = ($10 + [48])
	*($10 + [120]) = ($10 + [48])
	CALL $107(($10 + [120]), $6)
	$2 = *($6)
	$7 = ($0 + [16])
	*($6 + [76]) = CALL db_store_i64(*($7), (int_64)7612987020020809728, $4, $2, ($10 + [48]), [65])
	$8 = ($0 + [24])
	if ( (uint_64)($2 <= *($8)) ){ goto $label$1 }
	*($8) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$2 = *($7)
	$1 = *($6)
	*($10 + [136]) = *(($6 + [8]))
	*($6 + [80]) = CALL db_idx64_store($2, (int_64)7612987020020809728, $4, $1, ($10 + [136]))
	*($10 + [120]) = $6
	$2 = *($6)
	*($10 + [48]) = $2
	$8 = *(($6 + [76]))
	*($10 + [136]) = $8
	$9 = ($0 + [36])
	$7 = *($9)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [40]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $8
	*($10 + [120]) = [0]
	*($7) = $6
	*($9) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $108(($0 + [32]), ($10 + [120]), ($10 + [48]), ($10 + [136]))
	
.LABEL $label$2
	$6 = *($10 + [120])
	*($10 + [120]) = [0]
	if ( ($6 == 0) ){ goto $label$4 }
	CALL $237($6)
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = *($10 + [36])
	*(($10 + [28])) = *(($6 + [60]))
	*(($7 = (($10 + [16]) + [8]))) = *(($6 + [56]))
	$2 = *($10 + [40])
	*($10 + [16]) = *($6 + [48])
	*(($10 + [8])) = *($7)
	*($10) = *($10 + [16])
	CALL _ZN10eosrockets4game10ledger_outEyN5eosio5assetE($0, $2, $10)
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [144])
	return $5
}

void .FUNC _ZN10eosrockets4game12buyretailrefEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*($9 + [32]) = $1
	*($9 + [24]) = $3
	CALL eosio_assert(((int_64)$1 != (int_64)$3), [1168])
	*($9 + [16]) = CALL _ZN10eosrockets4game19give_account_retailEyyb($0, $1, $2, [1])
	if ( (int_64)($3 == 0) ){ goto $label$1 }
	$4 = ($0 + [168])
	CALL $86(($9 + [8]), $4, $3)
	if ( *($9 + [12]) ){ goto $label$2 }
	$3 = *($0)
	*($9) = ($9 + [24])
	*($9 + [72]) = $3
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$2()), [544])
	*($9 + [48]) = $4
	*($9 + [52]) = $9
	*($9 + [56]) = ($9 + [72])
	*(($7 = CALL $236([40])) + [8]) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*($7 + [24]) = $4
	CALL $87(($9 + [48]), $7)
	*($9 + [64]) = $7
	$3 = *($7)
	*($9 + [48]) = $3
	$5 = *($7 + [28])
	*($9 + [44]) = $5
	$6 = ($0 + [196])
	$8 = *($6)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [200]))) ){ goto $label$4 }
	*($8 + [8]) = $3
	*($8 + [16]) = $5
	*($9 + [64]) = [0]
	*($8) = $7
	*($6) = ($8 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $88(($0 + [192]), ($9 + [64]), ($9 + [48]), ($9 + [44]))
	
.LABEL $label$3
	$7 = *($9 + [64])
	*($9 + [64]) = [0]
	if ( ($7 == 0) ){ goto $label$5 }
	$8 = *($7 + [12])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($7 + [16])) = $8
	CALL $237($8)
	
.LABEL $label$6
	CALL $237($7)
	
.LABEL $label$5
	$3 = *($9 + [24])
	
.LABEL $label$2
	CALL $86(($9 + [48]), $4, $3)
	$3 = *($9 + [48])
	*($9 + [8]) = $3
	CALL eosio_assert(((uint_64)$3 > (uint_64)(int_64)4294967295), [1184])
	$7 = *($9 + [12])
	$8 = *($7 + [8])
	*($9 + [72]) = $8
	if ( ((uint_32)$8 >= (uint_32)((uint_32)(((int_32)(*(($7 + [16])) - *($7 + [12])) / (int_32)[24]) + [1]) / (uint_32)[20])) ){ goto $label$7 }
	CALL _ZN10eosrockets4game19give_account_retailEyyb($0, *($9 + [24]), (int_64)5, [0])
	*($9 + [72]) = (*($9 + [72]) + [1])
	
.LABEL $label$7
	$7 = *($9 + [12])
	$3 = *($0)
	*($9 + [52]) = ($9 + [16])
	*($9 + [48]) = ($9 + [32])
	*($9 + [56]) = ($9 + [72])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [240])
	CALL $89($4, $7, $3, ($9 + [48]))
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [80])
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	return CALL $33(CALL $33(CALL $33(CALL $33(CALL $33(CALL $33(CALL $33(CALL $33(CALL $19(CALL $19(CALL $68(CALL $33(CALL $20(CALL $20(CALL $20(CALL $19($0, $1), ($1 + [8])), ($1 + [20])), ($1 + [32])), ($1 + [44])), ($1 + [48])), ($1 + [56])), ($1 + [64])), ($1 + [72])), ($1 + [76])), ($1 + [80])), ($1 + [84])), ($1 + [88])), ($1 + [92])), ($1 + [96])), ($1 + [100]))
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$5 = *(($0 + [28]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$7 = ($5 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($7 + [16])) == (int_32)$1) ){ goto $label$1 }
	$5 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = *(($5 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($7 >> [31]) ^ (int_32)[1]), [144])
	if ( ($7 <= [513]) ){ goto $label$6 }
	$6 = CALL malloc($7)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $7)
	*($8 + [36]) = $6
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + $7)
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL free($6)
	
.LABEL $label$7
	$5 = ($0 + [24])
	*(($7 = CALL $236([120])) + [8 align=4]) = (int_64)0
	*(($7 + [16])) = [0]
	$6 = [8]
	
.LOOP $label$8:
	*(($7 + $6)) = [0]
	$6 = ($6 + [4])
	if ( ((int_32)$6 != (int_32)[20]) ){ goto $label$8 }
	*($7 + [20 align=4]) = (int_64)0
	*(($7 + [28])) = [0]
	$6 = [20]
	
.LOOP $label$9:
	*(($7 + $6)) = [0]
	$6 = ($6 + [4])
	if ( ((int_32)$6 != (int_32)[32]) ){ goto $label$9 }
	*($7 + [32 align=4]) = (int_64)0
	*(($7 + [40])) = [0]
	$6 = [32]
	
.LOOP $label$10:
	*(($7 + $6)) = [0]
	$6 = ($6 + [4])
	if ( ((int_32)$6 != (int_32)[44]) ){ goto $label$10 }
	CALL $57(($7 + [48]), (int_64)0, CALL $7([608]))
	*($7 + [104]) = $0
	CALL $83(($8 + [32]), $7)
	*($7 + [108]) = $1
	*($8 + [24]) = $7
	$4 = *($7)
	*($8 + [16]) = $4
	$1 = *($7 + [108])
	*($8 + [12]) = $1
	$3 = ($0 + [28])
	$6 = *($3)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$12 }
	*($6 + [8]) = $4
	*($6 + [16]) = $1
	*($8 + [24]) = [0]
	*($6) = $7
	*($3) = ($6 + [24])
	goto $label$11 
	
.LABEL $label$12
	CALL $74($5, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$11
	$6 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL $237(*(($6 + [40])))
	
.LABEL $label$13
	if ( ((*($6 + [20]) & [1]) == 0) ){ goto $label$14 }
	CALL $237(*(($6 + [28])))
	
.LABEL $label$14
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL $237(*(($6 + [16])))
	
.LABEL $label$15
	CALL $237($6)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $7
}

int_32 .FUNC $81 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $237(*(($2 + [40])))
	
.LABEL $label$4
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$5 }
	CALL $237(*(($2 + [28])))
	
.LABEL $label$5
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $237(*(($2 + [16])))
	
.LABEL $label$6
	CALL $237($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $237($2)
	
.LABEL $label$7
	return $0
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$5 = *($0 + [4])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$2 }
	$3 = ($1 + [4])
	$6 = *($3)
	
.LOOP $label$3:
	$2 = ($5 + [-24])
	$4 = *($2)
	*($2) = [0]
	*(($6 + [-24])) = $4
	*(($6 + [-8])) = *(($5 + [-8]))
	*(($6 + [-12])) = *(($5 + [-12]))
	*(($6 + [-16])) = *(($5 + [-16]))
	$6 = (*($3) + [-24])
	*($3) = $6
	$5 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$6 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $6
	*(($6 = ($1 + [4]))) = $7
	$5 = ($0 + [4])
	$2 = *($5)
	*($5) = *($1 + [8])
	*($1 + [8]) = $2
	$5 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $5
	*($1) = *($6)
}

int_32 .FUNC $182 (int_32 $0, int_32 $1)
{
	return CALL $45(CALL $53(CALL $53(CALL $53(CALL $45($0, $1), ($1 + [8])), ($1 + [16])), ($1 + [24])), ($1 + [32]))
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [144])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $236([160])
	CALL $57(($6 + [16]), (int_64)0, CALL $7([608]))
	*($6 + [40]) = (int_64)0
	*($6 + [32]) = (int_64)1
	*($6 + [64]) = (int_64)0
	*($6 + [72]) = (int_64)0
	*($6 + [80]) = (int_64)0
	*($6 + [88]) = [0]
	CALL $57(($6 + [96]), (int_64)0, CALL $7([608]))
	*($6 + [112 align=4]) = (int_64)0
	*($6 + [120 align=4]) = (int_64)0
	*($6 + [128 align=4]) = (int_64)0
	*($6 + [136]) = [0]
	*($6 + [140]) = $0
	CALL $150(($8 + [32]), $6)
	*($6 + [148]) = [-1]
	*($6 + [144]) = $1
	*($6 + [152]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [144])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $138(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [124])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [128])) = $7
	CALL $237($7)
	
.LABEL $label$10
	$7 = *($4 + [112])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($4 + [116])) = $7
	CALL $237($7)
	
.LABEL $label$11
	CALL $237($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $148 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [144]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1328])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-7804307891388678144)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1264])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1264])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $149(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [8]) = int_32((*($1 + [4]) - *($1)) >> [3])
	CALL $48($0, ($3 + [8]))
	$1 = *($1 + [4])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	
.LOOP $label$2:
	CALL $45($0, $2)
	$2 = ($2 + [8])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [8]) = ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24])
	CALL $48($0, ($3 + [8]))
	$1 = *($1 + [4])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	
.LOOP $label$2:
	CALL $146($0, $2)
	$2 = ($2 + [24])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $147 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = [0]
	$3 = CALL db_lowerbound_i64(*($1), *($1 + [8]), (int_64)-7804307891388678144, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $149($1, $3)
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	return CALL $45(CALL $45(CALL $45($0, $1), ($1 + [8])), ($1 + [16]))
}

int_32 .FUNC $141 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [124])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($2 + [128])) = $3
	CALL $237($3)
	
.LABEL $label$4
	$3 = *($2 + [112])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($2 + [116])) = $3
	CALL $237($3)
	
.LABEL $label$5
	CALL $237($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $237($2)
	
.LABEL $label$6
	return $0
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$5 = *($0 + [4])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$2 }
	$3 = ($1 + [4])
	$6 = *($3)
	
.LOOP $label$3:
	$2 = ($5 + [-24])
	$4 = *($2)
	*($2) = [0]
	*(($6 + [-24])) = $4
	*(($6 + [-8])) = *(($5 + [-8]))
	*(($6 + [-12])) = *(($5 + [-12]))
	*(($6 + [-16])) = *(($5 + [-16]))
	$6 = (*($3) + [-24])
	*($3) = $6
	$5 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$6 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $6
	*(($6 = ($1 + [4]))) = $7
	$5 = ($0 + [4])
	$2 = *($5)
	*($5) = *($1 + [8])
	*($1 + [8]) = $2
	$5 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $5
	*($1) = *($6)
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	return CALL $78(CALL $145(CALL $144(CALL $45(CALL $53(CALL $112(CALL $45(CALL $45(CALL $45(CALL $45(CALL $112(CALL $45(CALL $45(CALL $45(CALL $53(CALL $112(CALL $112(CALL $112(CALL $112(CALL $45($0, $1), ($1 + [8])), ($1 + [9])), ($1 + [10])), ($1 + [11])), ($1 + [16])), ($1 + [24])), ($1 + [32])), ($1 + [40])), ($1 + [48])), ($1 + [56])), ($1 + [64])), ($1 + [72])), ($1 + [80])), ($1 + [88])), ($1 + [96])), ($1 + [104])), ($1 + [112])), ($1 + [124])), ($1 + [136]))
}

int_32 .FUNC $142 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = *($0 + [112])
	$1 = *(($0 + [116]))
	$3 = ($1 - $2)
	$4 = (CASTING uint_64)(uint_32 ((int_32)$3 / (int_32)[24]))
	$5 = [118]
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	$1 = ($3 + [-24])
	$5 = (($1 - ((uint_32)$1 % (uint_32)[24])) + $5)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($5 + [-24])
	
.LABEL $label$2
	$0 = *($0 + [124])
	$1 = *(($0 + [128]))
	$2 = ($1 - $0)
	$4 = (CASTING uint_64)(uint_32 int_32($2 >> [3]))
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$5 }
	$5 = (($2 & [-8]) + $5)
	
.LABEL $label$5
	return ($5 + [4])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($1 + [24])
	$7 = *(($1 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [104]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4823067785997320192, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $82($1, $6)
	CALL eosio_assert(((int_32)*($6 + [104]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	
.LABEL $label$3
	*($0) = $1
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($1) = *(*(*($0 + [4])))
	$2 = *($0)
	*(($6 = $5)) = [0]
	CALL $76($6, $1)
	$3 = *($6)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL $77($6, $1)
	$4 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($2 + [8]), (int_64)-4823067785997320192, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_64 $2
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*($0 + [8])), [944])
	$2 = (int_64)
	*($0) = $2(*($0) - *($1)))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [1024])
	return $0
}

void .FUNC _ZN10eosrockets4game7addtypeEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_S7_mN5eosio5assetEmmmmmmmmy (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14, int_64 $15)
{
	int_32 $16
	$16 = (*([0] + [4]) - [160])
	*([0] + [4]) = $16
	*($16 + [128]) = $1
	*($16 + [124]) = $5
	*($16 + [120]) = $7
	*($16 + [116]) = $8
	*($16 + [112]) = $9
	*($16 + [108]) = $10
	*($16 + [104]) = $11
	*($16 + [100]) = $12
	*($16 + [96]) = $13
	*($16 + [92]) = $14
	*($16 + [80]) = $15
	CALL require_auth(*($0))
	CALL eosio_assert(((uint_32)$7 <= (uint_32)$8), [1056])
	CALL eosio_assert(((uint_32)$9 <= (uint_32)$10), [1072])
	CALL eosio_assert(((uint_32)$11 <= (uint_32)$12), [1088])
	CALL eosio_assert(((uint_32)$13 <= (uint_32)$14), [1104])
	CALL eosio_assert(((int_64)$15 != (int_64)0), [1120])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $7([32])), [48])
	CALL eosio_assert(((int_64)*($6) > (int_64)0), [16])
	$12 = ($0 + [208])
	CALL $72(($16 + [72]), $12, $1)
	if ( *($16 + [76]) ){ goto $label$1 }
	$15 = *($0)
	*($16 + [64]) = ($16 + [128])
	*($16 + [144]) = $15
	CALL eosio_assert(((int_64)*($12) == (int_64)CALL $fimport$2()), [544])
	*($16) = $12
	*($16 + [4]) = ($16 + [64])
	*($16 + [8]) = ($16 + [144])
	*(($14 = CALL $236([120])) + [8 align=4]) = (int_64)0
	*(($14 + [16])) = [0]
	$13 = [8]
	
.LOOP $label$2:
	*(($14 + $13)) = [0]
	$13 = ($13 + [4])
	if ( ((int_32)$13 != (int_32)[20]) ){ goto $label$2 }
	*($14 + [20 align=4]) = (int_64)0
	*(($14 + [28])) = [0]
	$13 = [20]
	
.LOOP $label$3:
	*(($14 + $13)) = [0]
	$13 = ($13 + [4])
	if ( ((int_32)$13 != (int_32)[32]) ){ goto $label$3 }
	*($14 + [32 align=4]) = (int_64)0
	*(($14 + [40])) = [0]
	$13 = [32]
	
.LOOP $label$4:
	*(($14 + $13)) = [0]
	$13 = ($13 + [4])
	if ( ((int_32)$13 != (int_32)[44]) ){ goto $label$4 }
	CALL $57(($14 + [48]), (int_64)0, CALL $7([608]))
	*($14 + [104]) = $12
	CALL $73($16, $14)
	*($16 + [152]) = $14
	$15 = *($14)
	*($16) = $15
	$11 = *($14 + [108])
	*($16 + [140]) = $11
	$10 = ($0 + [236])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [240]))) ){ goto $label$6 }
	*($13 + [8]) = $15
	*($13 + [16]) = $11
	*($16 + [152]) = [0]
	*($13) = $14
	*($10) = ($13 + [24])
	goto $label$5 
	
.LABEL $label$6
	CALL $74(($0 + [232]), ($16 + [152]), $16, ($16 + [140]))
	
.LABEL $label$5
	$14 = *($16 + [152])
	*($16 + [152]) = [0]
	if ( ($14 == 0) ){ goto $label$7 }
	if ( ((*($14 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $237(*(($14 + [40])))
	
.LABEL $label$8
	if ( ((*($14 + [20]) & [1]) == 0) ){ goto $label$9 }
	CALL $237(*(($14 + [28])))
	
.LABEL $label$9
	if ( ((*($14 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $237(*(($14 + [16])))
	
.LABEL $label$10
	CALL $237($14)
	
.LABEL $label$7
	CALL $72($16, $12, *($16 + [128]))
	$15 = *($16)
	*($16 + [72]) = $15
	CALL eosio_assert(((uint_64)$15 > (uint_64)(int_64)4294967295), [1136])
	
.LABEL $label$1
	$15 = *($0)
	$14 = *($16 + [76])
	*($16) = $6
	*($16 + [8]) = $2
	*($16 + [12]) = $3
	*($16 + [16]) = $4
	*($16 + [4]) = ($16 + [124])
	*($16 + [20]) = ($16 + [120])
	*($16 + [24]) = ($16 + [116])
	*($16 + [28]) = ($16 + [112])
	*($16 + [32]) = ($16 + [108])
	*($16 + [36]) = ($16 + [104])
	*($16 + [40]) = ($16 + [100])
	*($16 + [44]) = ($16 + [96])
	*($16 + [48]) = ($16 + [92])
	*($16 + [52]) = ($16 + [80])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [240])
	CALL $75($12, $14, $15, $16)
	$13 = ($0 + [328])
	CALL $31(($16 + [144]), $13, *($16 + [128]))
	$14 = *($16 + [148])
	if ( ($14 == 0) ){ goto $label$12 }
	$14 = ( ($16 + [124]) ? ($14 + [8]) : (*($16 + [124]) <= *($14 + [8])) )
	$11 = ($0 + [344])
	$12 = ($16 | [8])
	goto $label$11 
	
.LABEL $label$12
	$1 = *($0)
	CALL eosio_assert(((int_64)*($13) == (int_64)CALL $fimport$2()), [544])
	*(($14 = CALL $236([32])) + [16]) = $13
	*($14) = *($16 + [128])
	CALL eosio_assert([1], [464])
	CALL memcpy($16, $14, [8])
	CALL eosio_assert([1], [464])
	$12 = ($16 | [8])
	CALL memcpy($12, ($14 + [8]), [4])
	$15 = *($14)
	$10 = CALL db_store_i64(*(($0 + [336])), (int_64)-4149656938784751616, $1, $15, $16, [12])
	*($14 + [20]) = $10
	$11 = ($0 + [344])
	if ( (uint_64)($15 <= *($11)) ){ goto $label$13 }
	*($11) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($16 + [72]) = $14
	$15 = *($14)
	*($16) = $15
	*($16 + [152]) = $10
	$9 = ($0 + [356])
	$6 = *($9)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [360]))) ){ goto $label$15 }
	*($6 + [8]) = $15
	*($6 + [16]) = $10
	*($16 + [72]) = [0]
	*($6) = $14
	*($9) = ($6 + [24])
	goto $label$14 
	
.LABEL $label$15
	CALL $34(($0 + [352]), ($16 + [72]), $16, ($16 + [152]))
	
.LABEL $label$14
	$14 = *($16 + [72])
	*($16 + [72]) = [0]
	if ( ($14 == 0) ){ goto $label$16 }
	CALL $237($14)
	
.LABEL $label$16
	CALL $31($16, $13, *($16 + [128]))
	$15 = *($16)
	*($16 + [144]) = $15
	CALL eosio_assert(((uint_64)$15 > (uint_64)(int_64)4294967295), [1152])
	$14 = ($16 + [124])
	
.LABEL $label$11
	$1 = *($0)
	$6 = *($14)
	$14 = *($16 + [148])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [240])
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$13), [288])
	CALL eosio_assert(((int_64)*(($0 + [328])) == (int_64)CALL $fimport$2()), [336])
	*($14 + [8]) = $6
	$15 = *($14)
	CALL eosio_assert([1], [400])
	CALL eosio_assert([1], [464])
	$13 = $16
	CALL memcpy($13, $14, [8])
	CALL eosio_assert([1], [464])
	CALL memcpy($12, ($14 + [8]), [4])
	CALL db_update_i64(*($14 + [20]), $1, $13, [12])
	if ( (uint_64)($15 <= *(($0 + [344]))) ){ goto $label$17 }
	*($11) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	*([0] + [4]) = ($16 + [160])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	*($0) = (*($0) + [8])
	*(($1 = CALL $51(CALL $51(CALL $51($0, ($1 + [8])), ($1 + [20])), ($1 + [32])))) = (*($1) + [60])
	return $1
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	return CALL $78(CALL $78(CALL $78(CALL $78(CALL $78(CALL $78(CALL $78(CALL $78(CALL $45(CALL $45(CALL $53(CALL $78(CALL $54(CALL $54(CALL $54(CALL $45($0, $1), ($1 + [8])), ($1 + [20])), ($1 + [32])), ($1 + [44])), ($1 + [48])), ($1 + [56])), ($1 + [64])), ($1 + [72])), ($1 + [76])), ($1 + [80])), ($1 + [84])), ($1 + [88])), ($1 + [92])), ($1 + [96])), ($1 + [100]))
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = ($0 + [8])
	$8 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	
.LABEL $label$2
	$8 = CALL $79(($9 + [8]), $8, $6, $4)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($8 + [8])) + [8]) = *($2)
	*($1) = $5
	*($1 + [16]) = *($3)
	*($8 + [8]) = ($1 + [24])
	CALL $80($0, $8)
	CALL $81($8)
	*([0] + [4]) = ($9 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [336])
	$6 = *($3)
	*($1 + [48]) = *($6)
	*(($1 + [60])) = *(($6 + [12]))
	*(($1 + [56])) = *(($6 + [8]))
	*(($1 + [52])) = *(($6 + [4]))
	$4 = *($1)
	*($1 + [44]) = *(*($3 + [4]))
	CALL $239(($1 + [8]), *($3 + [8]))
	CALL $239(($1 + [20]), *($3 + [12]))
	CALL $239(($1 + [32]), *($3 + [16]))
	*($1 + [72]) = *(*($3 + [20]))
	*($1 + [76]) = *(*($3 + [24]))
	*($1 + [80]) = *(*($3 + [28]))
	*($1 + [84]) = *(*($3 + [32]))
	*($1 + [88]) = *(*($3 + [36]))
	*($1 + [92]) = *(*($3 + [40]))
	*($1 + [96]) = *(*($3 + [44]))
	*($1 + [100]) = *(*($3 + [48]))
	*($1 + [64]) = *(*($3 + [52]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [400])
	*(($3 = $7)) = [0]
	CALL $76($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $77($3, $1)
	CALL db_update_i64(*($1 + [108]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [464])
	CALL memcpy(*($0 + [4]), $1, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $236(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$3 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $3
	*($0 + [4]) = $3
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $241 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $236(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $237($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $223 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*(($0 + [12])) = (int_64)0
	$3 = [8]
	
.LOOP $label$1:
	*(($0 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[20]) ){ goto $label$1 }
	*($0 + [20 align=4]) = (int_64)0
	*(($0 + [28])) = [0]
	$3 = [20]
	
.LOOP $label$2:
	*(($0 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$2 }
	*($0 + [32]) = (int_64)0
	*(($0 + [40])) = [0]
	$3 = [32]
	
.LOOP $label$3:
	*(($0 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[44]) ){ goto $label$3 }
	*($0 + [44]) = [0]
	CALL $57(($0 + [48]), (int_64)0, CALL $7([608]))
	*($0 + [64]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [88]) = (int_64)0
	*($0 + [96]) = (int_64)0
	*($4 + [4]) = $1
	*($4) = $1
	*($4 + [8]) = ($1 + $2)
	*($4 + [16]) = $4
	*($4 + [24]) = $0
	CALL $226(($4 + [24]), ($4 + [16]))
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $251 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$5 = *($0 + [4])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$2 }
	$3 = ($1 + [4])
	$6 = *($3)
	
.LOOP $label$3:
	$2 = ($5 + [-24])
	$4 = *($2)
	*($2) = [0]
	*(($6 + [-24])) = $4
	*(($6 + [-8])) = *(($5 + [-8]))
	*(($6 + [-12])) = *(($5 + [-12]))
	*(($6 + [-16])) = *(($5 + [-16]))
	$6 = (*($3) + [-24])
	*($3) = $6
	$5 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$6 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $6
	*(($6 = ($1 + [4]))) = $7
	$5 = ($0 + [4])
	$2 = *($5)
	*($5) = *($1 + [8])
	*($1 + [8]) = $2
	$5 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $5
	*($1) = *($6)
}

int_32 .FUNC $99 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [12])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($2 + [16])) = $3
	CALL $237($3)
	
.LABEL $label$4
	CALL $237($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $237($2)
	
.LABEL $label$5
	return $0
}

int_32 .FUNC $239 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $240($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $238 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	return CALL $45(CALL $45(CALL $45($0, $1), ($1 + [8])), ($1 + [16]))
}

int_32 .FUNC $95 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $236(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$3 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $3
	*($0 + [4]) = $3
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = (*($0 + [4]) - $3)
	$4 = (*($1 + [4]) + ((int_32)((int_32)$2 / (int_32)[-24]) * (int_32)[24]))
	*($1 + [4]) = $4
	if ( ((int_32)$2 <= (int_32)[0]) ){ goto $label$1 }
	CALL memcpy($4, $3, $2)
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	$2 = *($0)
	*($0) = $4
	*(($4 = ($1 + [4]))) = $2
	$2 = ($0 + [4])
	$3 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $3
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($4)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $236(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$3 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $3
	*($0 + [4]) = $3
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$3 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $3) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$1 }
	$2 = ($0 + [8])
	$6 = [178956970]
	$3 = ((int_32)(*($0 + [8]) - $3) / (int_32)[24])
	if ( ((uint_32)$3 > (uint_32)[89478484]) ){ goto $label$2 }
	$6 = ($3 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	
.LABEL $label$2
	*(($6 = CALL $95(($7 + [8]), $6, $4, $2)) + [8]) = (CALL $fimport$19(*($6 + [8]), $1, [24]) + [24])
	CALL $96($0, $6)
	$1 = *($6 + [4])
	$0 = *($6 + [8])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	*(($6 + [8])) = ($0 + ((int_32)((int_32)((uint_32)(($0 + [-24]) - $1) / (uint_32)[24]) ^ (int_32)[-1]) * (int_32)[24]))
	
.LABEL $label$3
	$6 = *($6)
	if ( ($6 == 0) ){ goto $label$4 }
	CALL $237($6)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

int_32 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = *($0 + [12])
	$1 = *(($0 + [16]))
	$3 = ($1 - $2)
	$4 = (CASTING uint_64)(uint_32 ((int_32)$3 / (int_32)[24]))
	$0 = [36]
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$2 }
	$1 = ($3 + [-24])
	return (($1 - ((uint_32)$1 % (uint_32)[24])) + $0)
	
.LABEL $label$2
	return ($0 + [-24])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	return CALL $93(CALL $78(CALL $45($0, $1), ($1 + [8])), ($1 + [12]))
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [8]) = ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24])
	CALL $48($0, ($3 + [8]))
	$1 = *($1 + [4])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	
.LOOP $label$2:
	CALL $94($0, $2)
	$2 = ($2 + [24])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $138 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = ($0 + [8])
	$8 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	
.LABEL $label$2
	$8 = CALL $139(($9 + [8]), $8, $6, $4)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($8 + [8])) + [8]) = *($2)
	*($1) = $5
	*($1 + [16]) = *($3)
	*($8 + [8]) = ($1 + [24])
	CALL $140($0, $8)
	CALL $141($8)
	*([0] + [4]) = ($9 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

int_32 .FUNC $139 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $236(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$3 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $3
	*($0 + [4]) = $3
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $130 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$3 = *($0 + [8])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($3 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $237($2)
	
.LABEL $label$3
	$3 = *($4)
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $237($3)
	
.LABEL $label$4
	return $0
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	return CALL $19(CALL $68(CALL $118(CALL $19(CALL $33(CALL $33(CALL $33(CALL $33(CALL $19(CALL $19(CALL $19($0, $1), ($1 + [8])), ($1 + [16])), ($1 + [24])), ($1 + [28])), ($1 + [32])), ($1 + [36])), ($1 + [40])), ($1 + [48])), ($1 + [56])), ($1 + [64]))
}

void .FUNC _ZN10eosrockets4game4sellEyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	CALL require_auth($1)
	$5 = ($0 + [8])
	CALL $121(($7 + [8]), $5, $2)
	CALL eosio_assert(((int_32)*($7 + [12]) != (int_32)[0]), [1680])
	CALL eosio_assert(((int_64)*(*($7 + [12]) + [8]) == (int_64)$1), [1696])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [16])
	$4 = *($7 + [12])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [240])
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$5), [288])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)CALL $fimport$2()), [336])
	*($4 + [48]) = [1]
	*(($4 + [68])) = *(($3 + [12]))
	*(($4 + [64])) = *(($3 + [8]))
	*(($4 + [60])) = *(($3 + [4]))
	*($4 + [56]) = *($3)
	*($7 + [104]) = *($4 + [8])
	$2 = *($4)
	CALL eosio_assert([1], [400])
	$5 = (($7 + [16]) + [65])
	*($7 + [96]) = $5
	*($7 + [92]) = ($7 + [16])
	*($7 + [88]) = ($7 + [16])
	CALL $107(($7 + [88]), $4)
	CALL db_update_i64(*($4 + [76]), $1, ($7 + [16]), [65])
	$3 = ($0 + [24])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$1 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($7 + [120]) = *(($4 + [8]))
	if ( (CALL memcmp(($7 + [104]), ($7 + [120]), [8]) == 0) ){ goto $label$2 }
	$3 = ($4 + [80])
	$4 = *($3)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$3 }
	$4 = CALL db_idx64_find_primary(*(($0 + [8])), *(($0 + [16])), (int_64)7612987020020809728, ($7 + [112]), $2)
	*($3) = $4
	
.LABEL $label$3
	CALL db_idx64_update($4, $1, ($7 + [120]))
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($0 + [88]) == (int_64)CALL $fimport$2()), [544])
	*(($4 = CALL $236([88])) + [48]) = [0]
	CALL $57(($4 + [56]), (int_64)0, CALL $7([608]))
	*($4 + [72]) = ($0 + [88])
	$3 = *($7 + [12])
	*($4) = *($3)
	*($4 + [8]) = *($3 + [8])
	*($4 + [16]) = *($3 + [16])
	*($4 + [24]) = *($3 + [24])
	*($4 + [28]) = *($3 + [28])
	*($4 + [32]) = *($3 + [32])
	*($4 + [36]) = *($3 + [36])
	*($4 + [40]) = *($3 + [40])
	*($4 + [48]) = *($3 + [48])
	*(($4 + [64])) = *(($3 + [64]))
	*($4 + [56]) = *($3 + [56])
	*($7 + [96]) = $5
	*($7 + [92]) = ($7 + [16])
	*($7 + [88]) = ($7 + [16])
	CALL $133(($7 + [88]), $4)
	$2 = *($4)
	$5 = CALL db_store_i64(*(($0 + [96])), (int_64)-7949128890230767616, $1, $2, ($7 + [16]), [65])
	*($4 + [76]) = $5
	$3 = ($0 + [104])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$4 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($7 + [88]) = $4
	$1 = *($4)
	*($7 + [16]) = $1
	*($7 + [120]) = $5
	$6 = ($0 + [116])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [120]))) ){ goto $label$6 }
	*($3 + [8]) = $1
	*($3 + [16]) = $5
	*($7 + [88]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$5 
	
.LABEL $label$6
	CALL $127(($0 + [112]), ($7 + [88]), ($7 + [16]), ($7 + [120]))
	
.LABEL $label$5
	$4 = *($7 + [88])
	*($7 + [88]) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $237($4)
	
.LABEL $label$7
	*([0] + [4]) = ($7 + [128])
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	return CALL $45(CALL $53(CALL $112(CALL $45(CALL $78(CALL $78(CALL $78(CALL $78(CALL $45(CALL $45(CALL $45($0, $1), ($1 + [8])), ($1 + [16])), ($1 + [24])), ($1 + [28])), ($1 + [32])), ($1 + [36])), ($1 + [40])), ($1 + [48])), ($1 + [56])), ($1 + [64]))
}

void .FUNC _ZN10eosrockets4game6unsellEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	CALL require_auth($1)
	$5 = ($0 + [8])
	CALL $121(($6 + [8]), $5, $2)
	CALL eosio_assert(((int_32)*($6 + [12]) != (int_32)[0]), [1680])
	CALL eosio_assert(((int_64)*(*($6 + [12]) + [8]) == (int_64)$1), [1712])
	$3 = *($6 + [12])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [240])
	CALL eosio_assert(((int_32)*($3 + [72]) == (int_32)$5), [288])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)CALL $fimport$2()), [336])
	*($3 + [48]) = [0]
	*($6 + [104]) = *($3 + [8])
	$4 = *($3)
	CALL $57(($6 + [16]), (int_64)0, CALL $7([32]))
	*(($3 + [64])) = *((($6 + [16]) + [8]))
	*($3 + [56]) = *($6 + [16])
	CALL eosio_assert(((int_64)$4 == (int_64)*($3)), [400])
	*($6 + [96]) = (($6 + [16]) + [65])
	*($6 + [92]) = ($6 + [16])
	*($6 + [88]) = ($6 + [16])
	CALL $107(($6 + [88]), $3)
	CALL db_update_i64(*($3 + [76]), $1, ($6 + [16]), [65])
	$5 = ($0 + [24])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$1 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [120]) = *(($3 + [8]))
	if ( (CALL memcmp(($6 + [104]), ($6 + [120]), [8]) == 0) ){ goto $label$2 }
	$5 = ($3 + [80])
	$3 = *($5)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL db_idx64_find_primary(*(($0 + [8])), *(($0 + [16])), (int_64)7612987020020809728, ($6 + [112]), $4)
	*($5) = $3
	
.LABEL $label$3
	CALL db_idx64_update($3, $1, ($6 + [120]))
	
.LABEL $label$2
	$3 = ($0 + [88])
	CALL $122(($6 + [88]), $3, $2)
	$1 = *($6 + [88])
	*($6 + [16]) = $1
	$0 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$0) != (int_32)[0]), [1424])
	CALL $123(($6 + [16]))
	CALL $124($3, $0)
	*([0] + [4]) = ($6 + [128])
}

void .FUNC _ZN10eosrockets4game10createmissEyhhhhN5eosio5assetEhyh (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_64 $8, int_32 $9)
{
	int_32 $10
	$10 = (*([0] + [4]) - [128])
	*([0] + [4]) = $10
	*($10 + [80]) = $1
	*($10 + [79]) = $2
	*($10 + [78]) = $3
	*($10 + [77]) = $4
	*($10 + [76]) = $5
	*($10 + [75]) = $7
	*($10 + [64]) = $8
	*($10 + [63]) = $9
	CALL require_auth(*($0))
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $7([32])), [48])
	CALL eosio_assert(((int_64)*($6) > (int_64)0), [16])
	$9 = ($0 + [128])
	*($10 + [48]) = CALL $136($9)
	$8 = *($0)
	*($10 + [28]) = $6
	*($10 + [12]) = ($10 + [79])
	*($10 + [8]) = ($10 + [48])
	*($10 + [16]) = ($10 + [78])
	*($10 + [20]) = ($10 + [77])
	*($10 + [24]) = ($10 + [76])
	*($10 + [32]) = ($10 + [75])
	*($10 + [36]) = ($10 + [64])
	*($10 + [40]) = ($10 + [80])
	*($10 + [44]) = ($10 + [63])
	*($10 + [120]) = $8
	CALL eosio_assert(((int_64)*($0 + [128]) == (int_64)CALL $fimport$2()), [544])
	*($10 + [96]) = $9
	*($10 + [100]) = ($10 + [8])
	*($10 + [104]) = ($10 + [120])
	$6 = CALL $236([160])
	CALL $57(($6 + [16]), (int_64)0, CALL $7([608]))
	*($6 + [40]) = (int_64)0
	*($6 + [32]) = (int_64)1
	*($6 + [64]) = (int_64)0
	*($6 + [72]) = (int_64)0
	*($6 + [80]) = (int_64)0
	*($6 + [88]) = [0]
	CALL $57(($6 + [96]), (int_64)0, CALL $7([608]))
	*($6 + [112 align=4]) = (int_64)0
	*($6 + [120 align=4]) = (int_64)0
	*($6 + [128 align=4]) = (int_64)0
	*($6 + [136]) = [0]
	*($6 + [140]) = $9
	CALL $137(($10 + [96]), $6)
	*($10 + [112]) = $6
	$8 = *($6)
	*($10 + [96]) = $8
	$7 = *($6 + [144])
	*($10 + [92]) = $7
	$5 = ($0 + [156])
	$9 = *($5)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [160]))) ){ goto $label$2 }
	*($9 + [8]) = $8
	*($9 + [16]) = $7
	*($10 + [112]) = [0]
	*($9) = $6
	*($5) = ($9 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $138(($0 + [152]), ($10 + [112]), ($10 + [96]), ($10 + [92]))
	
.LABEL $label$1
	$6 = *($10 + [112])
	*($10 + [112]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	$0 = *($6 + [124])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [128])) = $0
	CALL $237($0)
	
.LABEL $label$4
	$0 = *($6 + [112])
	if ( ($0 == 0) ){ goto $label$5 }
	*(($6 + [116])) = $0
	CALL $237($0)
	
.LABEL $label$5
	CALL $237($6)
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [128])
}

int_64 .FUNC $136 (int_32 $0)
{
	int_64 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [16])
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$1 }
	$1 = (int_64)0
	CALL $147(($2 + [8]), $0, (int_64)0)
	if ( (*($2 + [12]) == 0) ){ goto $label$2 }
	*($2 + [4]) = [0]
	*($2) = $0
	$1 = *(*(CALL $148($2) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [16])) = $1
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [1200])
	$1 = *(($0 + [16]))
	*([0] + [4]) = ($2 + [16])
	return $1
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$5 = *($0 + [4])
	*($1) = *(*($5))
	*($1 + [8]) = *(*($5 + [4]))
	$2 = *($0)
	*($1 + [9]) = *(*($5 + [8]))
	*($1 + [10]) = *(*($5 + [12]))
	*($1 + [11]) = *(*($5 + [16]))
	$8 = *($5 + [20])
	$4 = *(($8 + [8]))
	$6 = *($8)
	*($1 + [32]) = (int_64)1
	*($1 + [16]) = $6
	*(($1 + [24])) = $4
	*($1 + [48]) = *(*($5 + [24]))
	*($1 + [56]) = *(*($5 + [28]))
	*($1 + [64]) = *(*($5 + [32]))
	$8 = $9
	CALL $57(($8 + [8]), (int_64)0, CALL $7([32]))
	*(($1 + [104])) = *((($8 + [8]) + [8]))
	*($1 + [96]) = *($8 + [8])
	*($1 + [88]) = *(*($5 + [36]))
	$3 = CALL $142($1)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($8 + [12]) = $5
	*($8 + [8]) = $5
	*($8 + [16]) = ($5 + $3)
	CALL $143(($8 + [8]), $1)
	$4 = *($1)
	*($1 + [144]) = CALL db_store_i64(*($2 + [8]), (int_64)-7804307891388678144, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$5 = ($2 + [8])
	$4 = *($5)
	$0 = *(($0 + [8]))
	$6 = *($0)
	$7 = *($1)
	*($8 + [24]) = *(($1 + [32]))
	*($1 + [148]) = CALL db_idx64_store($4, (int_64)-7804307891388678144, $6, $7, ($8 + [24]))
	$4 = *($0)
	$6 = *($5)
	$7 = *($1)
	*($8 + [24]) = *($1 + [80])
	*(($1 + [152])) = CALL db_idx64_store($6, (int_64)-7804307891388678143, $4, $7, ($8 + [24]))
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $213 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = *($0 + [4])
	$9 = *($8 + [4])
	$0 = (*(*($0)) + int_32($9 >> [1]))
	$7 = *($1 + [28])
	$6 = *($1 + [24])
	$5 = *($1 + [20])
	$4 = *($1 + [16])
	$3 = *($1 + [8])
	$2 = *($1)
	$1 = *($8)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $4), (int_32 $5), (int_32 $6), (int_32 $7), (int_32 $1))
}

int_32 .FUNC $208 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [124])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [128])) = $3
	CALL $237($3)
	
.LABEL $label$6
	$3 = *($2 + [112])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($2 + [116])) = $3
	CALL $237($3)
	
.LABEL $label$7
	CALL $237($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $237($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $209 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = *($0 + [4])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $237($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $237($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $202 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	*($2 + [64]) = ($2 + [48])
	*($2 + [72]) = $2
	CALL $212(($2 + [72]), ($2 + [64]))
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $213(($2 + [48]), $2)
	*([0] + [4]) = ($2 + [80])
	return [1]
}

int_32 .FUNC $203 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = *($0 + [4])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $237($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $237($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $200 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [80])
	*([0] + [4]) = $2
	*(($3 = $2) + [76]) = $0
	*($3 + [64]) = *($1)
	*($3 + [68]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $214(($3 + [8]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [4]) = ($3 + [64])
	*($3) = ($3 + [76])
	CALL $215($3, ($3 + [8]))
	*([0] + [4]) = ($3 + [80])
	return [1]
}

int_32 .FUNC $201 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [176])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $206 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = *($0 + [4])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $237(*(($2 + [40])))
	
.LABEL $label$6
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$7 }
	CALL $237(*(($2 + [28])))
	
.LABEL $label$7
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL $237(*(($2 + [16])))
	
.LABEL $label$8
	CALL $237($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $237($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $207 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [12])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [16])) = $3
	CALL $237($3)
	
.LABEL $label$6
	CALL $237($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $237($4)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $204 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = *($0 + [4])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $237(*(($2 + [16])))
	
.LABEL $label$6
	CALL $237($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $237($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $205 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = *($0 + [4])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $237($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $237($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $181 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$3 = *($0 + [8])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($3 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $237($2)
	
.LABEL $label$3
	$3 = *($4)
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $237($3)
	
.LABEL $label$4
	return $0
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$5 = *($0 + [4])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$2 }
	$3 = ($1 + [4])
	$6 = *($3)
	
.LOOP $label$3:
	$2 = ($5 + [-24])
	$4 = *($2)
	*($2) = [0]
	*(($6 + [-24])) = $4
	*(($6 + [-8])) = *(($5 + [-8]))
	*(($6 + [-12])) = *(($5 + [-12]))
	*(($6 + [-16])) = *(($5 + [-16]))
	$6 = (*($3) + [-24])
	*($3) = $6
	$5 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$6 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $6
	*(($6 = ($1 + [4]))) = $7
	$5 = ($0 + [4])
	$2 = *($5)
	*($5) = *($1 + [8])
	*($1 + [8]) = $2
	$5 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $5
	*($1) = *($6)
}

int_32 .FUNC $128 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $236(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$3 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $3
	*($0 + [4]) = $3
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC _ZN10eosrockets14transaction_idEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = CALL transaction_size()
	$3 = *([0] + [4])
	$2 = ($3 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	CALL sha256($2, CALL $fimport$23($2, $1), $0)
	*([0] + [4]) = $3
}

void .FUNC _ZN10eosrockets7_sha256ENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *($1)
	if ( ($2 & [1]) ){ goto $label$2 }
	$2 = uint_32($2 >> [1])
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($1 + [4])
	$1 = *($1 + [8])
	
.LABEL $label$1
	CALL sha256($1, $2, $0)
}

int_32 .FUNC $123 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1648])
	$1 = CALL db_next_i64(*(*($0 + [4]) + [76]), ($3 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $125(*($0), $1)
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $122 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($1 + [24])
	$7 = *(($1 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-7949128890230767616, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $125($1, $6)
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	
.LABEL $label$3
	*($0) = $1
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($1 + [24])
	$7 = *(($1 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7612987020020809728, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $115($1, $6)
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	
.LABEL $label$3
	*($0) = $1
}

void .FUNC _ZN10eosrockets4game10buyauctionEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [192])
	*([0] + [4]) = $7
	CALL require_auth($1)
	$5 = ($0 + [8])
	CALL $121(($7 + [72]), $5, $2)
	CALL eosio_assert(((int_32)*($7 + [76]) != (int_32)[0]), [1376])
	CALL eosio_assert(((int_64)*(*($7 + [76]) + [8]) != (int_64)$1), [1392])
	CALL eosio_assert(*(*($7 + [76]) + [48]), [1408])
	$3 = *($7 + [76])
	*((($7 + [56]) + [12])) = *(($3 + [68]))
	*(($6 = (($7 + [56]) + [8]))) = *(($3 + [64]))
	*($7 + [56]) = *($3 + [56])
	*((($7 + [24]) + [8])) = *($6)
	*($7 + [24]) = *($7 + [56])
	CALL _ZN10eosrockets4game10ledger_outEyN5eosio5assetE($0, $1, ($7 + [24]))
	$3 = *($7 + [76])
	$4 = *($3 + [8])
	*((($7 + [40]) + [12])) = *(($3 + [68]))
	*(($6 = (($7 + [40]) + [8]))) = *(($3 + [64]))
	*($7 + [40]) = *($3 + [56])
	*($7 + [44]) = *(($3 + [60]))
	*((($7 + [8]) + [8])) = *($6)
	*($7 + [8]) = *($7 + [40])
	CALL _ZN10eosrockets4game9ledger_inEyN5eosio5assetE($0, $4, ($7 + [8]))
	$3 = *($7 + [76])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [240])
	CALL eosio_assert(((int_32)*($3 + [72]) == (int_32)$5), [288])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)CALL $fimport$2()), [336])
	*($3 + [48]) = [0]
	$4 = *($3 + [8])
	*($3 + [8]) = $1
	*($7 + [168]) = $4
	$4 = *($3)
	CALL $57(($7 + [80]), (int_64)0, CALL $7([32]))
	*(($3 + [64])) = *((($7 + [80]) + [8]))
	*($3 + [56]) = *($7 + [80])
	CALL eosio_assert(((int_64)$4 == (int_64)*($3)), [400])
	*($7 + [160]) = (($7 + [80]) + [65])
	*($7 + [156]) = ($7 + [80])
	*($7 + [152]) = ($7 + [80])
	CALL $107(($7 + [152]), $3)
	CALL db_update_i64(*($3 + [76]), $1, ($7 + [80]), [65])
	$5 = ($0 + [24])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$1 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($7 + [184]) = *(($3 + [8]))
	if ( (CALL memcmp(($7 + [168]), ($7 + [184]), [8]) == 0) ){ goto $label$2 }
	$5 = ($3 + [80])
	$3 = *($5)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL db_idx64_find_primary(*(($0 + [8])), *(($0 + [16])), (int_64)7612987020020809728, ($7 + [176]), $4)
	*($5) = $3
	
.LABEL $label$3
	CALL db_idx64_update($3, $1, ($7 + [184]))
	
.LABEL $label$2
	$3 = ($0 + [88])
	CALL $122(($7 + [152]), $3, $2)
	$1 = *($7 + [152])
	*($7 + [80]) = $1
	$0 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$0) != (int_32)[0]), [1424])
	CALL $123(($7 + [80]))
	CALL $124($3, $0)
	*([0] + [4]) = ($7 + [192])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [48]) = [0]
	CALL $57(($0 + [56]), (int_64)0, CALL $7([608]))
	*($0 + [72]) = $1
	CALL $131(*($2 + [4]), $0)
	*($0 + [76]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [144])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $236([88])
	$6 = CALL $126($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [76])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $127(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $237($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [1472])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1520])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1584])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $237($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $237($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	return CALL $19(CALL $20(CALL $19($0, $1), ($1 + [8])), ($1 + [24]))
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = ($0 + [8])
	$8 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	
.LABEL $label$2
	$8 = CALL $16(($9 + [8]), $8, $6, $4)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($8 + [8])) + [8]) = *($2)
	*($1) = $5
	*($1 + [16]) = *($3)
	*($8 + [8]) = ($1 + [24])
	CALL $17($0, $8)
	CALL $18($8)
	*([0] + [4]) = ($9 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $236(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$3 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $3
	*($0 + [4]) = $3
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$5 = *($0 + [4])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$2 }
	$3 = ($1 + [4])
	$6 = *($3)
	
.LOOP $label$3:
	$2 = ($5 + [-24])
	$4 = *($2)
	*($2) = [0]
	*(($6 + [-24])) = $4
	*(($6 + [-8])) = *(($5 + [-8]))
	*(($6 + [-12])) = *(($5 + [-12]))
	*(($6 + [-16])) = *(($5 + [-16]))
	$6 = (*($3) + [-24])
	*($3) = $6
	$5 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$6 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $6
	*(($6 = ($1 + [4]))) = $7
	$5 = ($0 + [4])
	$2 = *($5)
	*($5) = *($1 + [8])
	*($1 + [8]) = $2
	$5 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $5
	*($1) = *($6)
}

int_64 .FUNC _ZN10eosrockets12_setting_keyENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [48])
	*([0] + [4]) = $3
	CALL $243($3, $0)
	$0 = *($3)
	$1 = ($0 & [1])
	CALL sha256(( *($3 + [8]) ? ($3 | [1]) : $1 ), ( *($3 + [4]) ? uint_32($0 >> [1]) : $1 ), ($3 + [16]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL $237(*(($3 + [8])))
	
.LABEL $label$1
	$2 = *($3 + [16])
	*([0] + [4]) = ($3 + [48])
	return $2
}

int_64 .FUNC _ZN10eosrockets4game12_get_settingENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [32])
	*([0] + [4]) = $3
	CALL $243(($3 + [8]), $1)
	$2 = CALL _ZN10eosrockets12_setting_keyENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(($3 + [8]))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$1 }
	CALL $237(*($3 + [16]))
	
.LABEL $label$1
	CALL $12(($3 + [24]), ($0 + [288]), $2)
	CALL eosio_assert(((int_32)*($3 + [28]) != (int_32)[0]), [64])
	$2 = *(*($3 + [28]) + [24])
	*([0] + [4]) = ($3 + [32])
	return $2
}

void .FUNC $12 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($1 + [24])
	$7 = *(($1 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4417020450404564992, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $13($1, $6)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	
.LABEL $label$3
	*($0) = $1
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [144])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$7 = ($0 + [24])
	*(($4 = CALL $236([48])) + [8 align=4]) = (int_64)0
	*(($4 + [16])) = [0]
	$6 = [8]
	
.LOOP $label$8:
	*(($4 + $6)) = [0]
	$6 = ($6 + [4])
	if ( ((int_32)$6 != (int_32)[20]) ){ goto $label$8 }
	*($4 + [32]) = $0
	CALL $14(($8 + [32]), $4)
	*($4 + [40]) = [-1]
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$1 = *($4 + [36])
	*($8 + [12]) = $1
	$3 = ($0 + [28])
	$6 = *($3)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($6 + [8]) = $5
	*($6 + [16]) = $1
	*($8 + [24]) = [0]
	*($6) = $4
	*($3) = ($6 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $15($7, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$9
	$6 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $237(*(($6 + [16])))
	
.LABEL $label$11
	CALL $237($6)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( ((uint_32)$1 >= (uint_32)[536870912]) ){ goto $label$1 }
	$2 = ($1 << [3])
	$1 = CALL $236($2)
	*($0) = $1
	*($0 + [4]) = $1
	*($0 + [8]) = ($1 + $2)
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

int_32 .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL $237(*(($2 + [16])))
	
.LABEL $label$4
	CALL $237($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $237($2)
	
.LABEL $label$5
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $184 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $237($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = [536870911]
	if ( ((uint_32)int_32($8 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$5 = int_32($8 >> [2])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	
.LABEL $label$6
	CALL $185($0, $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $1, $3)
	*($0) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [3])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

void .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$2 = ((int_32)$1 * (int_32)[24])
	$1 = CALL $236($2)
	*($0) = $1
	*($0 + [4]) = $1
	*($0 + [8]) = ($1 + $2)
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

void .FUNC $218 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [32])
	*([0] + [4]) = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	CALL $57(($0 + [16]), (int_64)0, CALL $7([608]))
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	*($3 + [16]) = $3
	*($3 + [24]) = $0
	CALL $220(($3 + [24]), ($3 + [16]))
	*([0] + [4]) = ($3 + [32])
}

void .FUNC _ZN10eosrockets4game20truncate_leaderboardERKNSt3__16vectorINS_5entryENS1_9allocatorIS3_EEEEh (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$0 = *($4)
	$4 = CALL $172($0, $2)
	$2 = ((int_32)(*($4 + [4]) - $0) / (int_32)[24])
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$1 }
	$5 = *((($0 + ((int_32)$3 * (int_32)[24])) + [-8]))
	
.LOOP $label$3:
	if ( ((int_64)*(($0 + ((int_32)$3 * (int_32)[24])) + [16]) != (int_64)$5) ){ goto $label$2 }
	$3 = (($3 + [1]) & [255])
	if ( ($3 <= $2) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$1 }
	CALL $157($4, $3)
	
.LABEL $label$1
}

void .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$5 = *($0 + [4])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$2 }
	$3 = ($1 + [4])
	$6 = *($3)
	
.LOOP $label$3:
	$2 = ($5 + [-24])
	$4 = *($2)
	*($2) = [0]
	*(($6 + [-24])) = $4
	*(($6 + [-8])) = *(($5 + [-8]))
	*(($6 + [-12])) = *(($5 + [-12]))
	*(($6 + [-16])) = *(($5 + [-16]))
	$6 = (*($3) + [-24])
	*($3) = $6
	$5 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$6 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $6
	*(($6 = ($1 + [4]))) = $7
	$5 = ($0 + [4])
	$2 = *($5)
	*($5) = *($1 + [8])
	*($1 + [8]) = $2
	$5 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $5
	*($1) = *($6)
}

int_32 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [48]) = [0]
	CALL $57(($0 + [56]), (int_64)0, CALL $7([608]))
	*($0 + [72]) = $1
	CALL $117(*($2 + [4]), $0)
	$2 = *(*($2 + [8]))
	*($0 + [80]) = [-1]
	*($0 + [76]) = $2
	return $0
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	return CALL $19(CALL $68(CALL $118(CALL $19(CALL $33(CALL $33(CALL $33(CALL $33(CALL $19(CALL $19(CALL $19($0, $1), ($1 + [8])), ($1 + [16])), ($1 + [24])), ($1 + [28])), ($1 + [32])), ($1 + [36])), ($1 + [40])), ($1 + [48])), ($1 + [56])), ($1 + [64]))
}

int_32 .FUNC $114 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [76]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1328])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7612987020020809728)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1264])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1264])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $115(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [144])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $236([88])
	$6 = CALL $116($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [76])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $108(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $237($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($0 + [4]), $1, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $113 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = [0]
	$3 = CALL db_lowerbound_i64(*($1), *($1 + [8]), (int_64)7612987020020809728, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $115($1, $3)
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$5 = *($0 + [4])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$2 }
	$3 = ($1 + [4])
	$6 = *($3)
	
.LOOP $label$3:
	$2 = ($5 + [-24])
	$4 = *($2)
	*($2) = [0]
	*(($6 + [-24])) = $4
	*(($6 + [-8])) = *(($5 + [-8]))
	*(($6 + [-12])) = *(($5 + [-12]))
	*(($6 + [-16])) = *(($5 + [-16]))
	$6 = (*($3) + [-24])
	*($3) = $6
	$5 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$6 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $6
	*(($6 = ($1 + [4]))) = $7
	$5 = ($0 + [4])
	$2 = *($5)
	*($5) = *($1 + [8])
	*($1 + [8]) = $2
	$5 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $5
	*($1) = *($6)
}

int_32 .FUNC $111 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$3 = *($0 + [8])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($3 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $237($2)
	
.LABEL $label$3
	$3 = *($4)
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $237($3)
	
.LABEL $label$4
	return $0
}

void .FUNC $237 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [176])
	CALL memcpy($1, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC _ZN10eosrockets4game9buyretailEyy (int_32 $0, int_64 $1, int_64 $2)
{
	CALL require_auth($1)
	CALL _ZN10eosrockets4game19give_account_retailEyyb($0, $1, $2, [1])
}

int_64 .FUNC _ZN10eosrockets10lerp_bonusEyyym (int_64 $0, int_64 $1, int_64 $2, int_32 $3)
{
	$2 = ((int_64)((uint_64)((int_64)(CASTING uint_64)(uint_32 ((uint_32)$3 % (uint_32)[100])) * (int_64))($1 - $0)) / (uint_64)(int_64)100) + (int_64)$2
	$0 = ( $0 ? $2) : (uint_64)($2 <= $0) 
	return ( $1 ? $0) : ((uint_64)$0 > (uint_64)$1) )
}

int_64 .FUNC _ZN10eosrockets4lerpEyym (int_64 $0, int_64 $1, int_32 $2)
{
	return ((int_64)((uint_64)((int_64)(CASTING uint_64)(uint_32 ((uint_32)$2 % (uint_32)[100])) * (int_64))($1 - $0)) / (uint_64)(int_64)100) + (int_64)$0)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10368])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10176]
	$1 = (((int_32)$2 * (int_32)[12]) + [10176])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [8]) = [0]
	CALL $22($0, ($3 + [8]))
	CALL $23($1, *($3 + [8]))
	$2 = *($1)
	$1 = (*($1 + [4]) - $2)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) >= (uint_32)$1), [176])
	CALL memcpy($2, *($0 + [4]), $1)
	*($0 + [4]) = (*($0 + [4]) + $1)
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $21($0, ($7 + [16]))
	$6 = *($7 + [16])
	$4 = *($7 + [20])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$8 }
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$6 = [0]
	
.LOOP $label$9:
	*(($7 + $6)) = [0]
	$6 = ($6 + [4])
	if ( ((int_32)$6 != (int_32)[12]) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$7 }
	*($1) = [0]
	goto $label$6 
	
.LABEL $label$8
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($4 - $6)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$5 }
	*($7) = ($2 << [1])
	$5 = ($7 | [1])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$7
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$6
	CALL $241($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$6 = [0]
	
.LOOP $label$10:
	*(($7 + $6)) = [0]
	$6 = ($6 + [4])
	if ( ((int_32)$6 != (int_32)[12]) ){ goto $label$10 }
	if ( ((*($7) & [1]) == 0) ){ goto $label$2 }
	CALL $237(*($7 + [8]))
	goto $label$2 
	
.LABEL $label$5
	$4 = (($2 + [16]) & [-16])
	$5 = CALL $236($4)
	*($7) = ($4 | [1])
	*($7 + [8]) = $5
	*($7 + [4]) = $2
	
.LABEL $label$4
	$3 = $2
	$4 = $5
	
.LOOP $label$11:
	*($4) = *($6)
	$4 = ($4 + [1])
	$6 = ($6 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$11 }
	$5 = ($5 + $2)
	
.LABEL $label$3
	*($5) = [0]
	if ( (*($1) & [1]) ){ goto $label$13 }
	*($1) = [0]
	goto $label$12 
	
.LABEL $label$13
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$12
	CALL $241($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$6 = [0]
	
.LOOP $label$14:
	*(($7 + $6)) = [0]
	$6 = ($6 + [4])
	if ( ((int_32)$6 != (int_32)[12]) ){ goto $label$14 }
	if ( ((*($7) & [1]) == 0) ){ goto $label$2 }
	CALL $237(*($7 + [8]))
	
.LABEL $label$2
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$15 }
	*($7 + [20]) = $6
	CALL $237($6)
	
.LABEL $label$15
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $238($7)
	return (unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = (*($0 + [4]) - $2)
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$1 }
	CALL $24($0, ($1 - $3))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$3 <= (uint_32)$1) ){ goto $label$2 }
	*(($0 + [4])) = ($2 + $1)
	
.LABEL $label$2
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [192])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	*($1) = $6
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = (*($0 + [4]) - $3)
	$4 = (*($1 + [4]) - $2)
	*($1 + [4]) = $4
	if ( ((int_32)$2 <= (int_32)[0]) ){ goto $label$1 }
	CALL memcpy($4, $3, $2)
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	$2 = *($0)
	*($0) = $4
	*(($4 = ($1 + [4]))) = $2
	$2 = ($0 + [4])
	$3 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $3
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($4)
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$5 = *($0 + [4])
	$4 = *($0 + [8])
	if ( ((uint_32)($4 - $5) >= (uint_32)$1) ){ goto $label$7 }
	$6 = *($0)
	$5 = ($5 - $6)
	$3 = ($5 + $1)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	$2 = ($0 + [8])
	$4 = ($4 - $6)
	if ( ((uint_32)$4 >= (uint_32)[1073741823]) ){ goto $label$6 }
	*(($7 + [24])) = $2
	$6 = [0]
	*($7 + [20]) = [0]
	$2 = ($7 + [20])
	$4 = ($4 << [1])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	$6 = $4
	goto $label$5 
	
.LABEL $label$7
	$4 = ($0 + [4])
	
.LOOP $label$8:
	*($5) = [0]
	$5 = (*($4) + [1])
	*($4) = $5
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$6
	*(($7 + [24])) = $2
	*($7 + [20]) = [0]
	$2 = ($7 + [20])
	$6 = [2147483647]
	
.LABEL $label$5
	$4 = CALL $236($6)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $242($0)
	
.LABEL $label$2
	*($7 + [8]) = $4
	$5 = ($4 + $5)
	*($7 + [12]) = $5
	*($7 + [16]) = $5
	*($2) = ($4 + $6)
	$4 = ($7 + [16])
	
.LOOP $label$9:
	*($5) = [0]
	$5 = (*($4) + [1])
	*($4) = $5
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	CALL $25($0, ($7 + [8]))
	$5 = *($7 + [12])
	$1 = ($7 + [16])
	if ( ((int_32)*($1) == (int_32)$5) ){ goto $label$10 }
	*($1) = $5
	
.LABEL $label$10
	$1 = *($7 + [8])
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $237($1)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [32])
	(unreachable)
}

void .FUNC _ZN10eosrockets7_randomEv (int_32 $0)
{
	CALL _ZN10eosrockets14transaction_idEv($0)
}

int_64 .FUNC _ZN10eosrockets4game12_get_settingEy (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	CALL $12(($2 + [8]), ($0 + [288]), $1)
	CALL eosio_assert(((int_32)*($2 + [12]) != (int_32)[0]), [64])
	$1 = *(*($2 + [12]) + [24])
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $233([1984], $0)
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	return CALL $102(CALL $33(CALL $19($0, $1), ($1 + [8])), ($1 + [12]))
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [144])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $236([40])) + [8]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24]) = $0
	CALL $101(($8 + [32]), $6)
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $88(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [12])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [16])) = $7
	CALL $237($7)
	
.LABEL $label$10
	CALL $237($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[24])
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$1 }
	CALL $105($0, ($1 - $3))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$3 <= (uint_32)$1) ){ goto $label$2 }
	*(($0 + [4])) = ($2 + ((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [8]) = [0]
	CALL $22($0, ($3 + [8]))
	CALL $103($1, *($3 + [8]))
	$1 = *($1 + [4])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	
.LOOP $label$2:
	CALL $104($0, $2)
	$2 = ($2 + [24])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$7 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((uint_32)((int_32)($6 - $7) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$3 }
	$3 = *($0)
	$4 = ((int_32)($7 - $3) / (int_32)[24])
	$5 = ($4 + $1)
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$1 }
	$2 = ($0 + [8])
	$7 = [178956970]
	$6 = ((int_32)($6 - $3) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	
.LABEL $label$4
	$6 = CALL $95(($8 + [8]), $7, $4, $2)
	$7 = *($6 + [8])
	$3 = ($7 + ((int_32)$1 * (int_32)[24]))
	
.LOOP $label$5:
	$7 = (CALL memset($7, [0], [24]) + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	*(($1 = ($6 + [8]))) = $3
	CALL $96($0, $6)
	$0 = *($6 + [4])
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$6 }
	*($1) = ($7 + ((int_32)((int_32)((uint_32)(($7 + [-24]) - $0) / (uint_32)[24]) ^ (int_32)[-1]) * (int_32)[24]))
	
.LABEL $label$6
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$2 }
	CALL $237($1)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($0 + [4])
	
.LOOP $label$7:
	CALL memset($7, [0], [24])
	$7 = (*($0) + [24])
	*($0) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	return CALL $19(CALL $19(CALL $19($0, $1), ($1 + [8])), ($1 + [16]))
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	return CALL $45(CALL $53(CALL $112(CALL $45(CALL $78(CALL $78(CALL $78(CALL $78(CALL $45(CALL $45(CALL $45($0, $1), ($1 + [8])), ($1 + [16])), ($1 + [24])), ($1 + [28])), ($1 + [32])), ($1 + [36])), ($1 + [40])), ($1 + [48])), ($1 + [56])), ($1 + [64]))
}

int_64 .FUNC $106 (int_32 $0)
{
	int_64 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [16])
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$1 }
	$1 = (int_64)0
	CALL $113(($2 + [8]), $0, (int_64)0)
	if ( (*($2 + [12]) == 0) ){ goto $label$2 }
	*($2 + [4]) = [0]
	*($2) = $0
	$1 = *(*(CALL $114($2) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [16])) = $1
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [1200])
	$1 = *(($0 + [16]))
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $236(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$3 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $3
	*($0 + [4]) = $3
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = ($0 + [8])
	$8 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	
.LABEL $label$2
	$8 = CALL $109(($9 + [8]), $8, $6, $4)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($8 + [8])) + [8]) = *($2)
	*($1) = $5
	*($1 + [16]) = *($3)
	*($8 + [8]) = ($1 + [24])
	CALL $110($0, $8)
	CALL $111($8)
	*([0] + [4]) = ($9 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

void .FUNC $212 (int_32 $0, int_32 $1)
{
	CALL $19(*($1), *($0))
	$0 = *($0)
	CALL $19(*($1), ($0 + [8]))
	CALL $33(*($1), ($0 + [16]))
	CALL $33(*($1), ($0 + [20]))
	CALL $33(*($1), ($0 + [24]))
	CALL $33(*($1), ($0 + [28]))
}

int_32 .FUNC $231 (int_32 $0, int_32 $1)
{
	return CALL $20(CALL $19(CALL $68(CALL $19(CALL $19($0, $1), ($1 + [8])), ($1 + [16])), ($1 + [24])), ($1 + [32]))
}

void .FUNC $219 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*(($6 + [28])) = *(($1 + [28]))
	*(($4 = (($6 + [16]) + [8]))) = *(($1 + [24]))
	*($6 + [16]) = *($1 + [16])
	*($6 + [20]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	*((($6 + [32]) + [8])) = *($4)
	*($6 + [32]) = *($6 + [16])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$5 = *((($6 + [32]) + [8]))
	*((($6 + [48]) + [8])) = $5
	*(($6 + [8])) = $5
	$5 = *($6 + [32])
	*($6 + [48]) = $5
	*($6) = $5
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $6), (int_32 $1))
	*([0] + [4]) = ($6 + [64])
}

void .FUNC _ZN10eosrockets4game11transfer_toEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [128])
	*([0] + [4]) = $8
	$4 = *($0)
	*($8 + [80]) = CALL $39([480])
	*($8 + [72]) = $4
	$4 = CALL $39([496])
	$3 = CALL $39([512])
	*(($8 + [16])) = [0]
	*($8 + [8]) = (int_64)0
	$7 = CALL strlen([528])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$4 }
	*($8 + [8]) = ($7 << [1])
	$6 = (($8 + [8]) | [1])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($7 + [16]) & [-16])
	$6 = CALL $236($5)
	*($8 + [8]) = ($5 | [1])
	*($8 + [16]) = $6
	*($8 + [12]) = $7
	
.LABEL $label$3
	CALL memcpy($6, [528], $7)
	
.LABEL $label$2
	*(($6 + $7)) = [0]
	*(($8 + [52])) = *(($2 + [12]))
	*(($8 + [48])) = *(($2 + [8]))
	*(($8 + [44])) = *(($2 + [4]))
	*($8 + [32]) = $1
	*($8 + [24]) = *($0)
	*($8 + [40]) = *($2)
	*(($8 + [64])) = *((($8 + [8]) + [8]))
	*($8 + [56]) = *($8 + [8])
	$7 = [0]
	
.LOOP $label$5:
	*((($8 + [8]) + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$5 }
	$7 = CALL $40(($8 + [88]), ($8 + [72]), $4, $3, ($8 + [24]))
	CALL $41($7)
	$2 = *($7 + [28])
	if ( ($2 == 0) ){ goto $label$6 }
	*(($7 + [32])) = $2
	CALL $237($2)
	
.LABEL $label$6
	$2 = *($7 + [16])
	if ( ($2 == 0) ){ goto $label$7 }
	*(($7 + [20])) = $2
	CALL $237($2)
	
.LABEL $label$7
	if ( ((*(($8 + [56])) & [1]) == 0) ){ goto $label$8 }
	CALL $237(*(($8 + [64])))
	
.LABEL $label$8
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL $237(*($8 + [16]))
	
.LABEL $label$9
	*([0] + [4]) = ($8 + [128])
	return (unreachable)
	
.LABEL $label$1
	CALL $238(($8 + [8]))
}

int_64 .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$4 = [-1]
	
.LOOP $label$1:
	$3 = ($0 + $4)
	$1 = ($4 + [1])
	$4 = $1
	if ( *(($3 + [1])) ){ goto $label$1 }
	$2 = (CASTING uint_64)(uint_32 $1)
	$6 = (int_64)0
	$5 = (int_64)59
	$7 = (int_64)0
	
.LOOP $label$2:
	$8 = (int_64)0
	if ( ((uint_64)$6 >= (uint_64)$2) ){ goto $label$3 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$7 }
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	goto $label$6 
	
.LABEL $label$7
	$8 = ((int_64)$8 & (int_64)15)
	
.LABEL $label$6
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$2 }
	return $7
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$5 = *($0 + [4])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$2 }
	$3 = ($1 + [4])
	$6 = *($3)
	
.LOOP $label$3:
	$2 = ($5 + [-24])
	$4 = *($2)
	*($2) = [0]
	*(($6 + [-24])) = $4
	*(($6 + [-8])) = *(($5 + [-8]))
	*(($6 + [-12])) = *(($5 + [-12]))
	*(($6 + [-16])) = *(($5 + [-16]))
	$6 = (*($3) + [-24])
	*($3) = $6
	$5 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$6 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $6
	*(($6 = ($1 + [4]))) = $7
	$5 = ($0 + [4])
	$2 = *($5)
	*($5) = *($1 + [8])
	*($1 + [8]) = $2
	$5 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $5
	*($1) = *($6)
}

int_32 .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$3 = *($0 + [8])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($3 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $237($2)
	
.LABEL $label$3
	$3 = *($4)
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $237($3)
	
.LABEL $label$4
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = ($0 + [8])
	$8 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	
.LABEL $label$2
	$8 = CALL $35(($9 + [8]), $8, $6, $4)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($8 + [8])) + [8]) = *($2)
	*($1) = $5
	*($1 + [16]) = *($3)
	*($8 + [8]) = ($1 + [24])
	CALL $36($0, $8)
	CALL $37($8)
	*([0] + [4]) = ($9 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $242($0)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $236(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$3 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $3
	*($0 + [4]) = $3
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [144])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $236([32])) + [16]) = $0
	CALL $33(CALL $19(($8 + [32]), $6), ($6 + [8]))
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $34(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $237($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [176])
	CALL memcpy($1, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC _ZN10eosrockets4game16_decrement_stockEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$2 = ($0 + [328])
	CALL $31(($5 + [8]), $2, $1)
	CALL eosio_assert(((int_32)*($5 + [12]) != (int_32)[0]), [208])
	CALL eosio_assert(((int_32)*(*($5 + [12]) + [8]) != (int_32)[0]), [224])
	$4 = *($0)
	$3 = *($5 + [12])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [240])
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$2), [288])
	CALL eosio_assert(((int_64)*($0 + [328]) == (int_64)CALL $fimport$2()), [336])
	*($3 + [8]) = (*($3 + [8]) + [-1])
	$1 = *($3)
	CALL eosio_assert([1], [400])
	CALL eosio_assert([1], [464])
	CALL memcpy(($5 + [16]), $3, [8])
	CALL eosio_assert([1], [464])
	CALL memcpy((($5 + [16]) | [8]), ($3 + [8]), [4])
	CALL db_update_i64(*($3 + [20]), $4, ($5 + [16]), [12])
	$3 = ($0 + [344])
	if ( (uint_64)($1 <= *($3)) ){ goto $label$1 }
	*($3) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($1 + [24])
	$7 = *(($1 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4149656938784751616, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $32($1, $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$1), [80])
	*($0 + [4]) = $6
	goto $label$3 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	
.LABEL $label$3
	*($0) = $1
}

void .FUNC $215 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [64])
	*([0] + [4]) = $12
	*(($12 + [28])) = *(($1 + [28]))
	*(($10 = (($12 + [16]) + [8]))) = *(($1 + [24]))
	*($12 + [16]) = *($1 + [16])
	*($12 + [20]) = *(($1 + [20]))
	$6 = *($1 + [11])
	$5 = *($1 + [10])
	$4 = *($1 + [9])
	$3 = *($1 + [8])
	$2 = *($1)
	$9 = *($1 + [48])
	$8 = *($1 + [40])
	$7 = *($1 + [32])
	*((($12 + [32]) + [8])) = *($10)
	*($12 + [32]) = *($12 + [16])
	$1 = *($0 + [4])
	$10 = *($1 + [4])
	$0 = (*(*($0)) + int_32($10 >> [1]))
	$1 = *($1)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$11 = *((($12 + [32]) + [8]))
	*((($12 + [48]) + [8])) = $11
	*(($12 + [8])) = $11
	$11 = *($12 + [32])
	*($12 + [48]) = $11
	*($12) = $11
	CALL void $0((int_32 $2), (int_64 ($3 & [255])), (int_32 ($4 & [255])), (int_32 ($5 & [255])), (int_32 ($6 & [255])), (int_32 $12), (int_32 ($7 & [255])), (int_32 $8), (int_64 ($9 & [255])), (int_32 $1))
	*([0] + [4]) = ($12 + [64])
}

void .FUNC $214 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [32])
	*([0] + [4]) = $3
	*($0) = (int_64)0
	*($0 + [8 align=1]) = [0]
	CALL $57(($0 + [16]), (int_64)0, CALL $7([608]))
	*($0 + [40]) = (int_64)0
	*($0 + [32]) = [0]
	*($0 + [48]) = [0]
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	*($3 + [16]) = $3
	*($3 + [24]) = $0
	CALL $216(($3 + [24]), ($3 + [16]))
	*([0] + [4]) = ($3 + [32])
}

void .FUNC $217 (int_32 $0, int_32 $1)
{
	CALL $118(*($1), (*($0) + [11]))
	$0 = *($0)
	CALL $19(CALL $68(*($1), ($0 + [16])), ($0 + [24]))
	CALL $118(*($1), ($0 + [32]))
	CALL $19(*($1), ($0 + [40]))
	CALL $118(*($1), ($0 + [48]))
}

void .FUNC $216 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	CALL $19(*($1), *($0))
	$0 = *($0)
	CALL $118(*($1), ($0 + [8]))
	CALL $118(*($1), ($0 + [9]))
	CALL $118(*($1), ($0 + [10]))
	*($2 + [8]) = $0
	CALL $217(($2 + [8]), $1)
	*([0] + [4]) = ($2 + [16])
}

int_32 .FUNC $211 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = *($0 + [4])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $237($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $237($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $210 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = *($0 + [4])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $237($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $237($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $198 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$7 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($8 + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [36]) = $1
	*($8 + [32]) = $1
	*($8 + [40]) = ($1 + $3)
	*($8 + [48]) = ($8 + [32])
	*($8 + [56]) = ($8 + [8])
	CALL $221(($8 + [56]), ($8 + [48]))
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$6 = *(($8 + [24]))
	$5 = *(($8 + [16]))
	$4 = *($8 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $4), (int_64 $5), (int_64 $6), (int_64 $7))
	*([0] + [4]) = ($8 + [64])
	return [1]
}

int_32 .FUNC $199 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [64])
	*([0] + [4]) = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	*($3 + [52]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $218(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [48])
	*($3 + [8]) = ($3 + [60])
	CALL $219(($3 + [8]), ($3 + [16]))
	*([0] + [4]) = ($3 + [64])
	return [1]
}

int_32 .FUNC $196 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [128])
	*([0] + [4]) = $2
	*(($3 = $2) + [124]) = $0
	*($3 + [112]) = *($1)
	*($3 + [116]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $223(($3 + [8]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [4]) = ($3 + [112])
	*($3) = ($3 + [124])
	CALL $224($3, ($3 + [8]))
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$6 }
	CALL $237(*(($3 + [48])))
	
.LABEL $label$6
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$7 }
	CALL $237(*(($3 + [36])))
	
.LABEL $label$7
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL $237(*(($3 + [24])))
	
.LABEL $label$8
	*([0] + [4]) = ($3 + [128])
	return [1]
}

int_32 .FUNC $197 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [16])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	CALL $222($7, $5, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7 + [8])
	$3 = *($7)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $6))
	*([0] + [4]) = ($7 + [16])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [656])
	*([0] + [4]) = $4
	*(($4 + [304])) = $0
	*(($4 + [312])) = (int_64)-1
	*(($4 + [320])) = (int_64)0
	*(($4 + [328])) = [0]
	*($4 + [296]) = $0
	*($4 + [288]) = $0
	*(($4 + [332])) = [0]
	*($4 + [336]) = $0
	*(($4 + [344])) = $0
	*(($4 + [352])) = (int_64)-1
	*(($4 + [360])) = [0]
	*(($4 + [364])) = [0]
	*(($4 + [368])) = [0]
	*($4 + [376]) = $0
	*(($4 + [384])) = $0
	*(($4 + [392])) = (int_64)-1
	*(($4 + [400])) = [0]
	*(($4 + [404])) = [0]
	*(($4 + [408])) = [0]
	*($4 + [416]) = $0
	*(($4 + [424])) = $0
	*(($4 + [432])) = (int_64)-1
	*(($4 + [440])) = [0]
	*(($4 + [444])) = [0]
	*(($4 + [448])) = [0]
	*(($4 + [452])) = [0]
	*($4 + [456]) = $0
	*(($4 + [464])) = $0
	*(($4 + [472])) = (int_64)-1
	*(($4 + [480])) = [0]
	*(($4 + [484])) = [0]
	*(($4 + [488])) = [0]
	*($4 + [496]) = $0
	*(($4 + [504])) = $0
	*(($4 + [512])) = (int_64)-1
	*(($4 + [520])) = [0]
	*(($4 + [524])) = [0]
	*(($4 + [528])) = [0]
	*($4 + [536]) = $0
	*(($4 + [544])) = $0
	*(($4 + [552])) = (int_64)-1
	*(($4 + [560])) = [0]
	*(($4 + [564])) = [0]
	*(($4 + [568])) = [0]
	*($4 + [576]) = $0
	*(($4 + [584])) = $0
	*(($4 + [592])) = (int_64)-1
	*(($4 + [600])) = [0]
	*(($4 + [604])) = [0]
	*(($4 + [608])) = [0]
	*(($4 + [612])) = [0]
	$3 = *($4 + [288])
	*($4 + [616]) = $3
	*(($4 + [624])) = $3
	*(($4 + [632])) = (int_64)-1
	*(($4 + [640])) = [0]
	*(($4 + [644])) = [0]
	*(($4 + [648])) = [0]
	if ( ((int_64)$2 > (int_64)4520608123846967295) ){ goto $label$16 }
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)-8523849321785851904) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-4421672816961650688) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)-4157529674626367488) ){ goto $label$1 }
	*($4 + [156]) = [0]
	*($4 + [152]) = [1]
	*($4 + [80 align=4]) = *($4 + [152])
	CALL $198(($4 + [288]), ($4 + [80]))
	goto $label$1 
	
.LABEL $label$16
	if ( ((int_64)$2 > (int_64)5031766162401525759) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)4520608123846967296) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)4520898676772044800) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)4520898676772426928) ){ goto $label$1 }
	*($4 + [188]) = [0]
	*($4 + [184]) = [2]
	*($4 + [48 align=4]) = *($4 + [184])
	CALL $198(($4 + [288]), ($4 + [48]))
	goto $label$1 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-3102794583491215360) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)3626417313458159616) ){ goto $label$1 }
	*($4 + [204]) = [0]
	*($4 + [200]) = [3]
	*($4 + [32 align=4]) = *($4 + [200])
	CALL $196(($4 + [288]), ($4 + [32]))
	goto $label$1 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)5031766162401525760) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)5378185686165749760) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)6604225621579399168) ){ goto $label$1 }
	*($4 + [140]) = [0]
	*($4 + [136]) = [4]
	*($4 + [96 align=4]) = *($4 + [136])
	CALL $201(($4 + [288]), ($4 + [96]))
	goto $label$1 
	
.LABEL $label$13
	*($4 + [124]) = [0]
	*($4 + [120]) = [5]
	*($4 + [112 align=4]) = *($4 + [120])
	CALL $202(($4 + [288]), ($4 + [112]))
	goto $label$1 
	
.LABEL $label$12
	*($4 + [172]) = [0]
	*($4 + [168]) = [6]
	*($4 + [64 align=4]) = *($4 + [168])
	CALL $199(($4 + [288]), ($4 + [64]))
	goto $label$1 
	
.LABEL $label$11
	*($4 + [180]) = [0]
	*($4 + [176]) = [7]
	*($4 + [56 align=4]) = *($4 + [176])
	CALL $197(($4 + [288]), ($4 + [56]))
	goto $label$1 
	
.LABEL $label$10
	*($4 + [196]) = [0]
	*($4 + [192]) = [8]
	*($4 + [40 align=4]) = *($4 + [192])
	CALL $197(($4 + [288]), ($4 + [40]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)CALL $39([496]) != (int_64)$1) ){ goto $label$1 }
	CALL $195(($4 + [240]))
	$2 = *($4 + [240])
	if ( ((int_64)$2 != (int_64)$0) ){ goto $label$5 }
	$0 = *($4 + [248])
	if ( ((int_64)$0 == (int_64)CALL $39([1968])) ){ goto $label$2 }
	if ( ((int_64)$0 > (int_64)6138663590826845887) ){ goto $label$4 }
	if ( ((int_64)$0 == (int_64)6138663588137709568) ){ goto $label$2 }
	if ( ((int_64)$0 == (int_64)6138663590285017088) ){ goto $label$2 }
	if ( ((int_64)$0 == (int_64)6138663590285202592) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$8
	*($4 + [164]) = [0]
	*($4 + [160]) = [9]
	*($4 + [72 align=4]) = *($4 + [160])
	CALL $197(($4 + [288]), ($4 + [72]))
	goto $label$1 
	
.LABEL $label$7
	*($4 + [148]) = [0]
	*($4 + [144]) = [10]
	*($4 + [88 align=4]) = *($4 + [144])
	CALL $200(($4 + [288]), ($4 + [88]))
	goto $label$1 
	
.LABEL $label$6
	*($4 + [132]) = [0]
	*($4 + [128]) = [11]
	*($4 + [104 align=4]) = *($4 + [128])
	CALL $201(($4 + [288]), ($4 + [104]))
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$2 > (int_64)6138663590826845887) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)6138663588137709568) ){ goto $label$2 }
	if ( ((int_64)$2 == (int_64)6138663590285017088) ){ goto $label$2 }
	if ( ((int_64)$2 == (int_64)6138663590285202592) ){ goto $label$2 }
	goto $label$17 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)6138663590826845888) ){ goto $label$2 }
	if ( ((int_64)$2 == (int_64)6138663591134630912) ){ goto $label$2 }
	if ( ((int_64)$2 == (int_64)6138663591592764928) ){ goto $label$2 }
	
.LABEL $label$17
	$0 = *(($4 + [264]))
	*((($4 + [208]) + [8])) = $0
	*((($4 + [16]) + [8])) = $0
	*($4 + [208]) = *($4 + [256])
	*($4 + [16]) = *($4 + [208])
	*($4 + [20]) = *($4 + [212])
	CALL _ZN10eosrockets4game9ledger_inEyN5eosio5assetE(($4 + [288]), $2, ($4 + [16]))
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_64)$0 == (int_64)6138663590826845888) ){ goto $label$2 }
	if ( ((int_64)$0 == (int_64)6138663591134630912) ){ goto $label$2 }
	if ( ((int_64)$0 == (int_64)6138663591592764928) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = *(($4 + [264]))
	*((($4 + [224]) + [8])) = $2
	*(($4 + [8])) = $2
	*($4 + [224]) = *($4 + [256])
	*($4) = *($4 + [224])
	*($4 + [4]) = *($4 + [228])
	CALL _ZN10eosrockets4game10ledger_outEyN5eosio5assetE(($4 + [288]), $0, $4)
	
.LABEL $label$2
	if ( ((*($4 + [272]) & [1]) == 0) ){ goto $label$1 }
	CALL $237(*(($4 + [280])))
	
.LABEL $label$1
	CALL $203(($4 + [640]))
	CALL $204(($4 + [600]))
	CALL $205(($4 + [560]))
	CALL $206(($4 + [520]))
	CALL $207(($4 + [480]))
	CALL $208(($4 + [440]))
	CALL $209(($4 + [400]))
	CALL $210(($4 + [360]))
	CALL $211(($4 + [320]))
	*([0] + [4]) = ($4 + [656])
}

void .FUNC $195 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $230($0, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = $3
}

void .FUNC _ZN10eosrockets4game5clearEv (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL require_auth(*($0))
	$2 = *($0)
	$0 = CALL db_idx64_lowerbound($2, $2, CALL $39([1952]), [0], [0])
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	
.LOOP $label$2:
	$1 = CALL db_next_i64($0, ($3 + [8]))
	CALL db_idx64_remove($0)
	$0 = $1
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC _Z20eosio_system_accounty (int_64 $0)
{
	int_32 $1
	$1 = [1]
	if ( ((int_64)$0 > (int_64)6138663590826845887) ){ goto $label$3 }
	if ( ((int_64)$0 == (int_64)6138663588137709568) ){ goto $label$1 }
	if ( ((int_64)$0 == (int_64)6138663590285017088) ){ goto $label$1 }
	if ( ((int_64)$0 == (int_64)6138663590285202592) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)$0 == (int_64)6138663590826845888) ){ goto $label$1 }
	if ( ((int_64)$0 == (int_64)6138663591134630912) ){ goto $label$1 }
	if ( ((int_64)$0 == (int_64)6138663591592764928) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	return $1
}

void .FUNC $190 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [336])
	$3 = *($1 + [32])
	*($1 + [32]) = (int_64)0
	*(($6 = $5) + [16]) = $3
	*($6 + [24]) = *($1 + [80])
	$3 = *($1)
	CALL eosio_assert([1], [400])
	$4 = CALL $142($1)
	if ( ($4 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($4)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $4)
	CALL $143($6, $1)
	CALL db_update_i64(*($1 + [144]), $2, $5, $4)
	if ( ($4 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$5 = ($6 + [24])
	*($6 + [40]) = *(($1 + [32]))
	if ( (CALL memcmp(($6 + [16]), ($6 + [40]), [8]) == 0) ){ goto $label$5 }
	$4 = *($1 + [148])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$6 }
	$4 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7804307891388678144, ($6 + [32]), $3)
	*(($1 + [148])) = $4
	
.LABEL $label$6
	CALL db_idx64_update($4, $2, ($6 + [40]))
	
.LABEL $label$5
	*($6 + [40]) = *(($1 + [80]))
	if ( (CALL memcmp($5, ($6 + [40]), [8]) == 0) ){ goto $label$7 }
	$5 = ($1 + [152])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7804307891388678143, ($6 + [32]), $3)
	*($5) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($6 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC _ZN10eosrockets4game11score_countERKNSt3__16vectorINS_5entryENS1_9allocatorIS3_EEEEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$5 = [0]
	$3 = *($1)
	$4 = *($1 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$4 = ((int_32)($4 - $3) / (int_32)[24])
	$1 = [0]
	$5 = [0]
	
.LOOP $label$2:
	$6 = *(($3 + ((int_32)$1 * (int_32)[24])) + [16])
	if ( ((uint_64)$6 > (uint_64)$2) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$3 }
	$5 = (($5 & [255]) + [1])
	
.LABEL $label$3
	$1 = (($1 + [1]) & [255])
	if ( ($1 <= $4) ){ goto $label$2 }
	
.LABEL $label$1
	return ($5 & [255])
}