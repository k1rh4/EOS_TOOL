(data (i32.const 8192) "transfer")
(data (i32.const 8200) "string is too long to be a valid name\00")
(data (i32.const 8238) "thirteenth character in name cannot be a letter that comes after j\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8391) "character is not in allowed character set for names\00")
(data (i32.const 8443) "you have no permission\00")
(data (i32.const 8466) "to must be self\00")
(data (i32.const 8482) "EOS\00")
(data (i32.const 8486) "symbol precision mismatch\00")
(data (i32.const 8512) "invalid quantity\00")
(data (i32.const 8529) "must transfer positive quantity\00")
(data (i32.const 8561) "memo has more than 256 bytes\00")
(data (i32.const 8590) "GOS\00")
(data (i32.const 8594) "unable to find key\00")
(data (i32.const 8613) "share bonus\00")
(data (i32.const 8625) "singleton does not exist\00")
(data (i32.const 8650) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8701) "error reading iterator\00")
(data (i32.const 8724) "read\00")
(data (i32.const 8729) "get\00")
(data (i32.const 8733) "string is too long to be a valid symbol_code\00")
(data (i32.const 8778) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8832) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8881) "invalid symbol name\00")
(data (i32.const 8901) "object passed to modify is not in multi_index\00")
(data (i32.const 8947) "cannot modify objects in table of another contract\00")
(data (i32.const 8998) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9057) "write\00")
(data (i32.const 9063) "invalid supply\00")
(data (i32.const 9078) "max-supply must be positive\00")
(data (i32.const 9106) "token with symbol already exists\00")
(data (i32.const 9139) "cannot create objects in table of another contract\00")
(data (i32.const 9190) "token with symbol does not exist, create token before issue\00")
(data (i32.const 9250) "must issue positive quantity\00")
(data (i32.const 9279) "quantity exceeds available supply\00")
(data (i32.const 9313) "attempt to add asset with different symbol\00")
(data (i32.const 9356) "addition underflow\00")
(data (i32.const 9375) "addition overflow\00")
(data (i32.const 9393) "cannot pass end iterator to modify\00")
(data (i32.const 9428) "active")
(data (i32.const 9434) "cannot transfer to self\00")
(data (i32.const 9458) "contract keytoken not enabled!\00")
(data (i32.const 9489) "to account does not exist\00")
(data (i32.const 9515) "account not found\00")
(data (i32.const 9533) "overdrawn balance\00")
(data (i32.const 9551) "attempt to subtract asset with different symbol\00")
(data (i32.const 9599) "subtraction underflow\00")
(data (i32.const 9621) "subtraction overflow\00")
(data (i32.const 9642) "you have no bonus\00")
(data (i32.const 9660) "pick up dividend bonus\00")
(data (i32.const 9683) "eosio.token")
(data (i32.const 9694) "have not  enough  mortgage GOS\00")
(data (i32.const 9725) "must transfer positive quantity 5000000.000 GOS or 10000000.0000 GOS\00")
(data (i32.const 9794) "your are already super node\00")
(data (i32.const 9822) "you have not enough bings\00")
(data (i32.const 9848) "your are not a node\00")
(data (i32.const 9868) "release node must three months later\00")
(data (i32.const 9905) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9957) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10011) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10059) "your are not the owner\00")
(data (i32.const 10082) "have no mortgage GOS\00")
(data (i32.const 10103) "{\"gos\":\00")
(data (i32.const 10111) ",\"eos\":\00")
(data (i32.const 10119) ",\"price\":\00")
(data (i32.const 10129) "}\00")
(data (i32.const 10131) "cannot increment end iterator\00")
(data (i32.const 10161) "GOLD\00")
(data (i32.const 10166) "SILVER\00")
(data (i32.const 10173) "BRONZE\00")
(data (i32.const 10180) "cannot pass end iterator to erase\00")
(data (i32.const 10214) "object passed to erase is not in multi_index\00")
(data (i32.const 10259) "cannot erase objects in table of another contract\00")
(data (i32.const 10309) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10362) "you have not enough stocks\00")
(data (i32.const 10389) "have not enough bing to synthetise\00")
(data (i32.const 10424) "add bancor\00")
(data (i32.const 10435) "1\00")
(data (i32.const 10437) "2\00")
(data (i32.const 10439) "3\00")
(data (i32.const 10441) "type error\00")
(data (i32.const 10452) "METE\00")
(import "env" "eosio_exit" (func $fimport$0 (param i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "is_account" (func $fimport$6 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$7 (param i64)))
(import "env" "has_auth" (func $fimport$8 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "prints" (func $fimport$12 (param i32)))
(import "env" "printui" (func $fimport$13 (param i64)))
(import "env" "printdf" (func $fimport$14 (param f64)))
(import "env" "db_lowerbound_i64" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$18 (result i64)))
(import "env" "db_update_i64" (func $fimport$19 (param i32 i64 i32 i32)))
(import "env" "db_get_i64" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$21))
(import "env" "db_store_i64" (func $fimport$22 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$23 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$25 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$26 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$27 (param i32 i64 i32)))
(import "env" "db_remove_i64" (func $fimport$28 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$29 (param i32)))
(import "env" "memmove" (func $fimport$30 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$31 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$40 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$41 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$42 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$43 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$44 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$46 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$47 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$48 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$49 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$50 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $94))
(export "_Znwj" (func $92))
(export "_Znaj" (func $93))
(export "_ZdaPv" (func $95))
(export "_ZnwjSt11align_val_t" (func $96))
(export "_ZnajSt11align_val_t" (func $97))
(export "_ZdlPvSt11align_val_t" (func $98))
(export "_ZdaPvSt11align_val_t" (func $99))
(table $0 12 12 anyfunc)
(elem (i32.const 1) $3 $5 $6 $8 $10 $12 $14 $16 $18 $19 $20)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18876))
(global $global$2 i32 (i32.const 18876))


void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $113($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $113($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $108(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10460])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $108(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8729])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $91($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [8724])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $104($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $110($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10460])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $110($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8724])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [10214])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [10259])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10309])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [64]))
	$6 = *($1 + [68])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3112182505826942976, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [8901])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8947])
	*($1 + [56]) = [0]
	*($4 + [80]) = *($1 + [8])
	$5 = *($1)
	CALL eosio_assert([1], [8998])
	*($4 + [72]) = ($4 + [57])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [88]) = ($4 + [64])
	$6 = ($1 + [8])
	*($4 + [100]) = $6
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [32])
	*($4 + [112]) = ($1 + [40])
	*($4 + [116]) = ($1 + [48])
	*($4 + [120]) = ($1 + [56])
	CALL $85(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [64]), $2, $4, [57])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = *($6)
	if ( (CALL $106(($4 + [80]), ($4 + [96]), [8]) == 0) ){ goto $label$2 }
	$6 = *($1 + [68])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3112182505826942976, ($4 + [88]), $5)
	*(($1 + [68])) = $6
	
.LABEL $label$3
	CALL db_idx64_update($6, $2, ($4 + [96]))
	
.LABEL $label$2
	$global$0 = ($4 + [128])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [208])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [120]) == (int_32)$0), [8901])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8947])
	$3 = *($3)
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)*($3))
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8998])
	*($4 + [136]) = ($4 + [120])
	*($4 + [132]) = $4
	*($4 + [128]) = $4
	*($4 + [144]) = ($4 + [128])
	*($4 + [156]) = ($1 + [8])
	*($4 + [152]) = $1
	*($4 + [160]) = ($1 + [24])
	*($4 + [164]) = ($1 + [40])
	*($4 + [168]) = ($1 + [48])
	*($4 + [172]) = ($1 + [56])
	*($4 + [176]) = ($1 + [64])
	*($4 + [180]) = ($1 + [72])
	*($4 + [184]) = ($1 + [80])
	*($4 + [188]) = ($1 + [88])
	*($4 + [192]) = ($1 + [96])
	*($4 + [196]) = ($1 + [104])
	*($4 + [200]) = ($1 + [112])
	CALL $73(($4 + [152]), ($4 + [144]))
	CALL db_update_i64(*($1 + [124]), $2, $4, [120])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [208])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$2 = *(($1 + [28]))
	if ( ((int_32)$2 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$1), [8650])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4057297652813922304, (int_64)-4057297652813922304)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $54($1, $3)
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$1), [8650])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [8625])
	$4 = *(($2 + [8]))
	$5 = *(($2 + [16]))
	$6 = *(($2 + [24]))
	$7 = *(($2 + [32]))
	$8 = *($2)
	*(($0 + [44])) = (int_64)0
	*(($0 + [32])) = $7
	*(($0 + [24])) = $6
	*(($0 + [16])) = $5
	*(($0 + [8])) = $4
	*($0) = $8
	*($0 + [40]) = [0]
	$1 = (*(($2 + [44])) - *($2 + [40]))
	if ( ($1 == 0) ){ goto $label$4 }
	$3 = int_32($1 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$3 }
	$1 = CALL _Znwj($1)
	*(($0 + [40])) = $1
	*(($0 + [48])) = ($1 + ($3 << [3]))
	*(($0 = ($0 + [44]))) = $1
	$3 = *(($2 + [40]))
	$2 = (*(($2 + [44])) - $3)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($1, $3, $2)
	*($0) = (*($0) + $2)
	
.LABEL $label$4
	return (unreachable)
	
.LABEL $label$3
	CALL $104(($0 + [40]))
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [208])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [120]) == (int_32)$0), [8901])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8947])
	*($1 + [96]) = *(*($3))
	$5 = *($1)
	*($1 + [104]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8998])
	*($4 + [136]) = ($4 + [120])
	*($4 + [132]) = $4
	*($4 + [128]) = $4
	*($4 + [144]) = ($4 + [128])
	*($4 + [156]) = ($1 + [8])
	*($4 + [152]) = $1
	*($4 + [160]) = ($1 + [24])
	*($4 + [164]) = ($1 + [40])
	*($4 + [168]) = ($1 + [48])
	*($4 + [172]) = ($1 + [56])
	*($4 + [176]) = ($1 + [64])
	*($4 + [180]) = ($1 + [72])
	*($4 + [184]) = ($1 + [80])
	*($4 + [188]) = ($1 + [88])
	*($4 + [192]) = ($1 + [96])
	*($4 + [196]) = ($1 + [104])
	*($4 + [200]) = ($1 + [112])
	CALL $73(($4 + [152]), ($4 + [144]))
	CALL db_update_i64(*($1 + [124]), $2, $4, [120])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [208])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$18()), [9139])
	$5 = CALL _Znwj([72])
	$6 = CALL $83($5)
	*($5 + [60]) = $1
	CALL $84($3, $6)
	*($4 + [80]) = ($4 + [57])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	$3 = ($5 + [8])
	*($4 + [100]) = $3
	*($4 + [96]) = $5
	*($4 + [104]) = ($5 + [16])
	*($4 + [108]) = ($5 + [32])
	*($4 + [112]) = ($5 + [40])
	*($4 + [116]) = ($5 + [48])
	*($4 + [120]) = ($5 + [56])
	CALL $85(($4 + [96]), ($4 + [88]))
	$7 = *($5)
	*($5 + [64]) = CALL db_store_i64(*($1 + [8]), (int_64)-3112182505826942976, $2, $7, $4, [57])
	if ( (uint_64)($7 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$7 = *(($1 + [8]))
	$8 = *($5)
	*($4 + [96]) = *($3)
	*($5 + [68]) = CALL db_idx64_store($7, (int_64)-3112182505826942976, $2, $8, ($4 + [96]))
	*($4 + [96]) = $5
	$2 = *($5)
	*($4) = $2
	$6 = *(($5 + [64]))
	*($4 + [72]) = $6
	$9 = ($1 + [28])
	$3 = *($9)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($4 + [96]) = [0]
	*($3) = $5
	*($9) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $86(($1 + [24]), ($4 + [96]), $4, ($4 + [72]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [128])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8701])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $110($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([72])
	CALL $83($5)
	*($5 + [60]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	CALL $88(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = [-1]
	*($5 + [64]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $86(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $113($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [192])
	$global$0 = $2
	*(($2 + [8])) = *(($1 + [24]))
	*(($2 + [16])) = *(($1 + [32]))
	*(($2 + [24])) = *(($1 + [40]))
	*(($2 + [32])) = *(($1 + [48]))
	*(($2 + [40])) = *(($1 + [56]))
	*(($2 + [48])) = *(($1 + [64]))
	*(($2 + [56])) = *(($1 + [72]))
	*($2) = *($1 + [16])
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = [0]
	*(($2 + [72])) = [0]
	*($2 + [64]) = (int_64)0
	$6 = (*(($1 + [84])) - *(($1 + [80])))
	if ( ($6 == 0) ){ goto $label$6 }
	$5 = int_32($6 >> [3])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$2 }
	$6 = CALL _Znwj($6)
	*(($2 + [64])) = $6
	*(($7 = ($2 + [68]))) = $6
	*(($2 + [72])) = ($6 + ($5 << [3]))
	$8 = *(($1 + [80]))
	$5 = (*(($1 + [84])) - $8)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($6, $8, $5)
	$5 = ($6 + $5)
	*($7) = $5
	goto $label$4 
	
.LABEL $label$6
	$6 = [0]
	$9 = [0]
	$8 = [0]
	goto $label$3 
	
.LABEL $label$5
	$5 = $6
	
.LABEL $label$4
	$9 = $6
	$8 = $6
	
.LABEL $label$3
	*(($2 + [88])) = *(($1 + [104]))
	*($2 + [80]) = *(($1 + [96]))
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$7 = (*($0) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($7) + $1))
	
.LABEL $label$7
	*((($2 + [96]) + [56])) = *(($2 + [56]))
	*((($2 + [96]) + [48])) = *(($2 + [48]))
	*((($2 + [96]) + [40])) = *(($2 + [40]))
	*((($2 + [96]) + [32])) = *(($2 + [32]))
	*((($2 + [96]) + [24])) = *(($2 + [24]))
	*((($2 + [96]) + [16])) = *(($2 + [16]))
	*((($2 + [96]) + [8])) = *(($2 + [8]))
	*($2 + [96]) = *($2)
	*($2 + [160]) = (int_64)0
	*(($2 + [168])) = [0]
	$0 = ($5 - $8)
	if ( ($0 == 0) ){ goto $label$8 }
	$8 = int_32($0 >> [3])
	if ( ((uint_32)$8 >= (uint_32)[536870912]) ){ goto $label$1 }
	$0 = CALL _Znwj($0)
	*(($2 + [160])) = $0
	*(($10 = ($2 + [164]))) = $0
	*(($2 + [168])) = ($0 + ($8 << [3]))
	$5 = ($5 - $9)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($0, $6, $5)
	*($10) = ($0 + $5)
	
.LABEL $label$8
	$6 = ($2 + [80])
	*(($2 + [184])) = *(($6 + [8]))
	*($2 + [176]) = *($6)
	CALL void $7((int_32 $4), (int_64 $3), (int_64 ($2 + [96])), (int_32 $1))
	$1 = *($2 + [160])
	if ( ($1 == 0) ){ goto $label$9 }
	*(($2 + [164])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2 + [64])
	if ( ($1 == 0) ){ goto $label$10 }
	*(($2 + [68])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [192])
	return (unreachable)
	
.LABEL $label$2
	CALL $104(($2 + [64]))
	
.LABEL $label$1
	CALL $104(($2 + [160]))
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8724])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8724])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8724])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $90(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($4, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8901])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8947])
	*($1 + [64]) = *(*($3))
	$5 = *($1 + [8])
	CALL eosio_assert([1], [8998])
	*($4 + [120]) = ($4 + [104])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	*($4 + [128]) = ($4 + [112])
	*($4 + [140]) = ($1 + [16])
	*($4 + [136]) = $1
	*($4 + [144]) = ($1 + [32])
	*($4 + [148]) = ($1 + [48])
	*($4 + [152]) = ($1 + [56])
	*($4 + [156]) = ($1 + [64])
	*($4 + [160]) = ($1 + [72])
	*($4 + [164]) = ($1 + [80])
	*($4 + [168]) = ($1 + [88])
	*($4 + [172]) = ($1 + [96])
	CALL $53(($4 + [136]), ($4 + [128]))
	CALL db_update_i64(*($1 + [108]), $2, $4, [104])
	$2 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [176])
}

void .FUNC $8 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = CALL $107([8590])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8733])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8589]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)0
	
.LABEL $label$1
	*((($2 + [224]) + [32])) = [0]
	*($2 + [240]) = (int_64)-1
	*($2 + [248]) = (int_64)0
	*($2 + [224]) = *($0)
	*($2 + [232]) = $4
	$3 = CALL $25(($2 + [224]), $4, [8594])
	*((($2 + [184]) + [32])) = [0]
	*($2 + [200]) = (int_64)-1
	*($2 + [208]) = (int_64)0
	*($2 + [184]) = *($3 + [96])
	*($2 + [192]) = *($0)
	CALL $42(($2 + [128]), ($2 + [184]))
	CALL eosio_assert(CALL $fimport$8(*($2 + [136])), [10059])
	*((($2 + [88]) + [32])) = [0]
	*($2 + [104]) = (int_64)-1
	*($2 + [112]) = (int_64)0
	*($2 + [124]) = [0]
	$4 = *($0)
	*($2 + [88]) = $4
	*($2 + [96]) = $4
	$4 = CALL current_time()
	$6 = *($3 + [80])
	$7 = CALL current_time()
	*($2 + [80]) = [8831]
	*($2 + [84]) = CALL $107([8831])
	*($2 + [40]) = *($2 + [80])
	$8 = *(CALL $2(($2 + [264]), ($2 + [40])))
	$3 = CALL db_lowerbound_i64(*($2 + [88]), *($2 + [96]), (int_64)-3112182505826942976, (int_64)0)
	$4 = (int_64))(((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295) - $6)
	$9 = ((uint_64)$7 / (uint_64)(int_64)1000000)
	if ( ((int_64)$8 != (int_64)$1) ){ goto $label$11 }
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$3 = CALL $47(($2 + [88]), $3)
	if ( ((uint_64)*($3 + [32]) > (uint_64)$4) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$12 }
	$3 = CALL $47(($2 + [88]), $3)
	if ( ((uint_64)*($3 + [32]) <= (uint_64)$4) ){ goto $label$13 }
	$10 = [1]
	goto $label$7 
	
.LABEL $label$13
	$10 = [0]
	goto $label$7 
	
.LABEL $label$12
	$10 = [3]
	goto $label$7 
	
.LABEL $label$10
	$10 = [38]
	goto $label$7 
	
.LABEL $label$9
	$10 = [37]
	goto $label$7 
	
.LABEL $label$8
	$10 = [40]
	
.LABEL $label$7
	
.LOOP $label$14:
	goto $label$83 
	
.LABEL $label$98
	$3 = CALL $47(($2 + [88]), $3)
	if ( ((uint_64)*($3 + [32]) > (uint_64)$4) ){ goto $label$20 }
	$10 = [37]
	goto $label$14 
	
.LABEL $label$97
	if ( ((int_32)*($3 + [56]) != (int_32)[1]) ){ goto $label$47 }
	$10 = [50]
	goto $label$14 
	
.LABEL $label$96
	CALL eosio_assert([1], [9393])
	CALL $48(($2 + [88]), $3, (int_64)0, ($2 + [264]))
	$6 = *($3 + [8])
	*(($5 = (($2 + [48]) + [8]))) = *(($3 + [24]))
	$7 = *($0)
	$1 = *($3 + [16])
	*((($2 + [8]) + [8])) = *($5)
	*($2 + [8]) = $1
	*($2 + [48]) = $1
	CALL $33($0, $6, ($2 + [8]), $7, (int_64)1, [1])
	$10 = [38]
	goto $label$14 
	
.LABEL $label$95
	CALL eosio_assert([1], [10131])
	$3 = CALL db_next_i64(*($3 + [64]), ($2 + [264]))
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$19 }
	$10 = [40]
	goto $label$14 
	
.LABEL $label$94
	$3 = CALL db_lowerbound_i64(*($2 + [88]), *(($2 + [96])), (int_64)-3112182505826942976, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$42 }
	$10 = [41]
	goto $label$14 
	
.LABEL $label$93
	$4 = ((int_64)((int_64)$9 + (int_64)4294535296) & (int_64)4294967295)
	$3 = CALL $47(($2 + [88]), $3)
	$10 = [42]
	goto $label$14 
	
.LABEL $label$92
	if ( *($3 + [56]) ){ goto $label$18 }
	$10 = [46]
	goto $label$14 
	
.LABEL $label$91
	if ( ((uint_64)*($3 + [32]) >= (uint_64)$4) ){ goto $label$17 }
	$10 = [47]
	goto $label$14 
	
.LABEL $label$90
	$5 = [0]
	$0 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($0, [10180])
	CALL eosio_assert($0, [10131])
	$0 = CALL db_next_i64(*($3 + [64]), ($2 + [264]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$15 }
	$10 = [48]
	goto $label$14 
	
.LABEL $label$89
	$5 = CALL $47(($2 + [88]), $0)
	$10 = [49]
	goto $label$14 
	
.LABEL $label$88
	CALL $49(($2 + [88]), $3)
	$3 = $5
	if ( $5 ){ goto $label$40 }
	goto $label$41 
	
.LABEL $label$87
	CALL eosio_assert([1], [10131])
	$5 = *($3 + [64])
	$3 = [0]
	$5 = CALL db_next_i64($5, ($2 + [264]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$16 }
	$10 = [44]
	goto $label$14 
	
.LABEL $label$86
	$3 = CALL $47(($2 + [88]), $5)
	$10 = [45]
	goto $label$14 
	
.LABEL $label$85
	if ( $3 ){ goto $label$38 }
	goto $label$39 
	
.LABEL $label$84
	$3 = CALL $47(($2 + [88]), $3)
	if ( ((uint_64)*($3 + [32]) > (uint_64)$4) ){ goto $label$44 }
	$10 = [0]
	goto $label$14 
	
.LABEL $label$83
	if ( ((int_32)*($3 + [56]) != (int_32)[1]) ){ goto $label$45 }
	$10 = [35]
	goto $label$14 
	
.LABEL $label$82
	if ( ((int_64)*($3 + [8]) != (int_64)$1) ){ goto $label$46 }
	$10 = [36]
	goto $label$14 
	
.LABEL $label$81
	CALL eosio_assert([1], [9393])
	CALL $50(($2 + [88]), $3, (int_64)0, ($2 + [264]))
	$6 = *(($3 + [8]))
	*(($5 = (($2 + [64]) + [8]))) = *(($3 + [24]))
	$7 = *($0)
	$8 = *($3 + [16])
	*((($2 + [24]) + [8])) = *($5)
	*($2 + [64]) = $8
	*($2 + [24]) = *($2 + [64])
	CALL $33($0, $6, ($2 + [24]), $7, (int_64)1, [1])
	$10 = [1]
	goto $label$14 
	
.LABEL $label$80
	CALL eosio_assert([1], [10131])
	$3 = CALL db_next_i64(*($3 + [64]), ($2 + [264]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$43 }
	$10 = [3]
	goto $label$14 
	
.LABEL $label$79
	$0 = *($2 + [112])
	if ( ($0 == 0) ){ goto $label$37 }
	$10 = [4]
	goto $label$14 
	
.LABEL $label$78
	$11 = ($2 + [116])
	$3 = *($11)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$36 }
	$10 = [5]
	goto $label$14 
	
.LABEL $label$77
	$10 = [6]
	goto $label$14 
	
.LABEL $label$76
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$34 }
	$10 = [7]
	goto $label$14 
	
.LABEL $label$75
	CALL _ZdlPv($5)
	$10 = [8]
	goto $label$14 
	
.LABEL $label$74
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$35 }
	$10 = [9]
	goto $label$14 
	
.LABEL $label$73
	$3 = *(($2 + [112]))
	goto $label$33 
	
.LABEL $label$72
	$3 = $0
	$10 = [10]
	goto $label$14 
	
.LABEL $label$71
	*($11) = $0
	CALL _ZdlPv($3)
	$10 = [11]
	goto $label$14 
	
.LABEL $label$70
	$3 = *($2 + [168])
	if ( ($3 == 0) ){ goto $label$32 }
	$10 = [12]
	goto $label$14 
	
.LABEL $label$69
	*(($2 + [172])) = $3
	CALL _ZdlPv($3)
	$10 = [13]
	goto $label$14 
	
.LABEL $label$68
	$11 = *($2 + [208])
	if ( ($11 == 0) ){ goto $label$31 }
	$10 = [14]
	goto $label$14 
	
.LABEL $label$67
	$12 = ($2 + [212])
	$3 = *($12)
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$30 }
	$10 = [15]
	goto $label$14 
	
.LABEL $label$66
	$10 = [16]
	goto $label$14 
	
.LABEL $label$65
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$28 }
	$10 = [17]
	goto $label$14 
	
.LABEL $label$64
	$0 = *($5 + [40])
	if ( ($0 == 0) ){ goto $label$27 }
	$10 = [18]
	goto $label$14 
	
.LABEL $label$63
	*(($5 + [44])) = $0
	CALL _ZdlPv($0)
	$10 = [19]
	goto $label$14 
	
.LABEL $label$62
	CALL _ZdlPv($5)
	$10 = [20]
	goto $label$14 
	
.LABEL $label$61
	if ( ((int_32)$11 != (int_32)$3) ){ goto $label$29 }
	$10 = [21]
	goto $label$14 
	
.LABEL $label$60
	$3 = *(($2 + [208]))
	goto $label$26 
	
.LABEL $label$59
	$3 = $11
	$10 = [22]
	goto $label$14 
	
.LABEL $label$58
	*($12) = $11
	CALL _ZdlPv($3)
	$10 = [23]
	goto $label$14 
	
.LABEL $label$57
	$0 = *($2 + [248])
	if ( ($0 == 0) ){ goto $label$25 }
	$10 = [24]
	goto $label$14 
	
.LABEL $label$56
	$11 = ($2 + [252])
	$3 = *($11)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$24 }
	$10 = [25]
	goto $label$14 
	
.LABEL $label$55
	$10 = [26]
	goto $label$14 
	
.LABEL $label$54
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	$10 = [27]
	goto $label$14 
	
.LABEL $label$53
	CALL _ZdlPv($5)
	$10 = [28]
	goto $label$14 
	
.LABEL $label$52
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$23 }
	$10 = [29]
	goto $label$14 
	
.LABEL $label$51
	$3 = *(($2 + [248]))
	goto $label$21 
	
.LABEL $label$50
	$3 = $0
	$10 = [30]
	goto $label$14 
	
.LABEL $label$49
	*($11) = $0
	CALL _ZdlPv($3)
	$10 = [31]
	goto $label$14 
	
.LABEL $label$48
	$global$0 = ($2 + [272])
	return 
	
.LABEL $label$47
	$10 = [38]
	goto $label$14 
	
.LABEL $label$46
	$10 = [1]
	goto $label$14 
	
.LABEL $label$45
	$10 = [1]
	goto $label$14 
	
.LABEL $label$44
	$10 = [1]
	goto $label$14 
	
.LABEL $label$43
	$10 = [2]
	goto $label$14 
	
.LABEL $label$42
	$10 = [3]
	goto $label$14 
	
.LABEL $label$41
	$10 = [3]
	goto $label$14 
	
.LABEL $label$40
	$10 = [42]
	goto $label$14 
	
.LABEL $label$39
	$10 = [3]
	goto $label$14 
	
.LABEL $label$38
	$10 = [42]
	goto $label$14 
	
.LABEL $label$37
	$10 = [11]
	goto $label$14 
	
.LABEL $label$36
	$10 = [34]
	goto $label$14 
	
.LABEL $label$35
	$10 = [6]
	goto $label$14 
	
.LABEL $label$34
	$10 = [8]
	goto $label$14 
	
.LABEL $label$33
	$10 = [10]
	goto $label$14 
	
.LABEL $label$32
	$10 = [13]
	goto $label$14 
	
.LABEL $label$31
	$10 = [23]
	goto $label$14 
	
.LABEL $label$30
	$10 = [33]
	goto $label$14 
	
.LABEL $label$29
	$10 = [16]
	goto $label$14 
	
.LABEL $label$28
	$10 = [20]
	goto $label$14 
	
.LABEL $label$27
	$10 = [19]
	goto $label$14 
	
.LABEL $label$26
	$10 = [22]
	goto $label$14 
	
.LABEL $label$25
	$10 = [31]
	goto $label$14 
	
.LABEL $label$24
	$10 = [32]
	goto $label$14 
	
.LABEL $label$23
	$10 = [26]
	goto $label$14 
	
.LABEL $label$22
	$10 = [28]
	goto $label$14 
	
.LABEL $label$21
	$10 = [30]
	goto $label$14 
	
.LABEL $label$20
	$10 = [38]
	goto $label$14 
	
.LABEL $label$19
	$10 = [39]
	goto $label$14 
	
.LABEL $label$18
	$10 = [43]
	goto $label$14 
	
.LABEL $label$17
	$10 = [43]
	goto $label$14 
	
.LABEL $label$16
	$10 = [45]
	goto $label$14 
	
.LABEL $label$15
	$10 = [49]
	goto $label$14 
	$10
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [96])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $110($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [88]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8724])
	CALL memcpy(($4 + [88]), $2, [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	CALL $22(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $113($2)
	
.LABEL $label$6
	$global$0 = ($4 + [96])
	return [1]
}

void .FUNC $6 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [112])
	$global$0 = $6
	*($6 + [96]) = $3
	*($6 + [104]) = $1
	*($6 + [88]) = $4
	*($6 + [80]) = $5
	CALL require_auth(*($0))
	$7 = [0]
	$1 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$5 = $1)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $4
	$8 = [1]
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $4
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [8881])
	$8 = [0]
	$3 = *($2)
	if ( ((uint_64)((int_64)$3 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$7 = [0]
	$5 = $1
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$5 = $4
	$8 = [1]
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$5 = $4
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$10 }
	$8 = [1]
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [9063])
	CALL eosio_assert(((int_64)$3 > (int_64)0), [9078])
	*(($6 + [72])) = [0]
	*($6 + [56]) = (int_64)-1
	*($6 + [64]) = (int_64)0
	$5 = *($0)
	*($6 + [40]) = $5
	*($6 + [48]) = $1
	$7 = CALL db_find_i64($5, $1, (int_64)-4157508551318700032, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $28(($6 + [40]), $7) + [104]) == (int_32)($6 + [40])), [8650])
	$7 = [0]
	goto $label$11 
	
.LABEL $label$12
	$7 = [1]
	
.LABEL $label$11
	CALL eosio_assert($7, [9106])
	$5 = *($0)
	*($6 + [16]) = $2
	*($6 + [20]) = ($6 + [80])
	*($6 + [24]) = ($6 + [88])
	*($6 + [28]) = ($6 + [104])
	*($6 + [32]) = ($6 + [96])
	CALL $29(($6 + [8]), ($6 + [40]), $5, ($6 + [16]))
	$9 = *($6 + [64])
	if ( ($9 == 0) ){ goto $label$13 }
	$2 = ($6 + [68])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$15 }
	
.LOOP $label$16:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$17 }
	CALL _ZdlPv($8)
	
.LABEL $label$17
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$16 }
	$7 = *(($6 + [64]))
	goto $label$14 
	
.LABEL $label$15
	$7 = $9
	
.LABEL $label$14
	*($2) = $9
	CALL _ZdlPv($7)
	
.LABEL $label$13
	$global$0 = ($6 + [112])
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $110($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [128]))) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $7)
	*($4 + [192]) = ($4 + [96])
	*($4 + [48]) = ($4 + [112])
	CALL $27(($4 + [48]), ($4 + [192]))
	$8 = *($4 + [104])
	*((($4 + [32]) + [8])) = $8
	*((($4 + [16]) + [8])) = $8
	$9 = *($4 + [96])
	*($4 + [16]) = $9
	*($4 + [32]) = $9
	CALL $22(($4 + [48]), $0, $1, ($4 + [16]))
	*(($8 = (($4 + [160]) + [8]))) = *($3)
	*($4 + [160]) = *($4 + [120])
	$0 = *($4 + [112])
	$1 = *($4 + [136])
	$9 = *($4 + [144])
	$10 = *($4 + [152])
	*((($4 + [176]) + [8])) = *($8)
	*($4 + [176]) = *($4 + [160])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$11 = *((($4 + [176]) + [8]))
	*((($4 + [192]) + [8])) = $11
	*(($4 + [8])) = $11
	$11 = *($4 + [176])
	*($4) = $11
	*($4 + [192]) = $11
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $1), (int_64 $9), (int_64 $10), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $113($2)
	
.LABEL $label$6
	$global$0 = ($4 + [208])
	return [1]
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $110($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [128])) = (int_64)0
	*(($4 + [144])) = [0]
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $5)
	*($4 + [16]) = ($4 + [88])
	*($4 + [40]) = ($4 + [104])
	CALL $21(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [96])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [88])
	*($4) = $6
	*($4 + [24]) = $6
	*($4 + [16]) = CALL $22(($4 + [40]), $0, $1, $4)
	*($4 + [20]) = ($4 + [152])
	CALL $23(($4 + [16]), ($4 + [104]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [136]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $113($2)
	$2 = [1]
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [144])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [9434])
	CALL require_auth($1)
	CALL eosio_assert(CALL $31($0), [9458])
	CALL eosio_assert(CALL $fimport$6($2), [9489])
	$6 = *($3 + [8])
	$7 = [0]
	*(($5 + [104])) = [0]
	$8 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [80]) = $8)
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($0)
	$9 = CALL $25(($5 + [72]), $8, [8594])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$10 = *($3)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$11 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $12
	$7 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8512])
	CALL eosio_assert(((int_64)$10 > (int_64)0), [8529])
	CALL eosio_assert(((int_64)$6 == (int_64)*($9 + [8])), [8486])
	$11 = *($4)
	if ( ($11 & [1]) ){ goto $label$7 }
	$11 = uint_32($11 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$11 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($11 <= [257]), [8561])
	$11 = CALL has_auth($2)
	$7 = ($3 + [8])
	$12 = *($7)
	*((($5 + [56]) + [8])) = $12
	$8 = *($3)
	*((($5 + [24]) + [8])) = $12
	*($5 + [24]) = $8
	*($5 + [56]) = $8
	CALL $32($0, $1, ($5 + [24]), (int_64)1)
	$12 = *($7)
	*((($5 + [40]) + [8])) = $12
	$8 = *($3)
	*((($5 + [8]) + [8])) = $12
	*($5 + [8]) = $8
	*($5 + [40]) = $8
	CALL $33($0, $2, ($5 + [8]), ( $2 ? $1 : $11 ), (int_64)1, [0])
	$13 = *($5 + [96])
	if ( ($13 == 0) ){ goto $label$8 }
	$3 = ($5 + [100])
	$11 = *($3)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$10 }
	
.LOOP $label$11:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$11 }
	$11 = *(($5 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$11 = $13
	
.LABEL $label$9
	*($3) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$8
	$global$0 = ($5 + [112])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8200])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8391])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8238])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8391])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$5 = ($global$0 - [64])
	$global$0 = $5
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert(CALL $24($0, $1), [8443])
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [8466])
	$6 = CALL $107([8482])
	if ( ($6 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8733])
	goto $label$4 
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = (int_64)0
	
.LOOP $label$6:
	$7 = *(($6 + [8481]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$7
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$6 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$2 
	
.LABEL $label$3
	$1 = (int_64)4
	
.LABEL $label$2
	$2 = *($3 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)$1), [8486])
	$7 = [0]
	$8 = *($3)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$8 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$1 = $2
	$7 = [1]
	$3 = $6
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$1 = $2
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$3 = ($6 + [1])
	$6 = $3
	if ( $7 ){ goto $label$12 }
	$7 = [1]
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [8512])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8529])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$14 }
	$6 = uint_32($6 >> [1])
	goto $label$13 
	
.LABEL $label$14
	$6 = *($4 + [4])
	
.LABEL $label$13
	CALL eosio_assert(($6 <= [257]), [8561])
	$6 = CALL $107([8590])
	if ( ($6 <= [8]) ){ goto $label$18 }
	CALL eosio_assert([0], [8733])
	goto $label$17 
	
.LABEL $label$18
	if ( ($6 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	$1 = (int_64)0
	
.LOOP $label$19:
	$7 = *(($6 + [8589]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$20 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$20
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$19 }
	$1 = ((int_64)$1 & (int_64)72057594037927935)
	goto $label$15 
	
.LABEL $label$16
	$1 = (int_64)0
	
.LABEL $label$15
	*(($5 + [56])) = [0]
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	*($5 + [24]) = *($0)
	*($5 + [32]) = $1
	$6 = CALL $25(($5 + [24]), $1, [8594])
	*($5 + [16]) = ((int_64)$8 * (int_64)10000)
	*($5 + [8]) = ($5 + [16])
	CALL $26(($5 + [24]), $6, (int_64)0, ($5 + [8]))
	$6 = *($4)
	$7 = CALL $107([8613])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$21 }
	if ( CALL $103($4, [0], [-1], [8613], $7) ){ goto $label$21 }
	CALL $19($0, *($0))
	
.LABEL $label$21
	$3 = *($5 + [48])
	if ( ($3 == 0) ){ goto $label$1 }
	$0 = ($5 + [52])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$23 }
	
.LOOP $label$24:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$25 }
	CALL _ZdlPv($7)
	
.LABEL $label$25
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$24 }
	$6 = *(($5 + [48]))
	goto $label$22 
	
.LABEL $label$23
	$6 = $3
	
.LABEL $label$22
	*($0) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$global$0 = ($5 + [64])
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL memory()
	*($3 + [196]) = [8]
	*($3 + [192]) = [8192]
	*($3 + [96]) = *($3 + [192])
	CALL $2(($3 + [200]), ($3 + [96]))
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [1]
	*($3 + [88]) = *($3 + [184])
	CALL $4($0, $1, ($3 + [88]))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$8 }
	if ( ((int_64)$2 > (int_64)-2039333636196532225) ){ goto $label$11 }
	if ( ((int_64)$2 <= (int_64)-5858242886738378753) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-5858242886738378752) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4060110877083140096) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$8 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [2]
	*($3 + [24]) = *($3 + [160])
	CALL $4($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	if ( ((int_64)$2 <= (int_64)4455300738536439807) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)4455300738536439808) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)8516769789752901632) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$8 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [3]
	*($3 + [8]) = *($3 + [176])
	CALL $7($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)-8272103852073811968) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-6434946278924222464) ){ goto $label$8 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [4]
	*($3 + [64]) = *($3 + [120])
	CALL $9($1, $1, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)3626087424883949568) ){ goto $label$8 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [5]
	*($3 + [56]) = *($3 + [128])
	CALL $11($1, $1, ($3 + [56]))
	
.LABEL $label$8
	CALL eosio_exit([0])
	
.LABEL $label$7
	*($3 + [148]) = [0]
	*($3 + [144]) = [6]
	*($3 + [40]) = *($3 + [144])
	CALL $13($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [116]) = [0]
	*($3 + [112]) = [7]
	*($3 + [72]) = *($3 + [112])
	CALL $15($1, $1, ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [108]) = [0]
	*($3 + [104]) = [8]
	*($3 + [80]) = *($3 + [104])
	CALL $17($1, $1, ($3 + [80]))
	CALL eosio_exit([0])
	
.LABEL $label$4
	*($3 + [172]) = [0]
	*($3 + [168]) = [9]
	*($3 + [16]) = *($3 + [168])
	CALL $4($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$3
	*($3 + [140]) = [0]
	*($3 + [136]) = [10]
	*($3 + [48]) = *($3 + [136])
	CALL $9($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$2
	*($3 + [156]) = [0]
	*($3 + [152]) = [11]
	*($3 + [32]) = *($3 + [152])
	CALL $9($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $14 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	float_64 $14
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL require_auth($1)
	CALL eosio_assert(CALL $31($0), [9458])
	$4 = CALL $107([8590])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8733])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [8589]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LABEL $label$1
	$6 = [0]
	*(($3 + [216])) = [0]
	*($3 + [200]) = (int_64)-1
	*($3 + [208]) = (int_64)0
	$7 = *($0)
	*($3 + [184]) = $7
	*($3 + [192]) = $5
	$8 = [0]
	$4 = CALL db_find_i64($7, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $28(($3 + [184]), $4)
	CALL eosio_assert(((int_32)*($8 + [104]) == (int_32)($3 + [184])), [8650])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9190])
	$9 = *($2 + [8])
	$10 = *($2)
	$11 = ((int_64)$10 + (int_64)4611686018427387903)
	if ( ((uint_64)$11 > (uint_64)(int_64)9223372036854775806) ){ goto $label$8 }
	$5 = (uint_64)$9 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$5 = $7
	$6 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$5 = $7
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $6 ){ goto $label$12 }
	$6 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [8512])
	CALL eosio_assert(((int_64)$10 > (int_64)0), [8529])
	CALL eosio_assert(((int_64)$9 == (int_64)*($8 + [8])), [8486])
	$6 = [0]
	*(($3 + [176])) = [0]
	*($3 + [160]) = (int_64)-1
	*($3 + [168]) = (int_64)0
	$5 = *($0)
	*($3 + [144]) = $5
	*($3 + [152]) = $5
	$4 = [0]
	$12 = CALL db_find_i64($5, $5, (int_64)3607749779137757184, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL $34(($3 + [144]), $12)
	CALL eosio_assert(((int_32)*($4 + [120]) == (int_32)($3 + [144])), [8650])
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9515])
	$13 = ((int_64)$10 * (int_64)3)
	$9 = ((int_64)$10 << (int_64)1)
	if ( (uint_64)(*($4 + [64]) <= $10) ){ goto $label$14 }
	if ( (uint_64)(*($4 + [72]) <= $9) ){ goto $label$14 }
	$6 = ((uint_64)*($4 + [80]) >= (uint_64)$13)
	
.LABEL $label$14
	CALL eosio_assert($6, [10362])
	*($3 + [128]) = $10
	*($3 + [136]) = *($0 + [40])
	CALL eosio_assert((uint_64)($11 <= (int_64)9223372036854775807), [8832])
	$5 = (uint_64)*($3 + [136]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$5 = $7
	$6 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$5 = $7
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $6 ){ goto $label$19 }
	$6 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$6 = [0]
	
.LABEL $label$15
	CALL eosio_assert($6, [8881])
	*((($3 + [48]) + [8])) = *((($3 + [128]) + [8]))
	*($3 + [48]) = *($3 + [128])
	CALL $32($0, $1, ($3 + [48]), (int_64)5)
	*($3 + [120]) = *(($0 + [40]))
	*($3 + [112]) = $9
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8832])
	$5 = (uint_64)*($3 + [120]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$5 = $7
	$6 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$5 = $7
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $6 ){ goto $label$24 }
	$6 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$6 = [0]
	
.LABEL $label$20
	CALL eosio_assert($6, [8881])
	*((($3 + [32]) + [8])) = *((($3 + [112]) + [8]))
	*($3 + [32]) = *($3 + [112])
	CALL $32($0, $1, ($3 + [32]), (int_64)6)
	$5 = *(($0 + [40]))
	*($3 + [104]) = $5
	*($3 + [96]) = $13
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8832])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$5 = $7
	$6 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$5 = $7
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $6 ){ goto $label$29 }
	$6 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$6 = [0]
	
.LABEL $label$25
	CALL eosio_assert($6, [8881])
	*((($3 + [16]) + [8])) = *((($3 + [96]) + [8]))
	*($3 + [16]) = *($3 + [96])
	CALL $32($0, $1, ($3 + [16]), (int_64)7)
	$5 = ((int_64)*($8 + [32]) + (int_64)$10)
	$14 = ((float_64)(CASTING float_64)(int_64 *($8 + [16])) * (float_64)(float_64)0.5)
	if ( (((float_64)$14 < (float_64)(float_64)18446744073709551615) & ((float_64)$14 >= (float_64)(float_64)0)) ){ goto $label$31 }
	$7 = (int_64)0
	goto $label$30 
	
.LABEL $label$31
	$7 = (Rounds 0)($14)
	
.LABEL $label$30
	CALL eosio_assert((uint_64)($5 <= $7), [10389])
	*((($3 + [64]) + [8])) = [0]
	*((($3 + [80]) + [8])) = *(($2 + [8]))
	*($3 + [64]) = (int_64)0
	*($3 + [80]) = *($2)
	$5 = *($0)
	$4 = CALL $107([10424])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$35 }
	*($3 + [64]) = ($4 << [1])
	$6 = (($3 + [64]) | [1])
	if ( $4 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$12 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($12)
	*($3 + [64]) = ($12 | [1])
	*($3 + [72]) = $6
	*($3 + [68]) = $4
	
.LABEL $label$34
	CALL memcpy($6, [10424], $4)
	
.LABEL $label$33
	*(($6 + $4)) = [0]
	*(($3 + [8])) = *((($3 + [80]) + [8]))
	*($3) = *($3 + [80])
	CALL $30($0, $5, $1, $3, ($3 + [64]), (int_64)1)
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($3 + [72]))
	
.LABEL $label$36
	$12 = *($3 + [168])
	if ( ($12 == 0) ){ goto $label$37 }
	$0 = ($3 + [172])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$39 }
	
.LOOP $label$40:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$41 }
	CALL _ZdlPv($6)
	
.LABEL $label$41
	if ( ((int_32)$12 != (int_32)$4) ){ goto $label$40 }
	$4 = *(($3 + [168]))
	goto $label$38 
	
.LABEL $label$39
	$4 = $12
	
.LABEL $label$38
	*($0) = $12
	CALL _ZdlPv($4)
	
.LABEL $label$37
	$12 = *($3 + [208])
	if ( ($12 == 0) ){ goto $label$42 }
	$0 = ($3 + [212])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$44 }
	
.LOOP $label$45:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$46 }
	CALL _ZdlPv($6)
	
.LABEL $label$46
	if ( ((int_32)$12 != (int_32)$4) ){ goto $label$45 }
	$4 = *(($3 + [208]))
	goto $label$43 
	
.LABEL $label$44
	$4 = $12
	
.LABEL $label$43
	*($0) = $12
	CALL _ZdlPv($4)
	
.LABEL $label$42
	$global$0 = ($3 + [224])
	return (unreachable)
	
.LABEL $label$32
	CALL $100(($3 + [64]))
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $110($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [104]) + [16]))) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8724])
	CALL memcpy(($4 + [104]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [8724])
	CALL memcpy((($4 + [104]) + [8]), ($2 + [8]), [8])
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [8724])
	CALL memcpy(($4 + [56]), ($2 + [16]), [8])
	*($3) = *($4 + [56])
	$8 = ($2 + $7)
	*((($4 + [24]) + [8])) = $8
	*($4 + [44]) = ($2 + [24])
	*($4 + [40]) = $2
	*($4 + [48]) = $8
	*($4 + [24]) = *($4 + [40])
	CALL $22(($4 + [56]), $0, $1, ($4 + [24]))
	*(($8 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [112])
	$0 = *($4 + [104])
	*((($4 + [144]) + [8])) = *($8)
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [144]) + [8]))
	*((($4 + [160]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [144])
	*($4 + [8]) = $1
	*($4 + [160]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $113($2)
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL require_auth($1)
	CALL eosio_assert(CALL $31($0), [9458])
	$5 = [1]
	$7 = *($3)
	$6 = CALL $107([10435])
	if ( ((int_32)$6 != (int_32)( *($3 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	if ( (CALL $103($3, [0], [-1], [10435], $6) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = *($3)
	$7 = ($3 + [4])
	$6 = CALL $107([10437])
	if ( ((int_32)$6 != (int_32)( *($7) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$4 }
	if ( (CALL $103($3, [0], [-1], [10437], $6) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = [0]
	$7 = *($3)
	$6 = CALL $107([10439])
	if ( ((int_32)$6 != (int_32)( *($7) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$1 }
	$5 = (CALL $103($3, [0], [-1], [10439], $6) == 0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [1]
	
.LABEL $label$1
	CALL eosio_assert($5, [10441])
	$7 = [0]
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$5 }
	$9 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$9 = $10
	$7 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$9 = $10
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $7 ){ goto $label$9 }
	$7 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$7 = [0]
	
.LABEL $label$5
	CALL eosio_assert($7, [8512])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8529])
	$5 = CALL $107([10452])
	if ( ($5 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [8733])
	goto $label$12 
	
.LABEL $label$13
	if ( ($5 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$9 = (int_64)0
	
.LOOP $label$14:
	$7 = *(($5 + [10451]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$14 }
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	goto $label$10 
	
.LABEL $label$11
	$9 = (int_64)4
	
.LABEL $label$10
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$9), [8486])
	*(($4 + [168])) = [0]
	*($4 + [152]) = (int_64)-1
	*($4 + [160]) = (int_64)0
	$9 = *($0)
	*($4 + [136]) = $9
	*($4 + [144]) = $9
	$5 = [0]
	$7 = CALL db_find_i64($9, $9, (int_64)3607749779137757184, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$16 }
	$5 = CALL $34(($4 + [136]), $7)
	CALL eosio_assert(((int_32)*($5 + [120]) == (int_32)($4 + [136])), [8650])
	
.LABEL $label$16
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9515])
	CALL eosio_assert(((uint_64)*($5 + [88]) >= (uint_64)$8), [10362])
	$10 = *(($2 + [8]))
	*((($4 + [120]) + [8])) = $10
	$9 = *($2)
	*((($4 + [56]) + [8])) = $10
	*($4 + [56]) = $9
	*($4 + [120]) = $9
	CALL $32($0, $1, ($4 + [56]), (int_64)8)
	$5 = *($3)
	$7 = ($3 + [4])
	$6 = CALL $107([10435])
	if ( ((int_32)$6 != (int_32)( *($7) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$21 }
	$5 = [0]
	if ( (CALL $103($3, [0], [-1], [10435], $6) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$5 = *($3)
	$6 = CALL $107([10437])
	if ( ((int_32)$6 != (int_32)( *($7) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$22 }
	$5 = [0]
	if ( (CALL $103($3, [0], [-1], [10437], $6) == 0) ){ goto $label$19 }
	
.LABEL $label$22
	$9 = *($0 + [40])
	*($4 + [80]) = $9
	$10 = ((int_64)$8 * (int_64)9)
	*($4 + [72]) = $10
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8832])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$9 = $10
	$7 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$9 = $10
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $7 ){ goto $label$27 }
	$7 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$7 = [0]
	
.LABEL $label$23
	CALL eosio_assert($7, [8881])
	$9 = *($0)
	*((($4 + [40]) + [8])) = *((($4 + [72]) + [8]))
	*($4 + [40]) = *($4 + [72])
	CALL $33($0, $1, ($4 + [40]), $9, (int_64)7, [0])
	$6 = *($4 + [160])
	if ( ($6 == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$9 = *($0 + [40])
	*($4 + [112]) = $9
	$10 = ((int_64)$8 * (int_64)3)
	*($4 + [104]) = $10
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8832])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$9 = $10
	$7 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$9 = $10
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $7 ){ goto $label$32 }
	$7 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$7 = [0]
	
.LABEL $label$28
	CALL eosio_assert($7, [8881])
	$9 = *($0)
	*((($4 + [8]) + [8])) = *((($4 + [104]) + [8]))
	*($4 + [8]) = *($4 + [104])
	CALL $33($0, $1, ($4 + [8]), $9, (int_64)5, [0])
	$6 = *($4 + [160])
	if ( $6 ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	$9 = *($0 + [40])
	*($4 + [96]) = $9
	$10 = ((int_64)$8 * (int_64)6)
	*($4 + [88]) = $10
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8832])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$36 }
	$9 = $10
	$7 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$36
	$9 = $10
	
.LOOP $label$37:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$34 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $7 ){ goto $label$37 }
	$7 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$7 = [0]
	
.LABEL $label$33
	CALL eosio_assert($7, [8881])
	$9 = *($0)
	*((($4 + [24]) + [8])) = *((($4 + [88]) + [8]))
	*($4 + [24]) = *($4 + [88])
	CALL $33($0, $1, ($4 + [24]), $9, (int_64)6, [0])
	$6 = *($4 + [160])
	if ( $6 ){ goto $label$17 }
	
.LABEL $label$18
	$global$0 = ($4 + [176])
	return 
	
.LABEL $label$17
	$3 = ($4 + [164])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$39 }
	
.LOOP $label$40:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$41 }
	CALL _ZdlPv($7)
	
.LABEL $label$41
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$40 }
	$5 = *(($4 + [160]))
	goto $label$38 
	
.LABEL $label$39
	$5 = $6
	
.LABEL $label$38
	*($3) = $6
	CALL _ZdlPv($5)
	$global$0 = ($4 + [176])
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $110($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [112]) + [16]))) = (int_64)0
	*(($4 + [144])) = [0]
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [104]) = ($2 + $5)
	*($4 + [96]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8724])
	CALL memcpy(($4 + [112]), $2, [8])
	$6 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8724])
	CALL memcpy((($4 + [112]) + [8]), ($2 + [8]), [8])
	*($4 + [48]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8724])
	CALL memcpy(($4 + [48]), ($2 + [16]), [8])
	*($3) = *($4 + [48])
	*($4 + [100]) = ($2 + [24])
	CALL $51(($4 + [96]), (($4 + [112]) + [24]))
	$3 = *($4 + [104])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$7 = *($4 + [96])
	*($4 + [8]) = $7
	*($4 + [32]) = $7
	*($4 + [24]) = CALL $22(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [28]) = ($4 + [152])
	CALL $52(($4 + [24]), ($4 + [112]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [136]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $113($2)
	$2 = [1]
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [144])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [9434])
	CALL eosio_assert(CALL $24($0, $1), [8443])
	CALL eosio_assert(((int_64)*($3 + [8]) > (int_64)0), [8529])
	$5 = CALL $107([10161])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8733])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$1 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($5 + [10160]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$6
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$1 = (int_64)4
	
.LABEL $label$1
	$7 = ($3 + [8])
	if ( ((int_64)*(($3 + [16])) != (int_64)$1) ){ goto $label$9 }
	$8 = *(($7 + [8]))
	*((($4 + [112]) + [8])) = $8
	$9 = *($0)
	$1 = *($7)
	*((($4 + [16]) + [8])) = $8
	*($4 + [112]) = $1
	*($4 + [16]) = $1
	CALL $33($0, $2, ($4 + [16]), $9, (int_64)5, [0])
	if ( ((int_64)*($3 + [24]) >= (int_64)1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = CALL $107([10166])
	if ( ($5 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [8733])
	goto $label$12 
	
.LABEL $label$13
	if ( ($5 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$1 = (int_64)0
	
.LOOP $label$14:
	$6 = *(($5 + [10165]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$15
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$14 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$10 
	
.LABEL $label$11
	$1 = (int_64)4
	
.LABEL $label$10
	if ( ((int_64)*(($3 + [16])) != (int_64)$1) ){ goto $label$16 }
	$8 = *(($7 + [8]))
	*((($4 + [96]) + [8])) = $8
	$9 = *($0)
	$1 = *($7)
	*((($4 + [32]) + [8])) = $8
	*($4 + [96]) = $1
	*($4 + [32]) = $1
	CALL $33($0, $2, ($4 + [32]), $9, (int_64)6, [0])
	if ( ((int_64)*($3 + [24]) >= (int_64)1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$16
	$5 = CALL $107([10173])
	if ( ($5 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [8733])
	goto $label$19 
	
.LABEL $label$20
	if ( ($5 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$1 = (int_64)0
	
.LOOP $label$21:
	$6 = *(($5 + [10172]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$22
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$21 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$17 
	
.LABEL $label$18
	$1 = (int_64)4
	
.LABEL $label$17
	if ( ((int_64)*(($3 + [16])) != (int_64)$1) ){ goto $label$23 }
	$8 = *(($7 + [8]))
	*((($4 + [80]) + [8])) = $8
	$9 = *($0)
	$1 = *($7)
	*((($4 + [48]) + [8])) = $8
	*($4 + [80]) = $1
	*($4 + [48]) = $1
	CALL $33($0, $2, ($4 + [48]), $9, (int_64)7, [0])
	
.LABEL $label$23
	if ( ((int_64)*($3 + [24]) < (int_64)1) ){ goto $label$7 }
	
.LABEL $label$8
	$5 = ($3 + [24])
	$8 = *(($5 + [8]))
	*((($4 + [64]) + [8])) = $8
	$9 = *($0)
	$1 = *($5)
	*(($4 + [8])) = $8
	*($4 + [64]) = $1
	*($4) = $1
	CALL $33($0, $2, $4, $9, (int_64)8, [0])
	
.LABEL $label$7
	$global$0 = ($4 + [128])
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$3 = ($global$0 - [224])
	$global$0 = $3
	*(($4 = $3) + [216]) = *($2)
	$5 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$5 = CALL $110($2)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	CALL read_action_data($5, $2)
	
.LABEL $label$1
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	$6 = CALL memset(($4 + [120]), [0], [80])
	*(($4 + [136])) = (int_64)0
	*(($7 = ($4 + [128]))) = (int_64)0
	*(($8 = ($4 + [144]))) = (int_64)0
	*(($4 + [152])) = (int_64)0
	*(($9 = ($4 + [160]))) = (int_64)0
	*(($10 = ($4 + [168]))) = [255]
	*(($3 = (($4 + [104]) + [80]))) = (int_64)0
	*(($4 + [192])) = [0]
	*(($11 = ($4 + [200]))) = (int_64)0
	*(($12 = ($4 + [208]))) = (int_64)0
	*($4 + [92]) = $5
	*($4 + [88]) = $5
	*($4 + [96]) = ($5 + $2)
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [8724])
	CALL memcpy(($4 + [104]), *($4 + [92]), [8])
	$13 = (*($4 + [92]) + [8])
	*($4 + [92]) = $13
	CALL eosio_assert(((uint_32)(*($4 + [96]) - $13) > (uint_32)[7]), [8724])
	CALL memcpy((($4 + [104]) + [8]), *($4 + [92]), [8])
	*($4 + [92]) = (*($4 + [92]) + [8])
	*($4 + [16]) = ($4 + [88])
	*($4 + [44]) = $7
	*($4 + [40]) = $6
	*($4 + [48]) = $8
	*($4 + [52]) = $9
	*($4 + [56]) = $10
	*($4 + [60]) = ($4 + [176])
	*($4 + [64]) = $3
	*($4 + [68]) = $11
	*($4 + [72]) = $12
	CALL $45(($4 + [40]), ($4 + [16]))
	$6 = *($4 + [96])
	*((($4 + [24]) + [8])) = $6
	*(($4 + [8])) = $6
	$14 = *($4 + [88])
	*($4) = $14
	*($4 + [24]) = $14
	*($4 + [16]) = CALL $22(($4 + [40]), $0, $1, $4)
	*($4 + [20]) = ($4 + [216])
	CALL $46(($4 + [16]), ($4 + [104]))
	if ( ($2 <= [513]) ){ goto $label$4 }
	CALL $113($5)
	
.LABEL $label$4
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [188])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$5 = ($global$0 - [384])
	$global$0 = $5
	*($5 + [376]) = $1
	CALL require_auth($1)
	CALL eosio_assert(CALL $31($0), [9458])
	$6 = CALL $107([8590])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8733])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$1 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($6 + [8589]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$6
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$1 = ((int_64)$1 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$1 = (int_64)0
	
.LABEL $label$1
	$7 = [0]
	*(($5 + [368])) = [0]
	*($5 + [352]) = (int_64)-1
	*($5 + [360]) = (int_64)0
	$8 = *($0)
	*($5 + [336]) = $8
	*($5 + [344]) = $1
	$9 = [0]
	$6 = CALL db_find_i64($8, $1, (int_64)-4157508551318700032, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $28(($5 + [336]), $6)
	CALL eosio_assert(((int_32)*($9 + [104]) == (int_32)($5 + [336])), [8650])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9190])
	$10 = *($2 + [8])
	$11 = *($2)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$8 }
	$1 = (uint_64)$10 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$1 = $8
	$7 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$1 = $8
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $7 ){ goto $label$12 }
	$7 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [8512])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [8529])
	CALL eosio_assert(((int_64)$10 == (int_64)*($9 + [8])), [8486])
	if ( ((int_64)$3 == (int_64)2) ){ goto $label$29 }
	if ( ((int_64)$3 != (int_64)1) ){ goto $label$15 }
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$28 }
	$6 = [0]
	*((($5 + [264]) + [32])) = [0]
	*($5 + [280]) = (int_64)-1
	*($5 + [288]) = (int_64)0
	*($5 + [300]) = [0]
	$1 = *($0)
	*($5 + [264]) = $1
	*($5 + [272]) = $1
	*((($5 + [224]) + [32])) = [0]
	*($5 + [232]) = $1
	*($5 + [224]) = $1
	*($5 + [240]) = (int_64)-1
	*($5 + [248]) = (int_64)0
	$7 = CALL db_find_i64($1, $1, (int_64)3607749779137757184, *($5 + [376]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$30 }
	$6 = CALL $34(($5 + [224]), $7)
	CALL eosio_assert(((int_32)*($6 + [120]) == (int_32)($5 + [224])), [8650])
	
.LABEL $label$30
	$1 = *($6 + [40])
	if ( (int_64)(*($6 + [96]) == 0) ){ goto $label$26 }
	CALL eosio_assert(((uint_64)$1 >= (uint_64)((int_64)*($2) + (int_64)*($6 + [112]))), [9694])
	goto $label$25 
	
.LABEL $label$29
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$27 }
	$6 = [0]
	*(($5 + [296])) = [0]
	*($5 + [280]) = (int_64)-1
	*($5 + [288]) = (int_64)0
	$1 = *($0)
	*($5 + [264]) = $1
	*($5 + [272]) = $1
	$7 = [0]
	$12 = CALL db_find_i64($1, $1, (int_64)3607749779137757184, *($5 + [376]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$31 }
	$7 = CALL $34(($5 + [264]), $12)
	CALL eosio_assert(((int_32)*($7 + [120]) == (int_32)($5 + [264])), [8650])
	
.LABEL $label$31
	$12 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($12, [9515])
	CALL eosio_assert(((int_64)*($7 + [96]) != (int_64)0), [9848])
	CALL eosio_assert(((uint_64)*($7 + [104]) <= (uint_64)(int_64))(((int_64)((uint_64)CALL $fimport$11() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($9 + [72]))), [9868])
	CALL eosio_assert($12, [9393])
	CALL $39(($5 + [264]), $7, (int_64)0, ($5 + [224]))
	$1 = *($7 + [112])
	*($5 + [120]) = $1
	$8 = *($0 + [32])
	*($5 + [128]) = $8
	$3 = *($5 + [376])
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8832])
	$1 = (uint_64)$8 >> (uint_64)(int_64)8)
	
.LOOP $label$33:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$1 = $8
	$2 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$1 = $8
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$32 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $7 ){ goto $label$35 }
	$2 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$33 }
	
.LABEL $label$32
	CALL eosio_assert($2, [8881])
	*((($5 + [104]) + [8])) = *((($5 + [120]) + [8]))
	*($5 + [104]) = *($5 + [120])
	CALL $32($0, $3, ($5 + [104]), (int_64)4)
	$12 = *($5 + [288])
	if ( ($12 == 0) ){ goto $label$15 }
	$0 = ($5 + [292])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$24 }
	
.LOOP $label$36:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$37 }
	CALL _ZdlPv($7)
	
.LABEL $label$37
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$36 }
	$6 = *(($5 + [288]))
	goto $label$23 
	
.LABEL $label$28
	$6 = ($2 + [8])
	$8 = *($6)
	*((($5 + [320]) + [8])) = $8
	$1 = *($2)
	*((($5 + [24]) + [8])) = $8
	*($5 + [320]) = $1
	*($5 + [24]) = $1
	CALL $32($0, *($5 + [376]), ($5 + [24]), (int_64)1)
	$8 = *($0)
	$1 = *($2)
	$3 = *($6)
	*((($5 + [8]) + [8])) = $3
	*((($5 + [304]) + [8])) = $3
	*($5 + [304]) = $1
	*($5 + [8]) = $1
	CALL $33($0, *($5 + [376]), ($5 + [8]), $8, (int_64)2, [0])
	$12 = *($5 + [360])
	if ( $12 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$27
	CALL eosio_assert((((int_64)$11 == (int_64)10000000000) | ((int_64)$11 == (int_64)30000000000)), [9725])
	*(($5 + [296])) = [0]
	*($5 + [280]) = (int_64)-1
	*($5 + [288]) = (int_64)0
	$1 = *($0)
	*($5 + [264]) = $1
	*($5 + [272]) = $1
	$9 = [0]
	$6 = CALL db_find_i64($1, $1, (int_64)3607749779137757184, *($5 + [376]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$38 }
	$9 = CALL $34(($5 + [264]), $6)
	CALL eosio_assert(((int_32)*($9 + [120]) == (int_32)($5 + [264])), [8650])
	
.LABEL $label$38
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9515])
	CALL eosio_assert(((int_64)*($9 + [96]) != (int_64)2), [9794])
	$1 = *($2)
	*($5 + [208]) = ( (int_64)2 ? (int_64)1 : ((int_64)$1 == (int_64)30000000000) )
	$8 = *($9 + [112])
	if ( ((uint_64)$8 >= (uint_64)$1) ){ goto $label$16 }
	$3 = (int_64)
	if ( ((int_64)$3($1 - *($9 + [40]))) < (int_64)1) ){ goto $label$17 }
	CALL eosio_assert(((int_64)*($9 + [8]) >= (int_64)$3), [9822])
	*($5 + [168]) = $3
	*($5 + [176]) = *($0 + [32])
	$10 = *($5 + [376])
	$13 = (uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807)
	CALL eosio_assert($13, [8832])
	$1 = (uint_64)*($5 + [176]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$40 }
	$1 = $8
	$14 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$39 }
	goto $label$18 
	
.LABEL $label$40
	$1 = $8
	
.LOOP $label$41:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $7 ){ goto $label$41 }
	$14 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$39 }
	goto $label$18 
	
.LABEL $label$26
	CALL eosio_assert(((uint_64)$1 >= (uint_64)*($2)), [9694])
	
.LABEL $label$25
	$1 = *($0)
	*($5 + [212]) = ($5 + [376])
	*($5 + [208]) = ($5 + [264])
	*($5 + [216]) = $2
	CALL $40(($5 + [200]), ($5 + [264]), $1, ($5 + [208]))
	$1 = *($2)
	$8 = *(($2 + [8]))
	*((($5 + [40]) + [8])) = $8
	*((($5 + [184]) + [8])) = $8
	*($5 + [40]) = $1
	*($5 + [184]) = $1
	CALL $32($0, *($5 + [376]), ($5 + [40]), (int_64)2)
	$12 = *($5 + [248])
	if ( ($12 == 0) ){ goto $label$20 }
	$0 = ($5 + [252])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$22 }
	
.LOOP $label$42:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$43 }
	CALL _ZdlPv($7)
	
.LABEL $label$43
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$42 }
	$6 = *(($5 + [248]))
	goto $label$21 
	
.LABEL $label$24
	$6 = $12
	
.LABEL $label$23
	*($0) = $12
	CALL _ZdlPv($6)
	$12 = *($5 + [360])
	if ( $12 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$22
	$6 = $12
	
.LABEL $label$21
	*($0) = $12
	CALL _ZdlPv($6)
	
.LABEL $label$20
	$12 = *($5 + [288])
	if ( ($12 == 0) ){ goto $label$15 }
	$0 = ($5 + [292])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$45 }
	
.LOOP $label$46:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$47 }
	CALL _ZdlPv($7)
	
.LABEL $label$47
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$46 }
	$6 = *(($5 + [288]))
	goto $label$44 
	
.LABEL $label$45
	$6 = $12
	
.LABEL $label$44
	*($0) = $12
	CALL _ZdlPv($6)
	$12 = *($5 + [360])
	if ( $12 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$19
	$14 = [0]
	
.LABEL $label$18
	CALL eosio_assert($14, [8881])
	*((($5 + [88]) + [8])) = *((($5 + [168]) + [8]))
	*($5 + [88]) = *($5 + [168])
	CALL $32($0, $10, ($5 + [88]), (int_64)1)
	*($5 + [152]) = $3
	*($5 + [160]) = *(($0 + [32]))
	$3 = *($5 + [376])
	CALL eosio_assert($13, [8832])
	$1 = (uint_64)*($5 + [160]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$50:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$49 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$51 }
	$1 = $8
	$14 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$51
	$1 = $8
	
.LOOP $label$52:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$49 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $7 ){ goto $label$52 }
	$14 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$49
	$14 = [0]
	
.LABEL $label$48
	CALL eosio_assert($14, [8881])
	$1 = *($0)
	*((($5 + [72]) + [8])) = *((($5 + [152]) + [8]))
	*($5 + [72]) = *($5 + [152])
	CALL $33($0, $3, ($5 + [72]), $1, (int_64)2, [0])
	$8 = *(($9 + [112]))
	$1 = *($2)
	
.LABEL $label$17
	$1 = (int_64)
	if ( ((int_64)$1($1 - $8)) < (int_64)1) ){ goto $label$16 }
	$8 = *($0 + [32])
	*($5 + [144]) = $8
	*($5 + [136]) = $1
	$3 = *($5 + [376])
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8832])
	$1 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$55:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$54 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$56 }
	$1 = $8
	$2 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$55 }
	goto $label$53 
	
.LABEL $label$56
	$1 = $8
	
.LOOP $label$57:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$54 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $7 ){ goto $label$57 }
	$2 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$55 }
	goto $label$53 
	
.LABEL $label$54
	$2 = [0]
	
.LABEL $label$53
	CALL eosio_assert($2, [8881])
	$1 = *($0)
	*((($5 + [56]) + [8])) = *((($5 + [136]) + [8]))
	*($5 + [56]) = *($5 + [136])
	CALL $33($0, $3, ($5 + [56]), $1, (int_64)4, [0])
	
.LABEL $label$16
	*(($5 + [256])) = [0]
	*($5 + [240]) = (int_64)-1
	*($5 + [248]) = (int_64)0
	$1 = *($0)
	*($5 + [224]) = $1
	*($5 + [232]) = $1
	$6 = [0]
	$7 = CALL db_find_i64($1, $1, (int_64)3607749779137757184, *($5 + [376]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$58 }
	$6 = CALL $34(($5 + [224]), $7)
	CALL eosio_assert(((int_32)*($6 + [120]) == (int_32)($5 + [224])), [8650])
	
.LABEL $label$58
	*($5 + [200]) = ($5 + [208])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9393])
	CALL $41(($5 + [224]), $6, (int_64)0, ($5 + [200]))
	$12 = *($5 + [248])
	if ( ($12 == 0) ){ goto $label$59 }
	$0 = ($5 + [252])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$61 }
	
.LOOP $label$62:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$63 }
	CALL _ZdlPv($7)
	
.LABEL $label$63
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$62 }
	$6 = *(($5 + [248]))
	goto $label$60 
	
.LABEL $label$61
	$6 = $12
	
.LABEL $label$60
	*($0) = $12
	CALL _ZdlPv($6)
	
.LABEL $label$59
	$12 = *($5 + [288])
	if ( ($12 == 0) ){ goto $label$15 }
	$0 = ($5 + [292])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$65 }
	
.LOOP $label$66:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$67 }
	CALL _ZdlPv($7)
	
.LABEL $label$67
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$66 }
	$6 = *(($5 + [288]))
	goto $label$64 
	
.LABEL $label$65
	$6 = $12
	
.LABEL $label$64
	*($0) = $12
	CALL _ZdlPv($6)
	
.LABEL $label$15
	$12 = *($5 + [360])
	if ( ($12 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$0 = ($5 + [364])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$69 }
	
.LOOP $label$70:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$71 }
	CALL _ZdlPv($7)
	
.LABEL $label$71
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$70 }
	$6 = *(($5 + [360]))
	goto $label$68 
	
.LABEL $label$69
	$6 = $12
	
.LABEL $label$68
	*($0) = $12
	CALL _ZdlPv($6)
	$global$0 = ($5 + [384])
	return 
	
.LABEL $label$13
	$global$0 = ($5 + [384])
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $110($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [136]))) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [108]) = $2
	*($4 + [104]) = $2
	*($4 + [112]) = ($2 + $7)
	*($4 + [192]) = ($4 + [104])
	*($4 + [56]) = ($4 + [120])
	CALL $38(($4 + [56]), ($4 + [192]))
	$8 = *($4 + [112])
	*((($4 + [40]) + [8])) = $8
	*((($4 + [24]) + [8])) = $8
	$9 = *($4 + [104])
	*($4 + [24]) = $9
	*($4 + [40]) = $9
	CALL $22(($4 + [56]), $0, $1, ($4 + [24]))
	*(($8 = (($4 + [160]) + [8]))) = *($3)
	*($4 + [160]) = *($4 + [128])
	$0 = *($4 + [120])
	$1 = *($4 + [144])
	$9 = *($4 + [152])
	*((($4 + [176]) + [8])) = *($8)
	*($4 + [176]) = *($4 + [160])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$10 = *((($4 + [176]) + [8]))
	*((($4 + [192]) + [8])) = $10
	*((($4 + [8]) + [8])) = $10
	$10 = *($4 + [176])
	*($4 + [8]) = $10
	*($4 + [192]) = $10
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $1), (int_64 $9), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $113($2)
	
.LABEL $label$6
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = ((int_64)*(*($0)) + (int_64)-1)
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$1 }
	goto $label$13 
	
.LABEL $label$13
	$4 = *($0 + [4])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*(($1 + [16]))), [9313])
	$3 = ((int_64)*($1 + [8]) + (int_64)*($4))
	*($1 + [8]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9356])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9375])
	if ( *(*($0 + [12])) ){ goto $label$1 }
	$4 = *(($0 + [4]))
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*(($1 + [32]))), [9313])
	$3 = ((int_64)*($1 + [24]) + (int_64)*($4))
	*($1 + [24]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9356])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [9375])
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$12
	$5 = *($0 + [8])
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($0 + [4])))
	$1 = CALL $107([8590])
	if ( ($1 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8733])
	goto $label$4 
	
.LABEL $label$11
	$3 = *(*($0 + [4]))
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)$3)
	*($1 + [48]) = ((int_64)$3 + (int_64)*($1 + [48]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$10
	*($1 + [112]) = ((int_64)*($1 + [112]) + (int_64)*(*($0 + [4])))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$9
	*($1 + [64]) = ((int_64)*($1 + [64]) + (int_64)*(*($0 + [4])))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$8
	*($1 + [72]) = ((int_64)*($1 + [72]) + (int_64)*(*($0 + [4])))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$7
	*($1 + [80]) = ((int_64)*($1 + [80]) + (int_64)*(*($0 + [4])))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$6
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)*(*($0 + [4])))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$5
	if ( ($1 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = (int_64)0
	
.LOOP $label$14:
	$4 = *(($1 + [8589]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$15
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	goto $label$2 
	
.LABEL $label$3
	$3 = (int_64)0
	
.LABEL $label$2
	$6 = *($5)
	*(($2 + [40])) = [0]
	*($2 + [8]) = $6
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [16]) = $3
	$1 = CALL $25(($2 + [8]), $3, [8594])
	*($2) = *(($0 + [4]))
	CALL $76(($2 + [8]), $1, (int_64)0, $2)
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$1 }
	$5 = ($2 + [36])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$17 }
	
.LOOP $label$18:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL _ZdlPv($4)
	
.LABEL $label$19
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$18 }
	$1 = *(($2 + [32]))
	goto $label$16 
	
.LABEL $label$17
	$1 = $0
	
.LABEL $label$16
	*($5) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
	(CASTING uint_32)(uint_64 $3)
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [48])
	$global$0 = $5
	*(($6 = (($5 + [32]) + [8]))) = *(($3 + [8]))
	*($5 + [32]) = *($3)
	$3 = CALL $101(($5 + [16]), $4)
	*(($5 + [8])) = *($6)
	*($5) = *($5 + [32])
	CALL $30($0, $1, $2, $5, $3, (int_64)0)
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$1
	$global$0 = ($5 + [48])
}

void .FUNC $19 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	float_64 $11
	$2 = ($global$0 - [160])
	$global$0 = $2
	$3 = CALL $107([8590])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8733])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8589]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)0
	
.LABEL $label$1
	*((($2 + [120]) + [32])) = [0]
	*($2 + [136]) = (int_64)-1
	*($2 + [144]) = (int_64)0
	*($2 + [120]) = *($0)
	*($2 + [128]) = $4
	$6 = CALL $25(($2 + [120]), $4, [8594])
	$4 = *($0)
	if ( ((int_64)$4 == (int_64)$1) ){ goto $label$7 }
	*((($2 + [80]) + [32])) = [0]
	*($2 + [88]) = $4
	*($2 + [96]) = (int_64)-1
	*($2 + [104]) = (int_64)0
	*($2 + [80]) = *($6 + [96])
	CALL $42(($2 + [24]), ($2 + [80]))
	CALL eosio_assert(CALL $fimport$8(*($2 + [32])), [10059])
	$3 = *($2 + [64])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [68])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$7 = *($2 + [104])
	if ( ($7 == 0) ){ goto $label$7 }
	$8 = ($2 + [108])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$9 = *($5 + [40])
	if ( ($9 == 0) ){ goto $label$13 }
	*(($5 + [44])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	$3 = *(($2 + [104]))
	goto $label$9 
	
.LABEL $label$10
	$3 = $7
	
.LABEL $label$9
	*($8) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$7
	CALL eosio_assert(((int_64)*($6 + [48]) != (int_64)0), [10082])
	$4 = *($6 + [64])
	*($2 + [16]) = $4
	$1 = *($6 + [48])
	CALL prints([10103])
	CALL printui(*($6 + [48]))
	CALL prints([10111])
	CALL printui(((uint_64)*($6 + [64]) / (uint_64)(int_64)10000))
	CALL prints([10119])
	$10 = ((float_64)(CASTING float_64)(uint_64 $4) / (float_64)(CASTING float_64)(uint_64 $1))
	CALL printdf(((float_64)$10 / (float_64)(float_64)1e4))
	CALL prints([10129])
	*((($2 + [24]) + [32])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$4 = *($0)
	*($2 + [24]) = $4
	*($2 + [32]) = $4
	$3 = CALL db_lowerbound_i64($4, $4, (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$14 }
	$3 = CALL $34(($2 + [24]), $3)
	
.LOOP $label$15:
	$11 = ((float_64)$10 * (float_64)(CASTING float_64)(uint_64 *($3 + [40])))
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$17 }
	$4 = (int_64)0
	goto $label$16 
	
.LABEL $label$17
	$4 = (Rounds 0)($11)
	
.LABEL $label$16
	*($2 + [80]) = $4
	*($2 + [8]) = ($2 + [80])
	CALL eosio_assert([1], [9393])
	CALL $43(($2 + [24]), $3, (int_64)0, ($2 + [8]))
	*($2 + [16]) = (int_64))(*($2 + [16]) - *($2 + [80]))
	CALL eosio_assert([1], [10131])
	$3 = CALL db_next_i64(*($3 + [124]), ($2 + [80]))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$14 }
	$3 = CALL $34(($2 + [24]), $3)
	goto $label$15 
	
.LABEL $label$14
	*($2 + [80]) = ($2 + [16])
	CALL $44(($2 + [120]), $6, (int_64)0, ($2 + [80]))
	$9 = *($2 + [48])
	if ( ($9 == 0) ){ goto $label$18 }
	$7 = ($2 + [52])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$20 }
	
.LOOP $label$21:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	CALL _ZdlPv($5)
	
.LABEL $label$22
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$21 }
	$3 = *(($2 + [48]))
	goto $label$19 
	
.LABEL $label$20
	$3 = $9
	
.LABEL $label$19
	*($7) = $9
	CALL _ZdlPv($3)
	
.LABEL $label$18
	$9 = *($2 + [144])
	if ( ($9 == 0) ){ goto $label$23 }
	$7 = ($2 + [148])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$25 }
	
.LOOP $label$26:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$27 }
	CALL _ZdlPv($5)
	
.LABEL $label$27
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$26 }
	$3 = *(($2 + [144]))
	goto $label$24 
	
.LABEL $label$25
	$3 = $9
	
.LABEL $label$24
	*($7) = $9
	CALL _ZdlPv($3)
	
.LABEL $label$23
	$global$0 = ($2 + [160])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $104($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = CALL $107([8590])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8733])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8589]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)4
	
.LABEL $label$1
	*($0 + [8]) = $3
	*($0) = (int_64)0
	CALL eosio_assert([1], [8832])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$3 = $5
	$4 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$3 = $5
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [8881])
	$2 = CALL $107([8590])
	if ( ($2 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [8733])
	goto $label$14 
	
.LABEL $label$15
	if ( ($2 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$3 = (int_64)0
	
.LOOP $label$16:
	$4 = *(($2 + [8589]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$17
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$16 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$3 = (int_64)4
	
.LABEL $label$12
	*($0 + [16]) = (int_64)0
	*(($2 = ($0 + [24]))) = $3
	CALL eosio_assert([1], [8832])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$3 = $5
	$4 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$3 = $5
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $4 ){ goto $label$22 }
	$4 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$4 = [0]
	
.LABEL $label$18
	CALL eosio_assert($4, [8881])
	$2 = CALL $107([8590])
	if ( ($2 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [8733])
	goto $label$25 
	
.LABEL $label$26
	if ( ($2 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$3 = (int_64)0
	
.LOOP $label$27:
	$4 = *(($2 + [8589]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$28
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$27 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$23 
	
.LABEL $label$24
	$3 = (int_64)4
	
.LABEL $label$23
	*($0 + [32]) = (int_64)0
	*(($2 = ($0 + [40]))) = $3
	CALL eosio_assert([1], [8832])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$3 = $5
	$4 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$3 = $5
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $4 ){ goto $label$33 }
	$4 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$4 = [0]
	
.LABEL $label$29
	CALL eosio_assert($4, [8881])
	*($0 + [56]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [72]) = (int_64)7776000
	*($0 + [80]) = (int_64)86400
	*($1 + [24]) = [8831]
	*($1 + [28]) = CALL $107([8831])
	*($1 + [8]) = *($1 + [24])
	CALL $2(($0 + [88]), ($1 + [8]))
	*($1 + [16]) = [8831]
	*($1 + [20]) = CALL $107([8831])
	*($1) = *($1 + [16])
	CALL $2(($0 + [96]), $1)
	$global$0 = ($1 + [32])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [8901])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8947])
	*($1 + [56]) = [0]
	*($4 + [80]) = *($1 + [8])
	$5 = *($1)
	CALL eosio_assert([1], [8998])
	*($4 + [72]) = ($4 + [57])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [88]) = ($4 + [64])
	$6 = ($1 + [8])
	*($4 + [100]) = $6
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [32])
	*($4 + [112]) = ($1 + [40])
	*($4 + [116]) = ($1 + [48])
	*($4 + [120]) = ($1 + [56])
	CALL $85(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [64]), $2, $4, [57])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = *($6)
	if ( (CALL $106(($4 + [80]), ($4 + [96]), [8]) == 0) ){ goto $label$2 }
	$6 = *($1 + [68])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3112182505826942976, ($4 + [88]), $5)
	*(($1 + [68])) = $6
	
.LABEL $label$3
	CALL db_idx64_update($6, $2, ($4 + [96]))
	
.LABEL $label$2
	$global$0 = ($4 + [128])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $89($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $102($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $102($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $100($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $101(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $101(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($0 + [4]), $4, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8701])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $110($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [56]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	CALL $55(($3 + [40]), ($3 + [32]))
	*($5 + [60]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)-4057297652813922304
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-4057297652813922304
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $56(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $113($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [44])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8701])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $110($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([136])
	CALL $70($5)
	*($5 + [120]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [72])
	*($3 + [72]) = ($5 + [80])
	*($3 + [76]) = ($5 + [88])
	*($3 + [80]) = ($5 + [96])
	*($3 + [84]) = ($5 + [104])
	*($3 + [88]) = ($5 + [112])
	CALL $71(($3 + [40]), ($3 + [32]))
	*($5 + [124]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $69(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $113($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $104($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [40])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [44])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8729])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $58($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [8724])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $104($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $112 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10472]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10476])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10472]) = [1]
	$2 = ($2 << [16])
	*([0] + [10476]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10476])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10476]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10472]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10472]) = [1]
	$3 = ($3 << [16])
	*([0] + [10476]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10476])
	
.LABEL $label$10
	*([0] + [10476]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $113 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18864])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18672]
	$3 = (((int_32)$1 * (int_32)[12]) + [18672])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $110 (int_32 $0)
{
	return CALL $111([10480], $0)
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $112($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8305])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$18()), [9139])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([120])
	CALL $62($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($4 + [16]) = $2)
	$5 = *($3 + [108])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $61(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8701])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $110($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([120])
	CALL $59($5)
	*($5 + [104]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [72])
	*($3 + [68]) = ($5 + [80])
	*($3 + [72]) = ($5 + [88])
	*($3 + [76]) = ($5 + [96])
	CALL $60(($3 + [40]), ($3 + [32]))
	*($5 + [108]) = $1
	*($3 + [32]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [40]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $61(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $113($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $57(*($1), *($0 + [20]))
}

int_32 .FUNC $107 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $106 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8724])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $51(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [240])
	$global$0 = $2
	CALL require_auth($1)
	CALL eosio_assert(CALL $31($0), [9458])
	*(($2 + [200])) = [0]
	*($2 + [184]) = (int_64)-1
	*($2 + [192]) = (int_64)0
	$3 = *($0)
	*($2 + [168]) = $3
	*($2 + [176]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $34(($2 + [168]), $5)
	CALL eosio_assert(((int_32)*($4 + [120]) == (int_32)($2 + [168])), [8650])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9515])
	CALL eosio_assert(((uint_64)*($4 + [56]) > (uint_64)(int_64)9999), [9642])
	$6 = ((uint_64)*($4 + [56]) / (uint_64)(int_64)10000)
	$7 = ((int_64)$6 * (int_64)10000)
	$4 = CALL $107([8482])
	if ( ($4 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8733])
	goto $label$4 
	
.LABEL $label$5
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = (int_64)0
	
.LOOP $label$6:
	$5 = *(($4 + [8481]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$7
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$6 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$2 
	
.LABEL $label$3
	$3 = (int_64)0
	
.LABEL $label$2
	*($2 + [160]) = ((int_64)$3 | (int_64)4)
	*($2 + [152]) = $7
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8832])
	$3 = (uint_64)*($2 + [160]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$3 = $7
	$5 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$3 = $7
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $5 ){ goto $label$12 }
	$5 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	
.LABEL $label$8
	CALL eosio_assert($5, [8881])
	*((($2 + [32]) + [8])) = *((($2 + [152]) + [8]))
	*($2 + [32]) = *($2 + [152])
	CALL $32($0, $1, ($2 + [32]), (int_64)3)
	$9 = *($0)
	*($2 + [116]) = [6]
	*($2 + [112]) = [9428]
	*($2 + [24]) = *($2 + [112])
	$10 = *(CALL $2(($2 + [64]), ($2 + [24])))
	*($2 + [116]) = [11]
	*($2 + [112]) = [9683]
	*($2 + [16]) = *($2 + [112])
	$11 = *(CALL $2(($2 + [64]), ($2 + [16])))
	*($2 + [116]) = [8]
	*($2 + [112]) = [8192]
	*($2 + [8]) = *($2 + [112])
	$12 = *(CALL $2(($2 + [64]), ($2 + [8])))
	$4 = CALL $107([8482])
	if ( ($4 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [8733])
	goto $label$15 
	
.LABEL $label$16
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$3 = (int_64)0
	
.LOOP $label$17:
	$5 = *(($4 + [8481]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$18
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$17 }
	$13 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$13 
	
.LABEL $label$14
	$13 = (int_64)4
	
.LABEL $label$13
	CALL eosio_assert([1], [8832])
	$3 = (uint_64)$13 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$7 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$3 = $7
	$5 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$3 = $7
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $5 ){ goto $label$23 }
	$5 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$5 = [0]
	
.LABEL $label$19
	CALL eosio_assert($5, [8881])
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	$4 = CALL $107([9660])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$32 }
	*($2 + [48]) = ($4 << [1])
	$5 = (($2 + [48]) | [1])
	if ( $4 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$8 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($2 + [48]) = ($8 | [1])
	*($2 + [56]) = $5
	*($2 + [52]) = $4
	
.LABEL $label$31
	CALL memcpy($5, [9660], $4)
	
.LABEL $label$30
	*(($5 + $4)) = [0]
	*((($2 + [64]) + [24])) = $13
	$4 = ($2 + [56])
	*(($2 + [104])) = *($4)
	*($4) = [0]
	*($2 + [72]) = $1
	*($2 + [80]) = $6
	*($2 + [112]) = $11
	*($2 + [120]) = $12
	*($2 + [64]) = *($0)
	*($2 + [96]) = *($2 + [48])
	*($2 + [48]) = (int_64)0
	*(($4 = CALL _Znwj([16]))) = $9
	*($4 + [8]) = $10
	*((($2 + [112]) + [36])) = [0]
	$5 = ($4 + [16])
	*((($2 + [112]) + [24])) = $5
	*(($2 + [132])) = $5
	*($2 + [128]) = $4
	*($2 + [140 align=4]) = (int_64)0
	$4 = *($2 + [96])
	$5 = ( *((($2 + [64]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [32])
	$3 = (CASTING uint_64)(uint_32 $5)
	$5 = ($2 + [140])
	
.LOOP $label$33:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$33 }
	if ( ($4 == 0) ){ goto $label$35 }
	CALL $35($5, $4)
	$5 = *(($2 + [144]))
	$4 = *(($2 + [140]))
	goto $label$34 
	
.LABEL $label$35
	$5 = [0]
	$4 = [0]
	
.LABEL $label$34
	*($2 + [228]) = $4
	*($2 + [224]) = $4
	*($2 + [232]) = $5
	*($2 + [208]) = ($2 + [224])
	*($2 + [216]) = ($2 + [64])
	CALL $36(($2 + [216]), ($2 + [208]))
	CALL $37(($2 + [224]), ($2 + [112]))
	$4 = *($2 + [224])
	CALL send_inline($4, (*($2 + [228]) - $4))
	$4 = *($2 + [224])
	if ( ($4 == 0) ){ goto $label$36 }
	*($2 + [228]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$36
	$4 = *($2 + [140])
	if ( ($4 == 0) ){ goto $label$37 }
	*(($2 + [144])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$37
	$4 = *($2 + [128])
	if ( ($4 == 0) ){ goto $label$38 }
	*(($2 + [132])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$38
	if ( (*(($2 + [96])) & [1]) ){ goto $label$40 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$39 }
	goto $label$28 
	
.LABEL $label$40
	CALL _ZdlPv(*(($2 + [104])))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$28 }
	
.LABEL $label$39
	CALL _ZdlPv(*(($2 + [56])))
	$8 = *($2 + [192])
	if ( $8 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	CALL $100(($2 + [48]))
	
.LABEL $label$28
	$8 = *($2 + [192])
	if ( ($8 == 0) ){ goto $label$26 }
	
.LABEL $label$27
	$0 = ($2 + [196])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$25 }
	
.LOOP $label$41:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$42 }
	CALL _ZdlPv($5)
	
.LABEL $label$42
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$41 }
	$4 = *(($2 + [192]))
	goto $label$24 
	
.LABEL $label$26
	$global$0 = ($2 + [240])
	return 
	
.LABEL $label$25
	$4 = $8
	
.LABEL $label$24
	*($0) = $8
	CALL _ZdlPv($4)
	$global$0 = ($2 + [240])
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $101(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $101(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($0) = $1
	*($0 + [8]) = $2
	$2 = *($3)
	*($0 + [16]) = $2
	$3 = *(($3 + [8]))
	*(($4 + [8])) = $3
	*(($0 + [24])) = $3
	*($4) = $2
	$3 = CALL $107([8590])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8733])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8589]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)4
	
.LABEL $label$1
	*(($0 + [32])) = $2
	$3 = CALL $107([8482])
	if ( ($3 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [8733])
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = (int_64)0
	
.LOOP $label$11:
	$5 = *(($3 + [8481]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$12
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$11 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$7 
	
.LABEL $label$8
	$2 = (int_64)4
	
.LABEL $label$7
	*(($0 + [40])) = $2
	$global$0 = ($4 + [16])
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [104]) == (int_32)$0), [8650])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $28($0, $4)
	CALL eosio_assert(((int_32)*($5 + [104]) == (int_32)$0), [8650])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $24 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = CALL $107([8590])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8733])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8589]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)0
	
.LABEL $label$1
	*((($2 + [104]) + [32])) = [0]
	*($2 + [120]) = (int_64)-1
	*($2 + [128]) = (int_64)0
	*($2 + [104]) = *($0)
	*($2 + [112]) = $4
	$3 = CALL $25(($2 + [104]), $4, [8594])
	*((($2 + [64]) + [32])) = [0]
	*($2 + [80]) = (int_64)-1
	*($2 + [88]) = (int_64)0
	*($2 + [64]) = *($3 + [96])
	*($2 + [72]) = *($0)
	CALL $42(($2 + [8]), ($2 + [64]))
	$3 = *($2 + [48])
	$0 = $3
	$6 = *(($2 + [52]))
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$0 = $3
	
.LOOP $label$8:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$7 }
	$0 = ($0 + [8])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$8 }
	$0 = $6
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$9 }
	*(($2 + [52])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$7 = *($2 + [88])
	if ( ($7 == 0) ){ goto $label$10 }
	$8 = ($2 + [92])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$12 }
	
.LOOP $label$13:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	$9 = *($5 + [40])
	if ( ($9 == 0) ){ goto $label$15 }
	*(($5 + [44])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$13 }
	$3 = *(($2 + [88]))
	goto $label$11 
	
.LABEL $label$12
	$3 = $7
	
.LABEL $label$11
	*($8) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$10
	$9 = *($2 + [128])
	if ( ($9 == 0) ){ goto $label$16 }
	$7 = ($2 + [132])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$20 }
	CALL _ZdlPv($5)
	
.LABEL $label$20
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($2 + [128]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $9
	
.LABEL $label$17
	*($7) = $9
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$global$0 = ($2 + [144])
	return ((int_32)$0 != (int_32)$6)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8724])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8901])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8947])
	$3 = *($3)
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*($3))
	*($1 + [64]) = ((int_64)*($1 + [64]) + (int_64)*($3))
	$5 = *($1 + [8])
	CALL eosio_assert([1], [8998])
	*($4 + [120]) = ($4 + [104])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	*($4 + [128]) = ($4 + [112])
	*($4 + [140]) = ($1 + [16])
	*($4 + [136]) = $1
	*($4 + [144]) = ($1 + [32])
	*($4 + [148]) = ($1 + [48])
	*($4 + [152]) = ($1 + [56])
	*($4 + [156]) = ($1 + [64])
	*($4 + [160]) = ($1 + [72])
	*($4 + [164]) = ($1 + [80])
	*($4 + [168]) = ($1 + [88])
	*($4 + [172]) = ($1 + [96])
	CALL $53(($4 + [136]), ($4 + [128]))
	CALL db_update_i64(*($1 + [108]), $2, $4, [104])
	$2 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [176])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $110($1)
	
.LABEL $label$2
	*(CALL $105()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $110(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $113($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $104($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [208])
	$global$0 = $3
	$4 = CALL $70($0)
	*($0 + [120]) = $1
	$1 = *($2)
	CALL $72(*($2 + [4]), $4)
	*($3 + [136]) = ($3 + [120])
	*($3 + [132]) = $3
	*($3 + [128]) = $3
	*($3 + [144]) = ($3 + [128])
	*($3 + [156]) = ($0 + [8])
	*($3 + [152]) = $0
	*($3 + [160]) = ($0 + [24])
	*($3 + [164]) = ($0 + [40])
	*($3 + [168]) = ($0 + [48])
	*($3 + [172]) = ($0 + [56])
	*($3 + [176]) = ($0 + [64])
	*($3 + [180]) = ($0 + [72])
	*($3 + [184]) = ($0 + [80])
	*($3 + [188]) = ($0 + [88])
	*($3 + [192]) = ($0 + [96])
	*($3 + [196]) = ($0 + [104])
	*($3 + [200]) = ($0 + [112])
	CALL $73(($3 + [152]), ($3 + [144]))
	$5 = *($0)
	*($0 + [124]) = CALL db_store_i64(*($1 + [8]), (int_64)3607749779137757184, *(*($2 + [8])), $5, $3, [120])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [208])
	return $0
}

int_32 .FUNC $108 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $105())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $109($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = *($0)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($1 + [8])), [9313])
	$3 = ((int_64)*($1) + (int_64)*($2))
	*($1) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9356])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9375])
	if ( ((int_64)*(*($0 + [4])) != (int_64)1) ){ goto $label$1 }
	$0 = *($0)
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [40]))), [9313])
	$3 = ((int_64)*($1 + [32]) + (int_64)*($0))
	*($1 + [32]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9356])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [9375])
	
.LABEL $label$1
}

void .FUNC $64 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $35($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $36(($4 + [72]), ($4 + [64]))
	CALL $37(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $104(($4 + [8]))
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$18()), [9139])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([136])
	CALL $68($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [124])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $69(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [208])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [120]) == (int_32)$0), [8901])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8947])
	$5 = *($1)
	CALL $75($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8998])
	*($4 + [136]) = ($4 + [120])
	*($4 + [132]) = $4
	*($4 + [128]) = $4
	*($4 + [144]) = ($4 + [128])
	*($4 + [156]) = ($1 + [8])
	*($4 + [152]) = $1
	*($4 + [160]) = ($1 + [24])
	*($4 + [164]) = ($1 + [40])
	*($4 + [168]) = ($1 + [48])
	*($4 + [172]) = ($1 + [56])
	*($4 + [176]) = ($1 + [64])
	*($4 + [180]) = ($1 + [72])
	*($4 + [184]) = ($1 + [80])
	*($4 + [188]) = ($1 + [88])
	*($4 + [192]) = ($1 + [96])
	*($4 + [196]) = ($1 + [104])
	*($4 + [200]) = ($1 + [112])
	CALL $73(($4 + [152]), ($4 + [144]))
	CALL db_update_i64(*($1 + [124]), $2, $4, [120])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [208])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $104($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8724])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8724])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8724])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($4, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8901])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8947])
	$5 = *($1 + [8])
	CALL $65($3, $1)
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [8998])
	*($4 + [120]) = ($4 + [104])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	*($4 + [128]) = ($4 + [112])
	*($4 + [140]) = ($1 + [16])
	*($4 + [136]) = $1
	*($4 + [144]) = ($1 + [32])
	*($4 + [148]) = ($1 + [48])
	*($4 + [152]) = ($1 + [56])
	*($4 + [156]) = ($1 + [64])
	*($4 + [160]) = ($1 + [72])
	*($4 + [164]) = ($1 + [80])
	*($4 + [168]) = ($1 + [88])
	*($4 + [172]) = ($1 + [96])
	CALL $53(($4 + [136]), ($4 + [128]))
	CALL db_update_i64(*($1 + [108]), $2, $4, [104])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [176])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL $59($0)
	*($0 + [104]) = $1
	$1 = *($2 + [4])
	$4 = *($1)
	*($0 + [8]) = *($4 + [8])
	*(($0 + [40])) = *($4 + [8])
	$5 = *($2)
	*(($0 + [24])) = *($4 + [8])
	*($0 + [16]) = *($4)
	*($0 + [48]) = (int_64)0
	*($0 + [80]) = *(*($1 + [4]))
	*($0 + [72]) = *(*($1 + [8]))
	*($0 + [88]) = *(*($1 + [12]))
	*($0 + [96]) = *(*($1 + [16]))
	*($3 + [120]) = ($3 + [104])
	*($3 + [116]) = $3
	*($3 + [112]) = $3
	*($3 + [128]) = ($3 + [112])
	*($3 + [140]) = ($0 + [16])
	*($3 + [136]) = $0
	*($3 + [144]) = ($0 + [32])
	*($3 + [148]) = ($0 + [48])
	*($3 + [152]) = ($0 + [56])
	*($3 + [156]) = ($0 + [64])
	*($3 + [160]) = ($0 + [72])
	*($3 + [164]) = ($0 + [80])
	*($3 + [168]) = ($0 + [88])
	*($3 + [172]) = ($0 + [96])
	CALL $53(($3 + [136]), ($3 + [128]))
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	*($0 + [108]) = CALL db_store_i64(*($5 + [8]), (int_64)-4157508551318700032, *(*($2 + [8])), $6), $3, [104])
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$1 }
	*(($5 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [176])
	return $0
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $100 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $106(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $105 ()
{
	return [10464]
}

void .FUNC $104 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8729])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $35($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8724])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8724])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8724])
	CALL memcpy($0, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [64]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10011])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3112182505826942976)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9957])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9957])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $47(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $104($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9057])
	CALL memcpy(*($4 + [4]), $0, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-3112182505826942976, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $47($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $87(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [9905])
	*($1) = *(($3 + [16]))
	*($1 + [8]) = *(*($0 + [4]))
	$0 = *($0 + [8])
	*(($1 + [24])) = *(($0 + [8]))
	*($1 + [16]) = *($0)
	*($1 + [56]) = [1]
	*($1 + [48]) = (int_64)1
	*($1 + [40]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)86400) & (int_64)4294967295)
	*($1 + [32]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $83 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = [8831]
	*($1 + [12]) = CALL $107([8831])
	*($1) = *($1 + [8])
	CALL $2(($0 + [8]), $1)
	$2 = CALL $107([8590])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8733])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8589]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)4
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($2 = ($0 + [24]))) = $3
	CALL eosio_assert([1], [8832])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$3 = $5
	$4 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$3 = $5
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [8881])
	*($0 + [40]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [48]) = (int_64)1
	*($0 + [56]) = [1]
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8901])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8947])
	*($1 + [48]) = (int_64))(*($1 + [48]) - *(*($3)))
	$5 = *($1 + [8])
	CALL eosio_assert([1], [8998])
	*($4 + [120]) = ($4 + [104])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	*($4 + [128]) = ($4 + [112])
	*($4 + [140]) = ($1 + [16])
	*($4 + [136]) = $1
	*($4 + [144]) = ($1 + [32])
	*($4 + [148]) = ($1 + [48])
	*($4 + [152]) = ($1 + [56])
	*($4 + [156]) = ($1 + [64])
	*($4 + [160]) = ($1 + [72])
	*($4 + [164]) = ($1 + [80])
	*($4 + [168]) = ($1 + [88])
	*($4 + [172]) = ($1 + [96])
	CALL $53(($4 + [136]), ($4 + [128]))
	CALL db_update_i64(*($1 + [108]), $2, $4, [104])
	$2 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [176])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = ((int_64)*(*($0)) + (int_64)-1)
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$1 }
	goto $label$13 
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*(*(*($0 + [4]) + [4]) + [8]) >= (int_64)*(*($0 + [8]))), [9533])
	$4 = *($0 + [8])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*(($1 + [16]))), [9551])
	$3 = (int_64)
	*($1 + [8]) = $3(*($1 + [8]) - *($4)))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9599])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9621])
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$12
	$5 = *($0 + [12])
	CALL eosio_assert(((uint_64)*(*(*($0 + [4]) + [4]) + [40]) >= (uint_64)*(*($0 + [8]))), [9533])
	*($1 + [40]) = (int_64))(*($1 + [40]) - *(*($0 + [8])))
	$1 = CALL $107([8590])
	if ( ($1 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8733])
	goto $label$4 
	
.LABEL $label$11
	CALL eosio_assert(((uint_64)*(*(*($0 + [4]) + [4]) + [56]) >= (uint_64)*(*($0 + [8]))), [9533])
	*($1 + [56]) = (int_64))(*($1 + [56]) - *(*($0 + [8])))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$10
	CALL eosio_assert(((uint_64)*(*(*($0 + [4]) + [4]) + [112]) >= (uint_64)*(*($0 + [8]))), [9533])
	*($1 + [112]) = (int_64))(*($1 + [112]) - *(*($0 + [8])))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$9
	CALL eosio_assert(((uint_64)*(*(*($0 + [4]) + [4]) + [64]) >= (uint_64)*(*($0 + [8]))), [9533])
	*($1 + [64]) = (int_64))(*($1 + [64]) - *(*($0 + [8])))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$8
	CALL eosio_assert(((uint_64)*(*(*($0 + [4]) + [4]) + [72]) >= (uint_64)*(*($0 + [8]))), [9533])
	*($1 + [72]) = (int_64))(*($1 + [72]) - *(*($0 + [8])))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$7
	CALL eosio_assert(((uint_64)*(*(*($0 + [4]) + [4]) + [80]) >= (uint_64)*(*($0 + [8]))), [9533])
	*($1 + [80]) = (int_64))(*($1 + [80]) - *(*($0 + [8])))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$6
	CALL eosio_assert(((uint_64)*(*(*($0 + [4]) + [4]) + [88]) >= (uint_64)*(*($0 + [8]))), [9533])
	*($1 + [88]) = (int_64))(*($1 + [88]) - *(*($0 + [8])))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$5
	if ( ($1 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = (int_64)0
	
.LOOP $label$14:
	$4 = *(($1 + [8589]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$15
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	goto $label$2 
	
.LABEL $label$3
	$3 = (int_64)0
	
.LABEL $label$2
	$6 = *($5)
	*(($2 + [40])) = [0]
	*($2 + [8]) = $6
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [16]) = $3
	$1 = CALL $25(($2 + [8]), $3, [8594])
	*($2) = *(($0 + [8]))
	CALL $82(($2 + [8]), $1, (int_64)0, $2)
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$1 }
	$5 = ($2 + [36])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$17 }
	
.LOOP $label$18:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL _ZdlPv($4)
	
.LABEL $label$19
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$18 }
	$1 = *(($2 + [32]))
	goto $label$16 
	
.LABEL $label$17
	$1 = $0
	
.LABEL $label$16
	*($5) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
	(CASTING uint_32)(uint_64 $3)
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [208])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [120]) == (int_32)$0), [8901])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8947])
	$5 = *($1)
	CALL $81($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8998])
	*($4 + [136]) = ($4 + [120])
	*($4 + [132]) = $4
	*($4 + [128]) = $4
	*($4 + [144]) = ($4 + [128])
	*($4 + [156]) = ($1 + [8])
	*($4 + [152]) = $1
	*($4 + [160]) = ($1 + [24])
	*($4 + [164]) = ($1 + [40])
	*($4 + [168]) = ($1 + [48])
	*($4 + [172]) = ($1 + [56])
	*($4 + [176]) = ($1 + [64])
	*($4 + [180]) = ($1 + [72])
	*($4 + [184]) = ($1 + [80])
	*($4 + [188]) = ($1 + [88])
	*($4 + [192]) = ($1 + [96])
	*($4 + [196]) = ($1 + [104])
	*($4 + [200]) = ($1 + [112])
	CALL $73(($4 + [152]), ($4 + [144]))
	CALL db_update_i64(*($1 + [124]), $2, $4, [120])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [208])
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($1) = *(*($0))
	$3 = ((int_64)*(*($0 + [4])) + (int_64)-1)
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$1 }
	goto $label$13 
	
.LABEL $label$13
	$4 = *($0 + [8])
	*($1 + [8]) = *($4)
	*(($1 + [16])) = *(($4 + [8]))
	$4 = *($0 + [8])
	*($1 + [24]) = *($4)
	*(($1 + [32])) = *(($4 + [8]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$12
	$5 = *($0 + [12])
	*($1 + [40]) = *(*($0 + [8]))
	$1 = CALL $107([8590])
	if ( ($1 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8733])
	goto $label$4 
	
.LABEL $label$11
	$3 = *(*($0 + [8]))
	*($1 + [56]) = $3
	*($1 + [48]) = $3
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$10
	*($1 + [112]) = *(*($0 + [8]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$9
	*($1 + [64]) = *(*($0 + [8]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$8
	*($1 + [72]) = *(*($0 + [8]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$7
	*($1 + [80]) = *(*($0 + [8]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$6
	*($1 + [88]) = *(*($0 + [8]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$5
	if ( ($1 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = (int_64)0
	
.LOOP $label$14:
	$4 = *(($1 + [8589]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$15
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	goto $label$2 
	
.LABEL $label$3
	$3 = (int_64)0
	
.LABEL $label$2
	$6 = *($5)
	*(($2 + [40])) = [0]
	*($2 + [8]) = $6
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [16]) = $3
	$1 = CALL $25(($2 + [8]), $3, [8594])
	*($2) = *(($0 + [8]))
	CALL $74(($2 + [8]), $1, (int_64)0, $2)
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$1 }
	$5 = ($2 + [36])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$17 }
	
.LOOP $label$18:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL _ZdlPv($4)
	
.LABEL $label$19
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$18 }
	$1 = *(($2 + [32]))
	goto $label$16 
	
.LABEL $label$17
	$1 = $0
	
.LABEL $label$16
	*($5) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
	(CASTING uint_32)(uint_64 $3)
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($0 + [4]), $4, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = [8831]
	*($1 + [12]) = CALL $107([8831])
	*($1) = *($1 + [8])
	CALL $2($0, $1)
	$2 = CALL $107([8590])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8733])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8589]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)4
	
.LABEL $label$1
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = $3
	CALL eosio_assert([1], [8832])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$3 = $5
	$4 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$3 = $5
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [8881])
	$2 = CALL $107([8590])
	if ( ($2 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [8733])
	goto $label$14 
	
.LABEL $label$15
	if ( ($2 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$3 = (int_64)0
	
.LOOP $label$16:
	$4 = *(($2 + [8589]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$17
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$16 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$3 = (int_64)4
	
.LABEL $label$12
	*($0 + [24]) = (int_64)0
	*(($2 = ($0 + [32]))) = $3
	CALL eosio_assert([1], [8832])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$3 = $5
	$4 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$3 = $5
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $4 ){ goto $label$22 }
	$4 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$4 = [0]
	
.LABEL $label$18
	CALL eosio_assert($4, [8881])
	*($0 + [48]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [88]) = (int_64)0
	*($0 + [96]) = (int_64)0
	*($0 + [104]) = (int_64)0
	*($0 + [112]) = (int_64)0
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8724])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8724])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8724])
	CALL memcpy($4, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8901])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8947])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)*(*($3)))
	$5 = *($1 + [8])
	CALL eosio_assert([1], [8998])
	*($4 + [120]) = ($4 + [104])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	*($4 + [128]) = ($4 + [112])
	*($4 + [140]) = ($1 + [16])
	*($4 + [136]) = $1
	*($4 + [144]) = ($1 + [32])
	*($4 + [148]) = ($1 + [48])
	*($4 + [152]) = ($1 + [56])
	*($4 + [156]) = ($1 + [64])
	*($4 + [160]) = ($1 + [72])
	*($4 + [164]) = ($1 + [80])
	*($4 + [168]) = ($1 + [88])
	*($4 + [172]) = ($1 + [96])
	CALL $53(($4 + [136]), ($4 + [128]))
	CALL db_update_i64(*($1 + [108]), $2, $4, [104])
	$2 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [176])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9057])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9057])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8901])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8947])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)*(*($3)))
	$5 = *($1 + [8])
	CALL eosio_assert([1], [8998])
	*($4 + [120]) = ($4 + [104])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	*($4 + [128]) = ($4 + [112])
	*($4 + [140]) = ($1 + [16])
	*($4 + [136]) = $1
	*($4 + [144]) = ($1 + [32])
	*($4 + [148]) = ($1 + [48])
	*($4 + [152]) = ($1 + [56])
	*($4 + [156]) = ($1 + [64])
	*($4 + [160]) = ($1 + [72])
	*($4 + [164]) = ($1 + [80])
	*($4 + [168]) = ($1 + [88])
	*($4 + [172]) = ($1 + [96])
	CALL $53(($4 + [136]), ($4 + [128]))
	CALL db_update_i64(*($1 + [108]), $2, $4, [104])
	$2 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [176])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [208])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [120]) == (int_32)$0), [8901])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8947])
	*($1 + [96]) = (int_64)0
	*($1 + [104]) = (int_64)0
	$5 = *($1)
	CALL eosio_assert([1], [8998])
	*($4 + [136]) = ($4 + [120])
	*($4 + [132]) = $4
	*($4 + [128]) = $4
	*($4 + [144]) = ($4 + [128])
	*($4 + [156]) = ($1 + [8])
	*($4 + [152]) = $1
	*($4 + [160]) = ($1 + [24])
	*($4 + [164]) = ($1 + [40])
	*($4 + [168]) = ($1 + [48])
	*($4 + [172]) = ($1 + [56])
	*($4 + [176]) = ($1 + [64])
	*($4 + [180]) = ($1 + [72])
	*($4 + [184]) = ($1 + [80])
	*($4 + [188]) = ($1 + [88])
	*($4 + [192]) = ($1 + [96])
	*($4 + [196]) = ($1 + [104])
	*($4 + [200]) = ($1 + [112])
	CALL $73(($4 + [152]), ($4 + [144]))
	CALL db_update_i64(*($1 + [124]), $2, $4, [120])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [208])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9057])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $77(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $35($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9057])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9057])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $79(CALL $78($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9057])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9057])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9057])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9057])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9057])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [72]) = $3
	$5 = [0]
	*(($4 + [64])) = [0]
	*($4 + [48]) = (int_64)-1
	*($4 + [56]) = (int_64)0
	$3 = *($0)
	*($4 + [32]) = $3
	*($4 + [40]) = $3
	$6 = CALL db_find_i64($3, $3, (int_64)3607749779137757184, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL $34(($4 + [32]), $6)
	CALL eosio_assert(((int_32)*($5 + [120]) == (int_32)($4 + [32])), [8650])
	*($4 + [28]) = $5
	*($4 + [24]) = ($4 + [32])
	$5 = [1]
	goto $label$1 
	
.LABEL $label$2
	*($4 + [28]) = [0]
	*($4 + [24]) = ($4 + [32])
	
.LABEL $label$1
	CALL eosio_assert($5, [9515])
	$5 = *($4 + [28])
	*($4 + [16]) = $2
	*($4 + [20]) = $0
	*($4 + [12]) = ($4 + [24])
	*($4 + [8]) = ($4 + [72])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9393])
	CALL $80(($4 + [32]), $5, (int_64)0, ($4 + [8]))
	$2 = *($4 + [56])
	if ( ($2 == 0) ){ goto $label$3 }
	$6 = ($4 + [60])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [56]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($6) = $2
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($4 + [80])
}

void .FUNC $33 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	$6 = ($global$0 - [96])
	$global$0 = $6
	*($6 + [80]) = $4
	*($6 + [79]) = $5
	*($6 + [88]) = $1
	*(($6 + [64])) = [0]
	*($6 + [48]) = (int_64)-1
	*($6 + [56]) = (int_64)0
	$4 = *($0)
	*($6 + [32]) = $4
	*($6 + [40]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $34(($6 + [32]), $5)
	CALL eosio_assert(((int_32)*($5 + [120]) == (int_32)($6 + [32])), [8650])
	*($6 + [20]) = $2
	*($6 + [24]) = $0
	*($6 + [16]) = ($6 + [80])
	*($6 + [28]) = ($6 + [79])
	CALL eosio_assert([1], [9393])
	CALL $66(($6 + [32]), $5, (int_64)0, ($6 + [16]))
	$2 = *($6 + [56])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0)
	*($6 + [24]) = $2
	*($6 + [28]) = $0
	*($6 + [20]) = ($6 + [80])
	*($6 + [16]) = ($6 + [88])
	CALL $67(($6 + [8]), ($6 + [32]), $4, ($6 + [16]))
	$2 = *($6 + [56])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($6 + [60])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [56]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($7) = $2
	CALL _ZdlPv($0)
	$global$0 = ($6 + [96])
	return 
	
.LABEL $label$1
	$global$0 = ($6 + [96])
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$6 = ($global$0 - [224])
	$global$0 = $6
	*($6 + [152]) = $5
	$7 = [0]
	$8 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	$5 = $8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $9
	$10 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8881])
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$7 }
	$7 = uint_32($7 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$7 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($7 <= [257]), [8561])
	*(($6 + [144])) = [0]
	*($6 + [128]) = (int_64)-1
	*($6 + [136]) = (int_64)0
	$5 = *($0)
	*($6 + [112]) = $5
	*($6 + [120]) = $8
	$12 = [0]
	$7 = CALL db_find_i64($5, $8, (int_64)-4157508551318700032, $8)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$8 }
	$12 = CALL $28(($6 + [112]), $7)
	CALL eosio_assert(((int_32)*($12 + [104]) == (int_32)($6 + [112])), [8650])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [9190])
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$9 }
	CALL require_auth(*($12 + [88]))
	
.LABEL $label$9
	$13 = ($3 + [8])
	$1 = *($13)
	$10 = [0]
	$8 = *($3)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$10 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$9 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$5 = $9
	$10 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$5 = $9
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $10 ){ goto $label$14 }
	$10 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$10 = [0]
	
.LABEL $label$10
	CALL eosio_assert($10, [8512])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [9250])
	CALL eosio_assert(((int_64)$1 == (int_64)*($12 + [8])), [8486])
	CALL eosio_assert(((int_64)$8 <= (int_64))(*($12 + [16]) - *($12))), [9279])
	*($6 + [164]) = ($6 + [152])
	*($6 + [160]) = $3
	CALL $63(($6 + [112]), $12, (int_64)0, ($6 + [160]))
	$8 = *($13)
	*((($6 + [96]) + [8])) = $8
	$5 = *($12 + [88])
	$9 = *($3)
	*((($6 + [16]) + [8])) = $8
	*($6 + [96]) = $9
	*($6 + [16]) = $9
	CALL $33($0, $5, ($6 + [16]), $5, (int_64)1, [0])
	$5 = *($12 + [88])
	if ( ((int_64)$5 == (int_64)$2) ){ goto $label$15 }
	$9 = *($0)
	*($6 + [84]) = [6]
	*($6 + [80]) = [9428]
	*($6 + [8]) = *($6 + [80])
	*($6 + [88]) = *(CALL $2(($6 + [160]), ($6 + [8])))
	*($6 + [80]) = $5
	*((($7 = CALL _Znwj([16])) + [8])) = *($6 + [88])
	*($7) = *($6 + [80])
	$5 = *(($12 + [88]))
	*(($10 = (($6 + [32]) + [24]))) = *(($3 + [8]))
	*($6 + [40]) = $2
	*($6 + [32]) = $5
	*($6 + [48]) = *($3)
	CALL $101(($6 + [64]), $4)
	*((($6 + [160]) + [24])) = *($10)
	$10 = (($6 + [32]) + [40])
	*(($11 = (($6 + [160]) + [40]))) = *($10)
	*($10) = [0]
	$10 = ($7 + [16])
	*($6 + [212]) = $10
	*($6 + [208]) = $7
	*($6 + [216]) = $10
	*($6 + [160]) = *($6 + [32])
	*($6 + [168]) = *($6 + [40])
	*($6 + [176]) = *($6 + [48])
	*($6 + [192]) = *($6 + [64])
	*($6 + [64]) = (int_64)0
	CALL $64($9, (int_64)-3617168760277827584, ($6 + [208]), ($6 + [160]))
	if ( ((*($6 + [192]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$16
	$7 = *($6 + [208])
	if ( ($7 == 0) ){ goto $label$17 }
	*($6 + [212]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((*(($6 + [64])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [72])))
	
.LABEL $label$15
	$11 = *($6 + [136])
	if ( ($11 == 0) ){ goto $label$18 }
	$12 = ($6 + [140])
	$7 = *($12)
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$20 }
	
.LOOP $label$21:
	$7 = ($7 + [-24])
	$10 = *($7)
	*($7) = [0]
	if ( ($10 == 0) ){ goto $label$22 }
	CALL _ZdlPv($10)
	
.LABEL $label$22
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$21 }
	$7 = *(($6 + [136]))
	goto $label$19 
	
.LABEL $label$20
	$7 = $11
	
.LABEL $label$19
	*($12) = $11
	CALL _ZdlPv($7)
	
.LABEL $label$18
	$global$0 = ($6 + [224])
}

int_32 .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [144])
	$global$0 = $1
	$2 = CALL $107([8590])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8733])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8589]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8778])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	$5 = [0]
	*((($1 + [104]) + [32])) = [0]
	*($1 + [120]) = (int_64)-1
	*($1 + [128]) = (int_64)0
	*($1 + [104]) = *($0)
	*($1 + [112]) = $3
	$2 = CALL $25(($1 + [104]), $3, [8594])
	*((($1 + [64]) + [32])) = [0]
	*($1 + [80]) = (int_64)-1
	*($1 + [88]) = (int_64)0
	$3 = *($2 + [96])
	*($1 + [64]) = $3
	$6 = *($0)
	*($1 + [72]) = $6
	$2 = CALL db_find_i64($3, $6, (int_64)-4057297652813922304, (int_64)-4057297652813922304)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $54(($1 + [64]), $2) + [56]) == (int_32)($1 + [64])), [8650])
	CALL $42(($1 + [8]), ($1 + [64]))
	$3 = *($1 + [8])
	$2 = *($1 + [48])
	if ( ($2 == 0) ){ goto $label$8 }
	*(($1 + [52])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$5 = ((int_64)$3 != (int_64)0)
	$7 = *($1 + [88])
	if ( ($7 == 0) ){ goto $label$7 }
	$8 = ($1 + [92])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	$0 = *($4 + [40])
	if ( ($0 == 0) ){ goto $label$13 }
	*(($4 + [44])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$13
	CALL _ZdlPv($4)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($1 + [88]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $7
	
.LABEL $label$9
	*($8) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$0 = *($1 + [128])
	if ( ($0 == 0) ){ goto $label$14 }
	$7 = ($1 + [132])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$18 }
	CALL _ZdlPv($4)
	
.LABEL $label$18
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($1 + [128]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $0
	
.LABEL $label$15
	*($7) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$14
	$global$0 = ($1 + [144])
	return $5
}