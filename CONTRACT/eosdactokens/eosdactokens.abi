{
  "version": "eosio::abi/1.1",
  "types": [],
  "structs": [{
      "name": "account",
      "base": "",
      "fields": [{
          "name": "balance",
          "type": "asset"
        }
      ]
    },{
      "name": "burn",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "quantity",
          "type": "asset"
        }
      ]
    },{
      "name": "clearold",
      "base": "",
      "fields": [{
          "name": "batch_size",
          "type": "uint16"
        }
      ]
    },{
      "name": "close",
      "base": "",
      "fields": [{
          "name": "owner",
          "type": "name"
        },{
          "name": "symbol",
          "type": "symbol"
        }
      ]
    },{
      "name": "create",
      "base": "",
      "fields": [{
          "name": "issuer",
          "type": "name"
        },{
          "name": "maximum_supply",
          "type": "asset"
        },{
          "name": "transfer_locked",
          "type": "bool"
        }
      ]
    },{
      "name": "currency_stats",
      "base": "",
      "fields": [{
          "name": "supply",
          "type": "asset"
        },{
          "name": "max_supply",
          "type": "asset"
        },{
          "name": "issuer",
          "type": "name"
        },{
          "name": "transfer_locked",
          "type": "bool"
        }
      ]
    },{
      "name": "issue",
      "base": "",
      "fields": [{
          "name": "to",
          "type": "name"
        },{
          "name": "quantity",
          "type": "asset"
        },{
          "name": "memo",
          "type": "string"
        }
      ]
    },{
      "name": "member",
      "base": "",
      "fields": [{
          "name": "sender",
          "type": "name"
        },{
          "name": "agreedtermsversion",
          "type": "uint64"
        }
      ]
    },{
      "name": "memberreg",
      "base": "",
      "fields": [{
          "name": "sender",
          "type": "name"
        },{
          "name": "agreedterms",
          "type": "string"
        }
      ]
    },{
      "name": "memberrege",
      "base": "",
      "fields": [{
          "name": "sender",
          "type": "name"
        },{
          "name": "agreedterms",
          "type": "string"
        },{
          "name": "dac_id",
          "type": "name"
        }
      ]
    },{
      "name": "memberunreg",
      "base": "",
      "fields": [{
          "name": "sender",
          "type": "name"
        }
      ]
    },{
      "name": "memberunrege",
      "base": "",
      "fields": [{
          "name": "sender",
          "type": "name"
        },{
          "name": "dac_id",
          "type": "name"
        }
      ]
    },{
      "name": "migrate",
      "base": "",
      "fields": [{
          "name": "batch",
          "type": "uint16"
        }
      ]
    },{
      "name": "newmemterms",
      "base": "",
      "fields": [{
          "name": "terms",
          "type": "string"
        },{
          "name": "hash",
          "type": "string"
        }
      ]
    },{
      "name": "newmemtermse",
      "base": "",
      "fields": [{
          "name": "terms",
          "type": "string"
        },{
          "name": "hash",
          "type": "string"
        },{
          "name": "dac_id",
          "type": "name"
        }
      ]
    },{
      "name": "termsinfo",
      "base": "",
      "fields": [{
          "name": "terms",
          "type": "string"
        },{
          "name": "hash",
          "type": "string"
        },{
          "name": "version",
          "type": "uint64"
        }
      ]
    },{
      "name": "transfer",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "to",
          "type": "name"
        },{
          "name": "quantity",
          "type": "asset"
        },{
          "name": "memo",
          "type": "string"
        }
      ]
    },{
      "name": "unlock",
      "base": "",
      "fields": [{
          "name": "unlock",
          "type": "asset"
        }
      ]
    },{
      "name": "updateterms",
      "base": "",
      "fields": [{
          "name": "termsid",
          "type": "uint64"
        },{
          "name": "terms",
          "type": "string"
        }
      ]
    },{
      "name": "updatetermse",
      "base": "",
      "fields": [{
          "name": "termsid",
          "type": "uint64"
        },{
          "name": "terms",
          "type": "string"
        },{
          "name": "dac_id",
          "type": "name"
        }
      ]
    }
  ],
  "actions": [{
      "name": "burn",
      "type": "burn",
      "ricardian_contract": "---\nspec_version: \"0.2.0\"\ntitle: Burn Tokens\nsummary: 'Will burn (remove from circulation) {{ nowrap quantity }} tokens and deduct them from the supply of the {{ asset_to_symbol_code quantity }} token.'\nicon: https://eosdac.io/assets/contracts/generic.png#00da1afc6464028359b3a02ffbdb59e1ea79fa261b5523ce7ac174cc0ef27bbd\n---\n\nThe intent of {{ burn }} is to allow a user to burn {{ quantity }} tokens that belong to them.  These tokens will be removed from supply and the balance of {{ nowrap from }} will be reduced by {{ nowrap quantity }}.\n\n**WARNING** You will lose tokens by proceeding, this process cannot be reversed!"
    },{
      "name": "clearold",
      "type": "clearold",
      "ricardian_contract": ""
    },{
      "name": "close",
      "type": "close",
      "ricardian_contract": "---\nspec_version: \"0.2.0\"\ntitle: Close Token Balance\nsummary: 'Close {{nowrap owner}}’s zero quantity balance'\nicon: https://eosdac.io/assets/contracts/generic.png#00da1afc6464028359b3a02ffbdb59e1ea79fa261b5523ce7ac174cc0ef27bbd\n---\n\n{{owner}} agrees to close their zero quantity balance for the {{symbol_to_symbol_code symbol}} token.\n\nRAM will be refunded to the RAM payer of the {{symbol_to_symbol_code symbol}} token balance for {{owner}}."
    },{
      "name": "create",
      "type": "create",
      "ricardian_contract": "---\nspec_version: \"0.2.0\"\ntitle: Create New Token\nsummary: 'Create a new token'\nicon: https://eosdac.io/assets/contracts/generic.png#00da1afc6464028359b3a02ffbdb59e1ea79fa261b5523ce7ac174cc0ef27bbd\n---\n\n{{$action.account}} agrees to create a new token with symbol {{asset_to_symbol_code maximum_supply}} to be managed by {{issuer}}.\n\nThis action will not result any any tokens being issued into circulation.\n\n{{issuer}} will be allowed to issue tokens into circulation, up to a maximum supply of {{maximum_supply}}.\n\nRAM will deducted from {{$action.account}}’s resources to create the necessary records."
    },{
      "name": "issue",
      "type": "issue",
      "ricardian_contract": "---\nspec_version: \"0.2.0\"\ntitle: Issue Tokens into Circulation\nsummary: 'Issue {{nowrap quantity}} into circulation and transfer into {{nowrap to}}’s account'\nicon: https://eosdac.io/assets/contracts/generic.png#00da1afc6464028359b3a02ffbdb59e1ea79fa261b5523ce7ac174cc0ef27bbd\n---\n\nThe token manager agrees to issue {{quantity}} into circulation, and transfer it into {{to}}’s account.\n\n{{#if memo}}There is a memo attached to the transfer stating:\n{{memo}}\n{{/if}}\n\nIf {{to}} does not have a balance for {{asset_to_symbol_code quantity}}, or the token manager does not have a balance for {{asset_to_symbol_code quantity}}, the token manager will be designated as the RAM payer of the {{asset_to_symbol_code quantity}} token balance for {{to}}. As a result, RAM will be deducted from the token manager’s resources to create the necessary records.\n\nThis action does not allow the total quantity to exceed the max allowed supply of the token."
    },{
      "name": "memberreg",
      "type": "memberreg",
      "ricardian_contract": ""
    },{
      "name": "memberrege",
      "type": "memberrege",
      "ricardian_contract": "---\nspec_version: \"0.2.0\"\ntitle: Register as a Member\nsummary: 'Register account {{ nowrap sender }} for DAC with ID {{ nowrap dac_id }} and agree to the terms identified by {{ agreedterms }}.'\nicon: https://eosdac.io/assets/contracts/generic.png#00da1afc6464028359b3a02ffbdb59e1ea79fa261b5523ce7ac174cc0ef27bbd\n---\n\nAgree to the terms and condition using the hash provided ({{ agreedterms }}).  This hash can only be generated by starting with a valid user agreement.\n\nThis action can be called multiple times if the terms and conditions are updated.  You will be registered as a member in the on-chain database."
    },{
      "name": "memberunreg",
      "type": "memberunreg",
      "ricardian_contract": ""
    },{
      "name": "memberunrege",
      "type": "memberunrege",
      "ricardian_contract": "---\nspec_version: \"0.2.0\"\ntitle: Unregister as a Member\nsummary: 'Unregister account {{ nowrap sender }} for DAC with ID {{ nowrap dac_id }}.'\nicon: https://eosdac.io/assets/contracts/generic.png#00da1afc6464028359b3a02ffbdb59e1ea79fa261b5523ce7ac174cc0ef27bbd\n---\n\nThis action indicates that you no longer agree to the terms and conditions.  Your account will be marked as no longer a member."
    },{
      "name": "migrate",
      "type": "migrate",
      "ricardian_contract": ""
    },{
      "name": "newmemterms",
      "type": "newmemterms",
      "ricardian_contract": ""
    },{
      "name": "newmemtermse",
      "type": "newmemtermse",
      "ricardian_contract": "---\nspec_version: \"0.2.0\"\ntitle: Set new member terms\nsummary: 'Set new member terms for DAC with ID {{ nowrap dac_id }} to {{ term }} with hash {{ hash }}.'\nicon: https://eosdac.io/assets/contracts/generic.png#00da1afc6464028359b3a02ffbdb59e1ea79fa261b5523ce7ac174cc0ef27bbd\n---\n\nUpdates the member terms to the document at [{{nowrap terms}}]({{nowrap terms}}).  This document has the identifying hash {{ hash }}, this must match or users will not be able to agree."
    },{
      "name": "transfer",
      "type": "transfer",
      "ricardian_contract": "---\nspec_version: \"0.2.0\"\ntitle: Transfer Tokens\nsummary: 'Send {{nowrap quantity}} from {{nowrap from}} to {{nowrap to}}'\nicon: https://eosdac.io/assets/contracts/generic.png#00da1afc6464028359b3a02ffbdb59e1ea79fa261b5523ce7ac174cc0ef27bbd\n---\n\n{{from}} agrees to send {{quantity}} to {{to}}.\n\n{{#if memo}}There is a memo attached to the transfer stating:\n{{memo}}\n{{/if}}\n\nIf {{from}} is not already the RAM payer of their {{asset_to_symbol_code quantity}} token balance, {{from}} will be designated as such. As a result, RAM will be deducted from {{from}}’s resources to refund the original RAM payer.\n\nIf {{to}} does not have a balance for {{asset_to_symbol_code quantity}}, {{from}} will be designated as the RAM payer of the {{asset_to_symbol_code quantity}} token balance for {{to}}. As a result, RAM will be deducted from {{from}}’s resources to create the necessary records."
    },{
      "name": "unlock",
      "type": "unlock",
      "ricardian_contract": "---\nspec_version: \"0.2.0\"\ntitle: Unlock Tokens\nsummary: 'Unlocks the {{ asset_to_symbol_code unlock }} token and allows transfers'\nicon: https://eosdac.io/assets/contracts/generic.png#00da1afc6464028359b3a02ffbdb59e1ea79fa261b5523ce7ac174cc0ef27bbd\n---\n\nUnlocks the token {{ asset_to_symbol_code unlock }} on this contract so that it can be transferred. This can only be done once to unlock a token and cannot be reversed to lock a token again."
    },{
      "name": "updateterms",
      "type": "updateterms",
      "ricardian_contract": ""
    },{
      "name": "updatetermse",
      "type": "updatetermse",
      "ricardian_contract": ""
    }
  ],
  "tables": [{
      "name": "accounts",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "account"
    },{
      "name": "members",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "member"
    },{
      "name": "memberterms",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "termsinfo"
    },{
      "name": "stat",
      "index_type": "i64",
      "key_names": [],
      "key_types": [],
      "type": "currency_stats"
    }
  ],
  "ricardian_clauses": [{
      "id": "ENTIRE AGREEMENT",
      "body": "This contract contains the entire agreement of the parties, for all described actions, and there are no other promises or conditions in any other agreement whether oral or written concerning the subject matter of this Contract. This contract supersedes any prior written or oral agreements between the parties."
    },{
      "id": "BINDING CONSTITUTION",
      "body": "All the the action descibed in this contract are subject to the EOSDAC consitution as held at http://eosdac.io . This includes, but is not limited to membership terms and condiutions, dispute resolution and severability."
    },{
      "id": "OVERALL FUNCTION",
      "body": "This contract creates the currency and also give a means to say whether an eosDAC account holder is a member. A member is classified as a token holder who has registered and agreed to the membership agreement. This contract also covers the standard token transfer and account balance functions"
    }
  ],
  "error_messages": [],
  "abi_extensions": [],
  "variants": []
}