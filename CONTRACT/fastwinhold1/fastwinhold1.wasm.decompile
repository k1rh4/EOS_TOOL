(data (i32.const 4) "\d0j\00\00")
(data (i32.const 16) "eosio.token\00")
(data (i32.const 32) "fastwinadmin\00")
(data (i32.const 48) "transfer\00")
(data (i32.const 64) "Must transfer EOS or FAST\00")
(data (i32.const 96) "read\00")
(data (i32.const 112) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 176) "no config found.\00")
(data (i32.const 208) "distribute only available when locked.\00")
(data (i32.const 256) "cannot pass end iterator to modify\00")
(data (i32.const 304) "check amount status before writting to the table.\00")
(data (i32.const 368) "\ndistributing: \00")
(data (i32.const 384) " adding \00")
(data (i32.const 400) "cannot increment end iterator\00")
(data (i32.const 432) "error reading iterator\00")
(data (i32.const 464) "object passed to modify is not in multi_index\00")
(data (i32.const 512) "cannot modify objects in table of another contract\00")
(data (i32.const 576) "updater cannot change primary key when modifying an object\00")
(data (i32.const 640) "write\00")
(data (i32.const 656) "cannot create objects in table of another contract\00")
(data (i32.const 720) "invalid symbol name\00")
(data (i32.const 752) "active\00")
(data (i32.const 768) "FASTWIN DIVIDEND!!\00")
(data (i32.const 800) "\nafter inline action send.\00")
(data (i32.const 832) "\nafter modify table.\00")
(data (i32.const 864) "you haven\'t staked any FAST before you can withdraw your dividend.\00")
(data (i32.const 944) "you don\'t have any more remain dividend could withdraw.\00")
(data (i32.const 1008) "before inline action send.\00")
(data (i32.const 1040) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1104) "get\00")
(data (i32.const 1120) "shouldn\'t transfer to self\00")
(data (i32.const 1152) "only accept recipient to self\00")
(data (i32.const 1184) "nolagoegnodj\00")
(data (i32.const 1200) "praqinyi1234\00")
(data (i32.const 1216) "kauiovewrbnv\00")
(data (i32.const 1232) "nvguaieubjeh\00")
(data (i32.const 1248) "vmosdnoadgde\00")
(data (i32.const 1264) "raogpgneumef\00")
(data (i32.const 1280) "eosgotohell3\00")
(data (i32.const 1296) "zhaojingdong\00")
(data (i32.const 1312) "gittcgenesis\00")
(data (i32.const 1328) "fjreqwuoidfs\00")
(data (i32.const 1344) "newdexpocket\00")
(data (i32.const 1360) "fastwinsales\00")
(data (i32.const 1376) "fastwintoken\00")
(data (i32.const 1392) "fastwintest1\00")
(data (i32.const 1408) "fastwinpool1\00")
(data (i32.const 1424) "fastwinpool2\00")
(data (i32.const 1440) "fastwindivid\00")
(data (i32.const 1456) "fastwincosts\00")
(data (i32.const 1472) "fastwinpool3\00")
(data (i32.const 1488) "fastwinpool4\00")
(data (i32.const 1504) "fastwinpool5\00")
(data (i32.const 1520) "fastwinrepay\00")
(data (i32.const 1536) "fastwindice1\00")
(data (i32.const 1552) "sadness12345\00")
(data (i32.const 1568) "fastwintest2\00")
(data (i32.const 1584) "fastwinsafe1\00")
(data (i32.const 1600) "fastwincpuem\00")
(data (i32.const 1616) "fastwindice3\00")
(data (i32.const 1632) "fastwincrash\00")
(data (i32.const 1648) "fastwinairdp\00")
(data (i32.const 1664) "fastwinhold1\00")
(data (i32.const 1680) "fastwinteam1\00")
(data (i32.const 1696) "fastwincards\00")
(data (i32.const 1712) "fastwinboss1\00")
(data (i32.const 1728) "fastwinfans1\00")
(data (i32.const 1744) "dexeoswallet\00")
(data (i32.const 1760) "Can not transfer to this account.\00")
(data (i32.const 1808) "btexexchange\00")
(data (i32.const 1824) "findexfindex\00")
(data (i32.const 1840) "you should unstake before you can transfer.\00")
(data (i32.const 1888) "you should wait 24 hours after your unstake before you can transfer.\00")
(data (i32.const 1968) "should be less than the maximum distributing amount.\00")
(data (i32.const 2032) "\nremain_amount: \00")
(data (i32.const 2064) "\nwithdrawn_amount \00")
(data (i32.const 2096) "\ntotal_amount: \00")
(data (i32.const 2112) "can\'t stake during the dividend.\00")
(data (i32.const 2160) "you should have positive balance of FAST\00")
(data (i32.const 2208) "you haven\'t stake any FAST\00")
(data (i32.const 2240) "you should wait 24 hours after your unstake before you can stake again.\00")
(data (i32.const 2320) "unable to find key\00")
(data (i32.const 2352) "you should lock first.\00")
(data (i32.const 2384) "there is someone not distributed.\00")
(data (i32.const 2432) "contract already locked.\00")
(data (i32.const 10864) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$6 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$7 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$9 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$10 (param i32 i64 i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$13 (param i32 i32)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "printn" (func $fimport$15 (param i64)))
(import "env" "prints" (func $fimport$16 (param i32)))
(import "env" "printui" (func $fimport$17 (param i64)))
(import "env" "read_action_data" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$19 (param i64)))
(import "env" "require_auth2" (func $fimport$20 (param i64 i64)))
(import "env" "send_inline" (func $fimport$21 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $70))
(export "free" (func $73))
(export "memcmp" (func $80))
(table $0 12 12 anyfunc)
(elem (i32.const 0) $81 $15 $10 $16 $17 $8 $6 $14 $19 $20 $11 $12)



int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $74($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [1040])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [720])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $45(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $46(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $75(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [656])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $74([72])
	CALL $66($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [60])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $32(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $75($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $19 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [176])
	*([0] + [4]) = $14
	CALL require_auth($1)
	$4 = [0]
	*(($14 + [136])) = [0]
	*($14 + [120]) = (int_64)-1
	*($14 + [128]) = (int_64)0
	$8 = *($0)
	*($14 + [104]) = $8
	*($14 + [112]) = $8
	*($14 + [140]) = [0]
	$6 = CALL db_find_i64($8, $8, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$4 = CALL $30(($14 + [104]), $6)
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($14 + [104])), [112])
	*($14 + [100]) = $4
	*($14 + [96]) = ($14 + [104])
	$6 = [1]
	goto $label$1 
	
.LABEL $label$2
	*($14 + [100]) = [0]
	*($14 + [96]) = ($14 + [104])
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [864])
	CALL eosio_assert(((int_64)*($4 + [24]) != (int_64)0), [944])
	CALL prints([1008])
	CALL eosio_assert([1], [1040])
	$8 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$2 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	
.LABEL $label$3
	CALL eosio_assert($2, [720])
	$5 = *(($4 + [24]))
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$13 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$2 = ($2 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$8 }
	$3 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [752]
	$11 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$19 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$2 = ($2 + [165])
	goto $label$17 
	
.LABEL $label$19
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$14 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$12 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$25 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$2 = ($2 + [165])
	goto $label$23 
	
.LABEL $label$25
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$21
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$12 = ((int_64)$10 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$20 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [48]
	$13 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$31 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$2 = ($2 + [165])
	goto $label$29 
	
.LABEL $label$31
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$27
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$13 = ((int_64)$10 | (int_64)$13)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$26 }
	*((($14 + [8]) + [24])) = (int_64)1397703940
	*((($14 + [8]) + [32])) = $9
	*($14 + [16]) = $1
	*($14 + [8]) = $3
	*($14 + [24]) = $5
	*($14 + [48]) = [768]
	*($14 + [64]) = $13
	*($14 + [56]) = $12
	*(($6 = CALL $74([16]))) = $3
	*($6 + [8]) = $11
	*(($2 = (($14 + [56]) + [32]))) = [0]
	$4 = ($6 + [16])
	*((($14 + [56]) + [24])) = $4
	*(($14 + [76])) = $4
	*($14 + [72]) = $6
	*($14 + [84]) = [0]
	*(($14 + [92])) = [0]
	CALL $39(($14 + [84]), [41])
	$6 = *($2)
	$2 = *($14 + [84])
	*($14 + [148]) = $2
	*($14 + [144]) = $2
	*($14 + [152]) = $6
	*($14 + [160]) = ($14 + [144])
	*($14 + [168]) = ($14 + [8])
	CALL $40(($14 + [168]), ($14 + [160]))
	CALL $41(($14 + [144]), ($14 + [56]))
	$6 = *($14 + [144])
	CALL send_inline($6, (*($14 + [148]) - $6))
	$6 = *($14 + [144])
	if ( ($6 == 0) ){ goto $label$32 }
	*($14 + [148]) = $6
	CALL $75($6)
	
.LABEL $label$32
	$6 = *($14 + [84])
	if ( ($6 == 0) ){ goto $label$33 }
	*(($14 + [88])) = $6
	CALL $75($6)
	
.LABEL $label$33
	$6 = *($14 + [72])
	if ( ($6 == 0) ){ goto $label$34 }
	*(($14 + [76])) = $6
	CALL $75($6)
	
.LABEL $label$34
	CALL prints([800])
	$6 = *($14 + [100])
	$8 = *($0)
	*($14 + [8]) = ($14 + [96])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [256])
	CALL $42(($14 + [104]), $6, $8, ($14 + [8]))
	CALL prints([832])
	$4 = *($14 + [128])
	if ( ($4 == 0) ){ goto $label$35 }
	$0 = ($14 + [132])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$37 }
	
.LOOP $label$38:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$39 }
	CALL $75($2)
	
.LABEL $label$39
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$38 }
	$6 = *(($14 + [128]))
	goto $label$36 
	
.LABEL $label$37
	$6 = $4
	
.LABEL $label$36
	*($0) = $4
	CALL $75($6)
	
.LABEL $label$35
	*([0] + [4]) = ($14 + [176])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $74(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $75($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $76 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*($0 + [56]) = $1
	$4 = *($2 + [4])
	*($0) = *(*($4))
	$1 = *($2)
	*($0 + [40]) = *(*($4 + [4]))
	$4 = *($4 + [8])
	*($0 + [24]) = (int_64)0
	*($0 + [8]) = *(*($4 + [4]) + [8])
	*($0 + [32]) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($7 + [64]) = ($7 + [56])
	*($7 + [60]) = $7
	*($7 + [56]) = $7
	CALL $33(($7 + [56]), $0)
	$3 = *($0)
	*($0 + [60]) = CALL db_store_i64(*($1 + [8]), (int_64)-5003134530400288768, *(*($2 + [8])), $3, $7, [56])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($1 + [8]))
	$5 = *(*(($2 + [8])))
	$6 = *($0)
	*($7 + [72]) = *(($0 + [8]))
	*($0 + [64]) = CALL db_idx64_store($3, (int_64)-5003134530400288768, $5, $6, ($7 + [72]))
	*([0] + [4]) = ($7 + [80])
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1 + [64]) = ((int_64))(*(*($3)) - *(*($3 + [4]) + [40])) + (int_64)*($1 + [64]))
	CALL eosio_assert([1], [576])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [8])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [16])
	*($4 + [116]) = ($1 + [24])
	*($4 + [120]) = ($1 + [32])
	*($4 + [124]) = ($1 + [40])
	*($4 + [128]) = ($1 + [48])
	*($4 + [132]) = ($1 + [56])
	*($4 + [136]) = ($1 + [64])
	CALL $36(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*($1 + [76]), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $74($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $78($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $75($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10844])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10652]
	$1 = (((int_32)$2 * (int_32)[12]) + [10652])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1 + [24]) = (int_64)0
	*($1) = (int_64)0
	*($1 + [48]) = (int_64)0
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	CALL eosio_assert([1], [576])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [8])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [16])
	*($4 + [116]) = ($1 + [24])
	*($4 + [120]) = ($1 + [32])
	*($4 + [124]) = ($1 + [40])
	*($4 + [128]) = ($1 + [48])
	*($4 + [132]) = ($1 + [56])
	*($4 + [136]) = ($1 + [64])
	CALL $36(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*($1 + [76]), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

int_32 .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [400])
	$6 = *($0 + [4])
	$7 = *($6 + [64])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-5003134530400288768, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [64]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$2), [112])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $30($2, CALL $fimport$4(*($2), *($2 + [8]), (int_64)-5003134530400288768, $3))
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$2), [112])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [64])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$4 = *($1 + [8])
	*($1 + [8]) = *(*(*($3) + [4]) + [8])
	*($5 + [72]) = $4
	$4 = *($1)
	*($1 + [24]) = *(*(*($3) + [4]) + [24])
	*($1 + [16]) = *(*(*($3) + [4]) + [16])
	*($1 + [32]) = *(*(*($3) + [4]) + [32])
	CALL eosio_assert([1], [576])
	*($5 + [64]) = ($5 + [56])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $33(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530366734336, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [96])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [96])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2)
{
	float_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [176])
	*([0] + [4]) = $13
	*($13 + [160]) = $2
	CALL require_auth(*($0))
	$11 = [0]
	*(($13 + [152])) = [0]
	*($13 + [136]) = (int_64)-1
	*($13 + [144]) = (int_64)0
	$2 = *($0)
	*($13 + [120]) = $2
	*($13 + [128]) = $2
	$6 = CALL db_find_i64($2, $2, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$11 = CALL $22(($13 + [120]), $6)
	CALL eosio_assert(((int_32)*($11 + [72]) == (int_32)($13 + [120])), [112])
	*($13 + [116]) = $11
	*($13 + [112]) = ($13 + [120])
	$11 = [1]
	goto $label$1 
	
.LABEL $label$2
	*($13 + [116]) = [0]
	*($13 + [112]) = ($13 + [120])
	
.LABEL $label$1
	CALL eosio_assert($11, [176])
	CALL eosio_assert(((int_64)*(*($13 + [116])) == (int_64)1), [208])
	*($13 + [108]) = [0]
	*((($13 + [64]) + [32])) = [0]
	*($13 + [80]) = (int_64)-1
	*($13 + [88]) = (int_64)0
	$2 = *($0)
	*($13 + [64]) = $2
	*($13 + [72]) = $2
	*($13 + [100]) = [0]
	*((($13 + [24]) + [32])) = [0]
	*($13 + [32]) = $2
	*($13 + [24]) = $2
	*($13 + [40]) = (int_64)-1
	*($13 + [48]) = (int_64)0
	*($13 + [60]) = [0]
	*($13 + [16]) = ($13 + [24])
	CALL $23(($13 + [168]), ($13 + [16]), ($13 + [160]))
	$11 = *($13 + [172])
	if ( ($11 == 0) ){ goto $label$7 }
	if ( ((int_64)*($13 + [160]) != (int_64)*($11 + [8])) ){ goto $label$7 }
	$2 = *($13 + [168])
	*($13 + [8]) = $2
	$11 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	if ( ($11) == 0) ){ goto $label$6 }
	$3 = (CASTING float_64)(uint_64 $1)
	$8 = ($13 + [88])
	$9 = ($13 + [92])
	$10 = ($13 + [72])
	
.LOOP $label$8:
	if ( (int_64)(*($11 + [48]) == 0) ){ goto $label$9 }
	$11 = *($13 + [12])
	$2 = *($0)
	*($13 + [168]) = ($13 + [112])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [256])
	CALL $24(*($13 + [16]), $11, $2, ($13 + [168]))
	*($13 + [108]) = (*($13 + [108]) + [1])
	$11 = *($13 + [12])
	if ( $11 ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$6 = *($13 + [116])
	if ( ((uint_64)*($13 + [108]) >= (uint_64)*($6 + [32])) ){ goto $label$5 }
	$2 = *($6 + [64])
	$1 = *($11 + [40])
	CALL eosio_assert(((int_64)((int_64)*($11 + [32]) + (int_64)*($11 + [24])) == (int_64)*($11 + [16])), [304])
	$7 = *(*($13 + [12]))
	CALL prints([368])
	CALL printn($7)
	CALL prints([384])
	CALL printui((Rounds 0)(((float_64)((float_64)$3 * (float_64)(CASTING float_64)(uint_64 $1)) / (float_64)(CASTING float_64)(uint_64 $2))))
	$2 = *(*($13 + [12]))
	$4 = *($8)
	$12 = *($9)
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$10 }
	$11 = ($12 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$11:
	if ( ((int_64)*(*($11)) == (int_64)$2) ){ goto $label$10 }
	$12 = $11
	$6 = ($11 + [-24])
	$11 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$16 }
	$11 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [56]) == (int_32)($13 + [64])), [112])
	$2 = *($0)
	if ( $11 ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$11 = CALL db_find_i64(*($13 + [64]), *($10), (int_64)-5003134530366734336, $2)
	if ( ((int_32)$11 <= (int_32)[-1]) ){ goto $label$14 }
	$11 = CALL $26(($13 + [64]), $11)
	CALL eosio_assert(((int_32)*($11 + [56]) == (int_32)($13 + [64])), [112])
	$2 = *($0)
	
.LABEL $label$15
	*($13 + [168]) = ($13 + [8])
	CALL eosio_assert([1], [256])
	CALL $28(($13 + [64]), $11, $2, ($13 + [168]))
	goto $label$12 
	
.LABEL $label$14
	$2 = *($0)
	
.LABEL $label$13
	*($13) = ($13 + [8])
	CALL $27(($13 + [168]), ($13 + [64]), $2, $13)
	
.LABEL $label$12
	*($13 + [108]) = (*($13 + [108]) + [1])
	CALL $29(($13 + [8]))
	$11 = *($13 + [12])
	if ( ($11 == 0) ){ goto $label$6 }
	if ( ((int_64)*($11 + [8]) == (int_64)*($13 + [160])) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	*($13 + [12]) = [0]
	*($13 + [8]) = ($13 + [16])
	
.LABEL $label$6
	$12 = *($13 + [48])
	if ( ($12 == 0) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$11 = *($13 + [116])
	$2 = *($0)
	*($13 + [168]) = ($13 + [108])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [256])
	CALL $25(($13 + [120]), $11, $2, ($13 + [168]))
	$12 = *($13 + [48])
	if ( ($12 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = ($13 + [52])
	$11 = *($5)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$18 }
	
.LOOP $label$19:
	$11 = ($11 + [-24])
	$6 = *($11)
	*($11) = [0]
	if ( ($6 == 0) ){ goto $label$20 }
	CALL $75($6)
	
.LABEL $label$20
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$19 }
	$11 = *(($13 + [48]))
	goto $label$17 
	
.LABEL $label$18
	$11 = $12
	
.LABEL $label$17
	*($5) = $12
	CALL $75($11)
	
.LABEL $label$3
	$12 = *($13 + [88])
	if ( ($12 == 0) ){ goto $label$21 }
	$5 = ($13 + [92])
	$11 = *($5)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$23 }
	
.LOOP $label$24:
	$11 = ($11 + [-24])
	$6 = *($11)
	*($11) = [0]
	if ( ($6 == 0) ){ goto $label$25 }
	CALL $75($6)
	
.LABEL $label$25
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$24 }
	$11 = *(($13 + [88]))
	goto $label$22 
	
.LABEL $label$23
	$11 = $12
	
.LABEL $label$22
	*($5) = $12
	CALL $75($11)
	
.LABEL $label$21
	$12 = *($13 + [144])
	if ( ($12 == 0) ){ goto $label$26 }
	$5 = ($13 + [148])
	$11 = *($5)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$28 }
	
.LOOP $label$29:
	$11 = ($11 + [-24])
	$6 = *($11)
	*($11) = [0]
	if ( ($6 == 0) ){ goto $label$30 }
	CALL $75($6)
	
.LABEL $label$30
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$29 }
	$11 = *(($13 + [144]))
	goto $label$27 
	
.LABEL $label$28
	$11 = $12
	
.LABEL $label$27
	*($5) = $12
	CALL $75($11)
	
.LABEL $label$26
	*([0] + [4]) = ($13 + [176])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-5003134530400288768, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$4), [112])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $30($4, CALL $fimport$4(*($4), *($4 + [8]), (int_64)-5003134530400288768, $5))
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$4), [112])
	
.LABEL $label$4
	*(($2 + [64])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [432])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [20]) = $4
	*($7 + [16]) = $4
	*($7 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $74([88])) + [72]) = $0
	*($7 + [32]) = ($7 + [16])
	*($7 + [44]) = ($5 + [8])
	*($7 + [40]) = $5
	*($7 + [48]) = ($5 + [16])
	*($7 + [52]) = ($5 + [24])
	*($7 + [56]) = ($5 + [32])
	*($7 + [60]) = ($5 + [40])
	*($7 + [64]) = ($5 + [48])
	*($7 + [68]) = ($5 + [56])
	*($7 + [72]) = ($5 + [64])
	CALL $37(($7 + [40]), ($7 + [32]))
	*($5 + [76]) = $1
	*($7 + [32]) = $5
	*($7 + [40]) = (int_64)1
	$6 = *($5 + [76])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)1
	*($4 + [16]) = $6
	*($7 + [32]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $38(($0 + [24]), ($7 + [32]), ($7 + [40]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $75($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [80])
	return $5
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [576])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [8])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [16])
	*($4 + [116]) = ($1 + [24])
	*($4 + [120]) = ($1 + [32])
	*($4 + [124]) = ($1 + [40])
	*($4 + [128]) = ($1 + [48])
	*($4 + [132]) = ($1 + [56])
	*($4 + [136]) = ($1 + [64])
	CALL $36(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*($1 + [76]), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$4 = *($1 + [8])
	*($1 + [8]) = ((int_64)*(*(*($3) + [4]) + [8]) + (int_64)1)
	*($5 + [72]) = $4
	$4 = *($1)
	CALL eosio_assert([1], [576])
	*($5 + [64]) = ($5 + [56])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $33(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530400288768, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [656])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $74([72])) + [56]) = $1
	CALL $34(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [60])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $35(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $75($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [432])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $74([72])) + [56]) = $0
	CALL $31(($8 + [32]), $6)
	*($6 + [64]) = [-1]
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $35(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $75($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $74 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10956])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3)))
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [576])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [8])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [16])
	*($4 + [116]) = ($1 + [24])
	*($4 + [120]) = ($1 + [32])
	*($4 + [124]) = ($1 + [40])
	*($4 + [128]) = ($1 + [48])
	*($4 + [132]) = ($1 + [56])
	*($4 + [136]) = ($1 + [64])
	CALL $36(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*($1 + [76]), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1104])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $39($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [96])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($5 + [72]) = *($1 + [8])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	*($1 + [8]) = *(*($3 + [4]))
	CALL eosio_assert([1], [576])
	*($5 + [64]) = ($5 + [56])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $33(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530400288768, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [144])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1) = (int_64)1
	$4 = *($1 + [40])
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = $4
	CALL eosio_assert([1], [576])
	*($5 + [88]) = ($5 + [72])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	*($5 + [96]) = ($5 + [80])
	*($5 + [108]) = ($1 + [8])
	*($5 + [104]) = $1
	*($5 + [112]) = ($1 + [16])
	*($5 + [116]) = ($1 + [24])
	*($5 + [120]) = ($1 + [32])
	*($5 + [124]) = ($1 + [40])
	*($5 + [128]) = ($1 + [48])
	*($5 + [132]) = ($1 + [56])
	*($5 + [136]) = ($1 + [64])
	CALL $36(($5 + [104]), ($5 + [96]))
	CALL db_update_i64(*($1 + [76]), $2, $5, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [144])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [640])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [640])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [640])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*(*($3) + [4]) + [24]))
	*($5 + [72]) = *($1 + [8])
	$4 = *($1)
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [576])
	*($5 + [64]) = ($5 + [56])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $33(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530400288768, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $39($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [640])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [640])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $44(CALL $43($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [640])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [640])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [640])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [640])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [640])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	*($4 + [15]) = ((int_32)*($0 + [40]) != (int_32)[0])
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [640])
	CALL memcpy(*($3 + [4]), ($4 + [15]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $48($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $77($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $74($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $77($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $75($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $76($7)
	return (unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $79(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $79(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $75(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $75(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [96])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [96])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [96])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $47(*($1), ($0 + [32]))
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [640])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [640])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10950]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10952])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10950]) = [1]
	$7 = ($7 << [16])
	*([0] + [10952]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10952])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10952]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10950]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10950]) = [1]
	$3 = ($3 << [16])
	*([0] + [10952]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10952])
	
.LABEL $label$8
	*([0] + [10952]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$4 = *($1 + [8])
	*($1 + [8]) = ((int_64)*(*(*($3) + [4]) + [8]) + (int_64)1)
	*($5 + [72]) = $4
	$4 = *($1)
	CALL eosio_assert([1], [576])
	*($5 + [64]) = ($5 + [56])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $33(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530400288768, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $78 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $71([2460], $0)
}

void .FUNC $81 ()
{
	(unreachable)
}

void .FUNC $75 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $60 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [1040])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [720])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [96])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $72($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10864])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*($7 + [56]) = $2
	*($7 + [48]) = $3
	CALL require_auth(*($0))
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$3 = *($0)
	*($7 + [8]) = $3
	*($7 + [16]) = $3
	*($7 + [44]) = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $30(($7 + [8]), $5)
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)($7 + [8])), [112])
	$3 = *($0)
	*($7 + [4]) = ($7 + [48])
	*($7) = ($7 + [56])
	CALL eosio_assert([1], [256])
	CALL $69(($7 + [8]), $5, $3, $7)
	
.LABEL $label$1
	$4 = *($7 + [32])
	if ( ($4 == 0) ){ goto $label$2 }
	$6 = ($7 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$6 }
	CALL $75($5)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($7 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $4
	
.LABEL $label$3
	*($6) = $4
	CALL $75($0)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [64])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [96])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [96])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [96])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

void .FUNC $6 (int_32 $0)
{
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [192])
	*([0] + [4]) = $9
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$2 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$8 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$3 = ($3 + [165])
	goto $label$6 
	
.LABEL $label$8
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$4
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$3 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$2 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$9:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$10 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$10
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [48]
	$7 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$18 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$3 = ($3 + [165])
	goto $label$16 
	
.LABEL $label$18
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$14
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$13 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$19 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$25 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$3 = ($3 + [165])
	goto $label$23 
	
.LABEL $label$25
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$21
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$20 }
	$4 = [1]
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$26 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$27:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$3 = ($3 + [165])
	goto $label$29 
	
.LABEL $label$30
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$28
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$27 }
	$4 = ((int_64)$7 == (int_64)$1)
	
.LABEL $label$26
	CALL eosio_assert($4, [64])
	
.LABEL $label$19
	*($9 + [184]) = $1
	*($9 + [176]) = $0
	if ( ((int_64)$2 <= (int_64)4851652232166244351) ){ goto $label$40 }
	if ( ((int_64)$2 > (int_64)5454311842506245119) ){ goto $label$39 }
	if ( ((int_64)$2 == (int_64)4851652232166244352) ){ goto $label$37 }
	if ( ((int_64)$2 == (int_64)5372695399406501888) ){ goto $label$36 }
	if ( ((int_64)$2 != (int_64)5454311842506244096) ){ goto $label$1 }
	*($9 + [124]) = [0]
	*($9 + [120]) = [1]
	*($9 + [48 align=4]) = *($9 + [120])
	CALL $7(($9 + [176]), ($9 + [48]))
	goto $label$1 
	
.LABEL $label$40
	if ( ((int_64)$2 <= (int_64)-3102536759825661953) ){ goto $label$38 }
	if ( ((int_64)$2 == (int_64)-3102536759825661952) ){ goto $label$35 }
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$34 }
	if ( ((int_64)$2 != (int_64)4222381386624925696) ){ goto $label$1 }
	*($9 + [156]) = [0]
	*($9 + [152]) = [2]
	*($9 + [16 align=4]) = *($9 + [152])
	CALL $7(($9 + [176]), ($9 + [16]))
	goto $label$1 
	
.LABEL $label$39
	if ( ((int_64)$2 == (int_64)5454311842506245120) ){ goto $label$33 }
	if ( ((int_64)$2 == (int_64)6111947644295184384) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($9 + [116]) = [0]
	*($9 + [112]) = [3]
	*($9 + [56 align=4]) = *($9 + [112])
	CALL $7(($9 + [176]), ($9 + [56]))
	goto $label$1 
	
.LABEL $label$38
	if ( ((int_64)$2 == (int_64)-4157661383434960896) ){ goto $label$31 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [4]
	*($9 + [64 align=4]) = *($9 + [104])
	CALL $18(($9 + [176]), ($9 + [64]))
	goto $label$1 
	
.LABEL $label$37
	*($9 + [164]) = [0]
	*($9 + [160]) = [5]
	*($9 + [8 align=4]) = *($9 + [160])
	CALL $9(($9 + [176]), ($9 + [8]))
	goto $label$1 
	
.LABEL $label$36
	*($9 + [172]) = [0]
	*($9 + [168]) = [6]
	*($9) = *($9 + [168])
	CALL $7(($9 + [176]), $9)
	goto $label$1 
	
.LABEL $label$35
	*($9 + [132]) = [0]
	*($9 + [128]) = [7]
	*($9 + [40 align=4]) = *($9 + [128])
	CALL $13(($9 + [176]), ($9 + [40]))
	goto $label$1 
	
.LABEL $label$34
	*($9 + [100]) = [0]
	*($9 + [96]) = [8]
	*($9 + [72 align=4]) = *($9 + [96])
	CALL $13(($9 + [176]), ($9 + [72]))
	goto $label$1 
	
.LABEL $label$33
	*($9 + [92]) = [0]
	*($9 + [88]) = [9]
	*($9 + [80 align=4]) = *($9 + [88])
	CALL $21(($9 + [176]), ($9 + [80]))
	goto $label$1 
	
.LABEL $label$32
	*($9 + [148]) = [0]
	*($9 + [144]) = [10]
	*($9 + [24 align=4]) = *($9 + [144])
	CALL $7(($9 + [176]), ($9 + [24]))
	goto $label$1 
	
.LABEL $label$31
	*($9 + [140]) = [0]
	*($9 + [136]) = [11]
	*($9 + [32 align=4]) = *($9 + [136])
	CALL $13(($9 + [176]), ($9 + [32]))
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [192])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	CALL require_auth($1)
	*((($7 + [56]) + [32])) = [0]
	*($7 + [72]) = (int_64)-1
	*($7 + [80]) = (int_64)0
	$5 = *($0)
	*($7 + [56]) = $5
	*($7 + [64]) = $5
	$4 = [0]
	$3 = CALL db_find_i64($5, $5, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $22(($7 + [56]), $3)
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)($7 + [56])), [112])
	
.LABEL $label$1
	$2 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($2, [176])
	CALL eosio_assert((int_64)(*($4) == 0), [2112])
	*((($7 + [16]) + [32])) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$5 = *($0)
	*($7 + [16]) = $5
	*($7 + [24]) = $5
	*($7 + [52]) = [0]
	$3 = CALL db_find_i64($5, $5, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL $30(($7 + [16]), $3)
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)($7 + [16])), [112])
	*($7 + [12]) = $3
	*($7 + [8]) = ($7 + [16])
	$6 = [1]
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	*($7 + [12]) = [0]
	*($7 + [8]) = ($7 + [16])
	$6 = [0]
	
.LABEL $label$2
	CALL eosio_assert(((int_64)CALL $55($0, $1) != (int_64)0), [2160])
	CALL eosio_assert($6, [2208])
	CALL eosio_assert((uint_64)(((int_64)*($3 + [48]) + (int_64)86400000000) <= CALL $fimport$3()), [2240])
	$1 = *($0)
	*($7) = ($7 + [8])
	CALL eosio_assert($2, [256])
	CALL $56(($7 + [56]), $4, $1, $7)
	$1 = *($0)
	$0 = *($7 + [12])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [256])
	CALL $57(($7 + [16]), $0, $1, $7)
	$3 = *($7 + [40])
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($7 + [44])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $75($4)
	
.LABEL $label$8
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($7 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $3
	
.LABEL $label$5
	*($2) = $3
	CALL $75($0)
	
.LABEL $label$4
	$3 = *($7 + [80])
	if ( ($3 == 0) ){ goto $label$9 }
	$2 = ($7 + [84])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	CALL $75($4)
	
.LABEL $label$13
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($7 + [80]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $3
	
.LABEL $label$10
	*($2) = $3
	CALL $75($0)
	
.LABEL $label$9
	*([0] + [4]) = ($7 + [96])
}

void .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	$2 = [0]
	*(($6 + [112])) = [0]
	*($6 + [96]) = (int_64)-1
	*($6 + [104]) = (int_64)0
	$4 = *($0)
	*($6 + [80]) = $4
	*($6 + [88]) = $4
	$3 = CALL db_find_i64($4, $4, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$2 }
	$2 = CALL $22(($6 + [80]), $3)
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)($6 + [80])), [112])
	*($6 + [76]) = $2
	*($6 + [72]) = ($6 + [80])
	$2 = [1]
	goto $label$1 
	
.LABEL $label$2
	*($6 + [76]) = [0]
	*($6 + [72]) = ($6 + [80])
	
.LABEL $label$1
	CALL eosio_assert($2, [176])
	CALL eosio_assert(((int_64)*(*($6 + [76])) == (int_64)1), [208])
	$2 = [0]
	*($6 + [68]) = [0]
	*(($6 + [56])) = [0]
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	$4 = *($0)
	*($6 + [24]) = $4
	*($6 + [32]) = $4
	*($6 + [60]) = [0]
	$3 = *($6 + [76])
	*($6 + [16]) = ($6 + [24])
	$1 = ($3 + [8])
	CALL $23(($6 + [120]), ($6 + [16]), $1)
	$3 = *($6 + [124])
	if ( ($3 == 0) ){ goto $label$3 }
	$2 = ( $3 ? [0] : ((int_64)*($1) == (int_64)*($3 + [8])) )
	
.LABEL $label$3
	
.LOOP $label$8:
	if ( ($2 == 0) ){ goto $label$7 }
	$3 = *($6 + [76])
	if ( ((int_64)*($2 + [8]) != (int_64)*($3 + [8])) ){ goto $label$9 }
	
.LOOP $label$11:
	if ( (int_64)(*(($2 + [48])) == 0) ){ goto $label$10 }
	$4 = *($0)
	*($6 + [120]) = ($6 + [72])
	CALL eosio_assert([1], [256])
	CALL $51(*($6 + [16]), $2, $4, ($6 + [120]))
	*($6 + [68]) = (*($6 + [68]) + [1])
	$3 = *($6 + [76])
	if ( ((int_64)*(($2 + [8])) == (int_64)*($3 + [8])) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((uint_64)*($6 + [68]) >= (uint_64)*($3 + [32])) ){ goto $label$6 }
	$4 = *($3 + [48])
	$5 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 $4) * (float_64)(CASTING float_64)(uint_64 *($2 + [40]))) / (float_64)(CASTING float_64)(uint_64 *($3 + [64]))))
	*($6 + [120]) = $5
	CALL eosio_assert(((uint_64)$5 <= (uint_64)$4), [1968])
	CALL prints([2032])
	CALL printui(*($2 + [24]))
	CALL prints([2064])
	CALL printui(*($2 + [32]))
	CALL prints([2096])
	CALL printui(*($2 + [16]))
	CALL eosio_assert(((int_64)((int_64)*($2 + [32]) + (int_64)*($2 + [24])) == (int_64)*($2 + [16])), [304])
	$4 = *($2)
	CALL prints([368])
	CALL printn($4)
	CALL prints([384])
	CALL printui(*($6 + [120]))
	$4 = *($0)
	*($6 + [12]) = ($6 + [120])
	*($6 + [8]) = ($6 + [72])
	CALL eosio_assert([1], [256])
	CALL $53(*($6 + [16]), $2, $4, ($6 + [8]))
	*($6 + [68]) = (*($6 + [68]) + [1])
	$3 = *($6 + [76])
	
.LABEL $label$9
	$2 = ($3 + [8])
	CALL $23(($6 + [120]), ($6 + [16]), $2)
	$4 = (int_64)0
	$3 = *($6 + [124])
	if ( ($3 == 0) ){ goto $label$12 }
	if ( ((int_64)*($2) != (int_64)*($3 + [8])) ){ goto $label$12 }
	$4 = *($6 + [124])
	
.LABEL $label$12
	$2 = (CASTING uint_32)(uint_64 $4)
	if ( $2 ){ goto $label$8 }
	$2 = *($6 + [76])
	$4 = *($0)
	*($6 + [120]) = ($6 + [68])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [256])
	CALL $54(($6 + [80]), $2, $4, ($6 + [120]))
	
.LABEL $label$7
	$0 = *($6 + [48])
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$2 = *($6 + [76])
	$4 = *($0)
	*($6 + [120]) = ($6 + [68])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [256])
	CALL $52(($6 + [80]), $2, $4, ($6 + [120]))
	$0 = *($6 + [48])
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$1 = ($6 + [52])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$16 }
	CALL $75($3)
	
.LABEL $label$16
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$15 }
	$2 = *(($6 + [48]))
	goto $label$13 
	
.LABEL $label$14
	$2 = $0
	
.LABEL $label$13
	*($1) = $0
	CALL $75($2)
	
.LABEL $label$4
	$0 = *($6 + [104])
	if ( ($0 == 0) ){ goto $label$17 }
	$1 = ($6 + [108])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$21 }
	CALL $75($3)
	
.LABEL $label$21
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$20 }
	$2 = *(($6 + [104]))
	goto $label$18 
	
.LABEL $label$19
	$2 = $0
	
.LABEL $label$18
	*($1) = $0
	CALL $75($2)
	
.LABEL $label$17
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [56])) = [0]
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$3 = *($0)
	*($5 + [24]) = $3
	*($5 + [32]) = $3
	$2 = CALL db_find_i64($3, $3, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $22(($5 + [24]), $2) + [72]) == (int_32)($5 + [24])), [112])
	$1 = *($5 + [48])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $50(($5 + [8]), ($5 + [24]), *($0), ($5 + [16]))
	$1 = *($5 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($5 + [52])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $75($2)
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $1
	
.LABEL $label$4
	*($4) = $1
	CALL $75($0)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	CALL require_auth($1)
	$5 = *($0 + [8])
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$6 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$6 = ($6 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$5 != (int_64)$10) ){ goto $label$8 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$8 }
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$7 }
	
.LABEL $label$8
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$14 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$6 = ($6 + [165])
	goto $label$12 
	
.LABEL $label$14
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$10
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$9 }
	if ( ((int_64)$5 != (int_64)$10) ){ goto $label$19 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$19 }
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [1120])
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [1152])
	*(($12 + [40])) = [0]
	*($12 + [24]) = (int_64)-1
	*($12 + [32]) = (int_64)0
	$9 = *($0)
	*($12 + [8]) = $9
	*($12 + [16]) = $9
	$7 = CALL db_find_i64($9, $9, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$18 }
	$7 = CALL $22(($12 + [8]), $7)
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)($12 + [8])), [112])
	$9 = *($0)
	*($12) = $3
	CALL eosio_assert([1], [256])
	CALL $49(($12 + [8]), $7, $9, $12)
	$0 = *($12 + [32])
	if ( $0 ){ goto $label$17 }
	goto $label$7 
	
.LABEL $label$19
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [32]
	$10 = (int_64)0
	
.LOOP $label$20:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$21 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$6 = ($6 + [165])
	goto $label$22 
	
.LABEL $label$23
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$21
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$20 }
	if ( ((int_64)$5 != (int_64)$10) ){ goto $label$7 }
	if ( ((int_64)*($3 + [8]) != (int_64)362174039556) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1184]
	$10 = (int_64)0
	
.LOOP $label$24:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$25 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$6 = ($6 + [165])
	goto $label$26 
	
.LABEL $label$27
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$25
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$24 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1200]
	$10 = (int_64)0
	
.LOOP $label$28:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$29 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$6 = ($6 + [165])
	goto $label$30 
	
.LABEL $label$31
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$29
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$28 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1216]
	$10 = (int_64)0
	
.LOOP $label$32:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$33 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$6 = ($6 + [165])
	goto $label$34 
	
.LABEL $label$35
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$33
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$32 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1232]
	$10 = (int_64)0
	
.LOOP $label$36:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$37 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$6 = ($6 + [165])
	goto $label$38 
	
.LABEL $label$39
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$37
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$36 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1248]
	$10 = (int_64)0
	
.LOOP $label$40:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$41 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$6 = ($6 + [165])
	goto $label$42 
	
.LABEL $label$43
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$41
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$40 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1264]
	$10 = (int_64)0
	
.LOOP $label$44:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$45 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$6 = ($6 + [165])
	goto $label$46 
	
.LABEL $label$47
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$45
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$44 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1280]
	$10 = (int_64)0
	
.LOOP $label$48:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$49 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$6 = ($6 + [165])
	goto $label$50 
	
.LABEL $label$51
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$49
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$48 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1296]
	$10 = (int_64)0
	
.LOOP $label$52:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$53 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$55 }
	$6 = ($6 + [165])
	goto $label$54 
	
.LABEL $label$55
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$54
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$53
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$52 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1312]
	$10 = (int_64)0
	
.LOOP $label$56:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$57 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$6 = ($6 + [165])
	goto $label$58 
	
.LABEL $label$59
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$57
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$56 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1328]
	$10 = (int_64)0
	
.LOOP $label$60:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$61 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$6 = ($6 + [165])
	goto $label$62 
	
.LABEL $label$63
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$61
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$60 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1344]
	$10 = (int_64)0
	
.LOOP $label$64:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$65 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$67 }
	$6 = ($6 + [165])
	goto $label$66 
	
.LABEL $label$67
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$66
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$65
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$64 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [32]
	$10 = (int_64)0
	
.LOOP $label$68:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$69 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$71 }
	$6 = ($6 + [165])
	goto $label$70 
	
.LABEL $label$71
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$70
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$69
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$68 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1360]
	$10 = (int_64)0
	
.LOOP $label$72:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$73 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$75 }
	$6 = ($6 + [165])
	goto $label$74 
	
.LABEL $label$75
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$74
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$73
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$72 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1376]
	$10 = (int_64)0
	
.LOOP $label$76:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$77 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$79 }
	$6 = ($6 + [165])
	goto $label$78 
	
.LABEL $label$79
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$78
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$77
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$76 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1392]
	$10 = (int_64)0
	
.LOOP $label$80:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$81 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$83 }
	$6 = ($6 + [165])
	goto $label$82 
	
.LABEL $label$83
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$82
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$81
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$80 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1408]
	$10 = (int_64)0
	
.LOOP $label$84:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$85 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$87 }
	$6 = ($6 + [165])
	goto $label$86 
	
.LABEL $label$87
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$86
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$85
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$84 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1424]
	$10 = (int_64)0
	
.LOOP $label$88:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$89 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$91 }
	$6 = ($6 + [165])
	goto $label$90 
	
.LABEL $label$91
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$90
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$89
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$88 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1440]
	$10 = (int_64)0
	
.LOOP $label$92:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$93 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$95 }
	$6 = ($6 + [165])
	goto $label$94 
	
.LABEL $label$95
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$94
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$93
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$92 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1456]
	$10 = (int_64)0
	
.LOOP $label$96:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$97 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$99 }
	$6 = ($6 + [165])
	goto $label$98 
	
.LABEL $label$99
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$98
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$97
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$96 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1472]
	$10 = (int_64)0
	
.LOOP $label$100:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$101 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$103 }
	$6 = ($6 + [165])
	goto $label$102 
	
.LABEL $label$103
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$102
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$101
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$100 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1488]
	$10 = (int_64)0
	
.LOOP $label$104:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$105 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$107 }
	$6 = ($6 + [165])
	goto $label$106 
	
.LABEL $label$107
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$106
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$105
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$104 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1504]
	$10 = (int_64)0
	
.LOOP $label$108:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$109 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$111 }
	$6 = ($6 + [165])
	goto $label$110 
	
.LABEL $label$111
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$110
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$109
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$108 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1520]
	$10 = (int_64)0
	
.LOOP $label$112:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$113 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$115 }
	$6 = ($6 + [165])
	goto $label$114 
	
.LABEL $label$115
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$114
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$113
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$112 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1536]
	$10 = (int_64)0
	
.LOOP $label$116:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$117 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$119 }
	$6 = ($6 + [165])
	goto $label$118 
	
.LABEL $label$119
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$118
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$117
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$116 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1552]
	$10 = (int_64)0
	
.LOOP $label$120:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$121 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$123 }
	$6 = ($6 + [165])
	goto $label$122 
	
.LABEL $label$123
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$122
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$121
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$120 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1568]
	$10 = (int_64)0
	
.LOOP $label$124:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$125 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$127 }
	$6 = ($6 + [165])
	goto $label$126 
	
.LABEL $label$127
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$126
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$125
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$124 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1584]
	$10 = (int_64)0
	
.LOOP $label$128:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$129 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$131 }
	$6 = ($6 + [165])
	goto $label$130 
	
.LABEL $label$131
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$130
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$129
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$128 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1600]
	$10 = (int_64)0
	
.LOOP $label$132:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$133 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$135 }
	$6 = ($6 + [165])
	goto $label$134 
	
.LABEL $label$135
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$134
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$133
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$132 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1616]
	$10 = (int_64)0
	
.LOOP $label$136:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$137 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$139 }
	$6 = ($6 + [165])
	goto $label$138 
	
.LABEL $label$139
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$138
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$137
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$136 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1632]
	$10 = (int_64)0
	
.LOOP $label$140:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$141 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$143 }
	$6 = ($6 + [165])
	goto $label$142 
	
.LABEL $label$143
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$142
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$141
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$140 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1648]
	$10 = (int_64)0
	
.LOOP $label$144:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$145 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$147 }
	$6 = ($6 + [165])
	goto $label$146 
	
.LABEL $label$147
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$146
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$145
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$144 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1664]
	$10 = (int_64)0
	
.LOOP $label$148:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$149 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$151 }
	$6 = ($6 + [165])
	goto $label$150 
	
.LABEL $label$151
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$150
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$149
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$148 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1680]
	$10 = (int_64)0
	
.LOOP $label$152:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$153 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$155 }
	$6 = ($6 + [165])
	goto $label$154 
	
.LABEL $label$155
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$154
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$153
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$152 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1696]
	$10 = (int_64)0
	
.LOOP $label$156:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$157 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$159 }
	$6 = ($6 + [165])
	goto $label$158 
	
.LABEL $label$159
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$158
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$157
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$156 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1712]
	$10 = (int_64)0
	
.LOOP $label$160:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$161 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$163 }
	$6 = ($6 + [165])
	goto $label$162 
	
.LABEL $label$163
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$162
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$161
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$160 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1728]
	$10 = (int_64)0
	
.LOOP $label$164:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$165 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$167 }
	$6 = ($6 + [165])
	goto $label$166 
	
.LABEL $label$167
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$166
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$165
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$164 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1744]
	$10 = (int_64)0
	
.LOOP $label$168:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$169 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$171 }
	$6 = ($6 + [165])
	goto $label$170 
	
.LABEL $label$171
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$170
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$169
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$168 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$172 }
	CALL eosio_assert([0], [1760])
	
.LABEL $label$172
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1808]
	$10 = (int_64)0
	
.LOOP $label$173:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$174 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$176 }
	$6 = ($6 + [165])
	goto $label$175 
	
.LABEL $label$176
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$175
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$174
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$173 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$177 }
	CALL eosio_assert([0], [1760])
	
.LABEL $label$177
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1824]
	$10 = (int_64)0
	
.LOOP $label$178:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$179 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$181 }
	$6 = ($6 + [165])
	goto $label$180 
	
.LABEL $label$181
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$180
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$179
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$178 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$182 }
	CALL eosio_assert([0], [1760])
	
.LABEL $label$182
	*(($12 + [40])) = [0]
	*($12 + [24]) = (int_64)-1
	*($12 + [32]) = (int_64)0
	$9 = *($0)
	*($12 + [8]) = $9
	*($12 + [16]) = $9
	*($12 + [44]) = [0]
	$7 = CALL db_find_i64($9, $9, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$183 }
	$7 = CALL $30(($12 + [8]), $7)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($12 + [8])), [112])
	$9 = *($7 + [48])
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$184 }
	CALL eosio_assert([0], [1840])
	$9 = *($7 + [48])
	
.LABEL $label$184
	if ( ((uint_64)((int_64)$9 + (int_64)86400000000) <= (uint_64)CALL current_time()) ){ goto $label$183 }
	CALL eosio_assert([0], [1888])
	
.LABEL $label$183
	$0 = *($12 + [32])
	if ( ($0 == 0) ){ goto $label$7 }
	$3 = ($12 + [36])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$16 }
	
.LOOP $label$185:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$186 }
	CALL $75($6)
	
.LABEL $label$186
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$185 }
	$7 = *(($12 + [32]))
	goto $label$15 
	
.LABEL $label$18
	CALL eosio_assert([0], [176])
	$0 = *($12 + [32])
	if ( ($0 == 0) ){ goto $label$7 }
	
.LABEL $label$17
	$3 = ($12 + [36])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$188 }
	
.LOOP $label$189:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$190 }
	CALL $75($6)
	
.LABEL $label$190
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$189 }
	$7 = *(($12 + [32]))
	goto $label$187 
	
.LABEL $label$188
	$7 = $0
	
.LABEL $label$187
	*($3) = $0
	CALL $75($7)
	goto $label$7 
	
.LABEL $label$16
	$7 = $0
	
.LABEL $label$15
	*($3) = $0
	CALL $75($7)
	
.LABEL $label$7
	*([0] + [4]) = ($12 + [48])
}

void .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$2 = *($0)
	*($5 + [8]) = $2
	*($5 + [16]) = $2
	$4 = [0]
	$1 = CALL db_find_i64($2, $2, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $22(($5 + [8]), $1)
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)($5 + [8])), [112])
	
.LABEL $label$1
	$1 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($1, [176])
	CALL eosio_assert((int_64)(*($4) == 0), [2432])
	$2 = *($0)
	CALL eosio_assert($1, [256])
	CALL $68(($5 + [8]), $4, $2, $5)
	$1 = *($5 + [32])
	if ( ($1 == 0) ){ goto $label$2 }
	$3 = ($5 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $75($0)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$5 }
	$4 = *(($5 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $1
	
.LABEL $label$3
	*($3) = $1
	CALL $75($4)
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$2 = *($0)
	*($5 + [8]) = $2
	*($5 + [16]) = $2
	$4 = [0]
	$1 = CALL db_find_i64($2, $2, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $22(($5 + [8]), $1)
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)($5 + [8])), [112])
	
.LABEL $label$1
	$1 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($1, [176])
	CALL eosio_assert(((int_64)*($4) == (int_64)1), [2352])
	CALL eosio_assert(((int_64)*($4 + [24]) == (int_64)*($4 + [16])), [2384])
	$2 = *($0)
	CALL eosio_assert($1, [256])
	CALL $67(($5 + [8]), $4, $2, $5)
	$1 = *($5 + [32])
	if ( ($1 == 0) ){ goto $label$2 }
	$3 = ($5 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $75($0)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$5 }
	$4 = *(($5 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $1
	
.LABEL $label$3
	*($3) = $1
	CALL $75($4)
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $12 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	*($6 + [120]) = $1
	CALL require_auth($1)
	$2 = [0]
	*(($6 + [112])) = [0]
	*($6 + [96]) = (int_64)-1
	*($6 + [104]) = (int_64)0
	$4 = *($0)
	*($6 + [80]) = $4
	*($6 + [88]) = $4
	$3 = CALL db_find_i64($4, $4, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$2 }
	$2 = CALL $22(($6 + [80]), $3)
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)($6 + [80])), [112])
	*($6 + [76]) = $2
	*($6 + [72]) = ($6 + [80])
	$3 = [1]
	$1 = *($6 + [120])
	goto $label$1 
	
.LABEL $label$2
	*($6 + [76]) = [0]
	*($6 + [72]) = ($6 + [80])
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [176])
	CALL eosio_assert((int_64)(*($2) == 0), [2112])
	$4 = CALL $55($0, $1)
	*($6 + [64]) = $4
	CALL eosio_assert(((int_64)$4 != (int_64)0), [2160])
	*(($6 + [56])) = [0]
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	$4 = *($0)
	*($6 + [24]) = $4
	*($6 + [32]) = $4
	*($6 + [60]) = [0]
	$2 = CALL db_find_i64($4, $4, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$2 = CALL $30(($6 + [24]), $2)
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)($6 + [24])), [112])
	$1 = *($0)
	*($6) = $0
	*($6 + [4]) = ($6 + [64])
	*($6 + [8]) = ($6 + [80])
	*($6 + [12]) = ($6 + [72])
	CALL eosio_assert([1], [256])
	CALL $64(($6 + [24]), $2, $1, $6)
	$3 = *($6 + [48])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = *($0)
	*($6 + [4]) = ($6 + [64])
	*($6) = ($6 + [120])
	*($6 + [8]) = ($6 + [72])
	CALL $62(($6 + [16]), ($6 + [24]), $1, $6)
	$2 = *($6 + [76])
	$1 = *($0)
	*($6) = ($6 + [64])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [256])
	CALL $63(($6 + [80]), $2, $1, $6)
	$3 = *($6 + [48])
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = ($6 + [52])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	CALL $75($2)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($6 + [48]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $3
	
.LABEL $label$6
	*($5) = $3
	CALL $75($0)
	
.LABEL $label$3
	$3 = *($6 + [104])
	if ( ($3 == 0) ){ goto $label$10 }
	$5 = ($6 + [108])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$14 }
	CALL $75($2)
	
.LABEL $label$14
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$13 }
	$0 = *(($6 + [104]))
	goto $label$11 
	
.LABEL $label$12
	$0 = $3
	
.LABEL $label$11
	*($5) = $3
	CALL $75($0)
	
.LABEL $label$10
	*([0] + [4]) = ($6 + [128])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [96])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [640])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [640])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [640])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [640])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [640])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [640])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [640])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [640])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [640])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	$4 = *($0 + [4])
	*($1 + [8]) = *(*(*($4) + [4]) + [8])
	$2 = *($0)
	*($1 + [24]) = *(*(*($4) + [4]) + [24])
	*($1 + [16]) = *(*(*($4) + [4]) + [16])
	*($1 + [32]) = *(*(*($4) + [4]) + [32])
	*($1) = *(*(*($4) + [4]))
	*($7 + [64]) = ($7 + [56])
	*($7 + [60]) = $7
	*($7 + [56]) = $7
	CALL $33(($7 + [56]), $1)
	$3 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)-5003134530366734336, *(*($0 + [8])), $3, $7, [56])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($2 + [8]))
	$5 = *(*(($0 + [8])))
	$6 = *($1)
	*($7 + [72]) = *(($1 + [8]))
	*($1 + [64]) = CALL db_idx64_store($3, (int_64)-5003134530366734336, $5, $6, ($7 + [72]))
	*([0] + [4]) = ($7 + [80])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $74(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $78($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $75($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $75($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $74(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $78($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $75($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $75($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [640])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [640])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [640])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [640])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [640])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [640])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [640])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [432])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $74([72])) + [56]) = $0
	CALL $31(($8 + [32]), $6)
	*($6 + [64]) = [-1]
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $32(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $75($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [96])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [96])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [96])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [96])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [96])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [96])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [96])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $58 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [112])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $59($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [112])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [432])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $74([32])
	$6 = CALL $60($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $61(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $75($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $74(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $78($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $75($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $75($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [144])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$4 = *(*($3))
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)1)
	*($1 + [64]) = ((int_64)$4 + (int_64)*($1 + [64]))
	CALL eosio_assert([1], [576])
	*($5 + [88]) = ($5 + [72])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	*($5 + [96]) = ($5 + [80])
	*($5 + [108]) = ($1 + [8])
	*($5 + [104]) = $1
	*($5 + [112]) = ($1 + [16])
	*($5 + [116]) = ($1 + [24])
	*($5 + [120]) = ($1 + [32])
	*($5 + [124]) = ($1 + [40])
	*($5 + [128]) = ($1 + [48])
	*($5 + [132]) = ($1 + [56])
	*($5 + [136]) = ($1 + [64])
	CALL $36(($5 + [104]), ($5 + [96]))
	CALL db_update_i64(*($1 + [76]), $2, $5, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [144])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($8 + [72]) = *($1 + [8])
	$4 = *($1)
	$5 = *($3 + [8])
	$6 = *(*($3))
	$7 = *(*($3 + [12]) + [4])
	*($8 + [60]) = $1
	*($8 + [56]) = *($3 + [4])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [256])
	CALL $65($5, $7, $6, ($8 + [56]))
	$6 = *(*($3 + [4]))
	*($1 + [48]) = (int_64)0
	*($1 + [40]) = $6
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [576])
	*($8 + [64]) = ($8 + [56])
	*($8 + [60]) = $8
	*($8 + [56]) = $8
	CALL $33(($8 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $8, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [88]) = *(($1 + [8]))
	if ( (CALL memcmp(($8 + [72]), ($8 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530400288768, ($8 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($8 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [96])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [144])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [656])
	*(($4 = CALL $74([88])) + [72]) = $1
	*($4 + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [32]) = (int_64)100
	*($4 + [16]) = (int_64)0
	*($8 + [88]) = ($8 + [72])
	*($8 + [84]) = $8
	*($8 + [80]) = $8
	*($8 + [96]) = ($8 + [80])
	*($8 + [108]) = ($4 + [8])
	*($8 + [104]) = $4
	*($8 + [112]) = ($4 + [16])
	*($8 + [116]) = ($4 + [24])
	*($8 + [120]) = ($4 + [32])
	*($8 + [124]) = ($4 + [40])
	*($8 + [128]) = ($4 + [48])
	*($8 + [132]) = ($4 + [56])
	*($8 + [136]) = ($4 + [64])
	CALL $36(($8 + [104]), ($8 + [96]))
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550573565312, $2, (int_64)1, $8, [72])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)2
	
.LABEL $label$1
	*($8 + [104]) = $4
	*($8) = (int_64)1
	$5 = *($4 + [76])
	*($8 + [80]) = $5
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = (int_64)1
	*($6 + [16]) = $5
	*($8 + [104]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $38(($1 + [24]), ($8 + [104]), $8, ($8 + [80]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [104])
	*($8 + [104]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $75($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [144])
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $74(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $78($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $75($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $75($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [576])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [8])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [16])
	*($4 + [116]) = ($1 + [24])
	*($4 + [120]) = ($1 + [32])
	*($4 + [124]) = ($1 + [40])
	*($4 + [128]) = ($1 + [48])
	*($4 + [132]) = ($1 + [56])
	*($4 + [136]) = ($1 + [64])
	CALL $36(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*($1 + [76]), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$4 = *($1 + [8])
	*($1 + [8]) = ((int_64)*(*(*($3) + [4]) + [8]) + (int_64)1)
	*($5 + [72]) = $4
	$4 = *($1)
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3 + [4])))
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3 + [4])))
	CALL eosio_assert([1], [576])
	*($5 + [64]) = ($5 + [56])
	*($5 + [60]) = $5
	*($5 + [56]) = $5
	CALL $33(($5 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $5, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [88]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530400288768, ($5 + [80]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [576])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [8])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [16])
	*($4 + [116]) = ($1 + [24])
	*($4 + [120]) = ($1 + [32])
	*($4 + [124]) = ($1 + [40])
	*($4 + [128]) = ($1 + [48])
	*($4 + [132]) = ($1 + [56])
	*($4 + [136]) = ($1 + [64])
	CALL $36(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*($1 + [76]), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

int_64 .FUNC $55 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [32]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*(($10 + [40])) = [0]
	*($10 + [16]) = $1
	*($10 + [8]) = $8
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$7 = *(CALL $58(($10 + [8]), (int_64)1414742342, [2320]))
	$3 = *($10 + [32])
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = ($10 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	CALL $75($2)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($10 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $3
	
.LABEL $label$6
	*($4) = $3
	CALL $75($5)
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [48])
	return $7
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1 + [64]) = (int_64))(*($1 + [64]) - *(*(*($3) + [4]) + [40]))
	CALL eosio_assert([1], [576])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [8])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [16])
	*($4 + [116]) = ($1 + [24])
	*($4 + [120]) = ($1 + [32])
	*($4 + [124]) = ($1 + [40])
	*($4 + [128]) = ($1 + [48])
	*($4 + [132]) = ($1 + [56])
	*($4 + [136]) = ($1 + [64])
	CALL $36(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*($1 + [76]), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	*($1 + [40]) = (int_64)0
	*($6 + [72]) = *($1 + [8])
	$4 = *($1)
	*($1 + [48]) = CALL current_time()
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [576])
	*($6 + [64]) = ($6 + [56])
	*($6 + [60]) = $6
	*($6 + [56]) = $6
	CALL $33(($6 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $6, [56])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [88]) = *(($1 + [8]))
	if ( (CALL memcmp(($6 + [72]), ($6 + [88]), [8]) == 0) ){ goto $label$2 }
	$5 = ($1 + [64])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530400288768, ($6 + [80]), $4)
	*($5) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($6 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [96])
}