(data (i32.const 8192) "eosio.token\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8213) "transfer\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8308) "string is too long to be a valid name\00")
(data (i32.const 8346) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8413) "character is not in allowed character set for names\00")
(data (i32.const 8465) "no game\00stoull\00")
(data (i32.const 8480) "71bdd954a544cc63\00")
(data (i32.const 8498) "game timeout, thanks for playing\00")
(data (i32.const 8531) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8582) "error reading iterator\00")
(data (i32.const 8605) "read\00")
(data (i32.const 8610) "get\00")
(data (i32.const 8614) "cannot pass end iterator to erase\00")
(data (i32.const 8648) "cannot increment end iterator\00")
(data (i32.const 8678) "object passed to erase is not in multi_index\00")
(data (i32.const 8723) "cannot erase objects in table of another contract\00")
(data (i32.const 8773) "attempt to remove object that was not in multi_index\00")
(data (i32.const 8826) "active")
(data (i32.const 8832) "eosio.token")
(data (i32.const 8843) "transfer")
(data (i32.const 8851) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8900) "invalid symbol name\00")
(data (i32.const 8920) "write\00")
(data (i32.const 8926) "wrong hash1\00")
(data (i32.const 8938) "hash2 has submited\00")
(data (i32.const 8957) "only eos\00")
(data (i32.const 8966) "Invalid token\00: no conversion\00")
(data (i32.const 8996) "Quantity must be positive\00: out of range\00")
(data (i32.const 9037) "cannot create objects in table of another contract\00")
(data (i32.const 9088) "cannot pass end iterator to modify\00")
(data (i32.const 9123) "object passed to modify is not in multi_index\00")
(data (i32.const 9169) "cannot modify objects in table of another contract\00")
(data (i32.const 9220) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9279) "wrong game\00")
(data (i32.const 9290) "same hash\00")
(data (i32.const 9300) "wrong hash\00")
(data (i32.const 9311) "1\00")
(data (i32.const 9313) "2\00")
(data (i32.const 9315) "thanks for playing\00")
(data (i32.const 9334) "pvpgamescoin")
(data (i32.const 9346) "issue")
(data (i32.const 17776) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$7 (param i32 i32)))
(import "env" "db_get_i64" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$9 (result i64)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "abort" (func $fimport$13))
(import "env" "memset" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$16 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$24 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$27 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$28 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$31 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$33 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$34 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$35 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $3))
(export "_ZdlPv" (func $38))
(export "_Znwj" (func $36))
(export "_Znaj" (func $37))
(export "_ZdaPv" (func $39))
(export "_ZnwjSt11align_val_t" (func $40))
(export "_ZnajSt11align_val_t" (func $41))
(export "_ZdlPvSt11align_val_t" (func $42))
(export "_ZdaPvSt11align_val_t" (func $43))
(table $0 5 5 anyfunc)
(elem (i32.const 1) $5 $7 $9 $11)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18033))
(global $global$2 i32 (i32.const 18033))


void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8605])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8605])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8605])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8605])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $13(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $62 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [9123])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [9169])
	$6 = *($1)
	CALL $34($3, $1)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9220])
	$3 = *($1 + [32])
	$7 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [32])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$9 = *($1 + [44])
	$9 = ( *(($1 + [48])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$3 = ($9 + $3)
	$8 = (CASTING uint_64)(uint_32 $9)
	$9 = ($1 + [44])
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $73($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [40]) = $7
	*($5 + [44]) = $9
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [32]) = ($1 + [16])
	*($5 + [36]) = ($1 + [24])
	CALL $33(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $76($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

void .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17756])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17564]
	$3 = (((int_32)$1 * (int_32)[12]) + [17564])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_64 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $65($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $60()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $65($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [17777]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $64($0, (int_64)0)
	*(CALL $60()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $65($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $65($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $65($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $65($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [17777])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [17777]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [17777]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $65($0)
	$5 = *(($6 + [17777]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $65($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [17777]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8204]))
	$8 = (int_64)0
	$5 = *(($6 + [17777]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [17777]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $65($0)
	$5 = *(($6 + [17777]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $65($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [17777]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $64($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [17777]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [17777]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $65($0) + [17777]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $60()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $60()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $60()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $65 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $63($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $73 (int_32 $0)
{
	return CALL $74([9372], $0)
}

int_64 .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $64($3, (int_64)0)
	$4 = CALL $66($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8920])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8920])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8610])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $23($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8605])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	$1 = CALL $45($2, ($1 + [36]))
	$5 = CALL $45(($2 + [16]), ($1 + [24]))
	$4 = CALL $45(($2 + [32]), ($1 + [12]))
	$3 = CALL $45(($2 + [48]), $1)
	CALL $35($0, $3, $4, $5, $1)
	if ( (*($1) & [1]) ){ goto $label$7 }
	if ( (*($5) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($3) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$9()), [9037])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56]) = $1
	CALL $32(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $27(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [52])))
	
.LABEL $label$4
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $59($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [144])
	$global$0 = $4
	*($4 + [44]) = [12]
	*($4 + [40]) = [9334]
	*($4 + [32]) = *($4 + [40])
	$5 = *(CALL $4(($4 + [80]), ($4 + [32])))
	*($4 + [44]) = [6]
	*($4 + [40]) = [8826]
	*($4 + [24]) = *($4 + [40])
	$6 = *(CALL $4(($4 + [80]), ($4 + [24])))
	*($4 + [44]) = [12]
	*($4 + [40]) = [9334]
	*($4 + [16]) = *($4 + [40])
	$7 = *(CALL $4(($4 + [80]), ($4 + [16])))
	*($4 + [44]) = [5]
	*($4 + [40]) = [9346]
	*($4 + [8]) = *($4 + [40])
	$8 = *(CALL $4(($4 + [80]), ($4 + [8])))
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8851])
	$9 = (int_64)5264976
	$10 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $11
	$12 = [1]
	$13 = $10
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $11
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$12 = ((int_32)$10 < (int_32)[6])
	$13 = ($10 + [1])
	$10 = $13
	if ( $12 ){ goto $label$5 }
	$12 = [1]
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$12 = [0]
	
.LABEL $label$1
	CALL eosio_assert($12, [8900])
	*((($4 + [40]) + [16])) = (int_64)1347833860
	*($4 + [48]) = $2
	*($4 + [40]) = $1
	$12 = CALL $45((($4 + [40]) + [24]), $3)
	*($4 + [88]) = $8
	*($4 + [80]) = $7
	*(($10 = CALL _Znwj([16]))) = $5
	*($10 + [8]) = $6
	*(($4 + [116])) = [0]
	$13 = ($10 + [16])
	*((($4 + [80]) + [24])) = $13
	*(($4 + [100])) = $13
	*($4 + [96]) = $10
	*($4 + [108 align=4]) = (int_64)0
	$10 = *($12)
	$13 = ( *((($4 + [40]) + [28])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($13 + [24])
	$9 = (CASTING uint_64)(uint_32 $13)
	$13 = (($4 + [80]) + [28])
	
.LOOP $label$6:
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$6 }
	if ( ($10 == 0) ){ goto $label$8 }
	CALL $23($13, $10)
	$13 = *(($4 + [112]))
	$10 = *(($4 + [108]))
	goto $label$7 
	
.LABEL $label$8
	$13 = [0]
	$10 = [0]
	
.LABEL $label$7
	*($4 + [120]) = $10
	*($4 + [128]) = $13
	$13 = ($13 - $10)
	CALL eosio_assert(((int_32)$13 > (int_32)[7]), [8920])
	CALL memcpy($10, ($4 + [40]), [8])
	CALL eosio_assert(((int_32)($13 + [-8]) > (int_32)[7]), [8920])
	CALL memcpy(($10 + [8]), (($4 + [40]) + [8]), [8])
	*($4 + [136]) = *((($4 + [40]) + [16]))
	CALL eosio_assert(((int_32)($13 + [-16]) > (int_32)[7]), [8920])
	CALL memcpy(($10 + [16]), ($4 + [136]), [8])
	*($4 + [124]) = ($10 + [24])
	CALL $29(($4 + [120]), $12)
	CALL $25(($4 + [120]), ($4 + [80]))
	$10 = *($4 + [120])
	CALL send_inline($10, (*($4 + [124]) - $10))
	$10 = *($4 + [120])
	if ( ($10 == 0) ){ goto $label$9 }
	*($4 + [124]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$9
	$10 = *($4 + [108])
	if ( ($10 == 0) ){ goto $label$10 }
	*(($4 + [112])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$10
	$10 = *($4 + [96])
	if ( ($10 == 0) ){ goto $label$11 }
	*(($4 + [100])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$11
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$12
	$global$0 = ($4 + [144])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $23($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8920])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8920])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $31(CALL $30($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8920])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8920])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8920])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8920])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $29(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $59($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [52])))
	
.LABEL $label$11
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8605])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8605])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8605])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8605])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $13(*($1), *($0 + [16]))
	CALL $13(*($1), *($0 + [20]))
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $75($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8222])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $76($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $71(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9352])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $71(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $48($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $44 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $73($1)
	
.LABEL $label$2
	*(CALL $60()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $73(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $76($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $68(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9364]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9368])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9364]) = [1]
	$2 = ($2 << [16])
	*([0] + [9368]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9368])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9368]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9364]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9364]) = [1]
	$3 = ($3 << [16])
	*([0] + [9368]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9368])
	
.LABEL $label$10
	*([0] + [9368]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $60 ()
{
	return [9356]
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $60())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $72($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $73($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	CALL $13(($4 + [48]), ($4 + [64]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4)
	$3 = *($8)
	*((($4 + [96]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [80])
	*($4 + [32]) = $0
	*($4 + [96]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$8 = CALL $45(($4 + [80]), ($4 + [64]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $45(($4 + [96]), $8)
	CALL void $3((int_32 $5), (int_32 $6))
	if ( (*($4 + [96]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [80]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [64]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $76($2)
	$2 = [1]
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [72])))
	$global$0 = ($4 + [112])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [112])
	return $2
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	$5 = ($global$0 - [256])
	$global$0 = $5
	CALL require_auth(*($0))
	*((($5 + [208]) + [32])) = [0]
	*($5 + [224]) = (int_64)-1
	*($5 + [232]) = (int_64)0
	$6 = *($0)
	*($5 + [208]) = $6
	*($5 + [216]) = $6
	$7 = [0]
	$1 = CALL db_find_i64($6, $6, (int_64)7035924439720001536, CALL $55($1, [0], [16]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $14(($5 + [208]), $1)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($5 + [208])), [8531])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8465])
	*((($5 + [152]) + [24])) = *(($7 + [24]))
	*((($5 + [152]) + [16])) = *(($7 + [16]))
	*((($5 + [152]) + [8])) = *(($7 + [8]))
	*($5 + [152]) = *($7)
	$9 = CALL $45((($5 + [152]) + [32]), ($7 + [32]))
	$10 = CALL $45((($5 + [152]) + [44]), ($7 + [44]))
	CALL $1(($5 + [136]), $4)
	$11 = CALL $45(($5 + [120]), *($5 + [136]))
	$12 = CALL $45(($5 + [104]), (*($5 + [136]) + [12]))
	$13 = [1]
	$4 = ($4 & [1])
	$4 = *($5 + [104])
	$15 = ($4 & [1])
	$4 = *($5 + [120])
	$14 = uint_32($4 >> [1])
	$16 = ( *($11 + [4]) ? $14 : $15 )
	if ( ((int_32)$16 != (int_32)( *($12 + [4]) ? uint_32($4 >> [1]) : $4 )) ){ goto $label$2 }
	$4 = ( *($12 + [8]) ? ($12 + [1]) : $4 )
	$1 = ($11 + [1])
	if ( $15 ){ goto $label$4 }
	if ( ($16 == 0) ){ goto $label$3 }
	$15 = ([0] - $14)
	$13 = [1]
	
.LOOP $label$5:
	if ( ((int_32)*($1) != (int_32)*($4)) ){ goto $label$2 }
	$4 = ($4 + [1])
	$1 = ($1 + [1])
	$15 = ($15 + [1])
	if ( $15 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ($16 == 0) ){ goto $label$3 }
	$13 = ((int_32)CALL $69(( *($11 + [8]) ? $1 : $15 ), $4, $16) != (int_32)[0])
	goto $label$2 
	
.LABEL $label$3
	$13 = [0]
	
.LABEL $label$2
	CALL eosio_assert($13, [9290])
	$1 = ($4 & [1])
	$4 = *($9)
	$16 = ($14 & [1])
	$14 = *($5 + [120])
	$13 = uint_32($14 >> [1])
	$17 = *(($11 + [4]))
	$18 = ( $17 ? $13 : $16 )
	if ( ((int_32)$18 != (int_32)( *(($5 + [188])) ? uint_32($4 >> [1]) : $1 )) ){ goto $label$7 }
	$15 = [1]
	$4 = ($11 + [1])
	$1 = ( *(($5 + [192])) ? ($9 + [1]) : $1 )
	if ( $16 ){ goto $label$8 }
	if ( ($18 == 0) ){ goto $label$6 }
	$16 = ([0] - $13)
	
.LOOP $label$9:
	if ( ((int_32)*($4) != (int_32)*($1)) ){ goto $label$7 }
	$15 = [1]
	$1 = ($1 + [1])
	$4 = ($4 + [1])
	$16 = ($16 + [1])
	if ( $16 ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$8
	if ( ($18 == 0) ){ goto $label$6 }
	if ( (CALL $69(( *($11 + [8]) ? $4 : $16 ), $1, $18) == 0) ){ goto $label$6 }
	$14 = *($5 + [120])
	$13 = uint_32($14 >> [1])
	$17 = *(($11 + [4]))
	
.LABEL $label$7
	$1 = ($4 & [1])
	$4 = *($10)
	$15 = ($14 & [1])
	$16 = ( $17 ? $13 : $15 )
	if ( ((int_32)$16 != (int_32)( *(($5 + [200])) ? uint_32($4 >> [1]) : $1 )) ){ goto $label$12 }
	$4 = ($11 + [1])
	$1 = ( *(($5 + [204])) ? ($10 + [1]) : $1 )
	if ( $15 ){ goto $label$11 }
	if ( ($16 == 0) ){ goto $label$10 }
	
.LOOP $label$13:
	if ( ((int_32)*($4) != (int_32)*($1)) ){ goto $label$12 }
	$15 = [1]
	$1 = ($1 + [1])
	$4 = ($4 + [1])
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$13 }
	goto $label$6 
	
.LABEL $label$12
	$15 = [0]
	goto $label$6 
	
.LABEL $label$11
	if ( ($16 == 0) ){ goto $label$10 }
	$15 = (CALL $69(( *($11 + [8]) ? $4 : $15 ), $1, $16) == 0)
	goto $label$6 
	
.LABEL $label$10
	$15 = [1]
	
.LABEL $label$6
	CALL eosio_assert($15, [9300])
	$1 = ($4 & [1])
	$4 = *($9)
	$16 = ($14 & [1])
	$14 = *($5 + [104])
	$13 = uint_32($14 >> [1])
	$17 = *(($12 + [4]))
	$18 = ( $17 ? $13 : $16 )
	if ( ((int_32)$18 != (int_32)( *(($5 + [188])) ? uint_32($4 >> [1]) : $1 )) ){ goto $label$16 }
	$4 = ($12 + [1])
	$1 = ( *(($5 + [192])) ? ($9 + [1]) : $1 )
	if ( $16 ){ goto $label$17 }
	if ( ($18 == 0) ){ goto $label$15 }
	$16 = ([0] - $13)
	
.LOOP $label$18:
	if ( ((int_32)*($4) != (int_32)*($1)) ){ goto $label$16 }
	$15 = [1]
	$1 = ($1 + [1])
	$4 = ($4 + [1])
	$16 = ($16 + [1])
	if ( $16 ){ goto $label$18 }
	goto $label$14 
	
.LABEL $label$17
	$15 = [1]
	if ( ($18 == 0) ){ goto $label$14 }
	if ( (CALL $69(( *($12 + [8]) ? $4 : $16 ), $1, $18) == 0) ){ goto $label$14 }
	$14 = *($5 + [104])
	$13 = uint_32($14 >> [1])
	$17 = *(($12 + [4]))
	
.LABEL $label$16
	$1 = ($4 & [1])
	$4 = *($10)
	$16 = ($14 & [1])
	$14 = ( $17 ? $13 : $16 )
	if ( ((int_32)$14 != (int_32)( *(($5 + [200])) ? uint_32($4 >> [1]) : $1 )) ){ goto $label$20 }
	$15 = [1]
	$4 = ($12 + [1])
	$1 = ( *(($5 + [204])) ? ($10 + [1]) : $1 )
	if ( $16 ){ goto $label$19 }
	if ( ($14 == 0) ){ goto $label$14 }
	
.LOOP $label$21:
	if ( ((int_32)*($4) != (int_32)*($1)) ){ goto $label$20 }
	$15 = [1]
	$1 = ($1 + [1])
	$4 = ($4 + [1])
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$21 }
	goto $label$14 
	
.LABEL $label$20
	$15 = [0]
	goto $label$14 
	
.LABEL $label$19
	if ( ($14 == 0) ){ goto $label$14 }
	$15 = (CALL $69(( *($12 + [8]) ? $4 : $16 ), $1, $14) == 0)
	goto $label$14 
	
.LABEL $label$15
	$15 = [1]
	
.LABEL $label$14
	CALL eosio_assert($15, [9300])
	*(($5 + [96])) = [0]
	*($5 + [88]) = (int_64)0
	$4 = CALL $70([8497])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$38 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$41 }
	*($5 + [88]) = ($4 << [1])
	$1 = (($5 + [88]) | [1])
	if ( $4 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$15 = (($4 + [16]) & [-16])
	$1 = CALL _Znwj($15)
	*($5 + [88]) = ($15 | [1])
	*($5 + [96]) = $1
	*($5 + [92]) = $4
	
.LABEL $label$40
	CALL memcpy($1, [8497], $4)
	
.LABEL $label$39
	*(($1 + $4)) = [0]
	$4 = *($5 + [136])
	$1 = *($4 + [24])
	$15 = CALL $70([9311])
	if ( ((int_32)$15 != (int_32)( *(($4 + [28])) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$44 }
	if ( (CALL $52(($4 + [24]), [0], [-1], [9311], $15) == 0) ){ goto $label$43 }
	
.LABEL $label$44
	$4 = *($5 + [136])
	$1 = *($4 + [24])
	$15 = CALL $70([9313])
	if ( ((int_32)$15 != (int_32)( *(($4 + [28])) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$42 }
	if ( CALL $52(($4 + [24]), [0], [-1], [9313], $15) ){ goto $label$42 }
	CALL $47(($5 + [88]), (*($5 + [136]) + [12]))
	goto $label$42 
	
.LABEL $label$43
	CALL $47(($5 + [88]), *($5 + [136]))
	
.LABEL $label$42
	$13 = ($4 & [1])
	$4 = *($5 + [88])
	$14 = uint_32($4 >> [1])
	$16 = *($5 + [92])
	$1 = ( $16 ? $14 : $13 )
	if ( ($1 == 0) ){ goto $label$47 }
	$15 = ($4 & [1])
	$4 = *($9)
	$17 = uint_32($4 >> [1])
	if ( ((int_32)( *(($5 + [188])) ? $17 : $15 ) != (int_32)$1) ){ goto $label$51 }
	$4 = ( *($5 + [96]) ? (($5 + [88]) | [1]) : $13 )
	if ( $15 ){ goto $label$52 }
	$15 = ([0] - $17)
	$1 = ($9 + [1])
	
.LOOP $label$53:
	if ( ((int_32)*($1) != (int_32)*($4)) ){ goto $label$51 }
	$4 = ($4 + [1])
	$1 = ($1 + [1])
	$15 = ($15 + [1])
	if ( $15 ){ goto $label$53 }
	goto $label$50 
	
.LABEL $label$52
	if ( (CALL $69(*(($5 + [192])), $4, $1) == 0) ){ goto $label$50 }
	$4 = *($5 + [88])
	$14 = uint_32($4 >> [1])
	$13 = ($4 & [1])
	$16 = *($5 + [92])
	
.LABEL $label$51
	$15 = ($4 & [1])
	$4 = *($10)
	$18 = uint_32($4 >> [1])
	$17 = ( *(($5 + [200])) ? $18 : $15 )
	if ( ((int_32)$17 != (int_32)( $16 ? $14 : $13 )) ){ goto $label$48 }
	$4 = ( *($5 + [96]) ? (($5 + [88]) | [1]) : $13 )
	$1 = ($10 + [1])
	if ( $15 ){ goto $label$49 }
	if ( ($17 == 0) ){ goto $label$46 }
	$15 = ([0] - $18)
	
.LOOP $label$54:
	if ( ((int_32)*($1) != (int_32)*($4)) ){ goto $label$48 }
	$4 = ($4 + [1])
	$1 = ($1 + [1])
	$15 = ($15 + [1])
	if ( $15 ){ goto $label$54 }
	goto $label$46 
	
.LABEL $label$50
	$4 = ($5 + [160])
	goto $label$45 
	
.LABEL $label$49
	if ( ($17 == 0) ){ goto $label$46 }
	if ( (CALL $69(( *(($5 + [204])) ? $1 : $15 ), $4, $17) == 0) ){ goto $label$46 }
	
.LABEL $label$48
	CALL eosio_assert([0], [9300])
	
.LABEL $label$47
	$6 = *($5 + [176])
	$6 = (int_64))($6 - ((uint_64)$6 / (uint_64)(int_64)100))
	goto $label$36 
	
.LABEL $label$46
	$4 = ($5 + [168])
	
.LABEL $label$45
	$6 = *($5 + [176])
	$6 = (int_64))($6 - ((uint_64)$6 / (uint_64)(int_64)100))
	$19 = *($4)
	if ( (int_64)($19 == 0) ){ goto $label$36 }
	*(($5 + [80])) = [0]
	*($5 + [72]) = (int_64)0
	$4 = CALL $70([9315])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$37 }
	$6 = ((int_64)$6 << (int_64)1)
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$57 }
	*($5 + [72]) = ($4 << [1])
	$1 = (($5 + [72]) | [1])
	if ( $4 ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	$15 = (($4 + [16]) & [-16])
	$1 = CALL _Znwj($15)
	*($5 + [72]) = ($15 | [1])
	*($5 + [80]) = $1
	*($5 + [76]) = $4
	
.LABEL $label$56
	CALL memcpy($1, [9315], $4)
	
.LABEL $label$55
	*(($1 + $4)) = [0]
	CALL $15($0, $19, $6, ($5 + [72]))
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*($5 + [80]))
	goto $label$35 
	
.LABEL $label$38
	CALL $44(($5 + [88]))
	
.LABEL $label$37
	CALL $44(($5 + [72]))
	
.LABEL $label$36
	*(($5 + [64])) = [0]
	*($5 + [56]) = (int_64)0
	$19 = *($5 + [160])
	$4 = CALL $70([9315])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$60 }
	*($5 + [56]) = ($4 << [1])
	$1 = (($5 + [56]) | [1])
	if ( $4 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	$15 = (($4 + [16]) & [-16])
	$1 = CALL _Znwj($15)
	*($5 + [56]) = ($15 | [1])
	*($5 + [64]) = $1
	*($5 + [60]) = $4
	
.LABEL $label$59
	CALL memcpy($1, [9315], $4)
	
.LABEL $label$58
	*(($1 + $4)) = [0]
	CALL $15($0, $19, $6, ($5 + [56]))
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$61 }
	CALL _ZdlPv(*($5 + [64]))
	
.LABEL $label$61
	*(($5 + [48])) = [0]
	*($5 + [40]) = (int_64)0
	$19 = *($5 + [168])
	$4 = CALL $70([9315])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$33 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$64 }
	*($5 + [40]) = ($4 << [1])
	$1 = (($5 + [40]) | [1])
	if ( $4 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$64
	$15 = (($4 + [16]) & [-16])
	$1 = CALL _Znwj($15)
	*($5 + [40]) = ($15 | [1])
	*($5 + [48]) = $1
	*($5 + [44]) = $4
	
.LABEL $label$63
	CALL memcpy($1, [9315], $4)
	
.LABEL $label$62
	*(($1 + $4)) = [0]
	CALL $15($0, $19, $6, ($5 + [40]))
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*($5 + [48]))
	
.LABEL $label$35
	*(($5 + [32])) = [0]
	*($5 + [24]) = (int_64)0
	$6 = *(($5 + [176]))
	$19 = *($5 + [160])
	$4 = CALL $70([9315])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$66 }
	$6 = ((int_64)$6 * (int_64)10)
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$69 }
	*($5 + [24]) = ($4 << [1])
	$1 = (($5 + [24]) | [1])
	if ( $4 ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	$15 = (($4 + [16]) & [-16])
	$1 = CALL _Znwj($15)
	*($5 + [24]) = ($15 | [1])
	*($5 + [32]) = $1
	*($5 + [28]) = $4
	
.LABEL $label$68
	CALL memcpy($1, [9315], $4)
	
.LABEL $label$67
	*(($1 + $4)) = [0]
	CALL $22($0, $19, $6, ($5 + [24]))
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$70 }
	CALL _ZdlPv(*($5 + [32]))
	
.LABEL $label$70
	*(($5 + [16])) = [0]
	*($5 + [8]) = (int_64)0
	$19 = *($5 + [168])
	$4 = CALL $70([9315])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$65 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$73 }
	*($5 + [8]) = ($4 << [1])
	$1 = (($5 + [8]) | [1])
	if ( $4 ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$73
	$15 = (($4 + [16]) & [-16])
	$1 = CALL _Znwj($15)
	*($5 + [8]) = ($15 | [1])
	*($5 + [16]) = $1
	*($5 + [12]) = $4
	
.LABEL $label$72
	CALL memcpy($1, [9315], $4)
	
.LABEL $label$71
	*(($1 + $4)) = [0]
	CALL $22($0, $19, $6, ($5 + [8]))
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$74 }
	CALL _ZdlPv(*($5 + [16]))
	
.LABEL $label$74
	CALL eosio_assert($8, [8614])
	CALL eosio_assert($8, [8648])
	$4 = CALL db_next_i64(*($7 + [60]), ($5 + [248]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$75 }
	CALL $14(($5 + [208]), $4)
	
.LABEL $label$75
	CALL $16(($5 + [208]), $7)
	if ( (*($5 + [88]) & [1]) ){ goto $label$77 }
	if ( (*($5 + [104]) & [1]) ){ goto $label$76 }
	goto $label$32 
	
.LABEL $label$77
	CALL _ZdlPv(*($5 + [96]))
	if ( ((*($5 + [104]) & [1]) == 0) ){ goto $label$32 }
	
.LABEL $label$76
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($5 + [120]) & [1]) == 0) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$66
	CALL $44(($5 + [24]))
	
.LABEL $label$65
	CALL $44(($5 + [8]))
	
.LABEL $label$34
	CALL $44(($5 + [56]))
	
.LABEL $label$33
	CALL $44(($5 + [40]))
	
.LABEL $label$32
	if ( (*($5 + [120]) & [1]) ){ goto $label$30 }
	
.LABEL $label$31
	$1 = *($5 + [136])
	if ( ($1 == 0) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	CALL _ZdlPv(*($11 + [8]))
	$1 = *($5 + [136])
	if ( $1 ){ goto $label$28 }
	
.LABEL $label$29
	$7 = [1]
	if ( (*($10) & [1]) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$4 = *($5 + [140])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$79 }
	
.LOOP $label$80:
	$7 = ($4 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$81 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$81
	$4 = $7
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$80 }
	$7 = *($5 + [136])
	goto $label$78 
	
.LABEL $label$79
	$7 = $1
	
.LABEL $label$78
	*($5 + [140]) = $1
	CALL _ZdlPv($7)
	$7 = [1]
	if ( ((*($10) & [1]) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL _ZdlPv(*(($5 + [204])))
	if ( ((*($9) & $7) == 0) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	if ( (*($9) & $7) ){ goto $label$24 }
	
.LABEL $label$25
	$1 = *($5 + [232])
	if ( ($1 == 0) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL _ZdlPv(*(($5 + [192])))
	$1 = *($5 + [232])
	if ( $1 ){ goto $label$22 }
	
.LABEL $label$23
	$global$0 = ($5 + [256])
	return 
	
.LABEL $label$22
	$0 = ($5 + [236])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$83 }
	
.LOOP $label$84:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$85 }
	if ( ((*($7 + [44]) & [1]) == 0) ){ goto $label$86 }
	CALL _ZdlPv(*(($7 + [52])))
	
.LABEL $label$86
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$87 }
	CALL _ZdlPv(*(($7 + [40])))
	
.LABEL $label$87
	CALL _ZdlPv($7)
	
.LABEL $label$85
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$84 }
	$7 = *(($5 + [232]))
	goto $label$82 
	
.LABEL $label$83
	$7 = $1
	
.LABEL $label$82
	*($0) = $1
	CALL _ZdlPv($7)
	$global$0 = ($5 + [256])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $73($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [64]) + [24]))) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $18(($4 + [16]), ($4 + [144]))
	*(($9 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($3 = (($4 + [128]) + [8]))) = *($9)
	*($4 + [128]) = *($4)
	$10 = *($3)
	*(($9 = (($4 + [144]) + [8]))) = $10
	*((($4 + [16]) + [24])) = $10
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($3) = *($8)
	*($4 + [128]) = *($4 + [80])
	$0 = *($4 + [72])
	$1 = *($4 + [64])
	$8 = CALL $45(($4 + [112]), ($4 + [96]))
	*($9) = *($3)
	*($4 + [168]) = $1
	*($4 + [160]) = $0
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [168])), (int_32 ($4 + [160])), (int_32 ($4 + [144])), (int_32 $8), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $76($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [104])))
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [144])
	$global$0 = $2
	CALL require_auth(*($0))
	*((($2 + [96]) + [32])) = [0]
	*($2 + [112]) = (int_64)-1
	*($2 + [120]) = (int_64)0
	$3 = *($0)
	*($2 + [96]) = $3
	*($2 + [104]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)7035924439720001536, CALL $55($1, [0], [16]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $14(($2 + [96]), $5)
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($2 + [96])), [8531])
	
.LABEL $label$1
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [8465])
	*((($2 + [40]) + [24])) = *(($4 + [24]))
	*((($2 + [40]) + [16])) = *(($4 + [16]))
	*((($2 + [40]) + [8])) = *(($4 + [8]))
	*($2 + [40]) = *($4)
	$5 = CALL $45((($2 + [40]) + [32]), ($4 + [32]))
	$7 = CALL $45((($2 + [40]) + [44]), ($4 + [44]))
	$9 = *($1)
	$8 = CALL $70([8480])
	if ( ((int_32)$8 != (int_32)( *($1 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$7 }
	if ( (CALL $52($1, [0], [-1], [8480], $8) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$1 = *($5)
	$9 = CALL $70([8497])
	if ( ((int_32)$9 != (int_32)( *(($2 + [76])) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$9 }
	if ( (CALL $52($5, [0], [-1], [8497], $9) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	*(($2 + [32])) = [0]
	*($2 + [24]) = (int_64)0
	$3 = *($2 + [64])
	$10 = *($2 + [48])
	$1 = CALL $70([8498])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$12 }
	*($2 + [24]) = ($1 << [1])
	$9 = (($2 + [24]) | [1])
	if ( $1 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$8 = (($1 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*($2 + [24]) = ($8 | [1])
	*($2 + [32]) = $9
	*($2 + [28]) = $1
	
.LABEL $label$11
	CALL memcpy($9, [8498], $1)
	
.LABEL $label$10
	*(($9 + $1)) = [0]
	CALL $15($0, $10, $3, ($2 + [24]))
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($2 + [32]))
	
.LABEL $label$8
	$1 = *($7)
	$9 = CALL $70([8497])
	if ( ((int_32)$9 != (int_32)( *(($2 + [88])) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$14 }
	if ( (CALL $52($7, [0], [-1], [8497], $9) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$3 = *($2 + [64])
	$10 = *($2 + [56])
	$1 = CALL $70([8498])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($2 + [8]) = ($1 << [1])
	$9 = (($2 + [8]) | [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$8 = (($1 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*($2 + [8]) = ($8 | [1])
	*($2 + [16]) = $9
	*($2 + [12]) = $1
	
.LABEL $label$16
	CALL memcpy($9, [8498], $1)
	
.LABEL $label$15
	*(($9 + $1)) = [0]
	CALL $15($0, $10, $3, ($2 + [8]))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($2 + [16]))
	
.LABEL $label$13
	CALL eosio_assert($6, [8614])
	CALL eosio_assert($6, [8648])
	$1 = CALL db_next_i64(*($4 + [60]), ($2 + [136]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$18 }
	CALL $14(($2 + [96]), $1)
	
.LABEL $label$18
	CALL $16(($2 + [96]), $4)
	$4 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$6
	CALL eosio_assert($6, [8614])
	CALL eosio_assert($6, [8648])
	$1 = CALL db_next_i64(*($4 + [60]), ($2 + [136]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$19 }
	CALL $14(($2 + [96]), $1)
	
.LABEL $label$19
	CALL $16(($2 + [96]), $4)
	$4 = [1]
	if ( (*($7) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL $44(($2 + [24]))
	
.LABEL $label$4
	CALL $44(($2 + [8]))
	
.LABEL $label$3
	CALL _ZdlPv(*(($2 + [92])))
	
.LABEL $label$2
	if ( (*($5) & $4) ){ goto $label$22 }
	$0 = *($2 + [120])
	if ( $0 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL _ZdlPv(*(($2 + [80])))
	$0 = *($2 + [120])
	if ( ($0 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$5 = ($2 + [124])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$26 }
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($4 + [52])))
	
.LABEL $label$27
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$28
	CALL _ZdlPv($4)
	
.LABEL $label$26
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$25 }
	$4 = *(($2 + [120]))
	goto $label$23 
	
.LABEL $label$24
	$4 = $0
	
.LABEL $label$23
	*($5) = $0
	CALL _ZdlPv($4)
	$global$0 = ($2 + [144])
	return 
	
.LABEL $label$20
	$global$0 = ($2 + [144])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8308])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8413])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8346])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8413])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [8957])
	$7 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$6 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$6 = $8
	$7 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$6 = $8
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $7 ){ goto $label$6 }
	$7 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [8966])
	CALL eosio_assert(((int_64)*($3) > (int_64)1000), [8996])
	CALL $1(($5 + [112]), $4)
	$4 = CALL $45(($5 + [96]), *($5 + [112]))
	$8 = CALL $55((*($5 + [112]) + [12]), [0], [16])
	*($5 + [88]) = $8
	$10 = CALL $45(($5 + [72]), (*($5 + [112]) + [24]))
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	$6 = *($0)
	*($5 + [32]) = $6
	*($5 + [40]) = $6
	$2 = CALL db_find_i64($6, $6, (int_64)7035924439720001536, $8)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$14 }
	$2 = CALL $14(($5 + [32]), $2)
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)($5 + [32])), [8531])
	$6 = *($0)
	*($5 + [12]) = $4
	*($5 + [16]) = $1
	*($5 + [20]) = $3
	*($5 + [24]) = $10
	*($5 + [8]) = ($5 + [88])
	CALL eosio_assert([1], [9088])
	CALL $19(($5 + [32]), $2, $6, ($5 + [8]))
	$9 = *($5 + [56])
	if ( $9 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$6 = *($0)
	*($5 + [12]) = $1
	*($5 + [16]) = $4
	*($5 + [20]) = $3
	*($5 + [24]) = $10
	*($5 + [8]) = ($5 + [88])
	CALL $20($5, ($5 + [32]), $6, ($5 + [8]))
	$9 = *($5 + [56])
	if ( ($9 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$0 = ($5 + [60])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$18 }
	if ( ((*($2 + [44]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($2 + [52])))
	
.LABEL $label$19
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($2 + [40])))
	
.LABEL $label$20
	CALL _ZdlPv($2)
	
.LABEL $label$18
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$17 }
	$2 = *(($5 + [56]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $9
	
.LABEL $label$15
	*($0) = $9
	CALL _ZdlPv($2)
	$2 = [1]
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$2 = [1]
	if ( (*($5 + [72]) & [1]) ){ goto $label$10 }
	
.LABEL $label$11
	if ( (*($5 + [96]) & $2) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($5 + [96]) & $2) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($4 + [8]))
	$9 = *($5 + [112])
	if ( $9 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$8
	$9 = *($5 + [112])
	if ( ($9 == 0) ){ goto $label$1 }
	
.LABEL $label$7
	$7 = *($5 + [116])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$22 }
	
.LOOP $label$23:
	$2 = ($7 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$24
	$7 = $2
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$23 }
	$2 = *($5 + [112])
	goto $label$21 
	
.LABEL $label$22
	$2 = $9
	
.LABEL $label$21
	*($5 + [116]) = $9
	CALL _ZdlPv($2)
	$global$0 = ($5 + [128])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [128])
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $59($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$6 }
	if ( ((int_64)$2 > (int_64)6299106135618093055) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-4994130327958978560) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	*($3 + [96]) = [8192]
	*($3 + [100]) = CALL $70([8192])
	*($3 + [40]) = *($3 + [96])
	CALL $4(($3 + [104]), ($3 + [40]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [80]) = [8213]
	*($3 + [84]) = CALL $70([8213])
	*($3 + [32]) = *($3 + [80])
	CALL $4(($3 + [88]), ($3 + [32]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	
.LABEL $label$5
	*($3 + [60]) = [0]
	*($3 + [56]) = [1]
	*($3 + [16]) = *($3 + [56])
	CALL $6($0, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_64)$2 == (int_64)6299106135618093056) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)6299106141871412224) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [2]
	*($3) = *($3 + [72])
	CALL $8($1, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	*($3 + [52]) = [0]
	*($3 + [48]) = [3]
	*($3 + [24]) = *($3 + [48])
	CALL $10($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [8]) = *($3 + [64])
	CALL $12($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $61([0])
	$global$0 = ($3 + [112])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = ($3 & [1])
	$3 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $3 )
	if ( ($4 == 0) ){ goto $label$1 }
	$6 = ($1 + [1])
	$5 = ($1 + [8])
	$7 = ( *($5) ? $6 : $3 )
	$8 = ($0 + [4])
	$9 = [0]
	
.LOOP $label$2:
	$3 = $9
	
.LOOP $label$4:
	if ( ((int_32)*(($7 + $3)) != (int_32)[95]) ){ goto $label$3 }
	$3 = ($3 + [1])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$1 }
	$9 = CALL $51($1, [95], $3)
	$7 = CALL $46($2, $1, $3, ($9 - $3), $1)
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [8]))) ){ goto $label$6 }
	*($3) = *($2)
	$3 = ($2 + [8])
	*(($3 + [8])) = *($3)
	*($3) = [0]
	*($8) = (*($8) + [12])
	*($2) = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	CALL $2($0, $7)
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$5
	$3 = *($1)
	$4 = ($3 & [1])
	$7 = ( *($5) ? $6 : $4 )
	$4 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$4 > (uint_32)$9) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8582])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $73($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [44])
	CALL $26(($3 + [40]), ($3 + [32]))
	*($5 + [60]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $27(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $76($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [52])))
	
.LABEL $label$10
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = *($0)
	*($4 + [76]) = [6]
	*($4 + [72]) = [8826]
	*($4 + [16]) = *($4 + [72])
	$6 = *(CALL $4(($4 + [24]), ($4 + [16])))
	*($4 + [76]) = [11]
	*($4 + [72]) = [8832]
	*($4 + [8]) = *($4 + [72])
	$7 = *(CALL $4(($4 + [24]), ($4 + [8])))
	*($4 + [76]) = [8]
	*($4 + [72]) = [8843]
	*($4) = *($4 + [72])
	$8 = *(CALL $4(($4 + [24]), $4))
	$9 = *($0)
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8851])
	$10 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$10 = $11
	$12 = [1]
	$13 = $0
	$0 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$10 = $11
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = ((int_32)$0 < (int_32)[6])
	$13 = ($0 + [1])
	$0 = $13
	if ( $12 ){ goto $label$5 }
	$12 = [1]
	$0 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$12 = [0]
	
.LABEL $label$1
	CALL eosio_assert($12, [8900])
	*((($4 + [24]) + [24])) = (int_64)1397703940
	*($4 + [32]) = $1
	*($4 + [24]) = $9
	*($4 + [40]) = $2
	$12 = CALL $45((($4 + [24]) + [32]), $3)
	*($4 + [80]) = $8
	*($4 + [72]) = $7
	*(($0 = CALL _Znwj([16]))) = $5
	*($0 + [8]) = $6
	*((($4 + [72]) + [36])) = [0]
	$13 = ($0 + [16])
	*((($4 + [72]) + [24])) = $13
	*(($4 + [92])) = $13
	*($4 + [88]) = $0
	*($4 + [100 align=4]) = (int_64)0
	$0 = *($12)
	$12 = ( *((($4 + [24]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($12 + [32])
	$10 = (CASTING uint_64)(uint_32 $12)
	$12 = ($4 + [100])
	
.LOOP $label$6:
	$0 = ($0 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ($0 == 0) ){ goto $label$8 }
	CALL $23($12, $0)
	$12 = *(($4 + [104]))
	$0 = *(($4 + [100]))
	goto $label$7 
	
.LABEL $label$8
	$12 = [0]
	$0 = [0]
	
.LABEL $label$7
	*($4 + [132]) = $0
	*($4 + [128]) = $0
	*($4 + [136]) = $12
	*($4 + [112]) = ($4 + [128])
	*($4 + [120]) = ($4 + [24])
	CALL $24(($4 + [120]), ($4 + [112]))
	CALL $25(($4 + [128]), ($4 + [72]))
	$0 = *($4 + [128])
	CALL send_inline($0, (*($4 + [132]) - $0))
	$0 = *($4 + [128])
	if ( ($0 == 0) ){ goto $label$9 }
	*($4 + [132]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$0 = *($4 + [100])
	if ( ($0 == 0) ){ goto $label$10 }
	*(($4 + [104])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$0 = *($4 + [88])
	if ( ($0 == 0) ){ goto $label$11 }
	*(($4 + [92])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$12
	$global$0 = ($4 + [144])
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [8678])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [8723])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8773])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [52])))
	
.LABEL $label$10
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [44]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [52])))
	
.LABEL $label$14
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = CALL $45(($2 + [16]), $1)
	$1 = CALL $45($2, ($1 + [12]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$6 = CALL $45(($2 + [32]), $1)
	$4 = CALL $45(($2 + [48]), $3)
	CALL void $5((int_32 $4), (int_32 $6), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($4 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($3) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($3) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $73($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [88])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [60]) = $3
	*($4 + [56]) = $3
	*($4 + [64]) = ($3 + $2)
	CALL $13(($4 + [56]), ($4 + [72]))
	CALL $13(($4 + [56]), ($4 + [84]))
	CALL $13(($4 + [56]), (($4 + [72]) + [24]))
	CALL $13(($4 + [56]), ($4 + [108]))
	*(($5 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($5)
	*($4 + [128]) = *($4 + [8])
	$5 = *($6)
	*((($4 + [144]) + [8])) = $5
	*((($4 + [24]) + [24])) = $5
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $21(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$13 }
	$3 = [1]
	if ( (*($4 + [108]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $76($3)
	$3 = [1]
	if ( ((*($4 + [108]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [116])))
	if ( ((*($4 + [96]) & $3) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( (*($4 + [96]) & $3) ){ goto $label$9 }
	
.LABEL $label$10
	$3 = [1]
	if ( (*($4 + [84]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [104])))
	$3 = [1]
	if ( ((*($4 + [84]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [92])))
	if ( (*($4 + [72]) & $3) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($4 + [72]) & $3) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [80])))
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	*((($3 + [80]) + [32])) = [0]
	*($3 + [96]) = (int_64)-1
	*($3 + [104]) = (int_64)0
	$5 = *($0)
	*($3 + [80]) = $5
	*($3 + [88]) = $5
	$6 = [0]
	$1 = CALL db_find_i64($5, $5, (int_64)7035924439720001536, CALL $55($1, [0], [16]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $14(($3 + [80]), $1)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($3 + [80])), [8531])
	
.LABEL $label$1
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [8465])
	*((($3 + [24]) + [24])) = *(($6 + [24]))
	*((($3 + [24]) + [16])) = *(($6 + [16]))
	*((($3 + [24]) + [8])) = *(($6 + [8]))
	*($3 + [24]) = *($6)
	$8 = CALL $45((($3 + [24]) + [32]), ($6 + [32]))
	$9 = CALL $45((($3 + [24]) + [44]), ($6 + [44]))
	$1 = ($1 & [1])
	$1 = *($2)
	$11 = ($1 & [1])
	$1 = *($8)
	$10 = uint_32($1 >> [1])
	$12 = ( *(($3 + [60])) ? $10 : $11 )
	if ( ((int_32)$12 != (int_32)( *($2 + [4]) ? uint_32($1 >> [1]) : $1 )) ){ goto $label$2 }
	$2 = ( *($2 + [8]) ? ($2 + [1]) : $1 )
	$1 = ($8 + [1])
	if ( $11 ){ goto $label$5 }
	if ( ($12 == 0) ){ goto $label$4 }
	$11 = ([0] - $10)
	
.LOOP $label$6:
	if ( ((int_32)*($1) != (int_32)*($2)) ){ goto $label$3 }
	$4 = [1]
	$2 = ($2 + [1])
	$1 = ($1 + [1])
	$11 = ($11 + [1])
	if ( $11 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$5
	if ( ($12 == 0) ){ goto $label$4 }
	$4 = (CALL $69(( *(($3 + [64])) ? $1 : $11 ), $2, $12) == 0)
	goto $label$2 
	
.LABEL $label$4
	$4 = [1]
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	CALL eosio_assert($4, [8926])
	$2 = [0]
	$1 = *($9)
	$11 = CALL $70([8497])
	if ( ((int_32)$11 != (int_32)( *(($3 + [72])) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$7 }
	$2 = (CALL $52($9, [0], [-1], [8497], $11) == 0)
	
.LABEL $label$7
	CALL eosio_assert($2, [8938])
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$5 = *($3 + [48])
	$13 = *($3 + [32])
	$2 = CALL $70([8498])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$16 }
	*($3 + [8]) = ($2 << [1])
	$1 = (($3 + [8]) | [1])
	if ( $2 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$11 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($11)
	*($3 + [8]) = ($11 | [1])
	*($3 + [16]) = $1
	*($3 + [12]) = $2
	
.LABEL $label$15
	CALL memcpy($1, [8498], $2)
	
.LABEL $label$14
	*(($1 + $2)) = [0]
	CALL $15($0, $13, $5, ($3 + [8]))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($3 + [16]))
	
.LABEL $label$17
	CALL eosio_assert($7, [8614])
	CALL eosio_assert($7, [8648])
	$2 = CALL db_next_i64(*($6 + [60]), ($3 + [120]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$18 }
	CALL $14(($3 + [80]), $2)
	
.LABEL $label$18
	CALL $16(($3 + [80]), $6)
	if ( (*($9) & [1]) ){ goto $label$20 }
	if ( (*($8) & [1]) ){ goto $label$19 }
	goto $label$12 
	
.LABEL $label$20
	CALL _ZdlPv(*(($3 + [76])))
	if ( ((*($8) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$19
	CALL _ZdlPv(*(($3 + [64])))
	$1 = *($3 + [104])
	if ( $1 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	CALL $44(($3 + [8]))
	
.LABEL $label$12
	$1 = *($3 + [104])
	if ( ($1 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$11 = ($3 + [108])
	$2 = *($11)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$21:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$22 }
	if ( ((*($6 + [44]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($6 + [52])))
	
.LABEL $label$23
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($6 + [40])))
	
.LABEL $label$24
	CALL _ZdlPv($6)
	
.LABEL $label$22
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$21 }
	$6 = *(($3 + [104]))
	goto $label$8 
	
.LABEL $label$10
	$global$0 = ($3 + [128])
	return 
	
.LABEL $label$9
	$6 = $1
	
.LABEL $label$8
	*($11) = $1
	CALL _ZdlPv($6)
	$global$0 = ($3 + [128])
	(unreachable)
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [128])
	$global$0 = $3
	*(($4 = $3) + [88]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $73($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [52]) = $3
	*($4 + [48]) = $3
	*($4 + [56]) = ($3 + $2)
	CALL $13(($4 + [48]), ($4 + [64]))
	CALL $13(($4 + [48]), ($4 + [76]))
	*(($5 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [96]) + [8]))) = *($5)
	*($4 + [96]) = *($4)
	$5 = *($6)
	*((($4 + [112]) + [8])) = $5
	*(($4 + [40])) = $5
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	*($4 + [116]) = ($4 + [88])
	*($4 + [112]) = ($4 + [16])
	CALL $17(($4 + [112]), ($4 + [64]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$9 }
	$3 = [1]
	if ( (*($4 + [76]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $76($3)
	$3 = [1]
	if ( ((*($4 + [76]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [84])))
	if ( (*($4 + [64]) & $3) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($4 + [64]) & $3) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $28($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $49($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $49($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $44($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $73($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9352])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $73($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	if ( ((int_64)*($1) != (int_64)*(*($0))) ){ goto $label$4 }
	$3 = *($0 + [4])
	$4 = *($3)
	if ( ($4 & [1]) ){ goto $label$3 }
	$4 = uint_32($4 >> [1])
	$3 = ($3 + [1])
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert([0], [9279])
	goto $label$1 
	
.LABEL $label$3
	$4 = *($3 + [4])
	$3 = *($3 + [8])
	
.LABEL $label$2
	*($2 + [20]) = $4
	*($2 + [16]) = $3
	*($2 + [8]) = *($2 + [16])
	$3 = CALL $4(($2 + [24]), ($2 + [8]))
	if ( ((int_64)*($1 + [8]) != (int_64)*($3)) ){ goto $label$7 }
	if ( ((int_64)*($1 + [16]) != (int_64)*(*($0 + [8]))) ){ goto $label$6 }
	if ( ((int_64)*($1 + [24]) != (int_64)*(*($0 + [12]))) ){ goto $label$5 }
	$3 = [0]
	$4 = *($1 + [44])
	$5 = CALL $70([8497])
	if ( ((int_32)$5 != (int_32)( *(($1 + [48])) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$8 }
	$3 = (CALL $52(($1 + [44]), [0], [-1], [8497], $5) == 0)
	
.LABEL $label$8
	CALL eosio_assert($3, [9279])
	goto $label$1 
	
.LABEL $label$7
	CALL eosio_assert([0], [9279])
	goto $label$1 
	
.LABEL $label$6
	CALL eosio_assert([0], [9279])
	goto $label$1 
	
.LABEL $label$5
	CALL eosio_assert([0], [9279])
	
.LABEL $label$1
	CALL $47(($1 + [44]), *($0 + [16]))
	$global$0 = ($2 + [32])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = ($global$0 - [64])
	$global$0 = $5
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$4 = CALL $45($5, $4)
	$3 = CALL $45(($5 + [16]), $3)
	$2 = CALL $45(($5 + [32]), $2)
	$1 = CALL $45(($5 + [48]), $1)
	CALL void $7((int_32 $1), (int_32 $2), (int_32 $3), (int_32 $4), (int_32 $0))
	if ( (*($4) & [1]) ){ goto $label$8 }
	if ( (*($3) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($3 + [8]))
	$0 = [1]
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($2) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($1) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($2 + [8]))
	if ( ((*($1) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($5 + [64])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	*($1) = *(*($5))
	*($1 + [8]) = *(*($5 + [4]))
	$6 = *($5 + [8])
	$7 = *($6)
	if ( ($7 & [1]) ){ goto $label$2 }
	$7 = uint_32($7 >> [1])
	$6 = ($6 + [1])
	goto $label$1 
	
.LABEL $label$2
	$7 = *($6 + [4])
	$6 = *($6 + [8])
	
.LABEL $label$1
	*($3 + [20]) = $7
	*($3 + [16]) = $6
	*($3 + [8]) = *($3 + [16])
	*($1 + [16]) = *(CALL $4(($3 + [40]), ($3 + [8])))
	*($1 + [24]) = *(*($5 + [12]))
	$6 = ($1 + [32])
	CALL $47($6, *($5 + [16]))
	$7 = ($1 + [44])
	CALL $50($7, [8497])
	$5 = *($1 + [32])
	$8 = ( *(($1 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($8 + [32])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [24])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	$10 = *(($1 + [44]))
	$10 = ( *(($1 + [48])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$5 = ($10 + $5)
	$9 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	if ( ($5 <= [513]) ){ goto $label$6 }
	$2 = CALL $73($5)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $5)
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($1 + [8])
	*($3 + [40]) = $1
	*($3 + [48]) = ($1 + [16])
	*($3 + [52]) = $8
	*($3 + [56]) = $6
	*($3 + [60]) = $7
	CALL $33(($3 + [40]), ($3 + [32]))
	$9 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), $9, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$9 >= (uint_64)*($4 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $76($2)
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [64])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8920])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8920])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8920])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8920])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $29(*($1), *($0 + [16]))
	CALL $29(*($1), *($0 + [20]))
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8920])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8920])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8920])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8920])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8920])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $58 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $59 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $61 (int_32 $0)
{
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $62($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $64 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $70($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $48($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $48($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $76($0)
	
.LABEL $label$1
}

int_32 .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $69(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $53 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $56($1, $0, [9022])
	CALL $57()
	(unreachable)
}

void .FUNC $54 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $56($1, $0, [8980])
	CALL $58()
	(unreachable)
}

int_64 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $70([8473])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8473], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $60())
	*(CALL $60()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $67($4, ($3 + [12]), $2)
	$0 = CALL $60()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $53($3)
	
.LABEL $label$1
	CALL $54($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $70($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $48($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $57 ()
{
	CALL abort()
	(unreachable)
}