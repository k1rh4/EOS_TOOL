(data (i32.const 16632) "EOS\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 16645) "SafeCharge\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 16747) "Ticket\00")
(data (i32.const 16754) "string is too long to be a valid symbol_code\00")
(data (i32.const 16799) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 16852) "error reading iterator\00")
(data (i32.const 16875) "read\00")
(data (i32.const 16880) "get\00")
(data (i32.const 16884) "cannot create objects in table of another contract\00")
(data (i32.const 16935) "write\00")
(data (i32.const 16941) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 16992) "cannot pass end iterator to modify\00")
(data (i32.const 17027) "object passed to modify is not in multi_index\00")
(data (i32.const 17073) "cannot modify objects in table of another contract\00")
(data (i32.const 17124) "updater cannot change primary key when modifying an object\00")
(data (i32.const 17183) "string is too long to be a valid name\00")
(data (i32.const 17221) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17288) "character is not in allowed character set for names\00")
(data (i32.const 17340) "Withdraw\00")
(data (i32.const 17349) "active\00")
(data (i32.const 17356) "eosio.token\00")
(data (i32.const 17368) "transfer\00")
(data (i32.const 17377) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17426) "invalid symbol name\00")
(data (i32.const 17446) "DevMoney\00: no conversion\00")
(data (i32.const 17471) ": out of range\00")
(data (i32.const 17488) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "eosio_assert_code" (func $fimport$0 (param i32 i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "action_data_size" (func $fimport$6 (result i32)))
(import "env" "read_action_data" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$9 (param i64)))
(import "env" "is_account" (func $fimport$10 (param i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$12 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "__multi3" (func $fimport$13 (param i32 i64 i64 i64 i64)))
(import "env" "__udivti3" (func $fimport$14 (param i32 i64 i64 i64 i64)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "sha256" (func $fimport$16 (param i32 i32 i32)))
(import "env" "require_recipient" (func $fimport$17 (param i64)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$20))
(import "env" "memset" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$22 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$33 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$34 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$37 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$39 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$40 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$41 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $20))
(export "_ZdlPv" (func $96))
(export "_Znwj" (func $94))
(export "_Znaj" (func $95))
(export "_ZdaPv" (func $97))
(export "_ZnwjSt11align_val_t" (func $98))
(export "_ZnajSt11align_val_t" (func $99))
(export "_ZdlPvSt11align_val_t" (func $100))
(export "_ZdaPvSt11align_val_t" (func $101))
(table $0 11 11 anyfunc)
(elem (i32.const 1) $21 $23 $25 $27 $29 $30 $31 $32 $33 $34)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17745))
(global $global$2 i32 (i32.const 17745))


int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $125(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $125(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $127($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $127($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $130($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[48])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[48])) ){ goto $label$8 }
	if ( ($5 == 0) ){ goto $label$5 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$9:
	$6 = ($4 + [-48])
	$7 = *(($4 + [-32]))
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [-28])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$4 = $6
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$9 }
	$4 = *($0)
	goto $label$6 
	
.LABEL $label$8
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[48])
	$4 = ($1 + ((int_32)$7 * (int_32)[48]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	*($5) = *($1)
	*(($5 + [8])) = *(($1 + [8]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$13 }
	CALL $91(($5 + [16]), *(($1 + [16])), *(($1 + [20])))
	
.LABEL $label$13
	*(($5 + [44])) = *(($1 + [44]))
	*(($5 + [36])) = *(($1 + [36]))
	*(($5 + [28])) = *(($1 + [28]))
	$5 = ($5 + [48])
	$1 = ($1 + [48])
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$14 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$0 = ($0 + [4])
	$1 = *($0)
	
.LOOP $label$15:
	*($1) = *($4)
	*(($1 + [8])) = *(($4 + [8]))
	*($1 + [16]) = [0]
	*(($6 = ($1 + [20]))) = (int_64)0
	$8 = ($4 + [16])
	$3 = ($4 + [20])
	$5 = (*($3) - *($8))
	$7 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$16 }
	$9 = ($1 + [16])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = CALL _Znwj($5)
	*($9) = $5
	*(($1 + [24])) = ($5 + ((int_32)$7 * (int_32)[24]))
	*($6) = $5
	$3 = *($8)
	$7 = (*($3) - $3)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($5, $3, $7)
	*($6) = (*($6) + ((int_32)((uint_32)$7 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$16
	*(($1 + [44])) = *(($4 + [44]))
	*(($1 + [36])) = *(($4 + [36]))
	*($1 + [28 align=4]) = *(($4 + [28]))
	$1 = (*($0) + [48])
	*($0) = $1
	$4 = ($4 + [48])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$15 }
	goto $label$4 
	
.LABEL $label$14
	$7 = ($0 + [4])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($1 + [-48])
	$6 = *(($1 + [-32]))
	if ( ($6 == 0) ){ goto $label$19 }
	*(($1 + [-28])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$1 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$18 }
	
.LABEL $label$17
	*($7) = $5
	return (unreachable)
	
.LABEL $label$7
	$4 = $5
	
.LABEL $label$6
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$3 >= (uint_32)[89478486]) ){ goto $label$1 }
	$5 = [89478485]
	$4 = ((int_32)$4 / (int_32)[48])
	if ( ((uint_32)$4 > (uint_32)[44739241]) ){ goto $label$20 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$20
	$4 = ((int_32)$5 * (int_32)[48])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$0 = ($0 + [4])
	
.LOOP $label$21:
	*($5) = *($1)
	*(($5 + [8])) = *(($1 + [8]))
	*($5 + [16]) = [0]
	*(($6 = ($5 + [20]))) = (int_64)0
	$8 = ($1 + [16])
	$3 = ($1 + [20])
	$4 = (*($3) - *($8))
	$7 = ((int_32)$4 / (int_32)[24])
	if ( ($4 == 0) ){ goto $label$22 }
	$9 = ($5 + [16])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$3 }
	$4 = CALL _Znwj($4)
	*($9) = $4
	*(($5 + [24])) = ($4 + ((int_32)$7 * (int_32)[24]))
	*($6) = $4
	$3 = *($8)
	$7 = (*($3) - $3)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$22 }
	CALL memcpy($4, $3, $7)
	*($6) = (*($6) + ((int_32)((uint_32)$7 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$22
	*(($5 + [44])) = *(($1 + [44]))
	*(($5 + [36])) = *(($1 + [36]))
	*($5 + [28 align=4]) = *(($1 + [28]))
	$5 = (*($0) + [48])
	*($0) = $5
	$1 = ($1 + [48])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$21 }
	
.LABEL $label$4
	return (unreachable)
	
.LABEL $label$3
	CALL $114($9)
	
.LABEL $label$2
	CALL $114($9)
	
.LABEL $label$1
	CALL $114($0)
	(unreachable)
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = ((int_32)$3 / (int_32)[24])
	if ( ((uint_32)$4 <= (uint_32)((int_32)($5 - $6) / (int_32)[24])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$1 }
	$6 = [178956970]
	$2 = ((int_32)$5 / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	
.LABEL $label$6
	$4 = ((int_32)$6 * (int_32)[24])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + ((int_32)((uint_32)$3 / (uint_32)[24]) * (int_32)[24]))
	goto $label$3 
	
.LABEL $label$4
	$3 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$7 = ( ($1 + ((int_32)$3 * (int_32)[24])) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$5 = ($7 - $1)
	$8 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $5)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + ((int_32)((uint_32)$1 / (uint_32)[24]) * (int_32)[24]))
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + ((int_32)$8 * (int_32)[24]))
	return (unreachable)
	
.LABEL $label$1
	CALL $114($0)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $93($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $106($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $106($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $102($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [16880])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $84($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [16875])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $123 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $115 ()
{
	return [8220]
}

int_32 .FUNC $122 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $119($3, (int_64)0)
	$4 = CALL $121($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

void .FUNC $130 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16620])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16428]
	$3 = (((int_32)$1 * (int_32)[12]) + [16428])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_64 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $120($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $115()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $120($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [17489]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $119($0, (int_64)0)
	*(CALL $115()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $120($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $120($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $120($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $120($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [17489])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [17489]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [17489]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $120($0)
	$5 = *(($6 + [17489]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $120($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [17489]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [16636]))
	$8 = (int_64)0
	$5 = *(($6 + [17489]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [17489]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $120($0)
	$5 = *(($6 + [17489]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $120($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [17489]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $119($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [17489]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [17489]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $120($0) + [17489]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $115()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $115()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $115()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $120 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $118($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	*($1 + [16]) = *(*($3) + [16])
	$6 = *($1 + [200])
	CALL eosio_assert([1], [17124])
	$8 = *(($1 + [188]))
	$7 = *(($1 + [192]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[48]))
	$11 = ($1 + [200])
	$3 = [173]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($9 + [-48]) / (uint_32)[48]) * (int_32)[41]) + $3) + [41])
	
.LABEL $label$2
	$7 = ($3 + [8])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$3 = CALL $127($7)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	CALL $64($5, $1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($5 + [4]), $11, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [212]), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $130($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $127($1)
	
.LABEL $label$2
	*(CALL $115()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $127(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $130($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $49 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	CALL eosio_assert_code(((int_64)*($0 + [16]) == (int_64)$1), (int_64)1)
	$0 = ($3 + [12])
	CALL eosio_assert_code(((int_32)(*($0) - *($3 + [8])) == (int_32)[720]), (int_64)1006)
	CALL eosio_assert_code(((int_32)*(*($3 + [8])) == (int_32)[1]), (int_64)1006)
	CALL eosio_assert_code(((int_32)*(*($3 + [8]) + [48]) == (int_32)[2]), (int_64)1006)
	CALL eosio_assert_code(((int_32)*(*($3 + [8]) + [96]) == (int_32)[3]), (int_64)1006)
	CALL eosio_assert_code(((int_32)*(*($3 + [8]) + [144]) == (int_32)[4]), (int_64)1006)
	CALL eosio_assert_code(((int_32)*(*($3 + [8]) + [192]) == (int_32)[5]), (int_64)1006)
	CALL eosio_assert_code(((int_32)*(*($3 + [8]) + [240]) == (int_32)[6]), (int_64)1006)
	CALL eosio_assert_code(((int_32)*(*($3 + [8]) + [288]) == (int_32)[7]), (int_64)1006)
	CALL eosio_assert_code(((int_32)*(*($3 + [8]) + [336]) == (int_32)[8]), (int_64)1006)
	CALL eosio_assert_code(((int_32)*(*($3 + [8]) + [384]) == (int_32)[9]), (int_64)1006)
	CALL eosio_assert_code(((int_32)*(*($3 + [8]) + [432]) == (int_32)[10]), (int_64)1006)
	CALL eosio_assert_code(((int_32)*(*($3 + [8]) + [480]) == (int_32)[11]), (int_64)1006)
	CALL eosio_assert_code(((int_32)*(*($3 + [8]) + [528]) == (int_32)[12]), (int_64)1006)
	CALL eosio_assert_code(((int_32)*(*($3 + [8]) + [576]) == (int_32)[13]), (int_64)1006)
	CALL eosio_assert_code(((int_32)*(*($3 + [8]) + [624]) == (int_32)[14]), (int_64)1006)
	CALL eosio_assert_code(((int_32)*(*($3 + [8]) + [672]) == (int_32)[15]), (int_64)1006)
	*($2) = *($3)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$1 }
	CALL $90(($2 + [8]), *($3 + [8]), *($0))
	
.LABEL $label$1
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [32])
	$global$0 = $2
	*((($2 + [8]) + [16])) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [8]) = *($1 + [8])
	$3 = (*(($1 + [20])) - *(($1 + [16])))
	$4 = ((int_32)$3 / (int_32)[48])
	$5 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[89478486]) ){ goto $label$1 }
	$6 = CALL _Znwj($3)
	*((($2 + [8]) + [8])) = $6
	*(($7 = ($2 + [20]))) = $6
	*((($2 + [8]) + [16])) = ($6 + ((int_32)$4 * (int_32)[48]))
	$1 = *(($1 + [20]))
	$8 = *(($1 + [16]))
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$3 }
	$9 = ($1 - $8)
	$4 = [0]
	
.LOOP $label$4:
	$3 = ($8 + $4)
	*(($1 = ($6 + $4))) = *($3)
	*(($1 + [8])) = *(($3 + [8]))
	*(($10 = ($1 + [16]))) = [0]
	*(($11 = ($1 + [20]))) = (int_64)0
	$13 = ($3 + [16])
	$12 = ($3 + [20])
	$14 = (*($12) - *($13))
	$15 = ((int_32)$14 / (int_32)[24])
	if ( ($14 == 0) ){ goto $label$5 }
	if ( ((uint_32)$15 >= (uint_32)[178956971]) ){ goto $label$2 }
	$14 = CALL _Znwj($14)
	*($10) = $14
	*(($1 + [24])) = ($14 + ((int_32)$15 * (int_32)[24]))
	*($11) = $14
	$10 = *($13)
	$15 = (*($12) - $10)
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($14, $10, $15)
	*($11) = (*($11) + ((int_32)((uint_32)$15 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$5
	*(($1 + [44])) = *(($3 + [44]))
	*(($1 + [36])) = *(($3 + [36]))
	*(($1 + [28])) = *(($3 + [28]))
	*($7) = ($1 + [48])
	$4 = ($4 + [48])
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$4 }
	
.LABEL $label$3
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$3 = (*($0) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$1 = *((*($3) + $1))
	
.LABEL $label$6
	CALL void $3((int_32 $5), (int_64 ($2 + [8])), (int_32 $1))
	$14 = *($2 + [16])
	if ( ($14 == 0) ){ goto $label$7 }
	$3 = $14
	$11 = ($2 + [20])
	$1 = *($11)
	if ( ((int_32)$1 == (int_32)$14) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($1 + [-48])
	$4 = *(($1 + [-32]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [-28])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$1 = $3
	if ( ((int_32)$14 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($2 + [16]))
	
.LABEL $label$8
	*($11) = $14
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $114(($1 + [16]))
	
.LABEL $label$1
	CALL $114(($2 + [16]))
	(unreachable)
}

int_32 .FUNC $125 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $115())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $126($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert_code(((int_32)*($0 + [24]) ^ (int_32)[1]), (int_64)2)
	$3 = ($1 + [8])
	CALL eosio_assert_code(((int_64)((int_64)*($1) | (int_64)*($3)) != (int_64)0), (int_64)2001)
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$4 = *($3)
	$5 = *($1)
	$6 = *($1 + [104])
	$3 = CALL $124([17340])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($2) = ($3 << [1])
	$7 = ($2 | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($3 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($2) = ($8 | [1])
	*($2 + [8]) = $7
	*($2 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($7, [17340], $3)
	
.LABEL $label$2
	*(($7 + $3)) = [0]
	CALL $83($0, $6, $5, $4, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$5
	$4 = *($1)
	*($1) = (int_64)0
	$3 = ($1 + [8])
	$5 = *($3)
	*($3) = (int_64)0
	$7 = ($0 + [136])
	$6 = *($7)
	CALL eosio_assert_code(( ((uint_64)*($0 + [128]) >= (uint_64)$4) ? ((uint_64)$6 >= (uint_64)$5) : ((int_64)$6 == (int_64)$5) ), (int_64)1007)
	*(($8 = ($1 + [56]))) = (int_64)0
	*($1 + [48]) = (int_64)0
	*(($9 = ($1 + [40]))) = (int_64)0
	*($1 + [32]) = (int_64)0
	*(($1 + [88])) = (int_64)0
	*($1 + [80]) = (int_64)0
	*($1 + [64]) = [0]
	*(($1 + [24])) = *($3)
	*($1 + [16]) = *($1)
	$6 = *($0 + [128])
	*($0 + [128]) = (int_64))($6 - $4)
	*($7) = (int_64))((int_64))(*($7) - $5) - (CASTING uint_64)(uint_32 (uint_64)($6 <= $4)))
	CALL eosio_assert_code([1], (int_64)4001)
	$4 = *($1 + [48])
	*($1 + [48]) = ((int_64)$4 << (int_64)4)
	$5 = *($1 + [32])
	*($9) = ((int_64)((int_64)*($9) << (int_64)5) | (int_64)(uint_64)$5 >> (uint_64)(int_64)59))
	*($1 + [32]) = ((int_64)((int_64)$5 << (int_64)5) | (int_64)17)
	*($8) = ((int_64)((int_64)*($8) << (int_64)4) | (int_64)(uint_64)$4 >> (uint_64)(int_64)60))
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $102($2)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [16875])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [16875])
	CALL memcpy(($4 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [16875])
	CALL memcpy(($4 + [12]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [16875])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4 + [13]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [16875])
	CALL memcpy(($4 + [16]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	$6 = *($1 + [200])
	CALL eosio_assert([1], [17124])
	$8 = *(($1 + [188]))
	$7 = *(($1 + [192]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[48]))
	$11 = ($1 + [200])
	$12 = [173]
	
.LOOP $label$1:
	$12 = ($12 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$12 = ((((int_32)((uint_32)($9 + [-48]) / (uint_32)[48]) * (int_32)[41]) + $12) + [41])
	
.LABEL $label$2
	$7 = ($12 + [8])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$12 = CALL $127($7)
	goto $label$3 
	
.LABEL $label$4
	$12 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $12
	
.LABEL $label$3
	*($5 + [4]) = $12
	*($5) = $12
	*($5 + [8]) = ($12 + $7)
	CALL $64($5, $1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($5 + [4]), $11, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [212]), $2, $12, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $130($12)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	*($1 + [24]) = *(*($3) + [24])
	$6 = *($1 + [200])
	CALL eosio_assert([1], [17124])
	$8 = *(($1 + [188]))
	$7 = *(($1 + [192]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[48]))
	$11 = ($1 + [200])
	$3 = [173]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($9 + [-48]) / (uint_32)[48]) * (int_32)[41]) + $3) + [41])
	
.LABEL $label$2
	$7 = ($3 + [8])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$3 = CALL $127($7)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	CALL $64($5, $1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($5 + [4]), $11, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [212]), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $130($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [16880])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$2 = *($1 + [4])
	$3 = ((int_32)($2 - $6) / (int_32)[48])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $77($1, ($7 - $3))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ((int_32)$7 * (int_32)[48]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($2 + [-48])
	$3 = *(($2 + [-32]))
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [-28])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$2 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$2 = $6
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$9:
	CALL $78($0, $7)
	$7 = ($7 + [48])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$1 = ($global$0 - [48])
	$global$0 = $1
	*($0 + [8 align=4]) = (int_64)0
	*(($2 = ($0 + [16]))) = [0]
	*(($1 + [24])) = [0]
	*($1 + [16]) = (int_64)0
	*($1) = [0]
	*($1 + [4]) = [0]
	*($1 + [8]) = (int_64)0
	*($1 + [28]) = [0]
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)0
	$3 = ($0 + [8])
	$4 = ($1 + [28])
	$5 = ($0 + [12])
	$6 = [1]
	$7 = [0]
	*($1) = [1]
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$2 }
	$9 = [10]
	goto $label$1 
	
.LABEL $label$2
	$9 = [5]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$17 
	
.LABEL $label$22
	$8 = *($2)
	$7 = *($5)
	$6 = ($6 + [1])
	*($1) = $6
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$11 }
	$9 = [5]
	goto $label$3 
	
.LABEL $label$21
	*($7) = *($1)
	*($7 + [16]) = [0]
	*(($7 + [8])) = *(($1 + [8]))
	*(($10 = ($7 + [20]))) = (int_64)0
	$12 = ($1 + [16])
	$11 = ($1 + [20])
	$8 = (*($11) - *($12))
	$13 = ((int_32)$8 / (int_32)[24])
	if ( ($8 == 0) ){ goto $label$8 }
	$9 = [6]
	goto $label$3 
	
.LABEL $label$20
	$14 = ($7 + [16])
	if ( ((uint_32)$13 >= (uint_32)[178956971]) ){ goto $label$4 }
	$9 = [7]
	goto $label$3 
	
.LABEL $label$19
	$8 = CALL _Znwj($8)
	*($14) = $8
	*(($7 + [24])) = ($8 + ((int_32)$13 * (int_32)[24]))
	*($10) = $8
	$11 = *($12)
	$13 = (*($11) - $11)
	if ( ((int_32)$13 < (int_32)[1]) ){ goto $label$7 }
	$9 = [8]
	goto $label$3 
	
.LABEL $label$18
	CALL memcpy($8, $11, $13)
	*($10) = (*($10) + ((int_32)((uint_32)$13 / (uint_32)[24]) * (int_32)[24]))
	$9 = [0]
	goto $label$3 
	
.LABEL $label$17
	*($7 + [28 align=4]) = *($4)
	*(($7 + [44])) = *(($4 + [16]))
	*(($7 + [36])) = *(($4 + [8]))
	*($5) = (*($5) + [48])
	if ( ((uint_32)$6 <= (uint_32)[14]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$16
	CALL $69($3, $1)
	if ( ((uint_32)$6 <= (uint_32)[14]) ){ goto $label$6 }
	$9 = [1]
	goto $label$3 
	
.LABEL $label$15
	$7 = *(($1 + [16]))
	if ( ($7 == 0) ){ goto $label$5 }
	$9 = [2]
	goto $label$3 
	
.LABEL $label$14
	*(($1 + [20])) = $7
	CALL _ZdlPv($7)
	$9 = [3]
	goto $label$3 
	
.LABEL $label$13
	$global$0 = ($1 + [48])
	return $0
	
.LABEL $label$12
	CALL $114($14)
	
.LABEL $label$11
	$9 = [10]
	goto $label$3 
	
.LABEL $label$10
	$9 = [4]
	goto $label$3 
	
.LABEL $label$9
	$9 = [1]
	goto $label$3 
	
.LABEL $label$8
	$9 = [0]
	goto $label$3 
	
.LABEL $label$7
	$9 = [0]
	goto $label$3 
	
.LABEL $label$6
	$9 = [4]
	goto $label$3 
	
.LABEL $label$5
	$9 = [3]
	goto $label$3 
	
.LABEL $label$4
	$9 = [9]
	goto $label$3 
	$9
	return (unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	$5 = *($1 + [104])
	CALL eosio_assert([1], [17124])
	*($4 + [120]) = ($4 + [97])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	CALL $7(($4 + [112]), $1)
	CALL eosio_assert(((int_32)(*($4 + [120]) - *($4 + [116])) > (int_32)[7]), [16935])
	CALL memcpy(*($4 + [116]), ($1 + [104]), [8])
	*($4 + [116]) = (*($4 + [116]) + [8])
	CALL db_update_i64(*($1 + [116]), $2, $4, [97])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	$6 = *($1 + [200])
	CALL eosio_assert([1], [17124])
	$8 = *(($1 + [188]))
	$7 = *(($1 + [192]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[48]))
	$11 = ($1 + [200])
	$12 = [173]
	
.LOOP $label$1:
	$12 = ($12 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$12 = ((((int_32)((uint_32)($9 + [-48]) / (uint_32)[48]) * (int_32)[41]) + $12) + [41])
	
.LABEL $label$2
	$7 = ($12 + [8])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$12 = CALL $127($7)
	goto $label$3 
	
.LABEL $label$4
	$12 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $12
	
.LABEL $label$3
	*($5 + [4]) = $12
	*($5) = $12
	*($5 + [8]) = ($12 + $7)
	CALL $64($5, $1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($5 + [4]), $11, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [212]), $2, $12, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $130($12)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_32 .FUNC $124 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $129($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [16661])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [17183])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [17288])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17221])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17288])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5, int_64 $6, int_64 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$8 = ($global$0 - [32])
	$global$0 = $8
	$9 = ($0 + [32])
	$10 = [0]
	$11 = [0]
	$12 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-4427728020793352912, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $12($9, $12)
	
.LABEL $label$1
	$13 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert_code($13, (int_64)3001)
	$14 = ($0 + [72])
	$12 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)-4157502895497936896, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$2 }
	$10 = CALL $15($14, $12)
	
.LABEL $label$2
	$15 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert_code($15, (int_64)3004)
	*($8 + [24]) = $1
	$16 = ($0 + [112])
	$18 = *(($0 + [140]))
	$17 = *(($0 + [136]))
	if ( ((int_32)$17 == (int_32)$18) ){ goto $label$4 }
	
.LOOP $label$6:
	$12 = ($18 + [-24])
	$19 = *($12)
	if ( ((int_64)*($19 + [104]) == (int_64)$1) ){ goto $label$5 }
	$18 = $12
	if ( ((int_32)$17 != (int_32)$12) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$17 == (int_32)$18) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($19 + [112]) == (int_32)$16), [16941])
	goto $label$3 
	
.LABEL $label$4
	$12 = CALL db_find_i64(*($16), *(($0 + [120])), (int_64)-3020379765375762432, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$7 }
	$19 = CALL $4($16, $12)
	CALL eosio_assert(((int_32)*($19 + [112]) == (int_32)$16), [16941])
	goto $label$3 
	
.LABEL $label$7
	$1 = *([0] + [8192])
	*($8 + [8]) = ($8 + [24])
	CALL $5(($8 + [16]), $16, $1, ($8 + [8]))
	$19 = *($8 + [20])
	
.LABEL $label$3
	CALL $16($11, $10, $19, $2, $3, $4, $5, $6, $7)
	$1 = *([0] + [8192])
	CALL eosio_assert($13, [16992])
	CALL $17($9, $11, $1, ($8 + [24]))
	$1 = *([0] + [8192])
	CALL eosio_assert($15, [16992])
	CALL $18($14, $10, $1, ($8 + [24]))
	$1 = *([0] + [8192])
	CALL eosio_assert(((int_32)$19 != (int_32)[0]), [16992])
	CALL $19($16, $19, $1, ($8 + [24]))
	$global$0 = ($8 + [32])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	$6 = *($3)
	$7 = *(($6 + [8]))
	$8 = *($1 + [128])
	$9 = ((int_64)$8 + (int_64)*($6))
	*($1 + [128]) = $9
	*(($6 = ($1 + [136]))) = ((int_64)((int_64)$7 + (int_64)*($6)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($9 <= $8)))
	$3 = *(($3 + [4]))
	$7 = *(($3 + [8]))
	$8 = *($1 + [144])
	$9 = ((int_64)$8 + (int_64)*($3))
	*($1 + [144]) = $9
	*(($3 = ($1 + [152]))) = ((int_64)((int_64)$7 + (int_64)*($3)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($9 <= $8)))
	$8 = *($1 + [200])
	CALL eosio_assert([1], [17124])
	$10 = *(($1 + [188]))
	$6 = *(($1 + [192]))
	$11 = ($6 - $10)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$11 / (int_32)[48]))
	$12 = ($1 + [200])
	$3 = [173]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($11 + [-48]) / (uint_32)[48]) * (int_32)[41]) + $3) + [41])
	
.LABEL $label$2
	$6 = ($3 + [8])
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL $127($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	CALL $64($5, $1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($5 + [4]), $12, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [212]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $130($3)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[15]), [16935])
	CALL memcpy(*($0 + [4]), $1, [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [16852])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $127($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([128])) + [48]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [64]) = [0]
	*($5 + [96]) = (int_64)0
	*($5 + [112]) = $0
	*(($5 + [56])) = (int_64)0
	*(($5 + [88])) = (int_64)0
	*(($5 + [40])) = (int_64)0
	*(($5 + [24])) = (int_64)0
	CALL $74(($3 + [32]), $5)
	CALL eosio_assert(((uint_32)(*($3 + [40]) - *($3 + [36])) > (uint_32)[7]), [16875])
	CALL memcpy(($5 + [104]), *($3 + [36]), [8])
	*($5 + [116]) = $1
	*($3 + [24]) = $5
	*($3 + [36]) = (*($3 + [36]) + [8])
	$6 = *($5 + [104])
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $73(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $130($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $5 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [16884])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([128])
	CALL $72($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3 + [104])
	*($4 + [16]) = $2
	$5 = *($3 + [116])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $127($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*(($0 + [24])) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $11(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = CALL db_lowerbound_i64(*($1), *($1 + [8]), (int_64)-4427728020793352912, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	*($0 + [4]) = CALL $12($1, $3)
	*($0) = $1
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	CALL $13(($2 + [24]), $1, *([0] + [8192]), ($2 + [8]))
	*($0) = *($2 + [24])
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$4 = *([0] + [8192])
	*($2 + [24]) = $4
	*($2 + [32]) = $4
	CALL $14(($2 + [8]), ($2 + [24]), $4, ($2 + [16]))
	$5 = *($2 + [48])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($2 + [52])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$6 }
	$9 = *($8 + [8])
	if ( ($9 == 0) ){ goto $label$7 }
	$0 = $9
	$10 = ($8 + [12])
	$1 = *($10)
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($1 + [-48])
	$3 = *(($1 + [-32]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($1 + [-28])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$10
	$1 = $0
	if ( ((int_32)$9 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($8 + [8]))
	
.LABEL $label$8
	*($10) = $9
	CALL _ZdlPv($0)
	
.LABEL $label$7
	CALL _ZdlPv($8)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	$1 = *(($2 + [48]))
	goto $label$3 
	
.LABEL $label$4
	$1 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$1 = ($global$0 - [400])
	$global$0 = $1
	*([0] + [8192]) = $0
	CALL $2(($1 + [328]))
	$2 = *([0] + [8192])
	if ( ((int_64)*($1 + [328]) == (int_64)$2) ){ goto $label$3 }
	if ( ((int_64)*($1 + [336]) != (int_64)$2) ){ goto $label$3 }
	$3 = [0]
	if ( ((uint_64)((int_64)*($1 + [344]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$2 = (uint_64)*((($1 + [328]) + [24])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$2 = $5
	$3 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$2 = $5
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $3 ){ goto $label$8 }
	$3 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	CALL eosio_assert_code($3, (int_64)3002)
	$5 = *(($1 + [352]))
	$4 = CALL $124([16632])
	if ( ($4 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [16754])
	goto $label$11 
	
.LABEL $label$12
	if ( ($4 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$2 = (int_64)0
	
.LOOP $label$13:
	$3 = *(($4 + [16631]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [16799])
	
.LABEL $label$14
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$13 }
	goto $label$9 
	
.LABEL $label$10
	$2 = (int_64)0
	
.LABEL $label$9
	CALL eosio_assert_code(((int_64)$5 == (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)4)), (int_64)3002)
	$4 = ($1 + [360])
	$3 = *($1 + [360])
	$6 = CALL $124([16645])
	if ( ((int_32)$6 != (int_32)( *(($1 + [364])) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$18 }
	if ( (CALL $107($4, [0], [-1], [16645], $6) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$6 = [0]
	$3 = CALL $104(($1 + [32]), $4, [0], [6], $4)
	$8 = ($8 & [1])
	$8 = *($1 + [32])
	$7 = CALL $124([16747])
	if ( ((int_32)$7 != (int_32)( *($3 + [4]) ? uint_32($8 >> [1]) : $8 )) ){ goto $label$19 }
	$6 = (CALL $107($3, [0], [-1], [16747], $7) == 0)
	$8 = (*($1 + [32]) & [1])
	
.LABEL $label$19
	if ( ($8 == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$20
	if ( ($6 == 0) ){ goto $label$21 }
	$3 = CALL $104(($1 + [288]), $4, [6], [2], $4)
	$6 = CALL $104(($1 + [384]), $4, [8], [3], $4)
	$8 = *(($1 + [360]))
	$4 = CALL $104(($1 + [192]), $4, [11], (( *(($1 + [364])) ? uint_32($8 >> [1]) : ($8 & [1]) ) + [-11]), $4)
	$8 = CALL $108($3, [0], [10])
	$7 = CALL $108($6, [0], [10])
	if ( (*([0] + [8212]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$21
	CALL eosio_assert_code([0], (int_64)3002)
	if ( (*($1 + [360]) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$17
	$0 = *($1 + [328])
	$2 = *(($1 + [344]))
	*($1 + [304]) = $2
	$5 = (int_64)$2 >> (int_64)63
	*($1 + [312]) = $5)
	CALL eosio_assert_code(( ((uint_64)$2 > (uint_64)(int_64)9999) ? ((int_64)$5 != (int_64)0) : (int_64)($5 == 0) ), (int_64)3002)
	*($1 + [296]) = (int_64)0
	*($1 + [288]) = (int_64)0
	*((($1 + [248]) + [32])) = [0]
	*($1 + [264]) = (int_64)-1
	*($1 + [272]) = (int_64)0
	$2 = *([0] + [8192])
	*($1 + [248]) = $2
	*($1 + [256]) = $2
	*((($1 + [208]) + [32])) = [0]
	*($1 + [216]) = $2
	*($1 + [208]) = $2
	*($1 + [224]) = (int_64)-1
	*($1 + [232]) = (int_64)0
	CALL $3(($1 + [192]), ($1 + [248]))
	*($1 + [32]) = $0
	$4 = CALL db_find_i64($2, $2, (int_64)-3020379765375762432, $0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$23 }
	$4 = CALL $4(($1 + [208]), $4)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($1 + [208])), [16941])
	goto $label$22 
	
.LABEL $label$23
	$2 = *([0] + [8192])
	*($1 + [376]) = ($1 + [32])
	CALL $5(($1 + [384]), ($1 + [208]), $2, ($1 + [376]))
	$4 = *($1 + [388])
	
.LABEL $label$22
	$3 = *($1 + [196])
	$2 = *([0] + [8192])
	*($1 + [36]) = ($1 + [288])
	*($1 + [32]) = ($1 + [304])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [16992])
	CALL $6(($1 + [248]), $3, $2, ($1 + [32]))
	$0 = *([0] + [8192])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [16992])
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)($1 + [208])), [17027])
	CALL eosio_assert(((int_64)*($1 + [208]) == (int_64)CALL $fimport$3()), [17073])
	$2 = *($1 + [312])
	$5 = *($4)
	$11 = ((int_64)$5 + (int_64)*($1 + [304]))
	*($4) = $11
	*(($3 = ($4 + [8]))) = ((int_64)((int_64)$2 + (int_64)*($3)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($11 <= $5)))
	$2 = *($4 + [104])
	CALL eosio_assert([1], [17124])
	*($1 + [392]) = (($1 + [32]) + [97])
	*($1 + [388]) = ($1 + [32])
	*($1 + [384]) = ($1 + [32])
	CALL $7(($1 + [384]), $4)
	CALL eosio_assert(((int_32)(*($1 + [392]) - *($1 + [388])) > (int_32)[7]), [16935])
	CALL memcpy(*($1 + [388]), ($4 + [104]), [8])
	*($1 + [388]) = (*($1 + [388]) + [8])
	CALL db_update_i64(*($4 + [116]), $0, ($1 + [32]), [97])
	$4 = ($1 + [224])
	if ( (uint_64)($2 <= *($4)) ){ goto $label$24 }
	*($4) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	$6 = *($1 + [232])
	if ( ($6 == 0) ){ goto $label$25 }
	$8 = ($1 + [236])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$27 }
	
.LOOP $label$28:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$29 }
	CALL _ZdlPv($3)
	
.LABEL $label$29
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$28 }
	$4 = *(($1 + [232]))
	goto $label$26 
	
.LABEL $label$27
	$4 = $6
	
.LABEL $label$26
	*($8) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$25
	$8 = *($1 + [272])
	if ( ($8 == 0) ){ goto $label$3 }
	$7 = ($1 + [276])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$31 }
	
.LOOP $label$32:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$33 }
	$6 = *(($3 + [188]))
	if ( ($6 == 0) ){ goto $label$34 }
	*(($3 + [192])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$34
	CALL _ZdlPv($3)
	
.LABEL $label$33
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$32 }
	$4 = *(($1 + [272]))
	goto $label$30 
	
.LABEL $label$31
	$4 = $8
	
.LABEL $label$30
	*($7) = $8
	CALL _ZdlPv($4)
	goto $label$3 
	
.LABEL $label$16
	*([0] + [8204]) = [8200]
	*([0] + [8200]) = [8200]
	*([0] + [8208]) = [8200]
	*([0] + [8212]) = [1]
	
.LABEL $label$15
	*(($9 = (($1 + [16]) + [8]))) = *([0] + [8208])
	*($1 + [16]) = *([0] + [8200 align=4])
	$9 = *($9)
	*((($1 + [304]) + [8])) = $9
	*(($10 = (($1 + [208]) + [8]))) = $9
	$2 = *($1 + [16])
	*($1 + [208]) = $2
	*($1 + [304]) = $2
	$9 = *($10)
	*((($1 + [248]) + [8])) = $9
	*(($1 + [56])) = $9
	*($1 + [32]) = $0
	*($1 + [40]) = $0
	$2 = *($1 + [208])
	*($1 + [48]) = $2
	*($1 + [248]) = $2
	*(($1 + [72])) = $0
	*(($1 + [80])) = (int_64)-1
	*(($1 + [88])) = (int_64)0
	*(($1 + [96])) = [0]
	*(($1 + [112])) = $0
	*(($1 + [120])) = (int_64)-1
	*(($1 + [128])) = (int_64)0
	*(($1 + [136])) = [0]
	*(($1 + [152])) = $0
	*(($1 + [160])) = (int_64)-1
	*(($1 + [168])) = (int_64)0
	*(($1 + [176])) = [0]
	*($1 + [64]) = $0
	*($1 + [104]) = $0
	*($1 + [144]) = $0
	$2 = *($1 + [328])
	$9 = *($1 + [192])
	$10 = ($9 & [1])
	*($1 + [8]) = ( *($4 + [8]) ? ($4 + [1]) : $10 )
	*($1 + [12]) = ( *($4 + [4]) ? uint_32($9 >> [1]) : $10 )
	*($1) = *($1 + [8])
	$0 = *(($1 + [344]))
	CALL $9(($1 + [32]), $2, ($8 & [255]), ($7 & [255]), [0], *(CALL $8(($1 + [248]), $1)), $0, (int_64)$0 >> (int_64)63))
	CALL $10(($1 + [32]))
	if ( (*($1 + [192]) & [1]) ){ goto $label$38 }
	$4 = [1]
	if ( (*($1 + [384]) & [1]) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	CALL _ZdlPv(*(($4 + [8])))
	$4 = [1]
	if ( ((*($1 + [384]) & [1]) == 0) ){ goto $label$36 }
	
.LABEL $label$37
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1 + [288]) & $4) == 0) ){ goto $label$3 }
	goto $label$35 
	
.LABEL $label$36
	if ( ((*($1 + [288]) & $4) == 0) ){ goto $label$3 }
	
.LABEL $label$35
	CALL _ZdlPv(*($3 + [8]))
	if ( (*($1 + [360]) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((*($1 + [360]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($1 + [368])))
	
.LABEL $label$1
	$global$0 = ($1 + [400])
}

void .FUNC $14 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [16884])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([48])
	CALL $46($3)
	*($3 + [32]) = $1
	CALL $57(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3 + [24])
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $58(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$5 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	$7 = *($5 + [8])
	if ( ($7 == 0) ){ goto $label$4 }
	$3 = $7
	$6 = ($5 + [12])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = ($1 + [-48])
	$0 = *(($1 + [-32]))
	if ( ($0 == 0) ){ goto $label$7 }
	*(($1 + [-28])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$7
	$1 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	$3 = *(($5 + [8]))
	
.LABEL $label$5
	*($6) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [16852])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $127($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [40]) = ($4 + $5)
	*($3 + [32]) = $4
	$2 = CALL _Znwj([48])
	CALL $46($2)
	*($2 + [32]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [16875])
	CALL memcpy($2, $4, [8])
	*($3 + [36]) = ($4 + [8])
	CALL $47(($3 + [32]), ($2 + [8]))
	CALL eosio_assert(((uint_32)(*($3 + [40]) - *($3 + [36])) > (uint_32)[7]), [16875])
	CALL memcpy(($2 + [24]), *($3 + [36]), [8])
	*($2 + [36]) = $1
	*($3 + [24]) = $2
	*($3 + [36]) = (*($3 + [36]) + [8])
	$6 = *($2 + [24])
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $2
	*($7) = ($8 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $58(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $130($4)
	
.LABEL $label$6
	$8 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	$0 = *($8 + [8])
	if ( ($0 == 0) ){ goto $label$10 }
	$1 = $0
	$7 = ($8 + [12])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$1 = ($5 + [-48])
	$4 = *(($5 + [-32]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($5 + [-28])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$5 = $1
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$12 }
	$1 = *(($8 + [8]))
	
.LABEL $label$11
	*($7) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$10
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6, int_64 $7, int_64 $8)
{
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	$9 = ($global$0 - [144])
	$global$0 = $9
	CALL eosio_assert_code(((int_32)*($0 + [24]) ^ (int_32)[1]), (int_64)2)
	$10 = ($0 + [40])
	CALL eosio_assert_code(((int_64)((int_64)*($0 + [32]) | (int_64)*($10)) != (int_64)0), (int_64)1005)
	CALL eosio_assert_code((($3 + [-1]) <= [25]), (int_64)1003)
	CALL eosio_assert_code(((int_32)$4 == (int_32)[1]), (int_64)1009)
	if ( (int_64)($6 == 0) ){ goto $label$1 }
	CALL eosio_assert_code(((int_64)*($2 + [104]) != (int_64)$6), (int_64)1001)
	CALL eosio_assert_code(CALL $fimport$10($6), (int_64)4)
	if ( ((int_64)*($2 + [96]) == (int_64)$6) ){ goto $label$1 }
	*(($2 + [96])) = $6
	
.LABEL $label$1
	CALL __multi3(($9 + [112]), (CASTING uint_64)(uint_32 $4), (int_64)0, (CASTING uint_64)(uint_32 $3), (int_64)0)
	CALL __multi3(($9 + [96]), *($9 + [112]), *((($9 + [112]) + [8])), *(($0 + [32])), *($10))
	$11 = *((($9 + [96]) + [8]))
	$6 = *($9 + [96])
	CALL __multi3(($9 + [48]), $6, $11, (int_64)15, (int_64)0)
	CALL __multi3(($9 + [80]), $6, $11, (int_64)5, (int_64)0)
	CALL __udivti3(($9 + [32]), *($9 + [48]), *((($9 + [48]) + [8])), (int_64)1000, (int_64)0)
	CALL __udivti3(($9 + [64]), *($9 + [80]), *((($9 + [80]) + [8])), (int_64)1000, (int_64)0)
	$12 = *((($9 + [32]) + [8]))
	$13 = *((($9 + [64]) + [8]))
	$14 = *($9 + [32])
	$15 = *($9 + [64])
	if ( ($5 == 0) ){ goto $label$5 }
	CALL eosio_assert_code((int_64)(((int_64)$7 | (int_64)$8) == 0), (int_64)1003)
	$5 = ($2 + [8])
	$7 = *($5)
	CALL eosio_assert_code(( ((uint_64)*($2) >= (uint_64)$6) ? ((uint_64)$7 >= (uint_64)$11) : ((int_64)$7 == (int_64)$11) ), (int_64)2001)
	$7 = *($2)
	*($2) = (int_64))($7 - $6)
	*($5) = (int_64))((int_64))(*($5) - $11) - (CASTING uint_64)(uint_32 (uint_64)($7 <= $6)))
	$5 = ($0 + [136])
	$7 = *($5)
	CALL eosio_assert_code(( ((uint_64)*($0 + [128]) >= (uint_64)$6) ? ((uint_64)$7 >= (uint_64)$11) : ((int_64)$7 == (int_64)$11) ), (int_64)1007)
	$7 = *($0 + [128])
	*($0 + [128]) = (int_64))($7 - $6)
	*($5) = (int_64))((int_64))(*($5) - $11) - (CASTING uint_64)(uint_32 (uint_64)($7 <= $6)))
	if ( ((int_64)(*($2 + [96]) == 0) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL eosio_assert_code((int_64)(((int_64)((int_64)$6 ^ (int_64)$7) | (int_64)((int_64)$11 ^ (int_64)$8)) == 0), (int_64)1003)
	if ( (int_64)(*($2 + [96]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL $75(($9 + [16]), $0, $2, $15, $13)
	if ( ((int_64)((int_64)*($9 + [16]) | (int_64)*(($9 + [24]))) == (int_64)0) ){ goto $label$3 }
	$7 = $14
	goto $label$2 
	
.LABEL $label$3
	$7 = ((int_64)$14 + (int_64)$15)
	$12 = ((int_64)((int_64)$12 + (int_64)$13) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($7 <= $14)))
	$15 = (int_64)0
	$13 = (int_64)0
	
.LABEL $label$2
	$14 = *($0 + [80])
	$8 = ((int_64)$14 + (int_64)$7)
	*($0 + [80]) = $8
	$16 = (int_64)
	$17 = (int_64)
	$18 = ((int_64)$17($16($6 - $7)) - $15)
	*($0 + [64]) = $18 + (int_64)*($0 + [64])))
	*(($5 = ($0 + [88]))) = ((int_64)((int_64)*($5) + (int_64)$12) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($8 <= $14)))
	*(($5 = ($0 + [72]))) = ((int_64)((int_64))((int_64))((int_64))((int_64))($11 - $12) - (CASTING uint_64)(uint_32 (uint_64)($6 <= $7))) - $13) - (CASTING uint_64)(uint_32 (uint_64)($16 <= $15))) + (int_64)*($5)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($18 <= $17)))
	*($9 + [136]) = ((int_64)*($2 + [32]) & (int_64)15)
	$6 = (int_64)0
	*(($2 + [56])) = (int_64)0
	*(($2 + [40])) = (int_64)0
	*($2 + [32]) = (int_64)0
	*(($2 + [88])) = (int_64)0
	*($2 + [80]) = (int_64)0
	*($2 + [64]) = $4
	$11 = *($2 + [48])
	*($2 + [48]) = (int_64)0
	*(($2 + [24])) = *(($2 + [8]))
	*($2 + [16]) = *($2)
	*($9 + [128]) = ((int_64)$11 & (int_64)15)
	if ( ($3 == 0) ){ goto $label$6 }
	$5 = [0]
	$10 = ($9 + [8])
	$11 = (int_64)0
	
.LOOP $label$7:
	CALL $76($9, $0, $1, $2, ($9 + [136]), ($9 + [128]), $4, $5)
	$11 = *($9)
	$6 = ((int_64)$11 + (int_64)$6)
	$11 = ((int_64)((int_64)*($10) + (int_64)$11) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($6 <= $11)))
	$5 = ($5 + [1])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$7 }
	if ( (int_64)(((int_64)$6 | (int_64)$11) == 0) ){ goto $label$6 }
	$4 = ($0 + [72])
	$15 = *($4)
	$5 = ($0 + [64])
	CALL eosio_assert_code(( ((uint_64)*($5) >= (uint_64)$6) ? ((uint_64)$15 >= (uint_64)$11) : ((int_64)$15 == (int_64)$11) ), (int_64)1002)
	$15 = *($5)
	*($5) = (int_64))($15 - $6)
	$12 = *($2)
	$7 = ((int_64)$12 + (int_64)$6)
	*($2) = $7
	$13 = *($0 + [112])
	$14 = ((int_64)$13 + (int_64)$6)
	*($0 + [112]) = $14
	$8 = *($0 + [128])
	$16 = ((int_64)$8 + (int_64)$6)
	*($0 + [128]) = $16
	*($4) = (int_64))((int_64))(*($4) - $11) - (CASTING uint_64)(uint_32 (uint_64)($15 <= $6)))
	*(($5 = ($2 + [8]))) = ((int_64)((int_64)*($5) + (int_64)$11) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($7 <= $12)))
	*(($5 = ($0 + [120]))) = ((int_64)((int_64)*($5) + (int_64)$11) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $13)))
	*(($5 = ($0 + [136]))) = ((int_64)((int_64)*($5) + (int_64)$11) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($16 <= $8)))
	
.LABEL $label$6
	$global$0 = ($9 + [144])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	$6 = *($1 + [200])
	CALL eosio_assert([1], [17124])
	$8 = *(($1 + [188]))
	$7 = *(($1 + [192]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[48]))
	$11 = ($1 + [200])
	$12 = [173]
	
.LOOP $label$1:
	$12 = ($12 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$12 = ((((int_32)((uint_32)($9 + [-48]) / (uint_32)[48]) * (int_32)[41]) + $12) + [41])
	
.LABEL $label$2
	$7 = ($12 + [8])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$12 = CALL $127($7)
	goto $label$3 
	
.LABEL $label$4
	$12 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $12
	
.LABEL $label$3
	*($5 + [4]) = $12
	*($5) = $12
	*($5 + [8]) = ($12 + $7)
	CALL $64($5, $1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($5 + [4]), $11, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [212]), $2, $12, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $130($12)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_32 .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [136]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$5 = *(($0 + [96]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($0 + [100])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$10 }
	$2 = *($8 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	$4 = $2
	$9 = ($8 + [12])
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($3 + [-48])
	$1 = *(($3 + [-32]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($3 + [-28])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$3 = $4
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$13 }
	$4 = *(($8 + [8]))
	
.LABEL $label$12
	*($9) = $2
	CALL _ZdlPv($4)
	
.LABEL $label$11
	CALL _ZdlPv($8)
	
.LABEL $label$10
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$9 }
	$3 = *(($0 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$2 = *(($0 + [56]))
	if ( ($2 == 0) ){ goto $label$15 }
	$7 = ($0 + [60])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$17 }
	
.LOOP $label$18:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	$1 = *(($4 + [188]))
	if ( ($1 == 0) ){ goto $label$20 }
	*(($4 + [192])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$20
	CALL _ZdlPv($4)
	
.LABEL $label$19
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$18 }
	$3 = *(($0 + [56]))
	goto $label$16 
	
.LABEL $label$17
	$3 = $2
	
.LABEL $label$16
	*($7) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$15
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [16875])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [16875])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [16875])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [16875])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $92(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [16852])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $127($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([224])) + [24]) = [0]
	CALL $54(($5 + [176]))
	*($5 + [208]) = $0
	CALL $59(($3 + [32]), $5)
	CALL eosio_assert(((uint_32)(*($3 + [40]) - *($3 + [36])) > (uint_32)[7]), [16875])
	CALL memcpy(($5 + [200]), *($3 + [36]), [8])
	*($5 + [212]) = $1
	*($3 + [24]) = $5
	*($3 + [36]) = (*($3 + [36]) + [8])
	$6 = *($5 + [200])
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $56(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $130($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *(($1 + [188]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [192])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [16884])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([224])) + [24]) = [0]
	CALL $54(($3 + [176]))
	*($3 + [208]) = $1
	CALL $55(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3 + [200])
	*($4 + [16]) = $2
	$5 = *($3 + [212])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $56(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *(($3 + [188]))
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [192])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [64])
	$global$0 = $5
	*($5 + [56]) = $4
	*($5 + [48]) = $3
	$6 = *($2 + [96])
	if ( (int_64)($6 == 0) ){ goto $label$5 }
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	$3 = (int_64)0
	*($5 + [32]) = (int_64)0
	$4 = *([0] + [8192])
	*($5 + [8]) = $4
	*($5 + [16]) = $4
	$2 = CALL db_find_i64($4, $4, (int_64)-3020379765375762432, $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $4(($5 + [8]), $2)
	CALL eosio_assert(((int_32)*($2 + [112]) == (int_32)($5 + [8])), [16941])
	$3 = *([0] + [8192])
	*($5) = ($5 + [48])
	CALL eosio_assert([1], [16992])
	CALL $81(($5 + [8]), $2, $3, $5)
	$3 = *($5 + [48])
	$6 = *($1 + [128])
	$7 = ((int_64)$6 + (int_64)$3)
	*($1 + [128]) = $7
	$8 = *($1 + [160])
	$9 = ((int_64)$3 + (int_64)$8)
	*($1 + [160]) = $9
	$4 = *($5 + [56])
	*(($2 = ($1 + [136]))) = ((int_64)((int_64)*($2) + (int_64)$4) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($7 <= $6)))
	*(($1 = ($1 + [168]))) = ((int_64)((int_64)$4 + (int_64)*($1)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($9 <= $8)))
	$10 = *($5 + [32])
	if ( ($10 == 0) ){ goto $label$1 }
	$11 = ($5 + [36])
	$1 = *($11)
	if ( ((int_32)$1 == (int_32)$10) ){ goto $label$3 }
	
.LOOP $label$6:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$6 }
	$1 = *(($5 + [32]))
	goto $label$2 
	
.LABEL $label$5
	$3 = (int_64)0
	
.LABEL $label$4
	$4 = (int_64)0
	goto $label$1 
	
.LABEL $label$3
	$1 = $10
	
.LABEL $label$2
	*($11) = $10
	CALL _ZdlPv($1)
	
.LABEL $label$1
	*($0) = $3
	*($0 + [8]) = $4
	$global$0 = ($5 + [64])
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	$6 = *($1 + [24])
	CALL eosio_assert([1], [17124])
	$7 = ($1 + [24])
	$9 = *($1 + [8])
	$8 = *(($1 + [12]))
	$10 = (CASTING uint_64)(uint_32 ((int_32)($8 - $9) / (int_32)[48]))
	$11 = [8]
	
.LOOP $label$1:
	$11 = ($11 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$3:
	$11 = ($11 + [31])
	$13 = *($9 + [16])
	$12 = *(($9 + [20]))
	$14 = ($12 - $13)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$14 / (int_32)[24]))
	
.LOOP $label$4:
	$11 = ($11 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$5 }
	$11 = ((((int_32)((uint_32)($14 + [-24]) / (uint_32)[24]) * (int_32)[17]) + $11) + [18])
	$9 = ($9 + [48])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$11 = (($11 + [-17]) + [18])
	$9 = ($9 + [48])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$2
	$9 = ($11 + [8])
	if ( ($9 <= [513]) ){ goto $label$7 }
	$11 = CALL $127($9)
	goto $label$6 
	
.LABEL $label$7
	$11 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $11
	
.LABEL $label$6
	*($5 + [4]) = $11
	*($5) = $11
	*($5 + [8]) = ($11 + $9)
	CALL $68($5, $1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($5 + [4]), $7, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [36]), $2, $11, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $130($11)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	$5 = *($1 + [104])
	CALL eosio_assert([1], [17124])
	*($4 + [120]) = ($4 + [97])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	CALL $7(($4 + [112]), $1)
	CALL eosio_assert(((int_32)(*($4 + [120]) - *($4 + [116])) > (int_32)[7]), [16935])
	CALL memcpy(*($4 + [116]), ($1 + [104]), [8])
	*($4 + [116]) = (*($4 + [116]) + [8])
	CALL db_update_i64(*($1 + [116]), $2, $4, [97])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($5 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$6 = ($4 + ((int_32)$7 * (int_32)[24]))
	$8 = ($1 + [24])
	$3 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$1 = (($4 + $5) + [-24])
	
.LOOP $label$7:
	$4 = ($7 + [-24])
	$2 = *($4)
	*($4) = [0]
	*($1) = $2
	*(($1 + [16])) = *(($7 + [-8]))
	*(($1 + [8])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$3 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $3
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	$2 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	$7 = $2
	$6 = ($0 + [12])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$7 = ($1 + [-48])
	$4 = *(($1 + [-32]))
	if ( ($4 == 0) ){ goto $label$14 }
	*(($1 + [-28])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$1 = $7
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$13 }
	$7 = *(($0 + [8]))
	
.LABEL $label$12
	*($6) = $2
	CALL _ZdlPv($7)
	
.LABEL $label$11
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$15 }
	CALL _ZdlPv($5)
	
.LABEL $label$15
	(unreachable)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL $61($0, $1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[15]), [16875])
	CALL memcpy(($1 + [32]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [16875])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [16875])
	CALL memcpy(($1 + [64]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [16875])
	CALL memcpy(($1 + [80]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [16875])
	CALL memcpy(($1 + [96]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [16875])
	CALL memcpy(($1 + [112]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [16875])
	CALL memcpy(($1 + [128]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [16875])
	CALL memcpy(($1 + [144]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [16875])
	CALL memcpy(($1 + [160]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [16875])
	CALL memcpy(($1 + [176]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [16875])
	CALL memcpy(($1 + [184]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	$4 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *(($0 + [8]))), [16880])
	$6 = ($0 + [4])
	$3 = *($6)
	$2 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($2 & [128]) ){ goto $label$1 }
	$4 = (CASTING uint_32)(uint_64 $5)
	$6 = ($1 + [188])
	$2 = *($6)
	$7 = ($1 + [192])
	$3 = *($7)
	$8 = ((int_32)($3 - $2) / (int_32)[48])
	if ( ((uint_32)$8 >= (uint_32)$4) ){ goto $label$4 }
	CALL $62($6, ($4 - $8))
	$3 = *($7)
	$2 = *($6)
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$5 }
	$3 = ($2 + ((int_32)$4 * (int_32)[48]))
	*(($1 + [192])) = $3
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $63($0, $2)
	$2 = ($2 + [48])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	$6 = *($1 + [200])
	CALL eosio_assert([1], [17124])
	$8 = *(($1 + [188]))
	$7 = *(($1 + [192]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[48]))
	$11 = ($1 + [200])
	$12 = [173]
	
.LOOP $label$1:
	$12 = ($12 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$12 = ((((int_32)((uint_32)($9 + [-48]) / (uint_32)[48]) * (int_32)[41]) + $12) + [41])
	
.LABEL $label$2
	$7 = ($12 + [8])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$12 = CALL $127($7)
	goto $label$3 
	
.LABEL $label$4
	$12 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $12
	
.LABEL $label$3
	*($5 + [4]) = $12
	*($5) = $12
	*($5 + [8]) = ($12 + $7)
	CALL $64($5, $1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($5 + [4]), $11, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [212]), $2, $12, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $130($12)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	$6 = *($1 + [24])
	CALL eosio_assert([1], [17124])
	$7 = ($1 + [24])
	$9 = *($1 + [8])
	$8 = *(($1 + [12]))
	$10 = (CASTING uint_64)(uint_32 ((int_32)($8 - $9) / (int_32)[48]))
	$11 = [8]
	
.LOOP $label$1:
	$11 = ($11 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$3:
	$11 = ($11 + [31])
	$13 = *($9 + [16])
	$12 = *(($9 + [20]))
	$14 = ($12 - $13)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$14 / (int_32)[24]))
	
.LOOP $label$4:
	$11 = ($11 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$5 }
	$11 = ((((int_32)((uint_32)($14 + [-24]) / (uint_32)[24]) * (int_32)[17]) + $11) + [18])
	$9 = ($9 + [48])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$11 = (($11 + [-17]) + [18])
	$9 = ($9 + [48])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$2
	$9 = ($11 + [8])
	if ( ($9 <= [513]) ){ goto $label$7 }
	$11 = CALL $127($9)
	goto $label$6 
	
.LABEL $label$7
	$11 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $11
	
.LABEL $label$6
	*($5 + [4]) = $11
	*($5) = $11
	*($5 + [8]) = ($11 + $9)
	CALL $68($5, $1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($5 + [4]), $7, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [36]), $2, $11, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $130($11)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

void .FUNC $52 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert_code(((int_64)*($0 + [16]) == (int_64)$1), (int_64)1)
	CALL eosio_assert_code(((int_64)*($0 + [8]) != (int_64)0), (int_64)1004)
	$3 = ($0 + [88])
	CALL eosio_assert_code(((int_64)((int_64)*($0 + [80]) | (int_64)*($3)) != (int_64)0), (int_64)1008)
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$1 = *($3)
	$4 = *($0 + [80])
	$5 = *($0 + [8])
	$3 = CALL $124([17446])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($2) = ($3 << [1])
	$6 = ($2 | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($2) = ($7 | [1])
	*($2 + [8]) = $6
	*($2 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($6, [17446], $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $83($0, $5, $4, $1, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$5
	*(($0 + [88])) = (int_64)0
	*(($0 + [80])) = (int_64)0
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $102($2)
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	$6 = *($1 + [200])
	CALL eosio_assert([1], [17124])
	$8 = *(($1 + [188]))
	$7 = *(($1 + [192]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[48]))
	$11 = ($1 + [200])
	$12 = [173]
	
.LOOP $label$1:
	$12 = ($12 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$12 = ((((int_32)((uint_32)($9 + [-48]) / (uint_32)[48]) * (int_32)[41]) + $12) + [41])
	
.LABEL $label$2
	$7 = ($12 + [8])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$12 = CALL $127($7)
	goto $label$3 
	
.LABEL $label$4
	$12 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $12
	
.LABEL $label$3
	*($5 + [4]) = $12
	*($5) = $12
	*($5 + [8]) = ($12 + $7)
	CALL $64($5, $1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($5 + [4]), $11, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [212]), $2, $12, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $130($12)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [48])
	$global$0 = $1
	*($0) = (int_64)1
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)0
	$3 = ($0 + [12])
	CALL $60($3, $1)
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)*(($0 + [20]))) ){ goto $label$2 }
	*($4) = *($1)
	*(($4 + [8])) = *($1 + [8])
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	$4 = (*($2) + [48])
	*($2) = $4
	goto $label$1 
	
.LABEL $label$2
	CALL $60($3, $1)
	$4 = *($2)
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)*(($0 + [20]))) ){ goto $label$4 }
	*($4) = *($1)
	*(($4 + [8])) = *($1 + [8])
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	$4 = (*($2) + [48])
	*($2) = $4
	goto $label$3 
	
.LABEL $label$4
	CALL $60($3, $1)
	$4 = *($2)
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)*(($0 + [20]))) ){ goto $label$6 }
	*($4) = *($1)
	*(($4 + [8])) = *($1 + [8])
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	$4 = (*($2) + [48])
	*($2) = $4
	goto $label$5 
	
.LABEL $label$6
	CALL $60($3, $1)
	$4 = *($2)
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)*(($0 + [20]))) ){ goto $label$8 }
	*($4) = *($1)
	*(($4 + [8])) = *($1 + [8])
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	$4 = (*($2) + [48])
	*($2) = $4
	goto $label$7 
	
.LABEL $label$8
	CALL $60($3, $1)
	$4 = *($2)
	
.LABEL $label$7
	if ( ((int_32)$4 == (int_32)*(($0 + [20]))) ){ goto $label$10 }
	*($4) = *($1)
	*(($4 + [8])) = *($1 + [8])
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	$4 = (*($2) + [48])
	*($2) = $4
	goto $label$9 
	
.LABEL $label$10
	CALL $60($3, $1)
	$4 = *($2)
	
.LABEL $label$9
	if ( ((int_32)$4 == (int_32)*(($0 + [20]))) ){ goto $label$12 }
	*($4) = *($1)
	*(($4 + [8])) = *($1 + [8])
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	$4 = (*($2) + [48])
	*($2) = $4
	goto $label$11 
	
.LABEL $label$12
	CALL $60($3, $1)
	$4 = *($2)
	
.LABEL $label$11
	if ( ((int_32)$4 == (int_32)*(($0 + [20]))) ){ goto $label$14 }
	*($4) = *($1)
	*(($4 + [8])) = *($1 + [8])
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	$4 = (*($2) + [48])
	*($2) = $4
	goto $label$13 
	
.LABEL $label$14
	CALL $60($3, $1)
	$4 = *($2)
	
.LABEL $label$13
	if ( ((int_32)$4 == (int_32)*(($0 + [20]))) ){ goto $label$16 }
	*($4) = *($1)
	*(($4 + [8])) = *($1 + [8])
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	$4 = (*($2) + [48])
	*($2) = $4
	goto $label$15 
	
.LABEL $label$16
	CALL $60($3, $1)
	$4 = *($2)
	
.LABEL $label$15
	if ( ((int_32)$4 == (int_32)*(($0 + [20]))) ){ goto $label$17 }
	*($4) = *($1)
	*(($4 + [8])) = *($1 + [8])
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*($2) = (*($2) + [48])
	$global$0 = ($1 + [48])
	return $0
	
.LABEL $label$17
	CALL $60($3, $1)
	$global$0 = ($1 + [48])
	return $0
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	*([0] + [8192]) = *($0)
	CALL require_auth($1)
	$5 = ($0 + [32])
	CALL $3(($4 + [8]), $5)
	$0 = *($4 + [12])
	CALL eosio_assert_code(((int_64)*($0 + [16]) == (int_64)$1), (int_64)1)
	*(($0 + [40])) = $3
	*($0 + [32]) = $2
	CALL eosio_assert_code(((int_64)((int_64)$2 | (int_64)$3) != (int_64)0), (int_64)1005)
	$2 = *([0] + [8192])
	$0 = *($4 + [12])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [16992])
	CALL $41($5, $0, $2, $4)
	$global$0 = ($4 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *(($1 + [188]))
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [192])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1 + [24]) = (int_64)1
	$4 = ($1 + [24])
	$6 = *($1 + [8])
	$5 = *(($1 + [12]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($5 - $6) / (int_32)[48]))
	$8 = *($0)
	$9 = [8]
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$9 = ($9 + [31])
	$11 = *($6 + [16])
	$10 = *(($6 + [20]))
	$12 = ($10 - $11)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$12 / (int_32)[24]))
	
.LOOP $label$4:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$5 }
	$9 = ((((int_32)((uint_32)($12 + [-24]) / (uint_32)[24]) * (int_32)[17]) + $9) + [18])
	$6 = ($6 + [48])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$9 = (($9 + [-17]) + [18])
	$6 = ($6 + [48])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$6 = ($9 + [8])
	if ( ($6 <= [513]) ){ goto $label$7 }
	$9 = CALL $127($6)
	goto $label$6 
	
.LABEL $label$7
	$9 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$6
	*($3 + [4]) = $9
	*($3) = $9
	*($3 + [8]) = ($9 + $6)
	CALL $68($3, $1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$7 = *(($1 + [24]))
	*($1 + [36]) = CALL db_store_i64(*($8 + [8]), (int_64)-4157502895497936896, *(*($0 + [8])), $7, $9, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$7 >= (uint_64)*($8 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $130($9)
	if ( (uint_64)($7 <= *($8 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [16])
}

void .FUNC $116 (int_32 $0)
{
}

int_32 .FUNC $117 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $114 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $35 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $127($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [160]) + [24]))) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [160]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [16875])
	CALL memcpy(($4 + [160]), $2, [8])
	CALL eosio_assert(((uint_32)($7 + [-8]) > (uint_32)[15]), [16875])
	CALL memcpy((($4 + [160]) + [16]), ($2 + [8]), [16])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($8)
	$1 = *($4 + [176])
	$9 = *($4 + [160])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $130($2)
	
.LABEL $label$5
	CALL $10(($4 + [8]))
	$global$0 = ($4 + [192])
	return [1]
}

void .FUNC $112 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $113 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $110 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $111($1, $0, [17455])
	CALL $113()
	(unreachable)
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $124($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $105($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_32 .FUNC $118 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $117($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $119 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

void .FUNC $29 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*([0] + [8192]) = *($0)
	CALL require_auth($1)
	$4 = ($0 + [32])
	CALL $3(($3 + [8]), $4)
	$0 = *($3 + [12])
	CALL eosio_assert_code(((int_64)*($0) == (int_64)$1), (int_64)1)
	CALL eosio_assert_code(CALL $fimport$10($2), (int_64)4)
	CALL eosio_assert_code(((int_64)$2 != (int_64)0), (int_64)3)
	*($0 + [8]) = $2
	$2 = *([0] + [8192])
	$5 = *($3 + [12])
	*($3) = $0
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [16992])
	CALL $37($4, $5, $2, $3)
	$global$0 = ($3 + [16])
}

int_32 .FUNC $28 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $127($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [152]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [16875])
	CALL memcpy(($4 + [152]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [152])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $130($2)
	
.LABEL $label$5
	CALL $10($4)
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1 + [200]) = (int_64)1
	*($1 + [24]) = [1]
	$4 = *([0] + [8192])
	*($1 + [16]) = $4
	*($1 + [8]) = $4
	*($1) = $4
	$6 = *(($1 + [188]))
	$5 = *(($1 + [192]))
	$7 = ($5 - $6)
	$4 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[48]))
	$8 = ($1 + [200])
	$9 = *($0)
	$10 = [173]
	
.LOOP $label$1:
	$10 = ($10 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$10 = ((((int_32)((uint_32)($7 + [-48]) / (uint_32)[48]) * (int_32)[41]) + $10) + [41])
	
.LABEL $label$2
	$5 = ($10 + [8])
	if ( ($5 <= [513]) ){ goto $label$4 }
	$10 = CALL $127($5)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$3
	*($3 + [4]) = $10
	*($3) = $10
	*($3 + [8]) = ($10 + $5)
	CALL $64($3, $1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($3 + [4]), $8, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *(($1 + [200]))
	*($1 + [212]) = CALL db_store_i64(*($9 + [8]), (int_64)-4427728020793352912, *(*($0 + [8])), $4, $10, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$4 >= (uint_64)*($9 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $130($10)
	if ( (uint_64)($4 <= *($9 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($9 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $123(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*([0] + [8192]) = *($0)
	CALL require_auth($1)
	$5 = ($0 + [32])
	$6 = [0]
	$7 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-4427728020793352912, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $12($5, $7)
	
.LABEL $label$1
	$8 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert_code($8, (int_64)3001)
	$7 = ($0 + [72])
	$0 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)-4157502895497936896, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $15($7, $0)
	
.LABEL $label$2
	$0 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert_code($0, (int_64)3004)
	CALL $49($6, $1, $4, $2)
	$1 = *([0] + [8192])
	CALL eosio_assert($8, [16992])
	CALL $50($5, $6, $1, ($3 + [8]))
	$1 = *([0] + [8192])
	CALL eosio_assert($0, [16992])
	CALL $51($7, $4, $1, $3)
	$global$0 = ($3 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	CALL $1($0)
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	if ( ((int_64)$2 > (int_64)-4417019310388379649) ){ goto $label$11 }
	if ( ((int_64)$2 <= (int_64)-4417321156097343489) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-4417321156097343488) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-4417316208295018496) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4417032211455279104) ){ goto $label$2 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [1]
	*($3 + [64]) = *($3 + [88])
	CALL $22($1, $1, ($3 + [64]))
	goto $label$2 
	
.LABEL $label$11
	if ( ((int_64)$2 <= (int_64)-2039333636196532225) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-2039333636191635968) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)4520935773415407616) ){ goto $label$2 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [2]
	*($3 + [48]) = *($3 + [104])
	CALL $24($1, $1, ($3 + [48]))
	goto $label$2 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)-6217917475468607488) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4417321705853157376) ){ goto $label$2 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [3]
	*($3) = *($3 + [152])
	CALL $26($1, $1, $3)
	goto $label$2 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-4417019310388379648) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-3104548728665538560) ){ goto $label$2 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [4]
	*($3 + [32]) = *($3 + [120])
	CALL $28($1, $1, ($3 + [32]))
	goto $label$2 
	
.LABEL $label$8
	*($3 + [148]) = [0]
	*($3 + [144]) = [5]
	*($3 + [8]) = *($3 + [144])
	CALL $26($1, $1, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$7
	*($3 + [140]) = [0]
	*($3 + [136]) = [6]
	*($3 + [16]) = *($3 + [136])
	CALL $26($1, $1, ($3 + [16]))
	goto $label$2 
	
.LABEL $label$6
	*($3 + [100]) = [0]
	*($3 + [96]) = [7]
	*($3 + [56]) = *($3 + [96])
	CALL $28($1, $1, ($3 + [56]))
	goto $label$2 
	
.LABEL $label$5
	*($3 + [84]) = [0]
	*($3 + [80]) = [8]
	*($3 + [72]) = *($3 + [80])
	CALL $28($1, $1, ($3 + [72]))
	goto $label$2 
	
.LABEL $label$4
	*($3 + [132]) = [0]
	*($3 + [128]) = [9]
	*($3 + [24]) = *($3 + [128])
	CALL $28($1, $1, ($3 + [24]))
	goto $label$2 
	
.LABEL $label$3
	*($3 + [116]) = [0]
	*($3 + [112]) = [10]
	*($3 + [40]) = *($3 + [112])
	CALL $35($1, $1, ($3 + [40]))
	
.LABEL $label$2
	CALL $116([0])
	$global$0 = ($3 + [160])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5)
{
	*([0] + [8192]) = *($0)
	CALL require_auth($1)
	CALL $9($0, $1, $2, $3, $4, $5, (int_64)0, (int_64)0)
}

int_32 .FUNC $22 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [272])
	$global$0 = $3
	*(($4 = $3) + [216]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $127($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*($4 + [184]) = (int_64)0
	$3 = CALL $46((($4 + [184]) + [8]))
	*($4 + [176]) = ($2 + $5)
	*($4 + [168]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [16875])
	CALL memcpy(($4 + [184]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [16875])
	CALL memcpy($3, ($2 + [8]), [8])
	*($4 + [172]) = ($2 + [16])
	$3 = (($4 + [184]) + [16])
	CALL $47(($4 + [168]), $3)
	*(($6 = ($4 + [8]))) = *($4 + [176])
	*($4) = *($4 + [168])
	$6 = *($6)
	*((($4 + [224]) + [8])) = $6
	*(($7 = (($4 + [240]) + [8]))) = $6
	$8 = *($4)
	*($4 + [240]) = $8
	*($4 + [224]) = $8
	$6 = *($7)
	*((($4 + [256]) + [8])) = $6
	*(($4 + [40])) = $6
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [240])
	*($4 + [32]) = $1
	*($4 + [256]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [260]) = ($4 + [216])
	*($4 + [256]) = ($4 + [16])
	CALL $48(($4 + [256]), ($4 + [184]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $130($2)
	
.LABEL $label$4
	CALL $10(($4 + [16]))
	$6 = *($3)
	if ( ($6 == 0) ){ goto $label$5 }
	$5 = $6
	$7 = ($4 + [204])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($2 + [-48])
	$3 = *(($2 + [-32]))
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [-28])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$2 = $5
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$7 }
	$5 = *(($4 + [200]))
	
.LABEL $label$6
	*($7) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*([0] + [8192]) = *($0)
	CALL require_auth($1)
	$4 = ($0 + [32])
	CALL $3(($3 + [8]), $4)
	$0 = *($3 + [12])
	CALL eosio_assert_code(((int_64)*($0) == (int_64)$1), (int_64)1)
	CALL eosio_assert_code(CALL $fimport$10($2), (int_64)4)
	CALL eosio_assert_code(((int_64)$2 != (int_64)0), (int_64)3)
	*($0) = $2
	$2 = *([0] + [8192])
	$5 = *($3 + [12])
	*($3) = $0
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [16992])
	CALL $36($4, $5, $2, $3)
	$global$0 = ($3 + [16])
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $127($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [192]) = [0]
	*($4 + [184]) = (int_64)0
	*($4 + [196]) = [0]
	*($4 + [200]) = (int_64)0
	*($4 + [172]) = $2
	*($4 + [168]) = $2
	*($4 + [176]) = ($2 + $7)
	*($4 + [240]) = ($4 + [168])
	*($4 + [16]) = ($4 + [184])
	CALL $42(($4 + [16]), ($4 + [240]))
	*(($3 = ($4 + [8]))) = *($4 + [176])
	*($4) = *($4 + [168])
	$3 = *($3)
	*((($4 + [208]) + [8])) = $3
	*(($8 = (($4 + [224]) + [8]))) = $3
	$9 = *($4)
	*($4 + [224]) = $9
	*($4 + [208]) = $9
	$3 = *($8)
	*((($4 + [240]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [224])
	*($4 + [32]) = $1
	*($4 + [240]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [200])
	$8 = *($4 + [197])
	$10 = *($4 + [196])
	$11 = *($4 + [192])
	$1 = *($4 + [184])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $11), (int_32 ($10 & [255])), (int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $130($2)
	
.LABEL $label$5
	CALL $10(($4 + [16]))
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $27 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	*([0] + [8192]) = *($0)
	CALL require_auth($1)
	$3 = ($0 + [32])
	CALL $3(($2 + [8]), $3)
	$0 = *($2 + [12])
	CALL eosio_assert_code(((int_64)*($0 + [16]) == (int_64)$1), (int_64)1)
	CALL eosio_assert_code(*($0 + [24]), (int_64)2)
	*($0 + [24]) = [0]
	$1 = *([0] + [8192])
	$4 = *($2 + [12])
	*($2) = $0
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [16992])
	CALL $40($3, $4, $1, $2)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $127($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = (int_64)0
	*($4 + [160]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [16875])
	CALL memcpy(($4 + [160]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [16875])
	CALL memcpy((($4 + [160]) + [8]), ($2 + [8]), [8])
	*(($4 + [28])) = ($2 + [16])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [168])
	$1 = *($4 + [160])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $130($2)
	
.LABEL $label$5
	CALL $10(($4 + [8]))
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $109 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $111($1, $0, [17471])
	CALL $112()
	(unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[48])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[89478486]) ){ goto $label$2 }
	$5 = [89478485]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[48])
	if ( ((uint_32)$2 > (uint_32)[44739241]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[48]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	*(($6 = ($2 + ((int_32)$3 * (int_32)[48])))) = *($1)
	*($6 + [16 align=4]) = (int_64)0
	*(($6 + [8])) = *(($1 + [8]))
	*(($7 = ($6 + [24]))) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	$4 = ((int_32)$3 / (int_32)[24])
	if ( ($3 == 0) ){ goto $label$8 }
	$8 = ($6 + [16])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$7 }
	$3 = CALL _Znwj($3)
	*($8) = $3
	*(($8 = ($6 + [20]))) = $3
	*($7) = ($3 + ((int_32)$4 * (int_32)[24]))
	$7 = *(($1 + [16]))
	$4 = (*(($1 + [20])) - $7)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($3, $7, $4)
	*($8) = (*($8) + ((int_32)((uint_32)$4 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$8
	$9 = ($2 + ((int_32)$5 * (int_32)[48]))
	*($6 + [28 align=4]) = *($1 + [28 align=4])
	*(($6 + [44])) = *(($1 + [44]))
	*(($6 + [36])) = *(($1 + [36]))
	$10 = ($6 + [48])
	$3 = *($0)
	$1 = ($0 + [4])
	$8 = *($1)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$9 }
	$11 = ($3 - $8)
	$2 = [0]
	
.LOOP $label$10:
	$5 = ($8 + $2)
	*((($1 = ($6 + $2)) + [-40])) = *(($5 + [-40]))
	*(($1 + [-48])) = *(($5 + [-48]))
	*(($3 = ($1 + [-32]))) = (int_64)0
	*(($4 = ($1 + [-24]))) = [0]
	$7 = ($5 + [-32])
	*($3) = *($7)
	$3 = ($5 + [-24])
	*($4) = *($3)
	*($3) = [0]
	*($7) = (int_64)0
	*(($1 + [-4])) = *(($5 + [-4]))
	*(($1 + [-12])) = *(($5 + [-12]))
	*(($1 + [-20])) = *(($5 + [-20]))
	$2 = ($2 + [-48])
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$10 }
	$3 = *($0)
	*($0) = ($6 + $2)
	*(($0 + [8])) = $9
	$5 = ($0 + [4])
	$1 = *($5)
	*($5) = $10
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($1 + [-48])
	$2 = *(($1 + [-32]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($1 + [-28])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$1 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($3 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$9
	*($0) = $6
	*($1) = $10
	*(($0 + [8])) = $9
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $114($8)
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	(unreachable)
	(unreachable)
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	$4 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *($1 + [8])) / (int_32)[48]))
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$7 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $3) > (int_32)[0]), [16935])
	CALL memcpy(*($5), ($2 + [15]), [1])
	$3 = (*($5) + [1])
	*($5) = $3
	if ( $7 ){ goto $label$1 }
	$3 = *(($1 + [12]))
	$5 = *(($1 + [8]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $70($0, $5)
	$5 = ($5 + [48])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $108 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $124([16656])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [16656], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $115())
	*(CALL $115()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $122($4, ($3 + [12]), $2)
	$5 = CALL $115()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $109($3)
	
.LABEL $label$1
	CALL $110($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [24])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [16935])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $66($0, ($1 + [176]))
	CALL $65($0, $1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[15]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [16])
	return *($0 + [4]) = (*($0 + [4]) + [16])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [16])) - *($1 + [12])) / (int_32)[48]))
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [16935])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$4 = *(($1 + [16]))
	$3 = *(($1 + [12]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $67($0, $3)
	$3 = ($3 + [48])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [16875])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [16875])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [16875])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [16875])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [24]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[48])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[89478486]) ){ goto $label$2 }
	$6 = [89478485]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[48])
	if ( ((uint_32)$7 > (uint_32)[44739241]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[48]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	*(($4 = ($5 + ((int_32)$4 * (int_32)[48])))) = *($1)
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 + ((int_32)((int_32)$1 / (int_32)[-48]) * (int_32)[48]))
	$6 = ($5 + ((int_32)$6 * (int_32)[48]))
	$4 = ($4 + [48])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [16875])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [16875])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [16875])
	CALL memcpy(($1 + [16]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [16875])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [16875])
	CALL memcpy(($1 + [32]), *($0 + [4]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[48]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[48])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[89478486]) ){ goto $label$2 }
	$7 = [89478485]
	$2 = ((int_32)($2 - $4) / (int_32)[48])
	if ( ((uint_32)$2 > (uint_32)[44739241]) ){ goto $label$5 }
	$7 = ($2 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$7 * (int_32)[48]))
	$3 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$4
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[48]))
	return (unreachable)
	
.LABEL $label$3
	$7 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$5 = ($2 + ((int_32)$5 * (int_32)[48]))
	$6 = ($5 + ((int_32)$1 * (int_32)[48]))
	$1 = ($3 - $4)
	$3 = ($5 + ((int_32)((int_32)$1 / (int_32)[-48]) * (int_32)[48]))
	$7 = ($2 + ((int_32)$7 * (int_32)[48]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($3, $4, $1)
	$4 = *($0)
	
.LABEL $label$6
	*($0) = $3
	*(($0 + [4])) = $6
	*(($0 + [8])) = $7
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $130($0)
	
.LABEL $label$1
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $102 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [16935])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [16935])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [16935])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [16935])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [16935])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [16935])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [16935])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $84($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [16935])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [16935])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $89(CALL $88($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [16935])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $87(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $114($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$5 = ($global$0 - [208])
	$global$0 = $5
	CALL eosio_assert_code(CALL $fimport$10($1), (int_64)4)
	CALL require_recipient(*([0] + [8192]))
	CALL require_recipient($1)
	$6 = CALL $124([16632])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [16754])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [16631]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [16799])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17377])
	$9 = ((int_64)$7 & (int_64)72057594037927935)
	$10 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$9 = $7
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$9 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [17426])
	$9 = *([0] + [8192])
	*($5 + [112]) = [17349]
	*($5 + [116]) = CALL $124([17349])
	*($5 + [24]) = *($5 + [112])
	$7 = *(CALL $8(($5 + [120]), ($5 + [24])))
	*($5 + [96]) = [17356]
	*($5 + [100]) = CALL $124([17356])
	*($5 + [16]) = *($5 + [96])
	$6 = CALL $8(($5 + [104]), ($5 + [16]))
	*($5 + [80]) = [17368]
	*($5 + [84]) = CALL $124([17368])
	*($5 + [8]) = *($5 + [80])
	$11 = CALL $8(($5 + [88]), ($5 + [8]))
	*((($5 + [32]) + [24])) = $10
	*($5 + [40]) = $1
	*($5 + [48]) = $2
	*($5 + [32]) = *([0] + [8192])
	$8 = CALL $103((($5 + [32]) + [32]), $4)
	*($5 + [128]) = *($6)
	*($5 + [136]) = *($11)
	*(($6 = CALL _Znwj([16]))) = $9
	*($6 + [8]) = $7
	*((($5 + [128]) + [36])) = [0]
	$11 = ($6 + [16])
	*((($5 + [128]) + [24])) = $11
	*(($5 + [148])) = $11
	*($5 + [144]) = $6
	*($5 + [156 align=4]) = (int_64)0
	$6 = *($8)
	$11 = ( *((($5 + [32]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($11 + [32])
	$9 = (CASTING uint_64)(uint_32 $11)
	$4 = ($5 + [156])
	$11 = ($5 + [40])
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$12 }
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $84($4, $6)
	$4 = *(($5 + [160]))
	$6 = *(($5 + [156]))
	goto $label$13 
	
.LABEL $label$14
	$4 = [0]
	$6 = [0]
	
.LABEL $label$13
	*($5 + [172]) = $6
	*($5 + [168]) = $6
	*($5 + [176]) = $4
	*($5 + [184]) = ($5 + [168])
	*($5 + [196]) = $11
	*($5 + [200]) = ($5 + [48])
	*($5 + [204]) = $8
	*($5 + [192]) = ($5 + [32])
	CALL $85(($5 + [192]), ($5 + [184]))
	CALL $86(($5 + [192]), ($5 + [128]))
	$6 = *($5 + [192])
	CALL send_inline($6, (*($5 + [196]) - $6))
	$6 = *($5 + [192])
	if ( ($6 == 0) ){ goto $label$15 }
	*($5 + [196]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$15
	$6 = *($5 + [156])
	if ( ($6 == 0) ){ goto $label$16 }
	*(($5 + [160])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$16
	$6 = *($5 + [144])
	if ( ($6 == 0) ){ goto $label$17 }
	*(($5 + [148])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$17
	if ( ((*($8) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$18
	$global$0 = ($5 + [208])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($3 + [-1])
	CALL eosio_assert_code((($5 & [255]) <= [15]), (int_64)4001)
	*($0) = ((int_64)*($0) + (int_64)1)
	*(($8 = (($6 = *($0 + [8])) + ($7 = ((int_32)$5 * (int_32)[48])))) + [40]) = ((int_64)*($8 + [40]) + (int_64)1)
	$0 = *($8 + [16])
	$3 = (*(($8 + [20])) - $0)
	$9 = ((int_32)$3 / (int_32)[24])
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$2 }
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_64)*($0) > (uint_64)$4) ){ goto $label$1 }
	$0 = ($0 + [24])
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$2
	*($1) = [1]
	$4 = ((int_64)*($2) + (int_64)1)
	*($2) = $4
	if ( (uint_64)($4 <= *(($6 + $7) + [29])) ){ goto $label$4 }
	*($2) = (int_64)0
	$8 = (($6 + ((int_32)*(($6 + ((int_32)$5 * (int_32)[48])) + [28]) * (int_32)[48])) + [-48])
	
.LABEL $label$4
	return $8
	
.LABEL $label$1
	*($2) = (int_64)0
	*($1) = [0]
	*(($3 = ($0 + [16]))) = ((int_64)*($3) + (int_64)1)
	*(($3 = (($0 = ($6 + ((int_32)*(($0 + [8])) * (int_32)[48]))) + [-16]))) = ((int_64)*($3) + (int_64)1)
	return ($0 + [-48])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	$3 = *($3)
	$5 = *(($3 + [8]))
	$6 = *($1)
	$7 = ((int_64)$6 + (int_64)*($3))
	*($1) = $7
	*(($3 = ($1 + [8]))) = ((int_64)((int_64)$5 + (int_64)*($3)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($7 <= $6)))
	$5 = *($1 + [104])
	CALL eosio_assert([1], [17124])
	*($4 + [120]) = ($4 + [97])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	CALL $7(($4 + [112]), $1)
	CALL eosio_assert(((int_32)(*($4 + [120]) - *($4 + [116])) > (int_32)[7]), [16935])
	CALL memcpy(*($4 + [116]), ($1 + [104]), [8])
	*($4 + [116]) = (*($4 + [116]) + [8])
	CALL db_update_i64(*($1 + [116]), $2, $4, [97])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[24])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$3 }
	$3 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [24])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $114($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[24]))
	$5 = ($2 + ((int_32)$5 * (int_32)[24]))
	$3 = $5
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[24]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [128])
	$global$0 = $3
	*($0 + [48]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [64]) = [0]
	*($0 + [96]) = (int_64)0
	*($0 + [112]) = $1
	*(($0 + [56])) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [104]) = *(*(*($2 + [4])))
	$1 = *($2)
	*($3 + [120]) = ($3 + [97])
	*($3 + [116]) = $3
	*($3 + [112]) = $3
	CALL $7(($3 + [112]), $0)
	CALL eosio_assert(((int_32)(*($3 + [120]) - *($3 + [116])) > (int_32)[7]), [16935])
	CALL memcpy(*($3 + [116]), ($0 + [104]), [8])
	*($3 + [116]) = (*($3 + [116]) + [8])
	$4 = *($0 + [104])
	*($0 + [116]) = CALL db_store_i64(*($1 + [8]), (int_64)-3020379765375762432, *(*($2 + [8])), $4, $3, [97])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [128])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [16935])
	CALL memcpy(*($0 + [4]), $1, [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [1])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [16935])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $71($0, ($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [29]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [16935])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [16935])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [16935])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[0]), [16935])
	CALL memcpy(*($6), ($7 + [8]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [16935])
	CALL memcpy(*($6), ($7 + [16]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	$8 = ($global$0 - [192])
	$global$0 = $8
	*($8 + [96]) = *($3 + [104])
	$9 = CALL current_time()
	*(($8 + [136])) = *(($1 + [104]))
	*($8 + [144]) = $7
	*($8 + [128]) = *($1 + [96])
	*($8 + [112]) = *($1 + [48])
	*($8 + [104]) = ((int_64)((uint_64)$9 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL sha256(($8 + [96]), [64], ($8 + [160]))
	$10 = ((int_64)((int_64)((int_64)*($8 + [168]) ^ (int_64)*($8 + [160])) ^ (int_64)*($8 + [176])) ^ (int_64)*($8 + [184]))
	$11 = (int_64)0
	$9 = *($4)
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$1 }
	$9 = (int_64)1
	*($4) = (int_64)1
	
.LABEL $label$1
	*($8 + [160]) = [0]
	$2 = CALL $82($2, ($8 + [160]), $5, ((CASTING uint_32)(uint_64 $9) & [255]), $10)
	if ( (*($8 + [160]) == 0) ){ goto $label$5 }
	$12 = (int_64)16
	goto $label$4 
	
.LABEL $label$5
	$7 = *($2 + [4])
	if ( (*($2 + [1]) == 0) ){ goto $label$7 }
	$12 = (int_64)0
	CALL __multi3(($8 + [80]), *($1 + [64]), *(($1 + [72])), (CASTING uint_64)(uint_32 $7), (int_64)0)
	CALL __udivti3(($8 + [64]), *($8 + [80]), *((($8 + [80]) + [8])), (int_64)10000, (int_64)0)
	$14 = ( (int_64)0 ? $9 : $7 )
	$9 = *((($8 + [64]) + [8]))
	$7 = ( (uint_64)($10 <= $9) ? [0] : (int_64)($9 == 0) )
	$10 = *($8 + [64])
	$9 = *($2 + [8])
	$13 = ( $9 ? $10 : $7 )
	if ( (int_64)(((int_64)$13 | (int_64)$14) == 0) ){ goto $label$6 }
	$9 = *(($3 + [104]))
	$17 = *($2)
	$18 = ($1 + [184])
	if ( (*($18) <= [10]) ){ goto $label$8 }
	*($18) = [0]
	
.LABEL $label$8
	$10 = *($1 + [176])
	*($1 + [176]) = ((int_64)$10 + (int_64)1)
	$11 = CALL current_time()
	$7 = *($18)
	*($18) = ($7 + [1])
	*(($7 = (*(($1 + [188])) + ((int_32)$7 * (int_32)[48]))) + [17 align=1]) = *($8 + [96 align=1])
	*($7 + [8]) = ((int_64)((uint_64)$11 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($7) = $10
	*($7 + [16]) = $17
	*($7 + [24]) = $9
	*($7 + [32]) = $13
	*(($7 + [23])) = *(($8 + [102]))
	*(($7 + [21])) = *(($8 + [100]))
	*(($7 + [40])) = $14
	if ( (*($18) <= [10]) ){ goto $label$9 }
	*(($1 + [184])) = [0]
	
.LABEL $label$9
	$11 = (int_64)0
	$12 = ( (int_64)16 ? (int_64)0 : *($8 + [160]) )
	$9 = $13
	$10 = $14
	goto $label$2 
	
.LABEL $label$7
	$12 = (int_64)0
	CALL __multi3(($8 + [48]), (CASTING uint_64)(uint_32 $7), (int_64)0, (CASTING uint_64)(uint_32 $6), (int_64)0)
	CALL __multi3(($8 + [32]), *($8 + [48]), *((($8 + [48]) + [8])), *($1 + [32]), *(($1 + [40])))
	CALL __udivti3(($8 + [16]), *($8 + [32]), *((($8 + [32]) + [8])), (int_64)100, (int_64)0)
	$14 = *((($8 + [16]) + [8]))
	$13 = *($8 + [16])
	$11 = (int_64)0
	goto $label$3 
	
.LABEL $label$6
	$11 = (int_64)0
	
.LABEL $label$4
	$13 = (int_64)0
	$14 = (int_64)0
	
.LABEL $label$3
	$9 = (int_64)0
	$10 = (int_64)0
	
.LABEL $label$2
	$2 = *($2)
	$15 = ((int_64)(CASTING uint_64)(uint_32 $2) & (int_64)255)
	*($4) = $15
	$16 = *($5)
	CALL eosio_assert_code(((($2 + [-1]) & [255]) <= [15]), (int_64)4001)
	$12 = *($3 + [32])
	*($3 + [32]) = ((int_64)((int_64)$12 | (int_64)$15) | (int_64)((int_64)$12 << (int_64)5))
	$15 = *($3 + [48])
	*(($4 = ($3 + [56]))) = ((int_64)((int_64)*($4) << (int_64)4) | (int_64)(uint_64)$15 >> (uint_64)(int_64)60))
	*($3 + [48]) = ((int_64)$16 | (int_64)((int_64)$15 << (int_64)4))
	*(($4 = ($3 + [40]))) = ((int_64)$11 | (int_64)((int_64)((int_64)*($4) << (int_64)5) | (int_64)(uint_64)$12 >> (uint_64)(int_64)59)))
	if ( (int_64)(((int_64)$9 | (int_64)$10) == 0) ){ goto $label$10 }
	$4 = ($3 + [88])
	CALL eosio_assert_code((int_64)(((int_64)*($3 + [80]) | (int_64)*($4)) == 0), (int_64)2002)
	*($4) = $10
	*($3 + [80]) = $9
	
.LABEL $label$10
	CALL __multi3($8, *($1 + [32]), *(($1 + [40])), (CASTING uint_64)(uint_32 $6), (int_64)0)
	*(($3 = ($1 + [48]))) = ((int_64)*($3) + (int_64)1)
	$9 = *($3)
	$10 = ((int_64)$9 + (int_64)*($8))
	*(($3 = ($1 + [96]))) = $10
	*(($1 = ($1 + [104]))) = ((int_64)((int_64)*($1) + (int_64)*(($8 + [8]))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($10 <= $9)))
	*($0 + [8]) = $14
	*($0) = $13
	$global$0 = ($8 + [192])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[48]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[48])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[89478486]) ){ goto $label$2 }
	$6 = [89478485]
	$2 = ((int_32)($2 - $4) / (int_32)[48])
	if ( ((uint_32)$2 > (uint_32)[44739241]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[48]))
	goto $label$1 
	
.LABEL $label$4
	$6 = ($3 + [40])
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [-16])) = [0]
	*(($6 + [-24])) = (int_64)0
	*(($6 + [-40])) = [0]
	*(($6 + [-36])) = [0]
	*(($6 + [-32])) = (int_64)0
	*(($6 + [-12])) = [0]
	*(($6 + [-8])) = (int_64)0
	$6 = ($6 + [48])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[48]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $114($0)
	
.LABEL $label$1
	$7 = ($2 + ((int_32)$6 * (int_32)[48]))
	$8 = ($2 + ((int_32)$3 * (int_32)[48]))
	$6 = ($8 + [40])
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [-16])) = [0]
	*(($6 + [-24])) = (int_64)0
	*(($6 + [-40])) = [0]
	*(($6 + [-36])) = [0]
	*(($6 + [-32])) = (int_64)0
	*(($6 + [-12])) = [0]
	*(($6 + [-8])) = (int_64)0
	$6 = ($6 + [48])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$9 = ($8 + ((int_32)$1 * (int_32)[48]))
	$3 = *($0)
	$6 = ($0 + [4])
	$10 = *($6)
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$10 }
	$11 = ($3 - $10)
	$1 = [0]
	
.LOOP $label$11:
	$2 = ($10 + $1)
	*((($6 = ($8 + $1)) + [-40])) = *(($2 + [-40]))
	*(($6 + [-48])) = *(($2 + [-48]))
	*(($3 = ($6 + [-32]))) = (int_64)0
	*(($4 = ($6 + [-24]))) = [0]
	$5 = ($2 + [-32])
	*($3) = *($5)
	$3 = ($2 + [-24])
	*($4) = *($3)
	*($3) = [0]
	*($5) = (int_64)0
	*(($6 + [-4])) = *(($2 + [-4]))
	*(($6 + [-12])) = *(($2 + [-12]))
	*(($6 + [-20])) = *(($2 + [-20]))
	$1 = ($1 + [-48])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$11 }
	$3 = *($0)
	*($0) = ($8 + $1)
	*(($0 + [8])) = $7
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = $9
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($6 + [-48])
	$1 = *(($6 + [-32]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-28])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	*($0) = $8
	*($6) = $9
	*(($0 + [8])) = $7
	if ( ($3 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv($3)
	
.LABEL $label$8
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[15]), [16875])
	CALL memcpy($1, *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [16875])
	CALL memcpy(($1 + [16]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [16875])
	CALL memcpy(($1 + [32]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [16875])
	CALL memcpy(($1 + [48]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [16875])
	CALL memcpy(($1 + [64]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [16875])
	CALL memcpy(($1 + [80]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [16875])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	*($1 + [24]) = *(*($3) + [24])
	$6 = *($1 + [200])
	CALL eosio_assert([1], [17124])
	$8 = *(($1 + [188]))
	$7 = *(($1 + [192]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[48]))
	$11 = ($1 + [200])
	$3 = [173]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($9 + [-48]) / (uint_32)[48]) * (int_32)[41]) + $3) + [41])
	
.LABEL $label$2
	$7 = ($3 + [8])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$3 = CALL $127($7)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	CALL $64($5, $1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($5 + [4]), $11, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [212]), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $130($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	*($1) = *(*($3))
	$6 = *($1 + [200])
	CALL eosio_assert([1], [17124])
	$8 = *(($1 + [188]))
	$7 = *(($1 + [192]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[48]))
	$11 = ($1 + [200])
	$3 = [173]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($9 + [-48]) / (uint_32)[48]) * (int_32)[41]) + $3) + [41])
	
.LABEL $label$2
	$7 = ($3 + [8])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$3 = CALL $127($7)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	CALL $64($5, $1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($5 + [4]), $11, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [212]), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $130($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [17027])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17073])
	*($1 + [8]) = *(*($3) + [8])
	$6 = *($1 + [200])
	CALL eosio_assert([1], [17124])
	$8 = *(($1 + [188]))
	$7 = *(($1 + [192]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[48]))
	$11 = ($1 + [200])
	$3 = [173]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($9 + [-48]) / (uint_32)[48]) * (int_32)[41]) + $3) + [41])
	
.LABEL $label$2
	$7 = ($3 + [8])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$3 = CALL $127($7)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	CALL $64($5, $1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [16935])
	CALL memcpy(*($5 + [4]), $11, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*($1 + [212]), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $130($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [16875])
	CALL memcpy($1, *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [16875])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [1]) = ((int_32)*($2 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [16875])
	CALL memcpy(($1 + [4]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [16875])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $79($0, ($1 + [16]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [16875])
	CALL memcpy(($1 + [28]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [16875])
	CALL memcpy(($1 + [29]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [16875])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [16875])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [16880])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = ((int_32)($5 - $2) / (int_32)[24])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $80($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ((int_32)$7 * (int_32)[24]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$6 = *($7)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [16875])
	CALL memcpy($2, *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	CALL eosio_assert(((int_32)*($3) != (int_32)$6), [16875])
	CALL memcpy(($2 + [8]), *($7), [1])
	$6 = (*($7) + [1])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [16875])
	CALL memcpy(($2 + [16]), *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	$2 = ($2 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $32 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	*([0] + [8192]) = *($0)
	CALL require_auth($1)
	$3 = ($0 + [32])
	$4 = [0]
	$0 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-4427728020793352912, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $12($3, $0)
	
.LABEL $label$1
	$0 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert_code($0, (int_64)3001)
	CALL $52($4, $1)
	$1 = *([0] + [8192])
	CALL eosio_assert($0, [16992])
	CALL $53($3, $4, $1, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $33 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	*([0] + [8192]) = *($0)
	CALL require_auth($1)
	$3 = ($0 + [32])
	CALL $3(($2 + [8]), $3)
	$4 = [1]
	$0 = *($2 + [12])
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$1 }
	$4 = [1]
	if ( ((int_64)*($0 + [8]) == (int_64)$1) ){ goto $label$1 }
	$4 = ((int_64)*($0 + [16]) == (int_64)$1)
	
.LABEL $label$1
	CALL eosio_assert_code($4, (int_64)1)
	CALL eosio_assert_code(((int_32)*($0 + [24]) ^ (int_32)[1]), (int_64)2)
	*($0 + [24]) = [1]
	$1 = *([0] + [8192])
	$4 = *($2 + [12])
	*($2) = $0
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [16992])
	CALL $39($3, $4, $1, $2)
	$global$0 = ($2 + [16])
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*([0] + [8192]) = *($0)
	CALL require_auth($1)
	$4 = ($0 + [32])
	CALL $3(($3 + [8]), $4)
	$0 = *($3 + [12])
	CALL eosio_assert_code(((int_64)*($0) == (int_64)$1), (int_64)1)
	CALL eosio_assert_code(CALL $fimport$10($2), (int_64)4)
	CALL eosio_assert_code(((int_64)$2 != (int_64)0), (int_64)3)
	*($0 + [16]) = $2
	$2 = *([0] + [8192])
	$5 = *($3 + [12])
	*($3) = $0
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [16992])
	CALL $38($4, $5, $2, $3)
	$global$0 = ($3 + [16])
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$global$0 = $2
	*([0] + [8192]) = *($0)
	CALL require_auth($1)
	$3 = ($0 + [32])
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-4427728020793352912, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $12($3, $5)
	
.LABEL $label$1
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert_code($6, (int_64)3001)
	*($2 + [24]) = $1
	$7 = ($0 + [112])
	$9 = *(($0 + [140]))
	$8 = *(($0 + [136]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$5 = ($9 + [-24])
	$10 = *($5)
	if ( ((int_64)*($10 + [104]) == (int_64)$1) ){ goto $label$4 }
	$9 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($10 + [112]) == (int_32)$7), [16941])
	goto $label$2 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($7), *(($0 + [120])), (int_64)-3020379765375762432, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $4($7, $5)
	CALL eosio_assert(((int_32)*($10 + [112]) == (int_32)$7), [16941])
	goto $label$2 
	
.LABEL $label$6
	$1 = *([0] + [8192])
	*($2 + [8]) = ($2 + [24])
	CALL $5(($2 + [16]), $7, $1, ($2 + [8]))
	$10 = *($2 + [20])
	
.LABEL $label$2
	CALL $43($4, $10)
	$1 = *([0] + [8192])
	CALL eosio_assert($6, [16992])
	CALL $44($3, $4, $1, ($2 + [24]))
	$1 = *([0] + [8192])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [16992])
	CALL $45($7, $10, $1, ($2 + [24]))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $129 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8228]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8232])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8228]) = [1]
	$2 = ($2 << [16])
	*([0] + [8232]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8232])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8232]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8228]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8228]) = [1]
	$3 = ($3 << [16])
	*([0] + [8232]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8232])
	
.LABEL $label$10
	*([0] + [8232]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $127 (int_32 $0)
{
	return CALL $128([8236], $0)
}