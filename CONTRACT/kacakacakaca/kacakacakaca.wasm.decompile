(data (i32.const 4) "\10h\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 208) "invalid symbol name\00")
(data (i32.const 240) "read\00")
(data (i32.const 256) "invalid supply\00")
(data (i32.const 272) "quantity must be positive\00")
(data (i32.const 304) "only core token allowed\00")
(data (i32.const 336) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 400) "cannot pass end iterator to modify\00")
(data (i32.const 448) "object passed to modify is not in multi_index\00")
(data (i32.const 496) "cannot modify objects in table of another contract\00")
(data (i32.const 560) "updater cannot change primary key when modifying an object\00")
(data (i32.const 624) "write\00")
(data (i32.const 640) "cannot create objects in table of another contract\00")
(data (i32.const 704) "error reading iterator\00")
(data (i32.const 736) "active\00")
(data (i32.const 752) "invitation reward\00")
(data (i32.const 784) "type is not valid\00")
(data (i32.const 816) "Not exist game\00")
(data (i32.const 832) "the players are full\00")
(data (i32.const 864) "game is over\00")
(data (i32.const 880) "game delay\00")
(data (i32.const 896) "global_index\00")
(data (i32.const 912) "get\00")
(data (i32.const 928) " \00")
(data (i32.const 944) "Not exsit game\00")
(data (i32.const 960) "The amount is full\00")
(data (i32.const 992) "The game is over\00")
(data (i32.const 1024) "lack of quantity\00")
(data (i32.const 1056) "out of quantity\00")
(data (i32.const 1072) "the players are not full\00")
(data (i32.const 1104) "LuckyBuster Winner\00")
(data (i32.const 1136) "multiplication overflow or underflow\00")
(data (i32.const 1184) "multiplication underflow\00")
(data (i32.const 1216) "multiplication overflow\00")
(data (i32.const 1248) "attempt to subtract asset with different symbol\00")
(data (i32.const 1296) "subtraction underflow\00")
(data (i32.const 1328) "subtraction overflow\00")
(data (i32.const 1360) "kakakacacaca\00")
(data (i32.const 1376) "jackpot\00")
(data (i32.const 1392) "game is not over\00")
(data (i32.const 9808) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 9904) "stoi\00")
(data (i32.const 9920) ": no conversion\00")
(data (i32.const 9936) ": out of range\00")
(data (i32.const 9968) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 10240) "\00\01\02\04\07\03\06\05\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$6 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$7 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$8 (param i32 i64 i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$14 (param i32)))
(import "env" "printui" (func $fimport$15 (param i64)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$17 (param i64)))
(import "env" "require_auth2" (func $fimport$18 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$19 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$20 (param i32 i32)))
(import "env" "sha256" (func $fimport$21 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $73))
(export "free" (func $76))
(export "_ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $82))
(export "__errno_location" (func $90))
(export "strtol" (func $91))
(export "__shlim" (func $92))
(export "__intscan" (func $93))
(export "__shgetc" (func $94))
(export "__uflow" (func $95))
(export "__toread" (func $96))
(export "memcmp" (func $97))
(export "memchr" (func $98))
(export "strlen" (func $99))
(table $0 8 8 anyfunc)
(elem (i32.const 0) $100 $17 $12 $15 $8 $10 $6 $14)



int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC __errno_location ()
{
	return [9952]
}

int_32 .FUNC strtol (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return (CASTING uint_32)(uint_64 $3)
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [9969])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [9969])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [9969]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [9969]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [10240]))
	$10 = *(($13 + [9969]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [9969]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [9969]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [9969]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [9969])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [9969])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $43($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $31($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $44($4, $1)
	CALL $46(CALL $45(CALL $45($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [912])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $50($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [240])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $77(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $6
	CALL $78($6)
	
.LABEL $label$11
	CALL $78($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $78($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [624])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [624])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $42(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [624])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [624])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [624])
	CALL memcpy(*($0 + [4]), $2, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [64])
	*([0] + [4]) = $14
	CALL eosio_assert(((int_32)*(($1 + [44])) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	*($1 + [42]) = [1]
	*(($13 = $14) + [16]) = *($1 + [8])
	$5 = *($1)
	CALL eosio_assert([1], [560])
	$11 = [16]
	$7 = ($1 + [16])
	$6 = ($1 + [42])
	$4 = ($1 + [8])
	$8 = *($1 + [16])
	$9 = *(($1 + [20]))
	$10 = ($9 - $8)
	$12 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	
.LOOP $label$1:
	$11 = ($11 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	$11 = (($10 & [-8]) + $11)
	
.LABEL $label$2
	$9 = ($11 + [11])
	if ( ($9 <= [513]) ){ goto $label$4 }
	$11 = CALL malloc($9)
	goto $label$3 
	
.LABEL $label$4
	$11 = ($14 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$3
	*($13 + [4]) = $11
	*($13) = $11
	*($13 + [8]) = ($11 + $9)
	*($13 + [24]) = $13
	*($13 + [36]) = $4
	*($13 + [40]) = $7
	*($13 + [56]) = $6
	*($13 + [32]) = $1
	*($13 + [44]) = ($1 + [32])
	*($13 + [48]) = ($1 + [40])
	*($13 + [52]) = ($1 + [41])
	CALL $41(($13 + [32]), ($13 + [24]))
	CALL db_update_i64(*($1 + [48]), $2, $11, $9)
	if ( ($9 <= [513]) ){ goto $label$5 }
	CALL free($11)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($13 + [32]) = *($4)
	if ( (CALL memcmp(($13 + [16]), ($13 + [32]), [8]) == 0) ){ goto $label$7 }
	$11 = *($1 + [52])
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$8 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035924439720001536, ($13 + [24]), $5)
	*(($1 + [52])) = $11
	
.LABEL $label$8
	CALL db_idx64_update($11, $2, ($13 + [32]))
	
.LABEL $label$7
	*([0] + [4]) = ($13 + [64])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $49(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [240])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [240])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [240])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [624])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [624])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $33($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [624])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [624])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [624])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $33(CALL $32($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [624])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [624])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [624])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [624])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $8 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	$7 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$2 = ([0] - $7)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_32)($3 + $2) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	$7 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*(($7 + [44])) == (int_32)$5), [336])
	goto $label$3 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4710026338415673344, $1)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL $21($5, $3)
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)$5), [336])
	goto $label$3 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$3
	*($8 + [12]) = $7
	*($8 + [8]) = $5
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [784])
	$4 = *(($0 + [72]))
	$6 = *(($0 + [76]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$6 }
	$5 = ($6 + [-24])
	$2 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$6 }
	$6 = $5
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_32)($3 + $2) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = ($0 + [48])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$11 }
	$3 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*(($3 + [44])) == (int_32)$5), [336])
	if ( $3 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$3 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$3 = CALL $36($5, $3)
	CALL eosio_assert(((int_32)*($3 + [44]) == (int_32)$5), [336])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)*($3 + [42]) == (int_32)[1]), [1392])
	*($8 + [40]) = ($8 + [8])
	CALL eosio_assert([1], [400])
	CALL $60($5, $3, (int_64)0, ($8 + [40]))
	goto $label$8 
	
.LABEL $label$9
	$3 = *($7 + [40])
	*($8 + [40]) = *($7)
	*($8 + [39]) = $3
	$1 = *($0)
	*($8 + [28]) = ($8 + [39])
	*($8 + [24]) = ($8 + [40])
	CALL $61(($8 + [16]), $5, $1, ($8 + [24]))
	
.LABEL $label$8
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [240])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	$1 = ($0 + [8])
	CALL $63(($6 + [8]), $1, *($0), ($6 + [40]))
	$3 = *($6 + [12])
	$2 = *($3 + [40])
	*($6 + [40]) = *($3)
	*($6 + [39]) = $2
	$4 = *($0)
	*($6 + [28]) = ($6 + [39])
	*($6 + [24]) = ($6 + [40])
	$3 = ($0 + [48])
	CALL $61(($6 + [16]), $3, $4, ($6 + [24]))
	CALL $64(($6 + [40]), $1, *($0), ($6 + [24]))
	$4 = *($6 + [40])
	*($6 + [8]) = $4
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$5 = *($2) + [40])
	*($6 + [40]) = *($2)
	*($6 + [39]) = $5
	$4 = *($0)
	*($6 + [28]) = ($6 + [39])
	*($6 + [24]) = ($6 + [40])
	CALL $61(($6 + [16]), $3, $4, ($6 + [24]))
	CALL $65(($6 + [40]), $1, *($0), ($6 + [24]))
	$4 = *($6 + [40])
	*($6 + [8]) = $4
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$5 = *($2) + [40])
	*($6 + [40]) = *($2)
	*($6 + [39]) = $5
	$4 = *($0)
	*($6 + [28]) = ($6 + [39])
	*($6 + [24]) = ($6 + [40])
	CALL $61(($6 + [16]), $3, $4, ($6 + [24]))
	CALL $66(($6 + [40]), $1, *($0), ($6 + [24]))
	$4 = *($6 + [40])
	*($6 + [8]) = $4
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$5 = *($2) + [40])
	*($6 + [40]) = *($2)
	*($6 + [39]) = $5
	$4 = *($0)
	*($6 + [28]) = ($6 + [39])
	*($6 + [24]) = ($6 + [40])
	CALL $61(($6 + [16]), $3, $4, ($6 + [24]))
	CALL $67(($6 + [40]), $1, *($0), ($6 + [24]))
	$4 = *($6 + [40])
	*($6 + [8]) = $4
	$1 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$2 = *($1) + [40])
	*($6 + [40]) = *($1)
	*($6 + [39]) = $2
	$4 = *($0)
	*($6 + [28]) = ($6 + [39])
	*($6 + [24]) = ($6 + [40])
	CALL $61(($6 + [16]), $3, $4, ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [208])
	*([0] + [4]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$7 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [32]
	$10 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$9 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$10 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [112]
	$10 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$21 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$17
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$16 }
	if ( ((int_64)$10 != (int_64)$1) ){ goto $label$14 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [128]
	$10 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$27 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$27
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$23
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$22 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($12 + [136])) = $0
	*(($12 + [144])) = (int_64)-1
	*(($12 + [152])) = (int_64)0
	*(($12 + [160])) = [0]
	*($12 + [128]) = $0
	*($12 + [120]) = $0
	*($12 + [168]) = $0
	*(($12 + [176])) = $0
	*(($12 + [184])) = (int_64)-1
	*(($12 + [192])) = [0]
	*(($12 + [196])) = [0]
	*(($12 + [200])) = [0]
	*(($12 + [204])) = [0]
	if ( ((int_64)$2 <= (int_64)3625960649986670591) ){ goto $label$34 }
	if ( ((int_64)$2 > (int_64)5377982950824476671) ){ goto $label$33 }
	if ( ((int_64)$2 == (int_64)3625960649986670592) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)3626379861343338496) ){ goto $label$28 }
	*($12 + [68]) = [0]
	*($12 + [64]) = [1]
	*($12 + [56 align=4]) = *($12 + [64])
	CALL $18(($12 + [120]), ($12 + [56]))
	goto $label$28 
	
.LABEL $label$34
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$31 }
	if ( ((int_64)$2 == (int_64)-4157529991795441664) ){ goto $label$30 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$28 }
	*($12 + [92]) = [0]
	*($12 + [88]) = [2]
	*($12 + [32 align=4]) = *($12 + [88])
	CALL $13(($12 + [120]), ($12 + [32]))
	goto $label$28 
	
.LABEL $label$33
	if ( ((int_64)$2 == (int_64)5377982950824476672) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)8428183971499716240) ){ goto $label$28 }
	*($12 + [76]) = [0]
	*($12 + [72]) = [3]
	*($12 + [48 align=4]) = *($12 + [72])
	CALL $16(($12 + [120]), ($12 + [48]))
	goto $label$28 
	
.LABEL $label$32
	*($12 + [108]) = [0]
	*($12 + [104]) = [4]
	*($12 + [16 align=4]) = *($12 + [104])
	CALL $9(($12 + [120]), ($12 + [16]))
	goto $label$28 
	
.LABEL $label$31
	*($12 + [100]) = [0]
	*($12 + [96]) = [5]
	*($12 + [24 align=4]) = *($12 + [96])
	CALL $11(($12 + [120]), ($12 + [24]))
	goto $label$28 
	
.LABEL $label$30
	*($12 + [116]) = [0]
	*($12 + [112]) = [6]
	*($12 + [8 align=4]) = *($12 + [112])
	CALL $7(($12 + [120]), ($12 + [8]))
	goto $label$28 
	
.LABEL $label$29
	*($12 + [84]) = [0]
	*($12 + [80]) = [7]
	*($12 + [40 align=4]) = *($12 + [80])
	CALL $9(($12 + [120]), ($12 + [40]))
	
.LABEL $label$28
	$4 = *(($12 + [192]))
	if ( ($4 == 0) ){ goto $label$35 }
	$6 = ($12 + [196])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$37 }
	
.LOOP $label$38:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$39 }
	$5 = *($3 + [16])
	if ( ($5 == 0) ){ goto $label$40 }
	*(($3 + [20])) = $5
	CALL $78($5)
	
.LABEL $label$40
	CALL $78($3)
	
.LABEL $label$39
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$38 }
	$7 = *(($12 + [192]))
	goto $label$36 
	
.LABEL $label$37
	$7 = $4
	
.LABEL $label$36
	*($6) = $4
	CALL $78($7)
	
.LABEL $label$35
	$5 = *(($12 + [152]))
	if ( ($5 == 0) ){ goto $label$14 }
	$4 = ($12 + [156])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$42 }
	
.LOOP $label$43:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$44 }
	CALL $78($3)
	
.LABEL $label$44
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$43 }
	$7 = *(($12 + [152]))
	goto $label$41 
	
.LABEL $label$42
	$7 = $5
	
.LABEL $label$41
	*($4) = $5
	CALL $78($7)
	
.LABEL $label$14
	*([0] + [4]) = ($12 + [208])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_32 $23
	int_32 $24
	$24 = (*([0] + [4]) - [160])
	*([0] + [4]) = $24
	CALL require_auth(*($0))
	$8 = *(($0 + [32]))
	$5 = *(($0 + [36]))
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$1 }
	$18 = ($5 + [-24])
	$7 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($18)) == (int_64)$1) ){ goto $label$1 }
	$5 = $18
	$10 = ($18 + [-24])
	$18 = $10
	if ( ((int_32)($10 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$18 = ($0 + [8])
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$4 }
	$8 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*(($8 + [44])) == (int_32)$18), [336])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$10 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4710026338415673344, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $21($18, $10)
	CALL eosio_assert(((int_32)*($8 + [44]) == (int_32)$18), [336])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [784])
	$23 = *(($0 + [72]))
	$5 = *(($0 + [76]))
	if ( ((int_32)$5 == (int_32)$23) ){ goto $label$5 }
	$18 = ($5 + [-24])
	$7 = ([0] - $23)
	
.LOOP $label$6:
	if ( ((int_64)*(*($18)) == (int_64)$1) ){ goto $label$5 }
	$5 = $18
	$10 = ($18 + [-24])
	$18 = $10
	if ( ((int_32)($10 + $7) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$2 = ($0 + [48])
	if ( ((int_32)$5 == (int_32)$23) ){ goto $label$8 }
	$16 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*(($16 + [44])) == (int_32)$2), [336])
	goto $label$7 
	
.LABEL $label$8
	$16 = [0]
	$18 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$7 }
	$16 = CALL $36($2, $18)
	CALL eosio_assert(((int_32)*($16 + [44]) == (int_32)$2), [336])
	
.LABEL $label$7
	$3 = ((int_32)$16 != (int_32)[0])
	CALL eosio_assert($3, [816])
	CALL eosio_assert((*($16 + [41]) == 0), [832])
	CALL eosio_assert((*($16 + [42]) == 0), [864])
	$18 = int_32((*(($16 + [20])) - *($16 + [16])) >> [3])
	if ( ($18 == 0) ){ goto $label$10 }
	$20 = CALL current_time()
	*(($24 + [124])) = [0]
	*((($24 + [96]) + [32])) = [0]
	*($24 + [108]) = [0]
	*($24 + [112]) = [0]
	*($24 + [116]) = [0]
	*($24 + [120]) = [0]
	*($24 + [96]) = ((CASTING uint_32)(uint_64 ((uint_64)$20 / (uint_64)(int_64)1000000)) + [60])
	*($24 + [132]) = [0]
	*(($12 = (($24 + [96]) + [40]))) = [0]
	*(($13 = ($24 + [140]))) = [0]
	*($24 + [144]) = [0]
	*(($24 + [148])) = [0]
	*(($24 + [152])) = [0]
	$5 = ($8 + [24])
	$8 = (($24 + [16]) + [32])
	$7 = (($24 + [16]) + [16])
	$6 = ($24 | [1])
	$4 = ($24 + [132])
	$17 = (CASTING uint_64)(uint_32 $18)
	$14 = (($24 + [80]) + [8])
	
.LOOP $label$11:
	$9 = *($0)
	$19 = (int_64)59
	$18 = [736]
	$20 = (int_64)0
	$21 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$17 }
	$10 = *($18)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$10 = ($10 + [165])
	goto $label$15 
	
.LABEL $label$17
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$13
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$12 }
	*($14) = $21
	*($24 + [80]) = $9
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [112]
	$21 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$20 > (uint_64)(int_64)10) ){ goto $label$23 }
	$10 = *($18)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$10 = ($10 + [165])
	goto $label$21 
	
.LABEL $label$23
	$22 = (int_64)0
	if ( ((int_64)$20 == (int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$19
	$18 = ($18 + [1])
	$19 = ((int_64)$19 + (int_64)-5)
	$21 = ((int_64)$22 | (int_64)$21)
	$20 = ((int_64)$20 + (int_64)1)
	if ( ((int_64)$20 != (int_64)13) ){ goto $label$18 }
	*($24 + [72]) = $21
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [128]
	$21 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$20 > (uint_64)(int_64)7) ){ goto $label$29 }
	$10 = *($18)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$10 = ($10 + [165])
	goto $label$27 
	
.LABEL $label$29
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$25
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$24 }
	*($24 + [64]) = $21
	$23 = *(($16 + [16]))
	*(($10 = ($24 + [8]))) = [0]
	*($24) = (int_64)0
	$18 = CALL strlen([880])
	if ( ((uint_32)$18 >= (uint_32)[-16]) ){ goto $label$9 }
	$11 = ($23 + ((CASTING uint_32)(uint_64 ((int_64)$17 + (int_64)4294967295)) << [3]))
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$32 }
	*($24) = ($18 << [1])
	$23 = $6
	if ( $18 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$15 = (($18 + [16]) & [-16])
	$23 = CALL $77($15)
	*($10) = $23
	*($24) = ($15 | [1])
	*($24 + [4]) = $18
	
.LABEL $label$31
	CALL memcpy($23, [880], $18)
	
.LABEL $label$30
	*(($23 + $18)) = [0]
	*((($24 + [16]) + [8])) = *($11)
	*(($7 + [8])) = *(($5 + [8]))
	*(($7 + [4])) = *(($5 + [4]))
	*($7) = *($5)
	*(($7 + [12])) = *(($5 + [12]))
	*($24 + [16]) = *($0)
	*(($8 + [4])) = *($24 + [4 align=4])
	*($8) = *($24)
	*($24) = [0]
	*($24 + [4]) = [0]
	*($10) = [0]
	$18 = *($12)
	if ( ((uint_32)$18 >= (uint_32)*($13)) ){ goto $label$34 }
	CALL $29($18, ($24 + [80]), *($24 + [72]), *($24 + [64]), ($24 + [16]))
	*($12) = (*($12) + [40])
	goto $label$33 
	
.LABEL $label$34
	CALL $37($4, ($24 + [80]), ($24 + [72]), ($24 + [64]), ($24 + [16]))
	
.LABEL $label$33
	if ( ((*($8) & [1]) == 0) ){ goto $label$35 }
	CALL $78(*((($24 + [16]) + [40])))
	
.LABEL $label$35
	if ( ((*($24) & [1]) == 0) ){ goto $label$36 }
	CALL $78(*($10))
	
.LABEL $label$36
	$17 = ((int_64)$17 + (int_64)-1)
	if ( ((int_64)$17 != (int_64)0) ){ goto $label$11 }
	*(($24 + [116])) = [0]
	CALL prints([896])
	CALL printui($1)
	$20 = *($0)
	CALL $38(($24 + [80]), ($24 + [96]))
	*($24 + [16]) = $1
	*($24 + [24]) = (int_64)0
	$18 = *($24 + [80])
	CALL send_deferred(($24 + [16]), $20, $18, (*($24 + [84]) - $18), [0])
	$18 = *($24 + [80])
	if ( ($18 == 0) ){ goto $label$37 }
	*($24 + [84]) = $18
	CALL $78($18)
	
.LABEL $label$37
	CALL $39(($24 + [96]))
	
.LABEL $label$10
	CALL eosio_assert($3, [400])
	CALL $40($2, $16, (int_64)0, ($24 + [96]))
	*([0] + [4]) = ($24 + [160])
	return (unreachable)
	
.LABEL $label$9
	CALL $79($24)
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [144])
	*([0] + [4]) = $11
	CALL require_auth(*($0))
	$3 = [0]
	$9 = *($2)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [256])
	$7 = (int_64)0
	CALL eosio_assert(((int_64)$9 > (int_64)0), [272])
	$10 = *($0)
	$6 = (int_64)59
	$5 = [736]
	$8 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$11 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$3 = ($3 + [165])
	goto $label$9 
	
.LABEL $label$11
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$7
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$6 }
	*($11 + [80]) = $8
	*($11 + [72]) = $10
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [112]
	$8 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$17 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$3 = ($3 + [165])
	goto $label$15 
	
.LABEL $label$17
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$13
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$12 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [128]
	$10 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$23 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$3 = ($3 + [165])
	goto $label$21 
	
.LABEL $label$23
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$19
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$18 }
	*(($11 + [16])) = [0]
	*($11 + [8]) = (int_64)0
	$5 = CALL strlen([752])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$27 }
	*($11 + [8]) = ($5 << [1])
	$3 = (($11 + [8]) | [1])
	if ( $5 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$4 = (($5 + [16]) & [-16])
	$3 = CALL $77($4)
	*($11 + [8]) = ($4 | [1])
	*($11 + [16]) = $3
	*($11 + [12]) = $5
	
.LABEL $label$26
	CALL memcpy($3, [752], $5)
	
.LABEL $label$25
	*(($3 + $5)) = [0]
	*(($11 + [52])) = *(($2 + [12]))
	*(($11 + [48])) = *(($2 + [8]))
	*(($11 + [44])) = *(($2 + [4]))
	*($11 + [32]) = $1
	*($11 + [24]) = *($0)
	*($11 + [40]) = *($2)
	$5 = (($11 + [8]) + [8])
	*(($11 + [64])) = *($5)
	*($11 + [56]) = *($11 + [8])
	*($11 + [8]) = [0]
	*($11 + [12]) = [0]
	*($5) = [0]
	$5 = CALL $29(($11 + [88]), ($11 + [72]), $8, $10, ($11 + [24]))
	CALL $30(($11 + [128]), $5)
	$3 = *($11 + [128])
	CALL send_inline($3, (*($11 + [132]) - $3))
	$3 = *($11 + [128])
	if ( ($3 == 0) ){ goto $label$28 }
	*($11 + [132]) = $3
	CALL $78($3)
	
.LABEL $label$28
	$3 = *($5 + [28])
	if ( ($3 == 0) ){ goto $label$29 }
	*(($5 + [32])) = $3
	CALL $78($3)
	
.LABEL $label$29
	$3 = *($5 + [16])
	if ( ($3 == 0) ){ goto $label$30 }
	*(($5 + [20])) = $3
	CALL $78($3)
	
.LABEL $label$30
	if ( ((*(($11 + [56])) & [1]) == 0) ){ goto $label$31 }
	CALL $78(*(($11 + [64])))
	
.LABEL $label$31
	if ( ((*($11 + [8]) & [1]) == 0) ){ goto $label$32 }
	CALL $78(*(($11 + [16])))
	
.LABEL $label$32
	*([0] + [4]) = ($11 + [144])
	return (unreachable)
	
.LABEL $label$24
	CALL $79(($11 + [8]))
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1397703940
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [144])
	$6 = (int_64)5459781
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [208])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [240])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [240])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [240])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [48])
	*([0] + [4]) = $14
	*($14 + [40]) = $1
	*($14 + [32]) = $4
	CALL require_auth(*($0))
	$10 = [0]
	$13 = [0]
	$5 = *($2)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$11 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$13 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$13 = [0]
	
.LABEL $label$1
	CALL eosio_assert($13, [256])
	$7 = *($3 + [8])
	$6 = *($3)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$11 = (uint_64)$7 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$10 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [256])
	CALL eosio_assert(((int_64)$5 > (int_64)0), [272])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [272])
	CALL eosio_assert(((int_64)$4 != (int_64)0), [272])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1397703940), [304])
	CALL eosio_assert(((int_64)$7 == (int_64)1397703940), [304])
	$8 = *(($0 + [32]))
	$13 = *(($0 + [36]))
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$11 }
	$12 = ($13 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$12:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$11 }
	$13 = $12
	$10 = ($12 + [-24])
	$12 = $10
	if ( ((int_32)($10 + $9) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$12 = ($0 + [8])
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$16 }
	$10 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*(($10 + [44])) == (int_32)$12), [336])
	if ( $10 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$10 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4710026338415673344, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$14 }
	$10 = CALL $21($12, $10)
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)$12), [336])
	
.LABEL $label$15
	*($14 + [20]) = $3
	*($14 + [16]) = $2
	*($14 + [24]) = ($14 + [32])
	CALL eosio_assert([1], [400])
	CALL $23($12, $10, (int_64)0, ($14 + [16]))
	goto $label$13 
	
.LABEL $label$14
	$11 = *($0)
	*($14 + [20]) = $2
	*($14 + [24]) = $3
	*($14 + [16]) = ($14 + [40])
	*($14 + [28]) = ($14 + [32])
	CALL $22(($14 + [8]), $12, $11, ($14 + [16]))
	
.LABEL $label$13
	*([0] + [4]) = ($14 + [48])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [256])
	*([0] + [4]) = $17
	CALL require_auth(*($0))
	$10 = *(($0 + [32]))
	$9 = *(($0 + [36]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$11 = ($9 + [-24])
	$3 = ([0] - $10)
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$1 }
	$9 = $11
	$5 = ($11 + [-24])
	$11 = $5
	if ( ((int_32)($5 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$11 = ($0 + [8])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$4 }
	$10 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*(($10 + [44])) == (int_32)$11), [336])
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	$5 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4710026338415673344, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $21($11, $5)
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)$11), [336])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [784])
	$4 = *(($0 + [72]))
	$9 = *(($0 + [76]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$5 }
	$11 = ($9 + [-24])
	$3 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$5 }
	$9 = $11
	$5 = ($11 + [-24])
	$11 = $5
	if ( ((int_32)($5 + $3) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = ($0 + [48])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$8 }
	$9 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*(($9 + [44])) == (int_32)$3), [336])
	goto $label$7 
	
.LABEL $label$8
	$11 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$11 <= (int_32)[-1]) ){ goto $label$9 }
	$9 = CALL $36($3, $11)
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$3), [336])
	goto $label$7 
	
.LABEL $label$9
	$9 = [0]
	
.LABEL $label$7
	*($17 + [236]) = $9
	*($17 + [232]) = $3
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [816])
	CALL eosio_assert(((int_32)*($9 + [41]) == (int_32)[1]), [1072])
	CALL eosio_assert((*($9 + [42]) == 0), [864])
	CALL sha256($2, [32], ($17 + [192]))
	$11 = *($17 + [192])
	$4 = ((uint_32)$11 % (uint_32)*($10 + [40]))
	*($17 + [191]) = $4
	CALL printui((CASTING uint_64)(uint_32 $11))
	$13 = CALL current_time()
	*(($17 + [156])) = [0]
	*((($17 + [128]) + [32])) = [0]
	*($17 + [140]) = [0]
	*($17 + [144]) = [0]
	*($17 + [148]) = [0]
	*($17 + [152]) = [0]
	*($17 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$13 / (uint_64)(int_64)1000000)) + [60])
	*($17 + [164]) = [0]
	*(($17 + [168])) = [0]
	*(($17 + [172])) = [0]
	*($17 + [176]) = [0]
	*(($17 + [180])) = [0]
	*(($17 + [184])) = [0]
	$2 = ($17 + [164])
	$16 = *($0)
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [736]
	$14 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$15 }
	$5 = *($11)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$5 = ($5 + [165])
	goto $label$13 
	
.LABEL $label$15
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$11
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$10 }
	*($17 + [48]) = $14
	*($17 + [40]) = $16
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [112]
	$14 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$13 > (uint_64)(int_64)10) ){ goto $label$21 }
	$5 = *($11)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$5 = ($5 + [165])
	goto $label$19 
	
.LABEL $label$21
	$15 = (int_64)0
	if ( ((int_64)$13 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$17
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$16 }
	*($17 + [240]) = $14
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [128]
	$14 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$27 }
	$5 = *($11)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$5 = ($5 + [165])
	goto $label$25 
	
.LABEL $label$27
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$23
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$22 }
	*($17 + [8]) = $14
	$9 = *($9 + [16])
	*((($17 + [24]) + [8])) = [0]
	*($17 + [24]) = (int_64)0
	$11 = CALL strlen([1104])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$29 }
	$5 = ($10 + [8])
	$4 = ($9 + ($4 << [3]))
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$32 }
	*($17 + [24]) = ($11 << [1])
	$9 = (($17 + [24]) | [1])
	if ( $11 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$8 = (($11 + [16]) & [-16])
	$9 = CALL $77($8)
	*($17 + [24]) = ($8 | [1])
	*($17 + [32]) = $9
	*($17 + [28]) = $11
	
.LABEL $label$31
	CALL memcpy($9, [1104], $11)
	
.LABEL $label$30
	*(($9 + $11)) = [0]
	*($17 + [88]) = *($4)
	*(($17 + [104])) = *(($5 + [8]))
	*(($17 + [100])) = *(($5 + [4]))
	*(($17 + [108])) = *(($5 + [12]))
	*($17 + [80]) = *($0)
	*($17 + [96]) = *($5)
	*(($17 + [116])) = *($17 + [28 align=4])
	*($17 + [112]) = *($17 + [24])
	*($17 + [24]) = [0]
	*($17 + [28]) = [0]
	*((($17 + [24]) + [8])) = [0]
	$11 = (($17 + [128]) + [40])
	$5 = *($11)
	if ( ((uint_32)$5 >= (uint_32)*(($17 + [172]))) ){ goto $label$34 }
	CALL $29($5, ($17 + [40]), *($17 + [240]), *($17 + [8]), ($17 + [80]))
	*($11) = (*($11) + [40])
	goto $label$33 
	
.LABEL $label$34
	CALL $37($2, ($17 + [40]), ($17 + [240]), ($17 + [8]), ($17 + [80]))
	
.LABEL $label$33
	if ( ((*(($17 + [112])) & [1]) == 0) ){ goto $label$35 }
	CALL $78(*(($17 + [120])))
	
.LABEL $label$35
	if ( ((*($17 + [24]) & [1]) == 0) ){ goto $label$36 }
	CALL $78(*(($17 + [32])))
	
.LABEL $label$36
	*(($17 + [148])) = [0]
	CALL prints([896])
	CALL printui($1)
	$15 = *($0)
	CALL $38(($17 + [40]), ($17 + [128]))
	*($17 + [80]) = $1
	$13 = (int_64)0
	*($17 + [88]) = (int_64)0
	$11 = *($17 + [40])
	CALL send_deferred(($17 + [80]), $15, $11, (*($17 + [44]) - $11), [0])
	$11 = *($17 + [40])
	if ( ($11 == 0) ){ goto $label$37 }
	*($17 + [44]) = $11
	CALL $78($11)
	
.LABEL $label$37
	$12 = *(($10 + [40]))
	$6 = *(($10 + [32]))
	$15 = *($10 + [24])
	CALL eosio_assert([1], [1136])
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [1184])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [1216])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($10 + [16]))), [1248])
	$15 = (int_64)
	CALL eosio_assert(((int_64)$15(((int_64)$15 * (int_64)$12) - *(($10 + [8])))) > (int_64)-4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [1328])
	$7 = ((int_64)((int_64)$15 * (int_64)7) / (int_64)10)
	$1 = *($0)
	$12 = (int_64)59
	$11 = [736]
	$14 = (int_64)0
	
.LOOP $label$38:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$43 }
	$5 = *($11)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$5 = ($5 + [165])
	goto $label$41 
	
.LABEL $label$43
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$39
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$38 }
	*($17 + [32]) = $14
	*($17 + [24]) = $1
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [112]
	$14 = (int_64)0
	
.LOOP $label$44:
	if ( ((uint_64)$13 > (uint_64)(int_64)10) ){ goto $label$49 }
	$5 = *($11)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$5 = ($5 + [165])
	goto $label$47 
	
.LABEL $label$49
	$15 = (int_64)0
	if ( ((int_64)$13 == (int_64)11) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$45
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$44 }
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [128]
	$1 = (int_64)0
	
.LOOP $label$50:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$55 }
	$5 = *($11)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$5 = ($5 + [165])
	goto $label$53 
	
.LABEL $label$55
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$51
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$1 = ((int_64)$15 | (int_64)$1)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$50 }
	$13 = (int_64)0
	$15 = (int_64)59
	$11 = [1360]
	$16 = (int_64)0
	
.LOOP $label$56:
	$12 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$57 }
	$5 = *($11)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$5 = ($5 + [165])
	goto $label$58 
	
.LABEL $label$59
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$57
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$16 = ((int_64)$12 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$56 }
	*(($17 + [16])) = [0]
	*($17 + [8]) = (int_64)0
	$11 = CALL strlen([1376])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$28 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$62 }
	*($17 + [8]) = ($11 << [1])
	$5 = (($17 + [8]) | [1])
	if ( $11 ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	$9 = (($11 + [16]) & [-16])
	$5 = CALL $77($9)
	*($17 + [8]) = ($9 | [1])
	*($17 + [16]) = $5
	*($17 + [12]) = $11
	
.LABEL $label$61
	CALL memcpy($5, [1376], $11)
	
.LABEL $label$60
	*(($5 + $11)) = [0]
	*(($17 + [104])) = $6
	*(($17 + [116])) = *($17 + [12])
	*($17 + [88]) = $16
	$11 = ($17 + [16])
	*(($17 + [120])) = *($11)
	*($17 + [80]) = *($0)
	*($17 + [96]) = $7
	*($17 + [112]) = *($17 + [8])
	*($17 + [8]) = [0]
	*($17 + [12]) = [0]
	*($11) = [0]
	$11 = CALL $29(($17 + [40]), ($17 + [24]), $14, $1, ($17 + [80]))
	CALL $30(($17 + [240]), $11)
	$5 = *($17 + [240])
	CALL send_inline($5, (*($17 + [244]) - $5))
	$5 = *($17 + [240])
	if ( ($5 == 0) ){ goto $label$63 }
	*($17 + [244]) = $5
	CALL $78($5)
	
.LABEL $label$63
	$5 = *($11 + [28])
	if ( ($5 == 0) ){ goto $label$64 }
	*(($11 + [32])) = $5
	CALL $78($5)
	
.LABEL $label$64
	$5 = *($11 + [16])
	if ( ($5 == 0) ){ goto $label$65 }
	*(($11 + [20])) = $5
	CALL $78($5)
	
.LABEL $label$65
	if ( ((*(($17 + [112])) & [1]) == 0) ){ goto $label$66 }
	CALL $78(*(($17 + [120])))
	
.LABEL $label$66
	if ( ((*($17 + [8]) & [1]) == 0) ){ goto $label$67 }
	CALL $78(*(($17 + [16])))
	
.LABEL $label$67
	$11 = *($17 + [236])
	*($17 + [84]) = ($17 + [191])
	*($17 + [80]) = ($17 + [232])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [400])
	CALL $59($3, $11, (int_64)0, ($17 + [80]))
	CALL $39(($17 + [128]))
	*([0] + [4]) = ($17 + [256])
	return (unreachable)
	
.LABEL $label$29
	CALL $79(($17 + [24]))
	
.LABEL $label$28
	CALL $79(($17 + [8]))
	(unreachable)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [112])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($7 + [40])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7) = (int_64)0
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [240])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((uint_32)($3 + [-8]) > (uint_32)[31]), [240])
	$1 = ($7 + [16])
	CALL memcpy($1, ($5 + [8]), [32])
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	*(($3 = (($7 + [48]) + [24]))) = *(($1 + [24]))
	*(($5 = (($7 + [48]) + [16]))) = *(($1 + [16]))
	$4 = *($7)
	*($7 + [48]) = *($1)
	*($7 + [60]) = *(($1 + [12]))
	*($7 + [56]) = *(($1 + [8]))
	*((($7 + [80]) + [24])) = *($3)
	*((($7 + [80]) + [16])) = *($5)
	*($7 + [88]) = *($7 + [56])
	*($7 + [80]) = *($7 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 $4), (int_64 ($7 + [80])), (int_32 $6))
	*([0] + [4]) = ($7 + [112])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	*($11 + [24]) = $1
	$9 = *($0)
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$1 }
	$5 = *($4)
	if ( ($5 & [1]) ){ goto $label$3 }
	$5 = uint_32($5 >> [1])
	$6 = ($4 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($4 + [4])
	$6 = *($4 + [8])
	
.LABEL $label$2
	$8 = CALL strlen([928])
	if ( ($8 == 0) ){ goto $label$7 }
	$7 = [-1]
	
.LOOP $label$8:
	if ( ($5 == 0) ){ goto $label$4 }
	$10 = ($6 + $5)
	$5 = ($5 + [-1])
	if ( CALL memchr([928], *(($10 + [-1])), $8) ){ goto $label$8 }
	$5 = ($6 + $5)
	goto $label$6 
	
.LABEL $label$7
	if ( ($5 == 0) ){ goto $label$5 }
	$5 = (($6 + $5) + [-1])
	
.LABEL $label$6
	$7 = ($5 - $6)
	goto $label$4 
	
.LABEL $label$5
	$7 = [-1]
	
.LABEL $label$4
	CALL $81($4, ($7 + [1]), [-1])
	$5 = *($4)
	if ( ($5 & [1]) ){ goto $label$10 }
	$10 = uint_32($5 >> [1])
	$7 = ($4 + [1])
	goto $label$9 
	
.LABEL $label$10
	$10 = *($4 + [4])
	$7 = *($4 + [8])
	
.LABEL $label$9
	$6 = CALL strlen([928])
	if ( ($10 == 0) ){ goto $label$12 }
	$5 = $7
	if ( ($6 == 0) ){ goto $label$13 }
	$5 = $7
	
.LOOP $label$14:
	if ( (CALL memchr([928], *($5), $6) == 0) ){ goto $label$13 }
	$8 = [-1]
	$5 = ($5 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$14 }
	goto $label$11 
	
.LABEL $label$13
	$8 = ($5 - $7)
	goto $label$11 
	
.LABEL $label$12
	$8 = [-1]
	
.LABEL $label$11
	CALL $81($4, [0], $8)
	$1 = (CASTING int_64)(int_32 CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji($4, [0], [10]))
	$4 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$15 }
	$5 = ($6 + [-24])
	$8 = ([0] - $4)
	
.LOOP $label$16:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$15 }
	$6 = $5
	$10 = ($5 + [-24])
	$5 = $10
	if ( ((int_32)($10 + $8) != (int_32)[-24]) ){ goto $label$16 }
	
.LABEL $label$15
	$5 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$18 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*(($4 + [44])) == (int_32)$5), [336])
	goto $label$17 
	
.LABEL $label$18
	$4 = [0]
	$10 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4710026338415673344, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$17 }
	$4 = CALL $21($5, $10)
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)$5), [336])
	
.LABEL $label$17
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [944])
	$7 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$19 }
	$5 = ($8 + [-24])
	$6 = ([0] - $7)
	
.LOOP $label$20:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$19 }
	$8 = $5
	$10 = ($5 + [-24])
	$5 = $10
	if ( ((int_32)($10 + $6) != (int_32)[-24]) ){ goto $label$20 }
	
.LABEL $label$19
	$6 = ($0 + [48])
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$22 }
	$5 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*(($5 + [44])) == (int_32)$6), [336])
	goto $label$21 
	
.LABEL $label$22
	$5 = [0]
	$10 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$21 }
	$5 = CALL $36($6, $10)
	CALL eosio_assert(((int_32)*($5 + [44]) == (int_32)$6), [336])
	
.LABEL $label$21
	$0 = [0]
	$8 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($8, [816])
	CALL eosio_assert((*($5 + [41]) == 0), [960])
	CALL eosio_assert((*($5 + [42]) == 0), [992])
	$2 = *($3)
	if ( ((uint_64)((int_64)$2 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$23 }
	$1 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$0 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$0 = [0]
	
.LABEL $label$23
	CALL eosio_assert($0, [256])
	CALL eosio_assert(((int_64)$2 > (int_64)0), [272])
	CALL eosio_assert(((int_64)$2 >= (int_64)*($4 + [24])), [1024])
	CALL eosio_assert(((int_64)$2 <= (int_64)((int_64)*($5 + [40]) * (int_64)*($4 + [24]))), [1056])
	$2 = ((int_64)$2 / (int_64)*($4 + [24]))
	$1 = *($5 + [40])
	*($11 + [16]) = ( $1 ? $2 : ((int_64)$2 > (int_64)$1) )
	*($11 + [8]) = ($11 + [16])
	CALL eosio_assert($8, [400])
	CALL $55($6, $5, (int_64)0, ($11 + [8]))
	if ( (int_64)(*($11 + [16]) == 0) ){ goto $label$28 }
	
.LOOP $label$29:
	*($11 + [8]) = ($11 + [24])
	CALL eosio_assert($8, [400])
	CALL $56($6, $5, (int_64)0, ($11 + [8]))
	$1 = ((int_64)*($11 + [16]) + (int_64)-1)
	*($11 + [16]) = $1
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$29 }
	
.LABEL $label$28
	if ( *(($5 + [40])) ){ goto $label$1 }
	CALL eosio_assert($8, [400])
	CALL $57($6, $5, (int_64)0, ($11 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [32])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [144])
	$3 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [208])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $51(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $52(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $78(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9894]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9896])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9894]) = [1]
	$7 = ($7 << [16])
	*([0] + [9896]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9896])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9896]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9894]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9894]) = [1]
	$3 = ($3 << [16])
	*([0] + [9896]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9896])
	
.LABEL $label$8
	*([0] + [9896]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [176])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	CALL $19(($7 + [32]), $5, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	*(($1 = (($7 + [96]) + [8]))) = *(($7 + [48]))
	$4 = *($7 + [40])
	*(($5 = (($7 + [80]) + [8]))) = *(($7 + [64]))
	$3 = *($7 + [32])
	*($7 + [96]) = $4
	*($7 + [80]) = *($7 + [56])
	$4 = *($7 + [72])
	*((($7 + [128]) + [8])) = *($5)
	*((($7 + [112]) + [8])) = *($1)
	*($7 + [128]) = *($7 + [80])
	*($7 + [112]) = *($7 + [96])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	*(($5 = (($7 + [160]) + [8]))) = *((($7 + [112]) + [8]))
	*(($2 = (($7 + [144]) + [8]))) = *((($7 + [128]) + [8]))
	*($7 + [160]) = *($7 + [112])
	*($7 + [144]) = *($7 + [128])
	*((($7 + [16]) + [8])) = *($5)
	*($7 + [16]) = *($7 + [160])
	*(($7 + [8])) = *($2)
	*($7) = *($7 + [144])
	CALL void $1((int_32 $3), (int_64 ($7 + [16])), (int_32 $7), (int_32 $4), (int_64 $6))
	*([0] + [4]) = ($7 + [176])
	return [1]
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($0 + [16])) = (int_64)1397703940
	CALL eosio_assert([1], [144])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [208])
	*(($0 + [32])) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [144])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [208])
	*($0 + [40]) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $20(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $77(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $88($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $78($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [64])
	*([0] + [4]) = $14
	CALL eosio_assert(((int_32)*(($1 + [44])) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	*($1 + [42]) = [1]
	*(($13 = $14) + [16]) = *($1 + [8])
	$5 = *($1)
	*($1 + [32]) = *((*(*(*($3) + [4]) + [16]) + (*(*($3 + [4])) << [3])))
	CALL eosio_assert([1], [560])
	$3 = [16]
	$8 = ($1 + [16])
	$7 = ($1 + [32])
	$6 = ($1 + [42])
	$4 = ($1 + [8])
	$9 = *($1 + [16])
	$10 = *(($1 + [20]))
	$11 = ($10 - $9)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	$3 = (($11 & [-8]) + $3)
	
.LABEL $label$2
	$10 = ($3 + [11])
	if ( ($10 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($10)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($14 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($13 + [4]) = $3
	*($13) = $3
	*($13 + [8]) = ($3 + $10)
	*($13 + [24]) = $13
	*($13 + [36]) = $4
	*($13 + [40]) = $8
	*($13 + [44]) = $7
	*($13 + [56]) = $6
	*($13 + [32]) = $1
	*($13 + [48]) = ($1 + [40])
	*($13 + [52]) = ($1 + [41])
	CALL $41(($13 + [32]), ($13 + [24]))
	CALL db_update_i64(*($1 + [48]), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($13 + [32]) = *($4)
	if ( (CALL memcmp(($13 + [16]), ($13 + [32]), [8]) == 0) ){ goto $label$7 }
	$3 = *($1 + [52])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035924439720001536, ($13 + [24]), $5)
	*(($1 + [52])) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($13 + [32]))
	
.LABEL $label$7
	*([0] + [4]) = ($13 + [64])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $77(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $88($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $78($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $53(*($1), ($0 + [32]))
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $89(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $89(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $78(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $78(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $54($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $80($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $77($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $80($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $78($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $79($7)
	return (unreachable)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [912])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $31($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [240])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $35(*($1), ($0 + [32]))
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [64])
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*(($1 + [44])) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	*(($11 = $12) + [16]) = *($1 + [8])
	$7 = *($3)
	$5 = *($1)
	$4 = ($1 + [20])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)*(($1 + [24]))) ){ goto $label$2 }
	*($4) = ($3 + [8])
	*($3) = *($7)
	$9 = ($1 + [16])
	goto $label$1 
	
.LABEL $label$2
	$9 = ($1 + [16])
	CALL $58($9, $7)
	
.LABEL $label$1
	$4 = ($1 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [560])
	$6 = *($9)
	$7 = *(($1 + [20]))
	$8 = ($7 - $6)
	$10 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$3 = [16]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	$3 = (($8 & [-8]) + $3)
	
.LABEL $label$4
	$7 = ($3 + [11])
	if ( ($7 <= [513]) ){ goto $label$6 }
	$3 = CALL malloc($7)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($12 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$5
	*($11 + [4]) = $3
	*($11) = $3
	*($11 + [8]) = ($3 + $7)
	*($11 + [24]) = $11
	*($11 + [36]) = $4
	*($11 + [40]) = $9
	*($11 + [32]) = $1
	*($11 + [44]) = ($1 + [32])
	*($11 + [48]) = ($1 + [40])
	*($11 + [52]) = ($1 + [41])
	*($11 + [56]) = ($1 + [42])
	CALL $41(($11 + [32]), ($11 + [24]))
	CALL db_update_i64(*($1 + [48]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL free($3)
	
.LABEL $label$7
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($11 + [32]) = *($4)
	if ( (CALL memcmp(($11 + [16]), ($11 + [32]), [8]) == 0) ){ goto $label$9 }
	$3 = *($1 + [52])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035924439720001536, ($11 + [24]), $5)
	*(($1 + [52])) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($11 + [32]))
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [64])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [64])
	*([0] + [4]) = $14
	CALL eosio_assert(((int_32)*(($1 + [44])) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	*($1 + [41]) = [1]
	*(($13 = $14) + [16]) = *($1 + [8])
	$5 = *($1)
	CALL eosio_assert([1], [560])
	$11 = [16]
	$7 = ($1 + [16])
	$6 = ($1 + [41])
	$4 = ($1 + [8])
	$8 = *($1 + [16])
	$9 = *(($1 + [20]))
	$10 = ($9 - $8)
	$12 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	
.LOOP $label$1:
	$11 = ($11 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	$11 = (($10 & [-8]) + $11)
	
.LABEL $label$2
	$9 = ($11 + [11])
	if ( ($9 <= [513]) ){ goto $label$4 }
	$11 = CALL malloc($9)
	goto $label$3 
	
.LABEL $label$4
	$11 = ($14 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$3
	*($13 + [4]) = $11
	*($13) = $11
	*($13 + [8]) = ($11 + $9)
	*($13 + [24]) = $13
	*($13 + [36]) = $4
	*($13 + [40]) = $7
	*($13 + [52]) = $6
	*($13 + [32]) = $1
	*($13 + [44]) = ($1 + [32])
	*($13 + [48]) = ($1 + [40])
	*($13 + [56]) = ($1 + [42])
	CALL $41(($13 + [32]), ($13 + [24]))
	CALL db_update_i64(*($1 + [48]), $2, $11, $9)
	if ( ($9 <= [513]) ){ goto $label$5 }
	CALL free($11)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($13 + [32]) = *($4)
	if ( (CALL memcmp(($13 + [16]), ($13 + [32]), [8]) == 0) ){ goto $label$7 }
	$11 = *($1 + [52])
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$8 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035924439720001536, ($13 + [24]), $5)
	*(($1 + [52])) = $11
	
.LABEL $label$8
	CALL db_idx64_update($11, $2, ($13 + [32]))
	
.LABEL $label$7
	*([0] + [4]) = ($13 + [64])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [624])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [624])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $77([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $31($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $34(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [240])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [240])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [240])
	CALL memcpy($0, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [64])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*(($1 + [44])) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	*($1 + [40]) = (int_64))(*($1 + [40]) - *(*($3)))
	*(($12 = $13) + [16]) = *($1 + [8])
	$5 = *($1)
	CALL eosio_assert([1], [560])
	$3 = [16]
	$7 = ($1 + [16])
	$6 = ($1 + [40])
	$4 = ($1 + [8])
	$8 = *($1 + [16])
	$9 = *(($1 + [20]))
	$10 = ($9 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	$3 = (($10 & [-8]) + $3)
	
.LABEL $label$2
	$9 = ($3 + [11])
	if ( ($9 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($9)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($13 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($12 + [4]) = $3
	*($12) = $3
	*($12 + [8]) = ($3 + $9)
	*($12 + [24]) = $12
	*($12 + [36]) = $4
	*($12 + [40]) = $7
	*($12 + [48]) = $6
	*($12 + [32]) = $1
	*($12 + [44]) = ($1 + [32])
	*($12 + [52]) = ($1 + [41])
	*($12 + [56]) = ($1 + [42])
	CALL $41(($12 + [32]), ($12 + [24]))
	CALL db_update_i64(*($1 + [48]), $2, $3, $9)
	if ( ($9 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($12 + [32]) = *($4)
	if ( (CALL memcmp(($12 + [16]), ($12 + [32]), [8]) == 0) ){ goto $label$7 }
	$3 = *($1 + [52])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035924439720001536, ($12 + [24]), $5)
	*(($1 + [52])) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($12 + [32]))
	
.LABEL $label$7
	*([0] + [4]) = ($12 + [64])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [704])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $77([56])
	CALL $27($6)
	*($6 + [44]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [24])
	*($8 + [44]) = ($6 + [40])
	CALL $28(($8 + [32]), ($8 + [24]))
	*($6 + [48]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [48])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $26(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $78($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*(($1 + [44])) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	$5 = *($3)
	*($1 + [8]) = *($5)
	*(($1 + [20])) = *(($5 + [12]))
	*(($1 + [16])) = *(($5 + [8]))
	*(($1 + [12])) = *(($5 + [4]))
	$4 = *($1)
	$5 = *($3 + [4])
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	*($1 + [40]) = *(*($3 + [8]))
	CALL eosio_assert([1], [560])
	*($6 + [64]) = ($6 + [41])
	*($6 + [60]) = $6
	*($6 + [56]) = $6
	*($6 + [72]) = ($6 + [56])
	*($6 + [84]) = ($1 + [8])
	*($6 + [80]) = $1
	*($6 + [88]) = ($1 + [24])
	*($6 + [92]) = ($1 + [40])
	CALL $24(($6 + [80]), ($6 + [72]))
	CALL db_update_i64(*($1 + [48]), $2, $6, [41])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $77([56])
	CALL $25($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [48])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $26(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $78($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL $27($0)
	*($0 + [44]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	$3 = *($2)
	$5 = *($1 + [4])
	*($0 + [8]) = *($5)
	*(($0 + [16])) = *(($5 + [8]))
	$5 = *($1 + [8])
	*($0 + [24]) = *($5)
	*(($0 + [32])) = *(($5 + [8]))
	*($0 + [40]) = *(*($1 + [12]))
	*($6 + [64]) = ($6 + [41])
	*($6 + [60]) = $6
	*($6 + [56]) = $6
	*($6 + [72]) = ($6 + [56])
	*($6 + [84]) = ($0 + [8])
	*($6 + [80]) = $0
	*($6 + [88]) = ($0 + [24])
	*($6 + [92]) = ($0 + [40])
	CALL $24(($6 + [80]), ($6 + [72]))
	$4 = *($0)
	*($0 + [48]) = CALL db_store_i64(*($3 + [8]), (int_64)-4710026338415673344, *(*($2 + [8])), $4, $6, [41])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [96])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [624])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [624])
	CALL memcpy(*($2 + [4]), $0, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
}

int_32 .FUNC $27 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [208])
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $77(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $78($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $78($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	CALL $27($0)
	*($0 + [44]) = $1
	*($0) = (int_64)4
	*($0 + [8]) = (int_64)5000000
	$1 = *($2)
	CALL eosio_assert([1], [144])
	*($0 + [24]) = (int_64)275000
	CALL eosio_assert([1], [144])
	*($0 + [40]) = [20]
	*($4 + [64]) = ($4 + [41])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [72]) = ($4 + [56])
	*($4 + [84]) = ($0 + [8])
	*($4 + [80]) = $0
	*($4 + [88]) = ($0 + [24])
	*($4 + [92]) = ($0 + [40])
	CALL $24(($4 + [80]), ($4 + [72]))
	$3 = *($0)
	*($0 + [48]) = CALL db_store_i64(*($1 + [8]), (int_64)-4710026338415673344, *(*($2 + [8])), $3, $4, [41])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [96])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	CALL $27($0)
	*($0 + [44]) = $1
	*($0) = (int_64)5
	*($0 + [8]) = (int_64)10000000
	$1 = *($2)
	CALL eosio_assert([1], [144])
	*($0 + [24]) = (int_64)550000
	CALL eosio_assert([1], [144])
	*($0 + [40]) = [20]
	*($4 + [64]) = ($4 + [41])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [72]) = ($4 + [56])
	*($4 + [84]) = ($0 + [8])
	*($4 + [80]) = $0
	*($4 + [88]) = ($0 + [24])
	*($4 + [92]) = ($0 + [40])
	CALL $24(($4 + [80]), ($4 + [72]))
	$3 = *($0)
	*($0 + [48]) = CALL db_store_i64(*($1 + [8]), (int_64)-4710026338415673344, *(*($2 + [8])), $3, $4, [41])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [96])
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $77([56])
	CALL $70($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [48])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $26(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $78($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $77([56])
	CALL $71($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [48])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $26(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $78($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $77([56])
	CALL $68($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [48])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $26(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $78($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $77([56])
	CALL $69($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [48])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $26(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $78($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $77([56])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [44]) = $1
	CALL $62(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [48])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $48(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [20])) = $1
	CALL $78($1)
	
.LABEL $label$4
	CALL $78($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [64])
	*([0] + [4]) = $16
	CALL eosio_assert(((int_32)*(($1 + [44])) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	*(($12 = ($1 + [20]))) = *($1 + [16])
	$14 = *($1 + [8])
	*($1 + [8]) = ((int_64)$14 + (int_64)1)
	*(($15 = $16) + [16]) = $14
	$5 = *($1)
	*($1 + [40]) = *(*(*($3) + [4]) + [40])
	*($1 + [42]) = [0]
	*($1 + [41]) = [0]
	*($1 + [32]) = (int_64)0
	CALL eosio_assert([1], [560])
	$10 = ($1 + [32])
	$9 = ($1 + [41])
	$8 = ($1 + [42])
	$7 = ($1 + [40])
	$3 = [16]
	$6 = ($1 + [16])
	$4 = ($1 + [8])
	$11 = *($1 + [16])
	$12 = *($12)
	$13 = ($12 - $11)
	$14 = (CASTING uint_64)(uint_32 int_32($13 >> [3]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$2 }
	$3 = (($13 & [-8]) + $3)
	
.LABEL $label$2
	$12 = ($3 + [11])
	if ( ($12 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($12)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($16 - (($12 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($15 + [4]) = $3
	*($15) = $3
	*($15 + [8]) = ($3 + $12)
	*($15 + [24]) = $15
	*($15 + [36]) = $4
	*($15 + [40]) = $6
	*($15 + [44]) = $10
	*($15 + [48]) = $7
	*($15 + [52]) = $9
	*($15 + [56]) = $8
	*($15 + [32]) = $1
	CALL $41(($15 + [32]), ($15 + [24]))
	CALL db_update_i64(*($1 + [48]), $2, $3, $12)
	if ( ($12 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($15 + [32]) = *($4)
	if ( (CALL memcmp(($15 + [16]), ($15 + [32]), [8]) == 0) ){ goto $label$7 }
	$3 = *($1 + [52])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035924439720001536, ($15 + [24]), $5)
	*(($1 + [52])) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($15 + [32]))
	
.LABEL $label$7
	*([0] + [4]) = ($15 + [64])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $77([56])
	CALL $72($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [48])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $26(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $78($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = (int_64)1
	*($1 + [32]) = (int_64)0
	$2 = *($0)
	*(($1 + [20])) = *($1 + [16])
	$4 = *(*($4 + [4]))
	*($1 + [42]) = [0]
	*($1 + [40]) = $4
	*($1 + [41]) = [0]
	*($7 + [48]) = ($7 + [28])
	*($7 + [44]) = $7
	*($7 + [40]) = $7
	*($7 + [56]) = ($7 + [40])
	$4 = ($1 + [8])
	*($7 + [68]) = $4
	*($7 + [64]) = $1
	*($7 + [72]) = ($1 + [16])
	*($7 + [76]) = ($1 + [32])
	*($7 + [80]) = ($1 + [40])
	*($7 + [84]) = ($1 + [41])
	*($7 + [88]) = ($1 + [42])
	CALL $41(($7 + [64]), ($7 + [56]))
	$3 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($2 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), $3, $7, [28])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($2 + [8]))
	$5 = *(*(($0 + [8])))
	$6 = *($1)
	*($7 + [64]) = *($4)
	*($1 + [52]) = CALL db_idx64_store($3, (int_64)7035924439720001536, $5, $6, ($7 + [64]))
	*([0] + [4]) = ($7 + [96])
}

void .FUNC $100 ()
{
	(unreachable)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $77($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $88 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $77($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $78($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $87($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $77($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $86($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $84 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $85($1, $0, [9920])
	CALL abort()
	(unreachable)
}

void .FUNC $83 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $85($1, $0, [9936])
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = CALL strlen([9904])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($6) = ($3 << [1])
	$5 = ($6 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $77($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($5, [9904], $3)
	
.LABEL $label$4
	*(($5 + $3)) = [0]
	*($6 + [12]) = [0]
	$3 = *($0 + [8])
	$5 = *($0)
	$4 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($5 & [1]) )
	$2 = CALL strtol($3, ($6 + [12]), $2)
	$0 = CALL __errno_location()
	$5 = *($0)
	*($0) = $4
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($6 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL $78(*($6 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
	return $2
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $83($6)
	
.LABEL $label$1
	CALL $84($6)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $77(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $78($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	CALL $27($0)
	*($0 + [44]) = $1
	*($0) = (int_64)1
	*($0 + [8]) = (int_64)100000
	$1 = *($2)
	CALL eosio_assert([1], [144])
	*($0 + [24]) = (int_64)11000
	CALL eosio_assert([1], [144])
	*($0 + [40]) = [10]
	*($4 + [64]) = ($4 + [41])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [72]) = ($4 + [56])
	*($4 + [84]) = ($0 + [8])
	*($4 + [80]) = $0
	*($4 + [88]) = ($0 + [24])
	*($4 + [92]) = ($0 + [40])
	CALL $24(($4 + [80]), ($4 + [72]))
	$3 = *($0)
	*($0 + [48]) = CALL db_store_i64(*($1 + [8]), (int_64)-4710026338415673344, *(*($2 + [8])), $3, $4, [41])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [96])
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $74([1412], $0)
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	CALL $27($0)
	*($0 + [44]) = $1
	*($0) = (int_64)3
	*($0 + [8]) = (int_64)1000000
	$1 = *($2)
	CALL eosio_assert([1], [144])
	*($0 + [24]) = (int_64)110000
	CALL eosio_assert([1], [144])
	*($0 + [40]) = [10]
	*($4 + [64]) = ($4 + [41])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [72]) = ($4 + [56])
	*($4 + [84]) = ($0 + [8])
	*($4 + [80]) = $0
	*($4 + [88]) = ($0 + [24])
	*($4 + [92]) = ($0 + [40])
	CALL $24(($4 + [80]), ($4 + [72]))
	$3 = *($0)
	*($0 + [48]) = CALL db_store_i64(*($1 + [8]), (int_64)-4710026338415673344, *(*($2 + [8])), $3, $4, [41])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [96])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	CALL $27($0)
	*($0 + [44]) = $1
	*($0) = (int_64)2
	*($0 + [8]) = (int_64)500000
	$1 = *($2)
	CALL eosio_assert([1], [144])
	*($0 + [24]) = (int_64)55000
	CALL eosio_assert([1], [144])
	*($0 + [40]) = [10]
	*($4 + [64]) = ($4 + [41])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [72]) = ($4 + [56])
	*($4 + [84]) = ($0 + [8])
	*($4 + [80]) = $0
	*($4 + [88]) = ($0 + [24])
	*($4 + [92]) = ($0 + [40])
	CALL $24(($4 + [80]), ($4 + [72]))
	$3 = *($0)
	*($0 + [48]) = CALL db_store_i64(*($1 + [8]), (int_64)-4710026338415673344, *(*($2 + [8])), $3, $4, [41])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [96])
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9796])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9604]
	$1 = (((int_32)$2 * (int_32)[12]) + [9604])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $77 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9900])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $75($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9808])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $78($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $78($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $78($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $78($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $78($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $78($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $78($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $78($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [704])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $77([56])) + [24]) = [0]
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [44]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [32])
	*($8 + [48]) = ($6 + [40])
	*($8 + [52]) = ($6 + [41])
	*($8 + [56]) = ($6 + [42])
	CALL $47(($8 + [32]), ($8 + [24]))
	*($6 + [52]) = [-1]
	*($6 + [48]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [48])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $48(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [16])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $7
	CALL $78($7)
	
.LABEL $label$10
	CALL $78($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = *($0)
	$9 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$5 = ($9 + [1])
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$7 = ($8 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $77(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = ($8 + ((int_32)$7 * (int_32)[40]))
	$9 = ($8 + ((int_32)$9 * (int_32)[40]))
	$8 = CALL $29($9, $1, *($2), *($3), $4)
	$6 = ($8 + [40])
	$7 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$6 }
	$4 = ([0] - $7)
	$7 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($7 + [-12]))
	*(($8 + [-40])) = *(($7 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($2 = ($8 + [-16]))) = [0]
	$3 = ($7 + [-4])
	*($1) = *($3)
	*(($8 + [-20])) = *($7)
	$1 = ($7 + [4])
	*($2) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($3) = (int_64)0
	*(($2 = ($8 + [-4]))) = [0]
	$3 = ($7 + [8])
	*($1) = *($3)
	*(($8 + [-8])) = *(($7 + [12]))
	$8 = ($7 + [16])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$9 = ($9 + [-40])
	$8 = $9
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $4) != (int_32)[-20]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $7
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	$9 = ([0] - $1)
	$7 = ($7 + [-24])
	
.LOOP $label$9:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($7 + [16])) = $8
	CALL $78($8)
	
.LABEL $label$10
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$11 }
	*(($7 + [4])) = $8
	CALL $78($8)
	
.LABEL $label$11
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $9) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $78($1)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $78 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $79 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [624])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [624])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [624])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [624])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [624])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $31($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [624])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [624])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $33(CALL $32($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $77($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $88($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $78($1)
	return 
	
.LABEL $label$1
	(unreachable)
}