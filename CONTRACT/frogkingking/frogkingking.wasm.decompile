(data (i32.const 16896) "V1.0\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 16910) "transfer\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 17010) "status\00")
(data (i32.const 17017) "admin\00")
(data (i32.const 17023) "cmessage\00")
(data (i32.const 17032) "string is too long to be a valid name\00stoull\00")
(data (i32.const 17077) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17144) "character is not in allowed character set for names\00")
(data (i32.const 17196) " from: \00")
(data (i32.const 17204) " quantity: \00")
(data (i32.const 17216) " symbol: \00")
(data (i32.const 17226) " memo: \00")
(data (i32.const 17234) "king\00")
(data (i32.const 17239) "account: \00")
(data (i32.const 17249) "eosio.token\00")
(data (i32.const 17261) "EOS\00")
(data (i32.const 17265) " ONLY BUY WITH EOS! \00")
(data (i32.const 17286) "No!\00")
(data (i32.const 17290) " user:...[\00")
(data (i32.const 17301) "]\c2\a0kingid: \00")
(data (i32.const 17313) " \00")
(data (i32.const 17315) " before \00")
(data (i32.const 17324) " OK is \00")
(data (i32.const 17332) " the new king.?..\00")
(data (i32.const 17350) " Kingentry found... \00")
(data (i32.const 17371) " Price: \00: no conversion\00")
(data (i32.const 17396) " kingold: \00: out of range\00")
(data (i32.const 17422) " oldtime: \00")
(data (i32.const 17433) " timediff: \00")
(data (i32.const 17445) " now:\00")
(data (i32.const 17451) " timelimit: \00")
(data (i32.const 17464) " RESTART \00")
(data (i32.const 17474) " reward_oldking: \00")
(data (i32.const 17492) " fees: \00")
(data (i32.const 17500) " fees_div: \00")
(data (i32.const 17512) " pricenew: \00")
(data (i32.const 17524) " PAYMENT TO LOW \00")
(data (i32.const 17541) " pricenew2: \00")
(data (i32.const 17554) " Let\'s do it! \00")
(data (i32.const 17569) " -1- \00")
(data (i32.const 17575) " -2- \00")
(data (i32.const 17581) " -3- \00")
(data (i32.const 17587) " -4- \00")
(data (i32.const 17593) " DETHRONE \00")
(data (i32.const 17604) "CatchTheFrog King - sorry, you are dethroned by \00")
(data (i32.const 17654) " Kingentry NOT found... \00")
(data (i32.const 17679) "read\00")
(data (i32.const 17684) "get\00")
(data (i32.const 17688) ",\00")
(data (i32.const 17690) "string is too long to be a valid symbol_code\00")
(data (i32.const 17735) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 17788) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 17839) "error reading iterator\00")
(data (i32.const 17862) "cannot pass end iterator to modify\00")
(data (i32.const 17897) "object passed to modify is not in multi_index\00")
(data (i32.const 17943) "cannot modify objects in table of another contract\00")
(data (i32.const 17994) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18053) "write\00")
(data (i32.const 18060) "\90F\00\00")
(data (i32.const 18064) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 18097) "active\00")
(data (i32.const 18104) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18153) "invalid symbol name\00")
(data (i32.const 18173) " STATUS King - \00")
(data (i32.const 18189) " VERSION: \00")
(data (i32.const 18200) " ADMIN_1 \00")
(data (i32.const 18210) " weiter1 \00")
(data (i32.const 18220) " weiter2 \00")
(data (i32.const 18230) " ADMIN...[\00")
(data (i32.const 18241) "]\c2\a0\00")
(data (i32.const 18245) " first:...[\00")
(data (i32.const 18257) "test\00")
(data (i32.const 18262) " test... \00")
(data (i32.const 18272) "init\00")
(data (i32.const 18277) " Init... \00")
(data (i32.const 18287) " globals does exist\00")
(data (i32.const 18307) " globals is new... \00")
(data (i32.const 18327) "initking\00")
(data (i32.const 18336) " initking... \00")
(data (i32.const 18350) " NEW:\00")
(data (i32.const 18356) " OLD:\00")
(data (i32.const 18362) " P:\00")
(data (i32.const 18366) " Kingentry does exist\00")
(data (i32.const 18388) " Kingentry is new... \00")
(data (i32.const 18410) "resetking\00")
(data (i32.const 18420) " resetking... \00")
(data (i32.const 18435) "editking\00")
(data (i32.const 18444) " editking... \00")
(data (i32.const 18458) " kingid:\00")
(data (i32.const 18467) " accountname:\00")
(data (i32.const 18481) " price:\00")
(data (i32.const 18489) "cannot create objects in table of another contract\00")
(data (i32.const 18540) "I\'m the king\00")
(data (i32.const 18553) "cannot pass end iterator to erase\00")
(data (i32.const 18587) "cannot increment end iterator\00")
(data (i32.const 18617) "object passed to erase is not in multi_index\00")
(data (i32.const 18662) "cannot erase objects in table of another contract\00")
(data (i32.const 18712) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18768) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "prints" (func $fimport$3 (param i32)))
(import "env" "printn" (func $fimport$4 (param i64)))
(import "env" "printi" (func $fimport$5 (param i64)))
(import "env" "printui" (func $fimport$6 (param i64)))
(import "env" "prints_l" (func $fimport$7 (param i32 i32)))
(import "env" "require_auth" (func $fimport$8 (param i64)))
(import "env" "db_find_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$10 (result i64)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$14 (param i64)))
(import "env" "send_inline" (func $fimport$15 (param i32 i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$17 (result i64)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$19 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$20 (param i32)))
(import "env" "abort" (func $fimport$21))
(import "env" "memset" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$34 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$35 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$38 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$40 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$41 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$42 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $2))
(export "_ZdlPv" (func $41))
(export "_Znwj" (func $39))
(export "_Znaj" (func $40))
(export "_ZdaPv" (func $42))
(export "_ZnwjSt11align_val_t" (func $43))
(export "_ZnajSt11align_val_t" (func $44))
(export "_ZdlPvSt11align_val_t" (func $45))
(export "_ZdaPvSt11align_val_t" (func $46))
(table $0 6 6 anyfunc)
(elem (i32.const 1) $4 $6 $7 $8 $1)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19025))
(global $global$2 i32 (i32.const 19025))


int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $80($1)
	
.LABEL $label$2
	*(CALL $63()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $80(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $84($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$17()), [18489])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $35($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $36(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $62 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$17()), [18489])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56]) = [0]
	*($3 + [60]) = $1
	CALL $37(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [64])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $30(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $77 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $76 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

int_32 .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $76([8216])
	$3 = *([0] + [8224])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8232]
	*([0] + [8224]) = [8232]
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $83([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8224])
	*([0] + [8224]) = $3
	*([0] + [8228]) = [0]
	
.LABEL $label$2
	*([0] + [8228]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $77([8216])
	return [0]
	
.LABEL $label$1
	CALL $77([8216])
	return [-1]
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $80($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8204])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $80($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $69($3, (int_64)0)
	$4 = CALL $71($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $22($0, ($1 + [48]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17679])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17679])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17679])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17679])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [17679])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17679])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [17684])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $25($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [17679])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [17897])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [17943])
	*($1 + [8]) = *(*($3))
	*($1 + [24]) = *(*($3 + [4]))
	*($1 + [40]) = *(*($3 + [8]))
	$6 = *($1)
	CALL eosio_assert([1], [17994])
	$3 = *($1 + [48])
	$7 = ( *(($1 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [44])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $80($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $31($5, $1)
	CALL db_update_i64(*($1 + [64]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $84($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [18617])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [18662])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18712])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [64]))
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17679])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17679])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17679])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17679])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $22(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $28($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $50($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $50($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $47($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $62($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($3 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $62($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$4 * (int_32)[12])))) = (int_64)0
	*(($3 + [8])) = [0]
	$1 = *($1)
	$2 = *($2)
	$8 = ($2 - $1)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$8 }
	*($3) = ($8 << [1])
	$5 = ($3 + [1])
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*(($4 = ($7 + ((int_32)$4 * (int_32)[12]))) + [8]) = $5
	*($4 + [4]) = $8
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($1)
	$6 = ($6 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	$5 = ($5 + $8)
	
.LABEL $label$6
	$8 = ($7 + $4)
	*($5) = [0]
	$5 = ($3 + [12])
	$6 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($1 + [-4])
	*(($3 + [-4])) = *($2)
	$1 = ($1 + [-12])
	*(($3 = ($3 + [-12]))) = *($1)
	*($1) = (int_64)0
	*($2) = [0]
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$12 }
	$6 = *(($0 + [4]))
	$2 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$2 = $6
	
.LABEL $label$10
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($6 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$15
	$6 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($2 == 0) ){ goto $label$16 }
	CALL _ZdlPv($2)
	
.LABEL $label$16
	return (unreachable)
	
.LABEL $label$5
	CALL $47($3)
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $25($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18053])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18053])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $34(CALL $33($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18053])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18053])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18053])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18053])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $32(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $69 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $67($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $80 (int_32 $0)
{
	return CALL $81([8500], $0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $78(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8204])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $78(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $84($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $47 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $84($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_64 .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $69($3, (int_64)0)
	$4 = CALL $71($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_32 .FUNC $82 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8492]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8496])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8492]) = [1]
	$2 = ($2 << [16])
	*([0] + [8496]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8496])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8496]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8492]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8492]) = [1]
	$3 = ($3 << [16])
	*([0] + [8496]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8496])
	
.LABEL $label$10
	*([0] + [8496]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $75($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $49($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $49($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $81([8500], $1)
	CALL memset($0, [0], $1)
	return $0
}

void .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16884])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16692]
	$3 = (((int_32)$1 * (int_32)[12]) + [16692])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $63())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $79($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $70 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $68($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $82($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [16924])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $60 ()
{
	CALL abort()
	(unreachable)
}

int_64 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $70($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $63()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $70($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18769]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $69($0, (int_64)0)
	*(CALL $63()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $70($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $70($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $70($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $70($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18769])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18769]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18769]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $70($0)
	$5 = *(($6 + [18769]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $70($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18769]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [16901]))
	$8 = (int_64)0
	$5 = *(($6 + [18769]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18769]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $70($0)
	$5 = *(($6 + [18769]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $70($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18769]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $69($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18769]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18769]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $70($0) + [18769]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $63()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $63()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $63()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL require_recipient($1)
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $80($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = ($2 + $7)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17679])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [60]) = ($2 + [8])
	$8 = (($4 + [72]) + [8])
	CALL $22(($4 + [56]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($9 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($9)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	*($4 + [52]) = [234354]
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	$8 = CALL $48(($4 + [96]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $48(($4 + [112]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [96]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $84($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [128])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return $2
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	CALL prints([18173])
	CALL prints([18189])
	$1 = *([0] + [8192])
	$2 = ($1 & [1])
	CALL prints_l(( *([0] + [8200]) ? [8193] : $2 ), ( *([0] + [8196]) ? uint_32($1 >> [1]) : $2 ))
	CALL prints([17313])
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$1 = ($global$0 - [192])
	$global$0 = $1
	CALL prints([18200])
	CALL require_auth(*($0))
	CALL prints([18210])
	CALL $16(($1 + [176]))
	CALL prints([18220])
	CALL prints([18230])
	$2 = *($1 + [176])
	$3 = ($2 & [1])
	CALL prints_l(( *($1 + [184]) ? (($1 + [176]) | [1]) : $3 ), ( *($1 + [180]) ? uint_32($2 >> [1]) : $3 ))
	CALL prints([18241])
	*($1 + [168]) = [0]
	*($1 + [160]) = (int_64)0
	$2 = CALL $48(($1 + [144]), ($1 + [176]))
	CALL $11($0, ($1 + [160]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$2 = *($1 + [160])
	CALL prints([18245])
	$3 = *($2)
	$4 = ($3 & [1])
	CALL prints_l(( *($2 + [8]) ? ($2 + [1]) : $4 ), ( *($2 + [4]) ? uint_32($3 >> [1]) : $4 ))
	CALL prints([18241])
	$2 = *($1 + [160])
	$3 = *($2)
	$4 = CALL $75([18257])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$2 }
	if ( CALL $53($2, [0], [-1], [18257], $4) ){ goto $label$2 }
	CALL prints([18262])
	
.LABEL $label$2
	$2 = *($1 + [160])
	$3 = *($2)
	$4 = CALL $75([18272])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$3 }
	if ( CALL $53($2, [0], [-1], [18272], $4) ){ goto $label$3 }
	CALL prints([18277])
	*($1 + [96]) = [0]
	*(($1 + [136])) = [0]
	*($1 + [120]) = (int_64)-1
	$5 = *($0)
	*($1 + [104]) = $5
	*($1 + [112]) = $5
	*($1 + [128]) = (int_64)0
	$2 = CALL db_find_i64($5, $5, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $17(($1 + [104]), $2) + [16]) == (int_32)($1 + [104])), [17788])
	CALL prints([18287])
	$4 = *($1 + [128])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL prints([18307])
	$5 = *($0)
	*($1 + [88]) = ($1 + [96])
	CALL $18(($1 + [40]), ($1 + [104]), $5, ($1 + [88]))
	$4 = *($1 + [128])
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($1 + [132])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($1 + [128]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $4
	
.LABEL $label$6
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$2 = *($1 + [160])
	$3 = *($2)
	$4 = CALL $75([18327])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$10 }
	if ( CALL $53($2, [0], [-1], [18327], $4) ){ goto $label$10 }
	CALL prints([18336])
	$2 = *($1 + [160])
	if ( (*($2 + [12]) & [1]) ){ goto $label$12 }
	$2 = (($2 + [12]) + [1])
	goto $label$11 
	
.LABEL $label$12
	$2 = *(($2 + [20]))
	
.LABEL $label$11
	*($1 + [96]) = (CASTING int_64)(int_32 CALL $66($2))
	$2 = *($1 + [160])
	$3 = *($2 + [24])
	if ( ($3 & [1]) ){ goto $label$14 }
	$3 = uint_32($3 >> [1])
	$2 = (($2 + [24]) + [1])
	goto $label$13 
	
.LABEL $label$14
	$3 = *(($2 + [28]))
	$2 = *(($2 + [32]))
	
.LABEL $label$13
	*($1 + [84]) = $3
	*($1 + [80]) = $2
	*($1 + [16]) = *($1 + [80])
	$3 = CALL $3(($1 + [88]), ($1 + [16]))
	$2 = *($1 + [160])
	$4 = *($2 + [36])
	if ( ($4 & [1]) ){ goto $label$16 }
	$4 = uint_32($4 >> [1])
	$2 = (($2 + [36]) + [1])
	goto $label$15 
	
.LABEL $label$16
	$4 = *(($2 + [40]))
	$2 = *(($2 + [44]))
	
.LABEL $label$15
	*($1 + [68]) = $4
	*($1 + [64]) = $2
	*($1 + [8]) = *($1 + [64])
	$2 = CALL $3(($1 + [72]), ($1 + [8]))
	*($1 + [56]) = CALL $58((*($1 + [160]) + [48]), [0], [10])
	CALL prints([18350])
	CALL printn(*($3))
	CALL prints([18356])
	CALL printn(*($2))
	CALL prints([18362])
	CALL printui(*($1 + [56]))
	CALL prints([17313])
	*(($1 + [136])) = [0]
	*($1 + [120]) = (int_64)-1
	*($1 + [128]) = (int_64)0
	$5 = *($0)
	*($1 + [104]) = $5
	*($1 + [112]) = $5
	$4 = CALL db_find_i64($5, $5, (int_64)-8960249665949384704, *($1 + [96]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*(CALL $12(($1 + [104]), $4) + [60]) == (int_32)($1 + [104])), [17788])
	CALL prints([18366])
	$4 = *($1 + [128])
	if ( $4 ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$18
	CALL prints([18388])
	$5 = *($0)
	*($1 + [44]) = $3
	*($1 + [48]) = $2
	*($1 + [40]) = ($1 + [96])
	*($1 + [52]) = ($1 + [56])
	CALL $19(($1 + [32]), ($1 + [104]), $5, ($1 + [40]))
	$4 = *($1 + [128])
	if ( ($4 == 0) ){ goto $label$10 }
	
.LABEL $label$17
	$6 = ($1 + [132])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$22 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$23
	CALL _ZdlPv($3)
	
.LABEL $label$22
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$21 }
	$2 = *(($1 + [128]))
	goto $label$19 
	
.LABEL $label$20
	$2 = $4
	
.LABEL $label$19
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = *($1 + [160])
	$3 = *($2)
	$4 = CALL $75([18410])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$24 }
	if ( CALL $53($2, [0], [-1], [18410], $4) ){ goto $label$24 }
	CALL prints([18420])
	*(($1 + [136])) = [0]
	*($1 + [120]) = (int_64)-1
	$5 = *($0)
	*($1 + [104]) = $5
	*($1 + [112]) = $5
	*($1 + [128]) = (int_64)0
	$2 = CALL db_lowerbound_i64($5, $5, (int_64)-8960249665949384704, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$25 }
	$3 = CALL $12(($1 + [104]), $2)
	
.LOOP $label$26:
	CALL eosio_assert([1], [18553])
	CALL eosio_assert([1], [18587])
	$2 = [0]
	$4 = CALL db_next_i64(*($3 + [64]), ($1 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$27 }
	$2 = CALL $12(($1 + [104]), $4)
	
.LABEL $label$27
	CALL $20(($1 + [104]), $3)
	$3 = $2
	if ( $2 ){ goto $label$26 }
	
.LABEL $label$25
	$4 = *($1 + [128])
	if ( ($4 == 0) ){ goto $label$24 }
	$6 = ($1 + [132])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$29 }
	
.LOOP $label$30:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$31 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$32
	CALL _ZdlPv($3)
	
.LABEL $label$31
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$30 }
	$2 = *(($1 + [128]))
	goto $label$28 
	
.LABEL $label$29
	$2 = $4
	
.LABEL $label$28
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$24
	$2 = *($1 + [160])
	$3 = *($2)
	$4 = CALL $75([18435])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$35 }
	if ( CALL $53($2, [0], [-1], [18435], $4) ){ goto $label$35 }
	CALL prints([18444])
	$2 = CALL $55((*($1 + [160]) + [12]), [0], [10])
	$5 = CALL $58((*($1 + [160]) + [36]), [0], [10])
	*($1 + [96]) = $5
	*($1 + [88]) = CALL $58((*($1 + [160]) + [48]), [0], [10])
	$7 = (CASTING int_64)(int_32 $2)
	$2 = *($1 + [160])
	$3 = *($2 + [24])
	if ( ($3 & [1]) ){ goto $label$37 }
	$3 = uint_32($3 >> [1])
	$2 = (($2 + [24]) + [1])
	goto $label$36 
	
.LABEL $label$37
	$3 = *(($2 + [28]))
	$2 = *(($2 + [32]))
	
.LABEL $label$36
	*($1 + [28]) = $3
	*($1 + [24]) = $2
	*($1) = *($1 + [24])
	$2 = CALL $3(($1 + [72]), $1)
	CALL prints([18458])
	CALL printui($7)
	CALL prints([17313])
	CALL prints([18467])
	CALL printn(*($2))
	CALL prints([17313])
	CALL prints([18481])
	CALL printui($5)
	CALL prints([17313])
	*(($1 + [136])) = [0]
	*($1 + [120]) = (int_64)-1
	*($1 + [128]) = (int_64)0
	$5 = *($0)
	*($1 + [104]) = $5
	*($1 + [112]) = $5
	$3 = CALL db_find_i64($5, $5, (int_64)-8960249665949384704, $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$35 }
	$3 = CALL $12(($1 + [104]), $3)
	CALL eosio_assert(((int_32)*($3 + [60]) == (int_32)($1 + [104])), [17788])
	CALL prints([17350])
	CALL prints([17371])
	CALL printui(*($3 + [24]))
	CALL prints([17313])
	$5 = *($0)
	*($1 + [40]) = $2
	*($1 + [44]) = ($1 + [96])
	*($1 + [48]) = ($1 + [88])
	CALL eosio_assert([1], [17862])
	CALL $21(($1 + [104]), $3, $5, ($1 + [40]))
	$0 = *($1 + [128])
	if ( ($0 == 0) ){ goto $label$35 }
	$4 = ($1 + [132])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$38 }
	
.LOOP $label$39:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$40 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$41
	CALL _ZdlPv($3)
	
.LABEL $label$40
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$39 }
	$2 = *(($1 + [128]))
	*($4) = $0
	CALL _ZdlPv($2)
	$0 = *($1 + [160])
	if ( $0 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$38
	*($4) = $0
	CALL _ZdlPv($0)
	$0 = *($1 + [160])
	if ( $0 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$0 = *($1 + [160])
	if ( ($0 == 0) ){ goto $label$33 }
	
.LABEL $label$34
	$3 = *($1 + [164])
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$43 }
	
.LOOP $label$44:
	$2 = ($3 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$45
	$3 = $2
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$44 }
	$2 = *($1 + [160])
	goto $label$42 
	
.LABEL $label$43
	$2 = $0
	
.LABEL $label$42
	*($1 + [164]) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$33
	if ( ((*($1 + [176]) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($1 + [184])))
	
.LABEL $label$46
	$global$0 = ($1 + [192])
}

void .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	float_64 $9
	float_64 $10
	int_32 $11
	$1 = ($global$0 - [240])
	$global$0 = $1
	CALL $10(($1 + [176]))
	CALL prints([17196])
	CALL printn(*($1 + [176]))
	CALL prints([17204])
	CALL printi(*($1 + [192]))
	CALL prints([17216])
	$2 = ($1 + [200])
	CALL printui(*($2))
	CALL prints([17688])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$1 }
	$2 = [0]
	
.LOOP $label$3:
	*((($1 + [80]) + $2)) = $3
	$4 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[5]) ){ goto $label$2 }
	$2 = $4
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	
.LABEL $label$2
	CALL prints_l(($1 + [80]), $4)
	
.LABEL $label$1
	CALL prints([17226])
	$2 = *($1 + [208])
	$4 = ($2 & [1])
	CALL prints_l(( *(($1 + [216])) ? ($1 + [209]) : $4 ), ( *(($1 + [212])) ? uint_32($2 >> [1]) : $4 ))
	*($1 + [168]) = [0]
	*($1 + [160]) = (int_64)0
	$2 = CALL $48(($1 + [144]), ($1 + [208]))
	CALL $11($0, ($1 + [160]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$4
	$2 = *($1 + [160])
	$4 = *($2)
	$5 = CALL $75([17234])
	if ( ((int_32)$5 != (int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$5 }
	if ( CALL $53($2, [0], [-1], [17234], $5) ){ goto $label$5 }
	$2 = *($1 + [160])
	CALL prints([17239])
	$4 = *($2 + [24])
	$5 = ($4 & [1])
	CALL prints_l(( *(($2 + [32])) ? ($2 + [25]) : $5 ), ( *(($2 + [28])) ? uint_32($4 >> [1]) : $5 ))
	*($1 + [136]) = [17249]
	*($1 + [140]) = CALL $75([17249])
	*($1 + [8]) = *($1 + [136])
	$2 = CALL $3(($1 + [80]), ($1 + [8]))
	if ( ((int_64)*($0 + [8]) != (int_64)*($2)) ){ goto $label$11 }
	$2 = CALL $75([17261])
	if ( ($2 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [17690])
	goto $label$9 
	
.LABEL $label$11
	CALL eosio_assert([0], [17265])
	goto $label$6 
	
.LABEL $label$10
	if ( ($2 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$3 = (int_64)0
	
.LOOP $label$12:
	$4 = *(($2 + [17260]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [17735])
	
.LABEL $label$13
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$12 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$7 
	
.LABEL $label$8
	$3 = (int_64)0
	
.LABEL $label$7
	CALL eosio_assert(((int_64)*(($1 + [200])) == (int_64)((int_64)$3 | (int_64)4)), [17265])
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($1 + [184]) == (int_64)*($0)), [17286])
	$6 = (CASTING int_64)(int_32 CALL $55((*($1 + [160]) + [12]), [0], [10]))
	$2 = *($1 + [160])
	$4 = *($2 + [24])
	if ( ($4 & [1]) ){ goto $label$15 }
	$4 = uint_32($4 >> [1])
	$2 = (($2 + [24]) + [1])
	goto $label$14 
	
.LABEL $label$15
	$4 = *(($2 + [28]))
	$2 = *(($2 + [32]))
	
.LABEL $label$14
	*($1 + [124]) = $4
	*($1 + [120]) = $2
	*($1) = *($1 + [120])
	$7 = CALL $3(($1 + [128]), $1)
	CALL prints([17290])
	CALL printn(*($7))
	CALL prints([17301])
	CALL printui($6)
	CALL prints([17313])
	CALL prints([17315])
	CALL require_auth(*($7))
	CALL prints([17324])
	CALL printn(*($7))
	CALL prints([17332])
	*(($1 + [112])) = [0]
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	$3 = *($0)
	*($1 + [80]) = $3
	*($1 + [88]) = $3
	$2 = CALL db_find_i64($3, $3, (int_64)-8960249665949384704, $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$30 }
	$2 = CALL $12(($1 + [80]), $2)
	CALL eosio_assert(((int_32)*($2 + [60]) == (int_32)($1 + [80])), [17788])
	*($1 + [76]) = $2
	*($1 + [72]) = ($1 + [80])
	CALL prints([17350])
	CALL prints([17371])
	CALL printui(*($2 + [24]))
	CALL prints([17313])
	CALL prints([17396])
	CALL printn(*($2 + [16]))
	CALL prints([17313])
	$3 = *($2 + [40])
	CALL prints([17422])
	CALL printui($3)
	CALL prints([17313])
	$6 = CALL current_time()
	$8 = CALL current_time()
	CALL prints([17433])
	$3 = (int_64)
	CALL printui($3(((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295) - $3)))
	CALL prints([17445])
	CALL printui(((int_64)((uint_64)$8 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	CALL prints([17313])
	CALL prints([17451])
	CALL printui((int_64)86400)
	CALL prints([17313])
	if ( (uint_64)($3 <= (int_64)86401) ){ goto $label$29 }
	CALL prints([17464])
	$3 = *(*($1 + [76]) + [24])
	CALL prints([17474])
	$9 = (CASTING float_64)(uint_64 $3)
	$10 = ((float_64)$9 * (float_64)(float_64)0.9286)
	if ( (((float_64)$10 < (float_64)(float_64)18446744073709551615) & ((float_64)$10 >= (float_64)(float_64)0)) ){ goto $label$28 }
	$3 = (int_64)0
	goto $label$27 
	
.LABEL $label$30
	*($1 + [76]) = [0]
	*($1 + [72]) = ($1 + [80])
	CALL prints([17654])
	$0 = *($1 + [104])
	if ( $0 ){ goto $label$16 }
	goto $label$5 
	
.LABEL $label$29
	CALL prints([17593])
	$6 = *(*($1 + [76]) + [24])
	CALL prints([17474])
	CALL printui($6)
	CALL prints([17313])
	CALL prints([17492])
	$9 = (CASTING float_64)(uint_64 $6)
	$10 = ((float_64)$9 * (float_64)(float_64)0.0713)
	if ( (((float_64)$10 < (float_64)(float_64)18446744073709551615) & ((float_64)$10 >= (float_64)(float_64)0)) ){ goto $label$26 }
	$3 = (int_64)0
	goto $label$25 
	
.LABEL $label$28
	$3 = (Rounds 0)($10)
	
.LABEL $label$27
	CALL printui($3)
	CALL prints([17313])
	CALL prints([17492])
	$10 = ((float_64)$9 * (float_64)(float_64)0.0713)
	if ( (((float_64)$10 < (float_64)(float_64)18446744073709551615) & ((float_64)$10 >= (float_64)(float_64)0)) ){ goto $label$24 }
	$3 = (int_64)0
	goto $label$23 
	
.LABEL $label$26
	$3 = (Rounds 0)($10)
	
.LABEL $label$25
	CALL printui($3)
	CALL prints([17313])
	CALL prints([17500])
	$10 = ((float_64)(Rounds 0)($10) * (float_64)(float_64)0.5)
	if ( (((float_64)$10 < (float_64)(float_64)18446744073709551615) & ((float_64)$10 >= (float_64)(float_64)0)) ){ goto $label$22 }
	$3 = (int_64)0
	goto $label$21 
	
.LABEL $label$24
	$3 = (Rounds 0)($10)
	
.LABEL $label$23
	CALL printui($3)
	CALL prints([17313])
	CALL prints([17500])
	$10 = ((float_64)(Rounds 0)($10) * (float_64)(float_64)0.5)
	if ( (((float_64)$10 < (float_64)(float_64)18446744073709551615) & ((float_64)$10 >= (float_64)(float_64)0)) ){ goto $label$20 }
	$3 = (int_64)0
	goto $label$19 
	
.LABEL $label$22
	$3 = (Rounds 0)($10)
	
.LABEL $label$21
	CALL printui($3)
	CALL prints([17313])
	$10 = ((float_64)((float_64)$9 * (float_64)(float_64)0.4) + (float_64)$9)
	if ( (((float_64)$10 < (float_64)(float_64)18446744073709551615) & ((float_64)$10 >= (float_64)(float_64)0)) ){ goto $label$18 }
	$3 = (int_64)0
	goto $label$17 
	
.LABEL $label$20
	$3 = (Rounds 0)($10)
	
.LABEL $label$19
	CALL printui($3)
	CALL prints([17313])
	CALL prints([17512])
	CALL printui((int_64)10000)
	CALL prints([17313])
	CALL eosio_assert(((uint_64)*(($1 + [192])) > (uint_64)(int_64)9999), [17524])
	*($1 + [48]) = (int_64)14000
	CALL prints([17541])
	CALL printui((int_64)14000)
	CALL prints([17313])
	CALL prints([17554])
	CALL prints([17569])
	CALL prints([17575])
	CALL prints([17581])
	$3 = *($0)
	$2 = *($1 + [76])
	*($1 + [228]) = $7
	*($1 + [224]) = ($1 + [72])
	*($1 + [232]) = ($1 + [48])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [17862])
	CALL $13(($1 + [80]), $2, $3, ($1 + [224]))
	CALL prints([17587])
	$0 = *($1 + [104])
	if ( $0 ){ goto $label$16 }
	goto $label$5 
	
.LABEL $label$18
	$3 = (Rounds 0)($10)
	
.LABEL $label$17
	*($1 + [64]) = $3
	CALL prints([17512])
	CALL printui($3)
	CALL prints([17313])
	CALL eosio_assert(((uint_64)*(($1 + [192])) >= (uint_64)*(*($1 + [76]) + [24])), [17524])
	CALL prints([17554])
	CALL prints([17569])
	$3 = *($7)
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$34 }
	$4 = [0]
	$5 = *([0] + [18060])
	
.LOOP $label$36:
	*((($1 + [224]) + ($2 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$4 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$35 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$36 }
	
.LABEL $label$35
	*(($1 + [56])) = [0]
	*($1 + [48]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$33 }
	*($1 + [48]) = ($4 << [1])
	$5 = (($1 + [48]) | [1])
	goto $label$32 
	
.LABEL $label$34
	*(($1 + [56])) = [0]
	*($1 + [48]) = (int_64)0
	*($1 + [48]) = [0]
	$2 = (($1 + [48]) | [1])
	goto $label$31 
	
.LABEL $label$33
	$11 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($11)
	*($1 + [48]) = ($11 | [1])
	*($1 + [56]) = $5
	*($1 + [52]) = $4
	
.LABEL $label$32
	$11 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$37:
	*(($5 + $2)) = *((($1 + [224]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$37 }
	$2 = ($5 + $4)
	
.LABEL $label$31
	*($2) = [0]
	CALL $54(($1 + [32]), [17604], ($1 + [48]))
	$2 = CALL $52(($1 + [32]), [17653])
	$4 = ($2 + [8])
	*((($1 + [224]) + [8])) = *($4)
	*($1 + [224]) = *($2)
	*($2) = (int_64)0
	*($4) = [0]
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($1 + [40]))
	
.LABEL $label$38
	$2 = CALL $48(($1 + [16]), ($1 + [224]))
	CALL $14($0, *(*($1 + [76]) + [8]), $6, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$39
	CALL prints([17575])
	CALL prints([17581])
	$3 = *($0)
	$2 = *($1 + [76])
	*($1 + [36]) = $7
	*($1 + [32]) = ($1 + [72])
	*($1 + [40]) = ($1 + [64])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [17862])
	CALL $15(($1 + [80]), $2, $3, ($1 + [32]))
	CALL prints([17587])
	if ( (*($1 + [224]) & [1]) ){ goto $label$42 }
	if ( (*($1 + [48]) & [1]) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	CALL _ZdlPv(*($1 + [232]))
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$40 }
	
.LABEL $label$41
	CALL _ZdlPv(*($1 + [56]))
	$0 = *($1 + [104])
	if ( $0 ){ goto $label$16 }
	goto $label$5 
	
.LABEL $label$40
	$0 = *($1 + [104])
	if ( ($0 == 0) ){ goto $label$5 }
	
.LABEL $label$16
	$5 = ($1 + [108])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$44 }
	
.LOOP $label$45:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$46 }
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*(($4 + [56])))
	
.LABEL $label$47
	CALL _ZdlPv($4)
	
.LABEL $label$46
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$45 }
	$2 = *(($1 + [104]))
	goto $label$43 
	
.LABEL $label$44
	$2 = $0
	
.LABEL $label$43
	*($5) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$0 = *($1 + [160])
	if ( ($0 == 0) ){ goto $label$48 }
	$4 = *($1 + [164])
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$50 }
	
.LOOP $label$51:
	$2 = ($4 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$52
	$4 = $2
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$51 }
	$2 = *($1 + [160])
	goto $label$49 
	
.LABEL $label$50
	$2 = $0
	
.LABEL $label$49
	*($1 + [164]) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$48
	if ( ((*(($1 + [208])) & [1]) == 0) ){ goto $label$53 }
	CALL _ZdlPv(*(($1 + [216])))
	
.LABEL $label$53
	$global$0 = ($1 + [240])
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $80($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [28]) = [234354]
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $84($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 apply)
{
	int_32 $3
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL memory()
	*($3 + [128]) = [16910]
	*($3 + [132]) = CALL $75([16910])
	*($3 + [64]) = *($3 + [128])
	CALL $3(($3 + [136]), ($3 + [64]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [1]
	*($3 + [56]) = *($3 + [120])
	CALL $5($0, $1, ($3 + [56]))
	
.LABEL $label$1
	*($3 + [112]) = [17010]
	*($3 + [116]) = CALL $75([17010])
	*($3 + [48]) = *($3 + [112])
	CALL $3(($3 + [136]), ($3 + [48]))
	if ( ((int_64)$2 != (int_64)-4157493845350678528) ){ goto $label$2 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [2]
	*($3 + [40]) = *($3 + [104])
	CALL $5($0, $1, ($3 + [40]))
	
.LABEL $label$2
	*($3 + [96]) = [17017]
	*($3 + [100]) = CALL $75([17017])
	*($3 + [32]) = *($3 + [96])
	CALL $3(($3 + [136]), ($3 + [32]))
	if ( ((int_64)$2 != (int_64)3631283935532548096) ){ goto $label$3 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [3]
	*($3 + [24]) = *($3 + [88])
	CALL $5($0, $1, ($3 + [24]))
	
.LABEL $label$3
	*($3 + [80]) = [17023]
	*($3 + [84]) = CALL $75([17023])
	*($3 + [16]) = *($3 + [80])
	CALL $3(($3 + [136]), ($3 + [16]))
	if ( ((int_64)$2 != (int_64)4942010207426314240) ){ goto $label$4 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [4]
	*($3 + [8]) = *($3 + [72])
	CALL $9($0, $1, ($3 + [8]))
	
.LABEL $label$4
	CALL $64([0])
	$global$0 = ($3 + [144])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [17032])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [17144])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17077])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17144])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC memory ()
{
	CALL $38()
}

void .FUNC $1 (int_32 $0)
{
	if ( ((*([0] + [8192]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8200]))
	
.LABEL $label$1
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = CALL $75([17261])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17690])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [17260]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17735])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18104])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $9
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [18153])
	$6 = *($0)
	*($4 + [104]) = [18097]
	*($4 + [108]) = CALL $75([18097])
	*($4 + [16]) = *($4 + [104])
	$9 = *(CALL $3(($4 + [112]), ($4 + [16])))
	*($4 + [88]) = [17249]
	*($4 + [92]) = CALL $75([17249])
	*($4 + [8]) = *($4 + [88])
	$5 = CALL $3(($4 + [96]), ($4 + [8]))
	*($4 + [72]) = [16910]
	*($4 + [76]) = CALL $75([16910])
	*($4) = *($4 + [72])
	$7 = CALL $3(($4 + [80]), $4)
	*((($4 + [24]) + [24])) = $8
	*($4 + [32]) = $1
	*($4 + [40]) = $2
	*($4 + [24]) = *($0)
	$10 = CALL $48((($4 + [24]) + [32]), $3)
	*($4 + [120]) = *($5)
	*($4 + [128]) = *($7)
	*(($5 = CALL _Znwj([16]))) = $6
	*($5 + [8]) = $9
	*((($4 + [120]) + [36])) = [0]
	$7 = ($5 + [16])
	*((($4 + [120]) + [24])) = $7
	*(($4 + [140])) = $7
	*($4 + [136]) = $5
	*($4 + [148 align=4]) = (int_64)0
	$5 = *($10)
	$7 = ( *((($4 + [24]) + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [32])
	$6 = (CASTING uint_64)(uint_32 $7)
	$7 = ($4 + [148])
	
.LOOP $label$12:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$12 }
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $25($7, $5)
	$7 = *(($4 + [152]))
	$5 = *(($4 + [148]))
	goto $label$13 
	
.LABEL $label$14
	$7 = [0]
	$5 = [0]
	
.LABEL $label$13
	*($4 + [180]) = $5
	*($4 + [176]) = $5
	*($4 + [184]) = $7
	*($4 + [160]) = ($4 + [176])
	*($4 + [168]) = ($4 + [24])
	CALL $26(($4 + [168]), ($4 + [160]))
	CALL $27(($4 + [176]), ($4 + [120]))
	$5 = *($4 + [176])
	CALL send_inline($5, (*($4 + [180]) - $5))
	$5 = *($4 + [176])
	if ( ($5 == 0) ){ goto $label$15 }
	*($4 + [180]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$5 = *($4 + [148])
	if ( ($5 == 0) ){ goto $label$16 }
	*(($4 + [152])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$5 = *($4 + [136])
	if ( ($5 == 0) ){ goto $label$17 }
	*(($4 + [140])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$18
	$global$0 = ($4 + [192])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [17897])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [17943])
	*($1 + [16]) = *(*(*($3) + [4]) + [8])
	*($1 + [8]) = *(*($3 + [4]))
	$6 = *($1)
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [24]) = *(*($3 + [8]))
	*($1 + [32]) = (*(*(*($3) + [4]) + [32]) + [1])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17994])
	$3 = *($1 + [48])
	$7 = ( *(($1 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [44])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $80($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $31($5, $1)
	CALL db_update_i64(*($1 + [64]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $84($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $80($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [4]) = $1
	*($2) = $1
	*($2 + [8]) = ($1 + $3)
	CALL $22($2, $0)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17839])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $80($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17679])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [17679])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $36(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $84($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $80($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $23(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$2 }
	$5 = ($2 + [1])
	$2 = ($5 + uint_32($4 >> [1]))
	goto $label$1 
	
.LABEL $label$2
	$5 = *($2 + [8])
	$2 = ($5 + *($2 + [4]))
	
.LABEL $label$1
	*($3 + [24]) = $2
	*($3 + [16]) = $5
	*($3 + [8]) = $5
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$5 }
	$6 = ($1 + [8])
	$7 = ($1 + [4])
	$4 = $5
	
.LOOP $label$6:
	if ( ((int_32)*($4) != (int_32)[59]) ){ goto $label$12 }
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*($6)) ){ goto $label$11 }
	*($2) = (int_64)0
	*(($2 + [8])) = [0]
	$8 = ($4 - $5)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$10 }
	*($2) = ($8 << [1])
	$9 = ($2 + [1])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$4 = ($4 + [1])
	*($3 + [8]) = $4
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$11
	CALL $24($1, ($3 + [16]), ($3 + [8]))
	goto $label$7 
	
.LABEL $label$10
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($2) = ($10 | [1])
	*($2 + [8]) = $9
	*($2 + [4]) = $8
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = $9
	
.LOOP $label$13:
	*($2) = *($5)
	$2 = ($2 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$13 }
	$9 = ($9 + $8)
	
.LABEL $label$8
	*($9) = [0]
	*($7) = (*($7) + [12])
	
.LABEL $label$7
	$4 = (*($3 + [8]) + [1])
	*($3 + [16]) = $4
	$2 = *($3 + [24])
	$5 = $4
	*($3 + [8]) = $4
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$16 }
	$4 = *($1 + [4])
	if ( ((uint_32)$4 >= (uint_32)*($1 + [8])) ){ goto $label$17 }
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$9 = ($2 - $5)
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$9 > (uint_32)[10]) ){ goto $label$15 }
	*($4) = ($9 << [1])
	$7 = ($4 + [1])
	goto $label$14 
	
.LABEL $label$17
	CALL $24($1, ($3 + [16]), ($3 + [24]))
	
.LABEL $label$16
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$15
	$8 = (($9 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($4) = ($8 | [1])
	*($4 + [8]) = $7
	*($4 + [4]) = $9
	
.LABEL $label$14
	$4 = $7
	
.LOOP $label$18:
	*($4) = *($5)
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$18 }
	*(($7 + $9)) = [0]
	*(($5 = ($1 + [4]))) = (*($5) + [12])
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$4
	CALL $47($2)
	
.LABEL $label$3
	CALL $47($4)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17839])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $80($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56]) = [0]
	*($5 + [60]) = $0
	CALL $29(($3 + [32]), $5)
	*($5 + [64]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $30(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $84($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [17897])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [17943])
	*($1 + [16]) = *(*(*($3) + [4]) + [8])
	*($1 + [8]) = *(*($3 + [4]))
	$6 = *($1)
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [24]) = *(*($3 + [8]))
	*($1 + [32]) = (*(*(*($3) + [4]) + [32]) + [1])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17994])
	$3 = *($1 + [48])
	$7 = ( *(($1 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [44])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $80($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $31($5, $1)
	CALL db_update_i64(*($1 + [64]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $84($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $62($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [16]) = *(*($4 + [8]))
	*($1 + [32]) = [0]
	*($1 + [24]) = *(*($4 + [12]))
	$5 = *($0)
	CALL $51(($1 + [48]), [18540])
	$4 = *($1 + [48])
	$6 = ( *(($1 + [52])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [44])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $80($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL $31($3, $1)
	$7 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($5 + [8]), (int_64)-8960249665949384704, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $84($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18053])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18053])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)0
	*($0) = *(*(*($2 + [4])))
	$1 = *($2)
	CALL eosio_assert([1], [18053])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [18053])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18053])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18053])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18053])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18053])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18053])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $62($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $32($0, ($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18053])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18053])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18053])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18053])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18053])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18053])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_64 .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $75([17070])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [17070], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $63())
	*(CALL $63()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $72($4, ($3 + [12]), $2)
	$0 = CALL $63()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $56($3)
	
.LABEL $label$1
	CALL $57($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $75($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $49($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $61 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $63 ()
{
	return [8208]
}

void .FUNC $64 (int_32 $0)
{
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $38 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8192 align=4]) = (int_64)0
	*([0] + [8200]) = [0]
	$0 = CALL $75([16896])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*([0] + [8192]) = ($0 << [1])
	$1 = [8193]
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8192]) = ($2 | [1])
	*([0] + [8200]) = $1
	*([0] + [8196]) = $0
	
.LABEL $label$3
	CALL memcpy($1, [16896], $0)
	
.LABEL $label$2
	*(($1 + $0)) = [0]
	CALL $65([5], [0], [8192])
	return (unreachable)
	
.LABEL $label$1
	CALL $47([8192])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $75($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $49($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $74(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $75($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $49($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $75([16919])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [16919], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $63())
	*(CALL $63()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $73($4, ($3 + [12]), $2)
	$5 = CALL $63()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $56($3)
	
.LABEL $label$1
	CALL $57($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $56 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $59($1, $0, [17407])
	CALL $60()
	(unreachable)
}

void .FUNC $57 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $59($1, $0, [17380])
	CALL $61()
	(unreachable)
}