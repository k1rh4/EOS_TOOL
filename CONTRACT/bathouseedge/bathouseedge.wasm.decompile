(data (i32.const 8192) "\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00d\00\00\00\00\00\00\00\f4\01\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\88\13\00\00\00\00\00\00\10\'\00\00\00\00\00\00P\c3\00\00\00\00\00\00\a0\86\01\00\00\00\00\00 \a1\07\00\00\00\00\00@B\0f\00\00\00\00\00@KL\00\00\00\00\00\80\96\98\00\00\00\00\00\80\f0\fa\02\00\00\00\00\00\00\00\00d\00\00\00\c8\00\00\00,\01\00\00\90\01\00\00\f4\01\00\00X\02\00\00\bc\02\00\00 \03\00\00\e8\03\00\00\dc\05\00\00\d0\07\00\00\c4\t\00\00\ca#\00\00")
(data (i32.const 8360) "write\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8452) "user is invalid eos account\00")
(data (i32.const 8480) "user is already registered\00")
(data (i32.const 8507) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8558) "error reading iterator\00")
(data (i32.const 8581) "read\00")
(data (i32.const 8586) "cannot create objects in table of another contract\00")
(data (i32.const 8637) "EOS\00")
(data (i32.const 8641) "string is too long to be a valid symbol_code\00")
(data (i32.const 8686) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8739) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8788) "invalid symbol name\00")
(data (i32.const 8808) "user and referral is equal.\00")
(data (i32.const 8836) "referral is invalid eos account\00")
(data (i32.const 8868) "user is not exists.\00")
(data (i32.const 8888) "already setted referral.\00")
(data (i32.const 8913) "cannot pass end iterator to modify\00")
(data (i32.const 8948) "object passed to modify is not in multi_index\00")
(data (i32.const 8994) "cannot modify objects in table of another contract\00")
(data (i32.const 9045) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9104) "invalid game type.\00")
(data (i32.const 9123) "house edge from \00")
(data (i32.const 9140) "invalid user account.\00")
(data (i32.const 9162) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9195) "attempt to add asset with different symbol\00")
(data (i32.const 9238) "addition underflow\00")
(data (i32.const 9257) "addition overflow\00")
(data (i32.const 9275) "referral is not exists.\00")
(data (i32.const 9299) "parent is not account.\00")
(data (i32.const 9322) "parent is not a referral.\00")
(data (i32.const 9348) "insufficient balance.\00")
(data (i32.const 9370) "claim\00")
(data (i32.const 9376) "claim referral\00")
(import "env" "send_inline" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "eosio_assert" (func $fimport$4 (param i32 i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$6 (param i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "require_recipient" (func $fimport$8 (param i64)))
(import "env" "current_receiver" (func $fimport$9 (result i64)))
(import "env" "db_store_i64" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "abort" (func $fimport$13))
(import "env" "memset" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$16 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$24 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$27 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$28 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$31 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$33 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$34 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$35 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $5))
(export "_Znwj" (func $54))
(export "_ZdlPv" (func $56))
(export "_Znaj" (func $55))
(export "_ZdaPv" (func $57))
(export "_ZnwjSt11align_val_t" (func $58))
(export "_ZnajSt11align_val_t" (func $59))
(export "_ZdlPvSt11align_val_t" (func $60))
(export "_ZdaPvSt11align_val_t" (func $61))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $6 $8 $10 $11 $13 $15 $17 $18)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17808))
(global $global$2 i32 (i32.const 17808))


void .FUNC $18 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ($0 + [112])
	$5 = *(($0 + [140]))
	$4 = *(($0 + [136]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [8507])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [120])), (int_64)-5001621371260764160, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $23($3, $6)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [8507])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [9275])
	CALL eosio_assert(((uint_64)*($7 + [16]) > (uint_64)(int_64)9999), [9348])
	$9 = ((uint_64)*($7 + [16]) / (uint_64)(int_64)10000)
	$6 = CALL $70([8637])
	if ( ($6 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [8641])
	goto $label$7 
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$10 = (int_64)0
	
.LOOP $label$9:
	$5 = *(($6 + [8636]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [8686])
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$9 }
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)4)
	goto $label$5 
	
.LABEL $label$6
	$10 = (int_64)4
	
.LABEL $label$5
	*($2 + [64]) = $9
	*($2 + [72]) = $10
	CALL eosio_assert([1], [8739])
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$10 = $9
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$10 = $9
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$15 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [8788])
	$10 = *($0)
	*($2 + [56]) = ($2 + [64])
	CALL eosio_assert($8, [8913])
	CALL $36($3, $7, $10, ($2 + [56]))
	*((($2 + [24]) + [8])) = [0]
	*((($2 + [40]) + [8])) = *((($2 + [64]) + [8]))
	*($2 + [24]) = (int_64)0
	*($2 + [40]) = *($2 + [64])
	$10 = *($0)
	$6 = CALL $70([9376])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$19 }
	*($2 + [24]) = ($6 << [1])
	$5 = (($2 + [24]) | [1])
	if ( $6 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [24]) = ($4 | [1])
	*($2 + [32]) = $5
	*($2 + [28]) = $6
	
.LABEL $label$18
	CALL memcpy($5, [9376], $6)
	
.LABEL $label$17
	*(($5 + $6)) = [0]
	*((($2 + [8]) + [8])) = *((($2 + [40]) + [8]))
	*($2 + [8]) = *($2 + [40])
	CALL $1($10, $1, ($2 + [8]), ($2 + [24]))
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($2 + [32]))
	
.LABEL $label$20
	$global$0 = ($2 + [80])
	return (unreachable)
	
.LABEL $label$16
	CALL $62(($2 + [24]))
}

void .FUNC $62 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [136]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	return $0
}

void .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17796])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17604]
	$3 = (((int_32)$1 * (int_32)[12]) + [17604])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $65($0, $1, $2, CALL $70($2))
}

int_32 .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $64($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	*($1) = *(*($0))
	*($1 + [8]) = (int_64)0
	$0 = CALL $70([8637])
	if ( ($0 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8641])
	goto $label$3 
	
.LABEL $label$4
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$3 = *(($0 + [8636]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8686])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$5 }
	$4 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert([1], [8739])
	$2 = (uint_64)$4 >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $5
	$3 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $5
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $3 ){ goto $label$11 }
	$3 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	
.LABEL $label$7
	CALL eosio_assert($3, [8788])
	*(($1 + [24])) = $4
	*($1 + [16]) = (int_64)0
	$0 = CALL $70([8637])
	if ( ($0 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [8641])
	goto $label$14 
	
.LABEL $label$15
	if ( ($0 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$2 = (int_64)0
	
.LOOP $label$16:
	$3 = *(($0 + [8636]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8686])
	
.LABEL $label$17
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$16 }
	$4 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$4 = (int_64)4
	
.LABEL $label$12
	CALL eosio_assert([1], [8739])
	$2 = (uint_64)$4 >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$2 = $5
	$3 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$2 = $5
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $3 ){ goto $label$22 }
	$3 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$3 = [0]
	
.LABEL $label$18
	CALL eosio_assert($3, [8788])
	*(($1 + [56])) = $4
	*($1 + [48]) = (int_64)0
	$0 = CALL $70([8637])
	if ( ($0 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [8641])
	goto $label$25 
	
.LABEL $label$26
	if ( ($0 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$2 = (int_64)0
	
.LOOP $label$27:
	$3 = *(($0 + [8636]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [8686])
	
.LABEL $label$28
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$27 }
	$4 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$23 
	
.LABEL $label$24
	$4 = (int_64)4
	
.LABEL $label$23
	CALL eosio_assert([1], [8739])
	$2 = (uint_64)$4 >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$2 = $5
	$3 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$2 = $5
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $3 ){ goto $label$33 }
	$3 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$3 = [0]
	
.LABEL $label$29
	CALL eosio_assert($3, [8788])
	*(($1 + [40])) = $4
	*($1 + [32]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = (int_64)0
}

int_32 .FUNC $73 (int_32 $0)
{
	return CALL $74([9412], $0)
}

void .FUNC $67 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8558])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $73($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [72]) = $0
	CALL $50(($3 + [32]), $5)
	*($5 + [76]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $48(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $76($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8948])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [8994])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [9045])
	CALL eosio_assert([1], [8360])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8360])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	CALL eosio_assert([1], [8360])
	CALL memcpy(($4 | [12]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8360])
	CALL memcpy(($4 + [20]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [28])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$9()), [8586])
	*(($5 = CALL _Znwj([96])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [80]) = $1
	CALL $39($3, $5)
	*($4 + [104]) = (($4 + [16]) + [80])
	*($4 + [100]) = ($4 + [16])
	*($4 + [96]) = ($4 + [16])
	CALL $40(($4 + [96]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-3020371635640205312, $2, $6, ($4 + [16]), [80])
	*($5 + [84]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [96]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $41(($1 + [24]), ($4 + [96]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8558])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $73($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [80]) = $0
	CALL $42(($3 + [32]), $5)
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $41(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $76($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8558])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $73($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [24]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [32]) = $0
	CALL $45(($3 + [32]), $5)
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $44(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $76($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [8948])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [8994])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [9045])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $40(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8581])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8581])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8581])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8581])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2) = $0
	CALL $53($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$9()), [8586])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [24]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [32]) = $1
	CALL $43(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $44(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [8948])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [8994])
	$5 = *($1)
	CALL $49($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9045])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $40(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$9()), [8586])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([96])
	CALL $46($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [84])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $41(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $75($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8366])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = *($0)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [24]))), [9195])
	$3 = ((int_64)*($1 + [16]) + (int_64)*($2))
	*($1 + [16]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9238])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [9257])
	$2 = *($0 + [4])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [56]))), [9195])
	$3 = ((int_64)*($1 + [48]) + (int_64)*($2))
	*($1 + [48]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9238])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [9257])
	$2 = *($0 + [8])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [40]))), [9195])
	$3 = ((int_64)*($1 + [32]) + (int_64)*($2))
	*($1 + [32]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9238])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [9257])
	*($1 + [64]) = *(*($0 + [12]))
	*($1 + [72]) = ((int_64)*($1 + [72]) + (int_64)*(*($0 + [16])))
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $67($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $69 (int_32 $0)
{
}

int_32 .FUNC $68 ()
{
	return [9396]
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($1 + [8]) = [1000]
	*($1) = *(*(*(*($0 + [4])) + [4]) + [8])
	*($1 + [16]) = (int_64)0
	$3 = *($0)
	CALL eosio_assert([1], [8360])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8360])
	CALL memcpy(($2 | [8]), ($1 + [8]), [4])
	CALL eosio_assert([1], [8360])
	CALL memcpy(($2 | [12]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8360])
	CALL memcpy(($2 + [20]), ($1 + [24]), [8])
	$4 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($3 + [8]), (int_64)-5001621371260764160, *(*($0 + [8])), $4, $2, [28])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8581])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [56])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $67($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [80]) = $1
	*(($4 = ($0 + [24]))) = (int_64)0
	*(($5 = ($0 + [40]))) = (int_64)0
	*(($6 = ($0 + [56]))) = (int_64)0
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$7 = *($2)
	$8 = *($1 + [8])
	*($0 + [16]) = *($8)
	*($4) = *(($8 + [8]))
	$4 = *($1 + [12])
	*($0 + [32]) = *($4)
	*($5) = *(($4 + [8]))
	$4 = *($1 + [16])
	*($0 + [48]) = *($4)
	*($6) = *(($4 + [8]))
	*($0 + [64]) = *(*($1 + [20]))
	*($0 + [72]) = (int_64)0
	*($3 + [88]) = ($3 + [80])
	*($3 + [84]) = $3
	*($3 + [80]) = $3
	CALL $40(($3 + [80]), $0)
	$9 = *($0)
	*($0 + [84]) = CALL db_store_i64(*($7 + [8]), (int_64)-3020371635640205312, *(*($2 + [8])), $9, $3, [80])
	if ( (uint_64)($9 <= *($7 + [16])) ){ goto $label$1 }
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [96])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8581])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8581])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $67($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $73($1)
	
.LABEL $label$2
	*(CALL $68()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $73(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $76($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	$2 = *($0)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [24]))), [9195])
	$3 = ((int_64)*($1 + [16]) + (int_64)*($2))
	*($1 + [16]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9238])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [9257])
	$2 = *($0 + [4])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [40]))), [9195])
	$3 = ((int_64)*($1 + [32]) + (int_64)*($2))
	*($1 + [32]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9238])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [9257])
	$2 = *($0 + [8])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [56]))), [9195])
	$3 = ((int_64)*($1 + [48]) + (int_64)*($2))
	*($1 + [48]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9238])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [9257])
	*($1 + [64]) = ((int_64)*($1 + [64]) + (int_64)*(*($0 + [12])))
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9404]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9408])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9404]) = [1]
	$2 = ($2 << [16])
	*([0] + [9408]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9408])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9408]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9404]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9404]) = [1]
	$3 = ($3 << [16])
	*([0] + [9408]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9408])
	
.LABEL $label$10
	*([0] + [9408]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $76($0)
	
.LABEL $label$1
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $68())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $72($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $8 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$3), [8507])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $20($3, $6)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$3), [8507])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8868])
	CALL eosio_assert(((uint_64)*($7 + [72]) > (uint_64)(int_64)9999), [9348])
	$9 = ((uint_64)*($7 + [72]) / (uint_64)(int_64)10000)
	$6 = CALL $70([8637])
	if ( ($6 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [8641])
	goto $label$7 
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$10 = (int_64)0
	
.LOOP $label$9:
	$5 = *(($6 + [8636]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [8686])
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$9 }
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)4)
	goto $label$5 
	
.LABEL $label$6
	$10 = (int_64)4
	
.LABEL $label$5
	*($2 + [64]) = $9
	*($2 + [72]) = $10
	CALL eosio_assert([1], [8739])
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$10 = $9
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$10 = $9
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$15 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [8788])
	$10 = *($0)
	*($2 + [56]) = ($2 + [64])
	CALL eosio_assert($8, [8913])
	CALL $35($3, $7, $10, ($2 + [56]))
	*((($2 + [24]) + [8])) = [0]
	*((($2 + [40]) + [8])) = *((($2 + [64]) + [8]))
	*($2 + [24]) = (int_64)0
	*($2 + [40]) = *($2 + [64])
	$10 = *($0)
	$6 = CALL $70([9370])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$19 }
	*($2 + [24]) = ($6 << [1])
	$5 = (($2 + [24]) | [1])
	if ( $6 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [24]) = ($4 | [1])
	*($2 + [32]) = $5
	*($2 + [28]) = $6
	
.LABEL $label$18
	CALL memcpy($5, [9370], $6)
	
.LABEL $label$17
	*(($5 + $6)) = [0]
	*((($2 + [8]) + [8])) = *((($2 + [40]) + [8]))
	*($2 + [8]) = *($2 + [40])
	CALL $1($10, $1, ($2 + [8]), ($2 + [24]))
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($2 + [32]))
	
.LABEL $label$20
	$global$0 = ($2 + [80])
	return (unreachable)
	
.LABEL $label$16
	CALL $62(($2 + [24]))
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $73($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [152]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8581])
	CALL memcpy(($4 + [152]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [152])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $76($2)
	
.LABEL $label$5
	CALL $19($4)
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $2
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8808])
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$6($1), [8452])
	CALL eosio_assert(CALL $fimport$6($2), [8836])
	$4 = ($0 + [72])
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$4), [8507])
	goto $label$1 
	
.LABEL $label$2
	$7 = CALL db_find_i64(*($4), *(($0 + [80])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$8 = CALL $20($4, $7)
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$4), [8507])
	goto $label$1 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$1
	*($3 + [20]) = $8
	*($3 + [16]) = $4
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8868])
	CALL eosio_assert((int_64)(*($8 + [8]) == 0), [8888])
	$7 = *($3 + [20])
	$2 = *($0)
	*($3) = ($3 + [24])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8913])
	CALL $22($4, $7, $2, $3)
	$4 = ($0 + [112])
	$2 = *($8 + [8])
	$6 = *(($0 + [140]))
	$8 = *(($0 + [136]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$10:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$2) ){ goto $label$9 }
	$6 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$4), [8507])
	if ( $5 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$7 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)-5001621371260764160, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $23($4, $7) + [32]) == (int_32)$4), [8507])
	goto $label$6 
	
.LABEL $label$7
	$2 = *($0)
	*($3 + [8]) = ($3 + [16])
	CALL $24($3, $4, $2, ($3 + [8]))
	
.LABEL $label$6
	$2 = *($3 + [24])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$global$0 = ($3 + [32])
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $73($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = (int_64)0
	*($4 + [160]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8581])
	CALL memcpy(($4 + [160]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8581])
	CALL memcpy((($4 + [160]) + [8]), ($2 + [8]), [8])
	*(($4 + [28])) = ($2 + [16])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [168])
	$1 = *($4 + [160])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $76($2)
	
.LABEL $label$5
	CALL $19(($4 + [8]))
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $2($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8360])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8360])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $38(CALL $37($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)-3075276114268356609) ){ goto $label$8 }
	if ( ((int_64)$2 > (int_64)-4352380133890326529) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4420680149753659392) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4417057971914563072) ){ goto $label$1 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [1]
	*($3 + [16]) = *($3 + [104])
	CALL $7($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 > (int_64)4921565079708631039) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-3075276114268356608) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)4921564679018381312) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [2]
	*($3 + [48]) = *($3 + [72])
	CALL $9($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-4352380133890326528) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-3075276115343136880) ){ goto $label$1 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [3]
	*($3 + [40]) = *($3 + [80])
	CALL $7($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)4921565079708631040) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)8421049960203129232) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [4]
	*($3) = *($3 + [120])
	CALL $12($1, $1, $3)
	goto $label$1 
	
.LABEL $label$5
	*($3 + [100]) = [0]
	*($3 + [96]) = [5]
	*($3 + [24]) = *($3 + [96])
	CALL $14($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [92]) = [0]
	*($3 + [88]) = [6]
	*($3 + [32]) = *($3 + [88])
	CALL $16($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [116]) = [0]
	*($3 + [112]) = [7]
	*($3 + [8]) = *($3 + [112])
	CALL $9($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [68]) = [0]
	*($3 + [64]) = [8]
	*($3 + [56]) = *($3 + [64])
	CALL $9($1, $1, ($3 + [56]))
	
.LABEL $label$1
	CALL $69([0])
	$global$0 = ($3 + [128])
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $67($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8360])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8360])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8360])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8360])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $52(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	*((($4 + [8]) + [24])) = *(($2 + [8]))
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = *($2)
	$3 = CALL $63((($4 + [8]) + [32]), $3)
	*($4 + [64]) = (int_64)-3617168760277827584
	*($4 + [56]) = (int_64)6138663591592764928
	*(($2 = CALL _Znwj([16]))) = $0
	*($2 + [8]) = (int_64)3617214756542218240
	*((($4 + [56]) + [36])) = [0]
	$5 = ($2 + [16])
	*((($4 + [56]) + [24])) = $5
	*(($4 + [76])) = $5
	*($4 + [72]) = $2
	*($4 + [84 align=4]) = (int_64)0
	$2 = *($3)
	$3 = ( *((($4 + [8]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($3 + [32])
	$0 = (CASTING uint_64)(uint_32 $3)
	$3 = ($4 + [84])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$1 }
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $2($3, $2)
	$3 = *(($4 + [88]))
	$2 = *(($4 + [84]))
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	$2 = [0]
	
.LABEL $label$2
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = $3
	*($4 + [112]) = ($4 + [96])
	*($4 + [120]) = ($4 + [8])
	CALL $3(($4 + [120]), ($4 + [112]))
	CALL $4(($4 + [96]), ($4 + [56]))
	$2 = *($4 + [96])
	CALL send_inline($2, (*($4 + [100]) - $2))
	$2 = *($4 + [96])
	if ( ($2 == 0) ){ goto $label$4 }
	*($4 + [100]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$2 = *($4 + [84])
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [88])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$2 = *($4 + [72])
	if ( ($2 == 0) ){ goto $label$6 }
	*(($4 + [76])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$7
	$global$0 = ($4 + [128])
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$3 = ($global$0 - [448])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $73($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [264]))) = (int_64)0
	*(($8 = (($4 + [232]) + [48]))) = (int_64)0
	*(($9 = (($4 + [232]) + [64]))) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [232]) = [0]
	*($4 + [248]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [272]) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [220]) = $2
	*($4 + [216]) = $2
	*($4 + [224]) = ($2 + $7)
	*($4 + [432]) = ($4 + [216])
	*($4 + [64]) = ($4 + [232])
	CALL $25(($4 + [64]), ($4 + [432]))
	*(($10 = (($4 + [48]) + [8]))) = *($4 + [224])
	*($4 + [48]) = *($4 + [216])
	$10 = *($10)
	*((($4 + [400]) + [8])) = $10
	*(($11 = (($4 + [416]) + [8]))) = $10
	$12 = *($4 + [48])
	*($4 + [416]) = $12
	*($4 + [400]) = $12
	$10 = *($11)
	*((($4 + [432]) + [8])) = $10
	*(($4 + [88])) = $10
	*($4 + [64]) = $0
	*($4 + [72]) = $1
	$1 = *($4 + [416])
	*($4 + [80]) = $1
	*($4 + [432]) = $1
	*(($4 + [104])) = $0
	*((($4 + [64]) + [48])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*((($4 + [64]) + [64])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($10 = (($4 + [336]) + [8]))) = *($3)
	*(($3 = (($4 + [320]) + [8]))) = *($8)
	*(($8 = (($4 + [304]) + [8]))) = *($9)
	*($4 + [336]) = *($4 + [256])
	*($4 + [320]) = *($4 + [272])
	*($4 + [304]) = *($4 + [288])
	$0 = *($4 + [248])
	$1 = *($4 + [240])
	$9 = *($4 + [232])
	*((($4 + [384]) + [8])) = *($8)
	*((($4 + [368]) + [8])) = *($3)
	*((($4 + [352]) + [8])) = *($10)
	*($4 + [384]) = *($4 + [304])
	*($4 + [368]) = *($4 + [320])
	*($4 + [352]) = *($4 + [336])
	$3 = (($4 + [64]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$12 = *((($4 + [352]) + [8]))
	*((($4 + [432]) + [8])) = $12
	$13 = *((($4 + [368]) + [8]))
	*((($4 + [416]) + [8])) = $13
	$14 = *((($4 + [384]) + [8]))
	*((($4 + [400]) + [8])) = $14
	*((($4 + [32]) + [8])) = $12
	*((($4 + [16]) + [8])) = $13
	*(($4 + [8])) = $14
	$12 = *($4 + [352])
	*($4 + [432]) = $12
	$13 = *($4 + [368])
	*($4 + [416]) = $13
	*($4 + [32]) = $12
	*($4 + [16]) = $13
	$12 = *($4 + [384])
	*($4) = $12
	*($4 + [400]) = $12
	CALL void $3((int_32 $9), (int_32 $1), (int_64 $0), (int_64 ($4 + [32])), (int_32 ($4 + [16])), (int_32 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $76($2)
	
.LABEL $label$5
	CALL $19(($4 + [64]))
	$global$0 = ($4 + [448])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	CALL require_auth(*($0))
	$4 = ($0 + [112])
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($6 + [-24])
	$7 = *($2)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$6 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$4), [8507])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$2 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)-5001621371260764160, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $23($4, $2)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$4), [8507])
	
.LABEL $label$1
	$2 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($2, [9275])
	$8 = *($0)
	*($3 + [8]) = ($3 + [12])
	CALL eosio_assert($2, [8913])
	CALL $32($4, $7, $8, ($3 + [8]))
	CALL require_recipient($1)
	$global$0 = ($3 + [16])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $73($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = [0]
	*($4 + [160]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8581])
	CALL memcpy(($4 + [160]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[8]), [8581])
	CALL memcpy((($4 + [160]) + [8]), ($2 + [8]), [4])
	*(($4 + [28])) = ($2 + [12])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [168])
	$0 = *($4 + [160])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $76($2)
	
.LABEL $label$5
	CALL $19(($4 + [8]))
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = $1
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$6($1), [8452])
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$3), [8507])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $20($3, $6)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$3), [8507])
	
.LABEL $label$1
	CALL eosio_assert(($7 == 0), [8480])
	$1 = *($0)
	*($2 + [16]) = ($2 + [24])
	CALL $21(($2 + [8]), $3, $1, ($2 + [16]))
	CALL require_recipient(*($2 + [24]))
	$global$0 = ($2 + [32])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = $2
	CALL require_auth(*($0))
	$4 = ($0 + [112])
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [8507])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)-5001621371260764160, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $23($4, $7)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [8507])
	
.LABEL $label$1
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [9275])
	if ( (int_64)($2 == 0) ){ goto $label$5 }
	CALL eosio_assert(CALL $fimport$6($2), [9299])
	CALL $33($4, $2, [9322])
	CALL require_recipient($2)
	
.LABEL $label$5
	$2 = *($0)
	*($3) = ($3 + [8])
	CALL eosio_assert($7, [8913])
	CALL $34($4, $8, $2, $3)
	CALL require_recipient($1)
	$global$0 = ($3 + [16])
}

void .FUNC $11 (int_32 $0)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $73($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [28])) = $2
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $76($2)
	
.LABEL $label$5
	CALL $19(($4 + [8]))
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$7 = ($global$0 - [144])
	$global$0 = $7
	*($7 + [136]) = $3
	*($7 + [132]) = $1
	CALL require_auth($2)
	CALL eosio_assert(($1 <= [3]), [9104])
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$4 }
	$8 = [0]
	$9 = *([0] + [8356])
	
.LOOP $label$6:
	*((($7 + [32]) + ($1 = $8))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$1 == (int_32)[12]) )))))
	$8 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[11]) ){ goto $label$5 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($7 + [112])) = [0]
	*($7 + [104]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$3 }
	*($7 + [104]) = ($8 << [1])
	$9 = (($7 + [104]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($7 + [112])) = [0]
	*($7 + [104]) = (int_64)0
	*($7 + [104]) = [0]
	$1 = (($7 + [104]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($7 + [104]) = ($10 | [1])
	*($7 + [112]) = $9
	*($7 + [108]) = $8
	
.LABEL $label$2
	$10 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$7:
	*(($9 + $1)) = *((($7 + [32]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$7 }
	$1 = ($9 + $8)
	
.LABEL $label$1
	*($1) = [0]
	$1 = CALL $66(($7 + [104]), [0], [9123])
	$8 = ($1 + [8])
	*((($7 + [120]) + [8])) = *($8)
	*($7 + [120]) = *($1)
	*($1) = (int_64)0
	*($8) = [0]
	if ( ((*($7 + [104]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($7 + [112]))
	
.LABEL $label$8
	*(($8 = (($7 + [88]) + [8]))) = *(($6 + [8]))
	*($7 + [88]) = *($6)
	$3 = *($0)
	$1 = CALL $63(($7 + [72]), ($7 + [120]))
	*((($7 + [8]) + [8])) = *($8)
	*($7 + [8]) = *($7 + [88])
	CALL $1($2, $3, ($7 + [8]), $1)
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$9
	$3 = *($7 + [136])
	CALL eosio_assert(CALL $fimport$6($3), [9140])
	*($7 + [104]) = (int_64)0
	*($7 + [64]) = (int_64)0
	$11 = ($0 + [72])
	$8 = *(($0 + [100]))
	$10 = *(($0 + [96]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$15 }
	
.LOOP $label$17:
	$1 = ($8 + [-24])
	$9 = *($1)
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$16 }
	$8 = $1
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$11), [8507])
	goto $label$14 
	
.LABEL $label$15
	$8 = [0]
	$1 = CALL db_find_i64(*($11), *(($0 + [80])), (int_64)-3020371635640205312, $3)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$13 }
	$9 = CALL $20($11, $1)
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$11), [8507])
	
.LABEL $label$14
	*($7 + [64]) = *($9 + [8])
	$10 = *([0] + [8192])
	$1 = *($9 + [64])
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$19 }
	if ( ((int_32)$10 >= (int_32)$1) ){ goto $label$19 }
	*($7 + [104]) = (int_64)0
	$12 = [1]
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$18 }
	goto $label$12 
	
.LABEL $label$19
	*($7 + [104]) = ((int_64)*($6) * (int_64)*((($1 << [2]) + [8304])))
	$12 = [1]
	if ( ((int_32)$10 >= (int_32)[1]) ){ goto $label$12 }
	
.LABEL $label$18
	$8 = [0]
	goto $label$11 
	
.LABEL $label$13
	$9 = *([0] + [8192])
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$20 }
	$3 = *($4)
	$8 = [0]
	$1 = [8208]
	
.LOOP $label$21:
	if ( ((uint_64)((int_64)*($1) * (int_64)10000) > (uint_64)$3) ){ goto $label$20 }
	$1 = ($1 + [8])
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)$9) ){ goto $label$21 }
	
.LABEL $label$20
	*($7 + [60]) = $8
	$3 = *($0)
	*($7 + [40]) = $4
	*($7 + [44]) = $5
	*($7 + [48]) = $6
	*($7 + [36]) = ($7 + [64])
	*($7 + [32]) = ($7 + [136])
	*($7 + [52]) = ($7 + [60])
	CALL $26(($7 + [24]), $11, $3, ($7 + [32]))
	goto $label$10 
	
.LABEL $label$12
	$3 = ((int_64)*($4) + (int_64)*($9 + [16]))
	$8 = [0]
	$1 = [8208]
	
.LOOP $label$22:
	if ( ((uint_64)((int_64)*($1) * (int_64)10000) > (uint_64)$3) ){ goto $label$11 }
	$1 = ($1 + [8])
	$8 = ($8 + $12)
	if ( ((int_32)$8 < (int_32)$10) ){ goto $label$22 }
	
.LABEL $label$11
	*($7 + [24]) = $8
	$3 = *($0)
	*($7 + [36]) = $6
	*($7 + [32]) = $4
	*($7 + [40]) = $5
	*($7 + [44]) = ($7 + [24])
	*($7 + [48]) = ($7 + [104])
	CALL eosio_assert($12, [8913])
	CALL $27($11, $9, $3, ($7 + [32]))
	
.LABEL $label$10
	$12 = ($0 + [112])
	$3 = *($7 + [64])
	$8 = *(($0 + [140]))
	$10 = *(($0 + [136]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$25 }
	
.LOOP $label$27:
	$1 = ($8 + [-24])
	$9 = *($1)
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$26 }
	$8 = $1
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$25 }
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$12), [8507])
	goto $label$24 
	
.LABEL $label$25
	$1 = CALL db_find_i64(*($12), *(($0 + [120])), (int_64)-5001621371260764160, $3)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$23 }
	$9 = CALL $23($12, $1)
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$12), [8507])
	
.LABEL $label$24
	$3 = ((int_64)*($6) * (int_64)*($9 + [8]))
	*($7 + [32]) = $3
	*($7 + [104]) = ((int_64)*($7 + [104]) + (int_64)$3)
	$3 = *($0)
	*($7 + [24]) = ($7 + [32])
	CALL eosio_assert([1], [8913])
	CALL $28($12, $9, $3, ($7 + [24]))
	
.LABEL $label$23
	$12 = ($0 + [32])
	$3 = *($7 + [132])
	$8 = *(($0 + [60]))
	$10 = *(($0 + [56]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$32 }
	
.LOOP $label$34:
	$1 = ($8 + [-24])
	$9 = *($1)
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$33 }
	$8 = $1
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$32 }
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)$12), [8507])
	goto $label$31 
	
.LABEL $label$32
	$1 = CALL db_find_i64(*($12), *(($0 + [40])), (int_64)-3660748247211412992, $3)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$30 }
	$9 = CALL $29($12, $1)
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)$12), [8507])
	
.LABEL $label$31
	$3 = *($0)
	*($7 + [36]) = $5
	*($7 + [32]) = $4
	*($7 + [40]) = $6
	*($7 + [44]) = ($7 + [104])
	CALL eosio_assert([1], [8913])
	CALL $30($12, $9, $3, ($7 + [32]))
	if ( ((*($7 + [120]) & [1]) == 0) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$30
	$3 = *($0)
	*($7 + [36]) = $4
	*($7 + [40]) = $5
	*($7 + [44]) = $6
	*($7 + [32]) = ($7 + [132])
	*($7 + [48]) = ($7 + [104])
	CALL $31(($7 + [64]), $12, $3, ($7 + [32]))
	if ( ((*($7 + [120]) & [1]) == 0) ){ goto $label$28 }
	
.LABEL $label$29
	CALL _ZdlPv(*($7 + [128]))
	
.LABEL $label$28
	$global$0 = ($7 + [144])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8948])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [8994])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)((int_64)*(*($3)) * (int_64)-10000))
	$5 = *($1)
	CALL eosio_assert([1], [9045])
	CALL eosio_assert([1], [8360])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8360])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	CALL eosio_assert([1], [8360])
	CALL memcpy(($4 | [12]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8360])
	CALL memcpy(($4 + [20]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [28])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8360])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8360])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8360])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8948])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [8994])
	*($1 + [24]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [9045])
	CALL eosio_assert([1], [8360])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8360])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	CALL eosio_assert([1], [8360])
	CALL memcpy(($4 | [12]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8360])
	CALL memcpy(($4 + [20]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [28])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [8948])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [8994])
	*($1 + [72]) = ((int_64)*($1 + [72]) + (int_64)((int_64)*(*($3)) * (int_64)-10000))
	$5 = *($1)
	CALL eosio_assert([1], [9045])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $40(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8948])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [8994])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [9045])
	CALL eosio_assert([1], [8360])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8360])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	CALL eosio_assert([1], [8360])
	CALL memcpy(($4 | [12]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8360])
	CALL memcpy(($4 + [20]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [28])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $33 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$0), [8507])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5001621371260764160, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $23($0, $4)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$0), [8507])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [8948])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [8994])
	$5 = *($1)
	CALL $51($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9045])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $47(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, [72])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$9()), [8586])
	*(($5 = CALL _Znwj([88])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [72]) = $1
	*($5 + [8]) = (int_64)1
	*($5) = *(*($3))
	$6 = *($3 + [4])
	*($5 + [24]) = *(($6 + [8]))
	*($5 + [16]) = *($6)
	$6 = *($3 + [8])
	*($5 + [40]) = *(($6 + [8]))
	*($5 + [32]) = *($6)
	$6 = *($3 + [12])
	*($5 + [56]) = *(($6 + [8]))
	*($5 + [48]) = *($6)
	*($5 + [64]) = *(*($3 + [16]))
	*($4 + [104]) = (($4 + [16]) + [72])
	*($4 + [100]) = ($4 + [16])
	*($4 + [96]) = ($4 + [16])
	CALL $47(($4 + [96]), $5)
	$7 = *($5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-3660748247211412992, $2, $7, ($4 + [16]), [72])
	*($5 + [76]) = $6
	if ( (uint_64)($7 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = $5
	$7 = *($5)
	*($4 + [16]) = $7
	*($4 + [12]) = $6
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $7
	*($3 + [16]) = $6
	*($4 + [96]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $48(($1 + [24]), ($4 + [96]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $71(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9392])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $71(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8581])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [56])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8581])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8360])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8360])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8360])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8360])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8581])
	CALL memcpy(($3 + [40]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8581])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($3 + [48])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8581])
	CALL memcpy(($0 + [56]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [8581])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [64])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $73($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9392])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $73($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $76($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}