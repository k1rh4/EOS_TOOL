(data (i32.const 8192) "0123456789\00")
(data (i32.const 8203) "eosgfoxtoken\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8302) "guessfoxteam\00")
(data (i32.const 8315) "EOS\00")
(data (i32.const 8319) "FOX\00")
(data (i32.const 16756) "only lock for game token\00")
(data (i32.const 16781) "only issue for game token\00")
(data (i32.const 16807) "active\00")
(data (i32.const 16814) "only send for game token\00")
(data (i32.const 16839) "eosio.stake\00")
(data (i32.const 16851) "deposit\00")
(data (i32.const 16859) "auto savings\00")
(data (i32.const 16872) "Contract not activated\00")
(data (i32.const 16895) "only EOS or FOX token allowed\00")
(data (i32.const 16925) "quantity invalid\00")
(data (i32.const 16942) "quantity must be greater than 0.0001\00")
(data (i32.const 16979) "mine\00")
(data (i32.const 16984) "memo for mine token is incorrect\00")
(data (i32.const 17017) "player does not exist\00")
(data (i32.const 17039) "inviter can\'t be self\00")
(data (i32.const 17061) "referal does not exist\00")
(data (i32.const 17084) "unkown action type\00")
(data (i32.const 17103) "only unstake for game token\00")
(data (i32.const 17131) "unstake quantity must be greater than 0.1\00")
(data (i32.const 17173) "Unable to find this account\00")
(data (i32.const 17201) "The staked time is not over and the amount is greater than unstake amount\00")
(data (i32.const 17275) "The unstake amount cannot be greater than the staked amount\00")
(data (i32.const 17335) "The balance of contract not enough, unable to unstake tokens\00")
(data (i32.const 17396) "unstake tokens\00")
(data (i32.const 17411) "no token staked\00")
(data (i32.const 17427) "The balance of contract not enough, unable to withdraw\00")
(data (i32.const 17482) "eosio.token\00")
(data (i32.const 17494) "FOX token dividend.\00")
(data (i32.const 17514) "transfer\00")
(data (i32.const 17523) "string is too long to be a valid symbol_code\00")
(data (i32.const 17568) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 17621) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17670) "invalid symbol name\00")
(data (i32.const 17690) "string is too long to be a valid name\00")
(data (i32.const 17728) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17795) "character is not in allowed character set for names\00")
(data (i32.const 17847) "divide by zero\00")
(data (i32.const 17862) "signed division overflow\00")
(data (i32.const 17887) "multiplication overflow\00")
(data (i32.const 17911) "multiplication underflow\00")
(data (i32.const 17936) "attempt to add asset with different symbol\00")
(data (i32.const 17979) "addition underflow\00")
(data (i32.const 17998) "addition overflow\00")
(data (i32.const 18016) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 18075) "attempt to subtract asset with different symbol\00")
(data (i32.const 18123) "subtraction underflow\00")
(data (i32.const 18145) "subtraction overflow\00")
(data (i32.const 18166) "unable to find key\00")
(data (i32.const 18185) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18236) "error reading iterator\00")
(data (i32.const 18259) "read\00")
(data (i32.const 18264) "get\00")
(data (i32.const 18268) "singleton does not exist\00")
(data (i32.const 18293) "cannot pass end iterator to modify\00")
(data (i32.const 18328) "object passed to modify is not in multi_index\00")
(data (i32.const 18374) "cannot modify objects in table of another contract\00")
(data (i32.const 18425) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18484) "write\00")
(data (i32.const 18490) "cannot create objects in table of another contract\00")
(data (i32.const 18541) "cannot pass end iterator to erase\00")
(data (i32.const 18575) "cannot increment end iterator\00")
(data (i32.const 18605) "object passed to erase is not in multi_index\00")
(data (i32.const 18650) "cannot erase objects in table of another contract\00")
(data (i32.const 18700) "attempt to remove object that was not in multi_index\00")
(import "env" "db_find_i64" (func $fimport$0 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memcpy" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "__multi3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "is_account" (func $fimport$9 (param i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "__udivti3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "require_recipient" (func $fimport$13 (param i64)))
(import "env" "eosio_exit" (func $fimport$14 (param i32)))
(import "env" "action_data_size" (func $fimport$15 (result i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$18 (param i32)))
(import "env" "send_inline" (func $fimport$19 (param i32 i32)))
(import "env" "abort" (func $fimport$20))
(import "env" "memset" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$23 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$34 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$35 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$38 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$40 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$41 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$42 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $49))
(export "_ZdlPv" (func $79))
(export "_Znwj" (func $77))
(export "_Znaj" (func $78))
(export "_ZdaPv" (func $80))
(export "_ZnwjSt11align_val_t" (func $81))
(export "_ZnajSt11align_val_t" (func $82))
(export "_ZdlPvSt11align_val_t" (func $83))
(export "_ZdaPvSt11align_val_t" (func $84))
(table $0 11 11 anyfunc)
(elem (i32.const 1) $26 $10 $15 $45 $16 $17 $40 $37 $38 $13)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18753))
(global $global$2 i32 (i32.const 18753))


int_32 .FUNC $98 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $95())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $99($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $100($1)
	
.LABEL $label$2
	*(CALL $95()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $100(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $103($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $94 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $95 ()
{
	return [8344]
}

int_32 .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $97 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $97($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $88($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $88($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $91($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $96(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $38 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL require_auth($1)
	$4 = *($2)
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$2 }
	$5 = CALL $97([8319])
	if ( ($5 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [17523])
	goto $label$5 
	
.LABEL $label$6
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$4 = (int_64)0
	
.LOOP $label$7:
	$6 = *(($5 + [8318]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$8
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$7 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	$4 = *($2)
	goto $label$3 
	
.LABEL $label$4
	$7 = (int_64)4
	
.LABEL $label$3
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$7), [17103])
	CALL eosio_assert(((int_64)$4 > (int_64)999), [17131])
	$8 = ($0 + [280])
	$6 = *(($0 + [308]))
	$9 = *(($0 + [304]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$12:
	$5 = ($6 + [-24])
	$10 = *($5)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$11 }
	$6 = $5
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($10 + [152]) == (int_32)$8), [18185])
	goto $label$9 
	
.LABEL $label$10
	$5 = CALL db_find_i64(*($8), *(($0 + [288])), (int_64)-6030912133304782848, $1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$13 }
	$10 = CALL $11($8, $5)
	CALL eosio_assert(((int_32)*($10 + [152]) == (int_32)$8), [18185])
	goto $label$9 
	
.LABEL $label$13
	$10 = [0]
	
.LABEL $label$9
	*($3 + [140]) = $10
	*($3 + [136]) = $8
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [17173])
	$4 = CALL current_time()
	*($3 + [128]) = $4
	$7 = *($2)
	if ( ((uint_64)$4 >= (uint_64)*($10 + [88])) ){ goto $label$15 }
	CALL eosio_assert(((int_64)$7 <= (int_64)*($10 + [40])), [17201])
	goto $label$14 
	
.LABEL $label$15
	CALL eosio_assert(((int_64)$7 <= (int_64)((int_64)*($10 + [40]) + (int_64)*($10 + [24]))), [17275])
	
.LABEL $label$14
	CALL $19(($3 + [112]), $0)
	$5 = ($2 + [8])
	CALL eosio_assert(((int_64)*($5) == (int_64)*($3 + [120])), [18016])
	CALL eosio_assert(((int_64)*($2) <= (int_64)*($3 + [112])), [17335])
	*((($3 + [80]) + [8])) = [0]
	*((($3 + [96]) + [8])) = *($5)
	*($3 + [80]) = (int_64)0
	*($3 + [96]) = *($2)
	$5 = CALL $97([17396])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$18 }
	*($3 + [80]) = ($5 << [1])
	$6 = (($3 + [80]) | [1])
	if ( $5 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$10 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($3 + [80]) = ($10 | [1])
	*($3 + [88]) = $6
	*($3 + [84]) = $5
	
.LABEL $label$17
	CALL memcpy($6, [17396], $5)
	
.LABEL $label$16
	*(($6 + $5)) = [0]
	*((($3 + [24]) + [8])) = *((($3 + [96]) + [8]))
	*($3 + [24]) = *($3 + [96])
	CALL $25($0, $1, ($3 + [24]), ($3 + [80]))
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($3 + [88]))
	
.LABEL $label$19
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*((($3 + [112]) + [8]))), [18075])
	$4 = *($2)
	$1 = (int_64)
	CALL eosio_assert(((int_64)$1(*($3 + [112]) - $4)) > (int_64)-4611686018427387904), [18123])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [18145])
	CALL __multi3(($3 + [8]), *(($0 + [208])), *(($0 + [216])), $4, (int_64)$4 >> (int_64)63))
	*($3 + [72]) = *((($3 + [8]) + [8]))
	*($3 + [64]) = *($3 + [8])
	$4 = *($0)
	$5 = *($3 + [140])
	*($3 + [44]) = $0
	*($3 + [56]) = $2
	*($3 + [40]) = ($3 + [64])
	*($3 + [48]) = ($3 + [128])
	*($3 + [52]) = ($3 + [136])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18293])
	CALL $39($8, $5, $4, ($3 + [40]))
	
.LABEL $label$2
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$1
	CALL $85(($3 + [80]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL memory()
	*($3 + [224]) = [17482]
	*($3 + [228]) = CALL $97([17482])
	*($3 + [104]) = *($3 + [224])
	CALL $5(($3 + [232]), ($3 + [104]))
	$4 = [0]
	if ( ((int_64)$1 == (int_64)6138663591592764928) ){ goto $label$2 }
	*($3 + [208]) = [8203]
	*($3 + [212]) = CALL $97([8203])
	*($3 + [96]) = *($3 + [208])
	CALL $5(($3 + [216]), ($3 + [96]))
	$4 = [1]
	if ( ((int_64)$1 != (int_64)6138623805249295664) ){ goto $label$1 }
	
.LABEL $label$2
	*($3 + [192]) = [17514]
	*($3 + [196]) = CALL $97([17514])
	*($3 + [88]) = *($3 + [192])
	CALL $5(($3 + [200]), ($3 + [88]))
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	
.LABEL $label$3
	*($3 + [188]) = [0]
	*($3 + [184]) = [1]
	*($3 + [80]) = *($3 + [184])
	CALL $50($0, $1, ($3 + [80]))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$10 }
	if ( ((int_64)$2 <= (int_64)-3106564262521035265) ){ goto $label$13 }
	if ( ((int_64)$2 <= (int_64)-3066762336131497985) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-3066762336131497984) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)6182744098496053248) ){ goto $label$10 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [2]
	*($3 + [40]) = *($3 + [144])
	CALL $51($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$13
	if ( ((int_64)$2 > (int_64)-4417158075762043905) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-5003315193367756800) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4417357895863107584) ){ goto $label$10 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [3]
	*($3 + [32]) = *($3 + [152])
	CALL $52($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-3106564262521035264) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-3075276121649217536) ){ goto $label$10 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [4]
	*($3 + [72]) = *($3 + [112])
	CALL $53($1, $1, ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-4417158075762043904) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4417143596590661632) ){ goto $label$10 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [5]
	*($3 + [24]) = *($3 + [160])
	CALL $54($1, $1, ($3 + [24]))
	
.LABEL $label$10
	CALL eosio_exit([0])
	
.LABEL $label$9
	*($3 + [172]) = [0]
	*($3 + [168]) = [6]
	*($3 + [16]) = *($3 + [168])
	CALL $55($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$8
	*($3 + [132]) = [0]
	*($3 + [128]) = [7]
	*($3 + [56]) = *($3 + [128])
	CALL $53($1, $1, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$7
	*($3 + [124]) = [0]
	*($3 + [120]) = [8]
	*($3 + [64]) = *($3 + [120])
	CALL $56($1, $1, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [140]) = [0]
	*($3 + [136]) = [9]
	*($3 + [48]) = *($3 + [136])
	CALL $55($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [180]) = [0]
	*($3 + [176]) = [10]
	*($3 + [8]) = *($3 + [176])
	CALL $51($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $94($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [16]) = [17482]
	*($2 + [20]) = CALL $97([17482])
	*($2 + [8]) = *($2 + [16])
	$3 = *(CALL $5(($2 + [24]), ($2 + [8])))
	$4 = *($1)
	$1 = CALL $97([8315])
	if ( ($1 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17523])
	goto $label$3 
	
.LABEL $label$4
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($1 + [8314]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LABEL $label$1
	*(($2 + [56])) = [0]
	*($2 + [32]) = $4
	*($2 + [24]) = $3
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$1 = CALL $36(($2 + [24]), $5, [18166])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$0 = *($2 + [48])
	if ( ($0 == 0) ){ goto $label$7 }
	$7 = ($2 + [52])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$10 }
	$1 = *(($2 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$1 = $0
	
.LABEL $label$8
	*($7) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($2 + [64])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [18328])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18374])
	$5 = *($1)
	$6 = CALL $97([8315])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17523])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8314]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert([1], [17621])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $10
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [17670])
	*(($11 = ($1 + [16]))) = $9
	*($1 + [8]) = (int_64)0
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [18425])
	$6 = $3
	$8 = ($6 + [-32])
	$global$0 = $8
	CALL eosio_assert([1], [18484])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert([1], [18484])
	CALL memcpy(($6 + [-24]), ($1 + [8]), [8])
	*($4 + [8]) = *($11)
	CALL eosio_assert([1], [18484])
	CALL memcpy(($6 + [-16]), ($4 + [8]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $8, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($4 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = ($1 + [280])
	$6 = *(($1 + [308]))
	$5 = *(($1 + [304]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [152]) == (int_32)$4), [18185])
	goto $label$1 
	
.LABEL $label$2
	$8 = CALL $11($4, CALL $fimport$0(*($4), *(($1 + [288])), (int_64)-6030912133304782848, $2))
	CALL eosio_assert(((int_32)*($8 + [152]) == (int_32)$4), [18185])
	
.LABEL $label$1
	$2 = ((int_64)*($8 + [40]) + (int_64)*($8 + [24]))
	CALL __multi3(($3 + [16]), *(($1 + [208])), *(($1 + [216])), $2, (int_64)$2 >> (int_64)63))
	$9 = *($8 + [96])
	$2 = *($3 + [16])
	CALL __udivti3($3, (int_64))($2 - $9), (int_64))((int_64))(*((($3 + [16]) + [8])) - *(($8 + [104]))) - (CASTING uint_64)(uint_32 (uint_64)($2 <= $9))), (int_64)10000000000000, (int_64)0)
	$7 = CALL $97([8315])
	$9 = *($3)
	if ( ($7 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [17523])
	goto $label$7 
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = (int_64)0
	
.LOOP $label$9:
	$6 = *(($7 + [8314]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$10
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$5 
	
.LABEL $label$6
	$2 = (int_64)4
	
.LABEL $label$5
	*($0 + [8]) = $2
	*($0) = $9
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17621])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$9 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $9
	$6 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $9
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$8 = ($7 + [1])
	$7 = $8
	if ( $6 ){ goto $label$15 }
	$6 = [1]
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$6 = [0]
	
.LABEL $label$11
	CALL eosio_assert($6, [17670])
	$global$0 = ($3 + [32])
}

void .FUNC $40 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [176])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ($0 + [280])
	$5 = *(($0 + [308]))
	$4 = *(($0 + [304]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$3), [18185])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [288])), (int_64)-6030912133304782848, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $11($3, $6)
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$3), [18185])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [17173])
	$9 = *($7 + [24])
	CALL eosio_assert(((int_64)*(($7 + [48])) == (int_64)*(($7 + [32]))), [17936])
	$9 = ((int_64)$9 + (int_64)*($7 + [40]))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [17979])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [17998])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [17411])
	CALL $41(($2 + [96]), $0, $1)
	$10 = ($0 + [320])
	$5 = *(($0 + [348]))
	$11 = *(($0 + [344]))
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$9:
	$6 = ($5 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$8 }
	$5 = $6
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$10), [18185])
	goto $label$6 
	
.LABEL $label$7
	$6 = CALL db_find_i64(*($10), *(($0 + [328])), (int_64)-5001621657295519744, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $30($10, $6)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$10), [18185])
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*(($4 + [16])) == (int_64)*($2 + [104])), [17936])
	$9 = ((int_64)*($2 + [96]) + (int_64)*($4 + [8]))
	*($2 + [96]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [17979])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [17998])
	$9 = *($0)
	CALL eosio_assert([1], [18293])
	CALL $42($10, $4, $9)
	
.LABEL $label$5
	$9 = *($2 + [96])
	if ( ((int_64)$9 < (int_64)1) ){ goto $label$11 }
	CALL $43(($2 + [80]), $0)
	CALL eosio_assert(((int_64)$9 < (int_64)*($2 + [80])), [17427])
	*($2 + [48]) = [17482]
	*($2 + [52]) = CALL $97([17482])
	*($2 + [8]) = *($2 + [48])
	$9 = *(CALL $5(($2 + [112]), ($2 + [8])))
	$12 = *($0)
	*($2 + [48]) = [16807]
	*($2 + [52]) = CALL $97([16807])
	*($2) = *($2 + [48])
	*($2 + [56]) = *(CALL $5(($2 + [112]), $2))
	*($2 + [48]) = $12
	*(($6 = CALL _Znwj([16]))) = *($2 + [48])
	*(($6 + [8])) = *($2 + [56])
	*($2 + [64]) = $6
	$6 = ($6 + [16])
	*($2 + [72]) = $6
	*($2 + [68]) = $6
	*((($2 + [16]) + [8])) = [0]
	*($2 + [16]) = (int_64)0
	$6 = CALL $97([17494])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$14 }
	*($2 + [16]) = ($6 << [1])
	$5 = (($2 + [16]) | [1])
	if ( $6 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [16]) = ($4 | [1])
	*($2 + [24]) = $5
	*($2 + [20]) = $6
	
.LABEL $label$13
	CALL memcpy($5, [17494], $6)
	
.LABEL $label$12
	*(($5 + $6)) = [0]
	*(($6 = (($2 + [32]) + [8]))) = *((($2 + [96]) + [8]))
	*($2 + [32]) = *($2 + [96])
	$5 = *($2 + [24])
	*($2 + [24]) = [0]
	$12 = *($2 + [16])
	*($2 + [16]) = (int_64)0
	$13 = *($0)
	*(($11 = ($2 + [152]))) = $5
	$5 = (($2 + [64]) + [8])
	$4 = *($5)
	*($5) = [0]
	*(($2 + [136])) = *($6)
	*($2 + [112]) = $13
	*($2 + [120]) = $1
	*($2 + [144]) = $12
	*($2 + [160]) = *($2 + [64])
	*($2 + [168]) = $4
	*($2 + [64]) = (int_64)0
	*($2 + [128]) = *($2 + [32])
	CALL $24($9, (int_64)-3617168760277827584, ($2 + [160]), ($2 + [112]))
	if ( ((*($2 + [144]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$15
	$6 = *($2 + [160])
	if ( ($6 == 0) ){ goto $label$16 }
	*($2 + [164]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$16
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$17
	$1 = *($0)
	*($2 + [116]) = $0
	*($2 + [112]) = ($2 + [96])
	CALL eosio_assert($8, [18293])
	CALL $44($3, $7, $1, ($2 + [112]))
	
.LABEL $label$11
	$global$0 = ($2 + [176])
	return (unreachable)
	
.LABEL $label$10
	CALL $85(($2 + [16]))
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18236])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $100($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18259])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [18259])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [18259])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $48(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $103($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [18328])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18374])
	$5 = *($1)
	$6 = CALL $97([8315])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17523])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8314]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert([1], [17621])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $10
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [17670])
	*(($11 = ($1 + [16]))) = $9
	*($1 + [8]) = (int_64)0
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [18425])
	$6 = $3
	$8 = ($6 + [-32])
	$global$0 = $8
	CALL eosio_assert([1], [18484])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert([1], [18484])
	CALL memcpy(($6 + [-24]), ($1 + [8]), [8])
	*($4 + [8]) = *($11)
	CALL eosio_assert([1], [18484])
	CALL memcpy(($6 + [-16]), ($4 + [8]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $8, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($4 + [16])
}

void .FUNC $45 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = ($0 + [280])
	$5 = *(($0 + [308]))
	$4 = *(($0 + [304]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$3), [18185])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [288])), (int_64)-6030912133304782848, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $11($3, $6)
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$3), [18185])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [17173])
	$8 = *($7 + [24])
	CALL eosio_assert(((int_64)*(($7 + [48])) == (int_64)*(($7 + [32]))), [17936])
	$8 = ((int_64)$8 + (int_64)*($7 + [40]))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17979])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [17998])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [17411])
	CALL $41($2, $0, $1)
	$3 = ($0 + [320])
	$5 = *(($0 + [348]))
	$4 = *(($0 + [344]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$9:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$8 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [18185])
	goto $label$6 
	
.LABEL $label$7
	$6 = CALL db_find_i64(*($3), *(($0 + [328])), (int_64)-5001621657295519744, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $30($3, $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [18185])
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*(($7 + [16])) == (int_64)*($2 + [8])), [17936])
	$8 = ((int_64)*($2) + (int_64)*($7 + [8]))
	*($2) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17979])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [17998])
	$8 = *($0)
	CALL eosio_assert([1], [18293])
	CALL $46($3, $7, $8)
	
.LABEL $label$5
	$3 = ($0 + [360])
	$5 = *(($0 + [388]))
	$4 = *(($0 + [384]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$15:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$14 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [18185])
	goto $label$12 
	
.LABEL $label$13
	$5 = ($0 + [368])
	$6 = CALL db_find_i64(*($3), *($5), (int_64)5455799419163115520, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	$7 = CALL $47($3, $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [18185])
	
.LABEL $label$12
	$8 = *($0)
	CALL eosio_assert([1], [18293])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [18328])
	CALL eosio_assert(((int_64)*(($0 + [360])) == (int_64)CALL $fimport$8()), [18374])
	*($7 + [8]) = *($2)
	*(($6 = ($7 + [16]))) = *(($2 + [8]))
	$1 = *($7)
	CALL eosio_assert([1], [18425])
	CALL eosio_assert([1], [18484])
	CALL memcpy(($2 + [16]), $7, [8])
	CALL eosio_assert([1], [18484])
	CALL memcpy((($2 + [16]) | [8]), ($7 + [8]), [8])
	*($2 + [56]) = *($6)
	CALL eosio_assert([1], [18484])
	CALL memcpy((($2 + [16]) + [16]), ($2 + [56]), [8])
	CALL db_update_i64(*($7 + [28]), $8, ($2 + [16]), [24])
	$6 = ($0 + [376])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$10 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$11
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [360])) == (int_64)CALL $fimport$8()), [18490])
	*(($6 = CALL _Znwj([40])) + [24]) = $3
	*($6) = $1
	*($6 + [8]) = *($2)
	*($6 + [16]) = *(($2 + [8]))
	CALL eosio_assert([1], [18484])
	CALL memcpy(($2 + [16]), $6, [8])
	CALL eosio_assert([1], [18484])
	CALL memcpy((($2 + [16]) | [8]), ($6 + [8]), [8])
	*($2 + [56]) = *($6 + [16])
	CALL eosio_assert([1], [18484])
	CALL memcpy(($2 + [32]), ($2 + [56]), [8])
	$1 = *($6)
	$7 = CALL db_store_i64(*($5), (int_64)5455799419163115520, $8, $1, ($2 + [16]), [24])
	*($6 + [28]) = $7
	$5 = ($0 + [376])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$16 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($2 + [56]) = $6
	$1 = *($6)
	*($2 + [16]) = $1
	*($2 + [52]) = $7
	$4 = ($0 + [388])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [392]))) ){ goto $label$18 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($2 + [56]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $6 ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$18
	CALL $48(($0 + [384]), ($2 + [56]), ($2 + [16]), ($2 + [52]))
	$6 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	
.LABEL $label$17
	CALL _ZdlPv($6)
	
.LABEL $label$10
	$global$0 = ($2 + [64])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [18328])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18374])
	$6 = *($1)
	$7 = *($3)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [16]))), [17936])
	$8 = ((int_64)*($1 + [8]) + (int_64)*($7))
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17979])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [17998])
	$9 = *($1 + [96])
	$8 = ((int_64)$9 + (int_64)((int_64)*(*($3)) * (int_64)10000000000000))
	*($1 + [96]) = $8
	$9 = ((int_64)*($3) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($8 <= $9)))
	*(($3 = ($1 + [104]))) = $9
	if ( ((int_64)$9 <= (int_64)-1) ){ goto $label$1 }
	*($5 + [40]) = [0]
	*($5 + [32]) = (int_64)0
	CALL $89(($5 + [32]), [40])
	$10 = ($5 + [24])
	
.LOOP $label$2:
	CALL __udivti3(($5 + [16]), $8, $9, (int_64)10, (int_64)0)
	$12 = *($10)
	$11 = *($5 + [16])
	CALL __multi3($5, $11, $12, (int_64)10, (int_64)0)
	CALL $92(($5 + [32]), *((*([0]) + (CASTING uint_32)(uint_64 (int_64))($8 - *($5))))))
	$3 = ((uint_64)$8 > (uint_64)(int_64)9)
	$7 = ((int_64)$9 != (int_64)0)
	$13 = (int_64)($9 == 0)
	$8 = $11
	$9 = $12
	if ( ( $3 ? $7 : $13 ) ){ goto $label$2 }
	$3 = ($3 & [1])
	$3 = *($5 + [32])
	$7 = ( *($5 + [36]) ? uint_32($3 >> [1]) : $3 )
	if ( ($7 == 0) ){ goto $label$3 }
	$3 = ( *(($5 + [40])) ? (($5 + [32]) | [1]) : $3 )
	$7 = (($3 + $7) + [-1])
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$13 = *($3)
	*($3) = *($7)
	*($7) = $13
	$7 = ($7 + [-1])
	$3 = ($3 + [1])
	if ( ($3 <= $7) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = ($1 + [112])
	if ( (*($1 + [112]) & [1]) ){ goto $label$6 }
	*($3) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*(($1 + [120]))) = [0]
	*(($1 + [116])) = [0]
	
.LABEL $label$5
	CALL $89($3, [0])
	*(($3 + [8])) = *((($5 + [32]) + [8]))
	*($3) = *($5 + [32])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [18425])
	$3 = *(($1 + [112]))
	$7 = ( *(($1 + [116])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [136])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$7:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$7 }
	if ( ($3 <= [513]) ){ goto $label$9 }
	$7 = CALL $100($3)
	goto $label$8 
	
.LABEL $label$9
	$7 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$8
	*($5 + [36]) = $7
	*($5 + [32]) = $7
	*($5 + [40]) = ($7 + $3)
	CALL $71(($5 + [32]), $1)
	CALL db_update_i64(*(($1 + [156])), $2, $7, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$12 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $103($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$10 }
	
.LABEL $label$11
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$10
	$global$0 = ($5 + [48])
}

void .FUNC $8 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18328])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18374])
	$6 = *($3)
	$3 = CALL memcpy($1, $6, [144])
	CALL $87(($3 + [144]), ($6 + [144]))
	*($3 + [156]) = *($6 + [156])
	CALL eosio_assert([1], [18425])
	$1 = *($3 + [144])
	$6 = ( *(($3 + [148])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($6 + [135])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $100($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($4 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	*($5 + [4]) = $6
	*($5) = $6
	*($5 + [8]) = ($6 + $1)
	CALL $68($5, $3)
	CALL db_update_i64(*($3 + [164]), $2, $6, $1)
	if ( ((uint_32)$1 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)7235159537265672192) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $103($6)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = (int_64)7235159537265672193
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [18490])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([176])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [144 align=4]) = (int_64)0
	*($3 + [152]) = [0]
	*($3 + [160]) = $1
	CALL $67(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)7235159537265672192
	$5 = *($3 + [164])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $63(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [152])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $7(($0 + [32]), ($0 + [80]), *($0))
	$1 = *(($0 + [384]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [388])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [384]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [344]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [348])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [344]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [304]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [308])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($4 + [120])))
	
.LABEL $label$16
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [304]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [264]))
	if ( ($1 == 0) ){ goto $label$17 }
	$2 = ($0 + [268])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$19 }
	
.LOOP $label$20:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$21 }
	CALL _ZdlPv($4)
	
.LABEL $label$21
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$20 }
	$3 = *(($0 + [264]))
	goto $label$18 
	
.LABEL $label$19
	$3 = $1
	
.LABEL $label$18
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$17
	if ( ((*(($0 + [224])) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($0 + [232])))
	
.LABEL $label$22
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$23 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$25 }
	
.LOOP $label$26:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$27 }
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($4 + [152])))
	
.LABEL $label$28
	CALL _ZdlPv($4)
	
.LABEL $label$27
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$26 }
	$3 = *(($0 + [56]))
	goto $label$24 
	
.LABEL $label$25
	$3 = $1
	
.LABEL $label$24
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$23
	return $0
}

void .FUNC $7 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [160]) == (int_32)$0), [18185])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $2($0, $4)
	CALL eosio_assert(((int_32)*($4 + [160]) == (int_32)$0), [18185])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18293])
	CALL $8($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $9($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [144 align=4]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*(($0 + [152])) = [0]
	*($1 + [16]) = [8203]
	*($1 + [20]) = CALL $97([8203])
	*($1 + [8]) = *($1 + [16])
	*($0) = *(CALL $5(($1 + [24]), ($1 + [8])))
	*($1 + [16]) = [8302]
	*($1 + [20]) = CALL $97([8302])
	*($1) = *($1 + [16])
	*($0 + [8]) = *(CALL $5(($1 + [24]), $1))
	$3 = CALL $97([8315])
	if ( ($3 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [17523])
	goto $label$2 
	
.LABEL $label$3
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = (int_64)0
	
.LOOP $label$4:
	$5 = *(($3 + [8314]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$5
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$4 }
	$2 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$1
	CALL eosio_assert([1], [17621])
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_64)$2 | (int_64)4)
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $2
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $2
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$10 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [17670])
	*(($0 + [24])) = $6
	*(($0 + [16])) = (int_64)0
	$3 = CALL $97([8315])
	if ( ($3 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [17523])
	goto $label$13 
	
.LABEL $label$14
	if ( ($3 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$4 = (int_64)0
	
.LOOP $label$15:
	$5 = *(($3 + [8314]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$16
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$15 }
	$6 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$11 
	
.LABEL $label$12
	$6 = (int_64)4
	
.LABEL $label$11
	CALL eosio_assert([1], [17621])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$2 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$4 = $2
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$4 = $2
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$21 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$5 = [0]
	
.LABEL $label$17
	CALL eosio_assert($5, [17670])
	*(($0 + [40])) = $6
	*(($0 + [32])) = (int_64)0
	$3 = CALL $97([8315])
	if ( ($3 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [17523])
	goto $label$24 
	
.LABEL $label$25
	if ( ($3 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$4 = (int_64)0
	
.LOOP $label$26:
	$5 = *(($3 + [8314]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$27
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$26 }
	$6 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$22 
	
.LABEL $label$23
	$6 = (int_64)4
	
.LABEL $label$22
	CALL eosio_assert([1], [17621])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$2 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$4 = $2
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$4 = $2
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$32 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$5 = [0]
	
.LABEL $label$28
	CALL eosio_assert($5, [17670])
	*(($0 + [56])) = $6
	*(($0 + [48])) = (int_64)0
	$3 = CALL $97([8319])
	if ( ($3 <= [8]) ){ goto $label$36 }
	CALL eosio_assert([0], [17523])
	goto $label$35 
	
.LABEL $label$36
	if ( ($3 == 0) ){ goto $label$34 }
	
.LABEL $label$35
	$4 = (int_64)0
	
.LOOP $label$37:
	$5 = *(($3 + [8318]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$38 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$38
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$37 }
	$6 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$33 
	
.LABEL $label$34
	$6 = (int_64)4
	
.LABEL $label$33
	CALL eosio_assert([1], [17621])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$41:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$2 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$42 }
	$4 = $2
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$42
	$4 = $2
	
.LOOP $label$43:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$40 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$43 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$40
	$5 = [0]
	
.LABEL $label$39
	CALL eosio_assert($5, [17670])
	*(($0 + [72])) = $6
	*(($0 + [64])) = (int_64)0
	$3 = CALL $97([8315])
	if ( ($3 <= [8]) ){ goto $label$47 }
	CALL eosio_assert([0], [17523])
	goto $label$46 
	
.LABEL $label$47
	if ( ($3 == 0) ){ goto $label$45 }
	
.LABEL $label$46
	$4 = (int_64)0
	
.LOOP $label$48:
	$5 = *(($3 + [8314]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$49 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$49
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$48 }
	$6 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$44 
	
.LABEL $label$45
	$6 = (int_64)4
	
.LABEL $label$44
	CALL eosio_assert([1], [17621])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$52:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$51 }
	$2 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$53 }
	$4 = $2
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$53
	$4 = $2
	
.LOOP $label$54:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$51 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$54 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$51
	$5 = [0]
	
.LABEL $label$50
	CALL eosio_assert($5, [17670])
	*(($0 + [136])) = (int_64)0
	*($0 + [128]) = (int_64)0
	*(($0 + [88])) = $6
	*(($0 + [80])) = (int_64)0
	*($0 + [96]) = [84879400]
	*($0 + [100]) = [0]
	*($0 + [104]) = (int_64)0
	*($0 + [112]) = (int_64)0
	CALL $90(($0 + [144]), [8323])
	*($0 + [156]) = [0]
	$global$0 = ($1 + [32])
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [17690])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [17795])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17728])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17795])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18236])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $100($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([176])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [144 align=4]) = (int_64)0
	*($5 + [152]) = [0]
	*($5 + [160]) = $0
	CALL $62(($3 + [32]), $5)
	*($5 + [164]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $63(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $103($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [144]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [152])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *(($1 + [28]))
	if ( ((int_32)$2 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [160]) == (int_32)$1), [18185])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $2($1, $3)
	CALL eosio_assert(((int_32)*($2 + [160]) == (int_32)$1), [18185])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [18268])
	$1 = CALL memcpy($0, $2, [144])
	CALL $86(($1 + [144]), ($2 + [144]))
	*($1 + [156]) = *($2 + [156])
}

void .FUNC memory ()
{
}

int_32 .FUNC $1 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [176])
	$global$0 = $4
	*(($5 = (($4 + [160]) + [8]))) = *(($3 + [8]))
	*($4 + [160]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*(($4 + [8])) = $3
	$2 = *($4 + [160])
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4) = $2
	*(($0 + [40])) = $1
	*($0 + [32]) = $1
	*(($0 + [48])) = (int_64)-1
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = [0]
	*($0 + [80]) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = (int_64)0
	*(($0 + [128])) = (int_64)0
	*(($0 + [136])) = (int_64)0
	*(($0 + [144])) = (int_64)0
	*(($0 + [152])) = (int_64)0
	*(($0 + [160])) = (int_64)0
	*(($0 + [168])) = (int_64)0
	*(($0 + [224])) = [0]
	*($0 + [240]) = $1
	*(($0 + [228])) = (int_64)0
	*(($0 + [248])) = $1
	*(($0 + [256])) = (int_64)-1
	*(($0 + [264])) = (int_64)0
	*(($0 + [272])) = [0]
	*($0 + [280]) = $1
	*(($0 + [288])) = $1
	*(($0 + [296])) = (int_64)-1
	*(($0 + [304])) = (int_64)0
	*(($0 + [312])) = [0]
	*($0 + [320]) = $1
	*(($0 + [328])) = $1
	*(($0 + [336])) = (int_64)-1
	*(($0 + [344])) = (int_64)0
	*(($0 + [352])) = [0]
	*($0 + [360]) = $1
	*(($0 + [368])) = $1
	*(($0 + [376])) = (int_64)-1
	*(($0 + [384])) = (int_64)0
	*(($0 + [392])) = [0]
	$3 = ($0 + [80])
	$6 = CALL db_find_i64($1, $1, (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$5 = ($0 + [32])
	CALL eosio_assert(((int_32)*(CALL $2($5, $6) + [160]) == (int_32)$5), [18185])
	CALL $3($4, $5)
	goto $label$1 
	
.LABEL $label$2
	CALL $4($4)
	
.LABEL $label$1
	CALL memcpy($3, $4, [144])
	$5 = ($4 + [144])
	$3 = ($0 + [224])
	if ( (*($3) & [1]) ){ goto $label$4 }
	*($3) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [232]))) = [0]
	*(($0 + [228])) = [0]
	
.LABEL $label$3
	CALL $89($3, [0])
	*(($3 + [8])) = *(($5 + [8]))
	*($3) = *($5)
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($0 + [236])) = *($4 + [156])
	*([0]) = [8192]
	$global$0 = ($4 + [176])
	return $0
}

void .FUNC $14 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [18328])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18374])
	*($1 + [88]) = (int_64)0
	$5 = *($1)
	CALL eosio_assert([1], [18425])
	$6 = *($1 + [112])
	$7 = ( *(($1 + [116])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [136])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$3 = CALL $100($6)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($3 + $6)
	CALL $71($4, $1)
	CALL db_update_i64(*(($1 + [156])), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $103($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($4 + [16])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	*(($0 + [236])) = $1
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL require_auth(*($0))
	*(($0 + [177])) = $2
	*(($0 + [176])) = $1
	*(($0 + [178])) = $3
	*(($0 + [179])) = $4
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth(*($0))
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$1 }
	$4 = CALL $97([8319])
	if ( ($4 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [17523])
	goto $label$4 
	
.LABEL $label$5
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = (int_64)0
	
.LOOP $label$6:
	$6 = *(($4 + [8318]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$7
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$6 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$2 
	
.LABEL $label$3
	$5 = (int_64)4
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$5), [16756])
	$7 = *($2 + [8])
	*((($3 + [16]) + [8])) = $7
	$5 = *($2)
	*(($3 + [8])) = $7
	*($3) = $5
	*($3 + [16]) = $5
	CALL $18($0, $1, $3)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

void .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = CALL db_lowerbound_i64(*($0 + [280]), *(($0 + [288])), (int_64)-6030912133304782848, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [280])
	$2 = CALL $11($3, $2)
	
.LOOP $label$2:
	CALL eosio_assert([1], [18541])
	CALL eosio_assert([1], [18575])
	$0 = [0]
	$4 = CALL db_next_i64(*($2 + [156]), ($1 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $11($3, $4)
	
.LABEL $label$3
	CALL $12($3, $2)
	$2 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18236])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $100($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([176])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [112 align=4]) = (int_64)0
	*($5 + [120]) = [0]
	*($5 + [128]) = (int_64)0
	*($5 + [136]) = (int_64)0
	*($5 + [152]) = $0
	CALL $70(($3 + [32]), $5)
	*($5 + [156]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $22(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $103($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [112]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [120])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [18605])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18650])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18700])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [120])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [120])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [156])))
}

void .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = CALL db_lowerbound_i64(*($0 + [280]), *(($0 + [288])), (int_64)-6030912133304782848, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [280])
	$2 = CALL $11($3, $2)
	
.LOOP $label$2:
	$4 = *($0)
	CALL eosio_assert([1], [18293])
	CALL $14($3, $2, $4)
	CALL eosio_assert([1], [18575])
	$2 = CALL db_next_i64(*($2 + [156]), ($1 + [8]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = CALL $11($3, $2)
	goto $label$2 
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18484])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18484])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [128])
	$global$0 = $3
	*($3 + [80]) = $1
	$4 = *($2)
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$2 }
	$5 = CALL $97([8319])
	if ( ($5 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [17523])
	goto $label$5 
	
.LABEL $label$6
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$4 = (int_64)0
	
.LOOP $label$7:
	$6 = *(($5 + [8318]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$8
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$7 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	$4 = *($2)
	goto $label$3 
	
.LABEL $label$4
	$7 = (int_64)4
	
.LABEL $label$3
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$7), [16756])
	CALL $19(($3 + [64]), $0)
	CALL __multi3($3, *(($0 + [208])), *(($0 + [216])), $4, (int_64)$4 >> (int_64)63))
	*($3 + [56]) = *(($3 + [8]))
	*($3 + [48]) = *($3)
	*($3 + [40]) = CALL current_time()
	$8 = ($0 + [280])
	$6 = *(($0 + [308]))
	$9 = *(($0 + [304]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$13:
	$5 = ($6 + [-24])
	$10 = *($5)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$12 }
	$6 = $5
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($10 + [152]) == (int_32)$8), [18185])
	if ( $10 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$5 = CALL db_find_i64(*($8), *(($0 + [288])), (int_64)-6030912133304782848, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$10 = CALL $11($8, $5)
	CALL eosio_assert(((int_32)*($10 + [152]) == (int_32)$8), [18185])
	
.LABEL $label$10
	$4 = *($0)
	*($3 + [16]) = $2
	*($3 + [28]) = $0
	*($3 + [20]) = ($3 + [40])
	*($3 + [24]) = ($3 + [48])
	CALL eosio_assert([1], [18293])
	CALL $20($8, $10, $4, ($3 + [16]))
	$global$0 = ($3 + [128])
	return 
	
.LABEL $label$9
	$4 = *($0)
	*($3 + [20]) = $2
	*($3 + [32]) = $0
	*($3 + [16]) = ($3 + [80])
	*($3 + [24]) = ($3 + [40])
	*($3 + [28]) = ($3 + [48])
	*($3 + [120]) = $4
	CALL eosio_assert(((int_64)*(($0 + [280])) == (int_64)CALL $fimport$8()), [18490])
	*($3 + [96]) = $8
	*($3 + [100]) = ($3 + [16])
	*($3 + [104]) = ($3 + [120])
	*(($5 = CALL _Znwj([176])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [112 align=4]) = (int_64)0
	*($5 + [120]) = [0]
	*($5 + [128]) = (int_64)0
	*($5 + [136]) = (int_64)0
	*($5 + [152]) = $8
	CALL $21(($3 + [96]), $5)
	*($3 + [112]) = $5
	$4 = *($5)
	*($3 + [96]) = $4
	$10 = *($5 + [156])
	*($3 + [92]) = $10
	$9 = ($0 + [308])
	$6 = *($9)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [312]))) ){ goto $label$14 }
	*($6 + [8]) = $4
	*($6 + [16]) = $10
	*($3 + [112]) = [0]
	*($6) = $5
	*($9) = ($6 + [24])
	$5 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( ($5 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$14
	CALL $22(($0 + [304]), ($3 + [112]), ($3 + [96]), ($3 + [92]))
	$5 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( $5 ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($3 + [128])
	return 
	
.LABEL $label$1
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [120])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	$global$0 = ($3 + [128])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [16]) = [8203]
	*($2 + [20]) = CALL $97([8203])
	*($2 + [8]) = *($2 + [16])
	$3 = *(CALL $5(($2 + [24]), ($2 + [8])))
	$4 = *($1)
	$1 = CALL $97([8319])
	if ( ($1 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17523])
	goto $label$3 
	
.LABEL $label$4
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($1 + [8318]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LABEL $label$1
	*(($2 + [56])) = [0]
	*($2 + [32]) = $4
	*($2 + [24]) = $3
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$1 = CALL $36(($2 + [24]), $5, [18166])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$0 = *($2 + [48])
	if ( ($0 == 0) ){ goto $label$7 }
	$7 = ($2 + [52])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$10 }
	$1 = *(($2 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$1 = $0
	
.LABEL $label$8
	*($7) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($2 + [64])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18259])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18259])
	CALL memcpy(($0 + [1]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18259])
	CALL memcpy(($0 + [2]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [18259])
	CALL memcpy(($0 + [3]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18259])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18259])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18259])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18259])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $50 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [560])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $100($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [472]))) = (int_64)0
	*(($4 + [488])) = [0]
	*($4 + [456]) = (int_64)0
	*($4 + [448]) = (int_64)0
	*($4 + [464]) = (int_64)0
	*($4 + [480]) = (int_64)0
	*($4 + [436]) = $2
	*($4 + [432]) = $2
	*($4 + [440]) = ($2 + $7)
	*($4 + [528]) = ($4 + [432])
	*($4 + [32]) = ($4 + [448])
	CALL $57(($4 + [32]), ($4 + [528]))
	$8 = *($4 + [440])
	*((($4 + [16]) + [8])) = $8
	*(($4 + [8])) = $8
	$9 = *($4 + [432])
	*($4) = $9
	*($4 + [16]) = $9
	$10 = CALL $1(($4 + [32]), $0, $1, $4)
	*(($8 = (($4 + [512]) + [8]))) = *($3)
	*($4 + [512]) = *($4 + [464])
	$0 = *($4 + [456])
	$1 = *($4 + [448])
	$3 = CALL $86(($4 + [496]), ($4 + [480]))
	*((($4 + [528]) + [8])) = *($8)
	*($4 + [552]) = $1
	*($4 + [544]) = $0
	*($4 + [528]) = *($4 + [512])
	$8 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	CALL void $8((int_32 ($4 + [552])), (int_32 ($4 + [544])), (int_32 ($4 + [528])), (int_32 $3), (int_32 $6))
	if ( ((*($4 + [496]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $103($2)
	
.LABEL $label$6
	CALL $6($10)
	if ( ((*($4 + [480]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [488])))
	
.LABEL $label$7
	$global$0 = ($4 + [560])
	return [1]
}

int_32 .FUNC $51 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $100($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $1(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $103($2)
	
.LABEL $label$6
	CALL $6($8)
	$global$0 = ($4 + [432])
	return [1]
}

int_32 .FUNC $52 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $100($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18259])
	CALL memcpy(($4 + [32]), $2, [1])
	$8 = *($4 + [32])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [1])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$9 = CALL $1(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $103($2)
	
.LABEL $label$5
	CALL $6($9)
	$global$0 = ($4 + [432])
	return [1]
}

int_32 .FUNC $53 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [448])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $100($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [440]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18259])
	CALL memcpy(($4 + [440]), $2, [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $1(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [440])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $103($2)
	
.LABEL $label$6
	CALL $6($8)
	$global$0 = ($4 + [448])
	return [1]
}

int_32 .FUNC $54 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $100($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [448]) = [0]
	*($4 + [436]) = $2
	*($4 + [432]) = $2
	*($4 + [440]) = ($2 + $7)
	*($4 + [456]) = ($4 + [432])
	*($4 + [32]) = ($4 + [448])
	CALL $58(($4 + [32]), ($4 + [456]))
	$3 = *($4 + [440])
	*((($4 + [16]) + [8])) = $3
	*(($4 + [8])) = $3
	$8 = *($4 + [432])
	*($4) = $8
	*($4 + [16]) = $8
	$9 = CALL $1(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$10 = *($4 + [451])
	$11 = *($4 + [450])
	$12 = *($4 + [449])
	$13 = *($4 + [448])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($13 & [255])), (int_32 ($12 & [255])), (int_32 ($11 & [255])), (int_32 ($10 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $103($2)
	
.LABEL $label$5
	CALL $6($9)
	$global$0 = ($4 + [464])
	return [1]
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = CALL $97([8315])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17523])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8314]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert([1], [17621])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $10
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [17670])
	*(($1 + [16])) = $9
	*($1 + [8]) = (int_64)0
	$6 = CALL $97([8319])
	if ( ($6 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [17523])
	goto $label$14 
	
.LABEL $label$15
	if ( ($6 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$7 = (int_64)0
	
.LOOP $label$16:
	$8 = *(($6 + [8318]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$17
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$16 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$9 = (int_64)4
	
.LABEL $label$12
	CALL eosio_assert([1], [17621])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$7 = $10
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$7 = $10
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$22 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$8 = [0]
	
.LABEL $label$18
	CALL eosio_assert($8, [17670])
	*(($1 + [32])) = $9
	*($1 + [24]) = (int_64)0
	$6 = *($4 + [4])
	*($1 + [40]) = *($6)
	*(($1 + [48])) = *(($6 + [8]))
	$6 = *($4 + [4])
	*($1 + [56]) = *($6)
	*(($1 + [64])) = *(($6 + [8]))
	$6 = *($4 + [8])
	*($1 + [72]) = *($6)
	*(($1 + [80])) = *(($6 + [8]))
	$6 = *($4 + [12])
	$7 = *($6)
	$10 = *(($6 + [8]))
	*(($1 + [104])) = $10
	*($1 + [96]) = $7
	if ( ((int_64)$10 <= (int_64)-1) ){ goto $label$23 }
	*($3 + [40]) = [0]
	*($3 + [32]) = (int_64)0
	CALL $89(($3 + [32]), [40])
	$4 = (($3 + [16]) + [8])
	
.LOOP $label$24:
	CALL __udivti3(($3 + [16]), $7, $10, (int_64)10, (int_64)0)
	$12 = *($4)
	$9 = *($3 + [16])
	CALL __multi3($3, $9, $12, (int_64)10, (int_64)0)
	CALL $92(($3 + [32]), *((*([0]) + (CASTING uint_32)(uint_64 (int_64))($7 - *($3))))))
	$6 = ((uint_64)$7 > (uint_64)(int_64)9)
	$8 = ((int_64)$10 != (int_64)0)
	$11 = (int_64)($10 == 0)
	$7 = $9
	$10 = $12
	if ( ( $6 ? $8 : $11 ) ){ goto $label$24 }
	$6 = ($6 & [1])
	$6 = *($3 + [32])
	$8 = ( *($3 + [36]) ? uint_32($6 >> [1]) : $6 )
	if ( ($8 == 0) ){ goto $label$25 }
	$6 = ( *(($3 + [40])) ? (($3 + [32]) | [1]) : $6 )
	$8 = (($6 + $8) + [-1])
	if ( ((uint_32)$8 <= (uint_32)$6) ){ goto $label$25 }
	
.LOOP $label$26:
	$11 = *($6)
	*($6) = *($8)
	*($8) = $11
	$8 = ($8 + [-1])
	$6 = ($6 + [1])
	if ( ($6 <= $8) ){ goto $label$26 }
	
.LABEL $label$25
	$6 = ($1 + [112])
	if ( (*($1 + [112]) & [1]) ){ goto $label$28 }
	*($6) = [0]
	goto $label$27 
	
.LABEL $label$28
	*(*(($1 + [120]))) = [0]
	*(($1 + [116])) = [0]
	
.LABEL $label$27
	CALL $89($6, [0])
	*(($6 + [8])) = *((($3 + [32]) + [8]))
	*($6) = *($3 + [32])
	
.LABEL $label$23
	$6 = *(($1 + [112]))
	$8 = ( *(($1 + [116])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($8 + [136])
	$7 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$29:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$29 }
	if ( ($6 <= [513]) ){ goto $label$31 }
	$8 = CALL $100($6)
	goto $label$30 
	
.LABEL $label$31
	$8 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$30
	*($3 + [36]) = $8
	*($3 + [32]) = $8
	*($3 + [40]) = ($8 + $6)
	CALL $71(($3 + [32]), $1)
	$7 = *($1)
	*($1 + [156]) = CALL db_store_i64(*($5 + [8]), (int_64)-6030912133304782848, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$34 }
	CALL $103($8)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$32 }
	
.LABEL $label$33
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$32
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
}

int_32 .FUNC $56 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [624])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $100($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [496]))) = (int_64)0
	*(($8 = ($4 + [512]))) = (int_64)0
	*($4 + [488]) = (int_64)0
	*($4 + [480]) = (int_64)0
	*($4 + [504]) = (int_64)0
	*($4 + [520]) = (int_64)0
	*($4 + [468]) = $2
	*($4 + [464]) = $2
	*($4 + [472]) = ($2 + $7)
	*($4 + [608]) = ($4 + [464])
	*($4 + [64]) = ($4 + [480])
	CALL $59(($4 + [64]), ($4 + [608]))
	$9 = *($4 + [472])
	*((($4 + [48]) + [8])) = $9
	*((($4 + [32]) + [8])) = $9
	$10 = *($4 + [464])
	*($4 + [32]) = $10
	*($4 + [48]) = $10
	$9 = CALL $1(($4 + [64]), $0, $1, ($4 + [32]))
	*(($11 = (($4 + [544]) + [8]))) = *($3)
	*(($3 = (($4 + [528]) + [8]))) = *($8)
	*($4 + [544]) = *($4 + [488])
	*($4 + [528]) = *($4 + [504])
	$0 = *($4 + [480])
	$1 = *($4 + [520])
	*((($4 + [576]) + [8])) = *($3)
	*((($4 + [560]) + [8])) = *($11)
	*($4 + [576]) = *($4 + [528])
	*($4 + [560]) = *($4 + [544])
	$3 = (($4 + [64]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$10 = *((($4 + [560]) + [8]))
	*((($4 + [608]) + [8])) = $10
	$12 = *((($4 + [576]) + [8]))
	*((($4 + [592]) + [8])) = $12
	*((($4 + [16]) + [8])) = $10
	*(($4 + [8])) = $12
	$10 = *($4 + [560])
	*($4 + [608]) = $10
	$12 = *($4 + [576])
	*($4 + [592]) = $12
	*($4 + [16]) = $10
	*($4) = $12
	CALL void $3((int_32 $0), (int_64 ($4 + [16])), (int_32 $4), (int_32 $1), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $103($2)
	
.LABEL $label$6
	CALL $6($9)
	$global$0 = ($4 + [624])
	return [1]
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18259])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18259])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18259])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $64(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $35 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $66(($4 + [52]), [48])
	$7 = *(($4 + [56]))
	$2 = *($4 + [52])
	*($4 + [84]) = $2
	*($4 + [80]) = $2
	*($4 + [88]) = $7
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $76(($4 + [72]), ($4 + [64]))
	CALL $73(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $94(($4 + [8]))
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($3 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $94($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$4 * (int_32)[12])))) = (int_64)0
	*(($3 + [8])) = [0]
	$1 = *($1)
	$2 = *($2)
	$8 = ($2 - $1)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$8 }
	*($3) = ($8 << [1])
	$5 = ($3 + [1])
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*(($4 = ($7 + ((int_32)$4 * (int_32)[12]))) + [8]) = $5
	*($4 + [4]) = $8
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($1)
	$6 = ($6 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	$5 = ($5 + $8)
	
.LABEL $label$6
	$8 = ($7 + $4)
	*($5) = [0]
	$5 = ($3 + [12])
	$6 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($1 + [-4])
	*(($3 + [-4])) = *($2)
	$1 = ($1 + [-12])
	*(($3 = ($3 + [-12]))) = *($1)
	*($1) = (int_64)0
	*($2) = [0]
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$12 }
	$6 = *(($0 + [4]))
	$2 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$2 = $6
	
.LABEL $label$10
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($6 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$15
	$6 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($2 == 0) ){ goto $label$16 }
	CALL _ZdlPv($2)
	
.LABEL $label$16
	return (unreachable)
	
.LABEL $label$5
	CALL $85($3)
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$4 = ($global$0 - [464])
	$global$0 = $4
	$6 = (int_64)$5 >> (int_64)63
	$5 = *($2)
	CALL __multi3(($4 + [176]), $5, $6), *(($0 + [176])), (int_64)0)
	*($4 + [360]) = $1
	$7 = *($2 + [8])
	$1 = *((($4 + [176]) + [8]))
	$8 = *($4 + [176])
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [17887])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [17911])
	CALL eosio_assert([1], [17847])
	CALL eosio_assert([1], [17862])
	CALL __multi3(($4 + [160]), *(($0 + [177])), (int_64)0, $5, $6)
	$1 = *((($4 + [160]) + [8]))
	$9 = *($4 + [160])
	CALL eosio_assert(( (uint_64)($9 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [17887])
	CALL eosio_assert(( ((uint_64)$9 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [17911])
	*($4 + [352]) = $7
	CALL eosio_assert([1], [17847])
	CALL eosio_assert([1], [17862])
	CALL __multi3(($4 + [144]), *(($0 + [179])), (int_64)0, $5, $6)
	*($4 + [344]) = ((int_64)$9 / (int_64)100)
	$6 = *((($4 + [144]) + [8]))
	$1 = *($4 + [144])
	CALL eosio_assert(( (uint_64)($1 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [17887])
	CALL eosio_assert(( ((uint_64)$1 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [17911])
	CALL eosio_assert([1], [17847])
	CALL eosio_assert([1], [17862])
	$8 = ((int_64)$8 / (int_64)100)
	$6 = ((int_64)$1 / (int_64)100)
	if ( ((int_64)$1 <= (int_64)99) ){ goto $label$1 }
	$10 = ($0 + [320])
	$12 = *(($0 + [348]))
	$11 = *(($0 + [344]))
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$4 }
	
.LOOP $label$6:
	$2 = ($12 + [-24])
	$13 = *($2)
	if ( ((int_64)*($13) == (int_64)$3) ){ goto $label$5 }
	$12 = $2
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$10), [18185])
	goto $label$3 
	
.LABEL $label$4
	$12 = ($0 + [328])
	$2 = CALL db_find_i64(*($10), *($12), (int_64)-5001621657295519744, $3)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$13 = CALL $30($10, $2)
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$10), [18185])
	
.LABEL $label$3
	$1 = *($0)
	CALL eosio_assert([1], [18293])
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$10), [18328])
	CALL eosio_assert(((int_64)*(($0 + [320])) == (int_64)CALL $fimport$8()), [18374])
	$3 = *($13)
	$2 = ($13 + [16])
	CALL eosio_assert(((int_64)$7 == (int_64)*($2)), [17936])
	$9 = ((int_64)*($13 + [8]) + (int_64)$6)
	*($13 + [8]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [17979])
	CALL eosio_assert(((int_64)*($13 + [8]) < (int_64)4611686018427387904), [17998])
	CALL eosio_assert(((int_64)$3 == (int_64)*($13)), [18425])
	CALL eosio_assert([1], [18484])
	CALL memcpy(($4 + [400]), $13, [8])
	CALL eosio_assert([1], [18484])
	CALL memcpy((($4 + [400]) | [8]), ($13 + [8]), [8])
	*($4 + [384]) = *($2)
	CALL eosio_assert([1], [18484])
	CALL memcpy((($4 + [400]) + [16]), ($4 + [384]), [8])
	CALL db_update_i64(*($13 + [28]), $1, ($4 + [400]), [24])
	$2 = ($0 + [336])
	if ( (uint_64)($3 <= *($2)) ){ goto $label$1 }
	*($2) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [320])) == (int_64)CALL $fimport$8()), [18490])
	*(($2 = CALL _Znwj([40])) + [24]) = $10
	*($2 + [8]) = $6
	*($2) = $3
	*($2 + [16]) = $7
	CALL eosio_assert([1], [18484])
	CALL memcpy(($4 + [400]), $2, [8])
	CALL eosio_assert([1], [18484])
	CALL memcpy((($4 + [400]) | [8]), ($2 + [8]), [8])
	*($4 + [384]) = *($2 + [16])
	CALL eosio_assert([1], [18484])
	CALL memcpy(($4 + [416]), ($4 + [384]), [8])
	$3 = *($2)
	$13 = CALL db_store_i64(*($12), (int_64)-5001621657295519744, $1, $3, ($4 + [400]), [24])
	*($2 + [28]) = $13
	$12 = ($0 + [336])
	if ( (uint_64)($3 <= *($12)) ){ goto $label$7 }
	*($12) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($4 + [384]) = $2
	$3 = *($2)
	*($4 + [400]) = $3
	*($4 + [368]) = $13
	$11 = ($0 + [348])
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [352]))) ){ goto $label$9 }
	*($12 + [8]) = $3
	*($12 + [16]) = $13
	*($4 + [384]) = [0]
	*($12) = $2
	*($11) = ($12 + [24])
	$2 = *($4 + [384])
	*($4 + [384]) = [0]
	if ( $2 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	CALL $31(($0 + [344]), ($4 + [384]), ($4 + [400]), ($4 + [368]))
	$2 = *($4 + [384])
	*($4 + [384]) = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$8
	CALL _ZdlPv($2)
	
.LABEL $label$1
	CALL eosio_assert([1], [18075])
	$3 = (int_64)
	CALL eosio_assert(((int_64)$3($5 - $8)) > (int_64)-4611686018427387904), [18123])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [18145])
	$2 = (($4 + [344]) + [8])
	CALL eosio_assert(((int_64)*($2) == (int_64)$7), [18075])
	$3 = (int_64)
	CALL eosio_assert(((int_64)$3($3 - *($4 + [344]))) > (int_64)-4611686018427387904), [18123])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [18145])
	CALL eosio_assert([1], [18075])
	$9 = (int_64)
	CALL eosio_assert(((int_64)$9($3 - $6)) > (int_64)-4611686018427387904), [18123])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [18145])
	$3 = *($2)
	*((($4 + [312]) + [8])) = $3
	*((($4 + [128]) + [8])) = $3
	$3 = *($4 + [344])
	*($4 + [128]) = $3
	*($4 + [312]) = $3
	CALL $32(($4 + [328]), $4, ($4 + [128]))
	CALL $19(($4 + [296]), $0)
	*((($4 + [264]) + [8])) = [0]
	*((($4 + [280]) + [8])) = *((($4 + [328]) + [8]))
	*($4 + [264]) = (int_64)0
	*($4 + [280]) = *($4 + [328])
	$3 = *($0)
	$2 = CALL $97([16859])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$15 }
	*($4 + [264]) = ($2 << [1])
	$12 = (($4 + [264]) | [1])
	if ( $2 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$13 = (($2 + [16]) & [-16])
	$12 = CALL _Znwj($13)
	*($4 + [264]) = ($13 | [1])
	*($4 + [272]) = $12
	*($4 + [268]) = $2
	
.LABEL $label$14
	CALL memcpy($12, [16859], $2)
	
.LABEL $label$13
	*(($12 + $2)) = [0]
	*((($4 + [112]) + [8])) = *((($4 + [280]) + [8]))
	*($4 + [112]) = *($4 + [280])
	CALL $23($0, $3, ($4 + [112]), ($4 + [264]))
	if ( ((*($4 + [264]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($4 + [272]))
	
.LABEL $label$16
	$3 = *($4 + [296])
	if ( ((int_64)$3 < (int_64)1) ){ goto $label$20 }
	CALL eosio_assert(((int_64)*($4 + [336]) == (int_64)*($4 + [304])), [17936])
	$3 = ((int_64)*($4 + [328]) + (int_64)$3)
	*($4 + [296]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [17979])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [17998])
	$14 = ((int_64)$8 * (int_64)10000000000000)
	$5 = *($2)
	$3 = ((int_64)$5 + (int_64)((uint_64)$14 / (uint_64)$3))
	*(($2 = ($0 + [208]))) = $3
	*(($12 = ($0 + [216]))) = ((int_64)*($12) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($3 <= $5)))
	*($4 + [408]) = [0]
	*($4 + [400]) = (int_64)0
	CALL $89(($4 + [400]), [40])
	$3 = *($12)
	$5 = *($2)
	$11 = ($4 + [104])
	
.LOOP $label$21:
	CALL __udivti3(($4 + [96]), $5, $3, (int_64)10, (int_64)0)
	$6 = *($11)
	$1 = *($4 + [96])
	CALL __multi3(($4 + [80]), $1, $6, (int_64)10, (int_64)0)
	CALL $92(($4 + [400]), *((*([0]) + (CASTING uint_32)(uint_64 (int_64))($5 - *($4 + [80]))))))
	$2 = ((uint_64)$5 > (uint_64)(int_64)9)
	$12 = ((int_64)$3 != (int_64)0)
	$13 = (int_64)($3 == 0)
	$5 = $1
	$3 = $6
	if ( ( $2 ? $12 : $13 ) ){ goto $label$21 }
	$2 = ($2 & [1])
	$2 = *($4 + [400])
	$12 = ( *($4 + [404]) ? uint_32($2 >> [1]) : $2 )
	if ( ($12 == 0) ){ goto $label$22 }
	$2 = ( *(($4 + [408])) ? (($4 + [400]) | [1]) : $2 )
	$12 = (($2 + $12) + [-1])
	if ( ((uint_32)$12 <= (uint_32)$2) ){ goto $label$22 }
	
.LOOP $label$23:
	$13 = *($2)
	*($2) = *($12)
	*($12) = $13
	$12 = ($12 + [-1])
	$2 = ($2 + [1])
	if ( ($2 <= $12) ){ goto $label$23 }
	
.LABEL $label$22
	$2 = ($0 + [224])
	if ( (*($2) & [1]) ){ goto $label$19 }
	*($2) = [0]
	goto $label$18 
	
.LABEL $label$20
	*((($4 + [296]) + [8])) = *((($4 + [328]) + [8]))
	*($4 + [296]) = *($4 + [328])
	$14 = ((int_64)$8 * (int_64)10000000000000)
	goto $label$17 
	
.LABEL $label$19
	*(*(($0 + [232]))) = [0]
	*(($0 + [228])) = [0]
	
.LABEL $label$18
	CALL $89($2, [0])
	*(($2 + [8])) = *((($4 + [400]) + [8]))
	*($2) = *($4 + [400])
	
.LABEL $label$17
	$5 = *($4 + [296])
	$3 = *($4 + [328])
	CALL __multi3(($4 + [64]), *(($0 + [208])), *(($0 + [216])), $3, (int_64)$3 >> (int_64)63))
	$3 = ((int_64)$3 * (int_64)((uint_64)$14 / (uint_64)$5))
	$1 = *($4 + [64])
	*($4 + [240]) = (int_64))($1 - $3)
	*($4 + [248]) = (int_64))(*(($4 + [72])) - (CASTING uint_64)(uint_32 (uint_64)($1 <= $3)))
	$10 = ($0 + [280])
	$3 = *($4 + [360])
	$12 = *(($0 + [308]))
	$11 = *(($0 + [304]))
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$26 }
	
.LOOP $label$28:
	$2 = ($12 + [-24])
	$13 = *($2)
	if ( ((int_64)*($13) == (int_64)$3) ){ goto $label$27 }
	$12 = $2
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$26 }
	CALL eosio_assert(((int_32)*($13 + [152]) == (int_32)$10), [18185])
	if ( $13 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$2 = CALL db_find_i64(*($10), *(($0 + [288])), (int_64)-6030912133304782848, $3)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$24 }
	$13 = CALL $11($10, $2)
	CALL eosio_assert(((int_32)*($13 + [152]) == (int_32)$10), [18185])
	
.LABEL $label$25
	$3 = *($0)
	*($4 + [412]) = $0
	*($4 + [404]) = ($4 + [344])
	*($4 + [400]) = ($4 + [328])
	*($4 + [408]) = ($4 + [240])
	CALL eosio_assert([1], [18293])
	CALL $33($10, $13, $3, ($4 + [400]))
	goto $label$10 
	
.LABEL $label$24
	$3 = *($0)
	*($4 + [416]) = $0
	*($4 + [404]) = ($4 + [328])
	*($4 + [400]) = ($4 + [360])
	*($4 + [408]) = ($4 + [344])
	*($4 + [412]) = ($4 + [240])
	*($4 + [368]) = $3
	CALL eosio_assert(((int_64)*(($0 + [280])) == (int_64)CALL $fimport$8()), [18490])
	*($4 + [384]) = $10
	*($4 + [388]) = ($4 + [400])
	*($4 + [392]) = ($4 + [368])
	*(($2 = CALL _Znwj([176])) + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = (int_64)0
	*($2 + [64]) = (int_64)0
	*($2 + [72]) = (int_64)0
	*($2 + [80]) = (int_64)0
	*($2 + [112 align=4]) = (int_64)0
	*($2 + [120]) = [0]
	*($2 + [128]) = (int_64)0
	*($2 + [136]) = (int_64)0
	*($2 + [152]) = $10
	CALL $34(($4 + [384]), $2)
	*($4 + [224]) = $2
	$3 = *($2)
	*($4 + [384]) = $3
	$13 = *($2 + [156])
	*($4 + [448]) = $13
	$11 = ($0 + [308])
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [312]))) ){ goto $label$29 }
	*($12 + [8]) = $3
	*($12 + [16]) = $13
	*($4 + [224]) = [0]
	*($12) = $2
	*($11) = ($12 + [24])
	$2 = *($4 + [224])
	*($4 + [224]) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$29
	CALL $22(($0 + [304]), ($4 + [224]), ($4 + [384]), ($4 + [448]))
	$2 = *($4 + [224])
	*($4 + [224]) = [0]
	if ( $2 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $85(($4 + [264]))
	
.LABEL $label$11
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($2 + [120])))
	
.LABEL $label$30
	CALL _ZdlPv($2)
	
.LABEL $label$10
	CALL eosio_assert(((int_64)$7 == (int_64)*(($0 + [120]))), [17936])
	$3 = ((int_64)*($2) + (int_64)$8)
	*(($2 = ($0 + [112]))) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [17979])
	CALL eosio_assert(((int_64)*($2) < (int_64)4611686018427387904), [17998])
	CALL eosio_assert(((int_64)$7 == (int_64)*(($0 + [104]))), [17936])
	$3 = ((int_64)*($2) + (int_64)$9)
	*(($2 = ($0 + [96]))) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [17979])
	CALL eosio_assert(((int_64)*($2) < (int_64)4611686018427387904), [17998])
	CALL eosio_assert(((int_64)*($4 + [336]) == (int_64)*(($0 + [152]))), [17936])
	$3 = ((int_64)*($2) + (int_64)*($4 + [328]))
	*(($2 = ($0 + [144]))) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [17979])
	CALL eosio_assert(((int_64)*($2) < (int_64)4611686018427387904), [17998])
	if ( (*([0] + [8336]) == 0) ){ goto $label$32 }
	$3 = *([0] + [8328])
	goto $label$31 
	
.LABEL $label$32
	$3 = CALL current_time()
	*([0] + [8336]) = [1]
	*([0] + [8328]) = $3
	
.LABEL $label$31
	$5 = *($0)
	*($4 + [384]) = [16807]
	*($4 + [388]) = CALL $97([16807])
	*($4 + [56]) = *($4 + [384])
	*($4 + [232]) = *(CALL $5(($4 + [400]), ($4 + [56])))
	*($4 + [224]) = $5
	*((($2 = CALL _Znwj([16])) + [8])) = *($4 + [232])
	*($2) = *($4 + [224])
	*(($12 = (($4 + [208]) + [8]))) = *((($4 + [344]) + [8]))
	*(($13 = (($4 + [192]) + [8]))) = *((($4 + [328]) + [8]))
	*($4 + [208]) = *($4 + [344])
	*($4 + [192]) = *($4 + [328])
	$1 = *($4 + [360])
	$6 = *($12)
	*((($4 + [384]) + [8])) = $6
	$7 = *($13)
	*((($4 + [368]) + [8])) = $7
	*(($12 = (($4 + [400]) + [16]))) = $6
	*(($13 = (($4 + [400]) + [32]))) = $7
	*(($4 + [48])) = $3
	*($4 + [448]) = $2
	$2 = ($2 + [16])
	*($4 + [452]) = $2
	*($4 + [456]) = $2
	*($4 + [400]) = $1
	*($4 + [440]) = $3
	$3 = *($4 + [208])
	*($4 + [384]) = $3
	$6 = *($4 + [192])
	*($4 + [368]) = $6
	*($4 + [408]) = $3
	*($4 + [424]) = $6
	*((($4 + [8]) + [32])) = *($13)
	*(($4 + [32])) = *($4 + [424])
	*((($4 + [8]) + [16])) = *($12)
	*((($4 + [8]) + [8])) = *($4 + [408])
	*($4 + [8]) = $1
	CALL $35($5, (int_64)-5003315193367756800, ($4 + [448]), ($4 + [8]))
	$2 = *($4 + [448])
	if ( ($2 == 0) ){ goto $label$33 }
	*($4 + [452]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$33
	$global$0 = ($4 + [464])
	(unreachable)
}

int_32 .FUNC $55 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [528])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $100($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [456]) + [16]))) = (int_64)0
	*($4 + [464]) = (int_64)0
	*($4 + [456]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18259])
	CALL memcpy(($4 + [456]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [18259])
	CALL memcpy((($4 + [456]) + [8]), ($2 + [8]), [8])
	*($4 + [48]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [18259])
	CALL memcpy(($4 + [48]), ($2 + [16]), [8])
	*($3) = *($4 + [48])
	$8 = ($2 + $7)
	*((($4 + [16]) + [8])) = $8
	*($4 + [36]) = ($2 + [24])
	*($4 + [32]) = $2
	*($4 + [40]) = $8
	*($4 + [16]) = *($4 + [32])
	$8 = CALL $1(($4 + [48]), $0, $1, ($4 + [16]))
	*(($9 = (($4 + [480]) + [8]))) = *($3)
	*($4 + [480]) = *($4 + [464])
	$0 = *($4 + [456])
	*((($4 + [496]) + [8])) = *($9)
	*($4 + [496]) = *($4 + [480])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [496]) + [8]))
	*((($4 + [512]) + [8])) = $1
	*(($4 + [8])) = $1
	$1 = *($4 + [496])
	*($4) = $1
	*($4 + [512]) = $1
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $103($2)
	
.LABEL $label$6
	CALL $6($8)
	$global$0 = ($4 + [528])
	return [1]
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = CALL $97([8315])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17523])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8314]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)$7 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert([1], [17621])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$10 = ((int_64)$9 | (int_64)4)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $9
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [17670])
	*(($1 + [16])) = $10
	*($1 + [8]) = (int_64)0
	$6 = *($4 + [4])
	*($1 + [24]) = *($6)
	*(($1 + [32])) = *(($6 + [8]))
	$6 = CALL $97([8319])
	if ( ($6 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [17523])
	goto $label$14 
	
.LABEL $label$15
	if ( ($6 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$7 = (int_64)0
	
.LOOP $label$16:
	$8 = *(($6 + [8318]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$17
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$16 }
	$10 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$10 = (int_64)4
	
.LABEL $label$12
	CALL eosio_assert([1], [17621])
	$7 = (uint_64)$10 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$7 = $9
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$7 = $9
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$22 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$8 = [0]
	
.LABEL $label$18
	CALL eosio_assert($8, [17670])
	*(($1 + [48])) = $10
	*($1 + [40]) = (int_64)0
	$6 = CALL $97([8319])
	if ( ($6 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [17523])
	goto $label$25 
	
.LABEL $label$26
	if ( ($6 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$7 = (int_64)0
	
.LOOP $label$27:
	$8 = *(($6 + [8318]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$28
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$27 }
	$10 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$23 
	
.LABEL $label$24
	$10 = (int_64)4
	
.LABEL $label$23
	CALL eosio_assert([1], [17621])
	$7 = (uint_64)$10 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$7 = $9
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$7 = $9
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$33 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$8 = [0]
	
.LABEL $label$29
	CALL eosio_assert($8, [17670])
	*(($1 + [64])) = $10
	*($1 + [56]) = (int_64)0
	$6 = CALL $97([8315])
	if ( ($6 <= [8]) ){ goto $label$37 }
	CALL eosio_assert([0], [17523])
	goto $label$36 
	
.LABEL $label$37
	if ( ($6 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	$7 = (int_64)0
	
.LOOP $label$38:
	$8 = *(($6 + [8314]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$39 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$39
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$38 }
	$10 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$34 
	
.LABEL $label$35
	$10 = (int_64)4
	
.LABEL $label$34
	CALL eosio_assert([1], [17621])
	$7 = (uint_64)$10 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$43 }
	$7 = $9
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$43
	$7 = $9
	
.LOOP $label$44:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$41 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$44 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	$8 = [0]
	
.LABEL $label$40
	CALL eosio_assert($8, [17670])
	*(($1 + [80])) = $10
	*($1 + [72]) = (int_64)0
	$6 = *($4 + [12])
	$7 = *($6)
	$9 = *(($6 + [8]))
	*(($1 + [104])) = $9
	*($1 + [96]) = $7
	*($1 + [88]) = ((int_64)*(*($4 + [8])) + (int_64)86400000000)
	if ( ((int_64)$9 <= (int_64)-1) ){ goto $label$45 }
	*($3 + [40]) = [0]
	*($3 + [32]) = (int_64)0
	CALL $89(($3 + [32]), [40])
	$4 = (($3 + [16]) + [8])
	
.LOOP $label$46:
	CALL __udivti3(($3 + [16]), $7, $9, (int_64)10, (int_64)0)
	$12 = *($4)
	$10 = *($3 + [16])
	CALL __multi3($3, $10, $12, (int_64)10, (int_64)0)
	CALL $92(($3 + [32]), *((*([0]) + (CASTING uint_32)(uint_64 (int_64))($7 - *($3))))))
	$6 = ((uint_64)$7 > (uint_64)(int_64)9)
	$8 = ((int_64)$9 != (int_64)0)
	$11 = (int_64)($9 == 0)
	$7 = $10
	$9 = $12
	if ( ( $6 ? $8 : $11 ) ){ goto $label$46 }
	$6 = ($6 & [1])
	$6 = *($3 + [32])
	$8 = ( *($3 + [36]) ? uint_32($6 >> [1]) : $6 )
	if ( ($8 == 0) ){ goto $label$47 }
	$6 = ( *(($3 + [40])) ? (($3 + [32]) | [1]) : $6 )
	$8 = (($6 + $8) + [-1])
	if ( ((uint_32)$8 <= (uint_32)$6) ){ goto $label$47 }
	
.LOOP $label$48:
	$11 = *($6)
	*($6) = *($8)
	*($8) = $11
	$8 = ($8 + [-1])
	$6 = ($6 + [1])
	if ( ($6 <= $8) ){ goto $label$48 }
	
.LABEL $label$47
	$6 = ($1 + [112])
	if ( (*($1 + [112]) & [1]) ){ goto $label$50 }
	*($6) = [0]
	goto $label$49 
	
.LABEL $label$50
	*(*(($1 + [120]))) = [0]
	*(($1 + [116])) = [0]
	
.LABEL $label$49
	CALL $89($6, [0])
	*(($6 + [8])) = *((($3 + [32]) + [8]))
	*($6) = *($3 + [32])
	
.LABEL $label$45
	$6 = *(($1 + [112]))
	$8 = ( *(($1 + [116])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($8 + [136])
	$7 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$51:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$51 }
	if ( ($6 <= [513]) ){ goto $label$53 }
	$8 = CALL $100($6)
	goto $label$52 
	
.LABEL $label$53
	$8 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$52
	*($3 + [36]) = $8
	*($3 + [32]) = $8
	*($3 + [40]) = ($8 + $6)
	CALL $71(($3 + [32]), $1)
	$7 = *($1)
	*($1 + [156]) = CALL db_store_i64(*($5 + [8]), (int_64)-6030912133304782848, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$56 }
	CALL $103($8)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$54 }
	
.LABEL $label$55
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$54
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [18328])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18374])
	$6 = *($1)
	$7 = *($3)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [32]))), [17936])
	$8 = ((int_64)*($1 + [24]) + (int_64)*($7))
	*($1 + [24]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17979])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [17998])
	$7 = *($3 + [8])
	$9 = *(($7 + [8]))
	$10 = *($1 + [96])
	$8 = ((int_64)$10 + (int_64)*($7))
	*($1 + [96]) = $8
	*($1 + [88]) = ((int_64)*(*($3 + [4])) + (int_64)86400000000)
	$9 = ((int_64)((int_64)$9 + (int_64)*($3)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($8 <= $10)))
	*(($3 = ($1 + [104]))) = $9
	if ( ((int_64)$9 <= (int_64)-1) ){ goto $label$1 }
	*($5 + [40]) = [0]
	*($5 + [32]) = (int_64)0
	CALL $89(($5 + [32]), [40])
	$11 = (($5 + [16]) + [8])
	
.LOOP $label$2:
	CALL __udivti3(($5 + [16]), $8, $9, (int_64)10, (int_64)0)
	$12 = *($11)
	$10 = *($5 + [16])
	CALL __multi3($5, $10, $12, (int_64)10, (int_64)0)
	CALL $92(($5 + [32]), *((*([0]) + (CASTING uint_32)(uint_64 (int_64))($8 - *($5))))))
	$3 = ((uint_64)$8 > (uint_64)(int_64)9)
	$7 = ((int_64)$9 != (int_64)0)
	$13 = (int_64)($9 == 0)
	$8 = $10
	$9 = $12
	if ( ( $3 ? $7 : $13 ) ){ goto $label$2 }
	$3 = ($3 & [1])
	$3 = *($5 + [32])
	$7 = ( *($5 + [36]) ? uint_32($3 >> [1]) : $3 )
	if ( ($7 == 0) ){ goto $label$3 }
	$3 = ( *(($5 + [40])) ? (($5 + [32]) | [1]) : $3 )
	$7 = (($3 + $7) + [-1])
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$13 = *($3)
	*($3) = *($7)
	*($7) = $13
	$7 = ($7 + [-1])
	$3 = ($3 + [1])
	if ( ($3 <= $7) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = ($1 + [112])
	if ( (*($1 + [112]) & [1]) ){ goto $label$6 }
	*($3) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*(($1 + [120]))) = [0]
	*(($1 + [116])) = [0]
	
.LABEL $label$5
	CALL $89($3, [0])
	*(($3 + [8])) = *((($5 + [32]) + [8]))
	*($3) = *($5 + [32])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [18425])
	$3 = *(($1 + [112]))
	$7 = ( *(($1 + [116])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [136])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$7:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$7 }
	if ( ($3 <= [513]) ){ goto $label$9 }
	$7 = CALL $100($3)
	goto $label$8 
	
.LABEL $label$9
	$7 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$8
	*($5 + [36]) = $7
	*($5 + [32]) = $7
	*($5 + [40]) = ($7 + $3)
	CALL $71(($5 + [32]), $1)
	CALL db_update_i64(*(($1 + [156])), $2, $7, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$12 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $103($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$10 }
	
.LABEL $label$11
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$10
	$global$0 = ($5 + [48])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [144])
	$global$0 = $4
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$1 }
	$5 = CALL $97([8319])
	if ( ($5 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [17523])
	goto $label$4 
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = (int_64)0
	
.LOOP $label$6:
	$7 = *(($5 + [8318]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$6 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$2 
	
.LABEL $label$3
	$6 = (int_64)4
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$6), [16781])
	$6 = *($0 + [80])
	*($4 + [64]) = [16807]
	*($4 + [68]) = CALL $97([16807])
	*($4 + [8]) = *($4 + [64])
	*($4 + [72]) = *(CALL $5(($4 + [80]), ($4 + [8])))
	*($4 + [64]) = $6
	*((($5 = CALL _Znwj([16])) + [8])) = *($4 + [72])
	*($5) = *($4 + [64])
	*(($7 = (($4 + [16]) + [24]))) = *($2 + [8])
	*($4 + [24]) = $1
	*($4 + [16]) = *($0 + [80])
	*($4 + [32]) = *($2)
	CALL $86(($4 + [48]), $3)
	*((($4 + [80]) + [24])) = *($7)
	$7 = (($4 + [16]) + [40])
	*(($2 = (($4 + [80]) + [40]))) = *($7)
	*($7) = [0]
	$7 = ($5 + [16])
	*($4 + [132]) = $7
	*($4 + [128]) = $5
	*($4 + [136]) = $7
	*($4 + [80]) = *($4 + [16])
	*($4 + [88]) = *($4 + [24])
	*($4 + [96]) = *($4 + [32])
	*($4 + [112]) = *($4 + [48])
	*($4 + [48]) = (int_64)0
	CALL $24($6, (int_64)-3617168760277827584, ($4 + [128]), ($4 + [80]))
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($2))
	
.LABEL $label$8
	$5 = *($4 + [128])
	if ( ($5 == 0) ){ goto $label$9 }
	*($4 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((*(($4 + [48])) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [56])))
	
.LABEL $label$1
	$global$0 = ($4 + [144])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $94($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [112]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [120])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [144])
	$global$0 = $4
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$1 }
	$5 = CALL $97([8319])
	if ( ($5 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [17523])
	goto $label$4 
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = (int_64)0
	
.LOOP $label$6:
	$7 = *(($5 + [8318]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$6 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$2 
	
.LABEL $label$3
	$6 = (int_64)4
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$6), [16814])
	$6 = *($0 + [80])
	$8 = *($0)
	*($4 + [64]) = [16807]
	*($4 + [68]) = CALL $97([16807])
	*($4 + [8]) = *($4 + [64])
	*($4 + [72]) = *(CALL $5(($4 + [80]), ($4 + [8])))
	*($4 + [64]) = $8
	*((($5 = CALL _Znwj([16])) + [8])) = *($4 + [72])
	*($5) = *($4 + [64])
	*(($7 = (($4 + [16]) + [24]))) = *($2 + [8])
	*($4 + [24]) = $1
	*($4 + [16]) = *($0)
	*($4 + [32]) = *($2)
	CALL $86(($4 + [48]), $3)
	*((($4 + [80]) + [24])) = *($7)
	$7 = (($4 + [16]) + [40])
	*(($2 = (($4 + [80]) + [40]))) = *($7)
	*($7) = [0]
	$7 = ($5 + [16])
	*($4 + [132]) = $7
	*($4 + [128]) = $5
	*($4 + [136]) = $7
	*($4 + [80]) = *($4 + [16])
	*($4 + [88]) = *($4 + [24])
	*($4 + [96]) = *($4 + [32])
	*($4 + [112]) = *($4 + [48])
	*($4 + [48]) = (int_64)0
	CALL $24($6, (int_64)-3617168760277827584, ($4 + [128]), ($4 + [80]))
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($2))
	
.LABEL $label$8
	$5 = *($4 + [128])
	if ( ($5 == 0) ){ goto $label$9 }
	*($4 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((*(($4 + [48])) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [56])))
	
.LABEL $label$1
	$global$0 = ($4 + [144])
}

void .FUNC $24 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $66($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $72(($4 + [72]), ($4 + [64]))
	CALL $73(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $94(($4 + [8]))
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($2)
	if ( ($5 & [1]) ){ goto $label$5 }
	$6 = ($2 + [1])
	*($4 + [24]) = $6
	$5 = uint_32($5 >> [1])
	$2 = ($6 + $5)
	*($4 + [16]) = $2
	*($4 + [8]) = $6
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = *($2 + [8])
	*($4 + [24]) = $6
	$5 = *($2 + [4])
	$2 = ($6 + $5)
	*($4 + [16]) = $2
	*($4 + [8]) = $6
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($3 & [255])
	$8 = ($1 + [8])
	$9 = ($1 + [4])
	$3 = $6
	
.LOOP $label$6:
	if ( ((int_32)*($3) != (int_32)$7) ){ goto $label$12 }
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*($8)) ){ goto $label$11 }
	*($2) = (int_64)0
	*(($2 + [8])) = [0]
	$10 = ($3 - $6)
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$10 > (uint_32)[10]) ){ goto $label$10 }
	*($2) = ($10 << [1])
	$5 = ($2 + [1])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$3 = ($3 + [1])
	*($4 + [8]) = $3
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$11
	CALL $29($1, ($4 + [24]), ($4 + [8]))
	goto $label$7 
	
.LABEL $label$10
	$11 = (($10 + [16]) & [-16])
	$5 = CALL _Znwj($11)
	*($2) = ($11 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $10
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = $5
	
.LOOP $label$13:
	*($2) = *($6)
	$2 = ($2 + [1])
	$6 = ($6 + [1])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$13 }
	$5 = ($5 + $10)
	
.LABEL $label$8
	*($5) = [0]
	*($9) = (*($9) + [12])
	
.LABEL $label$7
	$3 = (*($4 + [8]) + [1])
	*($4 + [24]) = $3
	$2 = *($4 + [16])
	$6 = $3
	*($4 + [8]) = $3
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$16 }
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)*($1 + [8])) ){ goto $label$17 }
	*($3) = (int_64)0
	*(($3 + [8])) = [0]
	$5 = ($2 - $6)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$15 }
	*($3) = ($5 << [1])
	$7 = ($3 + [1])
	goto $label$14 
	
.LABEL $label$17
	CALL $29($1, ($4 + [24]), ($4 + [16]))
	
.LABEL $label$16
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$15
	$9 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $5
	
.LABEL $label$14
	$3 = $7
	
.LOOP $label$18:
	*($3) = *($6)
	$3 = ($3 + [1])
	$6 = ($6 + [1])
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$18 }
	*(($7 + $5)) = [0]
	*(($6 = ($1 + [4]))) = (*($6) + [12])
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $85($2)
	
.LABEL $label$1
	CALL $85($3)
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$5 = ($global$0 - [176])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$1 }
	*($5 + [128]) = [16839]
	*($5 + [132]) = CALL $97([16839])
	*($5 + [64]) = *($5 + [128])
	$2 = CALL $5(($5 + [144]), ($5 + [64]))
	if ( ((int_64)*($1) == (int_64)*($2)) ){ goto $label$1 }
	*($5 + [128]) = [8203]
	*($5 + [132]) = CALL $97([8203])
	*($5 + [56]) = *($5 + [128])
	$2 = CALL $5(($5 + [144]), ($5 + [56]))
	if ( ((int_64)*($1) == (int_64)*($2)) ){ goto $label$1 }
	$2 = *($4)
	$7 = CALL $97([16851])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$2 }
	if ( (CALL $93($4, [0], [-1], [16851], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = *($4)
	$7 = CALL $97([16859])
	if ( ((int_32)$7 != (int_32)( *(($4 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$3 }
	if ( (CALL $93($4, [0], [-1], [16859], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert(*(($0 + [236])), [16872])
	$2 = CALL $97([8315])
	if ( ($2 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [17523])
	goto $label$6 
	
.LABEL $label$7
	if ( ($2 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = (int_64)0
	
.LOOP $label$8:
	$7 = *(($2 + [8314]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$9
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$4 
	
.LABEL $label$5
	$6 = (int_64)0
	
.LABEL $label$4
	if ( ((int_64)*($3 + [8]) != (int_64)((int_64)$6 | (int_64)4)) ){ goto $label$11 }
	CALL eosio_assert([1], [16895])
	goto $label$10 
	
.LABEL $label$11
	$2 = CALL $97([8319])
	if ( ($2 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [17523])
	goto $label$14 
	
.LABEL $label$15
	if ( ($2 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$6 = (int_64)0
	
.LOOP $label$16:
	$7 = *(($2 + [8318]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$17
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$16 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$12 
	
.LABEL $label$13
	$6 = (int_64)0
	
.LABEL $label$12
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)((int_64)$6 | (int_64)4)), [16895])
	
.LABEL $label$10
	$7 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$18 }
	$6 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$6 = $8
	$7 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$6 = $8
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $7 ){ goto $label$22 }
	$7 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$7 = [0]
	
.LABEL $label$18
	CALL eosio_assert($7, [16925])
	$6 = (int_64)0
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [16942])
	$2 = CALL $97([8315])
	if ( ($2 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [17523])
	goto $label$24 
	
.LABEL $label$25
	if ( ($2 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$6 = (int_64)0
	
.LOOP $label$26:
	$7 = *(($2 + [8314]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$27
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$26 }
	$6 = ((int_64)$6 << (int_64)8)
	
.LABEL $label$23
	if ( ((int_64)*(($3 + [8])) != (int_64)((int_64)$6 | (int_64)4)) ){ goto $label$35 }
	*($5 + [152]) = [0]
	*($5 + [144]) = (int_64)0
	CALL $27($0, ($5 + [144]), $4, [59])
	$2 = CALL $86(($5 + [128]), *($5 + [144]))
	$7 = *($5 + [128])
	$4 = CALL $97([16979])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$36 }
	if ( (CALL $93($2, [0], [-1], [16979], $4) == 0) ){ goto $label$34 }
	
.LABEL $label$36
	CALL eosio_assert([0], [17084])
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$35
	$2 = CALL $97([8319])
	if ( ($2 <= [8]) ){ goto $label$38 }
	CALL eosio_assert([0], [17523])
	goto $label$37 
	
.LABEL $label$38
	if ( ($2 == 0) ){ goto $label$33 }
	
.LABEL $label$37
	$6 = (int_64)0
	
.LOOP $label$39:
	$7 = *(($2 + [8318]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$40 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$40
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$39 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$30 
	
.LABEL $label$34
	CALL eosio_assert(((int_32)(*($5 + [148]) - *($5 + [144])) == (int_32)[36]), [16984])
	$7 = *($5 + [144])
	if ( (*($7 + [12]) & [1]) ){ goto $label$32 }
	$7 = (($7 + [12]) + [1])
	goto $label$31 
	
.LABEL $label$33
	$6 = (int_64)4
	goto $label$30 
	
.LABEL $label$32
	$7 = *(($7 + [20]))
	
.LABEL $label$31
	*($5 + [112]) = $7
	*($5 + [116]) = CALL $97($7)
	*($5 + [32]) = *($5 + [112])
	$4 = CALL $5(($5 + [120]), ($5 + [32]))
	CALL eosio_assert(CALL $fimport$9(*($4)), [17017])
	*($5 + [160]) = [8302]
	*($5 + [164]) = CALL $97([8302])
	*($5 + [24]) = *($5 + [160])
	$6 = *(CALL $5(($5 + [168]), ($5 + [24])))
	$7 = *($5 + [144])
	$11 = *($7 + [24])
	$9 = ($11 & [1])
	if ( $9 ){ goto $label$43 }
	if ( uint_32($11 >> [1]) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	if ( (*(($7 + [28])) == 0) ){ goto $label$41 }
	
.LABEL $label$42
	if ( $9 ){ goto $label$45 }
	$7 = (($7 + [24]) + [1])
	goto $label$44 
	
.LABEL $label$45
	$7 = *(($7 + [32]))
	
.LABEL $label$44
	*($5 + [104]) = $7
	*($5 + [108]) = CALL $97($7)
	*($5 + [16]) = *($5 + [104])
	$7 = CALL $5(($5 + [168]), ($5 + [16]))
	$6 = *($7)
	CALL eosio_assert(((int_64)*($1) != (int_64)$6), [17039])
	CALL eosio_assert(CALL $fimport$9($6), [17061])
	
.LABEL $label$41
	$10 = *(($3 + [8]))
	*((($5 + [88]) + [8])) = $10
	$12 = *($4)
	$8 = *($3)
	*(($5 + [8])) = $10
	*($5 + [88]) = $8
	*($5) = $8
	CALL $28($0, $12, $5, $6)
	if ( (*($5 + [128]) & [1]) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$2 = ($3 + [8])
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$1 }
	$8 = *($2)
	*((($5 + [72]) + [8])) = $8
	$10 = *($1)
	$6 = *($3)
	*((($5 + [40]) + [8])) = $8
	*($5 + [72]) = $6
	*($5 + [40]) = $6
	CALL $18($0, $10, ($5 + [40]))
	$global$0 = ($5 + [176])
	return 
	
.LABEL $label$29
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$28
	$7 = *($5 + [144])
	if ( ($7 == 0) ){ goto $label$1 }
	$1 = *($5 + [148])
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$47 }
	
.LOOP $label$48:
	$2 = ($1 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*(($1 + [-4])))
	
.LABEL $label$49
	$1 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$48 }
	$2 = *($5 + [144])
	goto $label$46 
	
.LABEL $label$47
	$2 = $7
	
.LABEL $label$46
	*($5 + [148]) = $7
	CALL _ZdlPv($2)
	$global$0 = ($5 + [176])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [176])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18484])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18484])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [88]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [97]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [98]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [99]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [100]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [101]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[15]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	$0 = CALL $69($0, ($1 + [144]))
	*($2 + [8]) = *($1 + [156])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [18484])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18264])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $66($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18259])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $65($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $89($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $89($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $85($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	$1 = CALL memcpy($1, $5, [144])
	CALL $87(($1 + [144]), ($5 + [144]))
	*($1 + [156]) = *($5 + [156])
	$5 = *($1 + [144])
	$6 = ( *(($1 + [148])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [135])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $100($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $68($3, $1)
	*($1 + [164]) = CALL db_store_i64(*($4 + [8]), (int_64)7235159537265672192, *(*($0 + [8])), (int_64)7235159537265672192, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)7235159537265672192) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $103($2)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = (int_64)7235159537265672193
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $94($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $94($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18236])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $100($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18259])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18259])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $61(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $103($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $94($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [144]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [152])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18259])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [56])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [72])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [88])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [18259])
	CALL memcpy(($1 + [96]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [18259])
	CALL memcpy(($1 + [97]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [18259])
	CALL memcpy(($1 + [98]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [18259])
	CALL memcpy(($1 + [99]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [18259])
	CALL memcpy(($1 + [100]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [18259])
	CALL memcpy(($1 + [101]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[15]), [18259])
	CALL memcpy(($1 + [128]), *($0 + [4]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	$0 = CALL $64($0, ($1 + [144]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18259])
	CALL memcpy(($2 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [156]) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $102($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8216])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $100 (int_32 $0)
{
	return CALL $101([8360], $0)
}

void .FUNC $103 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16744])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16552]
	$3 = (((int_32)$1 * (int_32)[12]) + [16552])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $102 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8352]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8356])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8352]) = [1]
	$2 = ($2 << [16])
	*([0] + [8356]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8356])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8356]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8352]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8352]) = [1]
	$3 = ($3 << [16])
	*([0] + [8356]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8356])
	
.LABEL $label$10
	*([0] + [8356]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $88($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $85 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $103($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $98(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8340])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $98(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18484])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18484])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18484])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $69(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $66($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18484])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18484])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $75(CALL $74($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18259])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [64])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [80])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[15]), [18259])
	CALL memcpy(($1 + [96]), *($0 + [4]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	$0 = CALL $64($0, ($1 + [112]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18259])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [136])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18259])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [64]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [80]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[15]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	$0 = CALL $69($0, ($1 + [112]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [136]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18484])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18484])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18484])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18484])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [32]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18484])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18484])
	CALL memcpy(*($4 + [4]), ($0 + [40]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $100($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8340])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $100($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18484])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18484])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18484])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [18328])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18374])
	$6 = *($3)
	$7 = *(($6 + [8]))
	$9 = *($6)
	$8 = *($1 + [96])
	$10 = (int_64)
	*($1 + [96]) = $10($8 - $9))
	$7 = (int_64)
	*(($6 = ($1 + [104]))) = $7((int_64))(*($6) - $7) - (CASTING uint_64)(uint_32 (uint_64)($8 <= $9))))
	$11 = *($1)
	if ( ((int_64)$7 < (int_64)0) ){ goto $label$1 }
	*($5 + [40]) = [0]
	*($5 + [32]) = (int_64)0
	CALL $89(($5 + [32]), [40])
	$12 = (($5 + [16]) + [8])
	
.LOOP $label$2:
	CALL __udivti3(($5 + [16]), $10, $7, (int_64)10, (int_64)0)
	$9 = *($12)
	$8 = *($5 + [16])
	CALL __multi3($5, $8, $9, (int_64)10, (int_64)0)
	CALL $92(($5 + [32]), *((*([0]) + (CASTING uint_32)(uint_64 (int_64))($10 - *($5))))))
	$6 = ((uint_64)$10 > (uint_64)(int_64)9)
	$13 = ((int_64)$7 != (int_64)0)
	$14 = (int_64)($7 == 0)
	$10 = $8
	$7 = $9
	if ( ( $6 ? $13 : $14 ) ){ goto $label$2 }
	$6 = ($6 & [1])
	$6 = *($5 + [32])
	$13 = ( *($5 + [36]) ? uint_32($6 >> [1]) : $6 )
	if ( ($13 == 0) ){ goto $label$3 }
	$6 = ( *(($5 + [40])) ? (($5 + [32]) | [1]) : $6 )
	$13 = (($6 + $13) + [-1])
	if ( ((uint_32)$13 <= (uint_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$14 = *($6)
	*($6) = *($13)
	*($13) = $14
	$13 = ($13 + [-1])
	$6 = ($6 + [1])
	if ( ($6 <= $13) ){ goto $label$4 }
	
.LABEL $label$3
	$6 = ($1 + [112])
	if ( (*($1 + [112]) & [1]) ){ goto $label$6 }
	*($6) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*(($1 + [120]))) = [0]
	*(($1 + [116])) = [0]
	
.LABEL $label$5
	CALL $89($6, [0])
	*(($6 + [8])) = *((($5 + [32]) + [8]))
	*($6) = *($5 + [32])
	
.LABEL $label$1
	if ( ((uint_64)*(*($3 + [8])) >= (uint_64)*(*(*($3 + [12]) + [4]) + [88])) ){ goto $label$8 }
	$6 = *($3 + [16])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [48]))), [18075])
	$7 = (int_64)
	*($1 + [40]) = $7(*($1 + [40]) - *($6)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [18123])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [18145])
	goto $label$7 
	
.LABEL $label$8
	$10 = *($1 + [40])
	$6 = ($1 + [48])
	$7 = *($6)
	CALL eosio_assert(((int_64)*(($1 + [32])) == (int_64)$7), [17936])
	$10 = ((int_64)$10 + (int_64)*($1 + [24]))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [17979])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [17998])
	$13 = *($3 + [16])
	CALL eosio_assert(((int_64)$7 == (int_64)*($13 + [8])), [18075])
	$10 = (int_64)
	CALL eosio_assert(((int_64)$10($10 - *($13))) > (int_64)-4611686018427387904), [18123])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [18145])
	*($6) = $7
	*($1 + [40]) = $10
	$6 = CALL $97([8319])
	if ( ($6 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [17523])
	goto $label$11 
	
.LABEL $label$12
	if ( ($6 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$7 = (int_64)0
	
.LOOP $label$13:
	$13 = *(($6 + [8318]))
	if ( ((($13 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$14
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$13 }
	$8 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$9 
	
.LABEL $label$10
	$8 = (int_64)4
	
.LABEL $label$9
	CALL eosio_assert([1], [17621])
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$7 = $10
	$13 = [1]
	$14 = $6
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$7 = $10
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$13 = ((int_32)$6 < (int_32)[6])
	$14 = ($6 + [1])
	$6 = $14
	if ( $13 ){ goto $label$19 }
	$13 = [1]
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$13 = [0]
	
.LABEL $label$15
	CALL eosio_assert($13, [17670])
	*(($1 + [32])) = $8
	*(($1 + [24])) = (int_64)0
	
.LABEL $label$7
	CALL eosio_assert(((int_64)$11 == (int_64)*($1)), [18425])
	$6 = *($1 + [112])
	$13 = ( *(($1 + [116])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($13 + [136])
	$7 = (CASTING uint_64)(uint_32 $13)
	
.LOOP $label$20:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$20 }
	if ( ($6 <= [513]) ){ goto $label$22 }
	$13 = CALL $100($6)
	goto $label$21 
	
.LABEL $label$22
	$13 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $13
	
.LABEL $label$21
	*($5 + [36]) = $13
	*($5 + [32]) = $13
	*($5 + [40]) = ($13 + $6)
	CALL $71(($5 + [32]), $1)
	CALL db_update_i64(*(($1 + [156])), $2, $13, $6)
	if ( ($6 <= [513]) ){ goto $label$25 }
	CALL $103($13)
	if ( (uint_64)($11 <= *($0 + [16])) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	if ( ((uint_64)$11 >= (uint_64)*($0 + [16])) ){ goto $label$23 }
	
.LABEL $label$24
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$23
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
}

int_32 .FUNC $36 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [18185])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $60($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [18185])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $37 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $103($0)
	
.LABEL $label$1
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ((int_64)*($2) * (int_64)560)
	$2 = CALL $97([8319])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17523])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($2 + [8318]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17568])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)4
	
.LABEL $label$1
	*($0 + [8]) = $4
	*($0) = $3
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17621])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$4 = $3
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	$4 = $3
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$2 < (int_32)[6])
	$0 = ($2 + [1])
	$2 = $0
	if ( $5 ){ goto $label$12 }
	$6 = [1]
	$2 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL eosio_assert($6, [17670])
	return 
	
.LABEL $label$8
	CALL eosio_assert([0], [17670])
	return 
	
.LABEL $label$7
	CALL eosio_assert([0], [17670])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [18328])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18374])
	$6 = *($1)
	$7 = *($3)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [48]))), [17936])
	$8 = ((int_64)*($1 + [40]) + (int_64)*($7))
	*($1 + [40]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17979])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [17998])
	$7 = *($3)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [64]))), [17936])
	$8 = ((int_64)*($1 + [56]) + (int_64)*($7))
	*($1 + [56]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17979])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [17998])
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [80]))), [17936])
	$8 = ((int_64)*($1 + [72]) + (int_64)*($7))
	*($1 + [72]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [17979])
	CALL eosio_assert(((int_64)*($1 + [72]) < (int_64)4611686018427387904), [17998])
	$3 = *($3 + [8])
	$9 = *(($3 + [8]))
	$10 = *($1 + [96])
	$8 = ((int_64)$10 + (int_64)*($3))
	*($1 + [96]) = $8
	$9 = ((int_64)((int_64)$9 + (int_64)*($3)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($8 <= $10)))
	*(($3 = ($1 + [104]))) = $9
	if ( ((int_64)$9 <= (int_64)-1) ){ goto $label$1 }
	*($5 + [40]) = [0]
	*($5 + [32]) = (int_64)0
	CALL $89(($5 + [32]), [40])
	$11 = (($5 + [16]) + [8])
	
.LOOP $label$2:
	CALL __udivti3(($5 + [16]), $8, $9, (int_64)10, (int_64)0)
	$12 = *($11)
	$10 = *($5 + [16])
	CALL __multi3($5, $10, $12, (int_64)10, (int_64)0)
	CALL $92(($5 + [32]), *((*([0]) + (CASTING uint_32)(uint_64 (int_64))($8 - *($5))))))
	$3 = ((uint_64)$8 > (uint_64)(int_64)9)
	$7 = ((int_64)$9 != (int_64)0)
	$13 = (int_64)($9 == 0)
	$8 = $10
	$9 = $12
	if ( ( $3 ? $7 : $13 ) ){ goto $label$2 }
	$3 = ($3 & [1])
	$3 = *($5 + [32])
	$7 = ( *($5 + [36]) ? uint_32($3 >> [1]) : $3 )
	if ( ($7 == 0) ){ goto $label$3 }
	$3 = ( *(($5 + [40])) ? (($5 + [32]) | [1]) : $3 )
	$7 = (($3 + $7) + [-1])
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$13 = *($3)
	*($3) = *($7)
	*($7) = $13
	$7 = ($7 + [-1])
	$3 = ($3 + [1])
	if ( ($3 <= $7) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = ($1 + [112])
	if ( (*($1 + [112]) & [1]) ){ goto $label$6 }
	*($3) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*(($1 + [120]))) = [0]
	*(($1 + [116])) = [0]
	
.LABEL $label$5
	CALL $89($3, [0])
	*(($3 + [8])) = *((($5 + [32]) + [8]))
	*($3) = *($5 + [32])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [18425])
	$3 = *(($1 + [112]))
	$7 = ( *(($1 + [116])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [136])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$7:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$7 }
	if ( ($3 <= [513]) ){ goto $label$9 }
	$7 = CALL $100($3)
	goto $label$8 
	
.LABEL $label$9
	$7 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$8
	*($5 + [36]) = $7
	*($5 + [32]) = $7
	*($5 + [40]) = ($7 + $3)
	CALL $71(($5 + [32]), $1)
	CALL db_update_i64(*(($1 + [156])), $2, $7, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$12 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $103($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$10 }
	
.LABEL $label$11
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$10
	$global$0 = ($5 + [48])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18236])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $100($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18259])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [18259])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [18259])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $31(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $103($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $94($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}