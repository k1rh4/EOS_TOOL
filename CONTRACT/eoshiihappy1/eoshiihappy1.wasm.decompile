(data (i32.const 8192) "\n\00")
(data (i32.const 8194) "times: %d\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8291) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8342) "error reading iterator\00")
(data (i32.const 8365) "read\00")
(data (i32.const 8370) "cannot create objects in table of another contract\00")
(data (i32.const 8421) "write\00")
(data (i32.const 8427) "cannot pass end iterator to modify\00%d\00")
(data (i32.const 8465) "object passed to modify is not in multi_index\00%u\00")
(data (i32.const 8514) "cannot modify objects in table of another contract\00")
(data (i32.const 8565) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8624) "in newlucky\00")
(data (i32.const 8636) "\e6\b4\bb\e5\8a\a8\e5\90\8d\e7\a7\b0\e5\a4\aa\e9\95\bf\00%llu\00")
(data (i32.const 8660) "add a new lucky\00")
(data (i32.const 8676) "update a lucky\00")
(data (i32.const 8691) "get\00")
(data (i32.const 8695) "in sign:\00")
(data (i32.const 8704) "\e5\8a\a0\e5\af\86\e4\bf\a1\e6\81\af\e6\a0\bc\e5\bc\8f\e4\b8\8d\e6\ad\a3\e7\a1\ae\00")
(data (i32.const 8732) "\e7\ad\be\e5\88\b0\e4\bf\a1\e6\81\af\e6\a0\bc\e5\bc\8f\e4\b8\8d\e6\ad\a3\e7\a1\ae\00")
(data (i32.const 8760) "\e6\82\a8\e5\8f\82\e4\b8\8e\e7\9a\84\e6\b4\bb\e5\8a\a8\e4\b8\8d\e5\ad\98\e5\9c\a8!\00")
(data (i32.const 8789) "-\00")
(data (i32.const 8791) "in unsign: \00")
(data (i32.const 8803) "cannot pass end iterator to erase\00")
(data (i32.const 8837) "cannot increment end iterator\00")
(data (i32.const 8867) "object passed to erase is not in multi_index\00")
(data (i32.const 8912) "cannot erase objects in table of another contract\00")
(data (i32.const 8962) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9015) "in importbase:\00")
(data (i32.const 9030) "\e5\90\8d\e5\8d\95\e9\87\8d\e5\a4\8d\00")
(data (i32.const 9043) "add a new one %s\00")
(data (i32.const 9060) "unexpected error in fixed_key constructor\00")
(data (i32.const 9102) "in removebase: \00")
(data (i32.const 9118) "\e6\82\a8\e8\a6\81\e5\88\a0\e9\99\a4\e7\9a\84\e5\90\8d\e5\8d\95\e4\b8\8d\e5\ad\98\e5\9c\a8!\00")
(data (i32.const 9150) "\e5\8d\95\e6\ac\a1\e5\be\97\e5\a5\96\e4\ba\ba\e6\95\b0\e9\9c\80\e5\9c\a8(1..50)\e5\8c\ba\e9\97\b4\00")
(data (i32.const 9188) "\e5\80\99\e9\80\89\e5\90\8d\e5\8d\95\e4\b8\ba\e7\a9\ba\ef\bc\8c\e6\89\80\e6\9c\89\e4\ba\ba\e9\83\bd\e5\be\97\e8\bf\87\e5\a5\96\e4\ba\86\e5\93\87\00")
(data (i32.const 9237) "\e5\bd\93\e5\89\8d\e8\bd\ae\e6\ac\a1PKEY\e5\b7\b2\e7\bb\8f\e7\bb\93\e6\9d\9f!\00")
(data (i32.const 9267) ",\00")
(data (i32.const 9269) "\e5\be\85\e6\8a\bd\e5\a5\96\e4\ba\ba\e6\95\b0\e5\a4\a7\e4\ba\8e0\e4\b8\94\e4\b8\8d\e8\83\bd\e5\a4\a7\e4\ba\8e1000\00")
(data (i32.const 9311) "\e5\8d\95\e6\ac\a1\e5\be\97\e5\a5\96\e4\ba\ba\e6\95\b0\e9\9c\80\e5\9c\a8(1..30)\e5\8c\ba\e9\97\b4\00")
(data (i32.const 9349) "\e8\bd\ae\e6\ac\a1\e5\90\8d\e7\a7\b0\e5\a4\aa\e9\95\bf\00")
(data (i32.const 9368) "\e5\a5\96\e9\a1\b9\e5\90\8d\e7\a7\b0\e5\a4\aa\e9\95\bf\00")
(data (i32.const 9387) "in newroundv2\00")
(data (i32.const 9401) "\e6\b2\a1\e6\9c\89\e7\bb\93\e6\9d\9f\e7\9a\84\e6\b4\bb\e5\8a\a8\e4\b8\8d\e8\83\bd\e5\88\a0\e9\99\a4!\00")
(data (i32.const 17856) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "prints" (func $fimport$0 (param i32)))
(import "env" "memcpy" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$2 (param i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$3 (result i32)))
(import "env" "read_action_data" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$5 (param i64)))
(import "env" "eosio_assert" (func $fimport$6 (param i32 i32)))
(import "env" "printui" (func $fimport$7 (param i64)))
(import "env" "current_time" (func $fimport$8 (result i64)))
(import "env" "db_find_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "db_next_i64" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$12 (param i32 i32)))
(import "env" "printn" (func $fimport$13 (param i64)))
(import "env" "read_transaction" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$15 (result i32)))
(import "env" "tapos_block_num" (func $fimport$16 (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$18 (result i64)))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$20 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$21 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$22 (param i32)))
(import "env" "db_idx256_lowerbound" (func $fimport$23 (param i64 i64 i64 i32 i32 i32) (result i32)))
(import "env" "db_idx256_store" (func $fimport$24 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx256_find_primary" (func $fimport$25 (param i64 i64 i64 i32 i32 i64) (result i32)))
(import "env" "db_idx256_remove" (func $fimport$26 (param i32)))
(import "env" "abort" (func $fimport$27))
(import "env" "memset" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$40 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$41 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$44 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$46 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$47 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$48 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $4))
(export "_Znwj" (func $97))
(export "_ZdlPv" (func $99))
(export "_Znaj" (func $98))
(export "_ZdaPv" (func $100))
(export "_ZnwjSt11align_val_t" (func $101))
(export "_ZnajSt11align_val_t" (func $102))
(export "_ZdlPvSt11align_val_t" (func $103))
(export "_ZdaPvSt11align_val_t" (func $104))
(table $0 15 15 anyfunc)
(elem (i32.const 1) $5 $7 $9 $11 $13 $15 $16 $18 $20 $21 $23 $121 $123 $125)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17936))
(global $global$2 i32 (i32.const 17936))


int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $133($0)
	
.LABEL $label$1
}

int_32 .FUNC $94 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [60]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [68])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [40])))
	if ( (*($3 + [20]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8691])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [2])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $96($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [2]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($5) - $3) > (uint_32)[3]), [8365])
	CALL memcpy($7, *($2), [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$7 = ($7 + [4])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [2])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($2 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $117($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [2]))
	$3 = ($2 + ($3 << [2]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [2]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $130($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9436])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $130($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8421])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[3]), [8421])
	$7 = ($0 + [4])
	CALL memcpy(*($7), $6, [4])
	$4 = (*($7) + [4])
	*($7) = $4
	$6 = ($6 + [4])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [24]) = *(*($3 + [12]))
	$3 = *($0)
	CALL eosio_assert([1], [8421])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8421])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8421])
	CALL memcpy(($2 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8421])
	CALL memcpy(($2 + [24]), ($1 + [24]), [8])
	$4 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($3 + [8]), (int_64)-4417020450001911808, *(*($0 + [8])), $4, $2, [32])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $117($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8365])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8365])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8365])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8365])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $110(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $126(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8511], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $110(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $110(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $122 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [13] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $124($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $124($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $124($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $124($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [17856]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $124($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $124($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $124($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $130 (int_32 $0)
{
	return CALL $131([9456], $0)
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $132($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8204])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $132 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9448]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9452])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9448]) = [1]
	$2 = ($2 << [16])
	*([0] + [9452]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9452])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9452]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9448]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9448]) = [1]
	$3 = ($3 << [16])
	*([0] + [9452]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9452])
	
.LABEL $label$10
	*([0] + [9452]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $133 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17840])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17648]
	$3 = (((int_32)$1 * (int_32)[12]) + [17648])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	if ( ($0 == 0) ){ goto $label$1 }
	*($4 + [15]) = $0
	CALL prints_l(($4 + [15]), [1])
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [12]) = $1
	$0 = CALL $122([12], ($2 + [11]), [-1], $0, *($2 + [12]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [40]) = (int_64)0
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [16])) = *(($2 + [16]))
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx256_lowerbound(*($2), *($2 + [8]), (int_64)4157011819347963904, $3, [2], ($3 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [40])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [76]) == (int_32)$7), [8291])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $41($7, CALL $fimport$9(*($7), *($7 + [8]), (int_64)4157011819347963904, $6))
	CALL eosio_assert(((int_32)*($4 + [76]) == (int_32)$7), [8291])
	
.LABEL $label$2
	*($4 + [84]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [48])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $122([14], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8465])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8514])
	*($1 + [36]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [8565])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [20])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [20])
	$7 = ( *(($1 + [24])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $130($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $71($5, $1)
	CALL db_update_i64(*($1 + [48]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $133($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$18()), [8370])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([88])) + [20 align=4]) = (int_64)0
	*($3 + [28 align=4]) = (int_64)0
	*($3 + [36 align=4]) = (int_64)0
	*($3 + [60 align=4]) = (int_64)0
	*($3 + [68]) = [0]
	*($3 + [72]) = $1
	CALL $83(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [76])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $84(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($3 + [60]) & [1]) ){ goto $label$8 }
	if ( (*($3 + [32]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [68])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [40])))
	if ( (*($3 + [20]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8465])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8514])
	*($1 + [32]) = (*(*(*($3) + [4]) + [32]) + [-1])
	$6 = *($1)
	CALL eosio_assert([1], [8565])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [20])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [20])
	$7 = ( *(($1 + [24])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $130($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $71($5, $1)
	CALL db_update_i64(*($1 + [48]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $133($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [76]) == (int_32)$0), [8867])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8912])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [8962])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$10
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($6 + [72])))
	
.LABEL $label$14
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [24])))
	
.LABEL $label$15
	CALL _ZdlPv($6)
	
.LABEL $label$13
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [80]))
	$6 = *($1 + [84])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$17 }
	*(($2 + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$6 = CALL db_idx256_find_primary(*($0), *($0 + [8]), (int_64)4157011819347963904, $2, [2], *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL db_idx256_remove($6)
	
.LABEL $label$16
	$global$0 = ($2 + [32])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8342])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $130($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [24]) = [0]
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72]) = [0]
	*($5 + [76]) = $0
	CALL $81(($3 + [32]), $5)
	*($5 + [84]) = [-1]
	*($5 + [80]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $80(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $133($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [72])))
	
.LABEL $label$10
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8465])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8514])
	*($1 + [32]) = (*(*($3)) + [1])
	$6 = *($1)
	CALL eosio_assert([1], [8565])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [20])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [20])
	$7 = ( *(($1 + [24])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $130($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $71($5, $1)
	CALL db_update_i64(*($1 + [48]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $133($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $47($0, *($1))
	CALL $47($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8342])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $130($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [20 align=4]) = (int_64)0
	*($5 + [28 align=4]) = (int_64)0
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [60 align=4]) = (int_64)0
	*($5 + [68]) = [0]
	*($5 + [72]) = $0
	CALL $85(($3 + [32]), $5)
	*($5 + [76]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $84(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $133($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [60]) & [1]) ){ goto $label$14 }
	if ( (*($1 + [32]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [68])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [40])))
	if ( (*($1 + [20]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [128])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [16]))) = *(($1 + [48]))
	*(($4 = (($2 + [32]) + [24]))) = *(($1 + [56]))
	*($2 + [32]) = *($1 + [32])
	*($2 + [40]) = *(($1 + [40]))
	$5 = *($1 + [16])
	$6 = *($1 + [8])
	$7 = *($1)
	$8 = *($1 + [64])
	$9 = CALL $106(($2 + [16]), ($1 + [68]))
	$10 = CALL $106($2, ($1 + [80]))
	$11 = *($1 + [92])
	*((($2 + [64]) + [24])) = *($4)
	*((($2 + [64]) + [16])) = *($3)
	*($2 + [72]) = *($2 + [40])
	*($2 + [64]) = *($2 + [32])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$4 = CALL $106(($2 + [96]), $10)
	$3 = CALL $106(($2 + [112]), $9)
	CALL void $0((int_32 $7), (int_64 $6), (int_64 $5), (int_64 ($2 + [64])), (int_32 ($8 & [65535])), (int_32 $3), (int_32 $4), (int_32 ($11 & [65535])), (int_32 $1))
	if ( (*($2 + [96]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [112]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($3 + [8]))
	$1 = [1]
	if ( ((*($10) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($10) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($9) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($9) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($9 + [8]))
	$global$0 = ($2 + [128])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [128])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8365])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8365])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8365])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [8365])
	CALL memcpy(($3 + [32]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [8365])
	CALL memcpy(($3 + [64]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	CALL $26(*($1), ($3 + [68]))
	CALL $26(*($1), ($3 + [80]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[1]), [8365])
	CALL memcpy(($3 + [92]), *($1 + [4]), [2])
	*($1 + [4]) = (*($1 + [4]) + [2])
}

int_32 .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $128 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $118())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $129($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $130($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8365])
	CALL memcpy(($4 + [272]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8365])
	CALL memcpy((($4 + [272]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [188])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = [0]
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [260])) = (int_64)0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [280])
	$1 = *($4 + [272])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $133($2)
	
.LABEL $label$5
	CALL $24($4)
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $9 (int_32 $0)
{
	CALL require_auth(*($0))
	CALL $25($0, (int_64)101, (int_64)10000000)
	CALL $25($0, (int_64)102, (int_64)300000000)
	CALL $25($0, (int_64)103, (int_64)2000000)
	CALL $25($0, (int_64)104, (int_64)50000000)
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $130($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8365])
	CALL memcpy(($4 + [280]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [196])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = [0]
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*($4 + [240]) = $0
	*(($4 + [268])) = (int_64)0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [280])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $133($2)
	
.LABEL $label$5
	CALL $24(($4 + [8]))
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL prints([9102])
	CALL printui($1)
	CALL printn($2)
	$4 = ($0 + [72])
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [44]) == (int_32)$4), [8291])
	goto $label$1 
	
.LABEL $label$2
	$7 = CALL db_find_i64(*($4), *(($0 + [80])), (int_64)-8173743967435751424, $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$8 = CALL $28($4, $7)
	CALL eosio_assert(((int_32)*($8 + [44]) == (int_32)$4), [8291])
	goto $label$1 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$1
	*($3 + [4]) = $8
	*($3) = $4
	$9 = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8760])
	$10 = ($0 + [152])
	$6 = *(($0 + [180]))
	$8 = *(($0 + [176]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$9:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$2) ){ goto $label$8 }
	$6 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($5 + [76]) == (int_32)$10), [8291])
	$9 = $5
	goto $label$6 
	
.LABEL $label$7
	$7 = CALL db_find_i64(*($10), *(($0 + [160])), (int_64)4157011819347963904, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$9 = CALL $41($10, $7)
	CALL eosio_assert(((int_32)*($9 + [76]) == (int_32)$10), [8291])
	
.LABEL $label$6
	$7 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($7, [9118])
	if ( ((int_64)*($9 + [8]) != (int_64)$1) ){ goto $label$10 }
	CALL eosio_assert($7, [8803])
	CALL eosio_assert($7, [8837])
	$7 = CALL db_next_i64(*($9 + [80]), ($3 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	CALL $41($10, $7)
	
.LABEL $label$11
	CALL $42($10, $9)
	
.LABEL $label$10
	$9 = ($0 + [112])
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$14 }
	
.LOOP $label$16:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$15 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$9), [8291])
	if ( ((int_64)*($8 + [8]) == (int_64)$1) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$7 = CALL db_find_i64(*($9), *(($0 + [120])), (int_64)-8173734935981805696, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$12 }
	$8 = CALL $32($9, $7)
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$9), [8291])
	if ( ((int_64)*($8 + [8]) != (int_64)$1) ){ goto $label$12 }
	
.LABEL $label$13
	CALL eosio_assert([1], [8803])
	CALL eosio_assert([1], [8837])
	$7 = CALL db_next_i64(*($8 + [84]), ($3 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$17 }
	CALL $32($9, $7)
	
.LABEL $label$17
	CALL $37($9, $8)
	
.LABEL $label$12
	$7 = *($3 + [4])
	$2 = *($0)
	*($3 + [8]) = $3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8427])
	CALL $43($4, $7, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)-4352394788318740481) ){ goto $label$11 }
	if ( ((int_64)$2 > (int_64)6112261151641305087) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-4352394788318740480) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-3102726929166368768) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)4923678796282298368) ){ goto $label$1 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [1]
	*($3 + [72]) = *($3 + [96])
	CALL $6($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 <= (int_64)-7297667123716243457) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-7297667123716243456) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-7297655042967142400) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4997502823676346368) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [2]
	*($3 + [40]) = *($3 + [128])
	CALL $8($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)6112261151641305088) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)8406896575913295872) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [3]
	*($3) = *($3 + [168])
	CALL $10($1, $1, $3)
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-7297769688807768064) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-7297667123716259840) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [4]
	*($3 + [56]) = *($3 + [112])
	CALL $12($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [156]) = [0]
	*($3 + [152]) = [5]
	*($3 + [16]) = *($3 + [152])
	CALL $14($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [148]) = [0]
	*($3 + [144]) = [6]
	*($3 + [24]) = *($3 + [144])
	CALL $8($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [124]) = [0]
	*($3 + [120]) = [7]
	*($3 + [48]) = *($3 + [120])
	CALL $17($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [108]) = [0]
	*($3 + [104]) = [8]
	*($3 + [64]) = *($3 + [104])
	CALL $19($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [92]) = [0]
	*($3 + [88]) = [9]
	*($3 + [80]) = *($3 + [88])
	CALL $6($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [140]) = [0]
	*($3 + [136]) = [10]
	*($3 + [32]) = *($3 + [136])
	CALL $22($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [164]) = [0]
	*($3 + [160]) = [11]
	*($3 + [8]) = *($3 + [160])
	CALL $22($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $119([0])
	$global$0 = ($3 + [176])
}

void .FUNC $5 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)$3), [8291])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-8173743967435751424, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $28($3, $6)
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)$3), [8291])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8760])
	CALL eosio_assert(((int_32)*($7 + [38]) == (int_32)[3]), [9401])
	CALL eosio_assert($6, [8803])
	CALL eosio_assert($6, [8837])
	$6 = CALL db_next_i64(*($7 + [48]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $28($3, $6)
	
.LABEL $label$5
	CALL $58($3, $7)
	$6 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-4417020450001911808, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$7 = ($0 + [32])
	$6 = CALL $55($7, $6)
	
.LOOP $label$7:
	if ( ((int_64)*($6 + [8]) != (int_64)$1) ){ goto $label$8 }
	CALL eosio_assert([1], [8803])
	CALL eosio_assert([1], [8837])
	$5 = [0]
	$4 = CALL db_next_i64(*($6 + [36]), ($2 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	$5 = CALL $55($7, $4)
	
.LABEL $label$9
	CALL $59($7, $6)
	$6 = $5
	
.LABEL $label$8
	if ( $6 ){ goto $label$7 }
	
.LABEL $label$6
	$6 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)-8173734935981805696, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$10 }
	$7 = ($0 + [112])
	$6 = CALL $32($7, $6)
	
.LOOP $label$11:
	if ( ((int_64)*($6 + [8]) != (int_64)$1) ){ goto $label$12 }
	CALL eosio_assert([1], [8803])
	CALL eosio_assert([1], [8837])
	$5 = [0]
	$4 = CALL db_next_i64(*($6 + [84]), ($2 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$5 = CALL $32($7, $4)
	
.LABEL $label$13
	CALL $37($7, $6)
	$6 = $5
	
.LABEL $label$12
	if ( $6 ){ goto $label$11 }
	
.LABEL $label$10
	$6 = CALL db_lowerbound_i64(*($0 + [152]), *(($0 + [160])), (int_64)4157011819347963904, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	$7 = ($0 + [152])
	$6 = CALL $41($7, $6)
	
.LOOP $label$15:
	if ( ((int_64)*($6 + [8]) != (int_64)$1) ){ goto $label$16 }
	CALL eosio_assert([1], [8803])
	CALL eosio_assert([1], [8837])
	$5 = [0]
	$4 = CALL db_next_i64(*($6 + [80]), ($2 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$17 }
	$5 = CALL $41($7, $4)
	
.LABEL $label$17
	CALL $42($7, $6)
	$6 = $5
	
.LABEL $label$16
	if ( $6 ){ goto $label$15 }
	
.LABEL $label$14
	$6 = CALL db_lowerbound_i64(*($0 + [192]), *(($0 + [200])), (int_64)-8173734949705584640, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	$7 = ($0 + [192])
	$6 = CALL $46($7, $6)
	
.LOOP $label$19:
	if ( ((int_64)*($6 + [8]) != (int_64)$1) ){ goto $label$20 }
	CALL eosio_assert([1], [8803])
	CALL eosio_assert([1], [8837])
	$5 = [0]
	$4 = CALL db_next_i64(*($6 + [76]), ($2 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$21 }
	$5 = CALL $46($7, $4)
	
.LABEL $label$21
	CALL $60($7, $6)
	$6 = $5
	
.LABEL $label$20
	if ( $6 ){ goto $label$19 }
	
.LABEL $label$18
	$global$0 = ($2 + [16])
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = $1
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *($1 + [4])
	if ( ($4 == 0) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = $4
	$4 = *($2)
	if ( $4 ){ goto $label$5 }
	
.LABEL $label$4
	$3 = *($2 + [4])
	if ( $3 ){ goto $label$2 }
	$5 = ($2 + [8])
	$6 = [0]
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*($3 + [8]) = *($2 + [8])
	$5 = ($2 + [8])
	$6 = [1]
	
.LABEL $label$1
	$7 = *(($2 + [8]))
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$10 }
	*($7 + [4]) = $3
	$7 = *($2 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($7) = $3
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$11 }
	$4 = *($7 + [4])
	$7 = *($2 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$4 = [0]
	$0 = $3
	$7 = *($2 + [12])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$8 }
	
.LABEL $label$9
	$8 = *($1 + [8])
	*($5) = $8
	*(($8 + ( [0] ? [4] : ((int_32)*(*($1 + [8])) == (int_32)$1) ))) = $2
	*(($5 = *($1)) + [8]) = $2
	*($2) = $5
	$5 = *($1 + [4])
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*(($2 + [12])) = *($1 + [12])
	$0 = ( $2 ? $0 : ((int_32)$0 == (int_32)$1) )
	if ( ($7 & [255]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (($7 & [255]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	if ( ($0 == 0) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$13 }
	*($3 + [12]) = [1]
	return 
	
.LABEL $label$13
	
.LOOP $label$21:
	$1 = *($4 + [12])
	$2 = *($4 + [8])
	if ( ((int_32)*($2) == (int_32)$4) ){ goto $label$33 }
	if ( (($1 & [255]) == 0) ){ goto $label$32 }
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$33
	if ( (($1 & [255]) == 0) ){ goto $label$31 }
	$1 = $4
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$32
	*(($4 + [12])) = [1]
	*($2 + [12]) = [0]
	$1 = *($2 + [4])
	$3 = *($1)
	*($2 + [4]) = $3
	if ( ($3 == 0) ){ goto $label$34 }
	*($3 + [8]) = $2
	
.LABEL $label$34
	*($1 + [8]) = *($2 + [8])
	*((($3 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($3) == (int_32)$2) ))) = $1
	*($1) = $2
	*($2 + [8]) = $1
	$2 = *($4)
	$0 = ( $4 ? $0 : ((int_32)$0 == (int_32)$2) )
	$4 = *($2 + [4])
	$2 = *($4)
	if ( $2 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$31
	*(($4 + [12])) = [1]
	$1 = *($4 + [4])
	*($2) = $1
	*($2 + [12]) = [0]
	if ( ($1 == 0) ){ goto $label$35 }
	*($1 + [8]) = $2
	
.LABEL $label$35
	*(($4 + [8])) = *($2 + [8])
	$3 = *($2 + [8])
	if ( ((int_32)*($3) == (int_32)$2) ){ goto $label$37 }
	*($3 + [4]) = $4
	goto $label$36 
	
.LABEL $label$37
	*($3) = $4
	$1 = *($2)
	
.LABEL $label$36
	*(($2 + [8])) = $4
	*(($4 + [4])) = $2
	$0 = ( $4 ? $0 : ((int_32)$0 == (int_32)$2) )
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$29 }
	
.LABEL $label$30
	if ( (*($2 + [12]) == 0) ){ goto $label$28 }
	
.LABEL $label$29
	$4 = *($1 + [4])
	if ( ($4 == 0) ){ goto $label$38 }
	if ( (*($4 + [12]) == 0) ){ goto $label$27 }
	
.LABEL $label$38
	*($1 + [12]) = [0]
	$4 = *($1 + [8])
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$39 }
	if ( (*($4 + [12]) & [255]) ){ goto $label$22 }
	
.LABEL $label$39
	*($4 + [12]) = [1]
	return 
	
.LABEL $label$28
	$3 = ($2 + [12])
	goto $label$26 
	
.LABEL $label$27
	if ( ($2 == 0) ){ goto $label$41 }
	if ( (*($2 + [12]) == 0) ){ goto $label$40 }
	$4 = *($1 + [4])
	
.LABEL $label$41
	*($4 + [12]) = [1]
	*($1 + [12]) = [0]
	$2 = *($4)
	*(($1 + [4])) = $2
	if ( ($2 == 0) ){ goto $label$42 }
	*($2 + [8]) = $1
	
.LABEL $label$42
	$3 = ($1 + [12])
	$2 = ($4 + [12])
	*($4 + [8]) = *($1 + [8])
	*((($0 = *($1 + [8])) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$1) ))) = $4
	*($1 + [8]) = $4
	*($4) = $1
	$4 = ($4 + [8])
	goto $label$25 
	
.LABEL $label$40
	$3 = ($2 + [12])
	
.LABEL $label$26
	$2 = ($1 + [12])
	$4 = ($1 + [8])
	
.LABEL $label$25
	$4 = *($4)
	*($2) = *($4 + [12])
	*($4 + [12]) = [1]
	$2 = *($4)
	$0 = *($2 + [4])
	*($4) = $0
	*($3) = [1]
	if ( ($0 == 0) ){ goto $label$43 }
	*($0 + [8]) = $4
	
.LABEL $label$43
	*($2 + [8]) = *($4 + [8])
	*((($0 = *($4 + [8])) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$4) ))) = $2
	*($4 + [8]) = $2
	*(($2 + [4])) = $4
	return 
	
.LABEL $label$24
	if ( (*($2 + [12]) == 0) ){ goto $label$18 }
	
.LABEL $label$23
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$44 }
	if ( (*($1 + [12]) == 0) ){ goto $label$17 }
	
.LABEL $label$44
	*($4 + [12]) = [0]
	$4 = *($4 + [8])
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$20 }
	if ( (*($4 + [12]) == 0) ){ goto $label$19 }
	
.LABEL $label$22
	$2 = *($4 + [8])
	$4 = *(($2 + (((int_32)*($2) == (int_32)$4) << [2])))
	goto $label$21 
	
.LABEL $label$20
	$4 = $0
	
.LABEL $label$19
	*($4 + [12]) = [1]
	return 
	
.LABEL $label$18
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($1 + [12]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	*($2 + [12]) = [1]
	*($4 + [12]) = [0]
	$0 = *($2 + [4])
	*($4) = $0
	if ( ($0 == 0) ){ goto $label$45 }
	*($0 + [8]) = $4
	
.LABEL $label$45
	$1 = ($4 + [12])
	$0 = ($2 + [12])
	*($2 + [8]) = *($4 + [8])
	*((($3 = *($4 + [8])) + ( [0] ? [4] : ((int_32)*($3) == (int_32)$4) ))) = $2
	*($4 + [8]) = $2
	*(($2 + [4])) = $4
	$4 = ($2 + [8])
	goto $label$14 
	
.LABEL $label$15
	$1 = ($1 + [12])
	$0 = ($4 + [12])
	$4 = ($4 + [8])
	
.LABEL $label$14
	$4 = *($4)
	*($0) = *($4 + [12])
	*($4 + [12]) = [1]
	$2 = *($4 + [4])
	$0 = *($2)
	*($4 + [4]) = $0
	*($1) = [1]
	if ( ($0 == 0) ){ goto $label$46 }
	*($0 + [8]) = $4
	
.LABEL $label$46
	*($2 + [8]) = *($4 + [8])
	*((($0 = *($4 + [8])) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$4) ))) = $2
	*($4 + [8]) = $2
	*($2) = $4
	return 
	
.LABEL $label$6
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL prints([8192])
	$6 = ($0 + [4])
	*($0) = $6
	*($0 + [4 align=4]) = (int_64)0
	if ( ((uint_32)$2 >= (uint_32)$1) ){ goto $label$10 }
	if ( ((uint_32)uint_32($1 >> [1]) >= (uint_32)$2) ){ goto $label$9 }
	$7 = [0]
	$8 = ($0 + [4])
	$9 = ($0 + [8])
	$10 = [0]
	$11 = [0]
	if ( [0] ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	if ( ($1 == 0) ){ goto $label$6 }
	$10 = [0]
	$3 = ($0 + [4])
	$4 = ($0 + [8])
	$11 = [0]
	if ( [0] ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$9
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	$10 = CALL $127([8290])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$13 }
	*($5 + [32]) = ($10 << [1])
	$11 = (($5 + [32]) | [1])
	if ( $10 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$13 = (($10 + [16]) & [-16])
	$11 = CALL _Znwj($13)
	*($5 + [32]) = ($13 | [1])
	*($5 + [40]) = $11
	*($5 + [36]) = $10
	
.LABEL $label$12
	CALL memcpy($11, [8290], $10)
	
.LABEL $label$11
	$7 = [0]
	*(($11 + $10)) = [0]
	$15 = ($0 + [8])
	$8 = *($15)
	if ( ((uint_32)$8 >= (uint_32)$2) ){ goto $label$2 }
	$16 = ($5 + [80])
	$7 = [0]
	$9 = [0]
	
.LOOP $label$14:
	$10 = ($10 | [1])
	$10 = ($9 << [1])
	$14 = ((uint_32)((*(($4 + $10)) + *(($3 + $10))) + ((*(($4 + $10)) + *(($3 + $10))) << [4])) % (uint_32)$1)
	$10 = *($6)
	if ( ($10 == 0) ){ goto $label$18 }
	$11 = $6
	$13 = *($10 + [16])
	if ( ((uint_32)$14 >= (uint_32)$13) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$18
	$10 = $6
	$11 = $6
	$17 = [3]
	goto $label$15 
	
.LABEL $label$17
	$17 = [11]
	goto $label$15 
	
.LABEL $label$16
	$17 = [2]
	
.LABEL $label$15
	
.LOOP $label$19:
	goto $label$39 
	
.LABEL $label$43
	$11 = $10
	$10 = $13
	$13 = *($10 + [16])
	if ( ((uint_32)$14 >= (uint_32)$13) ){ goto $label$30 }
	$17 = [11]
	goto $label$19 
	
.LABEL $label$42
	$13 = *($10)
	if ( $13 ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$41
	if ( ((uint_32)$13 >= (uint_32)$14) ){ goto $label$25 }
	$17 = [10]
	goto $label$19 
	
.LABEL $label$40
	$11 = ($10 + [4])
	$13 = *($10 + [4])
	if ( ($13 == 0) ){ goto $label$28 }
	$17 = [0]
	goto $label$19 
	
.LABEL $label$39
	$10 = $11
	goto $label$29 
	
.LABEL $label$38
	$9 = ($9 + [1])
	if ( (*($11) == 0) ){ goto $label$24 }
	$17 = [4]
	goto $label$19 
	
.LABEL $label$37
	if ( ((int_32)$9 == (int_32)[16]) ){ goto $label$22 }
	$17 = [5]
	goto $label$19 
	
.LABEL $label$36
	$7 = ($7 + [1])
	if ( ($8 <= $2) ){ goto $label$14 }
	goto $label$2 
	
.LABEL $label$35
	$9 = ($9 + [1])
	$11 = $10
	if ( *($11) ){ goto $label$23 }
	$17 = [7]
	goto $label$19 
	
.LABEL $label$34
	*(($13 = CALL _Znwj([20]))) = (int_64)0
	*($13 + [8]) = $10
	*($11) = $13
	*($13 + [16]) = $14
	$10 = *(*($0))
	if ( ($10 == 0) ){ goto $label$20 }
	$17 = [8]
	goto $label$19 
	
.LABEL $label$33
	*($0) = $10
	$13 = *($11)
	$17 = [9]
	goto $label$19 
	
.LABEL $label$32
	CALL $2(*(($0 + [4])), $13)
	$8 = (*($15) + [1])
	*($15) = $8
	if ( ((int_32)$9 != (int_32)[16]) ){ goto $label$21 }
	$17 = [6]
	goto $label$19 
	
.LABEL $label$31
	*($16) = *($4)
	*((($5 + [48]) + [24])) = *(($3 + [24]))
	*((($5 + [48]) + [16])) = *(($3 + [16]))
	*(($16 + [8])) = *(($4 + [8]))
	*(($16 + [16])) = *(($4 + [16]))
	*(($16 + [24])) = *(($4 + [24]))
	*($5 + [48]) = *($3)
	*($5 + [56]) = *(($3 + [8]))
	CALL sha256(($5 + [48]), [64], $4)
	$9 = [0]
	$7 = ($7 + [1])
	$8 = *($15)
	if ( ($8 <= $2) ){ goto $label$14 }
	goto $label$2 
	
.LABEL $label$30
	$17 = [2]
	goto $label$19 
	
.LABEL $label$29
	$17 = [1]
	goto $label$19 
	
.LABEL $label$28
	$17 = [3]
	goto $label$19 
	
.LABEL $label$27
	$17 = [12]
	goto $label$19 
	
.LABEL $label$26
	$17 = [1]
	goto $label$19 
	
.LABEL $label$25
	$17 = [3]
	goto $label$19 
	
.LABEL $label$24
	$17 = [7]
	goto $label$19 
	
.LABEL $label$23
	$17 = [4]
	goto $label$19 
	
.LABEL $label$22
	$17 = [6]
	goto $label$19 
	
.LABEL $label$21
	$17 = [5]
	goto $label$19 
	
.LABEL $label$20
	$17 = [9]
	goto $label$19 
	
.LABEL $label$8
	$12 = [19]
	goto $label$1 
	
.LABEL $label$7
	$12 = [45]
	goto $label$1 
	
.LABEL $label$6
	$12 = [11]
	goto $label$1 
	
.LABEL $label$5
	$12 = [4]
	goto $label$1 
	
.LABEL $label$4
	$12 = [12]
	goto $label$1 
	
.LABEL $label$3
	CALL $105(($5 + [32]))
	
.LABEL $label$2
	*($5 + [16]) = $7
	CALL $120([8194], ($5 + [16]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*($5 + [40]))
	$12 = [11]
	goto $label$1 
	
.LABEL $label$44
	$12 = [11]
	
.LABEL $label$1
	
.LOOP $label$45:
	goto $label$100 
	
.LABEL $label$137
	$10 = *($6)
	if ( ($10 == 0) ){ goto $label$89 }
	$12 = [19]
	goto $label$45 
	
.LABEL $label$136
	$13 = $6
	$14 = *($10 + [16])
	if ( ((uint_32)$11 >= (uint_32)$14) ){ goto $label$64 }
	goto $label$65 
	
.LABEL $label$135
	$13 = $10
	$10 = $14
	$14 = *($10 + [16])
	if ( ((uint_32)$11 >= (uint_32)$14) ){ goto $label$85 }
	$12 = [20]
	goto $label$45 
	
.LABEL $label$134
	$14 = *($10)
	if ( $14 ){ goto $label$60 }
	goto $label$61 
	
.LABEL $label$133
	if ( ((uint_32)$14 >= (uint_32)$11) ){ goto $label$82 }
	$12 = [46]
	goto $label$45 
	
.LABEL $label$132
	$13 = ($10 + [4])
	$14 = *($10 + [4])
	if ( ($14 == 0) ){ goto $label$84 }
	$12 = [47]
	goto $label$45 
	
.LABEL $label$131
	$10 = $13
	goto $label$83 
	
.LABEL $label$130
	$10 = $6
	$13 = $6
	$12 = [16]
	goto $label$45 
	
.LABEL $label$129
	if ( (*($13) == 0) ){ goto $label$63 }
	$12 = [17]
	goto $label$45 
	
.LABEL $label$128
	$11 = ($11 + [1])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$86 }
	goto $label$87 
	
.LABEL $label$127
	$13 = $10
	if ( *($13) ){ goto $label$88 }
	$12 = [23]
	goto $label$45 
	
.LABEL $label$126
	*(($14 = CALL _Znwj([20]))) = (int_64)0
	*($14 + [8]) = $10
	*($13) = $14
	*($14 + [16]) = $11
	$10 = *(*($0))
	if ( ($10 == 0) ){ goto $label$59 }
	$12 = [24]
	goto $label$45 
	
.LABEL $label$125
	*($0) = $10
	$14 = *($13)
	$12 = [25]
	goto $label$45 
	
.LABEL $label$124
	CALL $2(*($8), $14)
	$7 = (*($9) + [1])
	*($9) = $7
	$11 = ($11 + [1])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$62 }
	$12 = [26]
	goto $label$45 
	
.LABEL $label$123
	$8 = [0]
	if ( ((uint_32)$7 <= (uint_32)$2) ){ goto $label$58 }
	$12 = [28]
	goto $label$45 
	
.LABEL $label$122
	$15 = ($5 + [80])
	$9 = [0]
	$8 = [0]
	$12 = [29]
	goto $label$45 
	
.LABEL $label$121
	$10 = ($10 | [1])
	$10 = ($9 << [1])
	$14 = ((uint_32)((*(($4 + $10)) + *(($3 + $10))) + ((*(($4 + $10)) + *(($3 + $10))) << [4])) % (uint_32)$1)
	$9 = ($9 + [1])
	$16 = *($6)
	if ( ($16 == 0) ){ goto $label$56 }
	$12 = [30]
	goto $label$45 
	
.LABEL $label$120
	$11 = $6
	$10 = $16
	$12 = [31]
	goto $label$45 
	
.LABEL $label$119
	$13 = (*($10 + [16]) <= $14)
	$11 = ( $11 ? $10 : $13 )
	$10 = *(($10 + ($13 << [2])))
	if ( $10 ){ goto $label$55 }
	$12 = [32]
	goto $label$45 
	
.LABEL $label$118
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$54 }
	$12 = [33]
	goto $label$45 
	
.LABEL $label$117
	if ( ($14 <= *($11 + [16])) ){ goto $label$53 }
	$12 = [34]
	goto $label$45 
	
.LABEL $label$116
	$10 = *($11 + [4])
	if ( ($10 == 0) ){ goto $label$50 }
	$12 = [35]
	goto $label$45 
	
.LABEL $label$115
	$13 = $10
	$10 = *($13)
	if ( $10 ){ goto $label$51 }
	goto $label$52 
	
.LABEL $label$114
	$13 = *($11 + [8])
	if ( ((int_32)*($13) == (int_32)$11) ){ goto $label$49 }
	$12 = [43]
	goto $label$45 
	
.LABEL $label$113
	$14 = ($11 + [8])
	$12 = [44]
	goto $label$45 
	
.LABEL $label$112
	$10 = *($14)
	$14 = ($10 + [8])
	$13 = *($10 + [8])
	if ( ((int_32)$10 != (int_32)*($13)) ){ goto $label$48 }
	$12 = [36]
	goto $label$45 
	
.LABEL $label$111
	if ( ((int_32)*($0) != (int_32)$11) ){ goto $label$47 }
	$12 = [41]
	goto $label$45 
	
.LABEL $label$110
	*($0) = $13
	$12 = [37]
	goto $label$45 
	
.LABEL $label$109
	*(($0 + [8])) = ($7 + [-1])
	CALL $3($16, $11)
	CALL _ZdlPv($11)
	$12 = [38]
	goto $label$45 
	
.LABEL $label$108
	if ( ((int_32)$9 != (int_32)[16]) ){ goto $label$46 }
	$12 = [40]
	goto $label$45 
	
.LABEL $label$107
	*($15) = *($4)
	*((($5 + [48]) + [24])) = *(($3 + [24]))
	*((($5 + [48]) + [16])) = *(($3 + [16]))
	*(($15 + [8])) = *(($4 + [8]))
	*(($15 + [16])) = *(($4 + [16]))
	*(($15 + [24])) = *(($4 + [24]))
	*($5 + [48]) = *($3)
	*($5 + [56]) = *(($3 + [8]))
	CALL sha256(($5 + [48]), [64], $4)
	$9 = [0]
	$12 = [39]
	goto $label$45 
	
.LABEL $label$106
	$8 = ($8 + [1])
	$7 = *(($0 + [8]))
	if ( ((uint_32)$7 > (uint_32)$2) ){ goto $label$57 }
	$12 = [27]
	goto $label$45 
	
.LABEL $label$105
	CALL prints([8192])
	*($5) = $8
	CALL $120([8194], $5)
	$global$0 = ($5 + [112])
	return 
	
.LABEL $label$104
	$10 = *($6)
	if ( ($10 == 0) ){ goto $label$81 }
	$12 = [4]
	goto $label$45 
	
.LABEL $label$103
	$13 = $6
	$14 = *($10 + [16])
	if ( ((uint_32)$11 >= (uint_32)$14) ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$102
	$13 = $10
	$10 = $14
	$14 = *($10 + [16])
	if ( ((uint_32)$11 >= (uint_32)$14) ){ goto $label$77 }
	$12 = [5]
	goto $label$45 
	
.LABEL $label$101
	$14 = *($10)
	if ( $14 ){ goto $label$67 }
	goto $label$68 
	
.LABEL $label$100
	if ( ((uint_32)$14 >= (uint_32)$11) ){ goto $label$74 }
	$12 = [13]
	goto $label$45 
	
.LABEL $label$99
	$13 = ($10 + [4])
	$14 = *($10 + [4])
	if ( ($14 == 0) ){ goto $label$76 }
	$12 = [14]
	goto $label$45 
	
.LABEL $label$98
	$10 = $13
	goto $label$75 
	
.LABEL $label$97
	$10 = $6
	$13 = $6
	$12 = [1]
	goto $label$45 
	
.LABEL $label$96
	if ( (*($13) == 0) ){ goto $label$71 }
	$12 = [2]
	goto $label$45 
	
.LABEL $label$95
	$11 = ($11 + [1])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$78 }
	goto $label$79 
	
.LABEL $label$94
	$13 = $10
	if ( *($13) ){ goto $label$80 }
	$12 = [8]
	goto $label$45 
	
.LABEL $label$93
	*(($14 = CALL _Znwj([20]))) = (int_64)0
	*($14 + [8]) = $10
	*($13) = $14
	*($14 + [16]) = $11
	$10 = *(*($0))
	if ( ($10 == 0) ){ goto $label$66 }
	$12 = [9]
	goto $label$45 
	
.LABEL $label$92
	*($0) = $10
	$14 = *($13)
	$12 = [10]
	goto $label$45 
	
.LABEL $label$91
	CALL $2(*($3), $14)
	*($4) = (*($4) + [1])
	$11 = ($11 + [1])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$69 }
	goto $label$70 
	
.LABEL $label$90
	$global$0 = ($5 + [112])
	return 
	
.LABEL $label$89
	$12 = [45]
	goto $label$45 
	
.LABEL $label$88
	$12 = [17]
	goto $label$45 
	
.LABEL $label$87
	$12 = [26]
	goto $label$45 
	
.LABEL $label$86
	$12 = [18]
	goto $label$45 
	
.LABEL $label$85
	$12 = [15]
	goto $label$45 
	
.LABEL $label$84
	$12 = [16]
	goto $label$45 
	
.LABEL $label$83
	$12 = [21]
	goto $label$45 
	
.LABEL $label$82
	$12 = [16]
	goto $label$45 
	
.LABEL $label$81
	$12 = [12]
	goto $label$45 
	
.LABEL $label$80
	$12 = [2]
	goto $label$45 
	
.LABEL $label$79
	$12 = [11]
	goto $label$45 
	
.LABEL $label$78
	$12 = [3]
	goto $label$45 
	
.LABEL $label$77
	$12 = [0]
	goto $label$45 
	
.LABEL $label$76
	$12 = [1]
	goto $label$45 
	
.LABEL $label$75
	$12 = [6]
	goto $label$45 
	
.LABEL $label$74
	$12 = [1]
	goto $label$45 
	
.LABEL $label$73
	$12 = [5]
	goto $label$45 
	
.LABEL $label$72
	$12 = [0]
	goto $label$45 
	
.LABEL $label$71
	$12 = [8]
	goto $label$45 
	
.LABEL $label$70
	$12 = [11]
	goto $label$45 
	
.LABEL $label$69
	$12 = [3]
	goto $label$45 
	
.LABEL $label$68
	$12 = [7]
	goto $label$45 
	
.LABEL $label$67
	$12 = [6]
	goto $label$45 
	
.LABEL $label$66
	$12 = [10]
	goto $label$45 
	
.LABEL $label$65
	$12 = [20]
	goto $label$45 
	
.LABEL $label$64
	$12 = [15]
	goto $label$45 
	
.LABEL $label$63
	$12 = [23]
	goto $label$45 
	
.LABEL $label$62
	$12 = [18]
	goto $label$45 
	
.LABEL $label$61
	$12 = [22]
	goto $label$45 
	
.LABEL $label$60
	$12 = [21]
	goto $label$45 
	
.LABEL $label$59
	$12 = [25]
	goto $label$45 
	
.LABEL $label$58
	$12 = [27]
	goto $label$45 
	
.LABEL $label$57
	$12 = [29]
	goto $label$45 
	
.LABEL $label$56
	$12 = [38]
	goto $label$45 
	
.LABEL $label$55
	$12 = [31]
	goto $label$45 
	
.LABEL $label$54
	$12 = [38]
	goto $label$45 
	
.LABEL $label$53
	$12 = [38]
	goto $label$45 
	
.LABEL $label$52
	$12 = [36]
	goto $label$45 
	
.LABEL $label$51
	$12 = [35]
	goto $label$45 
	
.LABEL $label$50
	$12 = [42]
	goto $label$45 
	
.LABEL $label$49
	$12 = [36]
	goto $label$45 
	
.LABEL $label$48
	$12 = [44]
	goto $label$45 
	
.LABEL $label$47
	$12 = [37]
	goto $label$45 
	
.LABEL $label$46
	$12 = [39]
	goto $label$45 
	$17
	(unreachable)
	$12
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [400])
	$global$0 = $3
	*(($4 = $3) + [344]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $130($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [304]) + [24])) = (int_64)0
	*(($4 + [336])) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [296]) = ($2 + $5)
	*($4 + [288]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8365])
	CALL memcpy(($4 + [304]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [8365])
	CALL memcpy((($4 + [304]) + [8]), ($2 + [8]), [8])
	*($4 + [292]) = ($2 + [16])
	CALL $26(($4 + [288]), (($4 + [304]) + [16]))
	CALL $26(($4 + [288]), ($4 + [332]))
	*(($3 = ($4 + [8]))) = *($4 + [296])
	*($4) = *($4 + [288])
	$3 = *($3)
	*((($4 + [352]) + [8])) = $3
	*(($6 = (($4 + [368]) + [8]))) = $3
	$7 = *($4)
	*($4 + [368]) = $7
	*($4 + [352]) = $7
	$3 = *($6)
	*((($4 + [384]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [368])
	*($4 + [32]) = $1
	*($4 + [384]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [388]) = ($4 + [344])
	*($4 + [384]) = ($4 + [16])
	CALL $31(($4 + [384]), ($4 + [304]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $133($2)
	
.LABEL $label$4
	CALL $24(($4 + [16]))
	if ( ((*($4 + [332]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [340])))
	
.LABEL $label$5
	if ( ((*($4 + [320]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [328])))
	
.LABEL $label$6
	$global$0 = ($4 + [400])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL prints([8791])
	CALL printui($1)
	CALL printui($2)
	$4 = ($0 + [72])
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [44]) == (int_32)$4), [8291])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [80])), (int_64)-8173743967435751424, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $28($4, $7)
	CALL eosio_assert(((int_32)*($8 + [44]) == (int_32)$4), [8291])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8760])
	$4 = ($0 + [112])
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$9:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$8 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$4), [8291])
	goto $label$6 
	
.LABEL $label$7
	$7 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)-8173734935981805696, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $32($4, $7)
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$4), [8291])
	
.LABEL $label$6
	CALL eosio_assert([1], [8803])
	CALL eosio_assert([1], [8837])
	$7 = CALL db_next_i64(*($8 + [84]), ($3 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	CALL $32($4, $7)
	
.LABEL $label$10
	CALL $37($4, $8)
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$9 = ($global$0 - [160])
	$global$0 = $9
	*($9 + [144]) = $2
	*($9 + [152]) = $1
	*($9 + [136]) = $3
	CALL require_auth(*($0))
	CALL eosio_assert(((($8 + [-1]) & [65535]) <= [50]), [9150])
	$10 = [0]
	CALL eosio_assert((((int_32)$5 != (int_32)[0]) & ((int_32)$8 != (int_32)[0])), [9188])
	$11 = ($0 + [72])
	$13 = *(($0 + [100]))
	$12 = *(($0 + [96]))
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$2 }
	
.LOOP $label$4:
	$14 = ($13 + [-24])
	$15 = *($14)
	if ( ((int_64)*($15) == (int_64)$1) ){ goto $label$3 }
	$13 = $14
	if ( ((int_32)$12 != (int_32)$14) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($15 + [44]) == (int_32)$11), [8291])
	$10 = $15
	goto $label$1 
	
.LABEL $label$2
	$14 = CALL db_find_i64(*($11), *(($0 + [80])), (int_64)-8173743967435751424, $1)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $28($11, $14)
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)$11), [8291])
	
.LABEL $label$1
	$16 = [0]
	$17 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($17, [8760])
	$18 = ($0 + [192])
	$13 = *(($0 + [220]))
	$12 = *(($0 + [216]))
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$6 }
	
.LOOP $label$8:
	$14 = ($13 + [-24])
	$15 = *($14)
	if ( ((int_64)*($15) == (int_64)$2) ){ goto $label$7 }
	$13 = $14
	if ( ((int_32)$12 != (int_32)$14) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($15 + [72]) == (int_32)$18), [8291])
	$16 = $15
	goto $label$5 
	
.LABEL $label$6
	$14 = CALL db_find_i64(*($18), *(($0 + [200])), (int_64)-8173734949705584640, $2)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$5 }
	$16 = CALL $46($18, $14)
	CALL eosio_assert(((int_32)*($16 + [72]) == (int_32)$18), [8291])
	
.LABEL $label$5
	CALL eosio_assert(($16 == 0), [9237])
	*(($9 + [128])) = [0]
	*($9 + [120]) = (int_64)0
	$14 = CALL $127([8290])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$17 }
	*($9 + [120]) = ($14 << [1])
	$13 = (($9 + [120]) | [1])
	if ( $14 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$12 = (($14 + [16]) & [-16])
	$13 = CALL _Znwj($12)
	*($9 + [120]) = ($12 | [1])
	*($9 + [128]) = $13
	*($9 + [124]) = $14
	
.LABEL $label$16
	CALL memcpy($13, [8290], $14)
	
.LABEL $label$15
	*(($13 + $14)) = [0]
	if ( ((uint_32)$8 >= (uint_32)$5) ){ goto $label$18 }
	$14 = CALL read_transaction([0], [0])
	$13 = CALL $130($14)
	CALL read_transaction($13, $14)
	CALL sha256($13, $14, ($9 + [80]))
	$14 = CALL tapos_block_prefix()
	$13 = CALL tapos_block_num()
	*($9 + [72]) = (int_64))(((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $8) + (int_64)(CASTING uint_64)(uint_32 $5)) + (int_64)*($9 + [152])) + (int_64)(CASTING int_64)(int_32 ((int_32)$13 * (int_32)$14))) - CALL current_time())
	CALL sha256(($9 + [72]), [4], ($9 + [32]))
	CALL $1(($9 + [16]), $5, $8, ($9 + [80]), ($9 + [32]))
	$16 = (($9 + [16]) | [4])
	$14 = *($9 + [16])
	if ( ((int_32)$14 == (int_32)$16) ){ goto $label$11 }
	$19 = ($9 | [1])
	$15 = ($9 + [8])
	$12 = $14
	if ( ((int_32)$12 != (int_32)$14) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$18
	if ( ($5 == 0) ){ goto $label$10 }
	$16 = (($9 + [80]) | [1])
	$14 = [0]
	$15 = ($9 + [88])
	
.LOOP $label$19:
	if ( ($14 == 0) ){ goto $label$20 }
	CALL $112(($9 + [120]), [9267])
	
.LABEL $label$20
	CALL $114(($9 + [80]), $14)
	$13 = *($9 + [80])
	$12 = ($13 & [1])
	CALL $113(($9 + [120]), ( *($15) ? $16 : $12 ), ( *($9 + [84]) ? uint_32($13 >> [1]) : $12 ))
	if ( ((*($9 + [80]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($15))
	
.LABEL $label$21
	$14 = ($14 + [1])
	if ( ((int_32)$5 != (int_32)$14) ){ goto $label$19 }
	$20 = [8]
	goto $label$9 
	
.LABEL $label$14
	CALL $105(($9 + [120]))
	
.LABEL $label$13
	$20 = [1]
	goto $label$9 
	
.LABEL $label$12
	$20 = [0]
	goto $label$9 
	
.LABEL $label$11
	$20 = [7]
	goto $label$9 
	
.LABEL $label$10
	$20 = [8]
	
.LABEL $label$9
	
.LOOP $label$22:
	goto $label$45 
	
.LABEL $label$46
	$12 = $13
	if ( ((int_32)$12 == (int_32)*($9 + [16])) ){ goto $label$32 }
	$20 = [0]
	goto $label$22 
	
.LABEL $label$45
	CALL $112(($9 + [120]), [9267])
	$20 = [1]
	goto $label$22 
	
.LABEL $label$44
	CALL $115($9, *($12 + [16]))
	$14 = *($9)
	$13 = ($14 & [1])
	CALL $113(($9 + [120]), ( *($15) ? $19 : $13 ), ( *($9 + [4]) ? uint_32($14 >> [1]) : $13 ))
	if ( ((*($9) & [1]) == 0) ){ goto $label$31 }
	$20 = [2]
	goto $label$22 
	
.LABEL $label$43
	CALL _ZdlPv(*($15))
	$20 = [3]
	goto $label$22 
	
.LABEL $label$42
	$14 = *($12 + [4])
	if ( ($14 == 0) ){ goto $label$28 }
	$20 = [4]
	goto $label$22 
	
.LABEL $label$41
	$13 = $14
	$14 = *($13)
	if ( $14 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$40
	$13 = *($12 + [8])
	if ( ((int_32)*($13) == (int_32)$12) ){ goto $label$27 }
	$20 = [12]
	goto $label$22 
	
.LABEL $label$39
	$12 = ($12 + [8])
	$20 = [13]
	goto $label$22 
	
.LABEL $label$38
	$14 = *($12)
	$12 = ($14 + [8])
	$13 = *($14 + [8])
	if ( ((int_32)$14 != (int_32)*($13)) ){ goto $label$26 }
	$20 = [5]
	goto $label$22 
	
.LABEL $label$37
	if ( ((int_32)$13 != (int_32)$16) ){ goto $label$25 }
	$20 = [7]
	goto $label$22 
	
.LABEL $label$36
	CALL $47(($9 + [16]), *($9 + [20]))
	goto $label$24 
	
.LABEL $label$35
	*($9 + [16]) = ( $5 ? $8 : ((uint_32)$8 > (uint_32)$5) )
	$1 = *($0)
	*($9 + [92]) = $6
	*($9 + [96]) = $7
	*($9 + [84]) = ($9 + [152])
	*($9 + [80]) = ($9 + [144])
	*($9 + [88]) = ($9 + [136])
	*($9 + [100]) = ($9 + [16])
	*($9 + [104]) = ($9 + [120])
	CALL $48(($9 + [32]), $18, $1, ($9 + [80]))
	$1 = *($0)
	*($9 + [80]) = ($9 + [136])
	CALL eosio_assert($17, [8427])
	CALL $49($11, $10, $1, ($9 + [80]))
	if ( ((*($9 + [120]) & [1]) == 0) ){ goto $label$23 }
	$20 = [9]
	goto $label$22 
	
.LABEL $label$34
	CALL _ZdlPv(*($9 + [128]))
	$20 = [10]
	goto $label$22 
	
.LABEL $label$33
	$global$0 = ($9 + [160])
	return 
	
.LABEL $label$32
	$20 = [1]
	goto $label$22 
	
.LABEL $label$31
	$20 = [3]
	goto $label$22 
	
.LABEL $label$30
	$20 = [5]
	goto $label$22 
	
.LABEL $label$29
	$20 = [4]
	goto $label$22 
	
.LABEL $label$28
	$20 = [11]
	goto $label$22 
	
.LABEL $label$27
	$20 = [5]
	goto $label$22 
	
.LABEL $label$26
	$20 = [13]
	goto $label$22 
	
.LABEL $label$25
	$20 = [6]
	goto $label$22 
	
.LABEL $label$24
	$20 = [8]
	goto $label$22 
	
.LABEL $label$23
	$20 = [10]
	goto $label$22 
	(unreachable)
	$20
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [464])
	$global$0 = $3
	*(($4 = $3) + [408]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $130($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [304]) + [56])) = (int_64)0
	*((($4 + [304]) + [48])) = (int_64)0
	*((($4 + [304]) + [40])) = (int_64)0
	*(($4 + [380])) = (int_64)0
	*(($4 + [388])) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [368]) = [0]
	*($4 + [372 align=4]) = (int_64)0
	*($4 + [396]) = [0]
	*($4 + [292]) = $2
	*($4 + [288]) = $2
	*($4 + [296]) = ($2 + $5)
	*($4 + [448]) = ($4 + [288])
	*($4 + [16]) = ($4 + [304])
	CALL $44(($4 + [16]), ($4 + [448]))
	*(($3 = ($4 + [8]))) = *($4 + [296])
	*($4) = *($4 + [288])
	$3 = *($3)
	*((($4 + [416]) + [8])) = $3
	*(($6 = (($4 + [432]) + [8]))) = $3
	$7 = *($4)
	*($4 + [432]) = $7
	*($4 + [416]) = $7
	$3 = *($6)
	*((($4 + [448]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [432])
	*($4 + [32]) = $1
	*($4 + [448]) = $1
	*((($4 + [16]) + [40])) = $0
	*((($4 + [16]) + [48])) = (int_64)-1
	*((($4 + [16]) + [56])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [452]) = ($4 + [408])
	*($4 + [448]) = ($4 + [16])
	CALL $45(($4 + [448]), ($4 + [304]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $133($2)
	
.LABEL $label$4
	CALL $24(($4 + [16]))
	if ( ((*($4 + [384]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [392])))
	
.LABEL $label$5
	if ( ((*($4 + [372]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [380])))
	
.LABEL $label$6
	$global$0 = ($4 + [464])
	return [1]
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $130($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [188])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = [0]
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [260])) = (int_64)0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $133($2)
	
.LABEL $label$5
	CALL $24($4)
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$7 = ($global$0 - [208])
	$global$0 = $7
	*($7 + [176]) = $2
	*($7 + [184]) = $1
	CALL require_auth(*($0))
	$9 = int_32($8 >> [2])
	$8 = (*($3 + [4]) - *($3))
	CALL eosio_assert((((int_32)$8 != (int_32)[0]) & ($9 <= [1001])), [9269])
	CALL eosio_assert(((($6 + [-1]) & [65535]) <= [30]), [9311])
	$10 = *($4)
	$11 = ($10 & [1])
	if ( $11 ){ goto $label$4 }
	if ( (uint_32($10 >> [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( *($4 + [4]) ){ goto $label$2 }
	
.LABEL $label$3
	$10 = [0]
	goto $label$1 
	
.LABEL $label$2
	if ( $11 ){ goto $label$6 }
	$10 = uint_32($10 >> [1])
	goto $label$5 
	
.LABEL $label$6
	$10 = *($4 + [4])
	
.LABEL $label$5
	$10 = ($10 <= [51])
	
.LABEL $label$1
	CALL eosio_assert($10, [9349])
	$10 = *($5)
	$11 = ($10 & [1])
	if ( $11 ){ goto $label$10 }
	if ( (uint_32($10 >> [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( *($5 + [4]) ){ goto $label$8 }
	
.LABEL $label$9
	$10 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( $11 ){ goto $label$12 }
	$10 = uint_32($10 >> [1])
	goto $label$11 
	
.LABEL $label$12
	$10 = *($5 + [4])
	
.LABEL $label$11
	$10 = ($10 <= [101])
	
.LABEL $label$7
	CALL eosio_assert($10, [9368])
	CALL prints([9387])
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$14 }
	$10 = uint_32($10 >> [1])
	goto $label$13 
	
.LABEL $label$14
	$10 = *($4 + [4])
	
.LABEL $label$13
	CALL printui((CASTING uint_64)(uint_32 $10))
	$12 = ($0 + [72])
	$11 = *(($0 + [100]))
	$13 = *(($0 + [96]))
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$16 }
	
.LOOP $label$18:
	$10 = ($11 + [-24])
	$14 = *($10)
	if ( ((int_64)*($14) == (int_64)$1) ){ goto $label$17 }
	$11 = $10
	if ( ((int_32)$13 != (int_32)$10) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*($14 + [44]) == (int_32)$12), [8291])
	goto $label$15 
	
.LABEL $label$16
	$14 = [0]
	$10 = CALL db_find_i64(*($12), *(($0 + [80])), (int_64)-8173743967435751424, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$15 }
	$14 = CALL $28($12, $10)
	CALL eosio_assert(((int_32)*($14 + [44]) == (int_32)$12), [8291])
	
.LABEL $label$15
	$15 = [0]
	$16 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($16, [8760])
	$17 = ($0 + [192])
	$11 = *(($0 + [220]))
	$13 = *(($0 + [216]))
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$20 }
	
.LOOP $label$22:
	$10 = ($11 + [-24])
	$18 = *($10)
	if ( ((int_64)*($18) == (int_64)$2) ){ goto $label$21 }
	$11 = $10
	if ( ((int_32)$13 != (int_32)$10) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$20 }
	CALL eosio_assert(((int_32)*($18 + [72]) == (int_32)$17), [8291])
	$15 = $18
	goto $label$19 
	
.LABEL $label$20
	$10 = CALL db_find_i64(*($17), *(($0 + [200])), (int_64)-8173734949705584640, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$19 }
	$15 = CALL $46($17, $10)
	CALL eosio_assert(((int_32)*($15 + [72]) == (int_32)$17), [8291])
	
.LABEL $label$19
	CALL eosio_assert(($15 == 0), [9237])
	*(($7 + [104])) = [0]
	*($7 + [96]) = (int_64)0
	$10 = CALL $127([8290])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$28 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$31 }
	*($7 + [96]) = ($10 << [1])
	$11 = (($7 + [96]) | [1])
	if ( $10 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$13 = (($10 + [16]) & [-16])
	$11 = CALL _Znwj($13)
	*($7 + [96]) = ($13 | [1])
	*($7 + [104]) = $11
	*($7 + [100]) = $10
	
.LABEL $label$30
	CALL memcpy($11, [8290], $10)
	
.LABEL $label$29
	*(($11 + $10)) = [0]
	if ( ((uint_32)$9 <= (uint_32)$6) ){ goto $label$32 }
	$10 = CALL read_transaction([0], [0])
	$11 = CALL $130($10)
	CALL read_transaction($11, $10)
	CALL sha256($11, $10, ($7 + [144]))
	$10 = CALL tapos_block_prefix()
	$11 = CALL tapos_block_num()
	*($7 + [192]) = (int_64))(((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $9) + (int_64)(CASTING uint_64)(uint_32 $6)) + (int_64)*($7 + [184])) + (int_64)(CASTING int_64)(int_32 ((int_32)$11 * (int_32)$10))) - CALL current_time())
	CALL sha256(($7 + [192]), [4], ($7 + [112]))
	CALL $1(($7 + [48]), $9, $6, ($7 + [144]), ($7 + [112]))
	$15 = (($7 + [48]) | [4])
	$10 = *($7 + [48])
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$25 }
	$9 = (($7 + [8]) | [1])
	$18 = (($7 + [8]) + [8])
	$13 = $10
	if ( ((int_32)$13 != (int_32)$10) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$32
	if ( ($8 == 0) ){ goto $label$24 }
	$8 = (($7 + [48]) | [1])
	$10 = [0]
	$15 = ($7 + [56])
	$11 = [0]
	
.LOOP $label$33:
	if ( ($10 == 0) ){ goto $label$35 }
	CALL $112(($7 + [96]), [9267])
	$13 = (*($3) + $10)
	goto $label$34 
	
.LABEL $label$35
	$13 = *($3)
	
.LABEL $label$34
	CALL $115(($7 + [48]), *($13))
	$13 = *($7 + [48])
	$18 = ($13 & [1])
	CALL $113(($7 + [96]), ( *($15) ? $8 : $18 ), ( *($7 + [52]) ? uint_32($13 >> [1]) : $18 ))
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($15))
	
.LABEL $label$36
	$10 = ($10 + [4])
	$11 = ($11 + [1])
	if ( ($11 <= $9) ){ goto $label$33 }
	$19 = [8]
	goto $label$23 
	
.LABEL $label$28
	CALL $105(($7 + [96]))
	
.LABEL $label$27
	$19 = [1]
	goto $label$23 
	
.LABEL $label$26
	$19 = [0]
	goto $label$23 
	
.LABEL $label$25
	$19 = [7]
	goto $label$23 
	
.LABEL $label$24
	$19 = [8]
	
.LABEL $label$23
	
.LOOP $label$37:
	goto $label$86 
	
.LABEL $label$87
	$13 = $11
	if ( ((int_32)$13 == (int_32)*($7 + [48])) ){ goto $label$56 }
	$19 = [0]
	goto $label$37 
	
.LABEL $label$86
	CALL $112(($7 + [96]), [9267])
	$19 = [1]
	goto $label$37 
	
.LABEL $label$85
	CALL $115(($7 + [8]), *((*($3) + (*($13 + [16]) << [2]))))
	$10 = *($7 + [8])
	$11 = ($10 & [1])
	CALL $113(($7 + [96]), ( *($18) ? $9 : $11 ), ( *($7 + [12]) ? uint_32($10 >> [1]) : $11 ))
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$55 }
	$19 = [2]
	goto $label$37 
	
.LABEL $label$84
	CALL _ZdlPv(*($18))
	$19 = [3]
	goto $label$37 
	
.LABEL $label$83
	$10 = *($13 + [4])
	if ( ($10 == 0) ){ goto $label$52 }
	$19 = [4]
	goto $label$37 
	
.LABEL $label$82
	$11 = $10
	$10 = *($11)
	if ( $10 ){ goto $label$53 }
	goto $label$54 
	
.LABEL $label$81
	$11 = *($13 + [8])
	if ( ((int_32)*($11) == (int_32)$13) ){ goto $label$51 }
	$19 = [29]
	goto $label$37 
	
.LABEL $label$80
	$13 = ($13 + [8])
	$19 = [30]
	goto $label$37 
	
.LABEL $label$79
	$10 = *($13)
	$13 = ($10 + [8])
	$11 = *($10 + [8])
	if ( ((int_32)$10 != (int_32)*($11)) ){ goto $label$50 }
	$19 = [5]
	goto $label$37 
	
.LABEL $label$78
	if ( ((int_32)$11 != (int_32)$15) ){ goto $label$49 }
	$19 = [7]
	goto $label$37 
	
.LABEL $label$77
	CALL $47(($7 + [48]), *($7 + [52]))
	goto $label$48 
	
.LABEL $label$76
	*($7 + [92]) = (*($14 + [36]) + [1])
	*($7 + [90]) = $6
	$10 = ($3 + [4])
	$11 = int_32((*($10) - *($3)) >> [2])
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$47 }
	$19 = [27]
	goto $label$37 
	
.LABEL $label$75
	*($7 + [90]) = $11
	$19 = [9]
	goto $label$37 
	
.LABEL $label$74
	$1 = *($0)
	*($7 + [60]) = $4
	*($7 + [64]) = $5
	*($7 + [52]) = ($7 + [184])
	*($7 + [48]) = ($7 + [176])
	*($7 + [56]) = ($7 + [92])
	*($7 + [68]) = ($7 + [90])
	*($7 + [72]) = ($7 + [96])
	CALL $52(($7 + [8]), $17, $1, ($7 + [48]))
	$1 = *($0)
	*($7 + [48]) = ($7 + [92])
	CALL eosio_assert($16, [8427])
	CALL $53($12, $14, $1, ($7 + [48]))
	*((($7 + [48]) + [20])) = [0]
	*($7 + [60 align=4]) = (int_64)0
	*($7 + [48]) = *($7 + [184])
	*($7 + [56]) = *($7 + [92])
	$10 = (*($10) - *($3))
	if ( ($10 == 0) ){ goto $label$46 }
	$19 = [10]
	goto $label$37 
	
.LABEL $label$73
	$13 = int_32($10 >> [2])
	if ( ((uint_32)$13 >= (uint_32)[1073741824]) ){ goto $label$45 }
	$19 = [11]
	goto $label$37 
	
.LABEL $label$72
	$10 = CALL _Znwj($10)
	*(($7 + [60])) = $10
	*(($11 = ($7 + [64]))) = $10
	*(($7 + [68])) = ($10 + ($13 << [2]))
	$3 = *($3)
	$13 = (*(($3 + [4])) - $3)
	if ( ((int_32)$13 < (int_32)[1]) ){ goto $label$44 }
	$19 = [25]
	goto $label$37 
	
.LABEL $label$71
	CALL memcpy($10, $3, $13)
	*($11) = (*($11) + $13)
	$19 = [12]
	goto $label$37 
	
.LABEL $label$70
	$11 = CALL $106((($7 + [48]) + [24]), ($7 + [96]))
	*($7 + [16]) = (int_64)-5003315193367756800
	$1 = *($0)
	*($7 + [8]) = $1
	*(($10 = CALL _Znwj([16]))) = $1
	*($10 + [8]) = (int_64)3617214756542218240
	$13 = ($10 + [16])
	*((($7 + [8]) + [24])) = $13
	*((($7 + [8]) + [20])) = $13
	*($7 + [24]) = $10
	CALL $54(($7 + [36]), ($7 + [48]))
	CALL $36(($7 + [192]), ($7 + [8]))
	$10 = *($7 + [192])
	CALL send_inline($10, (*($7 + [196]) - $10))
	$10 = *($7 + [192])
	if ( ($10 == 0) ){ goto $label$43 }
	$19 = [13]
	goto $label$37 
	
.LABEL $label$69
	*($7 + [196]) = $10
	CALL _ZdlPv($10)
	$19 = [14]
	goto $label$37 
	
.LABEL $label$68
	$10 = *($7 + [36])
	if ( ($10 == 0) ){ goto $label$42 }
	$19 = [15]
	goto $label$37 
	
.LABEL $label$67
	*(($7 + [40])) = $10
	CALL _ZdlPv($10)
	$19 = [16]
	goto $label$37 
	
.LABEL $label$66
	$10 = *($7 + [24])
	if ( ($10 == 0) ){ goto $label$41 }
	$19 = [17]
	goto $label$37 
	
.LABEL $label$65
	*(($7 + [28])) = $10
	CALL _ZdlPv($10)
	$19 = [18]
	goto $label$37 
	
.LABEL $label$64
	if ( ((*($11) & [1]) == 0) ){ goto $label$40 }
	$19 = [19]
	goto $label$37 
	
.LABEL $label$63
	CALL _ZdlPv(*(($7 + [80])))
	$19 = [20]
	goto $label$37 
	
.LABEL $label$62
	$10 = *($7 + [60])
	if ( ($10 == 0) ){ goto $label$39 }
	$19 = [21]
	goto $label$37 
	
.LABEL $label$61
	*(($7 + [64])) = $10
	CALL _ZdlPv($10)
	$19 = [22]
	goto $label$37 
	
.LABEL $label$60
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$38 }
	$19 = [23]
	goto $label$37 
	
.LABEL $label$59
	CALL _ZdlPv(*($7 + [104]))
	$19 = [24]
	goto $label$37 
	
.LABEL $label$58
	$global$0 = ($7 + [208])
	return (unreachable)
	
.LABEL $label$57
	CALL $117(($7 + [60]))
	
.LABEL $label$56
	$19 = [1]
	goto $label$37 
	
.LABEL $label$55
	$19 = [3]
	goto $label$37 
	
.LABEL $label$54
	$19 = [5]
	goto $label$37 
	
.LABEL $label$53
	$19 = [4]
	goto $label$37 
	
.LABEL $label$52
	$19 = [28]
	goto $label$37 
	
.LABEL $label$51
	$19 = [5]
	goto $label$37 
	
.LABEL $label$50
	$19 = [30]
	goto $label$37 
	
.LABEL $label$49
	$19 = [6]
	goto $label$37 
	
.LABEL $label$48
	$19 = [8]
	goto $label$37 
	
.LABEL $label$47
	$19 = [9]
	goto $label$37 
	
.LABEL $label$46
	$19 = [12]
	goto $label$37 
	
.LABEL $label$45
	$19 = [26]
	goto $label$37 
	
.LABEL $label$44
	$19 = [12]
	goto $label$37 
	
.LABEL $label$43
	$19 = [14]
	goto $label$37 
	
.LABEL $label$42
	$19 = [16]
	goto $label$37 
	
.LABEL $label$41
	$19 = [18]
	goto $label$37 
	
.LABEL $label$40
	$19 = [20]
	goto $label$37 
	
.LABEL $label$39
	$19 = [22]
	goto $label$37 
	
.LABEL $label$38
	$19 = [24]
	goto $label$37 
	(unreachable)
	$19
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [416])
	$global$0 = $3
	*(($4 = $3) + [360]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $130($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [304]) + [24])) = (int_64)0
	*(($4 + [336])) = (int_64)0
	*((($4 + [304]) + [48])) = [0]
	*($4 + [312]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [356]) = [0]
	*($4 + [292]) = $2
	*($4 + [288]) = $2
	*($4 + [296]) = ($2 + $5)
	*($4 + [400]) = ($4 + [288])
	*($4 + [16]) = ($4 + [304])
	CALL $50(($4 + [16]), ($4 + [400]))
	*(($3 = ($4 + [8]))) = *($4 + [296])
	*($4) = *($4 + [288])
	$3 = *($3)
	*((($4 + [368]) + [8])) = $3
	*(($6 = (($4 + [384]) + [8]))) = $3
	$7 = *($4)
	*($4 + [384]) = $7
	*($4 + [368]) = $7
	$3 = *($6)
	*((($4 + [400]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [384])
	*($4 + [32]) = $1
	*($4 + [400]) = $1
	*(($4 + [56])) = $0
	*((($4 + [16]) + [48])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [404]) = ($4 + [360])
	*($4 + [400]) = ($4 + [16])
	CALL $51(($4 + [400]), ($4 + [304]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $133($2)
	
.LABEL $label$4
	CALL $24(($4 + [16]))
	if ( (*($4 + [344]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [332]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [352])))
	if ( ((*($4 + [332]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [340])))
	$2 = *(($4 + [320]))
	if ( $2 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = *(($4 + [320]))
	if ( ($2 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [324])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [416])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [160])
	$global$0 = $5
	*($5 + [128]) = $2
	*($5 + [136]) = $1
	CALL require_auth(*($0))
	CALL prints([8695])
	CALL printui($1)
	$6 = *($3)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$4 }
	if ( (uint_32($6 >> [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( *($3 + [4]) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	if ( $7 ){ goto $label$6 }
	$6 = uint_32($6 >> [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($3 + [4])
	
.LABEL $label$5
	$6 = ($6 <= [301])
	
.LABEL $label$1
	CALL eosio_assert($6, [8704])
	$6 = *($4)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$10 }
	if ( (uint_32($6 >> [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( *($4 + [4]) ){ goto $label$8 }
	
.LABEL $label$9
	$6 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( $7 ){ goto $label$12 }
	$6 = uint_32($6 >> [1])
	goto $label$11 
	
.LABEL $label$12
	$6 = *($4 + [4])
	
.LABEL $label$11
	$6 = ($6 <= [51])
	
.LABEL $label$7
	CALL eosio_assert($6, [8732])
	$8 = ($0 + [72])
	$7 = *(($0 + [100]))
	$9 = *(($0 + [96]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$14 }
	
.LOOP $label$16:
	$6 = ($7 + [-24])
	$10 = *($6)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$15 }
	$7 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)$8), [8291])
	goto $label$13 
	
.LABEL $label$14
	$10 = [0]
	$6 = CALL db_find_i64(*($8), *(($0 + [80])), (int_64)-8173743967435751424, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$10 = CALL $28($8, $6)
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)$8), [8291])
	
.LABEL $label$13
	$11 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($11, [8760])
	CALL $116(($5 + [80]), $1)
	CALL $112(($5 + [80]), [8789])
	$6 = *($3)
	$7 = ($6 & [1])
	CALL $113(($5 + [80]), ( *($3 + [8]) ? ($3 + [1]) : $7 ), ( *($3 + [4]) ? uint_32($6 >> [1]) : $7 ))
	$6 = ( *($5 + [88]) ? (($5 + [80]) | [1]) : (*($5 + [80]) & [1]) )
	CALL sha256($6, CALL $127($6), ($5 + [96]))
	$12 = ($0 + [112])
	$7 = *(($0 + [140]))
	$9 = *(($0 + [136]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$21 }
	
.LOOP $label$23:
	$6 = ($7 + [-24])
	$13 = *($6)
	if ( ((int_64)*($13) == (int_64)$2) ){ goto $label$22 }
	$7 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$21 }
	CALL eosio_assert(((int_32)*($13 + [80]) == (int_32)$12), [8291])
	if ( $13 ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	$6 = CALL db_find_i64(*($12), *(($0 + [120])), (int_64)-8173734935981805696, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$20 }
	CALL eosio_assert(((int_32)*(CALL $32($12, $6) + [80]) == (int_32)$12), [8291])
	if ( (*($5 + [80]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	*($5 + [72]) = CALL current_time()
	*($5 + [68]) = (*($10 + [34]) + [1])
	$1 = *($0)
	*($5 + [24]) = $3
	*($5 + [28]) = $4
	*($5 + [12]) = ($5 + [96])
	*($5 + [8]) = ($5 + [128])
	*($5 + [16]) = ($5 + [136])
	*($5 + [20]) = ($5 + [68])
	*($5 + [32]) = ($5 + [72])
	CALL $33(($5 + [48]), $12, $1, ($5 + [8]))
	$1 = *($0)
	*($5 + [8]) = ($5 + [68])
	CALL eosio_assert($11, [8427])
	CALL $34($8, $10, $1, ($5 + [8]))
	*($5 + [48]) = *($5 + [136])
	*($5 + [56]) = *($5 + [68])
	*($5 + [16]) = (int_64)-5003315192957557248
	$1 = *($0)
	*($5 + [8]) = $1
	*(($6 = CALL _Znwj([16]))) = $1
	*($6 + [8]) = (int_64)3617214756542218240
	*(($5 + [44])) = [0]
	$7 = ($6 + [16])
	*(($5 + [32])) = $7
	*(($5 + [28])) = $7
	*($5 + [24]) = $6
	*($5 + [36 align=4]) = (int_64)0
	CALL $35(($5 + [36]), [10])
	$6 = *($5 + [36])
	$7 = (*(($5 + [40])) - $6)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [8421])
	CALL memcpy($6, ($5 + [48]), [8])
	CALL eosio_assert(((int_32)($7 + [-8]) > (int_32)[1]), [8421])
	CALL memcpy(($6 + [8]), (($5 + [48]) + [8]), [2])
	CALL $36(($5 + [144]), ($5 + [8]))
	$6 = *($5 + [144])
	CALL send_inline($6, (*($5 + [148]) - $6))
	$6 = *($5 + [144])
	if ( ($6 == 0) ){ goto $label$24 }
	*($5 + [148]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$24
	$6 = *($5 + [36])
	if ( ($6 == 0) ){ goto $label$25 }
	*(($5 + [40])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$25
	$6 = *($5 + [24])
	if ( ($6 == 0) ){ goto $label$19 }
	*(($5 + [28])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($5 + [88])))
	
.LABEL $label$17
	$global$0 = ($5 + [160])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8365])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8365])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8365])
	CALL memcpy(($1 + [16]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8365])
	CALL memcpy(($1 + [18]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$0 = CALL $26($0, ($1 + [20]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [8365])
	CALL memcpy(($1 + [32]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = CALL $26($0, ($1 + [64]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8365])
	CALL memcpy(($1 + [76]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [48]) = $2
	*($4 + [56]) = $1
	*($4 + [40]) = $3
	CALL require_auth(*($0))
	$5 = ($0 + [72])
	$7 = *(($0 + [100]))
	$6 = *(($0 + [96]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$5), [8291])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [80])), (int_64)-8173743967435751424, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $28($5, $8)
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$5), [8291])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8760])
	$1 = ((int_64)((int_64)$1 * (int_64)100000) + (int_64)$2)
	*($4 + [32]) = $1
	$5 = ($0 + [32])
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$12:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$11 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$5), [8291])
	if ( $9 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$8 = CALL db_find_i64(*($5), *(($0 + [40])), (int_64)-4417020450001911808, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	$9 = CALL $55($5, $8)
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$5), [8291])
	
.LABEL $label$9
	$1 = *($9)
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$13:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$7 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$13 }
	goto $label$6 
	
.LABEL $label$8
	$1 = *($0)
	*($4 + [20]) = ($4 + [56])
	*($4 + [16]) = ($4 + [32])
	*($4 + [24]) = ($4 + [48])
	*($4 + [28]) = ($4 + [40])
	CALL $56(($4 + [8]), $5, $1, ($4 + [16]))
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$7
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$5), [8291])
	goto $label$5 
	
.LABEL $label$6
	$9 = [0]
	$8 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-4417020450001911808, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$9 = CALL $55($5, $8)
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$5), [8291])
	
.LABEL $label$5
	$1 = *($0)
	*($4 + [16]) = ($4 + [40])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8427])
	CALL $57($5, $9, $1, ($4 + [16]))
	$global$0 = ($4 + [64])
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $130($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [288]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8365])
	CALL memcpy(($4 + [280]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8365])
	CALL memcpy((($4 + [280]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [8365])
	CALL memcpy((($4 + [280]) + [16]), ($2 + [16]), [8])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [196])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = [0]
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*($4 + [240]) = $0
	*(($4 + [268])) = (int_64)0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [296])
	$1 = *($4 + [288])
	$8 = *($4 + [280])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $133($2)
	
.LABEL $label$5
	CALL $24(($4 + [8]))
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8867])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8912])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8962])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$10
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [28])))
	
.LABEL $label$14
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8867])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8912])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8962])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8365])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8365])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $95(*($1), ($3 + [16]))
	CALL $26(*($1), ($3 + [28]))
	CALL $26(*($1), ($3 + [40]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[1]), [8365])
	CALL memcpy(($3 + [52]), *($1 + [4]), [2])
	*($1 + [4]) = (*($1 + [4]) + [2])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = [0]
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($5 == 0) ){ goto $label$9 }
	$6 = int_32($5 >> [2])
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$8 }
	$5 = CALL _Znwj($5)
	*(($2 + [40])) = ($5 + ($6 << [2]))
	*($2 + [32]) = $5
	*($2 + [36]) = $5
	$7 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $7)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $7, $6)
	*($2 + [36]) = ($5 + $6)
	
.LABEL $label$9
	$5 = CALL $106(($2 + [16]), ($1 + [28]))
	$6 = CALL $106($2, ($1 + [40]))
	$7 = *($1 + [52])
	$1 = *($0 + [4])
	$8 = *($1 + [4])
	$0 = (*($0) + int_32($8 >> [1]))
	$1 = *($1)
	if ( (($8 & [1]) == 0) ){ goto $label$10 }
	$1 = *((*($0) + $1))
	
.LABEL $label$10
	$9 = CALL $106(($2 + [48]), $6)
	$8 = CALL $106(($2 + [64]), $5)
	CALL void $0((int_32 $4), (int_64 $3), (int_64 ($2 + [32])), (int_32 $8), (int_32 $9), (int_32 ($7 & [65535])), (int_32 $1))
	if ( (*($2 + [48]) & [1]) ){ goto $label$12 }
	if ( (*($2 + [64]) & [1]) ){ goto $label$11 }
	goto $label$7 
	
.LABEL $label$12
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$11
	CALL _ZdlPv(*($8 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	CALL $117(($2 + [32]))
	
.LABEL $label$7
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($5) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	$1 = *($2 + [32])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = *($2 + [32])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($2 + [36]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($2 + [80])
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$18()), [8370])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([88])) + [20 align=4]) = (int_64)0
	*($3 + [28 align=4]) = (int_64)0
	*($3 + [36 align=4]) = (int_64)0
	*($3 + [60 align=4]) = (int_64)0
	*($3 + [68]) = [0]
	*($3 + [72]) = $1
	CALL $89(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [76])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $84(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($3 + [60]) & [1]) ){ goto $label$8 }
	if ( (*($3 + [32]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [68])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [40])))
	if ( (*($3 + [20]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8465])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8514])
	*($1 + [36]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [8565])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [20])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [20])
	$7 = ( *(($1 + [24])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $130($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $71($5, $1)
	CALL db_update_i64(*($1 + [48]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $133($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = ($1 + [12])
	$5 = *($1 + [12])
	$4 = *(($1 + [16]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [2]))
	$8 = [10]
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$9 = ($1 + [24])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$2 }
	$8 = (($6 & [-4]) + $8)
	
.LABEL $label$2
	$4 = *($9)
	$4 = ( *(($1 + [28])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$8 = ([0] - ($4 + $8))
	$7 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$3:
	$8 = ($8 + [-1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$4 = [0]
	if ( ($8 == 0) ){ goto $label$5 }
	CALL $35($0, ([0] - $8))
	$4 = *(($0 + [4]))
	$8 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$4
	*($2) = $8
	*($2 + [8]) = $4
	$0 = ($4 - $8)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8421])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[1]), [8421])
	CALL memcpy(($8 + [8]), ($1 + [8]), [2])
	*($2 + [4]) = ($8 + [10])
	CALL $90($2, $3)
	CALL $72($2, $9)
	$global$0 = ($2 + [16])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8465])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8514])
	*($1 + [34]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [8565])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [20])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [20])
	$7 = ( *(($1 + [24])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $130($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $71($5, $1)
	CALL db_update_i64(*($1 + [48]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $133($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$18()), [8370])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [32]) = $1
	CALL $91(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $92(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8465])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8514])
	*($1 + [24]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8565])
	CALL eosio_assert([1], [8421])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8421])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8421])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8421])
	CALL memcpy(($4 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $116 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $110(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $126(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8655], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $110(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $110(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $117 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $110(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $126(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8462], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $110(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $110(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $117($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $127($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $108($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $108($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $111($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $118 ()
{
	return [9440]
}

void .FUNC $119 (int_32 $0)
{
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8465])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8514])
	$6 = *($1)
	CALL $107(($1 + [8]), *($3))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8565])
	$3 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [20])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$7 = *($1 + [20])
	$7 = ( *(($1 + [24])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = ($7 + $3)
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $130($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $71($5, $1)
	CALL db_update_i64(*($1 + [48]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $133($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8342])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $130($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [44]) = $0
	CALL $69(($3 + [32]), $5)
	*($5 + [48]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $68(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $133($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$10
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8342])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $130($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	CALL $93(($3 + [32]), $5)
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $92(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $133($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $108($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [152]) = $1
	CALL require_auth(*($0))
	CALL prints([9015])
	CALL printui($1)
	$5 = *($2)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$4 }
	if ( (uint_32($5 >> [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( *($2 + [4]) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	if ( $6 ){ goto $label$6 }
	$5 = uint_32($5 >> [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	
.LABEL $label$5
	$5 = ($5 <= [301])
	
.LABEL $label$1
	CALL eosio_assert($5, [8704])
	$5 = *($3)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$10 }
	if ( (uint_32($5 >> [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( *($3 + [4]) ){ goto $label$8 }
	
.LABEL $label$9
	$5 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( $6 ){ goto $label$12 }
	$5 = uint_32($5 >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($3 + [4])
	
.LABEL $label$11
	$5 = ($5 <= [51])
	
.LABEL $label$7
	CALL eosio_assert($5, [8732])
	$7 = ($0 + [72])
	$6 = *(($0 + [100]))
	$8 = *(($0 + [96]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$14 }
	
.LOOP $label$16:
	$5 = ($6 + [-24])
	$9 = *($5)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$15 }
	$6 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$7), [8291])
	goto $label$13 
	
.LABEL $label$14
	$9 = [0]
	$5 = CALL db_find_i64(*($7), *(($0 + [80])), (int_64)-8173743967435751424, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$13 }
	$9 = CALL $28($7, $5)
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$7), [8291])
	
.LABEL $label$13
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [8760])
	CALL $116(($4 + [96]), $1)
	CALL $112(($4 + [96]), [8789])
	$5 = [1]
	$6 = *($2)
	$8 = ($6 & [1])
	CALL $113(($4 + [96]), ( *($2 + [8]) ? ($2 + [1]) : $8 ), ( *($2 + [4]) ? uint_32($6 >> [1]) : $8 ))
	$6 = ( *($4 + [104]) ? (($4 + [96]) | [1]) : (*($4 + [96]) & [1]) )
	CALL sha256($6, CALL $127($6), ($4 + [112]))
	$8 = ($0 + [152])
	*($4 + [88]) = $8
	$1 = *($4 + [136])
	$11 = *($4 + [128])
	$12 = *($4 + [120])
	$13 = *($4 + [112])
	CALL eosio_assert([1], [9060])
	*($4 + [56]) = $13
	*($4 + [48]) = $12
	CALL eosio_assert([1], [9060])
	*(($4 + [72])) = $11
	*($4 + [64]) = $1
	CALL $38(($4 + [8]), ($4 + [88]), ($4 + [48]))
	$6 = *($4 + [12])
	if ( ($6 == 0) ){ goto $label$17 }
	$12 = *(($6 + [56]))
	$13 = *(($6 + [48]))
	$1 = *(($6 + [40]))
	$11 = *($6 + [32])
	$5 = [1]
	CALL eosio_assert([1], [9060])
	CALL eosio_assert([1], [9060])
	if ( ((int_64)((int_64)((int_64)$1 ^ (int_64)*($4 + [48])) | (int_64)((int_64)$11 ^ (int_64)*($4 + [56]))) != (int_64)0) ){ goto $label$17 }
	if ( ((int_64)((int_64)((int_64)*(($4 + [64])) ^ (int_64)$12) | (int_64)((int_64)*(($4 + [72])) ^ (int_64)$13)) != (int_64)0) ){ goto $label$17 }
	$5 = (*($4 + [12]) == 0)
	
.LABEL $label$17
	CALL eosio_assert($5, [9030])
	if ( $5 ){ goto $label$20 }
	if ( (*($4 + [96]) & [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$5 = *($9 + [32])
	*($4 + [46]) = $5
	$1 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)65535) + (int_64)((int_64)*($4 + [152]) * (int_64)100000)) + (int_64)1)
	*($4 + [32]) = $1
	$5 = [9043]
	$6 = *([9043])
	if ( ($6 == 0) ){ goto $label$21 }
	
.LOOP $label$23:
	if ( ((int_32)$6 == (int_32)[37]) ){ goto $label$22 }
	CALL prints_l($5, [1])
	$5 = ($5 + [1])
	$6 = *($5)
	if ( ($6 == 0) ){ goto $label$21 }
	goto $label$23 
	
.LABEL $label$22
	CALL printui($1)
	CALL prints(($5 + [1]))
	
.LABEL $label$21
	$1 = *($0)
	*($4 + [20]) = $2
	*($4 + [24]) = $3
	*($4 + [12]) = ($4 + [112])
	*($4 + [8]) = ($4 + [32])
	*($4 + [16]) = ($4 + [152])
	CALL $39($4, $8, $1, ($4 + [8]))
	$1 = *($0)
	*($4 + [8]) = ($4 + [46])
	CALL eosio_assert($10, [8427])
	CALL $40($7, $9, $1, ($4 + [8]))
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*(($4 + [104])))
	$global$0 = ($4 + [160])
	return 
	
.LABEL $label$18
	$global$0 = ($4 + [160])
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)$3), [8291])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-8173743967435751424, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $28($3, $6)
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)$3), [8291])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8760])
	$1 = *($0)
	CALL eosio_assert($6, [8427])
	CALL $61($3, $7, $1, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $1
	CALL require_auth(*($0))
	CALL prints([8624])
	CALL printui($1)
	$5 = *($2)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$4 }
	if ( (uint_32($5 >> [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( *($2 + [4]) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	if ( $6 ){ goto $label$6 }
	$5 = uint_32($5 >> [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	
.LABEL $label$5
	$5 = ($5 <= [101])
	
.LABEL $label$1
	CALL eosio_assert($5, [8636])
	$7 = ($0 + [72])
	$6 = *(($0 + [100]))
	$8 = *(($0 + [96]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$11:
	$5 = ($6 + [-24])
	$9 = *($5)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$10 }
	$6 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$7), [8291])
	*($4 + [32]) = CALL current_time()
	if ( $9 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$9 = [0]
	$5 = CALL db_find_i64(*($7), *(($0 + [80])), (int_64)-8173743967435751424, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	$9 = CALL $28($7, $5)
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$7), [8291])
	
.LABEL $label$12
	*($4 + [32]) = CALL current_time()
	if ( ($9 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL prints([8676])
	$1 = *($0)
	*($4 + [16]) = $2
	CALL eosio_assert([1], [8427])
	CALL $29($7, $9, $1, ($4 + [16]))
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$7
	CALL prints([8660])
	$1 = *($0)
	*($4 + [20]) = $2
	*($4 + [24]) = $3
	*($4 + [16]) = ($4 + [40])
	*($4 + [28]) = ($4 + [32])
	CALL $30(($4 + [8]), $7, $1, ($4 + [16]))
	$global$0 = ($4 + [48])
}

int_32 .FUNC $22 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [400])
	$global$0 = $3
	*(($4 = $3) + [344]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $130($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [328])) = (int_64)0
	*((($4 + [312]) + [24])) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [304]) = ($2 + $5)
	*($4 + [296]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8365])
	CALL memcpy(($4 + [312]), $2, [8])
	*($4 + [300]) = ($2 + [8])
	CALL $26(($4 + [296]), (($4 + [312]) + [8]))
	CALL $26(($4 + [296]), ($4 + [332]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [304])
	*($4 + [8]) = *($4 + [296])
	$3 = *($3)
	*((($4 + [352]) + [8])) = $3
	*(($6 = (($4 + [368]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [368]) = $7
	*($4 + [352]) = $7
	$3 = *($6)
	*((($4 + [384]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [368])
	*($4 + [40]) = $1
	*($4 + [384]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [212])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	*($4 + [388]) = ($4 + [344])
	*($4 + [384]) = ($4 + [24])
	CALL $27(($4 + [384]), ($4 + [312]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $133($2)
	
.LABEL $label$4
	CALL $24(($4 + [24]))
	if ( ((*($4 + [332]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [340])))
	
.LABEL $label$5
	if ( ((*($4 + [320]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [328])))
	
.LABEL $label$6
	$global$0 = ($4 + [400])
	return [1]
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = $2
	*($3 + [24]) = $1
	CALL require_auth(*($0))
	$4 = ($0 + [232])
	$6 = *(($0 + [260]))
	$5 = *(($0 + [256]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [8291])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [240])), (int_64)7235159550150574080, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $62($4, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [8291])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert([1], [8427])
	CALL $63($4, $8, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [12]) = ($3 + [16])
	*($3 + [8]) = ($3 + [24])
	CALL $64($3, $4, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [256]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [260])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [256]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	CALL $94(($0 + [216]))
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [180])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$11
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$12
	CALL _ZdlPv($3)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [176]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($0 + [140])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$15 }
	
.LOOP $label$16:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$17 }
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$18
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$19
	CALL _ZdlPv($3)
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$16 }
	$3 = *(($0 + [136]))
	goto $label$14 
	
.LABEL $label$15
	$3 = $1
	
.LABEL $label$14
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$13
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$20 }
	$2 = ($0 + [100])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$22 }
	
.LOOP $label$23:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$24 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$25
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$26
	CALL _ZdlPv($3)
	
.LABEL $label$24
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$23 }
	$3 = *(($0 + [96]))
	goto $label$21 
	
.LABEL $label$22
	$3 = $1
	
.LABEL $label$21
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$20
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$27 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$29 }
	
.LOOP $label$30:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$31 }
	CALL _ZdlPv($4)
	
.LABEL $label$31
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$30 }
	$3 = *(($0 + [56]))
	goto $label$28 
	
.LABEL $label$29
	$3 = $1
	
.LABEL $label$28
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$27
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $106(($2 + [16]), ($1 + [8]))
	$1 = CALL $106($2, ($1 + [20]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$7 = CALL $106(($2 + [32]), $1)
	$5 = CALL $106(($2 + [48]), $4)
	CALL void $6((int_32 $3), (int_64 $5), (int_32 $7), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($5 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($4) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $70($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $109($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $109($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $105($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8365])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $26(CALL $26($0, ($1 + [8])), ($1 + [20]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [8365])
	CALL memcpy(($1 + [32]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8365])
	CALL memcpy(($1 + [34]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8365])
	CALL memcpy(($1 + [36]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8365])
	CALL memcpy(($1 + [38]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8365])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $117($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [8421])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8421])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$18()), [8370])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $65($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $66(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	CALL $107(($1 + [8]), *($4 + [4]))
	CALL $107(($1 + [20]), *($4 + [8]))
	*($1 + [32]) = (int_64)281474976710656
	*($1 + [40]) = *(*($4 + [12]))
	$4 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [20])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$6 = *(($1 + [20]))
	$6 = ( *(($1 + [24])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$4 = ($6 + $4)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $130($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL $71($3, $1)
	$7 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($5 + [8]), (int_64)-8173743967435751424, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $133($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $117($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8465])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8514])
	*($1 + [38]) = [3]
	$6 = *($1)
	CALL eosio_assert([1], [8565])
	$7 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [20])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$8 = *($1 + [20])
	$8 = ( *(($1 + [24])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$7 = ($8 + $7)
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$4 = CALL $130($7)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $7)
	CALL $71($5, $1)
	CALL db_update_i64(*($1 + [48]), $2, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $133($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [8867])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8912])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8962])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [60]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [68])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [40])))
	if ( (*($3 + [20]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	if ( ((*($5 + [60]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($5 + [68])))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [40])))
	if ( (*($5 + [20]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($5 + [28])))
	
.LABEL $label$17
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$15 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8465])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8514])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8565])
	CALL eosio_assert([1], [8421])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8421])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8342])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $130($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8365])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8365])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $66(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $133($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $128(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9436])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $128(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $133($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $105 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [8]) = *(*($3 + [4]))
	$4 = *($0)
	CALL $107(($1 + [20]), *($3 + [12]))
	CALL $107(($1 + [32]), *($3 + [16]))
	*($1 + [56]) = *(*($3 + [20]))
	CALL $107(($1 + [60]), *($3 + [24]))
	*(($3 = $2)) = [0]
	CALL $87($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $130($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $88($3, $1)
	$6 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($4 + [8]), (int_64)-8173734949705584640, *(*($0 + [8])), $6, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($4 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $133($2)
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $72($0, ($1 + [60]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8421])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$0 = CALL $72(CALL $72($0, ($1 + [20])), ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [2])
	return *($0 + [4]) = (*($0 + [4]) + [2])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = (*($0) + [18])
	*($0) = $2
	$3 = *($1 + [20])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [24])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *(($1 + [20]))
	$3 = ( *(($1 + [24])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$2
	$3 = *($1 + [32])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	$3 = *(($1 + [32]))
	$3 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$4
	$2 = ($2 + [10])
	*($0) = $2
	$3 = *($1 + [60])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [64])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($0) = $2
	$1 = *(($1 + [60]))
	$1 = ( *(($1 + [64])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$6 }
	*($0) = ($1 + $2)
	
.LABEL $label$6
	return $0
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [60]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [68])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [40])))
	if ( (*($1 + [20]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $26($0, ($1 + [60]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8365])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8365])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8365])
	CALL memcpy(($1 + [16]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$0 = CALL $26(CALL $26($0, ($1 + [20])), ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8365])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8365])
	CALL memcpy(($1 + [56]), *($0 + [4]), [2])
	return *($0 + [4]) = (*($0 + [4]) + [2])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $117($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $86(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	$4 = *($0)
	CALL $107(($1 + [20]), *($3 + [12]))
	CALL $107(($1 + [32]), *($3 + [16]))
	*($1 + [56]) = *(*($3 + [20]))
	CALL $107(($1 + [60]), *($3 + [24]))
	*(($3 = $2)) = [0]
	CALL $87($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $130($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $88($3, $1)
	$6 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($4 + [8]), (int_64)-8173734949705584640, *(*($0 + [8])), $6, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($4 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $133($2)
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $72($0, ($1 + [64]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8421])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $72($0, ($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [32])
	return *($0 + [4]) = (*($0 + [4]) + [32])
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $26($0, ($1 + [64]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8365])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8365])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $26($0, ($1 + [16]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [8365])
	CALL memcpy(($1 + [32]), *($0 + [4]), [32])
	return *($0 + [4]) = (*($0 + [4]) + [32])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $117($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [72])))
	
.LABEL $label$11
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8421])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8421])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *($4 + [4])
	*(($1 + [56])) = *(($6 + [24]))
	*(($1 + [48])) = *(($6 + [16]))
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [32]) = *($6)
	*($1 + [18]) = [0]
	*($1 + [8]) = *(*($4 + [8]))
	*($1 + [16]) = *(*($4 + [12]))
	CALL $107(($1 + [20]), *($4 + [16]))
	CALL $107(($1 + [64]), *($4 + [20]))
	*($1 + [76]) = *(*($4 + [24]))
	$4 = *($1 + [20])
	$6 = ( *(($1 + [24])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [56])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$6 = *(($1 + [64]))
	$6 = ( *(($1 + [68])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$4 = ($6 + $4)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$6 = CALL $130($4)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $4)
	CALL $76($3, $1)
	$7 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($5 + [8]), (int_64)-8173734935981805696, *(*($0 + [8])), $7, $6, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $133($6)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8691])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $35($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8365])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8421])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $72(CALL $72($0, ($1 + [8])), ($1 + [20]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[1]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [34]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [36]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [38]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8421])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [18]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$0 = CALL $72($0, ($1 + [20]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = CALL $72($0, ($1 + [64]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8421])
	CALL memcpy(*($0 + [4]), ($1 + [76]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8421])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8421])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8421])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $117($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [72])))
	
.LABEL $label$11
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$18()), [8370])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([96])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [64 align=4]) = (int_64)0
	*($3 + [72]) = [0]
	*($3 + [76]) = $1
	CALL $79(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [80])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $80(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$4
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $35($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8421])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8421])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $78(CALL $77($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [8867])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [8912])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8962])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$10
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$14
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [28])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [84]))
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8421])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8421])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *($4 + [4])
	*(($1 + [56])) = *(($6 + [24]))
	*(($1 + [48])) = *(($6 + [16]))
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [32]) = *($6)
	*($1 + [8]) = *(*($4 + [8]))
	CALL $107(($1 + [16]), *($4 + [12]))
	CALL $107(($1 + [64]), *($4 + [16]))
	$4 = *($1 + [16])
	$6 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [48])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$6 = *(($1 + [64]))
	$6 = ( *(($1 + [68])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$4 = ($6 + $4)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$6 = CALL $130($4)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $4)
	CALL $82($3, $1)
	$7 = *($1)
	*($1 + [80]) = CALL db_store_i64(*($5 + [8]), (int_64)4157011819347963904, *(*($0 + [8])), $7, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$5 }
	CALL $133($6)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$6 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$7 = *(($5 + [8]))
	$8 = *(*(($0 + [8])))
	$9 = *($1)
	$10 = *(($1 + [56]))
	$11 = *(($1 + [48]))
	$12 = *(($1 + [40]))
	$13 = *($1 + [32])
	CALL eosio_assert([1], [9060])
	*($3 + [24]) = $13
	*($3 + [16]) = $12
	CALL eosio_assert([1], [9060])
	*(($3 + [40])) = $11
	*($3 + [32]) = $10
	*($1 + [84]) = CALL db_idx256_store($7, (int_64)4157011819347963904, $8, $9, ($3 + [16]), [2])
	$global$0 = ($3 + [48])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8342])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $130($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [28]) = [0]
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72]) = [0]
	*($5 + [80]) = $0
	CALL $75(($3 + [32]), $5)
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $74(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $133($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [72])))
	
.LABEL $label$10
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$18()), [8370])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([96])) + [28]) = [0]
	*($3 + [20 align=4]) = (int_64)0
	*($3 + [64 align=4]) = (int_64)0
	*($3 + [72]) = [0]
	*($3 + [80]) = $1
	CALL $73(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [84])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$4
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$18()), [8370])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [44]) = $1
	CALL $67(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [48])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $68(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$4
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $106(($2 + [16]), ($1 + [16]))
	$1 = CALL $106($2, ($1 + [28]))
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$8 = CALL $106(($2 + [32]), $1)
	$6 = CALL $106(($2 + [48]), $5)
	CALL void $7((int_32 $4), (int_64 $3), (int_64 $6), (int_32 $8), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($5) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($5) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($5 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $130($1)
	
.LABEL $label$2
	*(CALL $118()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $130(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $133($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $127 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}