(data (i32.const 4) "`n\00\00")
(data (i32.const 16) "\a0\d4\c2\1eO\bd0U")
(data (i32.const 24) "0\1d\bbFN\bd0U")
(data (i32.const 32) "\10B\c6*O\bd0U")
(data (i32.const 40) " B\c6*O\bd0U")
(data (i32.const 48) "0B\c6*O\bd0U")
(data (i32.const 56) "@B\c6*O\bd0U")
(data (i32.const 64) "PB\c6*O\bd0U")
(data (i32.const 72) "\80\ab\a6\97M\bd0U")
(data (i32.const 80) "onerror\00")
(data (i32.const 96) "eosio\00")
(data (i32.const 112) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 176) "transfer\00")
(data (i32.const 192) "eosio.token\00")
(data (i32.const 208) "df2\00")
(data (i32.const 224) "active\00")
(data (i32.const 240) "write\00")
(data (i32.const 256) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 320) "singleton does not exist\00")
(data (i32.const 352) "error reading iterator\00")
(data (i32.const 384) "read\00")
(data (i32.const 400) "get\00")
(data (i32.const 416) "cannot pass end iterator to erase\00")
(data (i32.const 464) "cannot increment end iterator\00")
(data (i32.const 496) "object passed to erase is not in multi_index\00")
(data (i32.const 544) "cannot erase objects in table of another contract\00")
(data (i32.const 608) "attempt to remove object that was not in multi_index\00")
(data (i32.const 672) "\08")
(data (i32.const 688) "cannot pass end iterator to modify\00")
(data (i32.const 736) "object passed to modify is not in multi_index\00")
(data (i32.const 784) "cannot modify objects in table of another contract\00")
(data (i32.const 848) "updater cannot change primary key when modifying an object\00")
(data (i32.const 912) "cannot create objects in table of another contract\00")
(data (i32.const 976) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1040) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1104) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1152) "ctr.pack-not-exist\00")
(data (i32.const 1184) "ctr.env-invalid\00")
(data (i32.const 1200) "22333\00")
(data (i32.const 1216) "ctr.upgrade\00")
(data (i32.const 1232) "ctr.user-not-reg\00")
(data (i32.const 1264) "ctr.group-not-exist\00")
(data (i32.const 1296) "ctr.msg-content-length-rule\00")
(data (i32.const 1328) "ctr.quantity-not-enough\00")
(data (i32.const 1360) "invalid symbol name\00")
(data (i32.const 1408) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1472) "\n>>> sender >>>\00")
(data (i32.const 1488) " - name: \00")
(data (i32.const 1504) "\n>>> receiver >>>\00")
(data (i32.const 1536) "\n>>> transfer data quantity >>> \00")
(data (i32.const 1584) "Invalid token transfer\00")
(data (i32.const 1616) "Quantity must be positive\00")
(data (i32.const 1648) "ctr.deposit-amount-must-great-than-0\00")
(data (i32.const 1696) "only accepts EOS for deposits\00")
(data (i32.const 1728) ".\00")
(data (i32.const 1744) " \00")
(data (i32.const 1760) ",\00")
(data (i32.const 1776) "ctr.must-in-group\00")
(data (i32.const 1808) "ctr.pack-status-not-normal\00")
(data (i32.const 1840) "ctr.pack-had-join\00")
(data (i32.const 1872) "ctr.pack-left-quantity-value-rule\00")
(data (i32.const 1920) "ctr.pack-left-count-value-rule\00")
(data (i32.const 1952) "ctr.group-not-support-snake-pack\00")
(data (i32.const 2000) "ctr.pack-msg-length-rule\00")
(data (i32.const 2032) "ctr.pack-quantity-value-rule\00")
(data (i32.const 2064) "df1\00")
(data (i32.const 2080) "ctr.group-not-support-free-pack\00")
(data (i32.const 2112) "ctr.pack-free-quantity-value-rule\00")
(data (i32.const 2160) "ctr.pack-free-total-value-rule\00")
(data (i32.const 2192) "ctr.group-not-support-bomb-pack\00")
(data (i32.const 2224) "ctr.pack-tail-value-rule\00")
(data (i32.const 2256) "ctr.groupuser-not-exist\00")
(data (i32.const 2288) "ctr.groupuser-status-must-not-accept\00")
(data (i32.const 2336) "ctr.groupuser-must-owner\00")
(data (i32.const 2368) "ctr.must-group-owner\00")
(data (i32.const 2400) "ctr.group-enabled-value-rule\00")
(data (i32.const 2432) "ctr.group-total-value-rule\00")
(data (i32.const 2464) "ctr.group-sender-value-rule\00")
(data (i32.const 2496) "ctr.group-quantities-size-rule\00")
(data (i32.const 2528) "ctr.group-quantities-dup-rule\00")
(data (i32.const 2560) "ctr.group-quantities-value-rule\00")
(data (i32.const 2592) "ctr.group-multi-value-rule\00")
(data (i32.const 2624) "ctr.group-multi-precision-rule\00")
(data (i32.const 2656) "ctr.group-percent-value-rule\00")
(data (i32.const 2688) "ctr.group-percent-precision-rule\00")
(data (i32.const 2736) "ctr.group-min-value-rule\00")
(data (i32.const 2768) "ctr.group-min-precision-rule\00")
(data (i32.const 2800) "ctr.group-notice-length-rule\00")
(data (i32.const 2832) "ctr.group-name-length-rule\00")
(data (i32.const 2864) "ctr.remove-user-unreg\00")
(data (i32.const 2896) "ctr.group-owner-cannot-removed\00")
(data (i32.const 2928) "ctr.move-user-unreg\00")
(data (i32.const 2960) "ctr.group-owner-cannot-moved\00")
(data (i32.const 2992) "ctr.groupuser-status-value-rule\00")
(data (i32.const 3024) "ctr.no-need-to-move\00")
(data (i32.const 3056) "ctr.must-not-group-owner\00")
(data (i32.const 3088) "ctr.must-be-official-member\00")
(data (i32.const 3120) "ctr.join_beginner_group_not_empty\00")
(data (i32.const 3160) "d\00\00\00\00\00\00\00\c8\00\00\00\00\00\00\00,\01\00\00\00\00\00\00")
(data (i32.const 3184) "d\00\00\00\00\00\00\00\c8\00\00\00\00\00\00\00,\01\00\00\00\00\00\00")
(data (i32.const 3216) "ctr.must-not-group-full\00")
(data (i32.const 3248) "ctr.join_group_reach_limit\00")
(data (i32.const 3280) "ctr.already-apply\00")
(data (i32.const 3312) "ctr.already-accept\00")
(data (i32.const 3344) "ctr.group-exist\00")
(data (i32.const 3360) "ctr.group-id-rule\00")
(data (i32.const 11776) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "cancel_deferred" (func $fimport$2 (param i32) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_end_i64" (func $fimport$5 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$8 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$9 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$11 (param i32)))
(import "env" "db_idx64_store" (func $fimport$12 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$13 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$17 (param i32)))
(import "env" "db_store_i64" (func $fimport$18 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$19 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$20 (param i32 i32)))
(import "env" "memcpy" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$23 (param i64)))
(import "env" "printn" (func $fimport$24 (param i64)))
(import "env" "prints" (func $fimport$25 (param i32)))
(import "env" "prints_l" (func $fimport$26 (param i32 i32)))
(import "env" "printui" (func $fimport$27 (param i64)))
(import "env" "read_action_data" (func $fimport$28 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$29 (param i64)))
(import "env" "require_auth2" (func $fimport$30 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$31 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$32 (param i32 i32)))
(import "env" "sha256" (func $fimport$33 (param i32 i32 i32)))
(import "env" "tapos_block_prefix" (func $fimport$34 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $286))
(export "free" (func $289))
(export "memcmp" (func $298))
(export "strlen" (func $299))
(table $0 34 34 anyfunc)
(elem (i32.const 0) $300 $40 $17 $44 $34 $37 $31 $39 $20 $45 $29 $42 $23 $51 $12 $43 $27 $13 $15 $16 $25 $19 $10 $32 $35 $47 $52 $33 $41 $48 $50 $6 $8 $22)



void .FUNC $220 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	*([0] + [4]) = $12
	*($12 + [31]) = $4
	*($12 + [30]) = $5
	$6 = *(($0 + [80]))
	$11 = *(($0 + [84]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$1 }
	$10 = ($11 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$1 }
	$11 = $10
	$8 = ($10 + [-24])
	$10 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($0 + [56])
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$4 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$8), [256])
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	$11 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $88($8, $11)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$8), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [1232])
	$6 = *(($0 + [40]))
	$11 = *(($0 + [44]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$5 }
	$10 = ($11 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$6:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$5 }
	$11 = $10
	$8 = ($10 + [-24])
	$10 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$8 = ($0 + [16])
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$8 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [148]) == (int_32)$8), [256])
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	$11 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$7 }
	$10 = CALL $87($8, $11)
	CALL eosio_assert(((int_32)*($10 + [148]) == (int_32)$8), [256])
	
.LABEL $label$7
	$6 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($6, [1264])
	CALL eosio_assert(((int_64)*($10 + [48]) == (int_64)$1), [2368])
	*($12 + [24]) = [0]
	*($12 + [16]) = (int_64)0
	$11 = (*($3 + [4]) - *($3))
	$7 = int_32($11 >> [3])
	if ( ($7 == 0) ){ goto $label$10 }
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$9 }
	$11 = CALL $290($11)
	*(($12 + [24])) = ($11 + ($7 << [3]))
	*($12 + [16]) = $11
	*($12 + [20]) = $11
	$9 = *($3)
	$7 = (*(($3 + [4])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($11, $9, $7)
	*($12 + [20]) = ($11 + $7)
	
.LABEL $label$10
	CALL $208(($12 + [16]))
	$11 = *($12 + [16])
	if ( ($11 == 0) ){ goto $label$11 }
	*($12 + [20]) = $11
	CALL $291($11)
	$5 = *($12 + [30])
	$4 = *($12 + [31])
	
.LABEL $label$11
	CALL eosio_assert(((($4 + [-2]) & [255]) <= [10]), [2432])
	CALL eosio_assert(((int_32)(($5 | [1]) & [255]) == (int_32)[1]), [2464])
	$1 = *($0 + [8])
	*($12) = $3
	*($12 + [4]) = ($12 + [31])
	*($12 + [8]) = ($12 + [30])
	CALL eosio_assert($6, [688])
	CALL $221($8, $10, $1, $12)
	*([0] + [4]) = ($12 + [32])
	return (unreachable)
	
.LABEL $label$9
	CALL $296(($12 + [16]))
}

void .FUNC $284 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $290([48])) + [32]) = $1
	CALL $285(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [36])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $102(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $291($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $285 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	$11 = $12
	*([0] + [4]) = $12
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$2 = *($0)
	$5 = *(*($3 + [8]))
	$6 = *(($4 + [80]))
	$4 = *($3 + [4])
	$10 = *(($4 + [84]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$1 }
	$9 = ($10 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$5) ){ goto $label$1 }
	$10 = $9
	$8 = ($9 + [-24])
	$9 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$9 = ($4 + [56])
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$5 }
	$8 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$9), [256])
	if ( $8 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$8 = CALL db_find_i64(*(($4 + [56])), *(($4 + [64])), (int_64)-3020384829779738624, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $88($9, $8) + [32]) == (int_32)$9), [256])
	
.LABEL $label$4
	$5 = *(*(($3 + [8])))
	if ( ((int_64)$5 == (int_64)*(*($3))) ){ goto $label$3 }
	*($1 + [8]) = $5
	
.LABEL $label$3
	$8 = $12
	$9 = ($8 + [-32])
	*([0] + [4]) = $9
	*($11 + [12]) = $9
	*($11 + [8]) = $9
	*($11 + [16]) = $8
	*($11 + [24]) = ($11 + [8])
	*($11 + [36]) = ($1 + [8])
	*($11 + [32]) = $1
	*($11 + [40]) = ($1 + [16])
	*($11 + [44]) = ($1 + [24])
	CALL $92(($11 + [32]), ($11 + [24]))
	$5 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020384829779738624, *(*($0 + [8])), $5, $9, [32])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [48])
}

int_32 .FUNC $174 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [132]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1104])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6228196809676685312)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1040])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1040])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $80(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [368])
	*([0] + [4]) = $8
	$6 = *($0)
	*(($8 + [24])) = $6
	*(($8 + [32])) = (int_64)-1
	*(($8 + [40])) = [0]
	*($8 + [8]) = $1
	*($8) = $6
	*($8 + [16]) = $6
	*(($8 + [44])) = [0]
	*(($8 + [48])) = [0]
	*(($8 + [52])) = [0]
	*($8 + [56]) = $6
	*(($8 + [64])) = $6
	*(($8 + [72])) = (int_64)-1
	*(($8 + [80])) = [0]
	*(($8 + [84])) = [0]
	*(($8 + [88])) = [0]
	*($8 + [96]) = $6
	*(($8 + [104])) = $6
	*(($8 + [112])) = (int_64)-1
	*(($8 + [120])) = [0]
	*(($8 + [124])) = [0]
	*(($8 + [128])) = [0]
	*(($8 + [132])) = [0]
	*($8 + [136]) = $6
	*(($8 + [144])) = $6
	*(($8 + [152])) = (int_64)-1
	*(($8 + [160])) = [0]
	*(($8 + [164])) = [0]
	*(($8 + [168])) = [0]
	*(($8 + [172])) = [0]
	*($8 + [176]) = $6
	*(($8 + [184])) = $6
	*(($8 + [192])) = (int_64)-1
	*(($8 + [200])) = [0]
	*(($8 + [204])) = [0]
	*(($8 + [208])) = [0]
	*(($8 + [212])) = [0]
	*($8 + [216]) = $6
	*(($8 + [224])) = $6
	*(($8 + [232])) = (int_64)-1
	*(($8 + [240])) = [0]
	*(($8 + [244])) = [0]
	*(($8 + [248])) = [0]
	*(($8 + [252])) = [0]
	*($8 + [256]) = $6
	*(($8 + [264])) = $6
	*(($8 + [272])) = (int_64)-1
	*(($8 + [280])) = [0]
	*(($8 + [284])) = [0]
	*(($8 + [288])) = [0]
	*($8 + [296]) = [0]
	CALL $53($8)
	CALL $57(($8 + [304]), $8)
	if ( *($8 + [312]) ){ goto $label$1 }
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$1 }
	$5 = *(($8 + [320]))
	$0 = *($8 + [316])
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$3 }
	$0 = $5
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$5), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($8 + [316])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($8 + [320])) = $0
	CALL $291($0)
	
.LABEL $label$4
	*($8 + [360]) = $1
	*($8 + [352]) = $2
	$3 = *(($8 + [80]))
	$7 = *(($8 + [84]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	$0 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_64)*(*($0)) == (int_64)$1) ){ goto $label$5 }
	$7 = $0
	$5 = ($0 + [-24])
	$0 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$0 = ($8 + [56])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$9 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$0), [256])
	if ( $5 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	$5 = CALL db_find_i64(*(($8 + [56])), *(($8 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $88($0, $5) + [32]) == (int_32)$0), [256])
	goto $label$7 
	
.LABEL $label$8
	$1 = *(($8 + [8]))
	*($8 + [308]) = $8
	*($8 + [304]) = ($8 + [360])
	*($8 + [312]) = ($8 + [352])
	CALL $284(($8 + [344]), $0, $1, ($8 + [304]))
	
.LABEL $label$7
	CALL $54($8)
	*([0] + [4]) = ($8 + [368])
}

void .FUNC $176 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [128])
	*([0] + [4]) = $21
	*(($22 = $21) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($22 + [24]) = *($1 + [48])
	*($22 + [32]) = *($1 + [8])
	$2 = *($1)
	*($22 + [16]) = $2
	*($1 + [140]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [144]) = (*($1 + [144]) + [1])
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [848])
	*($22 + [48]) = [0]
	*($22) = ($22 + [48])
	$5 = ($1 + [8])
	*($22 + [60]) = $5
	*($22 + [56]) = $1
	$8 = ($1 + [10])
	*($22 + [64]) = $8
	$9 = ($1 + [12])
	*($22 + [68]) = $9
	$10 = ($1 + [14])
	*($22 + [72]) = $10
	$11 = ($1 + [16])
	*($22 + [76]) = $11
	$12 = ($1 + [20])
	*($22 + [80]) = $12
	$13 = ($1 + [32])
	*($22 + [84]) = $13
	$4 = ($1 + [48])
	*($22 + [88]) = $4
	$14 = ($1 + [56])
	*($22 + [92]) = $14
	$15 = ($1 + [64])
	*($22 + [96]) = $15
	$16 = ($1 + [96])
	*($22 + [100]) = $16
	$17 = ($1 + [116])
	*($22 + [104]) = $17
	$18 = ($1 + [120])
	*($22 + [108]) = $18
	$19 = ($1 + [136])
	*($22 + [112]) = $19
	$6 = ($1 + [140])
	*($22 + [116]) = $6
	$7 = ($1 + [144])
	*($22 + [120]) = $7
	CALL $179(($22 + [56]), $22)
	$20 = *($22 + [48])
	if ( ($20 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($20)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $20)
	*($22 + [48]) = $22
	*($22 + [60]) = $5
	*($22 + [64]) = $8
	*($22 + [68]) = $9
	*($22 + [72]) = $10
	*($22 + [76]) = $11
	*($22 + [80]) = $12
	*($22 + [56]) = $1
	*($22 + [84]) = $13
	*($22 + [88]) = $4
	*($22 + [92]) = $14
	*($22 + [96]) = $15
	*($22 + [100]) = $16
	*($22 + [104]) = $17
	*($22 + [108]) = $18
	*($22 + [112]) = $19
	*($22 + [116]) = $6
	*($22 + [120]) = $7
	CALL $180(($22 + [56]), ($22 + [48]))
	CALL db_update_i64(*($1 + [152]), *($22 + [40]), $21, $20)
	if ( ($20 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	$21 = ($0 + [36])
	$2 = *($22 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($22 + [60]) = $1
	*($22 + [56]) = $0
	*($22 + [68]) = $1
	*($22 + [64]) = ($22 + [24])
	*($22 + [72]) = ($22 + [16])
	*($22 + [76]) = ($22 + [40])
	*($22 + [48]) = ($22 + [56])
	CALL $181(($22 + [48]), $21, ($21 + [1]))
	*([0] + [4]) = ($22 + [128])
}

void .FUNC $177 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	$7 = (int_64)0
	*($10 + [40]) = (int_64)0
	*($10 + [32]) = $1
	CALL cancel_deferred(($10 + [32]))
	$9 = CALL current_time()
	*(($10 + [60])) = [0]
	*(($10 + [64])) = [0]
	*($10 + [44]) = [0]
	*($10 + [48]) = [0]
	*($10 + [52]) = [0]
	*($10 + [56]) = [0]
	*($10 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$9 / (uint_64)(int_64)1000000)) + [60])
	*($10 + [68]) = [0]
	*(($10 + [72])) = [0]
	*(($10 + [76])) = [0]
	*($10 + [80]) = [0]
	*(($10 + [84])) = [0]
	*(($10 + [88])) = [0]
	$3 = ($10 + [68])
	$2 = *($0)
	$6 = (int_64)59
	$5 = [224]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$6 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*($10 + [24]) = $8
	*($10 + [16]) = $2
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [2064]
	$8 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)2) ){ goto $label$12 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	*($10 + [96]) = $8
	*($10 + [8]) = $1
	CALL $178($3, ($10 + [16]), $0, ($10 + [96]), ($10 + [8]))
	$7 = *($0)
	*(($10 + [52])) = [305]
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = $1
	CALL $59(($10 + [96]), ($10 + [32]))
	$5 = *($10 + [96])
	CALL send_deferred(($10 + [16]), $7, $5, (*($10 + [100]) - $5), [1])
	$5 = *($10 + [96])
	if ( ($5 == 0) ){ goto $label$13 }
	*($10 + [100]) = $5
	CALL $291($5)
	
.LABEL $label$13
	CALL $60(($10 + [32]))
	*([0] + [4]) = ($10 + [112])
}

void .FUNC $170 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [112])
	*([0] + [4]) = $12
	*($12 + [104]) = $1
	*($12 + [96]) = $2
	*($12 + [88]) = $4
	$11 = *(($0 + [80]))
	$10 = *(($0 + [84]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$1 }
	$9 = ($10 + [-24])
	$5 = ([0] - $11)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$1 }
	$10 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$9 = ($0 + [56])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$4 }
	$11 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$9), [256])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$6 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $88($9, $6)
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$9), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [1232])
	$7 = *(($0 + [40]))
	$10 = *(($0 + [44]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$5 }
	$9 = ($10 + [-24])
	$5 = ([0] - $7)
	
.LOOP $label$6:
	if ( ((int_64)*(*($9)) == (int_64)$2) ){ goto $label$5 }
	$10 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [16])
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$8 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [148]) == (int_32)$5), [256])
	goto $label$7 
	
.LABEL $label$8
	$9 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$9 }
	$9 = CALL $87($5, $9)
	CALL eosio_assert(((int_32)*($9 + [148]) == (int_32)$5), [256])
	goto $label$7 
	
.LABEL $label$9
	$9 = [0]
	
.LABEL $label$7
	*($12 + [84]) = $9
	*($12 + [80]) = $5
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [1264])
	*($0 + [296]) = *($9 + [8])
	*($12 + [72]) = ($0 + [96])
	CALL $160(($12 + [64]), ($12 + [72]), ($12 + [96]))
	$9 = *($12 + [68])
	if ( ($9 == 0) ){ goto $label$11 }
	
.LOOP $label$12:
	if ( ((int_64)*($9 + [8]) != (int_64)*($12 + [96])) ){ goto $label$11 }
	if ( ((int_64)*($9 + [16]) != (int_64)*($12 + [104])) ){ goto $label$13 }
	$6 = [1]
	if ( ((int_32)*($9 + [33]) == (int_32)[1]) ){ goto $label$10 }
	
.LABEL $label$13
	CALL $161(($12 + [64]))
	$9 = *($12 + [68])
	if ( $9 ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [0]
	
.LABEL $label$10
	CALL eosio_assert($6, [1776])
	CALL eosio_assert(((int_32)*(*($12 + [84]) + [96]) == (int_32)[1]), [1952])
	CALL $297(($12 + [48]), $3)
	$9 = *($12 + [48])
	CALL eosio_assert(((( *($12 + [52]) ? uint_32($9 >> [1]) : ($9 & [1]) ) + [-2]) <= [29]), [2000])
	if ( ((*($12 + [48]) & [1]) == 0) ){ goto $label$14 }
	CALL $291(*($12 + [56]))
	
.LABEL $label$14
	$2 = *($12 + [88])
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)-100) <= (int_64)999801), [2032])
	CALL eosio_assert(((uint_64)*($11 + [16]) >= (uint_64)$2), [1328])
	$4 = *([0] + [24])
	$1 = *($12 + [104])
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$15 }
	$8 = (int_64)
	CALL $89($0, $1, $8((int_64)0 - $2)))
	CALL $90($0, $1, [5], $8, (int_64)0, (int_64)0)
	$1 = *($0)
	
.LABEL $label$15
	if ( ((int_64)$1 == (int_64)$4) ){ goto $label$16 }
	CALL $89($0, $4, $2)
	CALL $90($0, $4, [5], $2, (int_64)0, (int_64)0)
	
.LABEL $label$16
	$9 = ($0 + [216])
	$6 = ($0 + [232])
	$2 = *($6)
	if ( ((int_64)$2 != (int_64)-1) ){ goto $label$17 }
	$2 = (int_64)0
	$10 = CALL db_lowerbound_i64(*($9), *(($0 + [224])), (int_64)-6228196809676685312, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$18 }
	CALL $80($9, $10)
	*($12 + [20]) = [0]
	*($12 + [16]) = $9
	$2 = *(*(CALL $174(($12 + [16])) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	*(($0 + [232])) = $2
	
.LABEL $label$17
	CALL eosio_assert((uint_64)($2 <= (int_64)-2), [976])
	*($12 + [40]) = *($6)
	$2 = *($0)
	*($12 + [28]) = $3
	*($12 + [20]) = ($12 + [96])
	*($12 + [16]) = ($12 + [40])
	*($12 + [24]) = ($12 + [104])
	*($12 + [32]) = ($12 + [88])
	*($12 + [36]) = ($12 + [80])
	CALL $175(($12 + [8]), $9, $2, ($12 + [16]))
	$2 = *($0 + [8])
	$9 = *($12 + [84])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [688])
	CALL $176($5, $9, $2, ($12 + [16]))
	CALL $177($0, *($12 + [40]))
	*([0] + [4]) = ($12 + [112])
}

void .FUNC $171 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*(($21 = $22) + [16]) = *($1 + [8])
	$4 = ($1 + [8])
	$3 = *($3)
	$5 = *($1)
	$19 = ($1 + [108])
	$20 = *($19)
	if ( ((int_32)$20 == (int_32)*(($1 + [112]))) ){ goto $label$2 }
	*($20) = *($3)
	*(($20 + [8])) = *(($3 + [8]))
	*($19) = (*($19) + [16])
	$20 = ($1 + [104])
	goto $label$1 
	
.LABEL $label$2
	$20 = ($1 + [104])
	CALL $173($20, $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [848])
	*($21 + [24]) = [0]
	*($21) = ($21 + [24])
	*($21 + [36]) = $4
	*($21 + [32]) = $1
	$6 = ($1 + [16])
	*($21 + [40]) = $6
	$7 = ($1 + [24])
	*($21 + [44]) = $7
	$8 = ($1 + [32])
	*($21 + [48]) = $8
	$9 = ($1 + [48])
	*($21 + [52]) = $9
	$10 = ($1 + [56])
	*($21 + [56]) = $10
	$11 = ($1 + [64])
	*($21 + [60]) = $11
	$12 = ($1 + [72])
	*($21 + [64]) = $12
	$13 = ($1 + [76])
	*($21 + [68]) = $13
	$14 = ($1 + [88])
	*($21 + [72]) = $14
	$15 = ($1 + [92])
	*($21 + [76]) = $15
	*($21 + [80]) = $20
	$16 = ($1 + [116])
	*($21 + [84]) = $16
	$17 = ($1 + [120])
	*($21 + [88]) = $17
	$18 = ($1 + [124])
	*($21 + [92]) = $18
	CALL $108(($21 + [32]), $21)
	$19 = *($21 + [24])
	if ( ($19 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($19)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($22 - (($19 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($21 + [4]) = $3
	*($21) = $3
	*($21 + [8]) = ($3 + $19)
	*($21 + [24]) = $21
	*($21 + [36]) = $4
	*($21 + [40]) = $6
	*($21 + [44]) = $7
	*($21 + [48]) = $8
	*($21 + [52]) = $9
	*($21 + [56]) = $10
	*($21 + [32]) = $1
	*($21 + [60]) = $11
	*($21 + [64]) = $12
	*($21 + [68]) = $13
	*($21 + [72]) = $14
	*($21 + [76]) = $15
	*($21 + [80]) = $20
	*($21 + [84]) = $16
	*($21 + [88]) = $17
	*($21 + [92]) = $18
	CALL $109(($21 + [32]), ($21 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $3, $19)
	if ( ($19 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($21 + [32]) = *($4)
	if ( (CALL memcmp(($21 + [16]), ($21 + [32]), [8]) == 0) ){ goto $label$7 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6228196809676685312, ($21 + [24]), $5)
	*($3) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($21 + [32]))
	
.LABEL $label$7
	*([0] + [4]) = ($21 + [96])
}

void .FUNC $172 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [96])
	*([0] + [4]) = $21
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($1 + [116]) = [1]
	*(($22 = $21) + [16]) = *($1 + [8])
	$5 = *($1)
	CALL eosio_assert([1], [848])
	*($22 + [24]) = [0]
	*($22) = ($22 + [24])
	$4 = ($1 + [8])
	*($22 + [36]) = $4
	*($22 + [32]) = $1
	$7 = ($1 + [16])
	*($22 + [40]) = $7
	$8 = ($1 + [24])
	*($22 + [44]) = $8
	$9 = ($1 + [32])
	*($22 + [48]) = $9
	$10 = ($1 + [48])
	*($22 + [52]) = $10
	$11 = ($1 + [56])
	*($22 + [56]) = $11
	$12 = ($1 + [64])
	*($22 + [60]) = $12
	$13 = ($1 + [72])
	*($22 + [64]) = $13
	$14 = ($1 + [76])
	*($22 + [68]) = $14
	$15 = ($1 + [88])
	*($22 + [72]) = $15
	$16 = ($1 + [92])
	*($22 + [76]) = $16
	$17 = ($1 + [104])
	*($22 + [80]) = $17
	$6 = ($1 + [116])
	*($22 + [84]) = $6
	$18 = ($1 + [120])
	*($22 + [88]) = $18
	$19 = ($1 + [124])
	*($22 + [92]) = $19
	CALL $108(($22 + [32]), $22)
	$20 = *($22 + [24])
	if ( ($20 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($20)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $20)
	*($22 + [24]) = $22
	*($22 + [36]) = $4
	*($22 + [40]) = $7
	*($22 + [44]) = $8
	*($22 + [48]) = $9
	*($22 + [52]) = $10
	*($22 + [56]) = $11
	*($22 + [32]) = $1
	*($22 + [60]) = $12
	*($22 + [64]) = $13
	*($22 + [68]) = $14
	*($22 + [72]) = $15
	*($22 + [76]) = $16
	*($22 + [80]) = $17
	*($22 + [84]) = $6
	*($22 + [88]) = $18
	*($22 + [92]) = $19
	CALL $109(($22 + [32]), ($22 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $21, $20)
	if ( ($20 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($22 + [32]) = *($4)
	if ( (CALL memcmp(($22 + [16]), ($22 + [32]), [8]) == 0) ){ goto $label$5 }
	$21 = ($1 + [136])
	$1 = *($21)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6228196809676685312, ($22 + [24]), $5)
	*($21) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($22 + [32]))
	
.LABEL $label$5
	*([0] + [4]) = ($22 + [96])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [384])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [384])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $246 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [128])
	*([0] + [4]) = $21
	*(($22 = $21) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($22 + [24]) = *($1 + [48])
	*($22 + [32]) = *($1 + [8])
	*($1 + [12]) = (*($1 + [12]) + [65535])
	*($22 + [16]) = *($1)
	CALL eosio_assert([1], [848])
	*($22 + [48]) = [0]
	*($22) = ($22 + [48])
	$5 = ($1 + [8])
	*($22 + [60]) = $5
	*($22 + [56]) = $1
	$7 = ($1 + [10])
	*($22 + [64]) = $7
	$6 = ($1 + [12])
	*($22 + [68]) = $6
	$8 = ($1 + [14])
	*($22 + [72]) = $8
	$9 = ($1 + [16])
	*($22 + [76]) = $9
	$10 = ($1 + [20])
	*($22 + [80]) = $10
	$11 = ($1 + [32])
	*($22 + [84]) = $11
	$4 = ($1 + [48])
	*($22 + [88]) = $4
	$12 = ($1 + [56])
	*($22 + [92]) = $12
	$13 = ($1 + [64])
	*($22 + [96]) = $13
	$14 = ($1 + [96])
	*($22 + [100]) = $14
	$15 = ($1 + [116])
	*($22 + [104]) = $15
	$16 = ($1 + [120])
	*($22 + [108]) = $16
	$17 = ($1 + [136])
	*($22 + [112]) = $17
	$18 = ($1 + [140])
	*($22 + [116]) = $18
	$19 = ($1 + [144])
	*($22 + [120]) = $19
	CALL $179(($22 + [56]), $22)
	$20 = *($22 + [48])
	if ( ($20 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($20)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $20)
	*($22 + [48]) = $22
	*($22 + [60]) = $5
	*($22 + [64]) = $7
	*($22 + [68]) = $6
	*($22 + [72]) = $8
	*($22 + [76]) = $9
	*($22 + [80]) = $10
	*($22 + [56]) = $1
	*($22 + [84]) = $11
	*($22 + [88]) = $4
	*($22 + [92]) = $12
	*($22 + [96]) = $13
	*($22 + [100]) = $14
	*($22 + [104]) = $15
	*($22 + [108]) = $16
	*($22 + [112]) = $17
	*($22 + [116]) = $18
	*($22 + [120]) = $19
	CALL $180(($22 + [56]), ($22 + [48]))
	CALL db_update_i64(*($1 + [152]), *($22 + [40]), $21, $20)
	if ( ($20 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	$21 = ($0 + [36])
	$2 = *($22 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($22 + [60]) = $1
	*($22 + [56]) = $0
	*($22 + [68]) = $1
	*($22 + [64]) = ($22 + [24])
	*($22 + [72]) = ($22 + [16])
	*($22 + [76]) = ($22 + [40])
	*($22 + [48]) = ($22 + [56])
	CALL $247(($22 + [48]), $21, ($21 + [1]))
	*([0] + [4]) = ($22 + [128])
}

void .FUNC $178 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $290(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $296($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $290([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $62(($8 + [28]), [8])
	$2 = *($8 + [28])
	CALL eosio_assert(((int_32)(*($2) - $2) > (int_32)[7]), [240])
	CALL memcpy($2, $4, [8])
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $291($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $291($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $291($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC $276 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	*($10 + [72]) = $1
	*($10 + [64]) = $3
	$4 = *(($0 + [80]))
	$8 = *(($0 + [84]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [56])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$7), [256])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$6 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $88($7, $6)
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$7), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [1232])
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$5 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $3)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $87($6, $8)
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	
.LABEL $label$7
	CALL eosio_assert(($7 == 0), [3344])
	CALL $297(($10 + [48]), $2)
	$7 = *($10 + [48])
	CALL eosio_assert(((( *($10 + [52]) ? uint_32($7 >> [1]) : ($7 & [1]) ) + [-2]) <= [149]), [2832])
	if ( ((*($10 + [48]) & [1]) == 0) ){ goto $label$9 }
	CALL $291(*($10 + [56]))
	$3 = *($10 + [64])
	
.LABEL $label$9
	CALL eosio_assert(((uint_64)$3 > (uint_64)(int_64)9999), [3360])
	*($10 + [40]) = $6
	CALL $277(($10 + [32]), ($10 + [40]), ($10 + [72]))
	$7 = *($10 + [36])
	if ( ($7 == 0) ){ goto $label$10 }
	$3 = (int_64)0
	
.LOOP $label$12:
	if ( ((int_64)*($7 + [48]) != (int_64)*($10 + [72])) ){ goto $label$11 }
	$3 = ((int_64)$3 + (int_64)1)
	CALL $278(($10 + [32]))
	$7 = *($10 + [36])
	if ( $7 ){ goto $label$12 }
	
.LABEL $label$11
	if ( (uint_64)($3 <= (int_64)5) ){ goto $label$10 }
	CALL eosio_assert(((uint_64)*($9 + [16]) > (uint_64)(int_64)999), [1328])
	$1 = *([0] + [16])
	$3 = *($10 + [72])
	if ( ((int_64)*($0) == (int_64)$3) ){ goto $label$13 }
	CALL $89($0, $3, (int_64)-1000)
	CALL $90($0, $3, [3], (int_64)-1000, (int_64)0, (int_64)0)
	$3 = *($0)
	
.LABEL $label$13
	if ( ((int_64)$3 == (int_64)$1) ){ goto $label$10 }
	CALL $89($0, $1, (int_64)1000)
	CALL $90($0, $1, [3], (int_64)1000, (int_64)0, (int_64)0)
	
.LABEL $label$10
	$3 = *($0 + [8])
	*($10 + [20]) = $2
	*($10 + [16]) = ($10 + [64])
	*($10 + [24]) = ($10 + [72])
	CALL $279(($10 + [8]), $6, $3, ($10 + [16]))
	$7 = ($0 + [96])
	$6 = ($0 + [112])
	$3 = *($6)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$14 }
	$3 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($7), *(($0 + [104])), (int_64)7343588593878171648, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$15 }
	CALL $135($7, $8)
	*($10 + [20]) = [0]
	*($10 + [16]) = $7
	$3 = *(*(CALL $259(($10 + [16])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*(($0 + [112])) = $3
	
.LABEL $label$14
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [976])
	*($10 + [8]) = *($6)
	$3 = *(($0 + [8]))
	*($10 + [20]) = ($10 + [64])
	*($10 + [16]) = ($10 + [8])
	*($10 + [24]) = ($10 + [72])
	CALL $280($10, $7, $3, ($10 + [16]))
	*([0] + [4]) = ($10 + [80])
}

void .FUNC $221 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_32 $22
	int_32 $23
	$23 = (*([0] + [4]) - [128])
	*([0] + [4]) = $23
	*(($22 = $23) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($22 + [24]) = *($1 + [48])
	*($22 + [32]) = *($1 + [8])
	$2 = *($1)
	*($22 + [16]) = $2
	$5 = ($1 + [8])
	$4 = ($1 + [48])
	$21 = $2
	$20 = *($3)
	$6 = ($1 + [100])
	if ( ((int_32)$6 == (int_32)$20) ){ goto $label$1 }
	CALL $131($6, *($20), *($20 + [4]))
	$21 = *($1)
	
.LABEL $label$1
	*(($1 + [112])) = *(*($3 + [4]))
	*(($1 + [113])) = *(*($3 + [8]))
	CALL eosio_assert(((int_64)$2 == (int_64)$21), [848])
	*($22 + [48]) = [0]
	*($22) = ($22 + [48])
	*($22 + [60]) = $5
	*($22 + [56]) = $1
	$6 = ($1 + [10])
	*($22 + [64]) = $6
	$7 = ($1 + [12])
	*($22 + [68]) = $7
	$8 = ($1 + [14])
	*($22 + [72]) = $8
	$9 = ($1 + [16])
	*($22 + [76]) = $9
	$10 = ($1 + [20])
	*($22 + [80]) = $10
	$11 = ($1 + [32])
	*($22 + [84]) = $11
	*($22 + [88]) = $4
	$12 = ($1 + [56])
	*($22 + [92]) = $12
	$13 = ($1 + [64])
	*($22 + [96]) = $13
	$14 = ($1 + [96])
	*($22 + [100]) = $14
	$15 = ($1 + [116])
	*($22 + [104]) = $15
	$16 = ($1 + [120])
	*($22 + [108]) = $16
	$17 = ($1 + [136])
	*($22 + [112]) = $17
	$18 = ($1 + [140])
	*($22 + [116]) = $18
	$19 = ($1 + [144])
	*($22 + [120]) = $19
	CALL $179(($22 + [56]), $22)
	$20 = *($22 + [48])
	if ( ($20 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($20)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($23 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	*($22 + [4]) = $3
	*($22) = $3
	*($22 + [8]) = ($3 + $20)
	*($22 + [48]) = $22
	*($22 + [60]) = $5
	*($22 + [64]) = $6
	*($22 + [68]) = $7
	*($22 + [72]) = $8
	*($22 + [76]) = $9
	*($22 + [80]) = $10
	*($22 + [56]) = $1
	*($22 + [84]) = $11
	*($22 + [88]) = $4
	*($22 + [92]) = $12
	*($22 + [96]) = $13
	*($22 + [100]) = $14
	*($22 + [104]) = $15
	*($22 + [108]) = $16
	*($22 + [112]) = $17
	*($22 + [116]) = $18
	*($22 + [120]) = $19
	CALL $180(($22 + [56]), ($22 + [48]))
	CALL db_update_i64(*($1 + [152]), *($22 + [40]), $3, $20)
	if ( ($20 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$3 = ($0 + [36])
	$2 = *($22 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($22 + [60]) = $1
	*($22 + [56]) = $0
	*($22 + [68]) = $1
	*($22 + [64]) = ($22 + [24])
	*($22 + [72]) = ($22 + [16])
	*($22 + [76]) = ($22 + [40])
	*($22 + [48]) = ($22 + [56])
	CALL $222(($22 + [48]), $3, ($3 + [1]))
	*([0] + [4]) = ($22 + [128])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [544])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [80]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [96]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [112])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [176]
	$7 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [192]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$23 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$29 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [176]
	$7 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$35 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$3 = ($3 + [165])
	goto $label$33 
	
.LABEL $label$35
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$31
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$30 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$29
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [80]
	$7 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$41 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$3 = ($3 + [165])
	goto $label$39 
	
.LABEL $label$41
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$37
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$36 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*($9 + [536]) = $0
	if ( ((int_64)$2 <= (int_64)-4417035514830051665) ){ goto $label$73 }
	if ( ((int_64)$2 <= (int_64)5031766159329241599) ){ goto $label$72 }
	if ( ((int_64)$2 <= (int_64)5387994004195377151) ){ goto $label$70 }
	if ( ((int_64)$2 <= (int_64)9015421809015128063) ){ goto $label$66 }
	if ( ((int_64)$2 == (int_64)9015421809015128064) ){ goto $label$58 }
	if ( ((int_64)$2 == (int_64)9015421809015248896) ){ goto $label$57 }
	if ( ((int_64)$2 != (int_64)9015426458138443776) ){ goto $label$14 }
	*($9 + [356]) = [0]
	*($9 + [352]) = [1]
	*($9 + [184 align=4]) = *($9 + [352])
	CALL $14(($9 + [536]), ($9 + [184]))
	goto $label$14 
	
.LABEL $label$73
	if ( ((int_64)$2 > (int_64)-4997502813180936193) ){ goto $label$71 }
	if ( ((int_64)$2 > (int_64)-6568652712196784129) ){ goto $label$69 }
	if ( ((int_64)$2 > (int_64)-6571496467156266753) ){ goto $label$65 }
	if ( ((int_64)$2 == (int_64)-8462908894298685440) ){ goto $label$56 }
	if ( ((int_64)$2 != (int_64)-7694772279732862976) ){ goto $label$14 }
	*($9 + [476]) = [0]
	*($9 + [472]) = [2]
	*($9 + [64 align=4]) = *($9 + [472])
	CALL $18(($9 + [536]), ($9 + [64]))
	goto $label$14 
	
.LABEL $label$72
	if ( ((int_64)$2 > (int_64)4749366678842769407) ){ goto $label$68 }
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$64 }
	if ( ((int_64)$2 == (int_64)-4417035514830051664) ){ goto $label$55 }
	if ( ((int_64)$2 != (int_64)-3841130677495922688) ){ goto $label$14 }
	*($9 + [324]) = [0]
	*($9 + [320]) = [3]
	*($9 + [216 align=4]) = *($9 + [320])
	CALL $9(($9 + [536]), ($9 + [216]))
	goto $label$14 
	
.LABEL $label$71
	if ( ((int_64)$2 > (int_64)-4417281453419659265) ){ goto $label$67 }
	if ( ((int_64)$2 > (int_64)-4460071155323109377) ){ goto $label$63 }
	if ( ((int_64)$2 == (int_64)-4997502813180936192) ){ goto $label$54 }
	if ( ((int_64)$2 != (int_64)-4860128608896679936) ){ goto $label$14 }
	*($9 + [388]) = [0]
	*($9 + [384]) = [4]
	*($9 + [152 align=4]) = *($9 + [384])
	CALL $7(($9 + [536]), ($9 + [152]))
	goto $label$14 
	
.LABEL $label$70
	if ( ((int_64)$2 > (int_64)5386868104288534527) ){ goto $label$62 }
	if ( ((int_64)$2 == (int_64)5031766159329241600) ){ goto $label$53 }
	if ( ((int_64)$2 != (int_64)5054842164157349888) ){ goto $label$14 }
	*($9 + [372]) = [0]
	*($9 + [368]) = [5]
	*($9 + [168 align=4]) = *($9 + [368])
	CALL $38(($9 + [536]), ($9 + [168]))
	goto $label$14 
	
.LABEL $label$69
	if ( ((int_64)$2 > (int_64)-5001247386194935809) ){ goto $label$61 }
	if ( ((int_64)$2 == (int_64)-6568652712196784128) ){ goto $label$52 }
	if ( ((int_64)$2 != (int_64)-6561406826617448960) ){ goto $label$14 }
	*($9 + [412]) = [0]
	*($9 + [408]) = [6]
	*($9 + [128 align=4]) = *($9 + [408])
	CALL $30(($9 + [536]), ($9 + [128]))
	goto $label$14 
	
.LABEL $label$68
	if ( ((int_64)$2 > (int_64)4923678707308849343) ){ goto $label$60 }
	if ( ((int_64)$2 == (int_64)4749366678842769408) ){ goto $label$51 }
	if ( ((int_64)$2 != (int_64)4822974034520047616) ){ goto $label$14 }
	*($9 + [364]) = [0]
	*($9 + [360]) = [7]
	*($9 + [176 align=4]) = *($9 + [360])
	CALL $36(($9 + [536]), ($9 + [176]))
	goto $label$14 
	
.LABEL $label$67
	if ( ((int_64)$2 > (int_64)-4417122600693530625) ){ goto $label$59 }
	if ( ((int_64)$2 == (int_64)-4417281453419659264) ){ goto $label$50 }
	if ( ((int_64)$2 != (int_64)-4417130419820953600) ){ goto $label$14 }
	*($9 + [460]) = [0]
	*($9 + [456]) = [8]
	*($9 + [80 align=4]) = *($9 + [456])
	CALL $21(($9 + [536]), ($9 + [80]))
	goto $label$14 
	
.LABEL $label$66
	if ( ((int_64)$2 == (int_64)5387994004195377152) ){ goto $label$49 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$14 }
	*($9 + [316]) = [0]
	*($9 + [312]) = [9]
	*($9 + [224 align=4]) = *($9 + [312])
	CALL $46(($9 + [536]), ($9 + [224]))
	goto $label$14 
	
.LABEL $label$65
	if ( ((int_64)$2 == (int_64)-6571496467156266752) ){ goto $label$48 }
	if ( ((int_64)$2 != (int_64)-6570952942061699072) ){ goto $label$14 }
	*($9 + [420]) = [0]
	*($9 + [416]) = [10]
	*($9 + [120 align=4]) = *($9 + [416])
	CALL $30(($9 + [536]), ($9 + [120]))
	goto $label$14 
	
.LABEL $label$64
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$47 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$14 }
	*($9 + [340]) = [0]
	*($9 + [336]) = [11]
	*($9 + [200 align=4]) = *($9 + [336])
	CALL $7(($9 + [536]), ($9 + [200]))
	goto $label$14 
	
.LABEL $label$63
	if ( ((int_64)$2 == (int_64)-4460071155323109376) ){ goto $label$46 }
	if ( ((int_64)$2 != (int_64)-4417333830937684480) ){ goto $label$14 }
	*($9 + [444]) = [0]
	*($9 + [440]) = [12]
	*($9 + [96 align=4]) = *($9 + [440])
	CALL $24(($9 + [536]), ($9 + [96]))
	goto $label$14 
	
.LABEL $label$62
	if ( ((int_64)$2 == (int_64)5386868104288534528) ){ goto $label$45 }
	if ( ((int_64)$2 != (int_64)5387431054241955840) ){ goto $label$14 }
	*($9 + [284]) = [0]
	*($9 + [280]) = [13]
	*($9 + [256 align=4]) = *($9 + [280])
	CALL $49(($9 + [536]), ($9 + [256]))
	goto $label$14 
	
.LABEL $label$61
	if ( ((int_64)$2 == (int_64)-5001247386194935808) ){ goto $label$44 }
	if ( ((int_64)$2 != (int_64)-4997502820708603392) ){ goto $label$14 }
	*($9 + [508]) = [0]
	*($9 + [504]) = [14]
	*($9 + [32 align=4]) = *($9 + [504])
	CALL $7(($9 + [536]), ($9 + [32]))
	goto $label$14 
	
.LABEL $label$60
	if ( ((int_64)$2 == (int_64)4923678707308849344) ){ goto $label$43 }
	if ( ((int_64)$2 != (int_64)4949667096712708096) ){ goto $label$14 }
	*($9 + [332]) = [0]
	*($9 + [328]) = [15]
	*($9 + [208 align=4]) = *($9 + [328])
	CALL $21(($9 + [536]), ($9 + [208]))
	goto $label$14 
	
.LABEL $label$59
	if ( ((int_64)$2 == (int_64)-4417122600693530624) ){ goto $label$42 }
	if ( ((int_64)$2 != (int_64)-4417092652775243776) ){ goto $label$14 }
	*($9 + [428]) = [0]
	*($9 + [424]) = [16]
	*($9 + [112 align=4]) = *($9 + [424])
	CALL $28(($9 + [536]), ($9 + [112]))
	goto $label$14 
	
.LABEL $label$58
	*($9 + [500]) = [0]
	*($9 + [496]) = [17]
	*($9 + [40 align=4]) = *($9 + [496])
	CALL $14(($9 + [536]), ($9 + [40]))
	goto $label$14 
	
.LABEL $label$57
	*($9 + [492]) = [0]
	*($9 + [488]) = [18]
	*($9 + [48 align=4]) = *($9 + [488])
	CALL $9(($9 + [536]), ($9 + [48]))
	goto $label$14 
	
.LABEL $label$56
	*($9 + [484]) = [0]
	*($9 + [480]) = [19]
	*($9 + [56 align=4]) = *($9 + [480])
	CALL $7(($9 + [536]), ($9 + [56]))
	goto $label$14 
	
.LABEL $label$55
	*($9 + [436]) = [0]
	*($9 + [432]) = [20]
	*($9 + [104 align=4]) = *($9 + [432])
	CALL $26(($9 + [536]), ($9 + [104]))
	goto $label$14 
	
.LABEL $label$54
	*($9 + [468]) = [0]
	*($9 + [464]) = [21]
	*($9 + [72 align=4]) = *($9 + [464])
	CALL $14(($9 + [536]), ($9 + [72]))
	goto $label$14 
	
.LABEL $label$53
	*($9 + [516]) = [0]
	*($9 + [512]) = [22]
	*($9 + [24 align=4]) = *($9 + [512])
	CALL $11(($9 + [536]), ($9 + [24]))
	goto $label$14 
	
.LABEL $label$52
	*($9 + [404]) = [0]
	*($9 + [400]) = [23]
	*($9 + [136 align=4]) = *($9 + [400])
	CALL $30(($9 + [536]), ($9 + [136]))
	goto $label$14 
	
.LABEL $label$51
	*($9 + [380]) = [0]
	*($9 + [376]) = [24]
	*($9 + [160 align=4]) = *($9 + [376])
	CALL $36(($9 + [536]), ($9 + [160]))
	goto $label$14 
	
.LABEL $label$50
	*($9 + [308]) = [0]
	*($9 + [304]) = [25]
	*($9 + [232 align=4]) = *($9 + [304])
	CALL $46(($9 + [536]), ($9 + [232]))
	goto $label$14 
	
.LABEL $label$49
	*($9 + [276]) = [0]
	*($9 + [272]) = [26]
	*($9 + [264 align=4]) = *($9 + [272])
	CALL $49(($9 + [536]), ($9 + [264]))
	goto $label$14 
	
.LABEL $label$48
	*($9 + [396]) = [0]
	*($9 + [392]) = [27]
	*($9 + [144 align=4]) = *($9 + [392])
	CALL $30(($9 + [536]), ($9 + [144]))
	goto $label$14 
	
.LABEL $label$47
	*($9 + [348]) = [0]
	*($9 + [344]) = [28]
	*($9 + [192 align=4]) = *($9 + [344])
	CALL $7(($9 + [536]), ($9 + [192]))
	goto $label$14 
	
.LABEL $label$46
	*($9 + [300]) = [0]
	*($9 + [296]) = [29]
	*($9 + [240 align=4]) = *($9 + [296])
	CALL $49(($9 + [536]), ($9 + [240]))
	goto $label$14 
	
.LABEL $label$45
	*($9 + [292]) = [0]
	*($9 + [288]) = [30]
	*($9 + [248 align=4]) = *($9 + [288])
	CALL $9(($9 + [536]), ($9 + [248]))
	goto $label$14 
	
.LABEL $label$44
	*($9 + [532]) = [0]
	*($9 + [528]) = [31]
	*($9 + [8 align=4]) = *($9 + [528])
	CALL $7(($9 + [536]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$43
	*($9 + [524]) = [0]
	*($9 + [520]) = [32]
	*($9 + [16 align=4]) = *($9 + [520])
	CALL $9(($9 + [536]), ($9 + [16]))
	goto $label$14 
	
.LABEL $label$42
	*($9 + [452]) = [0]
	*($9 + [448]) = [33]
	*($9 + [88 align=4]) = *($9 + [448])
	CALL $21(($9 + [536]), ($9 + [88]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [544])
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [384])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

void .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	$23 = *($0 + [4])
	*($1) = *(*($23))
	*($1 + [8]) = *(*($23 + [4]))
	$2 = *($0)
	*($1 + [16]) = [3]
	*($1 + [24]) = *(*($23 + [8]))
	$6 = ($1 + [32])
	CALL $293($6, *($23 + [12]))
	*($1 + [48]) = *(*($23 + [16]))
	$23 = *(*($23 + [20]))
	*($1 + [64]) = (int_64)10000
	*($1 + [56]) = $23
	*($1 + [116]) = [0]
	*($1 + [120]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [124]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [300])
	*(($23 = $22) + [24]) = [0]
	*($23 + [8]) = ($23 + [24])
	$3 = ($1 + [8])
	*($23 + [36]) = $3
	*($23 + [32]) = $1
	$4 = ($1 + [16])
	*($23 + [40]) = $4
	$5 = ($1 + [24])
	*($23 + [44]) = $5
	*($23 + [48]) = $6
	$7 = ($1 + [48])
	*($23 + [52]) = $7
	$8 = ($1 + [56])
	*($23 + [56]) = $8
	$9 = ($1 + [64])
	*($23 + [60]) = $9
	$13 = ($1 + [72])
	*($23 + [64]) = $13
	$14 = ($1 + [76])
	*($23 + [68]) = $14
	$15 = ($1 + [88])
	*($23 + [72]) = $15
	$16 = ($1 + [92])
	*($23 + [76]) = $16
	$17 = ($1 + [104])
	*($23 + [80]) = $17
	$10 = ($1 + [116])
	*($23 + [84]) = $10
	$11 = ($1 + [120])
	*($23 + [88]) = $11
	$12 = ($1 + [124])
	*($23 + [92]) = $12
	CALL $108(($23 + [32]), ($23 + [8]))
	$18 = *($23 + [24])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($18)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($18 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($23 + [12]) = $22
	*($23 + [8]) = $22
	*($23 + [16]) = ($22 + $18)
	*($23 + [24]) = ($23 + [8])
	*($23 + [36]) = $3
	*($23 + [32]) = $1
	*($23 + [40]) = $4
	*($23 + [44]) = $5
	*($23 + [48]) = $6
	*($23 + [52]) = $7
	*($23 + [56]) = $8
	*($23 + [60]) = $9
	*($23 + [64]) = $13
	*($23 + [68]) = $14
	*($23 + [72]) = $15
	*($23 + [76]) = $16
	*($23 + [80]) = $17
	*($23 + [84]) = $10
	*($23 + [88]) = $11
	*($23 + [92]) = $12
	CALL $109(($23 + [32]), ($23 + [24]))
	$19 = *($1)
	*($1 + [132]) = CALL db_store_i64(*($2 + [8]), (int_64)-6228196809676685312, *(*($0 + [8])), $19, $22, $18)
	if ( ($18 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($19 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$19 + (int_64)1) : ((uint_64)$19 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$19 = *(($2 + [8]))
	$20 = *(*(($0 + [8])))
	$21 = *($1)
	*($23 + [32]) = *(($1 + [8]))
	*($1 + [136]) = CALL db_idx64_store($19, (int_64)-6228196809676685312, $20, $21, ($23 + [32]))
	*([0] + [4]) = ($23 + [96])
}

void .FUNC $188 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $48 (int_32 $0)
{
	int_64 $1
	int_32 $2
	$2 = (*([0] + [4]) - [304])
	*([0] + [4]) = $2
	$1 = *($0)
	*(($2 + [24])) = $1
	*(($2 + [32])) = (int_64)-1
	*(($2 + [40])) = [0]
	*($2) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = $1
	*(($2 + [44])) = [0]
	*(($2 + [48])) = [0]
	*(($2 + [52])) = [0]
	*($2 + [56]) = $1
	*(($2 + [64])) = $1
	*(($2 + [72])) = (int_64)-1
	*(($2 + [80])) = [0]
	*(($2 + [84])) = [0]
	*(($2 + [88])) = [0]
	*($2 + [96]) = $1
	*(($2 + [104])) = $1
	*(($2 + [112])) = (int_64)-1
	*(($2 + [120])) = [0]
	*(($2 + [124])) = [0]
	*(($2 + [128])) = [0]
	*(($2 + [132])) = [0]
	*($2 + [136]) = $1
	*(($2 + [144])) = $1
	*(($2 + [152])) = (int_64)-1
	*(($2 + [160])) = [0]
	*(($2 + [164])) = [0]
	*(($2 + [168])) = [0]
	*(($2 + [172])) = [0]
	*($2 + [176]) = $1
	*(($2 + [184])) = $1
	*(($2 + [192])) = (int_64)-1
	*(($2 + [200])) = [0]
	*(($2 + [204])) = [0]
	*(($2 + [208])) = [0]
	*(($2 + [212])) = [0]
	*($2 + [216]) = $1
	*(($2 + [224])) = $1
	*(($2 + [232])) = (int_64)-1
	*(($2 + [240])) = [0]
	*(($2 + [244])) = [0]
	*(($2 + [248])) = [0]
	*(($2 + [252])) = [0]
	*($2 + [256]) = $1
	*(($2 + [264])) = $1
	*(($2 + [272])) = (int_64)-1
	*(($2 + [280])) = [0]
	*(($2 + [284])) = [0]
	*(($2 + [288])) = [0]
	*($2 + [296]) = [0]
	CALL $53($2)
	CALL require_auth($1)
	CALL $54($2)
	*([0] + [4]) = ($2 + [304])
}

void .FUNC $264 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $290([56])) + [40]) = $1
	CALL $271(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [44])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $144(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $291($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $266 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	*($6 + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($6 + [64]) = *($1 + [16])
	*($6 + [72]) = *($1 + [8])
	*($1 + [33]) = [0]
	$5 = *($1)
	*($6 + [56]) = $5
	CALL eosio_assert([1], [848])
	*($6 + [48]) = ($6 + [38])
	*($6 + [44]) = $6
	*($6 + [40]) = $6
	*($6 + [88]) = ($6 + [40])
	*($6 + [100]) = ($1 + [8])
	*($6 + [96]) = $1
	*($6 + [104]) = ($1 + [16])
	*($6 + [108]) = ($1 + [24])
	*($6 + [112]) = ($1 + [32])
	*($6 + [116]) = ($1 + [33])
	*($6 + [120]) = ($1 + [36])
	CALL $242(($6 + [96]), ($6 + [88]))
	CALL db_update_i64(*($1 + [44]), $2, $6, [38])
	$4 = ($0 + [36])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [100]) = $1
	*($6 + [96]) = $0
	*($6 + [108]) = $1
	*($6 + [104]) = ($6 + [64])
	*($6 + [112]) = ($6 + [56])
	*($6 + [116]) = ($6 + [80])
	*($6 + [88]) = ($6 + [96])
	CALL $269(($6 + [88]), $4, ($4 + [1]))
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $236 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$20 = (*([0] + [4]) - [128])
	*([0] + [4]) = $20
	*(($21 = $20) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($21 + [24]) = *($1 + [48])
	*($21 + [32]) = *($1 + [8])
	*($21 + [16]) = *($1)
	$5 = ($1 + [8])
	$4 = ($1 + [48])
	$3 = *(*(*($3) + [4]) + [33])
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$2 }
	if ( $3 ){ goto $label$1 }
	*($1 + [10]) = (*($1 + [10]) + [65535])
	goto $label$1 
	
.LABEL $label$3
	*($1 + [14]) = (*($1 + [14]) + [65535])
	goto $label$1 
	
.LABEL $label$2
	*($1 + [12]) = (*($1 + [12]) + [65535])
	
.LABEL $label$1
	CALL eosio_assert([1], [848])
	*($21 + [48]) = [0]
	*($21) = ($21 + [48])
	*($21 + [60]) = $5
	*($21 + [56]) = $1
	$6 = ($1 + [10])
	*($21 + [64]) = $6
	$7 = ($1 + [12])
	*($21 + [68]) = $7
	$8 = ($1 + [14])
	*($21 + [72]) = $8
	$9 = ($1 + [16])
	*($21 + [76]) = $9
	$10 = ($1 + [20])
	*($21 + [80]) = $10
	$11 = ($1 + [32])
	*($21 + [84]) = $11
	*($21 + [88]) = $4
	$12 = ($1 + [56])
	*($21 + [92]) = $12
	$13 = ($1 + [64])
	*($21 + [96]) = $13
	$14 = ($1 + [96])
	*($21 + [100]) = $14
	$15 = ($1 + [116])
	*($21 + [104]) = $15
	$16 = ($1 + [120])
	*($21 + [108]) = $16
	$17 = ($1 + [136])
	*($21 + [112]) = $17
	$18 = ($1 + [140])
	*($21 + [116]) = $18
	$19 = ($1 + [144])
	*($21 + [120]) = $19
	CALL $179(($21 + [56]), $21)
	$3 = *($21 + [48])
	if ( ($3 <= [513]) ){ goto $label$5 }
	$20 = CALL malloc($3)
	goto $label$4 
	
.LABEL $label$5
	$20 = ($20 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $20
	
.LABEL $label$4
	*($21 + [4]) = $20
	*($21) = $20
	*($21 + [8]) = ($20 + $3)
	*($21 + [48]) = $21
	*($21 + [60]) = $5
	*($21 + [64]) = $6
	*($21 + [68]) = $7
	*($21 + [72]) = $8
	*($21 + [76]) = $9
	*($21 + [80]) = $10
	*($21 + [56]) = $1
	*($21 + [84]) = $11
	*($21 + [88]) = $4
	*($21 + [92]) = $12
	*($21 + [96]) = $13
	*($21 + [100]) = $14
	*($21 + [104]) = $15
	*($21 + [108]) = $16
	*($21 + [112]) = $17
	*($21 + [116]) = $18
	*($21 + [120]) = $19
	CALL $180(($21 + [56]), ($21 + [48]))
	CALL db_update_i64(*($1 + [152]), *($21 + [40]), $20, $3)
	if ( ($3 <= [513]) ){ goto $label$6 }
	CALL free($20)
	
.LABEL $label$6
	$20 = ($0 + [36])
	$2 = *($21 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($21 + [60]) = $1
	*($21 + [56]) = $0
	*($21 + [68]) = $1
	*($21 + [64]) = ($21 + [24])
	*($21 + [72]) = ($21 + [16])
	*($21 + [76]) = ($21 + [40])
	*($21 + [48]) = ($21 + [56])
	CALL $237(($21 + [48]), $20, ($20 + [1]))
	*([0] + [4]) = ($21 + [128])
}

void .FUNC $43 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [368])
	*([0] + [4]) = $6
	$5 = *($0)
	*(($6 + [48])) = $5
	*(($6 + [56])) = (int_64)-1
	*(($6 + [64])) = [0]
	*($6 + [32]) = $1
	*($6 + [24]) = $5
	*($6 + [40]) = $5
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	*(($6 + [76])) = [0]
	*($6 + [80]) = $5
	*(($6 + [88])) = $5
	*(($6 + [96])) = (int_64)-1
	*(($6 + [104])) = [0]
	*(($6 + [108])) = [0]
	*(($6 + [112])) = [0]
	*($6 + [120]) = $5
	*(($6 + [128])) = $5
	*(($6 + [136])) = (int_64)-1
	*(($6 + [144])) = [0]
	*(($6 + [148])) = [0]
	*(($6 + [152])) = [0]
	*(($6 + [156])) = [0]
	*($6 + [160]) = $5
	*(($6 + [168])) = $5
	*(($6 + [176])) = (int_64)-1
	*(($6 + [184])) = [0]
	*(($6 + [188])) = [0]
	*(($6 + [192])) = [0]
	*(($6 + [196])) = [0]
	*($6 + [200]) = $5
	*(($6 + [208])) = $5
	*(($6 + [216])) = (int_64)-1
	*(($6 + [224])) = [0]
	*(($6 + [228])) = [0]
	*(($6 + [232])) = [0]
	*(($6 + [236])) = [0]
	*($6 + [240]) = $5
	*(($6 + [248])) = $5
	*(($6 + [256])) = (int_64)-1
	*(($6 + [264])) = [0]
	*(($6 + [268])) = [0]
	*(($6 + [272])) = [0]
	*(($6 + [276])) = [0]
	*($6 + [280]) = $5
	*(($6 + [288])) = $5
	*(($6 + [296])) = (int_64)-1
	*(($6 + [304])) = [0]
	*(($6 + [308])) = [0]
	*(($6 + [312])) = [0]
	*($6 + [320]) = [0]
	CALL $53(($6 + [24]))
	CALL $57(($6 + [328]), ($6 + [24]))
	if ( *($6 + [336]) ){ goto $label$1 }
	if ( ((int_64)*($6 + [24]) == (int_64)$1) ){ goto $label$1 }
	$4 = *(($6 + [344]))
	$0 = *($6 + [340])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$3 }
	$0 = $4
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$4), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($6 + [340])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [344])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $297(($6 + [8]), $3)
	CALL $145(($6 + [24]), $1, $2, ($6 + [8]))
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $291(*($6 + [16]))
	
.LABEL $label$5
	CALL $54(($6 + [24]))
	*([0] + [4]) = ($6 + [368])
}

void .FUNC $42 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [352])
	*([0] + [4]) = $5
	$4 = *($0)
	*(($5 + [32])) = $4
	*(($5 + [40])) = (int_64)-1
	*(($5 + [48])) = [0]
	*($5 + [16]) = $1
	*($5 + [8]) = $4
	*($5 + [24]) = $4
	*(($5 + [52])) = [0]
	*(($5 + [56])) = [0]
	*(($5 + [60])) = [0]
	*($5 + [64]) = $4
	*(($5 + [72])) = $4
	*(($5 + [80])) = (int_64)-1
	*(($5 + [88])) = [0]
	*(($5 + [92])) = [0]
	*(($5 + [96])) = [0]
	*($5 + [104]) = $4
	*(($5 + [112])) = $4
	*(($5 + [120])) = (int_64)-1
	*(($5 + [128])) = [0]
	*(($5 + [132])) = [0]
	*(($5 + [136])) = [0]
	*(($5 + [140])) = [0]
	*($5 + [144]) = $4
	*(($5 + [152])) = $4
	*(($5 + [160])) = (int_64)-1
	*(($5 + [168])) = [0]
	*(($5 + [172])) = [0]
	*(($5 + [176])) = [0]
	*(($5 + [180])) = [0]
	*($5 + [184]) = $4
	*(($5 + [192])) = $4
	*(($5 + [200])) = (int_64)-1
	*(($5 + [208])) = [0]
	*(($5 + [212])) = [0]
	*(($5 + [216])) = [0]
	*(($5 + [220])) = [0]
	*($5 + [224]) = $4
	*(($5 + [232])) = $4
	*(($5 + [240])) = (int_64)-1
	*(($5 + [248])) = [0]
	*(($5 + [252])) = [0]
	*(($5 + [256])) = [0]
	*(($5 + [260])) = [0]
	*($5 + [264]) = $4
	*(($5 + [272])) = $4
	*(($5 + [280])) = (int_64)-1
	*(($5 + [288])) = [0]
	*(($5 + [292])) = [0]
	*(($5 + [296])) = [0]
	*($5 + [304]) = [0]
	CALL $53(($5 + [8]))
	CALL $57(($5 + [312]), ($5 + [8]))
	if ( *($5 + [320]) ){ goto $label$1 }
	if ( ((int_64)*($5 + [8]) == (int_64)$1) ){ goto $label$1 }
	$3 = *(($5 + [328]))
	$0 = *($5 + [324])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$3 }
	$0 = $3
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$3), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($5 + [324])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($5 + [328])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $151(($5 + [8]), $1, $2)
	CALL $54(($5 + [8]))
	*([0] + [4]) = ($5 + [352])
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [352])
	*([0] + [4]) = $7
	CALL prints([1472])
	CALL printui($1)
	CALL prints([1488])
	CALL printn($1)
	CALL prints([1504])
	CALL printui($2)
	CALL prints([1488])
	CALL printn($2)
	CALL $154(($7 + [304]))
	$2 = *($0)
	if ( ((int_64)*($7 + [304]) == (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)*($7 + [312]) != (int_64)$2) ){ goto $label$1 }
	CALL prints([1536])
	$4 = ($7 + [320])
	CALL $155($4)
	$5 = (($7 + [304]) + [24])
	CALL eosio_assert(((int_64)*($5) == (int_64)1397703940), [1696])
	$6 = [0]
	if ( ((uint_64)((int_64)*($4) + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$2 }
	$2 = (uint_64)*($5) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	
.LABEL $label$2
	CALL eosio_assert($6, [1584])
	CALL eosio_assert(((int_64)*($4) > (int_64)0), [1616])
	*(($7 + [32])) = (int_64)-1
	*(($7 + [40])) = [0]
	$2 = *($0)
	*(($7 + [24])) = $2
	*($7) = $2
	*($7 + [8]) = $2
	*($7 + [16]) = $2
	*(($7 + [44])) = [0]
	*(($7 + [48])) = [0]
	*(($7 + [52])) = [0]
	*($7 + [56]) = $2
	*(($7 + [64])) = $2
	*(($7 + [72])) = (int_64)-1
	*(($5 = ($7 + [80]))) = [0]
	*(($0 = ($7 + [84]))) = [0]
	*(($7 + [88])) = [0]
	*($7 + [96]) = $2
	*(($7 + [104])) = $2
	*(($7 + [112])) = (int_64)-1
	*(($7 + [120])) = [0]
	*(($7 + [124])) = [0]
	*(($7 + [128])) = [0]
	*(($7 + [132])) = [0]
	*($7 + [136]) = $2
	*(($7 + [144])) = $2
	*(($7 + [152])) = (int_64)-1
	*(($7 + [160])) = [0]
	*(($7 + [164])) = [0]
	*(($7 + [168])) = [0]
	*(($7 + [172])) = [0]
	*($7 + [176]) = $2
	*(($7 + [184])) = $2
	*(($7 + [192])) = (int_64)-1
	*(($7 + [200])) = [0]
	*(($7 + [204])) = [0]
	*(($7 + [208])) = [0]
	*(($7 + [212])) = [0]
	*($7 + [216]) = $2
	*(($7 + [224])) = $2
	*(($7 + [232])) = (int_64)-1
	*(($7 + [240])) = [0]
	*(($7 + [244])) = [0]
	*(($7 + [248])) = [0]
	*(($7 + [252])) = [0]
	*($7 + [256]) = $2
	*(($7 + [264])) = $2
	*(($7 + [272])) = (int_64)-1
	*(($7 + [280])) = [0]
	*(($7 + [284])) = [0]
	*(($7 + [288])) = [0]
	*($7 + [296]) = [0]
	CALL $53($7)
	$1 = *($4)
	$2 = *($7 + [304])
	$3 = *($5)
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$7 }
	$5 = ($6 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$8:
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$7 }
	$6 = $5
	$0 = ($5 + [-24])
	$5 = $0
	if ( ((int_32)($0 + $4) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$5 = ($7 + [56])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$11 }
	$0 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)$5), [256])
	if ( $0 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$0 = CALL db_find_i64(*(($7 + [56])), *(($7 + [64])), (int_64)-3020384829779738624, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*(CALL $88($5, $0) + [32]) == (int_32)$5), [256])
	
.LABEL $label$10
	CALL eosio_assert(((int_64)$1 != (int_64)0), [1648])
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$9 }
	CALL $89($7, $2, $1)
	CALL $90($7, $2, [1], $1, (int_64)0, (int_64)0)
	
.LABEL $label$9
	CALL $54($7)
	
.LABEL $label$1
	if ( ((*($7 + [336]) & [1]) == 0) ){ goto $label$12 }
	CALL $291(*(($7 + [344])))
	
.LABEL $label$12
	*([0] + [4]) = ($7 + [352])
}

void .FUNC $40 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [352])
	*([0] + [4]) = $6
	$5 = *($0)
	*(($6 + [32])) = $5
	*(($6 + [40])) = (int_64)-1
	*(($6 + [48])) = [0]
	*($6 + [16]) = $1
	*($6 + [8]) = $5
	*($6 + [24]) = $5
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = $5
	*(($6 + [72])) = $5
	*(($6 + [80])) = (int_64)-1
	*(($6 + [88])) = [0]
	*(($6 + [92])) = [0]
	*(($6 + [96])) = [0]
	*($6 + [104]) = $5
	*(($6 + [112])) = $5
	*(($6 + [120])) = (int_64)-1
	*(($6 + [128])) = [0]
	*(($6 + [132])) = [0]
	*(($6 + [136])) = [0]
	*(($6 + [140])) = [0]
	*($6 + [144]) = $5
	*(($6 + [152])) = $5
	*(($6 + [160])) = (int_64)-1
	*(($6 + [168])) = [0]
	*(($6 + [172])) = [0]
	*(($6 + [176])) = [0]
	*(($6 + [180])) = [0]
	*($6 + [184]) = $5
	*(($6 + [192])) = $5
	*(($6 + [200])) = (int_64)-1
	*(($6 + [208])) = [0]
	*(($6 + [212])) = [0]
	*(($6 + [216])) = [0]
	*(($6 + [220])) = [0]
	*($6 + [224]) = $5
	*(($6 + [232])) = $5
	*(($6 + [240])) = (int_64)-1
	*(($6 + [248])) = [0]
	*(($6 + [252])) = [0]
	*(($6 + [256])) = [0]
	*(($6 + [260])) = [0]
	*($6 + [264]) = $5
	*(($6 + [272])) = $5
	*(($6 + [280])) = (int_64)-1
	*(($6 + [288])) = [0]
	*(($6 + [292])) = [0]
	*(($6 + [296])) = [0]
	*($6 + [304]) = [0]
	CALL $53(($6 + [8]))
	CALL $57(($6 + [312]), ($6 + [8]))
	if ( *($6 + [320]) ){ goto $label$1 }
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$1 }
	$4 = *(($6 + [328]))
	$0 = *($6 + [324])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$3 }
	$0 = $4
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$4), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($6 + [324])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [328])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $159(($6 + [8]), $1, $2, $3)
	CALL $54(($6 + [8]))
	*([0] + [4]) = ($6 + [352])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [352])
	*([0] + [4]) = $3
	$2 = *($0)
	*(($3 + [32])) = $2
	*(($3 + [40])) = (int_64)-1
	*(($3 + [48])) = [0]
	*($3 + [8]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = $2
	*(($3 + [52])) = [0]
	*(($3 + [56])) = [0]
	*(($3 + [60])) = [0]
	*($3 + [64]) = $2
	*(($3 + [72])) = $2
	*(($3 + [80])) = (int_64)-1
	*(($3 + [88])) = [0]
	*(($3 + [92])) = [0]
	*(($3 + [96])) = [0]
	*($3 + [104]) = $2
	*(($3 + [112])) = $2
	*(($3 + [120])) = (int_64)-1
	*(($3 + [128])) = [0]
	*(($3 + [132])) = [0]
	*(($3 + [136])) = [0]
	*(($3 + [140])) = [0]
	*($3 + [144]) = $2
	*(($3 + [152])) = $2
	*(($3 + [160])) = (int_64)-1
	*(($3 + [168])) = [0]
	*(($3 + [172])) = [0]
	*(($3 + [176])) = [0]
	*(($3 + [180])) = [0]
	*($3 + [184]) = $2
	*(($3 + [192])) = $2
	*(($3 + [200])) = (int_64)-1
	*(($3 + [208])) = [0]
	*(($3 + [212])) = [0]
	*(($3 + [216])) = [0]
	*(($3 + [220])) = [0]
	*($3 + [224]) = $2
	*(($3 + [232])) = $2
	*(($3 + [240])) = (int_64)-1
	*(($3 + [248])) = [0]
	*(($3 + [252])) = [0]
	*(($3 + [256])) = [0]
	*(($3 + [260])) = [0]
	*($3 + [264]) = $2
	*(($3 + [272])) = $2
	*(($3 + [280])) = (int_64)-1
	*(($3 + [288])) = [0]
	*(($3 + [292])) = [0]
	*(($3 + [296])) = [0]
	*($3 + [304]) = [0]
	CALL $53(($3 + [8]))
	CALL require_auth($2)
	CALL eosio_assert(((int_32)($1 | [1]) == (int_32)[1]), [1184])
	CALL $57(($3 + [312]), ($3 + [8]))
	*($3 + [320]) = $1
	CALL $75(($3 + [264]), ($3 + [312]), *($3 + [16]))
	$1 = *($3 + [324])
	if ( ($1 == 0) ){ goto $label$1 }
	*(($3 + [328])) = $1
	CALL $291($1)
	
.LABEL $label$1
	CALL $54(($3 + [8]))
	*([0] + [4]) = ($3 + [352])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [384])
	CALL memcpy(($5 + [8]), $3, [1])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 ($6 & [255])), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [304])
	*([0] + [4]) = $3
	$2 = *($0)
	*(($3 + [24])) = $2
	*(($3 + [32])) = (int_64)-1
	*(($3 + [40])) = [0]
	*($3) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = $2
	*(($3 + [44])) = [0]
	*(($3 + [48])) = [0]
	*(($3 + [52])) = [0]
	*($3 + [56]) = $2
	*(($3 + [64])) = $2
	*(($3 + [72])) = (int_64)-1
	*(($3 + [80])) = [0]
	*(($3 + [84])) = [0]
	*(($3 + [88])) = [0]
	*($3 + [96]) = $2
	*(($3 + [104])) = $2
	*(($3 + [112])) = (int_64)-1
	*(($3 + [120])) = [0]
	*(($3 + [124])) = [0]
	*(($3 + [128])) = [0]
	*(($3 + [132])) = [0]
	*($3 + [136]) = $2
	*(($3 + [144])) = $2
	*(($3 + [152])) = (int_64)-1
	*(($3 + [160])) = [0]
	*(($3 + [164])) = [0]
	*(($3 + [168])) = [0]
	*(($3 + [172])) = [0]
	*($3 + [176]) = $2
	*(($3 + [184])) = $2
	*(($3 + [192])) = (int_64)-1
	*(($3 + [200])) = [0]
	*(($3 + [204])) = [0]
	*(($3 + [208])) = [0]
	*(($3 + [212])) = [0]
	*($3 + [216]) = $2
	*(($3 + [224])) = $2
	*(($3 + [232])) = (int_64)-1
	*(($3 + [240])) = [0]
	*(($3 + [244])) = [0]
	*(($3 + [248])) = [0]
	*(($3 + [252])) = [0]
	*($3 + [256]) = $2
	*(($3 + [264])) = $2
	*(($3 + [272])) = (int_64)-1
	*(($3 + [280])) = [0]
	*(($3 + [284])) = [0]
	*(($3 + [288])) = [0]
	*($3 + [296]) = [0]
	CALL $53($3)
	CALL require_auth($2)
	CALL $134($3, $1)
	CALL $54($3)
	*([0] + [4]) = ($3 + [304])
}

void .FUNC $44 (int_32 $0, int_64 $1)
{
	CALL prints([1200])
}

void .FUNC $222 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $267 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [128])
	*([0] + [4]) = $21
	*(($22 = $21) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($22 + [24]) = *($1 + [48])
	*($22 + [32]) = *($1 + [8])
	*($1 + [14]) = (*($1 + [14]) + [65535])
	*($1 + [10]) = (*($1 + [10]) + [1])
	*($22 + [16]) = *($1)
	CALL eosio_assert([1], [848])
	*($22 + [48]) = [0]
	*($22) = ($22 + [48])
	$5 = ($1 + [8])
	*($22 + [60]) = $5
	*($22 + [56]) = $1
	$7 = ($1 + [10])
	*($22 + [64]) = $7
	$8 = ($1 + [12])
	*($22 + [68]) = $8
	$6 = ($1 + [14])
	*($22 + [72]) = $6
	$9 = ($1 + [16])
	*($22 + [76]) = $9
	$10 = ($1 + [20])
	*($22 + [80]) = $10
	$11 = ($1 + [32])
	*($22 + [84]) = $11
	$4 = ($1 + [48])
	*($22 + [88]) = $4
	$12 = ($1 + [56])
	*($22 + [92]) = $12
	$13 = ($1 + [64])
	*($22 + [96]) = $13
	$14 = ($1 + [96])
	*($22 + [100]) = $14
	$15 = ($1 + [116])
	*($22 + [104]) = $15
	$16 = ($1 + [120])
	*($22 + [108]) = $16
	$17 = ($1 + [136])
	*($22 + [112]) = $17
	$18 = ($1 + [140])
	*($22 + [116]) = $18
	$19 = ($1 + [144])
	*($22 + [120]) = $19
	CALL $179(($22 + [56]), $22)
	$20 = *($22 + [48])
	if ( ($20 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($20)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $20)
	*($22 + [48]) = $22
	*($22 + [60]) = $5
	*($22 + [64]) = $7
	*($22 + [68]) = $8
	*($22 + [72]) = $6
	*($22 + [76]) = $9
	*($22 + [80]) = $10
	*($22 + [56]) = $1
	*($22 + [84]) = $11
	*($22 + [88]) = $4
	*($22 + [92]) = $12
	*($22 + [96]) = $13
	*($22 + [100]) = $14
	*($22 + [104]) = $15
	*($22 + [108]) = $16
	*($22 + [112]) = $17
	*($22 + [116]) = $18
	*($22 + [120]) = $19
	CALL $180(($22 + [56]), ($22 + [48]))
	CALL db_update_i64(*($1 + [152]), *($22 + [40]), $21, $20)
	if ( ($20 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	$21 = ($0 + [36])
	$2 = *($22 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($22 + [60]) = $1
	*($22 + [56]) = $0
	*($22 + [68]) = $1
	*($22 + [64]) = ($22 + [24])
	*($22 + [72]) = ($22 + [16])
	*($22 + [76]) = ($22 + [40])
	*($22 + [48]) = ($22 + [56])
	CALL $268(($22 + [48]), $21, ($21 + [1]))
	*([0] + [4]) = ($22 + [128])
}

void .FUNC $234 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $233 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$20 = (*([0] + [4]) - [128])
	*([0] + [4]) = $20
	*(($21 = $20) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($21 + [24]) = *($1 + [48])
	*($21 + [32]) = *($1 + [8])
	$2 = *($1)
	*($21 + [16]) = $2
	$6 = ($1 + [20])
	CALL $293($6, *($3))
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [848])
	*($21 + [48]) = [0]
	*($21) = ($21 + [48])
	$5 = ($1 + [8])
	*($21 + [60]) = $5
	*($21 + [56]) = $1
	$7 = ($1 + [10])
	*($21 + [64]) = $7
	$8 = ($1 + [12])
	*($21 + [68]) = $8
	$9 = ($1 + [14])
	*($21 + [72]) = $9
	$10 = ($1 + [16])
	*($21 + [76]) = $10
	*($21 + [80]) = $6
	$11 = ($1 + [32])
	*($21 + [84]) = $11
	$4 = ($1 + [48])
	*($21 + [88]) = $4
	$12 = ($1 + [56])
	*($21 + [92]) = $12
	$13 = ($1 + [64])
	*($21 + [96]) = $13
	$14 = ($1 + [96])
	*($21 + [100]) = $14
	$15 = ($1 + [116])
	*($21 + [104]) = $15
	$16 = ($1 + [120])
	*($21 + [108]) = $16
	$17 = ($1 + [136])
	*($21 + [112]) = $17
	$18 = ($1 + [140])
	*($21 + [116]) = $18
	$19 = ($1 + [144])
	*($21 + [120]) = $19
	CALL $179(($21 + [56]), $21)
	$3 = *($21 + [48])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$20 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$20 = ($20 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $20
	
.LABEL $label$1
	*($21 + [4]) = $20
	*($21) = $20
	*($21 + [8]) = ($20 + $3)
	*($21 + [48]) = $21
	*($21 + [60]) = $5
	*($21 + [64]) = $7
	*($21 + [68]) = $8
	*($21 + [72]) = $9
	*($21 + [76]) = $10
	*($21 + [80]) = $6
	*($21 + [56]) = $1
	*($21 + [84]) = $11
	*($21 + [88]) = $4
	*($21 + [92]) = $12
	*($21 + [96]) = $13
	*($21 + [100]) = $14
	*($21 + [104]) = $15
	*($21 + [108]) = $16
	*($21 + [112]) = $17
	*($21 + [116]) = $18
	*($21 + [120]) = $19
	CALL $180(($21 + [56]), ($21 + [48]))
	CALL db_update_i64(*($1 + [152]), *($21 + [40]), $20, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($20)
	
.LABEL $label$3
	$20 = ($0 + [36])
	$2 = *($21 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($21 + [60]) = $1
	*($21 + [56]) = $0
	*($21 + [68]) = $1
	*($21 + [64]) = ($21 + [24])
	*($21 + [72]) = ($21 + [16])
	*($21 + [76]) = ($21 + [40])
	*($21 + [48]) = ($21 + [56])
	CALL $234(($21 + [48]), $20, ($20 + [1]))
	*([0] + [4]) = ($21 + [128])
}

void .FUNC $249 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)7343588593878171648, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$4), [256])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $135($4, CALL $fimport$6(*($4), *($4 + [8]), (int_64)7343588593878171648, $5))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$4), [256])
	
.LABEL $label$4
	*(($2 + [48])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $226 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_32 $22
	int_32 $23
	$23 = (*([0] + [4]) - [128])
	*([0] + [4]) = $23
	*(($22 = $23) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($22 + [24]) = *($1 + [48])
	*($22 + [32]) = *($1 + [8])
	$2 = *($1)
	*($22 + [16]) = $2
	$5 = ($1 + [8])
	$4 = ($1 + [48])
	$21 = $2
	$20 = *($3)
	$6 = ($1 + [68])
	if ( ((int_32)$6 == (int_32)$20) ){ goto $label$1 }
	CALL $131($6, *($20), *($20 + [4]))
	$21 = *($1)
	
.LABEL $label$1
	*(($1 + [80])) = *(*($3 + [4]))
	*(($1 + [88])) = *(*($3 + [8]))
	CALL eosio_assert(((int_64)$2 == (int_64)$21), [848])
	*($22 + [48]) = [0]
	*($22) = ($22 + [48])
	*($22 + [60]) = $5
	*($22 + [56]) = $1
	$6 = ($1 + [10])
	*($22 + [64]) = $6
	$7 = ($1 + [12])
	*($22 + [68]) = $7
	$8 = ($1 + [14])
	*($22 + [72]) = $8
	$9 = ($1 + [16])
	*($22 + [76]) = $9
	$10 = ($1 + [20])
	*($22 + [80]) = $10
	$11 = ($1 + [32])
	*($22 + [84]) = $11
	*($22 + [88]) = $4
	$12 = ($1 + [56])
	*($22 + [92]) = $12
	$13 = ($1 + [64])
	*($22 + [96]) = $13
	$14 = ($1 + [96])
	*($22 + [100]) = $14
	$15 = ($1 + [116])
	*($22 + [104]) = $15
	$16 = ($1 + [120])
	*($22 + [108]) = $16
	$17 = ($1 + [136])
	*($22 + [112]) = $17
	$18 = ($1 + [140])
	*($22 + [116]) = $18
	$19 = ($1 + [144])
	*($22 + [120]) = $19
	CALL $179(($22 + [56]), $22)
	$20 = *($22 + [48])
	if ( ($20 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($20)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($23 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	*($22 + [4]) = $3
	*($22) = $3
	*($22 + [8]) = ($3 + $20)
	*($22 + [48]) = $22
	*($22 + [60]) = $5
	*($22 + [64]) = $6
	*($22 + [68]) = $7
	*($22 + [72]) = $8
	*($22 + [76]) = $9
	*($22 + [80]) = $10
	*($22 + [56]) = $1
	*($22 + [84]) = $11
	*($22 + [88]) = $4
	*($22 + [92]) = $12
	*($22 + [96]) = $13
	*($22 + [100]) = $14
	*($22 + [104]) = $15
	*($22 + [108]) = $16
	*($22 + [112]) = $17
	*($22 + [116]) = $18
	*($22 + [120]) = $19
	CALL $180(($22 + [56]), ($22 + [48]))
	CALL db_update_i64(*($1 + [152]), *($22 + [40]), $3, $20)
	if ( ($20 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$3 = ($0 + [36])
	$2 = *($22 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($22 + [60]) = $1
	*($22 + [56]) = $0
	*($22 + [68]) = $1
	*($22 + [64]) = ($22 + [24])
	*($22 + [72]) = ($22 + [16])
	*($22 + [76]) = ($22 + [40])
	*($22 + [48]) = ($22 + [56])
	CALL $227(($22 + [48]), $3, ($3 + [1]))
	*([0] + [4]) = ($22 + [128])
}

void .FUNC $167 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*(($21 = $22) + [16]) = *($1 + [8])
	$4 = ($1 + [8])
	$5 = *($1)
	$19 = *($3)
	if ( ((int_32)*($19 + [4]) == (int_32)*($19)) ){ goto $label$1 }
	$18 = (*($1 + [92]) + [16])
	$17 = [0]
	$16 = ($3 + [4])
	$20 = [0]
	
.LOOP $label$2:
	*(($18 + [-8])) = *((*($19) + $17))
	*($18) = *((*(*($16)) + $17))
	$17 = ($17 + [8])
	$18 = ($18 + [24])
	$19 = *($3)
	$20 = ($20 + [1])
	if ( ($20 <= int_32((*($19 + [4]) - *($19)) >> [3])) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert([1], [848])
	*($21 + [24]) = [0]
	*($21) = ($21 + [24])
	*($21 + [36]) = $4
	*($21 + [32]) = $1
	$19 = ($1 + [16])
	*($21 + [40]) = $19
	$20 = ($1 + [24])
	*($21 + [44]) = $20
	$3 = ($1 + [32])
	*($21 + [48]) = $3
	$16 = ($1 + [48])
	*($21 + [52]) = $16
	$6 = ($1 + [56])
	*($21 + [56]) = $6
	$7 = ($1 + [64])
	*($21 + [60]) = $7
	$8 = ($1 + [72])
	*($21 + [64]) = $8
	$9 = ($1 + [76])
	*($21 + [68]) = $9
	$10 = ($1 + [88])
	*($21 + [72]) = $10
	$11 = ($1 + [92])
	*($21 + [76]) = $11
	$12 = ($1 + [104])
	*($21 + [80]) = $12
	$13 = ($1 + [116])
	*($21 + [84]) = $13
	$14 = ($1 + [120])
	*($21 + [88]) = $14
	$15 = ($1 + [124])
	*($21 + [92]) = $15
	CALL $108(($21 + [32]), $21)
	$17 = *($21 + [24])
	if ( ($17 <= [513]) ){ goto $label$4 }
	$18 = CALL malloc($17)
	goto $label$3 
	
.LABEL $label$4
	$18 = ($22 - (($17 + [15]) & [-16]))
	*([0] + [4]) = $18
	
.LABEL $label$3
	*($21 + [4]) = $18
	*($21) = $18
	*($21 + [8]) = ($18 + $17)
	*($21 + [24]) = $21
	*($21 + [36]) = $4
	*($21 + [40]) = $19
	*($21 + [44]) = $20
	*($21 + [48]) = $3
	*($21 + [52]) = $16
	*($21 + [56]) = $6
	*($21 + [32]) = $1
	*($21 + [60]) = $7
	*($21 + [64]) = $8
	*($21 + [68]) = $9
	*($21 + [72]) = $10
	*($21 + [76]) = $11
	*($21 + [80]) = $12
	*($21 + [84]) = $13
	*($21 + [88]) = $14
	*($21 + [92]) = $15
	CALL $109(($21 + [32]), ($21 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $18, $17)
	if ( ($17 <= [513]) ){ goto $label$5 }
	CALL free($18)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($21 + [32]) = *($4)
	if ( (CALL memcmp(($21 + [16]), ($21 + [32]), [8]) == 0) ){ goto $label$7 }
	$17 = ($1 + [136])
	$18 = *($17)
	if ( ((int_32)$18 > (int_32)[-1]) ){ goto $label$8 }
	$18 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6228196809676685312, ($21 + [24]), $5)
	*($17) = $18
	
.LABEL $label$8
	CALL db_idx64_update($18, $2, ($21 + [32]))
	
.LABEL $label$7
	*([0] + [4]) = ($21 + [96])
}

void .FUNC $166 (int_64 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*($9) = (int_64)53022474784365
	*($9 + [8]) = ((int_64)(CASTING int_64)(int_32 CALL tapos_block_prefix()) + (int_64)$0)
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($9 + [8])
	$5 = ($3 + [-1])
	$7 = [0]
	$6 = ($1 + [4])
	$8 = [0]
	
.LOOP $label$2:
	CALL sha256($4, [8], ($9 + [16]))
	$0 = ((int_64)*($9 + [16]) | (int_64)((int_64)*($9 + [17]) << (int_64)32))
	*($4) = $0
	*($9 + [16]) = (int_64)0
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	*($9 + [16]) = $2
	$0 = $2
	goto $label$3 
	
.LABEL $label$4
	$0 = ((int_64)((int_64)((uint_64)$2 / (uint_64)(CASTING int_64)(int_32 ($3 - $7))) * (int_64)((uint_64)$0 % (uint_64)(int_64)100)) << (int_64)1)
	$0 = ( (int_64)1 ? ((uint_64)$0 / (uint_64)(int_64)100) : (uint_64)($0 <= (int_64)200) )
	*($9 + [16]) = $0
	$2 = (int_64))($2 - $0)
	
.LABEL $label$3
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)*(($1 + [8]))) ){ goto $label$6 }
	*($7) = $0
	*($6) = ($7 + [8])
	goto $label$5 
	
.LABEL $label$6
	CALL $83($1, ($9 + [16]))
	
.LABEL $label$5
	$8 = ($8 + [1])
	$7 = ($8 & [65535])
	if ( ((uint_32)$3 > (uint_32)$7) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $165 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*(($21 = $22) + [16]) = *($1 + [8])
	$4 = ($1 + [8])
	$3 = *($3)
	$5 = *($1)
	$20 = ($1 + [96])
	$19 = *($20)
	if ( ((int_32)$19 == (int_32)*(($1 + [100]))) ){ goto $label$2 }
	*($19) = *($3)
	*(($19 + [16])) = *(($3 + [16]))
	*(($19 + [8])) = *(($3 + [8]))
	*($20) = (*($20) + [24])
	$20 = ($1 + [92])
	goto $label$1 
	
.LABEL $label$2
	$20 = ($1 + [92])
	CALL $183($20, $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [848])
	*($21 + [24]) = [0]
	*($21) = ($21 + [24])
	*($21 + [36]) = $4
	*($21 + [32]) = $1
	$6 = ($1 + [16])
	*($21 + [40]) = $6
	$7 = ($1 + [24])
	*($21 + [44]) = $7
	$8 = ($1 + [32])
	*($21 + [48]) = $8
	$9 = ($1 + [48])
	*($21 + [52]) = $9
	$10 = ($1 + [56])
	*($21 + [56]) = $10
	$11 = ($1 + [64])
	*($21 + [60]) = $11
	$12 = ($1 + [72])
	*($21 + [64]) = $12
	$13 = ($1 + [76])
	*($21 + [68]) = $13
	$14 = ($1 + [88])
	*($21 + [72]) = $14
	*($21 + [76]) = $20
	$15 = ($1 + [104])
	*($21 + [80]) = $15
	$16 = ($1 + [116])
	*($21 + [84]) = $16
	$17 = ($1 + [120])
	*($21 + [88]) = $17
	$18 = ($1 + [124])
	*($21 + [92]) = $18
	CALL $108(($21 + [32]), $21)
	$19 = *($21 + [24])
	if ( ($19 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($19)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($22 - (($19 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($21 + [4]) = $3
	*($21) = $3
	*($21 + [8]) = ($3 + $19)
	*($21 + [24]) = $21
	*($21 + [36]) = $4
	*($21 + [40]) = $6
	*($21 + [44]) = $7
	*($21 + [48]) = $8
	*($21 + [52]) = $9
	*($21 + [56]) = $10
	*($21 + [32]) = $1
	*($21 + [60]) = $11
	*($21 + [64]) = $12
	*($21 + [68]) = $13
	*($21 + [72]) = $14
	*($21 + [76]) = $20
	*($21 + [80]) = $15
	*($21 + [84]) = $16
	*($21 + [88]) = $17
	*($21 + [92]) = $18
	CALL $109(($21 + [32]), ($21 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $3, $19)
	if ( ($19 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($21 + [32]) = *($4)
	if ( (CALL memcmp(($21 + [16]), ($21 + [32]), [8]) == 0) ){ goto $label$7 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6228196809676685312, ($21 + [24]), $5)
	*($3) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($21 + [32]))
	
.LABEL $label$7
	*([0] + [4]) = ($21 + [96])
}

void .FUNC $164 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [96])
	*([0] + [4]) = $21
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($1 + [116]) = [1]
	*(($22 = $21) + [16]) = *($1 + [8])
	$5 = *($1)
	CALL eosio_assert([1], [848])
	*($22 + [24]) = [0]
	*($22) = ($22 + [24])
	$4 = ($1 + [8])
	*($22 + [36]) = $4
	*($22 + [32]) = $1
	$7 = ($1 + [16])
	*($22 + [40]) = $7
	$8 = ($1 + [24])
	*($22 + [44]) = $8
	$9 = ($1 + [32])
	*($22 + [48]) = $9
	$10 = ($1 + [48])
	*($22 + [52]) = $10
	$11 = ($1 + [56])
	*($22 + [56]) = $11
	$12 = ($1 + [64])
	*($22 + [60]) = $12
	$13 = ($1 + [72])
	*($22 + [64]) = $13
	$14 = ($1 + [76])
	*($22 + [68]) = $14
	$15 = ($1 + [88])
	*($22 + [72]) = $15
	$16 = ($1 + [92])
	*($22 + [76]) = $16
	$17 = ($1 + [104])
	*($22 + [80]) = $17
	$6 = ($1 + [116])
	*($22 + [84]) = $6
	$18 = ($1 + [120])
	*($22 + [88]) = $18
	$19 = ($1 + [124])
	*($22 + [92]) = $19
	CALL $108(($22 + [32]), $22)
	$20 = *($22 + [24])
	if ( ($20 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($20)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $20)
	*($22 + [24]) = $22
	*($22 + [36]) = $4
	*($22 + [40]) = $7
	*($22 + [44]) = $8
	*($22 + [48]) = $9
	*($22 + [52]) = $10
	*($22 + [56]) = $11
	*($22 + [32]) = $1
	*($22 + [60]) = $12
	*($22 + [64]) = $13
	*($22 + [68]) = $14
	*($22 + [72]) = $15
	*($22 + [76]) = $16
	*($22 + [80]) = $17
	*($22 + [84]) = $6
	*($22 + [88]) = $18
	*($22 + [92]) = $19
	CALL $109(($22 + [32]), ($22 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $21, $20)
	if ( ($20 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($22 + [32]) = *($4)
	if ( (CALL memcmp(($22 + [16]), ($22 + [32]), [8]) == 0) ){ goto $label$5 }
	$21 = ($1 + [136])
	$1 = *($21)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6228196809676685312, ($22 + [24]), $5)
	*($21) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($22 + [32]))
	
.LABEL $label$5
	*([0] + [4]) = ($22 + [96])
}

void .FUNC $163 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*(($21 = $22) + [16]) = *($1 + [8])
	$4 = ($1 + [8])
	$3 = *($3)
	$5 = *($1)
	$20 = ($1 + [80])
	$19 = *($20)
	if ( ((int_32)$19 == (int_32)*(($1 + [84]))) ){ goto $label$2 }
	*($19) = *($3)
	*(($19 + [24])) = *(($3 + [24]))
	*(($19 + [16])) = *(($3 + [16]))
	*(($19 + [8])) = *(($3 + [8]))
	*($20) = (*($20) + [32])
	$20 = ($1 + [76])
	goto $label$1 
	
.LABEL $label$2
	$20 = ($1 + [76])
	CALL $184($20, $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [848])
	*($21 + [24]) = [0]
	*($21) = ($21 + [24])
	*($21 + [36]) = $4
	*($21 + [32]) = $1
	$6 = ($1 + [16])
	*($21 + [40]) = $6
	$7 = ($1 + [24])
	*($21 + [44]) = $7
	$8 = ($1 + [32])
	*($21 + [48]) = $8
	$9 = ($1 + [48])
	*($21 + [52]) = $9
	$10 = ($1 + [56])
	*($21 + [56]) = $10
	$11 = ($1 + [64])
	*($21 + [60]) = $11
	$12 = ($1 + [72])
	*($21 + [64]) = $12
	*($21 + [68]) = $20
	$13 = ($1 + [88])
	*($21 + [72]) = $13
	$14 = ($1 + [92])
	*($21 + [76]) = $14
	$15 = ($1 + [104])
	*($21 + [80]) = $15
	$16 = ($1 + [116])
	*($21 + [84]) = $16
	$17 = ($1 + [120])
	*($21 + [88]) = $17
	$18 = ($1 + [124])
	*($21 + [92]) = $18
	CALL $108(($21 + [32]), $21)
	$19 = *($21 + [24])
	if ( ($19 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($19)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($22 - (($19 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($21 + [4]) = $3
	*($21) = $3
	*($21 + [8]) = ($3 + $19)
	*($21 + [24]) = $21
	*($21 + [36]) = $4
	*($21 + [40]) = $6
	*($21 + [44]) = $7
	*($21 + [48]) = $8
	*($21 + [52]) = $9
	*($21 + [56]) = $10
	*($21 + [32]) = $1
	*($21 + [60]) = $11
	*($21 + [64]) = $12
	*($21 + [68]) = $20
	*($21 + [72]) = $13
	*($21 + [76]) = $14
	*($21 + [80]) = $15
	*($21 + [84]) = $16
	*($21 + [88]) = $17
	*($21 + [92]) = $18
	CALL $109(($21 + [32]), ($21 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $3, $19)
	if ( ($19 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($21 + [32]) = *($4)
	if ( (CALL memcmp(($21 + [16]), ($21 + [32]), [8]) == 0) ){ goto $label$7 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6228196809676685312, ($21 + [24]), $5)
	*($3) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($21 + [32]))
	
.LABEL $label$7
	*([0] + [4]) = ($21 + [96])
}

void .FUNC $162 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*(($21 = $22) + [16]) = *($1 + [8])
	$4 = ($1 + [8])
	$3 = *($3)
	$5 = *($1)
	$20 = ($1 + [80])
	$19 = *($20)
	if ( ((int_32)$19 == (int_32)*(($1 + [84]))) ){ goto $label$2 }
	*($19) = *($3)
	*(($19 + [24])) = *(($3 + [24]))
	*(($19 + [16])) = *(($3 + [16]))
	*(($19 + [8])) = *(($3 + [8]))
	*($20) = (*($20) + [32])
	$20 = ($1 + [76])
	goto $label$1 
	
.LABEL $label$2
	$20 = ($1 + [76])
	CALL $184($20, $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [848])
	*($21 + [24]) = [0]
	*($21) = ($21 + [24])
	*($21 + [36]) = $4
	*($21 + [32]) = $1
	$6 = ($1 + [16])
	*($21 + [40]) = $6
	$7 = ($1 + [24])
	*($21 + [44]) = $7
	$8 = ($1 + [32])
	*($21 + [48]) = $8
	$9 = ($1 + [48])
	*($21 + [52]) = $9
	$10 = ($1 + [56])
	*($21 + [56]) = $10
	$11 = ($1 + [64])
	*($21 + [60]) = $11
	$12 = ($1 + [72])
	*($21 + [64]) = $12
	*($21 + [68]) = $20
	$13 = ($1 + [88])
	*($21 + [72]) = $13
	$14 = ($1 + [92])
	*($21 + [76]) = $14
	$15 = ($1 + [104])
	*($21 + [80]) = $15
	$16 = ($1 + [116])
	*($21 + [84]) = $16
	$17 = ($1 + [120])
	*($21 + [88]) = $17
	$18 = ($1 + [124])
	*($21 + [92]) = $18
	CALL $108(($21 + [32]), $21)
	$19 = *($21 + [24])
	if ( ($19 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($19)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($22 - (($19 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($21 + [4]) = $3
	*($21) = $3
	*($21 + [8]) = ($3 + $19)
	*($21 + [24]) = $21
	*($21 + [36]) = $4
	*($21 + [40]) = $6
	*($21 + [44]) = $7
	*($21 + [48]) = $8
	*($21 + [52]) = $9
	*($21 + [56]) = $10
	*($21 + [32]) = $1
	*($21 + [60]) = $11
	*($21 + [64]) = $12
	*($21 + [68]) = $20
	*($21 + [72]) = $13
	*($21 + [76]) = $14
	*($21 + [80]) = $15
	*($21 + [84]) = $16
	*($21 + [88]) = $17
	*($21 + [92]) = $18
	CALL $109(($21 + [32]), ($21 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $3, $19)
	if ( ($19 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($21 + [32]) = *($4)
	if ( (CALL memcmp(($21 + [16]), ($21 + [32]), [8]) == 0) ){ goto $label$7 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6228196809676685312, ($21 + [24]), $5)
	*($3) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($21 + [32]))
	
.LABEL $label$7
	*([0] + [4]) = ($21 + [96])
}

int_32 .FUNC $161 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [464])
	$6 = *($0 + [4])
	$7 = *(($6 + [52]))
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)7343588593878171649, ($9 + [8]), *($6))
	*((*(($0 + [4])) + [52])) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$2), [256])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $135($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)7343588593878171648, $3))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$2), [256])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [52])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $160 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)7343588593878171649, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$4), [256])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $135($4, CALL $fimport$6(*($4), *($4 + [8]), (int_64)7343588593878171648, $5))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$4), [256])
	
.LABEL $label$4
	*(($2 + [52])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11764])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [11572]
	$1 = (((int_32)$2 * (int_32)[12]) + [11572])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $230 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $244 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $290(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $296($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $291($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $168 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [96])
	*([0] + [4]) = $21
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($1 + [116]) = [1]
	*(($22 = $21) + [16]) = *($1 + [8])
	$5 = *($1)
	CALL eosio_assert([1], [848])
	*($22 + [24]) = [0]
	*($22) = ($22 + [24])
	$4 = ($1 + [8])
	*($22 + [36]) = $4
	*($22 + [32]) = $1
	$7 = ($1 + [16])
	*($22 + [40]) = $7
	$8 = ($1 + [24])
	*($22 + [44]) = $8
	$9 = ($1 + [32])
	*($22 + [48]) = $9
	$10 = ($1 + [48])
	*($22 + [52]) = $10
	$11 = ($1 + [56])
	*($22 + [56]) = $11
	$12 = ($1 + [64])
	*($22 + [60]) = $12
	$13 = ($1 + [72])
	*($22 + [64]) = $13
	$14 = ($1 + [76])
	*($22 + [68]) = $14
	$15 = ($1 + [88])
	*($22 + [72]) = $15
	$16 = ($1 + [92])
	*($22 + [76]) = $16
	$17 = ($1 + [104])
	*($22 + [80]) = $17
	$6 = ($1 + [116])
	*($22 + [84]) = $6
	$18 = ($1 + [120])
	*($22 + [88]) = $18
	$19 = ($1 + [124])
	*($22 + [92]) = $19
	CALL $108(($22 + [32]), $22)
	$20 = *($22 + [24])
	if ( ($20 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($20)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $20)
	*($22 + [24]) = $22
	*($22 + [36]) = $4
	*($22 + [40]) = $7
	*($22 + [44]) = $8
	*($22 + [48]) = $9
	*($22 + [52]) = $10
	*($22 + [56]) = $11
	*($22 + [32]) = $1
	*($22 + [60]) = $12
	*($22 + [64]) = $13
	*($22 + [68]) = $14
	*($22 + [72]) = $15
	*($22 + [76]) = $16
	*($22 + [80]) = $17
	*($22 + [84]) = $6
	*($22 + [88]) = $18
	*($22 + [92]) = $19
	CALL $109(($22 + [32]), ($22 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $21, $20)
	if ( ($20 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($22 + [32]) = *($4)
	if ( (CALL memcmp(($22 + [16]), ($22 + [32]), [8]) == 0) ){ goto $label$5 }
	$21 = ($1 + [136])
	$1 = *($21)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6228196809676685312, ($22 + [24]), $5)
	*($21) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($22 + [32]))
	
.LABEL $label$5
	*([0] + [4]) = ($22 + [96])
}

void .FUNC $245 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	*($8 + [16]) = $2
	$3 = *(($0 + [80]))
	$7 = *(($0 + [84]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [56])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$5), [256])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $88($5, $7)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$5), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1232])
	$3 = *(($0 + [40]))
	$7 = *(($0 + [44]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$5 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = ($0 + [16])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$8 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [148]) == (int_32)$4), [256])
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $87($4, $6)
	CALL eosio_assert(((int_32)*($5 + [148]) == (int_32)$4), [256])
	
.LABEL $label$7
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [1264])
	CALL eosio_assert(((int_64)*($5 + [48]) != (int_64)$1), [3056])
	*($8 + [8]) = ($0 + [96])
	CALL $160($8, ($8 + [8]), ($8 + [16]))
	$6 = [0]
	$3 = *($8 + [4])
	if ( ($3 == 0) ){ goto $label$9 }
	$6 = $3
	
.LOOP $label$10:
	if ( ((int_64)*($6 + [8]) != (int_64)*($8 + [16])) ){ goto $label$9 }
	if ( ((int_64)*($6 + [16]) == (int_64)$1) ){ goto $label$9 }
	CALL $161($8)
	$6 = *($8 + [4])
	if ( $6 ){ goto $label$10 }
	$6 = [0]
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1776])
	CALL eosio_assert(((int_32)*(*($8 + [4]) + [33]) == (int_32)[1]), [3088])
	$1 = *($8)
	*($8 + [24]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [416])
	CALL $161(($8 + [24]))
	CALL $136(*($8 + [8]), $6)
	$1 = *($0 + [8])
	CALL eosio_assert($7, [688])
	CALL $246($4, $5, $1, ($8 + [24]))
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $279 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $290([168])) + [20 align=4]) = (int_64)0
	*($3 + [28 align=4]) = (int_64)0
	*($3 + [36 align=4]) = (int_64)0
	*($3 + [68 align=4]) = (int_64)0
	*($3 + [76]) = [0]
	*($3 + [100]) = [0]
	*($3 + [104]) = [0]
	*($3 + [108]) = [0]
	*($3 + [148]) = $1
	CALL $282(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [152])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $104(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *(($3 + [100]))
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [104])) = $1
	CALL $291($1)
	
.LABEL $label$4
	$1 = *(($3 + [68]))
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [72])) = $1
	CALL $291($1)
	
.LABEL $label$5
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $291(*(($3 + [40])))
	
.LABEL $label$6
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$7 }
	CALL $291(*(($3 + [28])))
	
.LABEL $label$7
	CALL $291($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $175 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $290([144])) + [40]) = [0]
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [76]) = [0]
	*($3 + [80]) = [0]
	*($3 + [84]) = [0]
	*($3 + [92]) = [0]
	*($3 + [96]) = [0]
	*($3 + [100]) = [0]
	*($3 + [104]) = [0]
	*($3 + [108]) = [0]
	*($3 + [112]) = [0]
	*($3 + [128]) = $1
	CALL $182(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [132])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $116(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [104])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [108])) = $1
	CALL $291($1)
	
.LABEL $label$4
	$1 = *($3 + [92])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [96])) = $1
	CALL $291($1)
	
.LABEL $label$5
	$1 = *($3 + [76])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [80])) = $1
	CALL $291($1)
	
.LABEL $label$6
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $291(*(($3 + [40])))
	
.LABEL $label$7
	CALL $291($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $242 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [240])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $288 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11862]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11864])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11862]) = [1]
	$7 = ($7 << [16])
	*([0] + [11864]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11864])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11864]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11862]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11862]) = [1]
	$3 = ($3 << [16])
	*([0] + [11864]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11864])
	
.LABEL $label$8
	*([0] + [11864]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $243 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [16])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [48])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588593878171648, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [48]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [52]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588593878171649, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [52])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$8 = ($5 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $290(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $296($0)
	
.LABEL $label$1
	*(($9 = ($8 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $290([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($9 + [32])) = [0]
	*(($9 + [36])) = [0]
	$5 = ($8 + ((int_32)$7 * (int_32)[40]))
	$6 = ($9 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($7 = ($9 + [-16]))) = [0]
	$8 = ($2 + [-4])
	*($1) = *($8)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($7) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($8) = (int_64)0
	*(($7 = ($9 + [-4]))) = [0]
	$8 = ($2 + [8])
	*($1) = *($8)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($7) = *($1)
	*($1) = [0]
	*($8) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$8 }
	$1 = ([0] - $7)
	$9 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($9 + [16])) = $2
	CALL $291($2)
	
.LABEL $label$10
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($9 + [4])) = $2
	CALL $291($2)
	
.LABEL $label$11
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$12 }
	CALL $291($7)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $61($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $62($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $63($4, $1)
	CALL $65(CALL $64(CALL $64($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $271 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	$2 = *($0)
	CALL $272(*($0 + [4]), $1)
	*($8 + [48]) = ($8 + [38])
	*($8 + [44]) = $8
	*($8 + [40]) = $8
	*($8 + [56]) = ($8 + [40])
	$4 = ($1 + [8])
	*($8 + [68]) = $4
	*($8 + [64]) = $1
	$5 = ($1 + [16])
	*($8 + [72]) = $5
	*($8 + [76]) = ($1 + [24])
	*($8 + [80]) = ($1 + [32])
	*($8 + [84]) = ($1 + [33])
	*($8 + [88]) = ($1 + [36])
	CALL $242(($8 + [64]), ($8 + [56]))
	$3 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)7343588593878171648, *(*($0 + [8])), $3, $8, [38])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$2 = ($2 + [8])
	$3 = *($2)
	$0 = *(($0 + [8]))
	$6 = *($0)
	$7 = *($1)
	*($8 + [64]) = *($5)
	*($1 + [48]) = CALL db_idx64_store($3, (int_64)7343588593878171648, $6, $7, ($8 + [64]))
	$3 = *($0)
	$6 = *($2)
	$7 = *($1)
	*($8 + [64]) = *($4)
	*(($1 + [52])) = CALL db_idx64_store($6, (int_64)7343588593878171649, $3, $7, ($8 + [64]))
	*([0] + [4]) = ($8 + [96])
}

void .FUNC $270 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $277 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)7343588134136840192, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [148]) == (int_32)$4), [256])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$8 = CALL db_find_i64(*($4), *($4 + [8]), (int_64)7343588134136840192, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $87($4, $8)
	CALL eosio_assert(((int_32)*($2 + [148]) == (int_32)$4), [256])
	
.LABEL $label$4
	*($2 + [156]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $240 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [128])
	*([0] + [4]) = $22
	*(($21 = $22) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($21 + [24]) = *($1 + [48])
	*($21 + [32]) = *($1 + [8])
	*($21 + [16]) = *($1)
	$20 = *(*($3))
	if ( ((int_32)$20 == (int_32)[2]) ){ goto $label$3 }
	if ( ((int_32)$20 == (int_32)[1]) ){ goto $label$2 }
	if ( $20 ){ goto $label$1 }
	*($1 + [10]) = (*($1 + [10]) + [65535])
	goto $label$1 
	
.LABEL $label$3
	*($1 + [14]) = (*($1 + [14]) + [65535])
	goto $label$1 
	
.LABEL $label$2
	*($1 + [12]) = (*($1 + [12]) + [65535])
	
.LABEL $label$1
	$5 = ($1 + [8])
	$4 = ($1 + [48])
	$3 = *(*($3 + [4]))
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$5 }
	if ( $3 ){ goto $label$4 }
	*($1 + [10]) = (*($1 + [10]) + [1])
	goto $label$4 
	
.LABEL $label$6
	*($1 + [14]) = (*($1 + [14]) + [1])
	goto $label$4 
	
.LABEL $label$5
	*($1 + [12]) = (*($1 + [12]) + [1])
	
.LABEL $label$4
	CALL eosio_assert([1], [848])
	*($21 + [48]) = [0]
	*($21) = ($21 + [48])
	*($21 + [60]) = $5
	*($21 + [56]) = $1
	$6 = ($1 + [10])
	*($21 + [64]) = $6
	$7 = ($1 + [12])
	*($21 + [68]) = $7
	$8 = ($1 + [14])
	*($21 + [72]) = $8
	$9 = ($1 + [16])
	*($21 + [76]) = $9
	$10 = ($1 + [20])
	*($21 + [80]) = $10
	$11 = ($1 + [32])
	*($21 + [84]) = $11
	*($21 + [88]) = $4
	$12 = ($1 + [56])
	*($21 + [92]) = $12
	$13 = ($1 + [64])
	*($21 + [96]) = $13
	$14 = ($1 + [96])
	*($21 + [100]) = $14
	$15 = ($1 + [116])
	*($21 + [104]) = $15
	$16 = ($1 + [120])
	*($21 + [108]) = $16
	$17 = ($1 + [136])
	*($21 + [112]) = $17
	$18 = ($1 + [140])
	*($21 + [116]) = $18
	$19 = ($1 + [144])
	*($21 + [120]) = $19
	CALL $179(($21 + [56]), $21)
	$20 = *($21 + [48])
	if ( ($20 <= [513]) ){ goto $label$8 }
	$3 = CALL malloc($20)
	goto $label$7 
	
.LABEL $label$8
	$3 = ($22 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$7
	*($21 + [4]) = $3
	*($21) = $3
	*($21 + [8]) = ($3 + $20)
	*($21 + [48]) = $21
	*($21 + [60]) = $5
	*($21 + [64]) = $6
	*($21 + [68]) = $7
	*($21 + [72]) = $8
	*($21 + [76]) = $9
	*($21 + [80]) = $10
	*($21 + [56]) = $1
	*($21 + [84]) = $11
	*($21 + [88]) = $4
	*($21 + [92]) = $12
	*($21 + [96]) = $13
	*($21 + [100]) = $14
	*($21 + [104]) = $15
	*($21 + [108]) = $16
	*($21 + [112]) = $17
	*($21 + [116]) = $18
	*($21 + [120]) = $19
	CALL $180(($21 + [56]), ($21 + [48]))
	CALL db_update_i64(*($1 + [152]), *($21 + [40]), $3, $20)
	if ( ($20 <= [513]) ){ goto $label$9 }
	CALL free($3)
	
.LABEL $label$9
	$3 = ($0 + [36])
	$2 = *($21 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($21 + [60]) = $1
	*($21 + [56]) = $0
	*($21 + [68]) = $1
	*($21 + [64]) = ($21 + [24])
	*($21 + [72]) = ($21 + [16])
	*($21 + [76]) = ($21 + [40])
	*($21 + [48]) = ($21 + [56])
	CALL $244(($21 + [48]), $3, ($3 + [1]))
	*([0] + [4]) = ($21 + [128])
}

void .FUNC $275 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$2 = *($1)
	CALL $297($5, ($1 + [8]))
	$3 = *($1 + [24])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $297(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 ($5 + [16])), (int_32 $3), (int_64 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $291(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $291(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $274 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$6 = CALL db_lowerbound_i64(*($1 + [216]), *(($1 + [224])), (int_64)-6228196809676685312, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($1 + [216])
	$6 = CALL $80($3, $6)
	
.LOOP $label$2:
	CALL $81($1, *($6))
	CALL eosio_assert([1], [416])
	CALL eosio_assert([1], [464])
	$7 = [0]
	$4 = CALL db_next_i64(*($6 + [132]), ($8 + [24]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $80($3, $4)
	
.LABEL $label$3
	CALL $82($3, $6)
	$6 = $7
	if ( $7 ){ goto $label$2 }
	
.LABEL $label$1
	$6 = CALL db_lowerbound_i64(*($1 + [176]), *(($1 + [184])), (int_64)-7631349568579305472, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$3 = ($1 + [176])
	$7 = CALL $78($3, $6)
	
.LOOP $label$5:
	CALL eosio_assert([1], [416])
	CALL eosio_assert([1], [464])
	$6 = [0]
	$4 = CALL db_next_i64(*($7 + [44]), ($8 + [24]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $78($3, $4)
	
.LABEL $label$6
	CALL $79($3, $7)
	$7 = $6
	if ( $6 ){ goto $label$5 }
	
.LABEL $label$4
	*($8 + [16]) = ($1 + [96])
	$7 = *($2 + [4])
	CALL $160(($8 + [8]), ($8 + [16]), $7)
	$6 = *($8 + [12])
	if ( ($6 == 0) ){ goto $label$7 }
	
.LOOP $label$8:
	if ( ((int_64)*($6 + [8]) != (int_64)*($7)) ){ goto $label$7 }
	$5 = *($8 + [8])
	*($8 + [24]) = $5
	$6 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [416])
	CALL $161(($8 + [24]))
	CALL $136(*($8 + [16]), $6)
	$5 = *($8 + [24])
	*($8 + [8]) = $5
	$6 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	if ( $6) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [0]
	$5 = *($2)
	$6 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	$3 = ((int_32)$6) != (int_32)[0]
	CALL eosio_assert($3), [416])
	CALL eosio_assert($3, [464])
	$4 = ($1 + [16])
	$3 = (CASTING uint_32)(uint_64 $5)
	$1 = CALL db_next_i64(*($6 + [152]), ($8 + [24]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$9 }
	$7 = CALL $87($3, $1)
	
.LABEL $label$9
	CALL $137($4, $6)
	*($0 + [4]) = $7
	*($0) = $3
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $50 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [304])
	*([0] + [4]) = $7
	$5 = *($0)
	*(($7 + [24])) = $5
	*(($7 + [32])) = (int_64)-1
	*(($7 + [40])) = [0]
	*($7) = $5
	*($7 + [8]) = $5
	*($7 + [16]) = $5
	*(($7 + [44])) = [0]
	*(($7 + [48])) = [0]
	*(($7 + [52])) = [0]
	*($7 + [56]) = $5
	*(($7 + [64])) = $5
	*(($7 + [72])) = (int_64)-1
	*(($7 + [80])) = [0]
	*(($7 + [84])) = [0]
	*(($7 + [88])) = [0]
	*($7 + [96]) = $5
	*(($7 + [104])) = $5
	*(($7 + [112])) = (int_64)-1
	*(($7 + [120])) = [0]
	*(($7 + [124])) = [0]
	*(($7 + [128])) = [0]
	*(($7 + [132])) = [0]
	*($7 + [136]) = $5
	*(($7 + [144])) = $5
	*(($7 + [152])) = (int_64)-1
	*(($7 + [160])) = [0]
	*(($7 + [164])) = [0]
	*(($7 + [168])) = [0]
	*(($7 + [172])) = [0]
	*($7 + [176]) = $5
	*(($7 + [184])) = $5
	*(($7 + [192])) = (int_64)-1
	*(($7 + [200])) = [0]
	*(($7 + [204])) = [0]
	*(($7 + [208])) = [0]
	*(($7 + [212])) = [0]
	*($7 + [216]) = $5
	*(($7 + [224])) = $5
	*(($7 + [232])) = (int_64)-1
	*(($0 = ($7 + [240]))) = [0]
	*(($4 = ($7 + [244]))) = [0]
	*(($7 + [248])) = [0]
	*(($7 + [252])) = [0]
	*($7 + [256]) = $5
	*(($7 + [264])) = $5
	*(($7 + [272])) = (int_64)-1
	*(($7 + [280])) = [0]
	*(($7 + [284])) = [0]
	*(($7 + [288])) = [0]
	*($7 + [296]) = [0]
	CALL $53($7)
	CALL require_auth($5)
	$2 = *($0)
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$0 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($0)) == (int_64)$1) ){ goto $label$1 }
	$6 = $0
	$4 = ($0 + [-24])
	$0 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($7 + [216])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$0 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [128]) == (int_32)$4), [256])
	goto $label$3 
	
.LABEL $label$4
	$0 = [0]
	$6 = CALL db_find_i64(*(($7 + [216])), *(($7 + [224])), (int_64)-6228196809676685312, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $80($4, $6)
	CALL eosio_assert(((int_32)*($0 + [128]) == (int_32)$4), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [1152])
	if ( *($0 + [116]) ){ goto $label$5 }
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) <= (uint_32)*($0 + [124])) ){ goto $label$5 }
	CALL $81($7, *($0))
	
.LABEL $label$5
	CALL $54($7)
	*([0] + [4]) = ($7 + [304])
}

void .FUNC $51 (int_32 $0)
{
	int_64 $1
	int_32 $2
	$2 = (*([0] + [4]) - [304])
	*([0] + [4]) = $2
	$1 = *($0)
	*(($2 + [24])) = $1
	*(($2 + [32])) = (int_64)-1
	*(($2 + [40])) = [0]
	*($2) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = $1
	*(($2 + [44])) = [0]
	*(($2 + [48])) = [0]
	*(($2 + [52])) = [0]
	*($2 + [56]) = $1
	*(($2 + [64])) = $1
	*(($2 + [72])) = (int_64)-1
	*(($2 + [80])) = [0]
	*(($2 + [84])) = [0]
	*(($2 + [88])) = [0]
	*($2 + [96]) = $1
	*(($2 + [104])) = $1
	*(($2 + [112])) = (int_64)-1
	*(($2 + [120])) = [0]
	*(($2 + [124])) = [0]
	*(($2 + [128])) = [0]
	*(($2 + [132])) = [0]
	*($2 + [136]) = $1
	*(($2 + [144])) = $1
	*(($2 + [152])) = (int_64)-1
	*(($2 + [160])) = [0]
	*(($2 + [164])) = [0]
	*(($2 + [168])) = [0]
	*(($2 + [172])) = [0]
	*($2 + [176]) = $1
	*(($2 + [184])) = $1
	*(($2 + [192])) = (int_64)-1
	*(($2 + [200])) = [0]
	*(($2 + [204])) = [0]
	*(($2 + [208])) = [0]
	*(($2 + [212])) = [0]
	*($2 + [216]) = $1
	*(($2 + [224])) = $1
	*(($2 + [232])) = (int_64)-1
	*(($2 + [240])) = [0]
	*(($2 + [244])) = [0]
	*(($2 + [248])) = [0]
	*(($2 + [252])) = [0]
	*($2 + [256]) = $1
	*(($2 + [264])) = $1
	*(($2 + [272])) = (int_64)-1
	*(($2 + [280])) = [0]
	*(($2 + [284])) = [0]
	*(($2 + [288])) = [0]
	*($2 + [296]) = [0]
	CALL $53($2)
	CALL require_auth($1)
	CALL $74($2)
	CALL $54($2)
	*([0] + [4]) = ($2 + [304])
}

void .FUNC $52 (int_32 $0)
{
	int_64 $1
	int_32 $2
	$2 = (*([0] + [4]) - [304])
	*([0] + [4]) = $2
	$1 = *($0)
	*(($2 + [24])) = $1
	*(($2 + [32])) = (int_64)-1
	*(($2 + [40])) = [0]
	*($2) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = $1
	*(($2 + [44])) = [0]
	*(($2 + [48])) = [0]
	*(($2 + [52])) = [0]
	*($2 + [56]) = $1
	*(($2 + [64])) = $1
	*(($2 + [72])) = (int_64)-1
	*(($2 + [80])) = [0]
	*(($2 + [84])) = [0]
	*(($2 + [88])) = [0]
	*($2 + [96]) = $1
	*(($2 + [104])) = $1
	*(($2 + [112])) = (int_64)-1
	*(($2 + [120])) = [0]
	*(($2 + [124])) = [0]
	*(($2 + [128])) = [0]
	*(($2 + [132])) = [0]
	*($2 + [136]) = $1
	*(($2 + [144])) = $1
	*(($2 + [152])) = (int_64)-1
	*(($2 + [160])) = [0]
	*(($2 + [164])) = [0]
	*(($2 + [168])) = [0]
	*(($2 + [172])) = [0]
	*($2 + [176]) = $1
	*(($2 + [184])) = $1
	*(($2 + [192])) = (int_64)-1
	*(($2 + [200])) = [0]
	*(($2 + [204])) = [0]
	*(($2 + [208])) = [0]
	*(($2 + [212])) = [0]
	*($2 + [216]) = $1
	*(($2 + [224])) = $1
	*(($2 + [232])) = (int_64)-1
	*(($2 + [240])) = [0]
	*(($2 + [244])) = [0]
	*(($2 + [248])) = [0]
	*(($2 + [252])) = [0]
	*($2 + [256]) = $1
	*(($2 + [264])) = $1
	*(($2 + [272])) = (int_64)-1
	*(($2 + [280])) = [0]
	*(($2 + [284])) = [0]
	*(($2 + [288])) = [0]
	*($2 + [296]) = [0]
	CALL $53($2)
	CALL require_auth($1)
	CALL $54($2)
	*([0] + [4]) = ($2 + [304])
}

void .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [160])
	*([0] + [4]) = $10
	CALL $57(($10 + [104]), $0)
	if ( ((uint_32)(*($10 + [128]) + [600]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [208]
	$7 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$6 > (uint_64)(int_64)2) ){ goto $label$7 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$1 = ($1 + [165])
	goto $label$5 
	
.LABEL $label$7
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$3
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$2 }
	$6 = (int_64)0
	*($10 + [40]) = (int_64)0
	*($10 + [32]) = $7
	CALL cancel_deferred(($10 + [32]))
	$8 = CALL current_time()
	*(($10 + [60])) = [0]
	*(($10 + [64])) = [0]
	*($10 + [44]) = [0]
	*($10 + [48]) = [0]
	*($10 + [52]) = [0]
	*($10 + [56]) = [0]
	*($10 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*($10 + [68]) = [0]
	*(($10 + [72])) = [0]
	*(($10 + [76])) = [0]
	*($10 + [80]) = [0]
	*(($10 + [84])) = [0]
	*(($10 + [88])) = [0]
	$3 = ($10 + [68])
	$2 = *($0)
	$5 = (int_64)59
	$4 = [224]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$13 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$1 = ($1 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	*($10 + [24]) = $9
	*($10 + [16]) = $2
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [208]
	$9 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)2) ){ goto $label$19 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$1 = ($1 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$14 }
	*($10 + [144]) = $9
	CALL $58($3, ($10 + [16]), $0, ($10 + [144]), ($10 + [8]))
	$6 = *($0)
	*(($10 + [52])) = [0]
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = $7
	CALL $59(($10 + [144]), ($10 + [32]))
	$4 = *($10 + [144])
	CALL send_deferred(($10 + [16]), $6, $4, (*($10 + [148]) - $4), [1])
	$4 = *($10 + [144])
	if ( ($4 == 0) ){ goto $label$20 }
	*($10 + [148]) = $4
	CALL $291($4)
	
.LABEL $label$20
	CALL $60(($10 + [32]))
	
.LABEL $label$1
	$4 = *($10 + [116])
	if ( ($4 == 0) ){ goto $label$21 }
	*(($10 + [120])) = $4
	CALL $291($4)
	
.LABEL $label$21
	*([0] + [4]) = ($10 + [160])
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [280]))
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [284])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [12])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [16])) = $3
	CALL $291($3)
	
.LABEL $label$6
	CALL $291($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$4 }
	$5 = *(($0 + [280]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $291($5)
	
.LABEL $label$1
	CALL $55(($0 + [240]))
	$3 = *(($0 + [200]))
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($0 + [204])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL $291(*(($2 + [32])))
	
.LABEL $label$12
	CALL $291($2)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($0 + [200]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $3
	
.LABEL $label$8
	*($1) = $3
	CALL $291($5)
	
.LABEL $label$7
	$3 = *(($0 + [160]))
	if ( ($3 == 0) ){ goto $label$13 }
	$1 = ($0 + [164])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	CALL $291($2)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$16 }
	$5 = *(($0 + [160]))
	goto $label$14 
	
.LABEL $label$15
	$5 = $3
	
.LABEL $label$14
	*($1) = $3
	CALL $291($5)
	
.LABEL $label$13
	$3 = *(($0 + [120]))
	if ( ($3 == 0) ){ goto $label$18 }
	$1 = ($0 + [124])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$20 }
	
.LOOP $label$21:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$22 }
	CALL $291($2)
	
.LABEL $label$22
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$21 }
	$5 = *(($0 + [120]))
	goto $label$19 
	
.LABEL $label$20
	$5 = $3
	
.LABEL $label$19
	*($1) = $3
	CALL $291($5)
	
.LABEL $label$18
	$3 = *(($0 + [80]))
	if ( ($3 == 0) ){ goto $label$23 }
	$1 = ($0 + [84])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$25 }
	
.LOOP $label$26:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$27 }
	CALL $291($2)
	
.LABEL $label$27
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$26 }
	$5 = *(($0 + [80]))
	goto $label$24 
	
.LABEL $label$25
	$5 = $3
	
.LABEL $label$24
	*($1) = $3
	CALL $291($5)
	
.LABEL $label$23
	CALL $56(($0 + [40]))
	return $0
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [104])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [108])) = $3
	CALL $291($3)
	
.LABEL $label$6
	$3 = *($2 + [92])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($2 + [96])) = $3
	CALL $291($3)
	
.LABEL $label$7
	$3 = *($2 + [76])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [80])) = $3
	CALL $291($3)
	
.LABEL $label$8
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL $291(*(($2 + [40])))
	
.LABEL $label$9
	CALL $291($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $291($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *(($2 + [100]))
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [104])) = $3
	CALL $291($3)
	
.LABEL $label$6
	$3 = *(($2 + [68]))
	if ( ($3 == 0) ){ goto $label$7 }
	*(($2 + [72])) = $3
	CALL $291($3)
	
.LABEL $label$7
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $291(*(($2 + [40])))
	
.LABEL $label$8
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$9 }
	CALL $291(*(($2 + [28])))
	
.LABEL $label$9
	CALL $291($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $291($2)
	
.LABEL $label$1
	return $0
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($1 + [256])
	$3 = *(($1 + [284]))
	if ( ((int_32)$3 == (int_32)*(($1 + [280]))) ){ goto $label$2 }
	$1 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$2), [256])
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $69($0, $2)
	return 
	
.LABEL $label$2
	$1 = CALL db_find_i64(*($2), *(($1 + [264])), (int_64)4982863551778521088, (int_64)4982863551778521088)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $68($2, $1) + [40]) == (int_32)$2), [256])
	CALL $69($0, $2)
	return 
	
.LABEL $label$1
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *([0] + [72])
	$5 = *([0] + [64])
	$6 = *([0] + [56])
	$7 = *([0] + [48])
	$8 = *([0] + [40])
	$9 = *([0] + [32])
	*($0 + [12]) = [0]
	*(($2 = ($0 + [16]))) = [0]
	*(($3 = ($0 + [20]))) = [0]
	$1 = CALL $290([48])
	*($0 + [12]) = $1
	*($1) = $9
	*($1 + [8]) = $8
	*($1 + [16]) = $7
	*($1 + [24]) = $6
	*($1 + [32]) = $5
	$10 = ($1 + [48])
	*($3) = $10
	*($1 + [40]) = $4
	*($2) = $10
	*($0 + [24]) = [0]
	*($0 + [28]) = [0]
	*($0 + [32]) = [0]
	*($0 + [36]) = [0]
}

void .FUNC $247 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $173 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $290(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $296($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $291($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [240])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $110(*($1), ($0 + [32]))
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $62($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [240])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [240])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $66(CALL $67($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $150 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [44]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1104])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-7631349568579305472)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1040])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1040])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $78(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $151 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [144])
	*([0] + [4]) = $15
	$3 = *(($0 + [80]))
	$7 = *(($0 + [84]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$8 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [56])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$6), [256])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$7 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $88($6, $7)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$6), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1232])
	CALL eosio_assert(((uint_64)*($8 + [16]) >= (uint_64)$2), [1328])
	$12 = $1
	$10 = *($0)
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$5 }
	$12 = (int_64)
	CALL $89($0, $1, $12((int_64)0 - $2)))
	CALL $90($0, $1, [2], $12, (int_64)0, (int_64)0)
	$12 = *($0)
	
.LABEL $label$5
	if ( ((int_64)$12 == (int_64)$10) ){ goto $label$6 }
	CALL $89($0, $10, $2)
	CALL $90($0, $10, [2], $2, (int_64)0, (int_64)0)
	
.LABEL $label$6
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1408])
	$10 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [1360])
	$5 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [224]
	$11 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$17 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$6 = ($6 + [165])
	goto $label$15 
	
.LABEL $label$17
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$13
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$12 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [192]
	$13 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$23 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$6 = ($6 + [165])
	goto $label$21 
	
.LABEL $label$23
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$19
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$18 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [176]
	$14 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$29 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$6 = ($6 + [165])
	goto $label$27 
	
.LABEL $label$29
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$25
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$24 }
	*(($15 + [16])) = [0]
	*($15 + [8]) = (int_64)0
	$8 = CALL strlen([1392])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$33 }
	*($15 + [8]) = ($8 << [1])
	$6 = (($15 + [8]) | [1])
	if ( $8 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$7 = (($8 + [16]) & [-16])
	$6 = CALL $290($7)
	*($15 + [8]) = ($7 | [1])
	*($15 + [16]) = $6
	*($15 + [12]) = $8
	
.LABEL $label$32
	CALL memcpy($6, [1392], $8)
	
.LABEL $label$31
	*(($6 + $8)) = [0]
	*((($15 + [24]) + [24])) = (int_64)1397703940
	*(($6 = (($15 + [24]) + [36]))) = *($15 + [12])
	*($15 + [32]) = $1
	$8 = ($15 + [16])
	*(($15 + [64])) = *($8)
	*($15 + [24]) = *($0)
	*($15 + [40]) = $2
	*($15 + [56]) = *($15 + [8])
	*($15 + [8]) = [0]
	*($15 + [12]) = [0]
	*($8) = [0]
	*($15 + [72]) = $13
	*($15 + [80]) = $14
	*(($8 = CALL $290([16]))) = $5
	*($8 + [8]) = $11
	*((($15 + [72]) + [32])) = [0]
	$7 = ($8 + [16])
	*((($15 + [72]) + [24])) = $7
	*(($15 + [92])) = $7
	*($15 + [88]) = $8
	*($15 + [100]) = [0]
	*((($15 + [72]) + [36])) = [0]
	$8 = *($15 + [56])
	$6 = ( *($6) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($6 + [32])
	$10 = (CASTING uint_64)(uint_32 $6)
	$6 = ($15 + [100])
	
.LOOP $label$34:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$34 }
	if ( ($8 == 0) ){ goto $label$36 }
	CALL $62($6, $8)
	$6 = *(($15 + [104]))
	$8 = *(($15 + [100]))
	goto $label$35 
	
.LABEL $label$36
	$6 = [0]
	$8 = [0]
	
.LABEL $label$35
	*($15 + [132]) = $8
	*($15 + [128]) = $8
	*($15 + [136]) = $6
	*($15 + [112]) = ($15 + [128])
	*($15 + [120]) = ($15 + [24])
	CALL $152(($15 + [120]), ($15 + [112]))
	CALL $153(($15 + [128]), ($15 + [72]))
	$8 = *($15 + [128])
	CALL send_inline($8, (*($15 + [132]) - $8))
	$8 = *($15 + [128])
	if ( ($8 == 0) ){ goto $label$37 }
	*($15 + [132]) = $8
	CALL $291($8)
	
.LABEL $label$37
	$8 = *($15 + [100])
	if ( ($8 == 0) ){ goto $label$38 }
	*(($15 + [104])) = $8
	CALL $291($8)
	
.LABEL $label$38
	$8 = *($15 + [88])
	if ( ($8 == 0) ){ goto $label$39 }
	*(($15 + [92])) = $8
	CALL $291($8)
	
.LABEL $label$39
	if ( ((*(($15 + [56])) & [1]) == 0) ){ goto $label$40 }
	CALL $291(*(($15 + [64])))
	
.LABEL $label$40
	if ( ((*($15 + [8]) & [1]) == 0) ){ goto $label$41 }
	CALL $291(*(($15 + [16])))
	
.LABEL $label$41
	*([0] + [4]) = ($15 + [144])
	return (unreachable)
	
.LABEL $label$30
	CALL $292(($15 + [8]))
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([1760])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $157 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [1408])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1360])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $158(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $154 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $157($0, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = $3
}

void .FUNC $155 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([1728])
	CALL prints_l($2, $3)
	CALL prints([1744])
	CALL $156($1, [0])
	*([0] + [4]) = $10
}

void .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [384])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $106(*($1), *($0 + [12]))
}

void .FUNC $159 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	$26 = (*([0] + [4]) - [128])
	*([0] + [4]) = $26
	*($26 + [72]) = $2
	$10 = *(($0 + [80]))
	$20 = *(($0 + [84]))
	if ( ((int_32)$20 == (int_32)$10) ){ goto $label$1 }
	$19 = ($20 + [-24])
	$7 = ([0] - $10)
	
.LOOP $label$2:
	if ( ((int_64)*(*($19)) == (int_64)$1) ){ goto $label$1 }
	$20 = $19
	$5 = ($19 + [-24])
	$19 = $5
	if ( ((int_32)($5 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [56])
	if ( ((int_32)$20 == (int_32)$10) ){ goto $label$4 }
	$25 = *(($20 + [-24]))
	CALL eosio_assert(((int_32)*($25 + [32]) == (int_32)$4), [256])
	goto $label$3 
	
.LABEL $label$4
	$25 = [0]
	$19 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$3 }
	$25 = CALL $88($4, $19)
	CALL eosio_assert(((int_32)*($25 + [32]) == (int_32)$4), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$25 != (int_32)[0]), [1232])
	$10 = *(($0 + [40]))
	$20 = *(($0 + [44]))
	if ( ((int_32)$20 == (int_32)$10) ){ goto $label$5 }
	$19 = ($20 + [-24])
	$7 = ([0] - $10)
	
.LOOP $label$6:
	if ( ((int_64)*(*($19)) == (int_64)$2) ){ goto $label$5 }
	$20 = $19
	$5 = ($19 + [-24])
	$19 = $5
	if ( ((int_32)($5 + $7) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [16])
	if ( ((int_32)$20 == (int_32)$10) ){ goto $label$8 }
	$19 = *(($20 + [-24]))
	CALL eosio_assert(((int_32)*($19 + [148]) == (int_32)$5), [256])
	goto $label$7 
	
.LABEL $label$8
	$19 = [0]
	$20 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$7 }
	$19 = CALL $87($5, $20)
	CALL eosio_assert(((int_32)*($19 + [148]) == (int_32)$5), [256])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$19 != (int_32)[0]), [1264])
	*($0 + [296]) = *($19 + [8])
	$10 = *(($0 + [240]))
	$20 = *(($0 + [244]))
	if ( ((int_32)$20 == (int_32)$10) ){ goto $label$9 }
	$19 = ($20 + [-24])
	$7 = ([0] - $10)
	
.LOOP $label$10:
	if ( ((int_64)*(*($19)) == (int_64)$3) ){ goto $label$9 }
	$20 = $19
	$5 = ($19 + [-24])
	$19 = $5
	if ( ((int_32)($5 + $7) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = ($0 + [216])
	if ( ((int_32)$20 == (int_32)$10) ){ goto $label$12 }
	$7 = *(($20 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [128]) == (int_32)$6), [256])
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	$19 = CALL db_find_i64(*(($0 + [216])), *(($0 + [224])), (int_64)-6228196809676685312, $3)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$11 }
	$7 = CALL $80($6, $19)
	CALL eosio_assert(((int_32)*($7 + [128]) == (int_32)$6), [256])
	
.LABEL $label$11
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [1152])
	*($26 + [64]) = ($0 + [96])
	CALL $160(($26 + [56]), ($26 + [64]), ($26 + [72]))
	$19 = *($26 + [60])
	if ( ($19 == 0) ){ goto $label$14 }
	
.LOOP $label$15:
	if ( ((int_64)*($19 + [8]) != (int_64)*($26 + [72])) ){ goto $label$14 }
	if ( ((int_64)*($19 + [16]) != (int_64)$1) ){ goto $label$16 }
	$5 = [1]
	if ( ((int_32)*($19 + [33]) == (int_32)[1]) ){ goto $label$13 }
	
.LABEL $label$16
	CALL $161(($26 + [56]))
	$19 = *($26 + [60])
	if ( $19 ){ goto $label$15 }
	
.LABEL $label$14
	$5 = [0]
	
.LABEL $label$13
	CALL eosio_assert($5, [1776])
	CALL eosio_assert((*($7 + [116]) == 0), [1808])
	$19 = *($7 + [16])
	if ( ((int_32)$19 == (int_32)[3]) ){ goto $label$19 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$18 }
	if ( $19 ){ goto $label$17 }
	$20 = ($7 + [80])
	$5 = *($20)
	$19 = *($7 + [76])
	if ( ((int_32)$19 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$20:
	if ( ((int_64)*($19) != (int_64)$1) ){ goto $label$21 }
	CALL eosio_assert([0], [1840])
	$5 = *($20)
	
.LABEL $label$21
	$19 = ($19 + [32])
	if ( ((int_32)$19 != (int_32)$5) ){ goto $label$20 }
	goto $label$17 
	
.LABEL $label$19
	$20 = ($7 + [108])
	$5 = *($20)
	$19 = *($7 + [104])
	if ( ((int_32)$19 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$22:
	if ( ((int_64)*($19) != (int_64)$1) ){ goto $label$23 }
	CALL eosio_assert([0], [1840])
	$5 = *($20)
	
.LABEL $label$23
	$19 = ($19 + [16])
	if ( ((int_32)$19 != (int_32)$5) ){ goto $label$22 }
	goto $label$17 
	
.LABEL $label$18
	$20 = ($7 + [96])
	$5 = *($20)
	$19 = *($7 + [92])
	if ( ((int_32)$19 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$24:
	if ( ((int_64)*($19) != (int_64)$1) ){ goto $label$25 }
	CALL eosio_assert([0], [1840])
	$5 = *($20)
	
.LABEL $label$25
	$19 = ($19 + [24])
	if ( ((int_32)$19 != (int_32)$5) ){ goto $label$24 }
	
.LABEL $label$17
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) <= (uint_32)*($7 + [124])) ){ goto $label$27 }
	CALL $81($0, *($7))
	goto $label$26 
	
.LABEL $label$27
	$18 = *($7 + [48])
	$2 = ((uint_64)((int_64)*($7 + [64]) * (int_64)$18) / (uint_64)(int_64)10000)
	*($26 + [48]) = $2
	$19 = *(($7 + [16]))
	if ( ((int_32)$19 == (int_32)[3]) ){ goto $label$40 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$39 }
	if ( $19 ){ goto $label$26 }
	CALL eosio_assert(((uint_64)*($25 + [16]) >= (uint_64)$2), [1328])
	$2 = *([0] + [24])
	$18 = *($26 + [48])
	$24 = $1
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$41 }
	$24 = (int_64)
	CALL $89($0, $1, $24((int_64)0 - $18)))
	CALL $90($0, $1, [7], $24, (int_64)0, (int_64)0)
	$24 = *($0)
	
.LABEL $label$41
	if ( ((int_64)$24 == (int_64)$2) ){ goto $label$42 }
	CALL $89($0, $2, $18)
	CALL $90($0, $2, [7], $18, (int_64)0, (int_64)0)
	
.LABEL $label$42
	$2 = (int_64)0
	$19 = [0]
	if ( (*(($7 + [116])) == 0) ){ goto $label$38 }
	goto $label$28 
	
.LABEL $label$40
	$2 = (int_64)0
	$19 = [0]
	if ( *(($7 + [116])) ){ goto $label$35 }
	$5 = *($7 + [104])
	$10 = ($7 + [108])
	$20 = *($10)
	if ( ((int_32)$20 != (int_32)$5) ){ goto $label$37 }
	$2 = $18
	goto $label$36 
	
.LABEL $label$39
	CALL eosio_assert(((uint_64)*($25 + [16]) >= (uint_64)$2), [1328])
	$2 = *([0] + [24])
	$18 = *($26 + [48])
	$24 = $1
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$43 }
	$24 = (int_64)
	CALL $89($0, $1, $24((int_64)0 - $18)))
	CALL $90($0, $1, [8], $24, (int_64)0, (int_64)0)
	$24 = *($0)
	
.LABEL $label$43
	if ( ((int_64)$24 == (int_64)$2) ){ goto $label$44 }
	CALL $89($0, $2, $18)
	CALL $90($0, $2, [8], $18, (int_64)0, (int_64)0)
	
.LABEL $label$44
	*($26 + [104]) = (int_64)0
	*($26 + [96]) = $1
	*($26 + [112]) = (int_64)0
	$2 = *($0 + [8])
	*($26 + [80]) = ($26 + [96])
	CALL eosio_assert($8, [688])
	CALL $165($6, $7, $2, ($26 + [80]))
	$19 = *($7 + [56])
	if ( ((int_32)((int_32)(*(($7 + [96])) - *($7 + [92])) / (int_32)[24]) != (int_32)$19) ){ goto $label$26 }
	*($26 + [80]) = (int_64)0
	*($26 + [88]) = [0]
	$1 = *(($7 + [48]))
	CALL $166(((int_64)((int_64)((int_64)((int_64)$3 + (int_64)$1) + (int_64)*($26 + [72])) + (int_64)$1) + (int_64)(CASTING uint_64)(uint_32 $19)), ($26 + [80]), $1, $19)
	$22 = [0]
	$21 = [0]
	$20 = *($26 + [80])
	$19 = *($26 + [84])
	$25 = ((int_32)$19 == (int_32)$20)
	if ( $25 ){ goto $label$45 }
	$10 = int_32(($19 - $20) >> [3])
	$21 = [0]
	$5 = $20
	$19 = [0]
	$22 = [0]
	
.LOOP $label$46:
	$1 = *($5)
	$22 = ( $19 ? $22 : ((uint_64)$1 > (uint_64)*(($20 + ($22 << [3])))) )
	$21 = ( $19 ? $21 : (uint_64)($1 <= *(($20 + ($21 << [3])))) )
	$5 = ($5 + [8])
	$19 = ($19 + [1])
	if ( ($19 <= $10) ){ goto $label$46 }
	
.LABEL $label$45
	*($26 + [40]) = [0]
	$23 = (int_64)0
	*($26 + [32]) = (int_64)0
	$24 = (int_64)0
	if ( $25 ){ goto $label$47 }
	$11 = ($7 + [88])
	$12 = (($26 + [32]) + [8])
	$13 = ($7 + [92])
	$14 = ($0 + [80])
	$15 = ($0 + [84])
	$16 = ($0 + [64])
	$17 = ($0 + [56])
	$24 = (int_64)0
	$23 = (int_64)0
	$25 = [0]
	
.LOOP $label$48:
	$19 = *($11)
	if ( ((int_32)$25 != (int_32)$21) ){ goto $label$52 }
	if ( (($19 & [255]) == 0) ){ goto $label$51 }
	
.LABEL $label$52
	if ( ((int_32)$25 != (int_32)$22) ){ goto $label$50 }
	if ( ((int_32)($19 & [255]) != (int_32)[1]) ){ goto $label$50 }
	
.LABEL $label$51
	$19 = *($26 + [36])
	if ( ((int_32)$19 == (int_32)*($12)) ){ goto $label$54 }
	*($19) = *($26 + [48])
	*($26 + [36]) = ($19 + [8])
	goto $label$53 
	
.LABEL $label$54
	CALL $83(($26 + [32]), ($26 + [48]))
	
.LABEL $label$53
	$24 = *($26 + [48])
	$1 = *((*($13) + ((int_32)$25 * (int_32)[24])))
	$23 = $1
	goto $label$49 
	
.LABEL $label$50
	*($26 + [24]) = (int_64)0
	$19 = *($26 + [36])
	if ( ((uint_32)$19 >= (uint_32)*($12)) ){ goto $label$56 }
	*($19) = (int_64)0
	*($26 + [36]) = ($19 + [8])
	goto $label$55 
	
.LABEL $label$56
	CALL $169(($26 + [32]), ($26 + [24]))
	
.LABEL $label$55
	$1 = *((*($13) + ((int_32)$25 * (int_32)[24])))
	
.LABEL $label$49
	$9 = *($14)
	$20 = *($15)
	if ( ((int_32)$20 == (int_32)$9) ){ goto $label$57 }
	$19 = ($20 + [-24])
	$10 = ([0] - $9)
	
.LOOP $label$58:
	if ( ((int_64)*(*($19)) == (int_64)$1) ){ goto $label$57 }
	$20 = $19
	$5 = ($19 + [-24])
	$19 = $5
	if ( ((int_32)($5 + $10) != (int_32)[-24]) ){ goto $label$58 }
	
.LABEL $label$57
	if ( ((int_32)$20 == (int_32)$9) ){ goto $label$60 }
	CALL eosio_assert(((int_32)*(*(($20 + [-24])) + [32]) == (int_32)$4), [256])
	goto $label$59 
	
.LABEL $label$60
	$19 = CALL db_find_i64(*($17), *($16), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$59 }
	CALL eosio_assert(((int_32)*(CALL $88($4, $19) + [32]) == (int_32)$4), [256])
	
.LABEL $label$59
	$19 = ((int_32)$25 * (int_32)[24])
	$2 = *((*($13) + $19))
	$3 = *($26 + [48])
	$1 = *([0] + [24])
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$61 }
	$18 = (int_64)
	CALL $89($0, $1, $18((int_64)0 - $3)))
	CALL $90($0, $1, [8], $18, (int_64)0, (int_64)0)
	$1 = *($0)
	
.LABEL $label$61
	if ( ((int_64)$1 == (int_64)$2) ){ goto $label$62 }
	CALL $89($0, $2, $3)
	CALL $90($0, $2, [8], $3, (int_64)0, (int_64)0)
	
.LABEL $label$62
	CALL $86($0, (int_64)11, *([0] + [24]), *((*($13) + $19)), *((*($26 + [80]) + ($25 << [3]))), *($26 + [72]), *(($7 + [24])))
	$25 = ($25 + [1])
	if ( ($25 <= int_32((*($26 + [84]) - *($26 + [80])) >> [3])) ){ goto $label$48 }
	
.LABEL $label$47
	$19 = ($0 + [8])
	$1 = *($19)
	*($26 + [28]) = ($26 + [32])
	*($26 + [24]) = ($26 + [80])
	CALL eosio_assert($8, [688])
	CALL $167($6, $7, $1, ($26 + [24]))
	$1 = *($19)
	CALL eosio_assert($8, [688])
	CALL $168($6, $7, $1, ($26 + [24]))
	$19 = *($26 + [32])
	if ( ($19 == 0) ){ goto $label$63 }
	*($26 + [36]) = $19
	CALL $291($19)
	
.LABEL $label$63
	$19 = *($26 + [80])
	if ( ($19 == 0) ){ goto $label$64 }
	*($26 + [84]) = $19
	CALL $291($19)
	
.LABEL $label$64
	if ( (int_64)($24 == 0) ){ goto $label$26 }
	$1 = *($26 + [72])
	CALL $297(($26 + [8]), ($7 + [32]))
	CALL $170($0, $23, $1, ($26 + [8]), $24)
	if ( ((*($26 + [8]) & [1]) == 0) ){ goto $label$26 }
	CALL $291(*($26 + [16]))
	goto $label$26 
	
.LABEL $label$38
	$10 = *(($7 + [16]))
	if ( ((int_32)$10 == (int_32)[3]) ){ goto $label$34 }
	if ( ((int_32)$10 == (int_32)[1]) ){ goto $label$31 }
	$2 = (int_64)0
	if ( $10 ){ goto $label$33 }
	$2 = *(($7 + [48]))
	$5 = *($7 + [76])
	$20 = *(($7 + [80]))
	if ( ((int_32)$20 == (int_32)$5) ){ goto $label$32 }
	$19 = ($5 + [8])
	$20 = int_32(($20 - $5) >> [5])
	$5 = [0]
	
.LOOP $label$65:
	$2 = (int_64))($2 - *($19))
	$19 = ($19 + [32])
	$5 = ($5 + [1])
	if ( ($5 <= $20) ){ goto $label$65 }
	goto $label$33 
	
.LABEL $label$37
	$19 = ($5 + [8])
	$20 = int_32(($20 - $5) >> [4])
	$5 = [0]
	$2 = $18
	
.LOOP $label$66:
	$2 = (int_64))($2 - *($19))
	$19 = ($19 + [16])
	$5 = ($5 + [1])
	if ( ($5 <= $20) ){ goto $label$66 }
	
.LABEL $label$36
	$19 = ((*($7 + [56]) - uint_32((*($10) - *($7 + [104])) >> [4])) & [255])
	
.LABEL $label$35
	$18 = *($26 + [72])
	CALL eosio_assert(((int_64)$2 != (int_64)0), [1872])
	CALL eosio_assert(((int_32)$19 != (int_32)[0]), [1920])
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$67 }
	*($26 + [80]) = (int_64)53022474784365
	$3 = (CASTING uint_64)(uint_32 $19)
	*($26 + [88]) = ((int_64)((int_64)((int_64)((int_64)((int_64)$3 + (int_64)$1) + (int_64)$2) + (int_64)$18) + (int_64)$3) + (int_64)(CASTING int_64)(int_32 CALL tapos_block_prefix()))
	CALL sha256((($26 + [80]) + [8]), [8], ($26 + [96]))
	$2 = ((int_64)((int_64)((uint_64)$2 / (uint_64)$3) * (int_64)((uint_64)((int_64)*($26 + [96]) | (int_64)((int_64)*($26 + [97]) << (int_64)32)) % (uint_64)(int_64)100)) << (int_64)1)
	$2 = ( (int_64)1 ? ((uint_64)$2 / (uint_64)(int_64)100) : (uint_64)($2 <= (int_64)200) )
	
.LABEL $label$67
	CALL $86($0, (int_64)12, *([0] + [24]), $1, $2, *($26 + [72]), *($7 + [24]))
	*($26 + [104]) = $2
	*($26 + [96]) = $1
	$1 = *($0 + [8])
	*($26 + [80]) = ($26 + [96])
	CALL eosio_assert($8, [688])
	CALL $171($6, $7, $1, ($26 + [80]))
	if ( ((int_32)int_32((*(($7 + [108])) - *($7 + [104])) >> [4]) != (int_32)*($7 + [56])) ){ goto $label$26 }
	$1 = *(($0 + [8]))
	CALL eosio_assert($8, [688])
	CALL $172($6, $7, $1, ($26 + [80]))
	goto $label$26 
	
.LABEL $label$34
	$2 = *(($7 + [48]))
	$5 = *($7 + [104])
	$20 = *(($7 + [108]))
	if ( ((int_32)$20 == (int_32)$5) ){ goto $label$29 }
	$19 = ($5 + [8])
	$20 = int_32(($20 - $5) >> [4])
	$5 = [0]
	
.LOOP $label$68:
	$2 = (int_64))($2 - *($19))
	$19 = ($19 + [16])
	$5 = ($5 + [1])
	if ( ($5 <= $20) ){ goto $label$68 }
	
.LABEL $label$33
	if ( ((int_32)$10 == (int_32)[3]) ){ goto $label$29 }
	if ( ((int_32)$10 == (int_32)[1]) ){ goto $label$30 }
	$19 = [0]
	if ( $10 ){ goto $label$28 }
	
.LABEL $label$32
	$19 = (*($7 + [56]) - uint_32((*(($7 + [80])) - *($7 + [76])) >> [5]))
	goto $label$28 
	
.LABEL $label$31
	$2 = *(($7 + [48]))
	
.LABEL $label$30
	$19 = (*($7 + [56]) - ((int_32)(*(($7 + [96])) - *($7 + [92])) / (int_32)[24]))
	goto $label$28 
	
.LABEL $label$29
	$19 = (*($7 + [56]) - uint_32((*(($7 + [108])) - *($7 + [104])) >> [4]))
	
.LABEL $label$28
	$18 = *($26 + [72])
	CALL eosio_assert(((int_64)$2 != (int_64)0), [1872])
	$19 = ($19 & [255])
	CALL eosio_assert(((int_32)$19 != (int_32)[0]), [1920])
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$69 }
	*($26 + [80]) = (int_64)53022474784365
	$3 = (CASTING uint_64)(uint_32 $19)
	*($26 + [88]) = ((int_64)((int_64)((int_64)((int_64)((int_64)$3 + (int_64)$1) + (int_64)$2) + (int_64)$18) + (int_64)$3) + (int_64)(CASTING int_64)(int_32 CALL tapos_block_prefix()))
	CALL sha256((($26 + [80]) + [8]), [8], ($26 + [96]))
	$2 = ((int_64)((int_64)((uint_64)$2 / (uint_64)$3) * (int_64)((uint_64)((int_64)*($26 + [96]) | (int_64)((int_64)*($26 + [97]) << (int_64)32)) % (uint_64)(int_64)100)) << (int_64)1)
	$2 = ( (int_64)1 ? ((uint_64)$2 / (uint_64)(int_64)100) : (uint_64)($2 <= (int_64)200) )
	
.LABEL $label$69
	$19 = (CASTING uint_32)(uint_64 ((uint_64)$2 % (uint_64)(int_64)10))
	if ( ((int_32)$19 != (int_32)*($7 + [72])) ){ goto $label$72 }
	$3 = *($7 + [24])
	if ( ((int_64)$3 != (int_64)$1) ){ goto $label$71 }
	
.LABEL $label$72
	$18 = *($26 + [48])
	$3 = *([0] + [24])
	if ( ((int_64)*($0) == (int_64)$3) ){ goto $label$73 }
	$24 = (int_64)
	CALL $89($0, $3, $24((int_64)0 - $18)))
	CALL $90($0, $3, [7], $24, (int_64)0, (int_64)0)
	$3 = *($0)
	
.LABEL $label$73
	if ( ((int_64)$3 == (int_64)$1) ){ goto $label$74 }
	CALL $89($0, $1, $18)
	CALL $90($0, $1, [7], $18, (int_64)0, (int_64)0)
	
.LABEL $label$74
	CALL $86($0, (int_64)10, *([0] + [24]), $1, $2, *($26 + [72]), *($7 + [24]))
	*($26 + [104]) = $2
	*($26 + [96]) = $1
	*($26 + [112]) = $19
	*($26 + [120]) = (int_64)0
	$1 = *($0 + [8])
	*($26 + [80]) = ($26 + [96])
	CALL eosio_assert($8, [688])
	CALL $163($6, $7, $1, ($26 + [80]))
	goto $label$70 
	
.LABEL $label$71
	CALL $86($0, (int_64)9, *([0] + [24]), $3, *($26 + [48]), *($26 + [72]), $1)
	CALL $86($0, (int_64)10, *([0] + [24]), $1, $2, *($26 + [72]), *(($7 + [24])))
	*($26 + [96]) = $1
	*($26 + [104]) = $2
	*($26 + [112]) = $19
	*($26 + [120]) = *($26 + [48])
	$1 = *($0 + [8])
	*($26 + [80]) = ($26 + [96])
	CALL eosio_assert($8, [688])
	CALL $162($6, $7, $1, ($26 + [80]))
	
.LABEL $label$70
	if ( ((int_32)int_32((*(($7 + [80])) - *($7 + [76])) >> [5]) != (int_32)*($7 + [56])) ){ goto $label$26 }
	$1 = *($0 + [8])
	CALL eosio_assert($8, [688])
	CALL $164($6, $7, $1, ($26 + [96]))
	
.LABEL $label$26
	*([0] + [4]) = ($26 + [128])
}

void .FUNC $273 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$3 = *(($0 + [80]))
	$7 = *(($0 + [84]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [56])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$5), [256])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $88($5, $7)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$5), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1232])
	$3 = *(($0 + [40]))
	$7 = *(($0 + [44]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$5 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [16])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$8 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [148]) == (int_32)$5), [256])
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $87($5, $7)
	CALL eosio_assert(((int_32)*($6 + [148]) == (int_32)$5), [256])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1264])
	CALL eosio_assert(((int_64)*($6 + [48]) == (int_64)$1), [2368])
	*($8 + [28]) = $6
	*($8 + [24]) = $5
	*($8 + [8 align=4]) = *($8 + [24])
	CALL $274(($8 + [16]), $0, ($8 + [8]))
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $272 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$2 = *($0)
	$7 = ($2 + [112])
	$3 = *($7)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$1 }
	$3 = (int_64)0
	$6 = ($2 + [96])
	$8 = CALL db_lowerbound_i64(*($6), *(($2 + [104])), (int_64)7343588593878171648, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $135($6, $8)
	*($9 + [12]) = [0]
	*($9 + [8]) = $6
	$3 = *(*(CALL $259(($9 + [8])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($2 + [112])) = $3
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [976])
	*($1) = *($7)
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*($0 + [8]))
	$3 = *(*($0 + [12]))
	$4 = *(($2 + [80]))
	$8 = *(($2 + [84]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$3 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$7 = ($2 + [56])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$7 }
	$6 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$7), [256])
	if ( $6 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = CALL db_find_i64(*(($2 + [56])), *(($2 + [64])), (int_64)-3020384829779738624, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $88($7, $6) + [32]) == (int_32)$7), [256])
	
.LABEL $label$6
	$3 = *(*(($0 + [12])))
	if ( ((int_64)$3 == (int_64)*(*(($0 + [8])))) ){ goto $label$5 }
	*($1 + [24]) = $3
	
.LABEL $label$5
	*($1 + [32]) = [0]
	*($1 + [33]) = ((int_32)*(*($0 + [16])) ^ (int_32)[1])
	*($1 + [36]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	*(($7 = *($1))) = (*($7) + [8])
	*(($7 = *($1))) = (*($7) + [1])
	*(($7 = *($1))) = (*($7) + [2])
	*(($7 = *($1))) = (*($7) + [2])
	*(($7 = *($1))) = (*($7) + [2])
	*(($7 = *($1))) = (*($7) + [2])
	$7 = *($2)
	$2 = *($0 + [24])
	$6 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ))
	$3 = *($1)
	$7 = *($3)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	*($3) = $7
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $7)
	
.LABEL $label$2
	$7 = *($2)
	$2 = *($0 + [28])
	$6 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ))
	$3 = *($1)
	$7 = *($3)
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	*($3) = $7
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($3) = ($2 + $7)
	
.LABEL $label$4
	*(($7 = *($1))) = (*($7) + [8])
	*(($7 = *($1))) = (*($7) + [1])
	$2 = *($0 + [40])
	$7 = (*($3) + [1])
	*(($3 = *($1))) = $7
	$2 = *($2 + [4])
	$4 = *($2 + [8])
	$5 = ($4 - $2)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$5:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	$7 = (($5 & [-8]) + $7)
	
.LABEL $label$6
	*($3) = ($7 + [9])
	$0 = *($0 + [44])
	$7 = (*($2) + [1])
	*(($2 = *($1))) = $7
	$0 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = ($3 - $0)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	
.LOOP $label$7:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$8 }
	$7 = (($4 & [-8]) + $7)
	
.LABEL $label$8
	*($2) = ($7 + [2])
	*(($7 = *($1))) = (*($7) + [1])
	*(($7 = *($1))) = (*($7) + [16])
	*(($7 = *($1))) = (*($7) + [4])
	*(($7 = *($1))) = (*($7) + [4])
	*(($7 = *($1))) = (*($7) + [4])
}

void .FUNC $224 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	*($11) = (int_64)0
	$8 = [0]
	*($11 + [8]) = [0]
	$3 = *($1 + [8])
	$2 = *($1)
	$9 = (*(($1 + [20])) - *($1 + [16]))
	$6 = int_32($9 >> [3])
	if ( ($6 == 0) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	$9 = CALL $290($9)
	*(($11 + [8])) = ($9 + ($6 << [3]))
	*($11) = $9
	*($11 + [4]) = $9
	$6 = *(($1 + [16]))
	$8 = (*(($1 + [20])) - $6)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($9, $6, $8)
	$8 = ($9 + $8)
	*($11 + [4]) = $8
	goto $label$4 
	
.LABEL $label$6
	$9 = [0]
	$10 = [0]
	$7 = [0]
	goto $label$3 
	
.LABEL $label$5
	$8 = $9
	
.LABEL $label$4
	$10 = $9
	$7 = $9
	
.LABEL $label$3
	$5 = *($1 + [32])
	$4 = *($1 + [28])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$6 = (*(*($0)) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($6) + $1))
	
.LABEL $label$7
	*($11 + [24]) = [0]
	*($11 + [16]) = (int_64)0
	$0 = ($8 - $7)
	$7 = int_32($0 >> [3])
	if ( ($7 == 0) ){ goto $label$8 }
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$1 }
	$0 = CALL $290($0)
	*(($11 + [24])) = ($0 + ($7 << [3]))
	*($11 + [16]) = $0
	*($11 + [20]) = $0
	$8 = ($8 - $10)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($0, $9, $8)
	*($11 + [20]) = ($0 + $8)
	
.LABEL $label$8
	CALL void $6((int_32 $2), (int_64 $3), (int_64 ($11 + [16])), (int_32 ($4 & [255])), (int_32 $5), (int_64 $1))
	$1 = *($11 + [16])
	if ( ($1 == 0) ){ goto $label$9 }
	*($11 + [20]) = $1
	CALL $291($1)
	
.LABEL $label$9
	$1 = *($11)
	if ( ($1 == 0) ){ goto $label$10 }
	*($11 + [4]) = $1
	CALL $291($1)
	
.LABEL $label$10
	*([0] + [4]) = ($11 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $296($11)
	
.LABEL $label$1
	CALL $296(($11 + [16]))
	(unreachable)
}

void .FUNC $183 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $290(((int_32)$6 * (int_32)[24]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $296($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[24])))) = *($1)
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($7 + ((int_32)$6 * (int_32)[24]))
	$3 = ($3 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $291($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$1), [256])
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$2 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4982863551778521088, (int_64)4982863551778521088)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $68($1, $2)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$1), [256])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [320])
	*(($0 + [8])) = *(($5 + [8]))
	*($0) = *($5)
	*(($0 + [16])) = (int_64)0
	*($0 + [12]) = [0]
	$1 = (*(($5 + [16])) - *($5 + [12]))
	$2 = int_32($1 >> [3])
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$1 = CALL $290($1)
	*(($0 + [12])) = $1
	*(($0 + [20])) = ($1 + ($2 << [3]))
	*(($2 = ($0 + [16]))) = $1
	$3 = *(($5 + [12]))
	$4 = (*(($5 + [16])) - $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($1, $3, $4)
	*($2) = (*($2) + $4)
	
.LABEL $label$4
	*($0 + [24]) = *($5 + [24])
	*(($0 + [32])) = *(($5 + [32]))
	return (unreachable)
	
.LABEL $label$3
	CALL $296(($0 + [12]))
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [64])
	$13 = $14
	*([0] + [4]) = $14
	$2 = *($0 + [24])
	$12 = *(($0 + [28]))
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$11 = ($12 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($11 + [16])) == (int_32)$1) ){ goto $label$1 }
	$12 = $11
	$4 = ($11 + [-24])
	$11 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$4 }
	$11 = *(($12 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$11 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($11 >> [31]) ^ (int_32)[1]), [352])
	if ( ($11 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($11)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($14 - (($11 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $11)
	*($13 + [12]) = $4
	*($13 + [8]) = $4
	*($13 + [16]) = ($4 + $11)
	if ( ($11 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($11 = CALL $290([56])) + [8]) = [0]
	*($11) = (int_64)0
	$5 = *([0] + [72])
	$6 = *([0] + [64])
	$7 = *([0] + [56])
	$8 = *([0] + [48])
	$9 = *([0] + [40])
	$10 = *([0] + [32])
	$4 = CALL $290([48])
	*($11 + [12]) = $4
	*($4) = $10
	*($4 + [8]) = $9
	*($4 + [16]) = $8
	*($4 + [24]) = $7
	*($4 + [32]) = $6
	$12 = ($4 + [48])
	*($11 + [20]) = $12
	*($4 + [40]) = $5
	*($11 + [16]) = $12
	*($11 + [24]) = [0]
	*($11 + [28]) = [0]
	*($11 + [32]) = [0]
	*($11 + [36]) = [0]
	*($11 + [40]) = $0
	*($13 + [24]) = ($13 + [8])
	*($13 + [36]) = ($11 + [8])
	*($13 + [32]) = $11
	*($13 + [40]) = ($11 + [12])
	*($13 + [44]) = ($11 + [24])
	*($13 + [48]) = ($11 + [28])
	*($13 + [52]) = ($11 + [32])
	*($13 + [56]) = ($11 + [36])
	CALL $70(($13 + [32]), ($13 + [24]))
	*($11 + [44]) = $1
	*($13 + [24]) = $11
	*($13 + [32]) = (int_64)4982863551778521088
	$12 = *($11 + [44])
	*($13 + [4]) = $12
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)4982863551778521088
	*($4 + [16]) = $12
	*($13 + [24]) = [0]
	*($4) = $11
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $71(($0 + [24]), ($13 + [24]), ($13 + [32]), ($13 + [4]))
	
.LABEL $label$8
	$4 = *($13 + [24])
	*($13 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$12 = *($4 + [12])
	if ( ($12 == 0) ){ goto $label$10 }
	*(($4 + [16])) = $12
	CALL $291($12)
	
.LABEL $label$10
	CALL $291($4)
	
.LABEL $label$3
	*([0] + [4]) = ($13 + [64])
	return $11
}

void .FUNC $248 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	*($10 + [72]) = $1
	$4 = *(($0 + [80]))
	$8 = *(($0 + [84]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$2 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$3 = ($7 + [-24])
	$7 = $3
	if ( ((int_32)($3 + $2) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [56])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [256])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $88($3, $8)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1232])
	$3 = ($0 + [96])
	*($10 + [64]) = $3
	CALL $249(($10 + [56]), ($10 + [64]), ($10 + [72]))
	$7 = *($10 + [60])
	if ( ($7 == 0) ){ goto $label$6 }
	$1 = (int_64)0
	
.LOOP $label$7:
	if ( ((int_64)*($7 + [16]) != (int_64)*($10 + [72])) ){ goto $label$5 }
	$1 = ((int_64)(CASTING uint_64)(uint_32 ((int_32)*($7 + [33]) == (int_32)[1])) + (int_64)$1)
	CALL $250(($10 + [56]))
	$7 = *($10 + [60])
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$1 = (int_64)0
	
.LABEL $label$5
	CALL eosio_assert((int_64)($1 == 0), [3120])
	$4 = ($0 + [16])
	*($10 + [48]) = $4
	*($10 + [8]) = (int_64)1
	CALL $251(($10 + [40]), ($10 + [48]), ($10 + [8]))
	$7 = *($10 + [44])
	if ( ($7 == 0) ){ goto $label$11 }
	$1 = (int_64)100
	
.LOOP $label$12:
	if ( ((int_32)*($7 + [8]) != (int_32)[1]) ){ goto $label$10 }
	if ( (*($7 + [12]) <= *($7 + [16])) ){ goto $label$9 }
	$6 = *($7)
	$1 = ( $6 ? $1 : ((uint_64)$6 > (uint_64)$1) )
	CALL $252(($10 + [40]))
	$7 = *($10 + [44])
	if ( $7 ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$1 = (int_64)100
	
.LABEL $label$10
	*($10 + [32]) = ((int_64)$1 + (int_64)1)
	$1 = *($0 + [8])
	*($10 + [24]) = ($10 + [32])
	CALL $253(($10 + [8]), $4, $1, ($10 + [24]))
	$1 = *($0 + [8])
	*($10 + [8]) = $0
	*($10 + [12]) = ($10 + [32])
	CALL $254(($10 + [24]), $3, $1, ($10 + [8]))
	$9 = ($0 + [8])
	goto $label$8 
	
.LABEL $label$9
	*($10 + [32]) = (int_64)0
	*($10 + [32]) = *($7)
	$9 = ($0 + [8])
	
.LABEL $label$8
	$1 = *(($0 + [8]))
	*($10 + [8]) = $0
	*($10 + [12]) = ($10 + [32])
	*($10 + [16]) = ($10 + [72])
	CALL $255(($10 + [24]), $3, $1, ($10 + [8]))
	$1 = *($10 + [32])
	$5 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$13 }
	$7 = ($8 + [-24])
	$2 = ([0] - $5)
	
.LOOP $label$14:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$13 }
	$8 = $7
	$3 = ($7 + [-24])
	$7 = $3
	if ( ((int_32)($3 + $2) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$16 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$4), [256])
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	$3 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$15 }
	$7 = CALL $87($4, $3)
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$4), [256])
	
.LABEL $label$15
	$1 = *($9)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [688])
	CALL $256($4, $7, $1, ($10 + [8]))
	*([0] + [4]) = ($10 + [80])
}

void .FUNC $225 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	*($12 + [47]) = $4
	*($12 + [32]) = $5
	$6 = *(($0 + [80]))
	$11 = *(($0 + [84]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$1 }
	$10 = ($11 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$1 }
	$11 = $10
	$8 = ($10 + [-24])
	$10 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($0 + [56])
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$4 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$8), [256])
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	$11 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $88($8, $11)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$8), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [1232])
	$6 = *(($0 + [40]))
	$11 = *(($0 + [44]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$5 }
	$10 = ($11 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$6:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$5 }
	$11 = $10
	$8 = ($10 + [-24])
	$10 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$8 = ($0 + [16])
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$8 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [148]) == (int_32)$8), [256])
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	$11 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$7 }
	$10 = CALL $87($8, $11)
	CALL eosio_assert(((int_32)*($10 + [148]) == (int_32)$8), [256])
	
.LABEL $label$7
	$6 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($6, [1264])
	CALL eosio_assert(((int_64)*($10 + [48]) == (int_64)$1), [2368])
	*($12 + [24]) = [0]
	*($12 + [16]) = (int_64)0
	$11 = (*($3 + [4]) - *($3))
	$7 = int_32($11 >> [3])
	if ( ($7 == 0) ){ goto $label$10 }
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$9 }
	$11 = CALL $290($11)
	*(($12 + [24])) = ($11 + ($7 << [3]))
	*($12 + [16]) = $11
	*($12 + [20]) = $11
	$9 = *($3)
	$7 = (*(($3 + [4])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($11, $9, $7)
	*($12 + [20]) = ($11 + $7)
	
.LABEL $label$10
	CALL $208(($12 + [16]))
	$11 = *($12 + [16])
	if ( ($11 == 0) ){ goto $label$11 }
	*($12 + [20]) = $11
	CALL $291($11)
	$5 = *($12 + [32])
	$4 = *($12 + [47])
	
.LABEL $label$11
	CALL eosio_assert(((($4 + [-2]) & [255]) <= [10]), [2432])
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)-10000) <= (int_64)90001), [2592])
	CALL eosio_assert((int_64)(((uint_64)$5 % (uint_64)(int_64)1000) == 0), [2624])
	$1 = *($0 + [8])
	*($12) = $3
	*($12 + [4]) = ($12 + [47])
	*($12 + [8]) = ($12 + [32])
	CALL eosio_assert($6, [688])
	CALL $226($8, $10, $1, $12)
	*([0] + [4]) = ($12 + [48])
	return (unreachable)
	
.LABEL $label$9
	CALL $296(($12 + [16]))
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [240])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [240])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $66($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [240])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [240])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [240])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $66(CALL $67($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [240])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [240])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [240])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [240])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [240])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $291($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $291($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $291($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $291($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $291($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $291($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $291($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $291($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [240])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [240])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [240])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [240])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [240])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [240])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $290($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $296($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $291($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $227 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $228 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$4 = *(($0 + [80]))
	$8 = *(($0 + [84]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [56])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $88($6, $8)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1232])
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$5 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $87($6, $8)
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	
.LABEL $label$7
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [1264])
	CALL eosio_assert(((int_64)*($7 + [48]) == (int_64)$1), [2368])
	CALL $297(($9 + [16]), $3)
	$5 = *($9 + [16])
	CALL eosio_assert(((( *($9 + [20]) ? uint_32($5 >> [1]) : ($5 & [1]) ) + [-2]) <= [149]), [2800])
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL $291(*($9 + [24]))
	
.LABEL $label$9
	$1 = *($0 + [8])
	*($9 + [8]) = $3
	CALL eosio_assert($8, [688])
	CALL $229($6, $7, $1, ($9 + [8]))
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $229 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$20 = (*([0] + [4]) - [128])
	*([0] + [4]) = $20
	*(($21 = $20) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($21 + [24]) = *($1 + [48])
	*($21 + [32]) = *($1 + [8])
	$2 = *($1)
	*($21 + [16]) = $2
	$6 = ($1 + [32])
	CALL $293($6, *($3))
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [848])
	*($21 + [48]) = [0]
	*($21) = ($21 + [48])
	$5 = ($1 + [8])
	*($21 + [60]) = $5
	*($21 + [56]) = $1
	$7 = ($1 + [10])
	*($21 + [64]) = $7
	$8 = ($1 + [12])
	*($21 + [68]) = $8
	$9 = ($1 + [14])
	*($21 + [72]) = $9
	$10 = ($1 + [16])
	*($21 + [76]) = $10
	$11 = ($1 + [20])
	*($21 + [80]) = $11
	*($21 + [84]) = $6
	$4 = ($1 + [48])
	*($21 + [88]) = $4
	$12 = ($1 + [56])
	*($21 + [92]) = $12
	$13 = ($1 + [64])
	*($21 + [96]) = $13
	$14 = ($1 + [96])
	*($21 + [100]) = $14
	$15 = ($1 + [116])
	*($21 + [104]) = $15
	$16 = ($1 + [120])
	*($21 + [108]) = $16
	$17 = ($1 + [136])
	*($21 + [112]) = $17
	$18 = ($1 + [140])
	*($21 + [116]) = $18
	$19 = ($1 + [144])
	*($21 + [120]) = $19
	CALL $179(($21 + [56]), $21)
	$3 = *($21 + [48])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$20 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$20 = ($20 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $20
	
.LABEL $label$1
	*($21 + [4]) = $20
	*($21) = $20
	*($21 + [8]) = ($20 + $3)
	*($21 + [48]) = $21
	*($21 + [60]) = $5
	*($21 + [64]) = $7
	*($21 + [68]) = $8
	*($21 + [72]) = $9
	*($21 + [76]) = $10
	*($21 + [80]) = $11
	*($21 + [56]) = $1
	*($21 + [84]) = $6
	*($21 + [88]) = $4
	*($21 + [92]) = $12
	*($21 + [96]) = $13
	*($21 + [100]) = $14
	*($21 + [104]) = $15
	*($21 + [108]) = $16
	*($21 + [112]) = $17
	*($21 + [116]) = $18
	*($21 + [120]) = $19
	CALL $180(($21 + [56]), ($21 + [48]))
	CALL db_update_i64(*($1 + [152]), *($21 + [40]), $20, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($20)
	
.LABEL $label$3
	$20 = ($0 + [36])
	$2 = *($21 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($21 + [60]) = $1
	*($21 + [56]) = $0
	*($21 + [68]) = $1
	*($21 + [64]) = ($21 + [24])
	*($21 + [72]) = ($21 + [16])
	*($21 + [76]) = ($21 + [40])
	*($21 + [48]) = ($21 + [56])
	CALL $230(($21 + [48]), $20, ($20 + [1]))
	*([0] + [4]) = ($21 + [128])
}

void .FUNC $89 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($8 + [8]) = $2
	$3 = *(($0 + [80]))
	$7 = *(($0 + [84]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [56])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$5), [256])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $88($5, $7)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$5), [256])
	
.LABEL $label$3
	$1 = *($0 + [8])
	*($8) = ($8 + [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [688])
	CALL $100($5, $6, $1, $8)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [352])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $290([48])) + [32]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [24])
	CALL $101(($8 + [32]), ($8 + [24]))
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [36])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $102(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $291($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [352])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $290([168])) + [20 align=4]) = (int_64)0
	*($6 + [28 align=4]) = (int_64)0
	*($6 + [36 align=4]) = (int_64)0
	*($6 + [68 align=4]) = (int_64)0
	*($6 + [76]) = [0]
	*($6 + [100]) = [0]
	*($6 + [104]) = [0]
	*($6 + [108]) = [0]
	*($6 + [148]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [10])
	*($8 + [52]) = ($6 + [12])
	*($8 + [56]) = ($6 + [14])
	*($8 + [60]) = ($6 + [16])
	*($8 + [64]) = ($6 + [20])
	*($8 + [68]) = ($6 + [32])
	*($8 + [72]) = ($6 + [48])
	*($8 + [76]) = ($6 + [56])
	*($8 + [80]) = ($6 + [64])
	*($8 + [84]) = ($6 + [96])
	*($8 + [88]) = ($6 + [116])
	*($8 + [92]) = ($6 + [120])
	*($8 + [96]) = ($6 + [136])
	*($8 + [100]) = ($6 + [140])
	*($8 + [104]) = ($6 + [144])
	CALL $103(($8 + [40]), ($8 + [32]))
	*($6 + [156]) = [-1]
	*($6 + [152]) = $1
	*($6 + [160]) = [-1]
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [152])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $104(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *(($4 + [100]))
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [104])) = $7
	CALL $291($7)
	
.LABEL $label$10
	$7 = *(($4 + [68]))
	if ( ($7 == 0) ){ goto $label$11 }
	*(($4 + [72])) = $7
	CALL $291($7)
	
.LABEL $label$11
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $291(*(($4 + [40])))
	
.LABEL $label$12
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$13 }
	CALL $291(*(($4 + [28])))
	
.LABEL $label$13
	CALL $291($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [112])
	return $6
}

void .FUNC $86 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [16])
	*([0] + [4]) = $15
	if ( ((uint_64)((int_64)$1 + (int_64)-10) > (uint_64)(int_64)2) ){ goto $label$6 }
	if ( ((int_64)*([0] + [24]) == (int_64)$2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_64)$1 != (int_64)9) ){ goto $label$4 }
	if ( ((int_64)*([0] + [24]) != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	$14 = *(($0 + [40]))
	$13 = *(($0 + [44]))
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$7 }
	$12 = ($13 + [-24])
	$7 = ([0] - $14)
	
.LOOP $label$8:
	if ( ((int_64)*(*($12)) == (int_64)$5) ){ goto $label$7 }
	$13 = $12
	$8 = ($12 + [-24])
	$12 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$12 = ($0 + [16])
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$3 }
	$14 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [148]) == (int_32)$12), [256])
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_64)*($0) == (int_64)$2) ){ goto $label$9 }
	$5 = (int_64)
	CALL $89($0, $2, $5((int_64)0 - $4)))
	CALL $90($0, $2, ((CASTING uint_32)(uint_64 $1) & [255]), $5, (int_64)0, (int_64)0)
	$2 = *($0)
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)$3) ){ goto $label$1 }
	CALL $89($0, $3, $4)
	CALL $90($0, $3, ((CASTING uint_32)(uint_64 $1) & [255]), $4, (int_64)0, (int_64)0)
	goto $label$1 
	
.LABEL $label$3
	$14 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$14 = CALL $87($12, $8)
	CALL eosio_assert(((int_32)*($14 + [148]) == (int_32)$12), [256])
	
.LABEL $label$2
	$5 = *($14 + [48])
	$10 = *(($0 + [80]))
	$13 = *(($0 + [84]))
	if ( ((int_32)$13 == (int_32)$10) ){ goto $label$10 }
	$12 = ($13 + [-24])
	$7 = ([0] - $10)
	
.LOOP $label$11:
	if ( ((int_64)*(*($12)) == (int_64)$5) ){ goto $label$10 }
	$13 = $12
	$8 = ($12 + [-24])
	$12 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$9 = ($0 + [56])
	if ( ((int_32)$13 == (int_32)$10) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*(*(($13 + [-24])) + [32]) == (int_32)$9), [256])
	goto $label$12 
	
.LABEL $label$13
	$12 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $5)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $88($9, $12) + [32]) == (int_32)$9), [256])
	
.LABEL $label$12
	$2 = (int_64)0
	*($15 + [8]) = (int_64)0
	$5 = (int_64)0
	if ( ((uint_64)*(($14 + [128])) > (uint_64)$4) ){ goto $label$14 }
	$11 = ((int_64)*($14 + [120]) * (int_64)$4)
	$5 = ((uint_64)$11 / (uint_64)(int_64)10000)
	if ( (uint_64)($11 <= (int_64)10000) ){ goto $label$14 }
	$12 = ($14 + [48])
	CALL $89($0, *($12), $5)
	CALL $90($0, *($12), [13], $5, (int_64)0, (int_64)0)
	
.LABEL $label$14
	if ( (int_64)($4 == 0) ){ goto $label$15 }
	$11 = ((int_64)$4 * (int_64)100)
	$2 = ((uint_64)$11 / (uint_64)(int_64)10000)
	*($15 + [8]) = $2
	if ( (uint_64)($11 <= (int_64)10000) ){ goto $label$15 }
	CALL $89($0, *([0] + [16]), $2)
	CALL $90($0, *([0] + [16]), [14], $2, (int_64)0, (int_64)0)
	$14 = *(($0 + [80]))
	$13 = *(($0 + [84]))
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$16 }
	$12 = ($13 + [-24])
	$7 = ([0] - $14)
	
.LOOP $label$17:
	if ( ((int_64)*(*($12)) == (int_64)$6) ){ goto $label$16 }
	$13 = $12
	$8 = ($12 + [-24])
	$12 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$17 }
	
.LABEL $label$16
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$19 }
	$12 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [32]) == (int_32)$9), [256])
	goto $label$18 
	
.LABEL $label$19
	$12 = [0]
	$8 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $6)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$18 }
	$12 = CALL $88($9, $8)
	CALL eosio_assert(((int_32)*($12 + [32]) == (int_32)$9), [256])
	
.LABEL $label$18
	$2 = *($0 + [8])
	*($15) = ($15 + [8])
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [688])
	CALL $91($9, $12, $2, $15)
	$2 = *($15 + [8])
	
.LABEL $label$15
	$2 = (int_64)
	if ( (int_64)($2((int_64))($4 - $5) - $2)) == 0) ){ goto $label$1 }
	CALL $89($0, $3, $2)
	CALL $90($0, $3, ((CASTING uint_32)(uint_64 $1) & [255]), $4, $5, *($15 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($15 + [16])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [96])
	*([0] + [4]) = $21
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($1 + [116]) = [2]
	*(($22 = $21) + [16]) = *($1 + [8])
	$5 = *($1)
	CALL eosio_assert([1], [848])
	*($22 + [24]) = [0]
	*($22) = ($22 + [24])
	$4 = ($1 + [8])
	*($22 + [36]) = $4
	*($22 + [32]) = $1
	$7 = ($1 + [16])
	*($22 + [40]) = $7
	$8 = ($1 + [24])
	*($22 + [44]) = $8
	$9 = ($1 + [32])
	*($22 + [48]) = $9
	$10 = ($1 + [48])
	*($22 + [52]) = $10
	$11 = ($1 + [56])
	*($22 + [56]) = $11
	$12 = ($1 + [64])
	*($22 + [60]) = $12
	$13 = ($1 + [72])
	*($22 + [64]) = $13
	$14 = ($1 + [76])
	*($22 + [68]) = $14
	$15 = ($1 + [88])
	*($22 + [72]) = $15
	$16 = ($1 + [92])
	*($22 + [76]) = $16
	$17 = ($1 + [104])
	*($22 + [80]) = $17
	$6 = ($1 + [116])
	*($22 + [84]) = $6
	$18 = ($1 + [120])
	*($22 + [88]) = $18
	$19 = ($1 + [124])
	*($22 + [92]) = $19
	CALL $108(($22 + [32]), $22)
	$20 = *($22 + [24])
	if ( ($20 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($20)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $20)
	*($22 + [24]) = $22
	*($22 + [36]) = $4
	*($22 + [40]) = $7
	*($22 + [44]) = $8
	*($22 + [48]) = $9
	*($22 + [52]) = $10
	*($22 + [56]) = $11
	*($22 + [32]) = $1
	*($22 + [60]) = $12
	*($22 + [64]) = $13
	*($22 + [68]) = $14
	*($22 + [72]) = $15
	*($22 + [76]) = $16
	*($22 + [80]) = $17
	*($22 + [84]) = $6
	*($22 + [88]) = $18
	*($22 + [92]) = $19
	CALL $109(($22 + [32]), ($22 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $21, $20)
	if ( ($20 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($22 + [32]) = *($4)
	if ( (CALL memcmp(($22 + [16]), ($22 + [32]), [8]) == 0) ){ goto $label$5 }
	$21 = ($1 + [136])
	$1 = *($21)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6228196809676685312, ($22 + [24]), $5)
	*($21) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($22 + [32]))
	
.LABEL $label$5
	*([0] + [4]) = ($22 + [96])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $290($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $296($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $291($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $290(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $296($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $291($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [544])
	$3 = *($0 + [24])
	$6 = ($0 + [28])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$7 = ([0] - $3)
	$5 = ($4 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$1 }
	$4 = $5
	$8 = ($5 + [-24])
	$5 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [608])
	$8 = ($4 + [-24])
	$5 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	$3 = ([0] - $5)
	$5 = $8
	
.LOOP $label$5:
	$8 = ($5 + [24])
	$7 = *($8)
	*($8) = [0]
	$4 = *($5)
	*($5) = $7
	if ( ($4 == 0) ){ goto $label$6 }
	$7 = *($4 + [104])
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [108])) = $7
	CALL $291($7)
	
.LABEL $label$7
	$7 = *($4 + [92])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [96])) = $7
	CALL $291($7)
	
.LABEL $label$8
	$7 = *($4 + [76])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [80])) = $7
	CALL $291($7)
	
.LABEL $label$9
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $291(*(($4 + [40])))
	
.LABEL $label$10
	CALL $291($4)
	
.LABEL $label$6
	*(($5 + [16])) = *(($5 + [40]))
	*(($5 + [8])) = *(($5 + [32]))
	$5 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$7 = *($5 + [104])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($5 + [108])) = $7
	CALL $291($7)
	
.LABEL $label$13
	$7 = *($5 + [92])
	if ( ($7 == 0) ){ goto $label$14 }
	*(($5 + [96])) = $7
	CALL $291($7)
	
.LABEL $label$14
	$7 = *($5 + [76])
	if ( ($7 == 0) ){ goto $label$15 }
	*(($5 + [80])) = $7
	CALL $291($7)
	
.LABEL $label$15
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$16 }
	CALL $291(*(($5 + [40])))
	
.LABEL $label$16
	CALL $291($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [132]))
	$5 = *(($1 + [136]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$18 }
	$5 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6228196809676685312, ($9 + [8]), *($1))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($5)
	
.LABEL $label$17
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $81 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	$10 = *(($0 + [240]))
	$9 = *(($0 + [244]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$3 = ([0] - $10)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$9 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [216])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$5 }
	$10 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [128]) == (int_32)$2), [256])
	if ( *($10 + [116]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$10 = [0]
	$8 = CALL db_find_i64(*(($0 + [216])), *(($0 + [224])), (int_64)-6228196809676685312, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $80($2, $8)
	CALL eosio_assert(((int_32)*($10 + [128]) == (int_32)$2), [256])
	
.LABEL $label$6
	if ( *($10 + [116]) ){ goto $label$3 }
	
.LABEL $label$4
	*($11 + [56]) = [0]
	*($11 + [48]) = (int_64)0
	*($11 + [40]) = [0]
	*($11 + [32]) = (int_64)0
	*($11 + [24]) = [0]
	*($11 + [16]) = (int_64)0
	$8 = *($10 + [16])
	if ( ((int_32)$8 == (int_32)[3]) ){ goto $label$13 }
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$12 }
	if ( $8 ){ goto $label$10 }
	$1 = *($10 + [48])
	$4 = *($10 + [76])
	$9 = *(($10 + [80]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$11 }
	$8 = ($4 + [8])
	$9 = int_32(($9 - $4) >> [5])
	$4 = [0]
	
.LOOP $label$14:
	$1 = (int_64))($1 - *($8))
	$8 = ($8 + [32])
	$4 = ($4 + [1])
	if ( ($4 <= $9) ){ goto $label$14 }
	goto $label$11 
	
.LABEL $label$13
	$1 = *($10 + [48])
	$4 = *($10 + [104])
	$9 = *(($10 + [108]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$11 }
	$8 = ($4 + [8])
	$9 = int_32(($9 - $4) >> [4])
	$4 = [0]
	
.LOOP $label$15:
	$1 = (int_64))($1 - *($8))
	$8 = ($8 + [16])
	$4 = ($4 + [1])
	if ( ($4 <= $9) ){ goto $label$15 }
	goto $label$11 
	
.LABEL $label$12
	$1 = *($10 + [48])
	
.LABEL $label$11
	*($11 + [8]) = $1
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	CALL $83(($11 + [48]), ($10 + [24]))
	$8 = *($11 + [36])
	if ( ((int_32)$8 == (int_32)*((($11 + [32]) + [8]))) ){ goto $label$9 }
	*($8) = *($11 + [8])
	*($11 + [36]) = ($8 + [8])
	goto $label$8 
	
.LABEL $label$10
	*($11 + [8]) = (int_64)0
	goto $label$7 
	
.LABEL $label$9
	CALL $83(($11 + [32]), ($11 + [8]))
	
.LABEL $label$8
	$8 = [255]
	*($11) = [255]
	$4 = *(($10 + [16]))
	if ( ((int_32)$4 == (int_32)[3]) ){ goto $label$19 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$18 }
	if ( $4 ){ goto $label$16 }
	$8 = [4]
	goto $label$17 
	
.LABEL $label$19
	$8 = [6]
	goto $label$17 
	
.LABEL $label$18
	$8 = [5]
	
.LABEL $label$17
	*($11) = $8
	
.LABEL $label$16
	$4 = *($11 + [20])
	if ( ((int_32)$4 == (int_32)*(($11 + [24]))) ){ goto $label$20 }
	*($4) = $8
	*($11 + [20]) = (*($11 + [20]) + [1])
	goto $label$7 
	
.LABEL $label$20
	CALL $84(($11 + [16]), $11)
	
.LABEL $label$7
	if ( ((int_32)*(($10 + [16])) != (int_32)[1]) ){ goto $label$21 }
	*($11) = ((uint_64)((int_64)*($10 + [64]) * (int_64)*($10 + [48])) / (uint_64)(int_64)10000)
	$4 = *($10 + [92])
	$5 = ($10 + [96])
	if ( ((int_32)*($5) == (int_32)$4) ){ goto $label$21 }
	$8 = [0]
	$6 = (($11 + [48]) + [8])
	$7 = ($10 + [92])
	$9 = [0]
	
.LOOP $label$22:
	$3 = ($4 + $8)
	$4 = *($11 + [52])
	if ( ((int_32)$4 == (int_32)*($6)) ){ goto $label$24 }
	*($4) = *($3)
	*($11 + [52]) = ($4 + [8])
	goto $label$23 
	
.LABEL $label$24
	CALL $83(($11 + [48]), $3)
	
.LABEL $label$23
	$4 = *($11 + [36])
	if ( ((int_32)$4 == (int_32)*((($11 + [32]) + [8]))) ){ goto $label$26 }
	*($4) = *($11)
	*($11 + [36]) = ($4 + [8])
	goto $label$25 
	
.LABEL $label$26
	CALL $83(($11 + [32]), $11)
	
.LABEL $label$25
	$4 = *($11 + [20])
	if ( ((int_32)$4 == (int_32)*((($11 + [16]) + [8]))) ){ goto $label$28 }
	*($4) = [8]
	*($11 + [20]) = (*($11 + [20]) + [1])
	goto $label$27 
	
.LABEL $label$28
	CALL $84(($11 + [16]), [672])
	
.LABEL $label$27
	$8 = ($8 + [24])
	$4 = *($7)
	$9 = ($9 + [1])
	if ( ($9 <= ((int_32)(*($5) - $4) / (int_32)[24])) ){ goto $label$22 }
	
.LABEL $label$21
	$9 = *($11 + [48])
	if ( ((int_32)*($11 + [52]) == (int_32)$9) ){ goto $label$29 }
	$8 = [0]
	$4 = [0]
	
.LOOP $label$30:
	CALL $86($0, *((*($11 + [16]) + $4)), *([0] + [24]), *(($9 + $8)), *((*($11 + [32]) + $8)), (int_64)0, (int_64)0)
	$8 = ($8 + [8])
	$9 = *($11 + [48])
	$4 = ($4 + [1])
	if ( ($4 <= int_32((*($11 + [52]) - $9) >> [3])) ){ goto $label$30 }
	
.LABEL $label$29
	$1 = *($0 + [8])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [688])
	CALL $85($2, $10, $1, $11)
	$8 = *($11 + [16])
	if ( ($8 == 0) ){ goto $label$31 }
	*($11 + [20]) = $8
	CALL $291($8)
	
.LABEL $label$31
	$8 = *($11 + [32])
	if ( ($8 == 0) ){ goto $label$32 }
	*($11 + [36]) = $8
	CALL $291($8)
	
.LABEL $label$32
	$8 = *($11 + [48])
	if ( ($8 == 0) ){ goto $label$3 }
	*($11 + [52]) = $8
	CALL $291($8)
	
.LABEL $label$3
	*([0] + [4]) = ($11 + [64])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [352])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $290([144])) + [40]) = [0]
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [76]) = [0]
	*($6 + [80]) = [0]
	*($6 + [84]) = [0]
	*($6 + [92]) = [0]
	*($6 + [96]) = [0]
	*($6 + [100]) = [0]
	*($6 + [104]) = [0]
	*($6 + [108]) = [0]
	*($6 + [112]) = [0]
	*($6 + [128]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [24])
	*($8 + [48]) = ($6 + [32])
	*($8 + [52]) = ($6 + [48])
	*($8 + [56]) = ($6 + [56])
	*($8 + [60]) = ($6 + [64])
	*($8 + [64]) = ($6 + [72])
	*($8 + [68]) = ($6 + [76])
	*($8 + [72]) = ($6 + [88])
	*($8 + [76]) = ($6 + [92])
	*($8 + [80]) = ($6 + [104])
	*($8 + [84]) = ($6 + [116])
	*($8 + [88]) = ($6 + [120])
	*($8 + [92]) = ($6 + [124])
	CALL $115(($8 + [32]), ($8 + [24]))
	*($6 + [136]) = [-1]
	*($6 + [132]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [132])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $116(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [104])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [108])) = $7
	CALL $291($7)
	
.LABEL $label$10
	$7 = *($4 + [92])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($4 + [96])) = $7
	CALL $291($7)
	
.LABEL $label$11
	$7 = *($4 + [76])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($4 + [80])) = $7
	CALL $291($7)
	
.LABEL $label$12
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL $291(*(($4 + [40])))
	
.LABEL $label$13
	CALL $291($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [96])
	return $6
}

void .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	$23 = *($0 + [4])
	*($1) = *(*($23))
	*($1 + [8]) = *(*($23 + [4]))
	$2 = *($0)
	*($1 + [16]) = [1]
	*($1 + [24]) = *(*($23 + [8]))
	$6 = ($1 + [32])
	CALL $293($6, *($23 + [12]))
	*($1 + [48]) = *(*($23 + [16]))
	$18 = *($23 + [20])
	*($1 + [64]) = (int_64)10000
	*($1 + [56]) = *((*($18 + [4]) + [112]))
	*($1 + [88]) = *((*(*($23 + [20]) + [4]) + [113]))
	*($1 + [116]) = [0]
	*($1 + [120]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [124]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [300])
	*(($23 = $22) + [24]) = [0]
	*($23 + [8]) = ($23 + [24])
	$3 = ($1 + [8])
	*($23 + [36]) = $3
	*($23 + [32]) = $1
	$4 = ($1 + [16])
	*($23 + [40]) = $4
	$5 = ($1 + [24])
	*($23 + [44]) = $5
	*($23 + [48]) = $6
	$7 = ($1 + [48])
	*($23 + [52]) = $7
	$8 = ($1 + [56])
	*($23 + [56]) = $8
	$9 = ($1 + [64])
	*($23 + [60]) = $9
	$14 = ($1 + [72])
	*($23 + [64]) = $14
	$15 = ($1 + [76])
	*($23 + [68]) = $15
	$10 = ($1 + [88])
	*($23 + [72]) = $10
	$16 = ($1 + [92])
	*($23 + [76]) = $16
	$17 = ($1 + [104])
	*($23 + [80]) = $17
	$11 = ($1 + [116])
	*($23 + [84]) = $11
	$12 = ($1 + [120])
	*($23 + [88]) = $12
	$13 = ($1 + [124])
	*($23 + [92]) = $13
	CALL $108(($23 + [32]), ($23 + [8]))
	$18 = *($23 + [24])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($18)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($18 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($23 + [12]) = $22
	*($23 + [8]) = $22
	*($23 + [16]) = ($22 + $18)
	*($23 + [24]) = ($23 + [8])
	*($23 + [36]) = $3
	*($23 + [32]) = $1
	*($23 + [40]) = $4
	*($23 + [44]) = $5
	*($23 + [48]) = $6
	*($23 + [52]) = $7
	*($23 + [56]) = $8
	*($23 + [60]) = $9
	*($23 + [64]) = $14
	*($23 + [68]) = $15
	*($23 + [72]) = $10
	*($23 + [76]) = $16
	*($23 + [80]) = $17
	*($23 + [84]) = $11
	*($23 + [88]) = $12
	*($23 + [92]) = $13
	CALL $109(($23 + [32]), ($23 + [24]))
	$19 = *($1)
	*($1 + [132]) = CALL db_store_i64(*($2 + [8]), (int_64)-6228196809676685312, *(*($0 + [8])), $19, $22, $18)
	if ( ($18 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($19 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$19 + (int_64)1) : ((uint_64)$19 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$19 = *(($2 + [8]))
	$20 = *(*(($0 + [8])))
	$21 = *($1)
	*($23 + [32]) = *(($1 + [8]))
	*($1 + [136]) = CALL db_idx64_store($19, (int_64)-6228196809676685312, $20, $21, ($23 + [32]))
	*([0] + [4]) = ($23 + [96])
}

void .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $110(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [240])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($0)
	$5 = ($2 + [192])
	$6 = *($5)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$3 = ($2 + [176])
	$4 = CALL db_lowerbound_i64(*($3), *(($2 + [184])), (int_64)-7631349568579305472, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $78($3, $4)
	*($7 + [12]) = [0]
	*($7 + [8]) = $3
	$6 = *(*(CALL $150(($7 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($2 + [192])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [976])
	*($1) = *($5)
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*($0 + [8]))
	CALL $293(($1 + [24]), *($0 + [12]))
	*($1 + [36]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $145 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	*($9 + [56]) = $1
	*($9 + [48]) = $2
	$4 = *(($0 + [80]))
	$8 = *(($0 + [84]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [56])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $88($6, $8)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1232])
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$5 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $87($6, $8)
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1264])
	CALL $297(($9 + [32]), $3)
	$7 = *($9 + [32])
	CALL eosio_assert(((( *($9 + [36]) ? uint_32($7 >> [1]) : ($7 & [1]) ) + [-2]) <= [89]), [1296])
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL $291(*($9 + [40]))
	
.LABEL $label$9
	$2 = *($0 + [8])
	*($9 + [16]) = $0
	*($9 + [28]) = $3
	*($9 + [20]) = ($9 + [48])
	*($9 + [24]) = ($9 + [56])
	CALL $146(($9 + [8]), ($0 + [176]), $2, ($9 + [16]))
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $144 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $290(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $296($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $291($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $291($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [48])
	$9 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	CALL $148(*($0 + [4]), $1)
	$6 = *($1 + [24])
	$3 = ( *(($1 + [28])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($3 + [28])
	$7 = (CASTING uint_64)(uint_32 $3)
	$3 = ($1 + [24])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($6)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	*($9 + [16]) = $9
	*($9 + [28]) = ($1 + [8])
	*($9 + [24]) = $1
	*($9 + [32]) = ($1 + [16])
	*($9 + [36]) = $3
	*($9 + [40]) = ($1 + [36])
	CALL $149(($9 + [24]), ($9 + [16]))
	$7 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)-7631349568579305472, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$7 = *(($2 + [8]))
	$4 = *(*(($0 + [8])))
	$5 = *($1)
	*($9 + [24]) = *(($1 + [8]))
	*($1 + [48]) = CALL db_idx64_store($7, (int_64)-7631349568579305472, $4, $5, ($9 + [24]))
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $146 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $290([56])) + [32]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [40]) = $1
	CALL $147(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [44])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $126(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$4 }
	CALL $291(*(($3 + [32])))
	
.LABEL $label$4
	CALL $291($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $141 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*(($4 = CALL $290([48])) + [32]) = $1
	*($4) = *([0] + [24])
	*($9 + [48]) = ($9 + [32])
	*($9 + [44]) = $9
	*($9 + [40]) = $9
	*($9 + [56]) = ($9 + [40])
	*($9 + [68]) = ($4 + [8])
	*($9 + [64]) = $4
	*($9 + [72]) = ($4 + [16])
	*($9 + [76]) = ($4 + [24])
	CALL $92(($9 + [64]), ($9 + [56]))
	$5 = *($4)
	*($4 + [36]) = CALL db_store_i64(*($1 + [8]), (int_64)-3020384829779738624, $2, $5, $9, [32])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [64]) = $4
	$5 = *($4)
	*($9) = $5
	$6 = *($4 + [36])
	*($9 + [40]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [64]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $102(($1 + [24]), ($9 + [64]), $9, ($9 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [64])
	*($9 + [64]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $291($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [80])
}

void .FUNC $140 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*(($4 = CALL $290([48])) + [32]) = $1
	*($4) = *([0] + [16])
	*($9 + [48]) = ($9 + [32])
	*($9 + [44]) = $9
	*($9 + [40]) = $9
	*($9 + [56]) = ($9 + [40])
	*($9 + [68]) = ($4 + [8])
	*($9 + [64]) = $4
	*($9 + [72]) = ($4 + [16])
	*($9 + [76]) = ($4 + [24])
	CALL $92(($9 + [64]), ($9 + [56]))
	$5 = *($4)
	*($4 + [36]) = CALL db_store_i64(*($1 + [8]), (int_64)-3020384829779738624, $2, $5, $9, [32])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [64]) = $4
	$5 = *($4)
	*($9) = $5
	$6 = *($4 + [36])
	*($9 + [40]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [64]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $102(($1 + [24]), ($9 + [64]), $9, ($9 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [64])
	*($9 + [64]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $291($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [80])
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [384])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $142 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*(($4 = CALL $290([48])) + [32]) = $1
	*($4) = *([0] + [72])
	*($9 + [48]) = ($9 + [32])
	*($9 + [44]) = $9
	*($9 + [40]) = $9
	*($9 + [56]) = ($9 + [40])
	*($9 + [68]) = ($4 + [8])
	*($9 + [64]) = $4
	*($9 + [72]) = ($4 + [16])
	*($9 + [76]) = ($4 + [24])
	CALL $92(($9 + [64]), ($9 + [56]))
	$5 = *($4)
	*($4 + [36]) = CALL db_store_i64(*($1 + [8]), (int_64)-3020384829779738624, $2, $5, $9, [32])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [64]) = $4
	$5 = *($4)
	*($9) = $5
	$6 = *($4 + [36])
	*($9 + [40]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [64]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $102(($1 + [24]), ($9 + [64]), $9, ($9 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [64])
	*($9 + [64]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $291($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [80])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [400])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $73($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [384])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $290(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $296($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $291($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $72(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [384])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [384])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [384])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [384])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $290(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $296($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [12])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [16])) = $6
	CALL $291($6)
	
.LABEL $label$11
	CALL $291($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $291($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [352])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $290([72])) + [56]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [24])
	*($8 + [48]) = ($6 + [32])
	*($8 + [52]) = ($6 + [40])
	*($8 + [56]) = ($6 + [48])
	CALL $127(($8 + [32]), ($8 + [24]))
	*($6 + [64]) = [-1]
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [60])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $98(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $291($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [544])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [608])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $291($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $291($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
	$7 = *(($1 + [64]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7287555172601954304, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $74 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL $57($5, $0)
	if ( ((uint_32)(*($5 + [24]) + [600]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$1 }
	*(($5 + [24])) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($5 + [28]) = (*($5 + [28]) + [1])
	CALL $75(($0 + [256]), $5, *($0 + [8]))
	$4 = CALL db_lowerbound_i64(*($0 + [136]), *(($0 + [144])), (int_64)7287555172601954304, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$1 = ($0 + [136])
	$4 = CALL $76($1, $4)
	
.LOOP $label$3:
	$3 = *($4 + [48])
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) <= (uint_32)($3 + [86400])) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [-86400])) ){ goto $label$2 }
	$3 = [0]
	$2 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($2, [416])
	CALL eosio_assert($2, [464])
	$2 = CALL db_next_i64(*($4 + [60]), ($5 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$3 = CALL $76($1, $2)
	
.LABEL $label$4
	CALL $77($1, $4)
	$4 = $3
	if ( $3 ){ goto $label$3 }
	
.LABEL $label$2
	$4 = CALL db_lowerbound_i64(*($0 + [176]), *(($0 + [184])), (int_64)-7631349568579305472, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$1 = ($0 + [176])
	$4 = CALL $78($1, $4)
	
.LOOP $label$6:
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) <= (uint_32)(*($4 + [36]) + [600])) ){ goto $label$5 }
	$3 = [0]
	$2 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($2, [416])
	CALL eosio_assert($2, [464])
	$2 = CALL db_next_i64(*($4 + [44]), ($5 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $78($1, $2)
	
.LABEL $label$7
	CALL $79($1, $4)
	$4 = $3
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$5
	$4 = CALL db_lowerbound_i64(*($0 + [216]), *(($0 + [224])), (int_64)-6228196809676685312, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$1 = ($0 + [216])
	$4 = CALL $80($1, $4)
	
.LOOP $label$8:
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) <= (uint_32)(*($4 + [120]) + [600])) ){ goto $label$1 }
	CALL $81($0, *($4))
	$3 = [0]
	$2 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($2, [416])
	CALL eosio_assert($2, [464])
	$2 = CALL db_next_i64(*($4 + [132]), ($5 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$9 }
	$3 = CALL $80($1, $2)
	
.LABEL $label$9
	CALL $82($1, $4)
	$4 = $3
	if ( $3 ){ goto $label$8 }
	
.LABEL $label$1
	$4 = *($5 + [12])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $4
	CALL $291($4)
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)$0), [256])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982863551778521088, (int_64)4982863551778521088)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $68($0, $3)
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)$0), [256])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [688])
	CALL $128($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $129($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [352])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $290([56])) + [32]) = [0]
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [40]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [36])
	CALL $125(($8 + [40]), ($8 + [32]))
	*($6 + [48]) = [-1]
	*($6 + [44]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $126(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL $291(*(($4 + [32])))
	
.LABEL $label$10
	CALL $291($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [544])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [608])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $291(*(($4 + [32])))
	
.LABEL $label$7
	CALL $291($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL $291(*(($4 + [32])))
	
.LABEL $label$10
	CALL $291($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
	$7 = *(($1 + [48]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7631349568579305472, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $241 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	*($5 + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($5 + [64]) = *($1 + [16])
	*($5 + [72]) = *($1 + [8])
	$4 = *($1)
	*($5 + [56]) = $4
	*($1 + [33]) = *(*($3))
	CALL eosio_assert([1], [848])
	*($5 + [48]) = ($5 + [38])
	*($5 + [44]) = $5
	*($5 + [40]) = $5
	*($5 + [88]) = ($5 + [40])
	*($5 + [100]) = ($1 + [8])
	*($5 + [96]) = $1
	*($5 + [104]) = ($1 + [16])
	*($5 + [108]) = ($1 + [24])
	*($5 + [112]) = ($1 + [32])
	*($5 + [116]) = ($1 + [33])
	*($5 + [120]) = ($1 + [36])
	CALL $242(($5 + [96]), ($5 + [88]))
	CALL db_update_i64(*($1 + [44]), $2, $5, [38])
	$3 = ($0 + [36])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [100]) = $1
	*($5 + [96]) = $0
	*($5 + [108]) = $1
	*($5 + [104]) = ($5 + [64])
	*($5 + [112]) = ($5 + [56])
	*($5 + [116]) = ($5 + [80])
	*($5 + [88]) = ($5 + [96])
	CALL $243(($5 + [88]), $3, ($3 + [1]))
	*([0] + [4]) = ($5 + [128])
}

int_32 .FUNC $259 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [44]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1104])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7343588593878171648)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1040])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1040])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $135(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $258 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$9 = (*([0] + [4]) - [64])
	$12 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [112])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [96])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [104])), (int_64)7343588593878171648, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $135($5, $6)
	*($12 + [36]) = [0]
	*($12 + [32]) = $5
	$7 = *(*(CALL $259(($12 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [112])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [976])
	*($1) = *($8)
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [32]) = [0]
	*($1 + [33]) = [1]
	*($1 + [36]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$3 = $9
	$9 = ($3 + [-48])
	*([0] + [4]) = $9
	*($12 + [12]) = $9
	*($12 + [8]) = $9
	*($12 + [16]) = ($3 + [-10])
	*($12 + [24]) = ($12 + [8])
	$3 = ($1 + [8])
	*($12 + [36]) = $3
	*($12 + [32]) = $1
	$4 = ($1 + [16])
	*($12 + [40]) = $4
	*($12 + [44]) = ($1 + [24])
	*($12 + [48]) = ($1 + [32])
	*($12 + [52]) = ($1 + [33])
	*($12 + [56]) = ($1 + [36])
	CALL $242(($12 + [32]), ($12 + [24]))
	$7 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)7343588593878171648, *(*($0 + [8])), $7, $9, [38])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$2 = ($2 + [8])
	$7 = *($2)
	$0 = *(($0 + [8]))
	$10 = *($0)
	$11 = *($1)
	*($12 + [32]) = *($4)
	*($1 + [48]) = CALL db_idx64_store($7, (int_64)7343588593878171648, $10, $11, ($12 + [32]))
	$7 = *($0)
	$10 = *($2)
	$11 = *($1)
	*($12 + [32]) = *($3)
	*(($1 + [52])) = CALL db_idx64_store($10, (int_64)7343588593878171649, $7, $11, ($12 + [32]))
	*([0] + [4]) = ($12 + [64])
}

void .FUNC $223 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [384])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $72(*($1), ($2 + [16]))
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [384])
	CALL memcpy(($2 + [28]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [384])
	CALL memcpy(($2 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $268 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $251 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)7343588134136840193, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [148]) == (int_32)$4), [256])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $87($4, CALL $fimport$6(*($4), *($4 + [8]), (int_64)7343588134136840192, $5))
	CALL eosio_assert(((int_32)*($2 + [148]) == (int_32)$4), [256])
	
.LABEL $label$4
	*(($2 + [160])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $250 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [464])
	$6 = *($0 + [4])
	$7 = *($6 + [48])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)7343588593878171648, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [48]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$2), [256])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $135($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)7343588593878171648, $3))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$2), [256])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [48])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $253 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $290([168])) + [20 align=4]) = (int_64)0
	*($3 + [28 align=4]) = (int_64)0
	*($3 + [36 align=4]) = (int_64)0
	*($3 + [68 align=4]) = (int_64)0
	*($3 + [76]) = [0]
	*($3 + [100]) = [0]
	*($3 + [104]) = [0]
	*($3 + [108]) = [0]
	*($3 + [148]) = $1
	CALL $261(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [152])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $104(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *(($3 + [100]))
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [104])) = $1
	CALL $291($1)
	
.LABEL $label$4
	$1 = *(($3 + [68]))
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [72])) = $1
	CALL $291($1)
	
.LABEL $label$5
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $291(*(($3 + [40])))
	
.LABEL $label$6
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$7 }
	CALL $291(*(($3 + [28])))
	
.LABEL $label$7
	CALL $291($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $252 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$7 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [464])
	$8 = *($0 + [4])
	$6 = *(($8 + [160]))
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$1 }
	$6 = *(*($0))
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)7343588134136840193, ($9 + [8]), *($8))
	*((*(($0 + [4])) + [160])) = $6
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($6, ($9 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$3 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$2), [256])
	goto $label$5 
	
.LABEL $label$6
	$7 = [0]
	$6 = CALL db_find_i64(*($2), *($2 + [8]), (int_64)7343588134136840192, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $87($2, $6)
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$2), [256])
	
.LABEL $label$5
	*(($7 + [160])) = $1
	
.LABEL $label$2
	*(($0 + [4])) = $7
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $255 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $290([56])) + [40]) = $1
	CALL $258(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [44])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $144(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $291($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $254 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $290([56])) + [40]) = $1
	CALL $260(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [44])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $144(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $291($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $257 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $256 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [128])
	*([0] + [4]) = $21
	*(($22 = $21) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($22 + [24]) = *($1 + [48])
	*($22 + [32]) = *($1 + [8])
	*($1 + [12]) = (*($1 + [12]) + [1])
	*($22 + [16]) = *($1)
	CALL eosio_assert([1], [848])
	*($22 + [48]) = [0]
	*($22) = ($22 + [48])
	$5 = ($1 + [8])
	*($22 + [60]) = $5
	*($22 + [56]) = $1
	$7 = ($1 + [10])
	*($22 + [64]) = $7
	$6 = ($1 + [12])
	*($22 + [68]) = $6
	$8 = ($1 + [14])
	*($22 + [72]) = $8
	$9 = ($1 + [16])
	*($22 + [76]) = $9
	$10 = ($1 + [20])
	*($22 + [80]) = $10
	$11 = ($1 + [32])
	*($22 + [84]) = $11
	$4 = ($1 + [48])
	*($22 + [88]) = $4
	$12 = ($1 + [56])
	*($22 + [92]) = $12
	$13 = ($1 + [64])
	*($22 + [96]) = $13
	$14 = ($1 + [96])
	*($22 + [100]) = $14
	$15 = ($1 + [116])
	*($22 + [104]) = $15
	$16 = ($1 + [120])
	*($22 + [108]) = $16
	$17 = ($1 + [136])
	*($22 + [112]) = $17
	$18 = ($1 + [140])
	*($22 + [116]) = $18
	$19 = ($1 + [144])
	*($22 + [120]) = $19
	CALL $179(($22 + [56]), $22)
	$20 = *($22 + [48])
	if ( ($20 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($20)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $20)
	*($22 + [48]) = $22
	*($22 + [60]) = $5
	*($22 + [64]) = $7
	*($22 + [68]) = $6
	*($22 + [72]) = $8
	*($22 + [76]) = $9
	*($22 + [80]) = $10
	*($22 + [56]) = $1
	*($22 + [84]) = $11
	*($22 + [88]) = $4
	*($22 + [92]) = $12
	*($22 + [96]) = $13
	*($22 + [100]) = $14
	*($22 + [104]) = $15
	*($22 + [108]) = $16
	*($22 + [112]) = $17
	*($22 + [116]) = $18
	*($22 + [120]) = $19
	CALL $180(($22 + [56]), ($22 + [48]))
	CALL db_update_i64(*($1 + [152]), *($22 + [40]), $21, $20)
	if ( ($20 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	$21 = ($0 + [36])
	$2 = *($22 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($22 + [60]) = $1
	*($22 + [56]) = $0
	*($22 + [68]) = $1
	*($22 + [64]) = ($22 + [24])
	*($22 + [72]) = ($22 + [16])
	*($22 + [76]) = ($22 + [40])
	*($22 + [48]) = ($22 + [56])
	CALL $257(($22 + [48]), $21, ($21 + [1]))
	*([0] + [4]) = ($22 + [128])
}

void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $290(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $296($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $291($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $291($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [60]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1104])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7287555172601954304)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1040])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1040])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $76(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $239 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [48])
	*([0] + [4]) = $14
	*($14 + [40]) = $2
	*($14 + [39]) = $4
	$13 = *(($0 + [80]))
	$12 = *(($0 + [84]))
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$1 }
	$11 = ($12 + [-24])
	$6 = ([0] - $13)
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$1 }
	$12 = $11
	$7 = ($11 + [-24])
	$11 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [56])
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$4 }
	$11 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$5), [256])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$7 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $88($5, $7)
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$5), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [1232])
	$13 = *(($0 + [40]))
	$12 = *(($0 + [44]))
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$5 }
	$11 = ($12 + [-24])
	$6 = ([0] - $13)
	
.LOOP $label$6:
	if ( ((int_64)*(*($11)) == (int_64)$2) ){ goto $label$5 }
	$12 = $11
	$7 = ($11 + [-24])
	$11 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$8 = ($0 + [16])
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$8 }
	$13 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [148]) == (int_32)$8), [256])
	goto $label$7 
	
.LABEL $label$8
	$13 = [0]
	$11 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$7 }
	$13 = CALL $87($8, $11)
	CALL eosio_assert(((int_32)*($13 + [148]) == (int_32)$8), [256])
	
.LABEL $label$7
	$9 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($9, [1264])
	$10 = *(($0 + [80]))
	$12 = *(($0 + [84]))
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$9 }
	$11 = ($12 + [-24])
	$6 = ([0] - $10)
	
.LOOP $label$10:
	if ( ((int_64)*(*($11)) == (int_64)$3) ){ goto $label$9 }
	$12 = $11
	$7 = ($11 + [-24])
	$11 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$12 }
	$11 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$5), [256])
	goto $label$11 
	
.LABEL $label$12
	$11 = [0]
	$7 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	$11 = CALL $88($5, $7)
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$5), [256])
	
.LABEL $label$11
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [2928])
	CALL eosio_assert(((int_64)*($13 + [48]) == (int_64)$1), [2368])
	CALL eosio_assert(((int_64)*($13 + [48]) != (int_64)$3), [2960])
	CALL eosio_assert(($4 <= [3]), [2992])
	*($14 + [32]) = ($0 + [96])
	CALL $160(($14 + [24]), ($14 + [32]), ($14 + [40]))
	$11 = *($14 + [28])
	if ( ($11 == 0) ){ goto $label$14 }
	
.LOOP $label$15:
	if ( ((int_64)*($11 + [8]) != (int_64)*($14 + [40])) ){ goto $label$14 }
	if ( ((int_64)*($11 + [16]) == (int_64)$3) ){ goto $label$16 }
	CALL $161(($14 + [24]))
	$11 = *($14 + [28])
	if ( ($11 == 0) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	$11 = *($14 + [39])
	CALL eosio_assert(((int_32)*($11 + [33]) != (int_32)$11), [3024])
	*($14 + [23]) = *(*($14 + [28]) + [33])
	*($14 + [22]) = $11
	$3 = *($0 + [8])
	*($14 + [12]) = ($14 + [22])
	*($14 + [8]) = ($14 + [23])
	CALL eosio_assert($9, [688])
	CALL $240($8, $13, $3, ($14 + [8]))
	$11 = *($14 + [28])
	$3 = *($0 + [8])
	*($14 + [8]) = ($14 + [39])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [688])
	CALL $241(*($14 + [32]), $11, $3, ($14 + [8]))
	goto $label$13 
	
.LABEL $label$14
	CALL eosio_assert([0], [1776])
	
.LABEL $label$13
	*([0] + [4]) = ($14 + [48])
}

void .FUNC $238 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [384])
	CALL memcpy(($0 + [24]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)7287555172601954304, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$4), [256])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $76($4, CALL $fimport$6(*($4), *($4 + [8]), (int_64)7287555172601954304, $5))
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$4), [256])
	
.LABEL $label$4
	*(($2 + [64])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $95 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [464])
	$6 = *($0 + [4])
	$7 = *($6 + [64])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)7287555172601954304, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [64]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$2), [256])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $76($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)7287555172601954304, $3))
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$2), [256])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [64])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($0)
	$5 = ($2 + [152])
	$6 = *($5)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$3 = ($2 + [136])
	$4 = CALL db_lowerbound_i64(*($3), *(($2 + [144])), (int_64)7287555172601954304, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $76($3, $4)
	*($7 + [12]) = [0]
	*($7 + [8]) = $3
	$6 = *(*(CALL $99(($7 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($2 + [152])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [976])
	*($1) = *($5)
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*($0 + [8]))
	*($1 + [24]) = *(*($0 + [12]))
	*($1 + [32]) = *(*($0 + [16]))
	*($1 + [40]) = *(*($0 + [20]))
	*($1 + [48]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [240])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $90 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	*($6 + [88]) = $1
	*($6 + [87]) = $2
	*($6 + [72]) = $3
	*($6 + [64]) = $4
	*($6 + [56]) = $5
	$5 = *($0 + [8])
	*($6 + [32]) = $0
	*($6 + [36]) = ($6 + [88])
	*($6 + [40]) = ($6 + [87])
	*($6 + [44]) = ($6 + [72])
	*($6 + [48]) = ($6 + [64])
	*($6 + [52]) = ($6 + [56])
	$0 = ($0 + [136])
	CALL $93(($6 + [24]), $0, $5, ($6 + [32]))
	*($6 + [16]) = $0
	CALL $94(($6 + [24]), ($6 + [16]), ($6 + [88]))
	$0 = *($6 + [28])
	if ( ($0 == 0) ){ goto $label$1 }
	$5 = (int_64)0
	
.LOOP $label$3:
	if ( ((int_64)*($0 + [8]) != (int_64)*($6 + [88])) ){ goto $label$2 }
	$5 = ((int_64)$5 + (int_64)1)
	CALL $95(($6 + [24]))
	$0 = *($6 + [28])
	if ( $0 ){ goto $label$3 }
	
.LABEL $label$2
	if ( (uint_64)($5 <= (int_64)51) ){ goto $label$1 }
	CALL $94(($6 + [8]), ($6 + [16]), ($6 + [88]))
	$5 = *($6 + [8])
	*($6 + [32]) = $5
	$0 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$0) != (int_32)[0]), [416])
	CALL $95(($6 + [32]))
	CALL $77(*($6 + [16]), $0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [848])
	*($5 + [48]) = ($5 + [32])
	*($5 + [44]) = $5
	*($5 + [40]) = $5
	*($5 + [56]) = ($5 + [40])
	*($5 + [68]) = ($1 + [8])
	*($5 + [64]) = $1
	*($5 + [72]) = ($1 + [16])
	*($5 + [76]) = ($1 + [24])
	CALL $92(($5 + [64]), ($5 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*(($4 = CALL $290([72])) + [56]) = $1
	CALL $96($3, $4)
	*($9 + [64]) = ($9 + [45])
	*($9 + [60]) = $9
	*($9 + [56]) = $9
	*($9 + [72]) = ($9 + [56])
	$3 = ($4 + [8])
	*($9 + [84]) = $3
	*($9 + [80]) = $4
	*($9 + [88]) = ($4 + [16])
	*($9 + [92]) = ($4 + [24])
	*($9 + [96]) = ($4 + [32])
	*($9 + [100]) = ($4 + [40])
	*($9 + [104]) = ($4 + [48])
	CALL $97(($9 + [80]), ($9 + [72]))
	$5 = *($4)
	*($4 + [60]) = CALL db_store_i64(*($1 + [8]), (int_64)7287555172601954304, $2, $5, $9, [45])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *(($1 + [8]))
	$7 = *($4)
	*($9 + [80]) = *($3)
	*($4 + [64]) = CALL db_idx64_store($5, (int_64)7287555172601954304, $2, $7, ($9 + [80]))
	*($9 + [80]) = $4
	$2 = *($4)
	*($9) = $2
	$6 = *($4 + [60])
	*($9 + [56]) = $6
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($9 + [80]) = [0]
	*($3) = $4
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $98(($1 + [24]), ($9 + [80]), $9, ($9 + [56]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [80])
	*($9 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $291($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [112])
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [544])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [608])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $291($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $291($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [544])
	$6 = ($0 + [28])
	$5 = *($6)
	CALL eosio_assert(((int_32)$5 != (int_32)*($0 + [24])), [608])
	$4 = ($5 + [-24])
	$6 = *($6)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	$2 = ([0] - $6)
	
.LOOP $label$4:
	$6 = ($4 + [24])
	$3 = *($6)
	*($6) = [0]
	$5 = *($4)
	*($4) = $3
	if ( ($5 == 0) ){ goto $label$5 }
	$3 = *($5 + [12])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($5 + [16])) = $3
	CALL $291($3)
	
.LABEL $label$6
	CALL $291($5)
	
.LABEL $label$5
	*(($4 + [16])) = *(($4 + [40]))
	*(($4 + [8])) = *(($4 + [32]))
	$4 = $6
	if ( ((int_32)($6 + $2) != (int_32)[-24]) ){ goto $label$4 }
	$5 = *(($0 + [28]))
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = $4
	
.LABEL $label$2
	
.LOOP $label$7:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	$3 = *($4 + [12])
	if ( ($3 == 0) ){ goto $label$9 }
	*(($4 + [16])) = $3
	CALL $291($3)
	
.LABEL $label$9
	CALL $291($4)
	
.LABEL $label$8
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$7 }
	
.LABEL $label$1
	*(($0 + [28])) = $6
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $269 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [16])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [48])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588593878171648, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [48]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [52]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588593878171649, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [52])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	$10 = $11
	*([0] + [4]) = $11
	$2 = *($0)
	$8 = *(*($0 + [4]))
	*($1) = *($8)
	*(($1 + [8])) = *(($8 + [8]))
	$3 = ($1 + [12])
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$1 }
	CALL $131($3, *($8 + [12]), *(($8 + [16])))
	
.LABEL $label$1
	*($1 + [24]) = *($8 + [24])
	*(($1 + [32])) = *(($8 + [32]))
	$5 = *($3)
	$6 = *(($1 + [16]))
	$7 = ($6 - $5)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$4 = ($1 + [24])
	$8 = [9]
	
.LOOP $label$2:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	$8 = (($7 & [-8]) + $8)
	
.LABEL $label$3
	$6 = ($8 + [16])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$8 = CALL malloc($6)
	goto $label$4 
	
.LABEL $label$5
	$8 = ($11 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$4
	*($10 + [12]) = $8
	*($10 + [8]) = $8
	*($10 + [16]) = ($8 + $6)
	*($10 + [24]) = ($10 + [8])
	*($10 + [36]) = ($1 + [8])
	*($10 + [32]) = $1
	*($10 + [40]) = $3
	*($10 + [44]) = $4
	*($10 + [48]) = ($1 + [28])
	*($10 + [52]) = ($1 + [32])
	*($10 + [56]) = ($1 + [36])
	CALL $132(($10 + [32]), ($10 + [24]))
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)4982863551778521088, *(*($0 + [8])), (int_64)4982863551778521088, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$6 }
	CALL free($8)
	
.LABEL $label$6
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)4982863551778521088) ){ goto $label$7 }
	*(($2 + [16])) = (int_64)4982863551778521089
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $291($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = [536870911]
	if ( ((uint_32)int_32($8 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [3])
	$5 = CALL $290($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [3])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $296($0)
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $133(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [240])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [240])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [240])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [240])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [240])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [240])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$5 = CALL db_lowerbound_i64(*($0 + [216]), *(($0 + [224])), (int_64)-6228196809676685312, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [216])
	$4 = CALL $80($3, $5)
	
.LOOP $label$2:
	CALL eosio_assert([1], [416])
	CALL eosio_assert([1], [464])
	$5 = [0]
	$2 = CALL db_next_i64(*($4 + [132]), ($6 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $80($3, $2)
	
.LABEL $label$3
	CALL $82($3, $4)
	$4 = $5
	if ( $5 ){ goto $label$2 }
	
.LABEL $label$1
	$5 = CALL db_lowerbound_i64(*($0 + [176]), *(($0 + [184])), (int_64)-7631349568579305472, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + [176])
	$4 = CALL $78($3, $5)
	
.LOOP $label$5:
	CALL eosio_assert([1], [416])
	CALL eosio_assert([1], [464])
	$5 = [0]
	$2 = CALL db_next_i64(*($4 + [44]), ($6 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $78($3, $2)
	
.LABEL $label$6
	CALL $79($3, $4)
	$4 = $5
	if ( $5 ){ goto $label$5 }
	
.LABEL $label$4
	$5 = CALL db_lowerbound_i64(*($0 + [136]), *(($0 + [144])), (int_64)7287555172601954304, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$3 = ($0 + [136])
	$4 = CALL $76($3, $5)
	
.LOOP $label$8:
	CALL eosio_assert([1], [416])
	CALL eosio_assert([1], [464])
	$5 = [0]
	$2 = CALL db_next_i64(*($4 + [60]), ($6 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$9 }
	$5 = CALL $76($3, $2)
	
.LABEL $label$9
	CALL $77($3, $4)
	$4 = $5
	if ( $5 ){ goto $label$8 }
	
.LABEL $label$7
	$5 = CALL db_lowerbound_i64(*($0 + [96]), *(($0 + [104])), (int_64)7343588593878171648, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$3 = ($0 + [96])
	$4 = CALL $135($3, $5)
	
.LOOP $label$11:
	CALL eosio_assert([1], [416])
	CALL eosio_assert([1], [464])
	$5 = [0]
	$2 = CALL db_next_i64(*($4 + [44]), ($6 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$12 }
	$5 = CALL $135($3, $2)
	
.LABEL $label$12
	CALL $136($3, $4)
	$4 = $5
	if ( $5 ){ goto $label$11 }
	
.LABEL $label$10
	$5 = CALL db_lowerbound_i64(*($0 + [16]), *(($0 + [24])), (int_64)7343588134136840192, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$13 }
	$3 = ($0 + [16])
	$4 = CALL $87($3, $5)
	
.LOOP $label$14:
	CALL eosio_assert([1], [416])
	CALL eosio_assert([1], [464])
	$5 = [0]
	$2 = CALL db_next_i64(*($4 + [152]), ($6 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$15 }
	$5 = CALL $87($3, $2)
	
.LABEL $label$15
	CALL $137($3, $4)
	$4 = $5
	if ( $5 ){ goto $label$14 }
	
.LABEL $label$13
	$3 = ($0 + [56])
	$5 = CALL db_lowerbound_i64(*($0 + [56]), *(($0 + [64])), (int_64)-3020384829779738624, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$16 }
	$4 = CALL $88($3, $5)
	
.LOOP $label$17:
	CALL eosio_assert([1], [416])
	CALL eosio_assert([1], [464])
	$5 = [0]
	$2 = CALL db_next_i64(*($4 + [36]), ($6 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$18 }
	$5 = CALL $88($3, $2)
	
.LABEL $label$18
	CALL $138($3, $4)
	$4 = $5
	if ( $5 ){ goto $label$17 }
	
.LABEL $label$16
	$5 = ($0 + [256])
	$4 = *(($0 + [284]))
	if ( ((int_32)$4 == (int_32)*(($0 + [280]))) ){ goto $label$21 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$5), [256])
	if ( $4 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$4 = CALL db_find_i64(*($5), *(($0 + [264])), (int_64)4982863551778521088, (int_64)4982863551778521088)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$19 }
	$4 = CALL $68($5, $4)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$5), [256])
	
.LABEL $label$20
	CALL eosio_assert([1], [416])
	CALL eosio_assert([1], [464])
	$2 = CALL db_next_i64(*($4 + [44]), ($6 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$22 }
	CALL $68($5, $2)
	
.LABEL $label$22
	CALL $139($5, $4)
	
.LABEL $label$19
	if ( ((int_32)$1 != (int_32)[1]) ){ goto $label$23 }
	CALL $140(($6 + [8]), $3, *($0 + [8]), $6)
	CALL $141(($6 + [8]), $3, *($0 + [8]), $6)
	CALL $142(($6 + [8]), $3, *($0 + [8]), $6)
	
.LABEL $label$23
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [352])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $290([56])) + [40]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [24])
	*($8 + [48]) = ($6 + [32])
	*($8 + [52]) = ($6 + [33])
	*($8 + [56]) = ($6 + [36])
	CALL $143(($8 + [32]), ($8 + [24]))
	*($6 + [48]) = [-1]
	*($6 + [44]) = $1
	*($6 + [52]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [44])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $144(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $291($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [544])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [608])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $291($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $291($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
	$7 = *(($1 + [48]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7343588593878171648, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	$7 = *(($1 + [52]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7343588593878171649, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [544])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$7 = ($4 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$1 }
	$4 = $7
	$8 = ($7 + [-24])
	$7 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [608])
	$8 = ($4 + [-24])
	$7 = *($5)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$4 }
	$3 = ([0] - $7)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *(($4 + [100]))
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [104])) = $6
	CALL $291($6)
	
.LABEL $label$7
	$6 = *(($4 + [68]))
	if ( ($6 == 0) ){ goto $label$8 }
	*(($4 + [72])) = $6
	CALL $291($6)
	
.LABEL $label$8
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL $291(*(($4 + [40])))
	
.LABEL $label$9
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL $291(*(($4 + [28])))
	
.LABEL $label$10
	CALL $291($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	$6 = *(($7 + [100]))
	if ( ($6 == 0) ){ goto $label$13 }
	*(($7 + [104])) = $6
	CALL $291($6)
	
.LABEL $label$13
	$6 = *(($7 + [68]))
	if ( ($6 == 0) ){ goto $label$14 }
	*(($7 + [72])) = $6
	CALL $291($6)
	
.LABEL $label$14
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$15 }
	CALL $291(*(($7 + [40])))
	
.LABEL $label$15
	if ( ((*($7 + [20]) & [1]) == 0) ){ goto $label$16 }
	CALL $291(*(($7 + [28])))
	
.LABEL $label$16
	CALL $291($7)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [152]))
	$7 = *($1 + [156])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$18 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7343588134136840192, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($7)
	
.LABEL $label$17
	$7 = *(($1 + [160]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$20 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7343588134136840193, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL db_idx64_remove($7)
	
.LABEL $label$19
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $260 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$9 = (*([0] + [4]) - [64])
	$12 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [112])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [96])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [104])), (int_64)7343588593878171648, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $135($5, $6)
	*($12 + [36]) = [0]
	*($12 + [32]) = $5
	$7 = *(*(CALL $259(($12 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [112])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [976])
	*($1) = *($8)
	$4 = *($3 + [4])
	*($1 + [32]) = [1]
	*($1 + [8]) = *($4)
	*($1 + [16]) = *([0] + [72])
	*($1 + [33]) = [1]
	*($1 + [36]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$4 = $9
	$9 = ($4 + [-48])
	*([0] + [4]) = $9
	*($12 + [12]) = $9
	*($12 + [8]) = $9
	*($12 + [16]) = ($4 + [-10])
	*($12 + [24]) = ($12 + [8])
	$4 = ($1 + [8])
	*($12 + [36]) = $4
	*($12 + [32]) = $1
	$3 = ($1 + [16])
	*($12 + [40]) = $3
	*($12 + [44]) = ($1 + [24])
	*($12 + [48]) = ($1 + [32])
	*($12 + [52]) = ($1 + [33])
	*($12 + [56]) = ($1 + [36])
	CALL $242(($12 + [32]), ($12 + [24]))
	$7 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)7343588593878171648, *(*($0 + [8])), $7, $9, [38])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$2 = ($2 + [8])
	$7 = *($2)
	$0 = *(($0 + [8]))
	$10 = *($0)
	$11 = *($1)
	*($12 + [32]) = *($3)
	*($1 + [48]) = CALL db_idx64_store($7, (int_64)7343588593878171648, $10, $11, ($12 + [32]))
	$7 = *($0)
	$10 = *($2)
	$11 = *($1)
	*($12 + [32]) = *($4)
	*(($1 + [52])) = CALL db_idx64_store($10, (int_64)7343588593878171649, $7, $11, ($12 + [32]))
	*([0] + [4]) = ($12 + [64])
}

void .FUNC $261 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_32 $23
	int_32 $24
	$23 = (*([0] + [4]) - [96])
	*([0] + [4]) = $23
	$24 = *(*($0 + [4]))
	*($1 + [8]) = [1]
	*($1 + [12]) = [1]
	*($1 + [16]) = [200]
	*($1) = *($24)
	$2 = *($0)
	*($1 + [48]) = *([0] + [72])
	*($1 + [56]) = [0]
	*($1 + [64]) = [1]
	CALL $262(($1 + [68]), [3160], [3184])
	*(($1 + [88])) = (int_64)20000
	*(($1 + [80])) = [5]
	*($1 + [96]) = [1]
	CALL $262(($1 + [100]), [3184], [3208])
	*($1 + [116]) = [1]
	*(($1 + [112])) = [5]
	*($1 + [120]) = (int_64)0
	*(($1 + [128])) = (int_64)0
	*($1 + [136]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*(($24 = $23) + [16]) = [0]
	*($24) = ($24 + [16])
	$3 = ($1 + [8])
	*($24 + [28]) = $3
	*($24 + [24]) = $1
	$12 = ($1 + [10])
	*($24 + [32]) = $12
	$4 = ($1 + [12])
	*($24 + [36]) = $4
	$13 = ($1 + [14])
	*($24 + [40]) = $13
	$5 = ($1 + [16])
	*($24 + [44]) = $5
	$14 = ($1 + [20])
	*($24 + [48]) = $14
	$15 = ($1 + [32])
	*($24 + [52]) = $15
	$6 = ($1 + [48])
	*($24 + [56]) = $6
	$7 = ($1 + [56])
	*($24 + [60]) = $7
	$8 = ($1 + [64])
	*($24 + [64]) = $8
	$9 = ($1 + [96])
	*($24 + [68]) = $9
	$10 = ($1 + [116])
	*($24 + [72]) = $10
	$16 = ($1 + [120])
	*($24 + [76]) = $16
	$11 = ($1 + [136])
	*($24 + [80]) = $11
	$17 = ($1 + [140])
	*($24 + [84]) = $17
	$18 = ($1 + [144])
	*($24 + [88]) = $18
	CALL $179(($24 + [24]), $24)
	$19 = *($24 + [16])
	if ( ($19 <= [513]) ){ goto $label$2 }
	$23 = CALL malloc($19)
	goto $label$1 
	
.LABEL $label$2
	$23 = ($23 - (($19 + [15]) & [-16]))
	*([0] + [4]) = $23
	
.LABEL $label$1
	*($24 + [4]) = $23
	*($24) = $23
	*($24 + [8]) = ($23 + $19)
	*($24 + [16]) = $24
	*($24 + [28]) = $3
	*($24 + [24]) = $1
	*($24 + [32]) = $12
	*($24 + [36]) = $4
	*($24 + [40]) = $13
	*($24 + [44]) = $5
	*($24 + [48]) = $14
	*($24 + [52]) = $15
	*($24 + [56]) = $6
	*($24 + [60]) = $7
	*($24 + [64]) = $8
	*($24 + [68]) = $9
	*($24 + [72]) = $10
	*($24 + [76]) = $16
	*($24 + [80]) = $11
	*($24 + [84]) = $17
	*($24 + [88]) = $18
	CALL $180(($24 + [24]), ($24 + [16]))
	$20 = *($1)
	*($1 + [152]) = CALL db_store_i64(*($2 + [8]), (int_64)7343588134136840192, *(*($0 + [8])), $20, $23, $19)
	if ( ($19 <= [513]) ){ goto $label$3 }
	CALL free($23)
	
.LABEL $label$3
	if ( (uint_64)($20 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$20 + (int_64)1) : ((uint_64)$20 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$23 = ($2 + [8])
	$20 = *($23)
	$0 = *(($0 + [8]))
	$21 = *($0)
	$22 = *($1)
	*($24 + [24]) = *(($1 + [48]))
	*($1 + [156]) = CALL db_idx64_store($20, (int_64)7343588134136840192, $21, $22, ($24 + [24]))
	$20 = *($0)
	$21 = *($23)
	$22 = *($1)
	*($24 + [24]) = *(($1 + [8]))
	*(($1 + [160])) = CALL db_idx64_store($21, (int_64)7343588134136840193, $20, $22, ($24 + [24]))
	*([0] + [4]) = ($24 + [96])
}

void .FUNC $213 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $262 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = *($0)
	$9 = *($0 + [8])
	$3 = int_32(($2 - $1) >> [3])
	if ( ((uint_32)$3 <= (uint_32)int_32(($9 - $4) >> [3])) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL $291($4)
	$9 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$4 = [536870911]
	if ( ((uint_32)int_32($9 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$4 = $3
	$9 = int_32($9 >> [2])
	if ( ($9 <= $3) ){ goto $label$6 }
	$4 = $9
	if ( ((uint_32)$9 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$9 = ($4 << [3])
	$4 = CALL $290($9)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $9)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$3 }
	$3 = (($2 + [-8]) - $1)
	$9 = $4
	
.LOOP $label$7:
	*($9) = *($1)
	$9 = ($9 + [8])
	$1 = ($1 + [8])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$7 }
	*(($0 + [4])) = (($4 + ($3 & [-8])) + [8])
	return 
	
.LABEL $label$4
	$8 = int_32($8 >> [3])
	$8 = (*($0 + [4]) - $4)
	$9 = ($1 + $8)
	$5 = ( $9 ? $2 : ((uint_32)$3 > (uint_32)$8) )
	$6 = ($5 - $1)
	$7 = int_32($6 >> [3])
	if ( ($7 == 0) ){ goto $label$8 }
	CALL memmove($4, $1, $6)
	
.LABEL $label$8
	if ( ((uint_32)$3 <= (uint_32)$8) ){ goto $label$2 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$3 }
	$4 = (($2 + [-8]) - $5)
	$3 = *(($0 + [4]))
	$1 = $3
	
.LOOP $label$9:
	*($1) = *($9)
	$1 = ($1 + [8])
	$9 = ($9 + [8])
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$9 }
	*(($0 + [4])) = (($3 + ($4 & [-8])) + [8])
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($4 + ($7 << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $296($0)
}

void .FUNC $283 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = CALL db_lowerbound_i64(*($0 + [136]), *(($0 + [144])), (int_64)7287555172601954304, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$2 = ($0 + [136])
	$4 = CALL $76($2, $4)
	
.LOOP $label$2:
	CALL eosio_assert([1], [416])
	CALL eosio_assert([1], [464])
	$0 = [0]
	$3 = CALL db_next_i64(*($4 + [60]), ($5 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $76($2, $3)
	
.LABEL $label$3
	CALL $77($2, $4)
	$4 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $263 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [88]) = $1
	*($9 + [80]) = $2
	*($9 + [72]) = $3
	$4 = *(($0 + [80]))
	$8 = *(($0 + [84]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [56])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $88($6, $8)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1232])
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$5 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	$6 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [148]) == (int_32)$5), [256])
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $87($5, $7)
	CALL eosio_assert(((int_32)*($6 + [148]) == (int_32)$5), [256])
	
.LABEL $label$7
	$4 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($4, [1264])
	CALL eosio_assert(((int_64)*($6 + [48]) != (int_64)$1), [3056])
	CALL eosio_assert((*($6 + [12]) <= *($6 + [16])), [3216])
	$8 = ($0 + [96])
	*($9 + [64]) = $8
	CALL $249(($9 + [56]), ($9 + [64]), ($9 + [88]))
	$7 = *($9 + [60])
	if ( ($7 == 0) ){ goto $label$10 }
	$1 = (int_64)0
	
.LOOP $label$11:
	if ( ((int_64)*($7 + [16]) != (int_64)*($9 + [88])) ){ goto $label$9 }
	$1 = ((int_64)(CASTING uint_64)(uint_32 ((int_32)*($7 + [33]) == (int_32)[1])) + (int_64)$1)
	CALL $250(($9 + [56]))
	$7 = *($9 + [60])
	if ( $7 ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$1 = (int_64)0
	
.LABEL $label$9
	CALL eosio_assert((uint_64)($1 <= (int_64)5000), [3248])
	*($9 + [48]) = $8
	CALL $160(($9 + [40]), ($9 + [48]), ($9 + [80]))
	$7 = *($9 + [44])
	if ( ($7 == 0) ){ goto $label$15 }
	
.LOOP $label$16:
	if ( ((int_64)*($7 + [8]) != (int_64)*($9 + [80])) ){ goto $label$15 }
	if ( ((int_64)*($7 + [16]) == (int_64)*($9 + [88])) ){ goto $label$17 }
	CALL $161(($9 + [40]))
	$7 = *($9 + [44])
	if ( ($7 == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	$7 = *($7 + [33])
	if ( ((int_32)$7 == (int_32)[2]) ){ goto $label$14 }
	if ( ((int_32)$7 == (int_32)[1]) ){ goto $label$13 }
	if ( $7 ){ goto $label$12 }
	CALL eosio_assert([0], [3280])
	goto $label$12 
	
.LABEL $label$15
	*($9 + [39]) = ((int_32)*($6 + [56]) == (int_32)[1])
	$1 = *($0 + [8])
	*($9 + [16]) = $0
	*($9 + [20]) = ($9 + [80])
	*($9 + [24]) = ($9 + [88])
	*($9 + [28]) = ($9 + [72])
	*($9 + [32]) = ($9 + [39])
	CALL $264(($9 + [8]), $8, $1, ($9 + [16]))
	$1 = *($0 + [8])
	*($9 + [16]) = ($9 + [39])
	CALL eosio_assert($4, [688])
	CALL $265($5, $6, $1, ($9 + [16]))
	goto $label$12 
	
.LABEL $label$14
	$1 = *($0 + [8])
	$7 = *($9 + [44])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [688])
	CALL $266(*($9 + [48]), $7, $1, ($9 + [16]))
	$1 = *($0 + [8])
	CALL eosio_assert($4, [688])
	CALL $267($5, $6, $1, ($9 + [16]))
	goto $label$12 
	
.LABEL $label$13
	CALL eosio_assert([0], [3312])
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $265 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$20 = (*([0] + [4]) - [128])
	*([0] + [4]) = $20
	*(($21 = $20) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($21 + [24]) = *($1 + [48])
	*($21 + [32]) = *($1 + [8])
	*($21 + [16]) = *($1)
	$5 = ($1 + [8])
	$4 = ($1 + [48])
	if ( (*(*($3)) == 0) ){ goto $label$2 }
	*($1 + [10]) = (*($1 + [10]) + [1])
	$18 = ($1 + [12])
	$19 = ($1 + [10])
	goto $label$1 
	
.LABEL $label$2
	*($1 + [12]) = (*($1 + [12]) + [1])
	$19 = ($1 + [10])
	$18 = ($1 + [12])
	
.LABEL $label$1
	CALL eosio_assert([1], [848])
	*($21 + [48]) = [0]
	*($21) = ($21 + [48])
	*($21 + [60]) = $5
	*($21 + [64]) = $19
	*($21 + [68]) = $18
	*($21 + [56]) = $1
	$6 = ($1 + [14])
	*($21 + [72]) = $6
	$7 = ($1 + [16])
	*($21 + [76]) = $7
	$8 = ($1 + [20])
	*($21 + [80]) = $8
	$9 = ($1 + [32])
	*($21 + [84]) = $9
	*($21 + [88]) = $4
	$10 = ($1 + [56])
	*($21 + [92]) = $10
	$11 = ($1 + [64])
	*($21 + [96]) = $11
	$12 = ($1 + [96])
	*($21 + [100]) = $12
	$13 = ($1 + [116])
	*($21 + [104]) = $13
	$14 = ($1 + [120])
	*($21 + [108]) = $14
	$15 = ($1 + [136])
	*($21 + [112]) = $15
	$16 = ($1 + [140])
	*($21 + [116]) = $16
	$17 = ($1 + [144])
	*($21 + [120]) = $17
	CALL $179(($21 + [56]), $21)
	$3 = *($21 + [48])
	if ( ($3 <= [513]) ){ goto $label$4 }
	$20 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$20 = ($20 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $20
	
.LABEL $label$3
	*($21 + [4]) = $20
	*($21) = $20
	*($21 + [8]) = ($20 + $3)
	*($21 + [48]) = $21
	*($21 + [60]) = $5
	*($21 + [64]) = $19
	*($21 + [68]) = $18
	*($21 + [72]) = $6
	*($21 + [76]) = $7
	*($21 + [80]) = $8
	*($21 + [56]) = $1
	*($21 + [84]) = $9
	*($21 + [88]) = $4
	*($21 + [92]) = $10
	*($21 + [96]) = $11
	*($21 + [100]) = $12
	*($21 + [104]) = $13
	*($21 + [108]) = $14
	*($21 + [112]) = $15
	*($21 + [116]) = $16
	*($21 + [120]) = $17
	CALL $180(($21 + [56]), ($21 + [48]))
	CALL db_update_i64(*($1 + [152]), *($21 + [40]), $20, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($20)
	
.LABEL $label$5
	$20 = ($0 + [36])
	$2 = *($21 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($21 + [60]) = $1
	*($21 + [56]) = $0
	*($21 + [68]) = $1
	*($21 + [64]) = ($21 + [24])
	*($21 + [72]) = ($21 + [16])
	*($21 + [76]) = ($21 + [40])
	*($21 + [48]) = ($21 + [56])
	CALL $270(($21 + [48]), $20, ($20 + [1]))
	*([0] + [4]) = ($21 + [128])
}

void .FUNC $208 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32((*($0 + [4]) - *($0)) >> [3]) + [-1]) <= [5]), [2496])
	$5 = *($0)
	$3 = *($0 + [4])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$1 }
	$4 = [0]
	$2 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$2:
	CALL eosio_assert(((uint_64)*(($5 + $4)) > (uint_64)(int_64)99), [2560])
	$4 = ($4 + [8])
	$5 = *($0)
	$3 = *($2)
	$6 = ($6 + [1])
	if ( ($6 <= int_32(($3 - $5) >> [3])) ){ goto $label$2 }
	
.LABEL $label$1
	*($7 + [12]) = $5
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$5 }
	$5 = ($7 + [12])
	$6 = ($7 + [8])
	
.LOOP $label$6:
	*($6) = *($5)
	$4 = (*($7 + [8]) + [8])
	*($7 + [8]) = $4
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	$6 = ($7 + [12])
	$5 = ($7 + [8])
	$0 = *($7 + [12])
	if ( ((int_64)*($0) != (int_64)*($4)) ){ goto $label$6 }
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$3 }
	$4 = ($0 + [8])
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	goto $label$3 
	
.LABEL $label$4
	
.LOOP $label$8:
	$4 = ($4 + [8])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$1 = *($4)
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$8 }
	*($0 + [8]) = $1
	$0 = ($0 + [8])
	goto $label$8 
	
.LABEL $label$7
	$0 = ($0 + [8])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$0 == (int_32)$3), [2528])
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $209 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$20 = (*([0] + [4]) - [128])
	*([0] + [4]) = $20
	*(($21 = $20) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($21 + [24]) = *($1 + [48])
	*($21 + [32]) = *($1 + [8])
	*($21 + [16]) = *($1)
	*($1 + [96]) = *(*($3))
	CALL eosio_assert([1], [848])
	*($21 + [48]) = [0]
	*($21) = ($21 + [48])
	$5 = ($1 + [8])
	*($21 + [60]) = $5
	*($21 + [56]) = $1
	$7 = ($1 + [10])
	*($21 + [64]) = $7
	$8 = ($1 + [12])
	*($21 + [68]) = $8
	$9 = ($1 + [14])
	*($21 + [72]) = $9
	$10 = ($1 + [16])
	*($21 + [76]) = $10
	$11 = ($1 + [20])
	*($21 + [80]) = $11
	$12 = ($1 + [32])
	*($21 + [84]) = $12
	$4 = ($1 + [48])
	*($21 + [88]) = $4
	$13 = ($1 + [56])
	*($21 + [92]) = $13
	$14 = ($1 + [64])
	*($21 + [96]) = $14
	$6 = ($1 + [96])
	*($21 + [100]) = $6
	$15 = ($1 + [116])
	*($21 + [104]) = $15
	$16 = ($1 + [120])
	*($21 + [108]) = $16
	$17 = ($1 + [136])
	*($21 + [112]) = $17
	$18 = ($1 + [140])
	*($21 + [116]) = $18
	$19 = ($1 + [144])
	*($21 + [120]) = $19
	CALL $179(($21 + [56]), $21)
	$3 = *($21 + [48])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$20 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$20 = ($20 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $20
	
.LABEL $label$1
	*($21 + [4]) = $20
	*($21) = $20
	*($21 + [8]) = ($20 + $3)
	*($21 + [48]) = $21
	*($21 + [60]) = $5
	*($21 + [64]) = $7
	*($21 + [68]) = $8
	*($21 + [72]) = $9
	*($21 + [76]) = $10
	*($21 + [80]) = $11
	*($21 + [56]) = $1
	*($21 + [84]) = $12
	*($21 + [88]) = $4
	*($21 + [92]) = $13
	*($21 + [96]) = $14
	*($21 + [100]) = $6
	*($21 + [104]) = $15
	*($21 + [108]) = $16
	*($21 + [112]) = $17
	*($21 + [116]) = $18
	*($21 + [120]) = $19
	CALL $180(($21 + [56]), ($21 + [48]))
	CALL db_update_i64(*($1 + [152]), *($21 + [40]), $20, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($20)
	
.LABEL $label$3
	$20 = ($0 + [36])
	$2 = *($21 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($21 + [60]) = $1
	*($21 + [56]) = $0
	*($21 + [68]) = $1
	*($21 + [64]) = ($21 + [24])
	*($21 + [72]) = ($21 + [16])
	*($21 + [76]) = ($21 + [40])
	*($21 + [48]) = ($21 + [56])
	CALL $210(($21 + [48]), $20, ($20 + [1]))
	*([0] + [4]) = ($21 + [128])
}

void .FUNC $202 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$20 = (*([0] + [4]) - [128])
	*([0] + [4]) = $20
	*(($21 = $20) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($21 + [24]) = *($1 + [48])
	*($21 + [32]) = *($1 + [8])
	*($21 + [16]) = *($1)
	*($1 + [56]) = *(*($3))
	CALL eosio_assert([1], [848])
	*($21 + [48]) = [0]
	*($21) = ($21 + [48])
	$5 = ($1 + [8])
	*($21 + [60]) = $5
	*($21 + [56]) = $1
	$7 = ($1 + [10])
	*($21 + [64]) = $7
	$8 = ($1 + [12])
	*($21 + [68]) = $8
	$9 = ($1 + [14])
	*($21 + [72]) = $9
	$10 = ($1 + [16])
	*($21 + [76]) = $10
	$11 = ($1 + [20])
	*($21 + [80]) = $11
	$12 = ($1 + [32])
	*($21 + [84]) = $12
	$4 = ($1 + [48])
	*($21 + [88]) = $4
	$6 = ($1 + [56])
	*($21 + [92]) = $6
	$13 = ($1 + [64])
	*($21 + [96]) = $13
	$14 = ($1 + [96])
	*($21 + [100]) = $14
	$15 = ($1 + [116])
	*($21 + [104]) = $15
	$16 = ($1 + [120])
	*($21 + [108]) = $16
	$17 = ($1 + [136])
	*($21 + [112]) = $17
	$18 = ($1 + [140])
	*($21 + [116]) = $18
	$19 = ($1 + [144])
	*($21 + [120]) = $19
	CALL $179(($21 + [56]), $21)
	$3 = *($21 + [48])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$20 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$20 = ($20 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $20
	
.LABEL $label$1
	*($21 + [4]) = $20
	*($21) = $20
	*($21 + [8]) = ($20 + $3)
	*($21 + [48]) = $21
	*($21 + [60]) = $5
	*($21 + [64]) = $7
	*($21 + [68]) = $8
	*($21 + [72]) = $9
	*($21 + [76]) = $10
	*($21 + [80]) = $11
	*($21 + [56]) = $1
	*($21 + [84]) = $12
	*($21 + [88]) = $4
	*($21 + [92]) = $6
	*($21 + [96]) = $13
	*($21 + [100]) = $14
	*($21 + [104]) = $15
	*($21 + [108]) = $16
	*($21 + [112]) = $17
	*($21 + [116]) = $18
	*($21 + [120]) = $19
	CALL $180(($21 + [56]), ($21 + [48]))
	CALL db_update_i64(*($1 + [152]), *($21 + [40]), $20, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($20)
	
.LABEL $label$3
	$20 = ($0 + [36])
	$2 = *($21 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($21 + [60]) = $1
	*($21 + [56]) = $0
	*($21 + [68]) = $1
	*($21 + [64]) = ($21 + [24])
	*($21 + [72]) = ($21 + [16])
	*($21 + [76]) = ($21 + [40])
	*($21 + [48]) = ($21 + [56])
	CALL $203(($21 + [48]), $20, ($20 + [1]))
	*([0] + [4]) = ($21 + [128])
}

void .FUNC $203 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $200 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $201 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($9 + [15]) = $3
	$4 = *(($0 + [80]))
	$8 = *(($0 + [84]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [56])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $88($6, $8)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1232])
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$5 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $87($6, $8)
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	
.LABEL $label$7
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [1264])
	CALL eosio_assert(((int_64)*($7 + [48]) == (int_64)$1), [2368])
	CALL eosio_assert(((int_32)($3 | [1]) == (int_32)[1]), [2400])
	$1 = *($0 + [8])
	*($9 + [8]) = ($9 + [15])
	CALL eosio_assert($8, [688])
	CALL $202($6, $7, $1, ($9 + [8]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $206 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $207 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($9 + [31]) = $3
	$4 = *(($0 + [80]))
	$8 = *(($0 + [84]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [56])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $88($6, $8)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1232])
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$5 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $87($6, $8)
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	
.LABEL $label$7
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [1264])
	CALL eosio_assert(((int_64)*($7 + [48]) == (int_64)$1), [2368])
	CALL eosio_assert(((int_32)($3 | [1]) == (int_32)[1]), [2400])
	if ( ($3 == 0) ){ goto $label$10 }
	*($9 + [24]) = [0]
	*($9 + [16]) = (int_64)0
	$5 = (*(($7 + [104])) - *(($7 + [100])))
	$3 = int_32($5 >> [3])
	if ( ($3 == 0) ){ goto $label$11 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$9 }
	$5 = CALL $290($5)
	*(($9 + [24])) = ($5 + ($3 << [3]))
	*($9 + [16]) = $5
	*($9 + [20]) = $5
	$4 = *(($7 + [100]))
	$3 = (*(($7 + [104])) - $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($5, $4, $3)
	*($9 + [20]) = ($5 + $3)
	
.LABEL $label$11
	CALL $208(($9 + [16]))
	$5 = *($9 + [16])
	if ( ($5 == 0) ){ goto $label$12 }
	*($9 + [20]) = $5
	CALL $291($5)
	
.LABEL $label$12
	CALL eosio_assert((((*(($7 + [112])) + [-2]) & [255]) <= [10]), [2432])
	CALL eosio_assert(((int_32)((*(($7 + [113])) | [1]) & [255]) == (int_32)[1]), [2464])
	
.LABEL $label$10
	$1 = *($0 + [8])
	*($9 + [8]) = ($9 + [31])
	CALL eosio_assert($8, [688])
	CALL $209($6, $7, $1, ($9 + [8]))
	*([0] + [4]) = ($9 + [32])
	return (unreachable)
	
.LABEL $label$9
	CALL $296(($9 + [16]))
}

void .FUNC $204 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($9 + [15]) = $3
	$4 = *(($0 + [80]))
	$8 = *(($0 + [84]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [56])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $88($6, $8)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1232])
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$5 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $87($6, $8)
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	
.LABEL $label$7
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [1264])
	CALL eosio_assert(((int_64)*($7 + [48]) == (int_64)$1), [2368])
	CALL eosio_assert(((int_32)($3 | [1]) == (int_32)[1]), [2400])
	$1 = *($0 + [8])
	*($9 + [8]) = ($9 + [15])
	CALL eosio_assert($8, [688])
	CALL $205($6, $7, $1, ($9 + [8]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $205 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$20 = (*([0] + [4]) - [128])
	*([0] + [4]) = $20
	*(($21 = $20) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($21 + [24]) = *($1 + [48])
	*($21 + [32]) = *($1 + [8])
	*($21 + [16]) = *($1)
	*($1 + [116]) = *(*($3))
	CALL eosio_assert([1], [848])
	*($21 + [48]) = [0]
	*($21) = ($21 + [48])
	$5 = ($1 + [8])
	*($21 + [60]) = $5
	*($21 + [56]) = $1
	$7 = ($1 + [10])
	*($21 + [64]) = $7
	$8 = ($1 + [12])
	*($21 + [68]) = $8
	$9 = ($1 + [14])
	*($21 + [72]) = $9
	$10 = ($1 + [16])
	*($21 + [76]) = $10
	$11 = ($1 + [20])
	*($21 + [80]) = $11
	$12 = ($1 + [32])
	*($21 + [84]) = $12
	$4 = ($1 + [48])
	*($21 + [88]) = $4
	$13 = ($1 + [56])
	*($21 + [92]) = $13
	$14 = ($1 + [64])
	*($21 + [96]) = $14
	$15 = ($1 + [96])
	*($21 + [100]) = $15
	$6 = ($1 + [116])
	*($21 + [104]) = $6
	$16 = ($1 + [120])
	*($21 + [108]) = $16
	$17 = ($1 + [136])
	*($21 + [112]) = $17
	$18 = ($1 + [140])
	*($21 + [116]) = $18
	$19 = ($1 + [144])
	*($21 + [120]) = $19
	CALL $179(($21 + [56]), $21)
	$3 = *($21 + [48])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$20 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$20 = ($20 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $20
	
.LABEL $label$1
	*($21 + [4]) = $20
	*($21) = $20
	*($21 + [8]) = ($20 + $3)
	*($21 + [48]) = $21
	*($21 + [60]) = $5
	*($21 + [64]) = $7
	*($21 + [68]) = $8
	*($21 + [72]) = $9
	*($21 + [76]) = $10
	*($21 + [80]) = $11
	*($21 + [56]) = $1
	*($21 + [84]) = $12
	*($21 + [88]) = $4
	*($21 + [92]) = $13
	*($21 + [96]) = $14
	*($21 + [100]) = $15
	*($21 + [104]) = $6
	*($21 + [108]) = $16
	*($21 + [112]) = $17
	*($21 + [116]) = $18
	*($21 + [120]) = $19
	CALL $180(($21 + [56]), ($21 + [48]))
	CALL db_update_i64(*($1 + [152]), *($21 + [40]), $20, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($20)
	
.LABEL $label$3
	$20 = ($0 + [36])
	$2 = *($21 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($21 + [60]) = $1
	*($21 + [56]) = $0
	*($21 + [68]) = $1
	*($21 + [64]) = ($21 + [24])
	*($21 + [72]) = ($21 + [16])
	*($21 + [76]) = ($21 + [40])
	*($21 + [48]) = ($21 + [56])
	CALL $206(($21 + [48]), $20, ($20 + [1]))
	*([0] + [4]) = ($21 + [128])
}

void .FUNC $282 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_32 $23
	int_32 $24
	$23 = (*([0] + [4]) - [96])
	*([0] + [4]) = $23
	$24 = *($0 + [4])
	$19 = *($24)
	*($1 + [8]) = [0]
	*($1 + [12]) = [1]
	*($1 + [16]) = [200]
	*($1) = *($19)
	$2 = *($0)
	$6 = ($1 + [20])
	CALL $293($6, *($24 + [4]))
	$24 = *($24 + [8])
	*($1 + [116]) = [1]
	*($1 + [48]) = *($24)
	*($1 + [120]) = (int_64)100
	*(($1 + [128])) = (int_64)1000
	*($1 + [136]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*(($24 = $23) + [16]) = [0]
	*($24) = ($24 + [16])
	$3 = ($1 + [8])
	*($24 + [28]) = $3
	*($24 + [24]) = $1
	$10 = ($1 + [10])
	*($24 + [32]) = $10
	$4 = ($1 + [12])
	*($24 + [36]) = $4
	$11 = ($1 + [14])
	*($24 + [40]) = $11
	$5 = ($1 + [16])
	*($24 + [44]) = $5
	*($24 + [48]) = $6
	$12 = ($1 + [32])
	*($24 + [52]) = $12
	$7 = ($1 + [48])
	*($24 + [56]) = $7
	$13 = ($1 + [56])
	*($24 + [60]) = $13
	$14 = ($1 + [64])
	*($24 + [64]) = $14
	$15 = ($1 + [96])
	*($24 + [68]) = $15
	$8 = ($1 + [116])
	*($24 + [72]) = $8
	$16 = ($1 + [120])
	*($24 + [76]) = $16
	$9 = ($1 + [136])
	*($24 + [80]) = $9
	$17 = ($1 + [140])
	*($24 + [84]) = $17
	$18 = ($1 + [144])
	*($24 + [88]) = $18
	CALL $179(($24 + [24]), $24)
	$19 = *($24 + [16])
	if ( ($19 <= [513]) ){ goto $label$2 }
	$23 = CALL malloc($19)
	goto $label$1 
	
.LABEL $label$2
	$23 = ($23 - (($19 + [15]) & [-16]))
	*([0] + [4]) = $23
	
.LABEL $label$1
	*($24 + [4]) = $23
	*($24) = $23
	*($24 + [8]) = ($23 + $19)
	*($24 + [16]) = $24
	*($24 + [28]) = $3
	*($24 + [24]) = $1
	*($24 + [32]) = $10
	*($24 + [36]) = $4
	*($24 + [40]) = $11
	*($24 + [44]) = $5
	*($24 + [48]) = $6
	*($24 + [52]) = $12
	*($24 + [56]) = $7
	*($24 + [60]) = $13
	*($24 + [64]) = $14
	*($24 + [68]) = $15
	*($24 + [72]) = $8
	*($24 + [76]) = $16
	*($24 + [80]) = $9
	*($24 + [84]) = $17
	*($24 + [88]) = $18
	CALL $180(($24 + [24]), ($24 + [16]))
	$20 = *($1)
	*($1 + [152]) = CALL db_store_i64(*($2 + [8]), (int_64)7343588134136840192, *(*($0 + [8])), $20, $23, $19)
	if ( ($19 <= [513]) ){ goto $label$3 }
	CALL free($23)
	
.LABEL $label$3
	if ( (uint_64)($20 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$20 + (int_64)1) : ((uint_64)$20 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$23 = ($2 + [8])
	$20 = *($23)
	$0 = *(($0 + [8]))
	$21 = *($0)
	$22 = *($1)
	*($24 + [24]) = *(($1 + [48]))
	*($1 + [156]) = CALL db_idx64_store($20, (int_64)7343588134136840192, $21, $22, ($24 + [24]))
	$20 = *($0)
	$21 = *($23)
	$22 = *($1)
	*($24 + [24]) = *(($1 + [8]))
	*(($1 + [160])) = CALL db_idx64_store($21, (int_64)7343588134136840193, $20, $22, ($24 + [24]))
	*([0] + [4]) = ($24 + [96])
}

void .FUNC $181 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $129 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	*($12 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*($12 + [20]) = $3
	*($12 + [16]) = $1
	*($12 + [24]) = ($12 + [40])
	*(($3 = CALL $290([56])) + [8]) = [0]
	*($3) = (int_64)0
	$2 = *([0] + [72])
	$4 = *([0] + [64])
	$5 = *([0] + [56])
	$6 = *([0] + [48])
	$7 = *([0] + [40])
	$8 = *([0] + [32])
	$9 = CALL $290([48])
	*($3 + [12]) = $9
	*($9) = $8
	*($9 + [8]) = $7
	*($9 + [16]) = $6
	*($9 + [24]) = $5
	*($9 + [32]) = $4
	$10 = ($9 + [48])
	*($3 + [20]) = $10
	*($9 + [40]) = $2
	*($3 + [16]) = $10
	*($3 + [24]) = [0]
	*($3 + [28]) = [0]
	*($3 + [32]) = [0]
	*($3 + [36]) = [0]
	*($3 + [40]) = $1
	CALL $130(($12 + [16]), $3)
	*($12 + [32]) = $3
	*($12 + [16]) = (int_64)4982863551778521088
	$10 = *($3 + [44])
	*($12 + [12]) = $10
	$11 = ($1 + [28])
	$9 = *($11)
	if ( ((uint_32)$9 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($9 + [8]) = (int_64)4982863551778521088
	*($9 + [16]) = $10
	*($12 + [32]) = [0]
	*($9) = $3
	*($11) = ($9 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $71(($1 + [24]), ($12 + [32]), ($12 + [16]), ($12 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($12 + [32])
	*($12 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$9 = *($3 + [12])
	if ( ($9 == 0) ){ goto $label$4 }
	*(($3 + [16])) = $9
	CALL $291($9)
	
.LABEL $label$4
	CALL $291($3)
	
.LABEL $label$3
	*([0] + [4]) = ($12 + [48])
}

void .FUNC $128 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [8])) = *(($3 + [8]))
	$4 = ($1 + [12])
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$1 }
	CALL $131($4, *($3 + [12]), *(($3 + [16])))
	
.LABEL $label$1
	*($1 + [24]) = *($3 + [24])
	*(($1 + [32])) = *(($3 + [32]))
	CALL eosio_assert([1], [848])
	$6 = *($4)
	$7 = *(($1 + [16]))
	$8 = ($7 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$5 = ($1 + [24])
	$3 = [9]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	$3 = (($8 & [-8]) + $3)
	
.LABEL $label$3
	$7 = ($3 + [16])
	if ( ($7 <= [513]) ){ goto $label$5 }
	$3 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($11 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$4
	*($10 + [12]) = $3
	*($10 + [8]) = $3
	*($10 + [16]) = ($3 + $7)
	*($10 + [24]) = ($10 + [8])
	*($10 + [40]) = $4
	*($10 + [44]) = $5
	*($10 + [32]) = $1
	*($10 + [36]) = ($1 + [8])
	*($10 + [48]) = ($1 + [28])
	*($10 + [52]) = ($1 + [32])
	*($10 + [56]) = ($1 + [36])
	CALL $132(($10 + [32]), ($10 + [24]))
	CALL db_update_i64(*($1 + [44]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($3)
	
.LABEL $label$6
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982863551778521088) ){ goto $label$7 }
	*(($0 + [16])) = (int_64)4982863551778521089
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [64])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $287([3380], $0)
}

int_32 .FUNC $287 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $288($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11776])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $8 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [352])
	*([0] + [4]) = $4
	$3 = *($0)
	*(($4 + [32])) = $3
	*(($4 + [40])) = (int_64)-1
	*(($4 + [48])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $3
	*($4 + [24]) = $3
	*(($4 + [52])) = [0]
	*(($4 + [56])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [64]) = $3
	*(($4 + [72])) = $3
	*(($4 + [80])) = (int_64)-1
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [96])) = [0]
	*($4 + [104]) = $3
	*(($4 + [112])) = $3
	*(($4 + [120])) = (int_64)-1
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*(($4 + [136])) = [0]
	*(($4 + [140])) = [0]
	*($4 + [144]) = $3
	*(($4 + [152])) = $3
	*(($4 + [160])) = (int_64)-1
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*(($4 + [176])) = [0]
	*(($4 + [180])) = [0]
	*($4 + [184]) = $3
	*(($4 + [192])) = $3
	*(($4 + [200])) = (int_64)-1
	*(($4 + [208])) = [0]
	*(($4 + [212])) = [0]
	*(($4 + [216])) = [0]
	*(($4 + [220])) = [0]
	*($4 + [224]) = $3
	*(($4 + [232])) = $3
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = [0]
	*(($4 + [252])) = [0]
	*(($4 + [256])) = [0]
	*(($4 + [260])) = [0]
	*($4 + [264]) = $3
	*(($4 + [272])) = $3
	*(($4 + [280])) = (int_64)-1
	*(($4 + [288])) = [0]
	*(($4 + [292])) = [0]
	*(($4 + [296])) = [0]
	*($4 + [304]) = [0]
	CALL $53(($4 + [8]))
	CALL $57(($4 + [312]), ($4 + [8]))
	if ( *($4 + [320]) ){ goto $label$1 }
	if ( ((int_64)*($4 + [8]) == (int_64)$1) ){ goto $label$1 }
	$2 = *(($4 + [328]))
	$0 = *($4 + [324])
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$3 }
	$0 = $2
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$2), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($4 + [324])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($4 + [328])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $283(($4 + [8]), $1)
	CALL $54(($4 + [8]))
	*([0] + [4]) = ($4 + [352])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [384])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [5])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$4 }
	$6 = [134217727]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$6 = int_32($2 >> [4])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $290(($6 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [32])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $296($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [5]))
	$5 = ($2 + ($3 << [5]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $291($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ((int_32)($6 - $5) / (int_32)[24])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$2 = ((int_32)($2 - $5) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $290(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [24])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $296($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$6 * (int_32)[24]))
	$5 = ($2 + ((int_32)$3 * (int_32)[24]))
	$6 = $5
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 + ((int_32)((int_32)$2 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $291($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($2 >> [3])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $290(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [16])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $296($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [4]))
	$5 = ($2 + ($3 << [4]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $291($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [400])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $121($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [384])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [384])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

void .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $290(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $296($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL $291(*(($1 + [32])))
	
.LABEL $label$11
	CALL $291($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $291($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $106(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [384])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [384])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [384])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [384])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [352])
	*([0] + [4]) = $4
	$3 = *($0)
	*(($4 + [32])) = $3
	*(($4 + [40])) = (int_64)-1
	*(($4 + [48])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $3
	*($4 + [24]) = $3
	*(($4 + [52])) = [0]
	*(($4 + [56])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [64]) = $3
	*(($4 + [72])) = $3
	*(($4 + [80])) = (int_64)-1
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [96])) = [0]
	*($4 + [104]) = $3
	*(($4 + [112])) = $3
	*(($4 + [120])) = (int_64)-1
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*(($4 + [136])) = [0]
	*(($4 + [140])) = [0]
	*($4 + [144]) = $3
	*(($4 + [152])) = $3
	*(($4 + [160])) = (int_64)-1
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*(($4 + [176])) = [0]
	*(($4 + [180])) = [0]
	*($4 + [184]) = $3
	*(($4 + [192])) = $3
	*(($4 + [200])) = (int_64)-1
	*(($4 + [208])) = [0]
	*(($4 + [212])) = [0]
	*(($4 + [216])) = [0]
	*(($4 + [220])) = [0]
	*($4 + [224]) = $3
	*(($4 + [232])) = $3
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = [0]
	*(($4 + [252])) = [0]
	*(($4 + [256])) = [0]
	*(($4 + [260])) = [0]
	*($4 + [264]) = $3
	*(($4 + [272])) = $3
	*(($4 + [280])) = (int_64)-1
	*(($4 + [288])) = [0]
	*(($4 + [292])) = [0]
	*(($4 + [296])) = [0]
	*($4 + [304]) = [0]
	CALL $53(($4 + [8]))
	CALL $57(($4 + [312]), ($4 + [8]))
	if ( *($4 + [320]) ){ goto $label$1 }
	if ( ((int_64)*($4 + [8]) == (int_64)$1) ){ goto $label$1 }
	$2 = *(($4 + [328]))
	$0 = *($4 + [324])
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$3 }
	$0 = $2
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$2), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($4 + [324])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($4 + [328])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $248(($4 + [8]), $1)
	CALL $54(($4 + [8]))
	*([0] + [4]) = ($4 + [352])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [352])
	*([0] + [4]) = $5
	$4 = *($0)
	*(($5 + [32])) = $4
	*(($5 + [40])) = (int_64)-1
	*(($5 + [48])) = [0]
	*($5 + [16]) = $1
	*($5 + [8]) = $4
	*($5 + [24]) = $4
	*(($5 + [52])) = [0]
	*(($5 + [56])) = [0]
	*(($5 + [60])) = [0]
	*($5 + [64]) = $4
	*(($5 + [72])) = $4
	*(($5 + [80])) = (int_64)-1
	*(($5 + [88])) = [0]
	*(($5 + [92])) = [0]
	*(($5 + [96])) = [0]
	*($5 + [104]) = $4
	*(($5 + [112])) = $4
	*(($5 + [120])) = (int_64)-1
	*(($5 + [128])) = [0]
	*(($5 + [132])) = [0]
	*(($5 + [136])) = [0]
	*(($5 + [140])) = [0]
	*($5 + [144]) = $4
	*(($5 + [152])) = $4
	*(($5 + [160])) = (int_64)-1
	*(($5 + [168])) = [0]
	*(($5 + [172])) = [0]
	*(($5 + [176])) = [0]
	*(($5 + [180])) = [0]
	*($5 + [184]) = $4
	*(($5 + [192])) = $4
	*(($5 + [200])) = (int_64)-1
	*(($5 + [208])) = [0]
	*(($5 + [212])) = [0]
	*(($5 + [216])) = [0]
	*(($5 + [220])) = [0]
	*($5 + [224]) = $4
	*(($5 + [232])) = $4
	*(($5 + [240])) = (int_64)-1
	*(($5 + [248])) = [0]
	*(($5 + [252])) = [0]
	*(($5 + [256])) = [0]
	*(($5 + [260])) = [0]
	*($5 + [264]) = $4
	*(($5 + [272])) = $4
	*(($5 + [280])) = (int_64)-1
	*(($5 + [288])) = [0]
	*(($5 + [292])) = [0]
	*(($5 + [296])) = [0]
	*($5 + [304]) = [0]
	CALL $53(($5 + [8]))
	CALL $57(($5 + [312]), ($5 + [8]))
	if ( *($5 + [320]) ){ goto $label$1 }
	if ( ((int_64)*($5 + [8]) == (int_64)$1) ){ goto $label$1 }
	$3 = *(($5 + [328]))
	$0 = *($5 + [324])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$3 }
	$0 = $3
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$3), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($5 + [324])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($5 + [328])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $245(($5 + [8]), $1, $2)
	CALL $54(($5 + [8]))
	*([0] + [4]) = ($5 + [352])
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [352])
	*([0] + [4]) = $7
	$6 = *($0)
	*(($7 + [32])) = $6
	*(($7 + [40])) = (int_64)-1
	*(($7 + [48])) = [0]
	*($7 + [16]) = $1
	*($7 + [8]) = $6
	*($7 + [24]) = $6
	*(($7 + [52])) = [0]
	*(($7 + [56])) = [0]
	*(($7 + [60])) = [0]
	*($7 + [64]) = $6
	*(($7 + [72])) = $6
	*(($7 + [80])) = (int_64)-1
	*(($7 + [88])) = [0]
	*(($7 + [92])) = [0]
	*(($7 + [96])) = [0]
	*($7 + [104]) = $6
	*(($7 + [112])) = $6
	*(($7 + [120])) = (int_64)-1
	*(($7 + [128])) = [0]
	*(($7 + [132])) = [0]
	*(($7 + [136])) = [0]
	*(($7 + [140])) = [0]
	*($7 + [144]) = $6
	*(($7 + [152])) = $6
	*(($7 + [160])) = (int_64)-1
	*(($7 + [168])) = [0]
	*(($7 + [172])) = [0]
	*(($7 + [176])) = [0]
	*(($7 + [180])) = [0]
	*($7 + [184]) = $6
	*(($7 + [192])) = $6
	*(($7 + [200])) = (int_64)-1
	*(($7 + [208])) = [0]
	*(($7 + [212])) = [0]
	*(($7 + [216])) = [0]
	*(($7 + [220])) = [0]
	*($7 + [224]) = $6
	*(($7 + [232])) = $6
	*(($7 + [240])) = (int_64)-1
	*(($7 + [248])) = [0]
	*(($7 + [252])) = [0]
	*(($7 + [256])) = [0]
	*(($7 + [260])) = [0]
	*($7 + [264]) = $6
	*(($7 + [272])) = $6
	*(($7 + [280])) = (int_64)-1
	*(($7 + [288])) = [0]
	*(($7 + [292])) = [0]
	*(($7 + [296])) = [0]
	*($7 + [304]) = [0]
	CALL $53(($7 + [8]))
	CALL $57(($7 + [312]), ($7 + [8]))
	if ( *($7 + [320]) ){ goto $label$1 }
	if ( ((int_64)*($7 + [8]) == (int_64)$1) ){ goto $label$1 }
	$5 = *(($7 + [328]))
	$0 = *($7 + [324])
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$3 }
	$0 = $5
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$5), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($7 + [324])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($7 + [328])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $239(($7 + [8]), $1, $2, $3, $4)
	CALL $54(($7 + [8]))
	*([0] + [4]) = ($7 + [352])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [368])
	*([0] + [4]) = $6
	$5 = *($0)
	*(($6 + [48])) = $5
	*(($6 + [56])) = (int_64)-1
	*(($6 + [64])) = [0]
	*($6 + [32]) = $1
	*($6 + [24]) = $5
	*($6 + [40]) = $5
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	*(($6 + [76])) = [0]
	*($6 + [80]) = $5
	*(($6 + [88])) = $5
	*(($6 + [96])) = (int_64)-1
	*(($6 + [104])) = [0]
	*(($6 + [108])) = [0]
	*(($6 + [112])) = [0]
	*($6 + [120]) = $5
	*(($6 + [128])) = $5
	*(($6 + [136])) = (int_64)-1
	*(($6 + [144])) = [0]
	*(($6 + [148])) = [0]
	*(($6 + [152])) = [0]
	*(($6 + [156])) = [0]
	*($6 + [160]) = $5
	*(($6 + [168])) = $5
	*(($6 + [176])) = (int_64)-1
	*(($6 + [184])) = [0]
	*(($6 + [188])) = [0]
	*(($6 + [192])) = [0]
	*(($6 + [196])) = [0]
	*($6 + [200]) = $5
	*(($6 + [208])) = $5
	*(($6 + [216])) = (int_64)-1
	*(($6 + [224])) = [0]
	*(($6 + [228])) = [0]
	*(($6 + [232])) = [0]
	*(($6 + [236])) = [0]
	*($6 + [240]) = $5
	*(($6 + [248])) = $5
	*(($6 + [256])) = (int_64)-1
	*(($6 + [264])) = [0]
	*(($6 + [268])) = [0]
	*(($6 + [272])) = [0]
	*(($6 + [276])) = [0]
	*($6 + [280]) = $5
	*(($6 + [288])) = $5
	*(($6 + [296])) = (int_64)-1
	*(($6 + [304])) = [0]
	*(($6 + [308])) = [0]
	*(($6 + [312])) = [0]
	*($6 + [320]) = [0]
	CALL $53(($6 + [24]))
	CALL $57(($6 + [328]), ($6 + [24]))
	if ( *($6 + [336]) ){ goto $label$1 }
	if ( ((int_64)*($6 + [24]) == (int_64)$1) ){ goto $label$1 }
	$4 = *(($6 + [344]))
	$0 = *($6 + [340])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$3 }
	$0 = $4
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$4), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($6 + [340])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [344])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $297(($6 + [8]), $2)
	CALL $276(($6 + [24]), $1, ($6 + [8]), $3)
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $291(*($6 + [16]))
	
.LABEL $label$5
	CALL $54(($6 + [24]))
	*([0] + [4]) = ($6 + [368])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = [0]
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [384])
	CALL memcpy($2, $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $106(($2 + [48]), ($2 + [8]))
	CALL eosio_assert(((uint_32)(*($2 + [56]) - *($2 + [52])) > (uint_32)[7]), [384])
	CALL memcpy(($2 + [24]), *($2 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $275(($2 + [48]), $2)
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $291(*(($2 + [16])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [352])
	*([0] + [4]) = $5
	$4 = *($0)
	*(($5 + [32])) = $4
	*(($5 + [40])) = (int_64)-1
	*(($5 + [48])) = [0]
	*($5 + [16]) = $1
	*($5 + [8]) = $4
	*($5 + [24]) = $4
	*(($5 + [52])) = [0]
	*(($5 + [56])) = [0]
	*(($5 + [60])) = [0]
	*($5 + [64]) = $4
	*(($5 + [72])) = $4
	*(($5 + [80])) = (int_64)-1
	*(($5 + [88])) = [0]
	*(($5 + [92])) = [0]
	*(($5 + [96])) = [0]
	*($5 + [104]) = $4
	*(($5 + [112])) = $4
	*(($5 + [120])) = (int_64)-1
	*(($5 + [128])) = [0]
	*(($5 + [132])) = [0]
	*(($5 + [136])) = [0]
	*(($5 + [140])) = [0]
	*($5 + [144]) = $4
	*(($5 + [152])) = $4
	*(($5 + [160])) = (int_64)-1
	*(($5 + [168])) = [0]
	*(($5 + [172])) = [0]
	*(($5 + [176])) = [0]
	*(($5 + [180])) = [0]
	*($5 + [184]) = $4
	*(($5 + [192])) = $4
	*(($5 + [200])) = (int_64)-1
	*(($5 + [208])) = [0]
	*(($5 + [212])) = [0]
	*(($5 + [216])) = [0]
	*(($5 + [220])) = [0]
	*($5 + [224]) = $4
	*(($5 + [232])) = $4
	*(($5 + [240])) = (int_64)-1
	*(($5 + [248])) = [0]
	*(($5 + [252])) = [0]
	*(($5 + [256])) = [0]
	*(($5 + [260])) = [0]
	*($5 + [264]) = $4
	*(($5 + [272])) = $4
	*(($5 + [280])) = (int_64)-1
	*(($5 + [288])) = [0]
	*(($5 + [292])) = [0]
	*(($5 + [296])) = [0]
	*($5 + [304]) = [0]
	CALL $53(($5 + [8]))
	CALL $57(($5 + [312]), ($5 + [8]))
	if ( *($5 + [320]) ){ goto $label$1 }
	if ( ((int_64)*($5 + [8]) == (int_64)$1) ){ goto $label$1 }
	$3 = *(($5 + [328]))
	$0 = *($5 + [324])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$3 }
	$0 = $3
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$3), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($5 + [324])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($5 + [328])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $273(($5 + [8]), $1, $2)
	CALL $54(($5 + [8]))
	*([0] + [4]) = ($5 + [352])
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [352])
	*([0] + [4]) = $6
	$5 = *($0)
	*(($6 + [32])) = $5
	*(($6 + [40])) = (int_64)-1
	*(($6 + [48])) = [0]
	*($6 + [16]) = $1
	*($6 + [8]) = $5
	*($6 + [24]) = $5
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = $5
	*(($6 + [72])) = $5
	*(($6 + [80])) = (int_64)-1
	*(($6 + [88])) = [0]
	*(($6 + [92])) = [0]
	*(($6 + [96])) = [0]
	*($6 + [104]) = $5
	*(($6 + [112])) = $5
	*(($6 + [120])) = (int_64)-1
	*(($6 + [128])) = [0]
	*(($6 + [132])) = [0]
	*(($6 + [136])) = [0]
	*(($6 + [140])) = [0]
	*($6 + [144]) = $5
	*(($6 + [152])) = $5
	*(($6 + [160])) = (int_64)-1
	*(($6 + [168])) = [0]
	*(($6 + [172])) = [0]
	*(($6 + [176])) = [0]
	*(($6 + [180])) = [0]
	*($6 + [184]) = $5
	*(($6 + [192])) = $5
	*(($6 + [200])) = (int_64)-1
	*(($6 + [208])) = [0]
	*(($6 + [212])) = [0]
	*(($6 + [216])) = [0]
	*(($6 + [220])) = [0]
	*($6 + [224]) = $5
	*(($6 + [232])) = $5
	*(($6 + [240])) = (int_64)-1
	*(($6 + [248])) = [0]
	*(($6 + [252])) = [0]
	*(($6 + [256])) = [0]
	*(($6 + [260])) = [0]
	*($6 + [264]) = $5
	*(($6 + [272])) = $5
	*(($6 + [280])) = (int_64)-1
	*(($6 + [288])) = [0]
	*(($6 + [292])) = [0]
	*(($6 + [296])) = [0]
	*($6 + [304]) = [0]
	CALL $53(($6 + [8]))
	CALL $57(($6 + [312]), ($6 + [8]))
	if ( *($6 + [320]) ){ goto $label$1 }
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$1 }
	$4 = *(($6 + [328]))
	$0 = *($6 + [324])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$3 }
	$0 = $4
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$4), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($6 + [324])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [328])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $263(($6 + [8]), $1, $2, $3)
	CALL $54(($6 + [8]))
	*([0] + [4]) = ($6 + [352])
}

void .FUNC $185 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	*($12 + [88]) = $1
	*($12 + [80]) = $2
	*($12 + [72]) = $4
	*($12 + [71]) = $5
	$11 = *(($0 + [80]))
	$10 = *(($0 + [84]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$1 }
	$5 = ($10 + [-24])
	$6 = ([0] - $11)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$10 = $5
	$7 = ($5 + [-24])
	$5 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [56])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$4 }
	$11 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$5), [256])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$7 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $88($5, $7)
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$5), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [1232])
	$8 = *(($0 + [40]))
	$10 = *(($0 + [44]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$5 }
	$5 = ($10 + [-24])
	$6 = ([0] - $8)
	
.LOOP $label$6:
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$5 }
	$10 = $5
	$7 = ($5 + [-24])
	$5 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [16])
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$8 }
	$10 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [148]) == (int_32)$6), [256])
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	$5 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$10 = CALL $87($6, $5)
	CALL eosio_assert(((int_32)*($10 + [148]) == (int_32)$6), [256])
	
.LABEL $label$7
	$8 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($8, [1264])
	*($0 + [296]) = *($10 + [8])
	*($12 + [64]) = ($0 + [96])
	CALL $160(($12 + [56]), ($12 + [64]), ($12 + [80]))
	$5 = *($12 + [60])
	if ( ($5 == 0) ){ goto $label$10 }
	
.LOOP $label$11:
	if ( ((int_64)*($5 + [8]) != (int_64)*($12 + [80])) ){ goto $label$10 }
	if ( ((int_64)*($5 + [16]) != (int_64)*($12 + [88])) ){ goto $label$12 }
	$7 = [1]
	if ( ((int_32)*($5 + [33]) == (int_32)[1]) ){ goto $label$9 }
	
.LABEL $label$12
	CALL $161(($12 + [56]))
	$5 = *($12 + [60])
	if ( $5 ){ goto $label$11 }
	
.LABEL $label$10
	$7 = [0]
	
.LABEL $label$9
	CALL eosio_assert($7, [1776])
	CALL eosio_assert(((int_32)*($10 + [116]) == (int_32)[1]), [2080])
	CALL $297(($12 + [40]), $3)
	$5 = *($12 + [40])
	CALL eosio_assert(((( *($12 + [44]) ? uint_32($5 >> [1]) : ($5 & [1]) ) + [-2]) <= [29]), [2000])
	if ( ((*($12 + [40]) & [1]) == 0) ){ goto $label$13 }
	CALL $291(*($12 + [48]))
	
.LABEL $label$13
	$2 = *($12 + [72])
	CALL eosio_assert(((int_64)$2 != (int_64)0), [2112])
	$5 = *($12 + [71])
	CALL eosio_assert(((($5 + [-1]) & [255]) <= [99]), [2160])
	CALL eosio_assert(((float_64)(CASTING float_64)(uint_64 $2) >= (float_64)(CASTING float_64)(uint_32 $5)), [1328])
	CALL eosio_assert(((uint_64)*($11 + [16]) >= (uint_64)$2), [1328])
	$4 = *([0] + [24])
	$1 = *($12 + [88])
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$14 }
	$9 = (int_64)
	CALL $89($0, $1, $9((int_64)0 - $2)))
	CALL $90($0, $1, [6], $9, (int_64)0, (int_64)0)
	$1 = *($0)
	
.LABEL $label$14
	if ( ((int_64)$1 == (int_64)$4) ){ goto $label$15 }
	CALL $89($0, $4, $2)
	CALL $90($0, $4, [6], $2, (int_64)0, (int_64)0)
	
.LABEL $label$15
	$5 = ($0 + [216])
	$7 = ($0 + [232])
	$2 = *($7)
	if ( ((int_64)$2 != (int_64)-1) ){ goto $label$16 }
	$2 = (int_64)0
	$11 = CALL db_lowerbound_i64(*($5), *(($0 + [224])), (int_64)-6228196809676685312, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$17 }
	CALL $80($5, $11)
	*($12 + [12]) = [0]
	*($12 + [8]) = $5
	$2 = *(*(CALL $174(($12 + [8])) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	*(($0 + [232])) = $2
	
.LABEL $label$16
	CALL eosio_assert((uint_64)($2 <= (int_64)-2), [976])
	*($12 + [32]) = *($7)
	$2 = *($0)
	*($12 + [20]) = $3
	*($12 + [12]) = ($12 + [80])
	*($12 + [8]) = ($12 + [32])
	*($12 + [16]) = ($12 + [88])
	*($12 + [24]) = ($12 + [72])
	*($12 + [28]) = ($12 + [71])
	CALL $186($12, $5, $2, ($12 + [8]))
	$2 = *($0 + [8])
	CALL eosio_assert($8, [688])
	CALL $187($6, $10, $2, ($12 + [8]))
	CALL $177($0, *($12 + [32]))
	*([0] + [4]) = ($12 + [96])
}

void .FUNC $281 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$2 = *($0)
	*($1 + [16]) = *(*($4 + [8]))
	*($1 + [32]) = [1]
	*($1 + [33]) = [1]
	*($1 + [36]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($8 + [48]) = ($8 + [38])
	*($8 + [44]) = $8
	*($8 + [40]) = $8
	*($8 + [56]) = ($8 + [40])
	$4 = ($1 + [8])
	*($8 + [68]) = $4
	*($8 + [64]) = $1
	$5 = ($1 + [16])
	*($8 + [72]) = $5
	*($8 + [76]) = ($1 + [24])
	*($8 + [80]) = ($1 + [32])
	*($8 + [84]) = ($1 + [33])
	*($8 + [88]) = ($1 + [36])
	CALL $242(($8 + [64]), ($8 + [56]))
	$3 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)7343588593878171648, *(*($0 + [8])), $3, $8, [38])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$2 = ($2 + [8])
	$3 = *($2)
	$0 = *(($0 + [8]))
	$6 = *($0)
	$7 = *($1)
	*($8 + [64]) = *($5)
	*($1 + [48]) = CALL db_idx64_store($3, (int_64)7343588593878171648, $6, $7, ($8 + [64]))
	$3 = *($0)
	$6 = *($2)
	$7 = *($1)
	*($8 + [64]) = *($4)
	*(($1 + [52])) = CALL db_idx64_store($6, (int_64)7343588593878171649, $3, $7, ($8 + [64]))
	*([0] + [4]) = ($8 + [96])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = [0]
	*($8 + [36]) = $1
	*($8 + [32]) = $1
	*($8 + [40]) = ($1 + $3)
	*($8 + [48]) = ($8 + [32])
	*($8 + [56]) = $8
	CALL $238(($8 + [56]), ($8 + [48]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($8 + [24]))
	$6 = *(($8 + [16]))
	$5 = *(($8 + [8]))
	$4 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$7 = *((*($1) + $7))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_64 $5), (int_64 $6), (int_64 ($3 & [255])), (int_32 $7))
	*([0] + [4]) = ($8 + [64])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [352])
	*([0] + [4]) = $6
	$5 = *($0)
	*(($6 + [32])) = $5
	*(($6 + [40])) = (int_64)-1
	*(($6 + [48])) = [0]
	*($6 + [16]) = $1
	*($6 + [8]) = $5
	*($6 + [24]) = $5
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = $5
	*(($6 + [72])) = $5
	*(($6 + [80])) = (int_64)-1
	*(($6 + [88])) = [0]
	*(($6 + [92])) = [0]
	*(($6 + [96])) = [0]
	*($6 + [104]) = $5
	*(($6 + [112])) = $5
	*(($6 + [120])) = (int_64)-1
	*(($6 + [128])) = [0]
	*(($6 + [132])) = [0]
	*(($6 + [136])) = [0]
	*(($6 + [140])) = [0]
	*($6 + [144]) = $5
	*(($6 + [152])) = $5
	*(($6 + [160])) = (int_64)-1
	*(($6 + [168])) = [0]
	*(($6 + [172])) = [0]
	*(($6 + [176])) = [0]
	*(($6 + [180])) = [0]
	*($6 + [184]) = $5
	*(($6 + [192])) = $5
	*(($6 + [200])) = (int_64)-1
	*(($6 + [208])) = [0]
	*(($6 + [212])) = [0]
	*(($6 + [216])) = [0]
	*(($6 + [220])) = [0]
	*($6 + [224]) = $5
	*(($6 + [232])) = $5
	*(($6 + [240])) = (int_64)-1
	*(($6 + [248])) = [0]
	*(($6 + [252])) = [0]
	*(($6 + [256])) = [0]
	*(($6 + [260])) = [0]
	*($6 + [264]) = $5
	*(($6 + [272])) = $5
	*(($6 + [280])) = (int_64)-1
	*(($6 + [288])) = [0]
	*(($6 + [292])) = [0]
	*(($6 + [296])) = [0]
	*($6 + [304]) = [0]
	CALL $53(($6 + [8]))
	CALL $57(($6 + [312]), ($6 + [8]))
	if ( *($6 + [320]) ){ goto $label$1 }
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$1 }
	$4 = *(($6 + [328]))
	$0 = *($6 + [324])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$3 }
	$0 = $4
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$4), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($6 + [324])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [328])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $235(($6 + [8]), $1, $2, $3)
	CALL $54(($6 + [8]))
	*([0] + [4]) = ($6 + [352])
}

void .FUNC $184 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [5])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	$4 = [134217727]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$4 = int_32($7 >> [4])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $290(($4 << [5]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $296($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [5])))) = *($1)
	*(($3 + [24])) = *(($1 + [24]))
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [5]))
	$3 = ($3 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $291($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $187 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [128])
	*([0] + [4]) = $21
	*(($22 = $21) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($22 + [24]) = *($1 + [48])
	*($22 + [32]) = *($1 + [8])
	$2 = *($1)
	*($22 + [16]) = $2
	*($1 + [140]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [144]) = (*($1 + [144]) + [1])
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [848])
	*($22 + [48]) = [0]
	*($22) = ($22 + [48])
	$5 = ($1 + [8])
	*($22 + [60]) = $5
	*($22 + [56]) = $1
	$8 = ($1 + [10])
	*($22 + [64]) = $8
	$9 = ($1 + [12])
	*($22 + [68]) = $9
	$10 = ($1 + [14])
	*($22 + [72]) = $10
	$11 = ($1 + [16])
	*($22 + [76]) = $11
	$12 = ($1 + [20])
	*($22 + [80]) = $12
	$13 = ($1 + [32])
	*($22 + [84]) = $13
	$4 = ($1 + [48])
	*($22 + [88]) = $4
	$14 = ($1 + [56])
	*($22 + [92]) = $14
	$15 = ($1 + [64])
	*($22 + [96]) = $15
	$16 = ($1 + [96])
	*($22 + [100]) = $16
	$17 = ($1 + [116])
	*($22 + [104]) = $17
	$18 = ($1 + [120])
	*($22 + [108]) = $18
	$19 = ($1 + [136])
	*($22 + [112]) = $19
	$6 = ($1 + [140])
	*($22 + [116]) = $6
	$7 = ($1 + [144])
	*($22 + [120]) = $7
	CALL $179(($22 + [56]), $22)
	$20 = *($22 + [48])
	if ( ($20 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($20)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $20)
	*($22 + [48]) = $22
	*($22 + [60]) = $5
	*($22 + [64]) = $8
	*($22 + [68]) = $9
	*($22 + [72]) = $10
	*($22 + [76]) = $11
	*($22 + [80]) = $12
	*($22 + [56]) = $1
	*($22 + [84]) = $13
	*($22 + [88]) = $4
	*($22 + [92]) = $14
	*($22 + [96]) = $15
	*($22 + [100]) = $16
	*($22 + [104]) = $17
	*($22 + [108]) = $18
	*($22 + [112]) = $19
	*($22 + [116]) = $6
	*($22 + [120]) = $7
	CALL $180(($22 + [56]), ($22 + [48]))
	CALL db_update_i64(*($1 + [152]), *($22 + [40]), $21, $20)
	if ( ($20 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	$21 = ($0 + [36])
	$2 = *($22 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($22 + [60]) = $1
	*($22 + [56]) = $0
	*($22 + [68]) = $1
	*($22 + [64]) = ($22 + [24])
	*($22 + [72]) = ($22 + [16])
	*($22 + [76]) = ($22 + [40])
	*($22 + [48]) = ($22 + [56])
	CALL $188(($22 + [48]), $21, ($21 + [1]))
	*([0] + [4]) = ($22 + [128])
}

void .FUNC $218 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [384])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $72(*($1), ($2 + [16]))
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [384])
	CALL memcpy(($2 + [28]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [384])
	CALL memcpy(($2 + [29]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
}

void .FUNC $186 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $290([144])) + [40]) = [0]
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [76]) = [0]
	*($3 + [80]) = [0]
	*($3 + [84]) = [0]
	*($3 + [92]) = [0]
	*($3 + [96]) = [0]
	*($3 + [100]) = [0]
	*($3 + [104]) = [0]
	*($3 + [108]) = [0]
	*($3 + [112]) = [0]
	*($3 + [128]) = $1
	CALL $189(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [132])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $116(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [104])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [108])) = $1
	CALL $291($1)
	
.LABEL $label$4
	$1 = *($3 + [92])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [96])) = $1
	CALL $291($1)
	
.LABEL $label$5
	$1 = *($3 + [76])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [80])) = $1
	CALL $291($1)
	
.LABEL $label$6
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $291(*(($3 + [40])))
	
.LABEL $label$7
	CALL $291($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [240])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [240])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [240])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [240])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	CALL $110(*($1), *($0 + [24]))
	CALL $110(*($1), *($0 + [28]))
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $133($2, ($3 + [4]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), ($3 + [16]), [1])
	$4 = (*($2 + [4]) + [1])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), ($3 + [24]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $133($2, ($3 + [4]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), ($3 + [16]), [1])
	$4 = (*($2 + [4]) + [1])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), ($3 + [17]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [240])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [240])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [64])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [240])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $290(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $296($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $117(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC $117 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [104])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($2 + [108])) = $3
	CALL $291($3)
	
.LABEL $label$4
	$3 = *($2 + [92])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($2 + [96])) = $3
	CALL $291($3)
	
.LABEL $label$5
	$3 = *($2 + [76])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [80])) = $3
	CALL $291($3)
	
.LABEL $label$6
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $291(*(($2 + [40])))
	
.LABEL $label$7
	CALL $291($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $291($2)
	
.LABEL $label$8
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $106(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $118(*($1), *($0 + [36]))
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $119(*($1), *($0 + [44]))
	CALL $120(*($1), *($0 + [48]))
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [384])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [60])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [384])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [240])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [240])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [240])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [240])
	CALL memcpy(*($4), ($7 + [16]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [240])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [240])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [240])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [240])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [240])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [5]))
	$5 = *($0 + [4])
	$4 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [16]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $5) > (int_32)[0]), [240])
	CALL memcpy(*($7), ($8 + [16]), [1])
	$5 = (*($7) + [1])
	*($7) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$2 = ($8 + [28])
	
.LOOP $label$3:
	*($8 + [8]) = $0
	*($8 + [16]) = $7
	*((($8 + [16]) + [8])) = ($7 + [16])
	*($2) = ($7 + [24])
	*($8 + [20]) = ($7 + [8])
	CALL $114(($8 + [16]), ($8 + [8]))
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC $237 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [400])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = int_32(($4 - $7) >> [5])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $123($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ($6 << [5]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($8 + [28])
	
.LOOP $label$6:
	*($8 + [8]) = $0
	*($8 + [16]) = $7
	*((($8 + [16]) + [8])) = ($7 + [16])
	*($6) = ($7 + [24])
	*($8 + [20]) = ($7 + [8])
	CALL $124(($8 + [16]), ($8 + [8]))
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [400])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = ((int_32)($2 - $7) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $122($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ((int_32)$4 * (int_32)[24]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [384])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [384])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [384])
	CALL memcpy(($7 + [16]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $295 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $290(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $291($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $294 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $290($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $291($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $297 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $290($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $296 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $291 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $290 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11868])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $293 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $294($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $292 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [352])
	*([0] + [4]) = $6
	$5 = *($0)
	*(($6 + [32])) = $5
	*(($6 + [40])) = (int_64)-1
	*(($6 + [48])) = [0]
	*($6 + [16]) = $1
	*($6 + [8]) = $5
	*($6 + [24]) = $5
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = $5
	*(($6 + [72])) = $5
	*(($6 + [80])) = (int_64)-1
	*(($6 + [88])) = [0]
	*(($6 + [92])) = [0]
	*(($6 + [96])) = [0]
	*($6 + [104]) = $5
	*(($6 + [112])) = $5
	*(($6 + [120])) = (int_64)-1
	*(($6 + [128])) = [0]
	*(($6 + [132])) = [0]
	*(($6 + [136])) = [0]
	*(($6 + [140])) = [0]
	*($6 + [144]) = $5
	*(($6 + [152])) = $5
	*(($6 + [160])) = (int_64)-1
	*(($6 + [168])) = [0]
	*(($6 + [172])) = [0]
	*(($6 + [176])) = [0]
	*(($6 + [180])) = [0]
	*($6 + [184]) = $5
	*(($6 + [192])) = $5
	*(($6 + [200])) = (int_64)-1
	*(($6 + [208])) = [0]
	*(($6 + [212])) = [0]
	*(($6 + [216])) = [0]
	*(($6 + [220])) = [0]
	*($6 + [224]) = $5
	*(($6 + [232])) = $5
	*(($6 + [240])) = (int_64)-1
	*(($6 + [248])) = [0]
	*(($6 + [252])) = [0]
	*(($6 + [256])) = [0]
	*(($6 + [260])) = [0]
	*($6 + [264]) = $5
	*(($6 + [272])) = $5
	*(($6 + [280])) = (int_64)-1
	*(($6 + [288])) = [0]
	*(($6 + [292])) = [0]
	*(($6 + [296])) = [0]
	*($6 + [304]) = [0]
	CALL $53(($6 + [8]))
	CALL $57(($6 + [312]), ($6 + [8]))
	if ( *($6 + [320]) ){ goto $label$1 }
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$1 }
	$4 = *(($6 + [328]))
	$0 = *($6 + [324])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$3 }
	$0 = $4
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$4), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($6 + [324])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [328])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $211(($6 + [8]), $1, $2, $3)
	CALL $54(($6 + [8]))
	*([0] + [4]) = ($6 + [352])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($1 + [4])
	$8 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	*($9 + [24]) = (int_64)0
	*($9 + [36]) = $1
	*($9 + [32]) = $1
	*($9 + [40]) = ($1 + $3)
	*($9 + [48]) = ($9 + [32])
	*($9 + [56]) = $9
	CALL $214(($9 + [56]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$7 = *(($9 + [24]))
	$6 = *(($9 + [16]))
	$5 = *(($9 + [8]))
	$4 = *($9)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$8 = *((*($1) + $8))
	
.LABEL $label$6
	CALL void $1((int_32 $4), (int_64 $5), (int_64 $6), (int_64 $7), (int_64 $8))
	*([0] + [4]) = ($9 + [64])
	return [1]
}

void .FUNC $235 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [32])
	*([0] + [4]) = $13
	*($13 + [16]) = $2
	$12 = *(($0 + [80]))
	$11 = *(($0 + [84]))
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$1 }
	$10 = ($11 + [-24])
	$5 = ([0] - $12)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$1 }
	$11 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [56])
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$4 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$4), [256])
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	$6 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $88($4, $6)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$4), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [1232])
	$12 = *(($0 + [40]))
	$11 = *(($0 + [44]))
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$5 }
	$10 = ($11 + [-24])
	$5 = ([0] - $12)
	
.LOOP $label$6:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$5 }
	$11 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$7 = ($0 + [16])
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$8 }
	$12 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [148]) == (int_32)$7), [256])
	goto $label$7 
	
.LABEL $label$8
	$12 = [0]
	$10 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$7 }
	$12 = CALL $87($7, $10)
	CALL eosio_assert(((int_32)*($12 + [148]) == (int_32)$7), [256])
	
.LABEL $label$7
	$8 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($8, [1264])
	$9 = *(($0 + [80]))
	$11 = *(($0 + [84]))
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$9 }
	$10 = ($11 + [-24])
	$5 = ([0] - $9)
	
.LOOP $label$10:
	if ( ((int_64)*(*($10)) == (int_64)$3) ){ goto $label$9 }
	$11 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$12 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$4), [256])
	goto $label$11 
	
.LABEL $label$12
	$10 = [0]
	$6 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	$10 = CALL $88($4, $6)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$4), [256])
	
.LABEL $label$11
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [2864])
	CALL eosio_assert(((int_64)*($12 + [48]) == (int_64)$1), [2368])
	CALL eosio_assert(((int_64)*($12 + [48]) != (int_64)$3), [2896])
	*($13 + [8]) = ($0 + [96])
	CALL $160($13, ($13 + [8]), ($13 + [16]))
	$10 = *($13 + [4])
	if ( ($10 == 0) ){ goto $label$14 }
	
.LOOP $label$15:
	if ( ((int_64)*($10 + [8]) != (int_64)*($13 + [16])) ){ goto $label$14 }
	if ( ((int_64)*($10 + [16]) == (int_64)$3) ){ goto $label$16 }
	CALL $161($13)
	$10 = *($13 + [4])
	if ( ($10 == 0) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	$3 = *($0 + [8])
	*($13 + [24]) = $13
	CALL eosio_assert($8, [688])
	CALL $236($7, $12, $3, ($13 + [24]))
	$3 = *($13)
	*($13 + [24]) = $3
	$10 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$10) != (int_32)[0]), [416])
	CALL $161(($13 + [24]))
	CALL $136(*($13 + [8]), $10)
	goto $label$13 
	
.LABEL $label$14
	CALL eosio_assert([0], [1776])
	
.LABEL $label$13
	*([0] + [4]) = ($13 + [32])
}

int_32 .FUNC $278 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$7 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [464])
	$8 = *($0 + [4])
	$6 = *($8 + [156])
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$1 }
	$6 = *(*($0))
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)7343588134136840192, ($9 + [8]), *($8))
	*(*(($0 + [4])) + [156]) = $6
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($6, ($9 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$3 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$2), [256])
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL $87($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)7343588134136840192, $3))
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$2), [256])
	
.LABEL $label$5
	*($7 + [156]) = $1
	
.LABEL $label$2
	*(($0 + [4])) = $7
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [384])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [384])
	CALL memcpy(($3 + [8]), $2, [8])
	*($3 + [52]) = ($1 + [16])
	CALL $106(($3 + [48]), ($3 + [16]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $231(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $291(*(($3 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [368])
	*([0] + [4]) = $6
	$5 = *($0)
	*(($6 + [48])) = $5
	*(($6 + [56])) = (int_64)-1
	*(($6 + [64])) = [0]
	*($6 + [32]) = $1
	*($6 + [24]) = $5
	*($6 + [40]) = $5
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	*(($6 + [76])) = [0]
	*($6 + [80]) = $5
	*(($6 + [88])) = $5
	*(($6 + [96])) = (int_64)-1
	*(($6 + [104])) = [0]
	*(($6 + [108])) = [0]
	*(($6 + [112])) = [0]
	*($6 + [120]) = $5
	*(($6 + [128])) = $5
	*(($6 + [136])) = (int_64)-1
	*(($6 + [144])) = [0]
	*(($6 + [148])) = [0]
	*(($6 + [152])) = [0]
	*(($6 + [156])) = [0]
	*($6 + [160]) = $5
	*(($6 + [168])) = $5
	*(($6 + [176])) = (int_64)-1
	*(($6 + [184])) = [0]
	*(($6 + [188])) = [0]
	*(($6 + [192])) = [0]
	*(($6 + [196])) = [0]
	*($6 + [200]) = $5
	*(($6 + [208])) = $5
	*(($6 + [216])) = (int_64)-1
	*(($6 + [224])) = [0]
	*(($6 + [228])) = [0]
	*(($6 + [232])) = [0]
	*(($6 + [236])) = [0]
	*($6 + [240]) = $5
	*(($6 + [248])) = $5
	*(($6 + [256])) = (int_64)-1
	*(($6 + [264])) = [0]
	*(($6 + [268])) = [0]
	*(($6 + [272])) = [0]
	*(($6 + [276])) = [0]
	*($6 + [280]) = $5
	*(($6 + [288])) = $5
	*(($6 + [296])) = (int_64)-1
	*(($6 + [304])) = [0]
	*(($6 + [308])) = [0]
	*(($6 + [312])) = [0]
	*($6 + [320]) = [0]
	CALL $53(($6 + [24]))
	CALL $57(($6 + [328]), ($6 + [24]))
	if ( *($6 + [336]) ){ goto $label$1 }
	if ( ((int_64)*($6 + [24]) == (int_64)$1) ){ goto $label$1 }
	$4 = *(($6 + [344]))
	$0 = *($6 + [340])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$3 }
	$0 = $4
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$4), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($6 + [340])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [344])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $297(($6 + [8]), $3)
	CALL $232(($6 + [24]), $1, $2, ($6 + [8]))
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $291(*($6 + [16]))
	
.LABEL $label$5
	CALL $54(($6 + [24]))
	*([0] + [4]) = ($6 + [368])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [368])
	*([0] + [4]) = $8
	$7 = *($0)
	*(($8 + [48])) = $7
	*(($8 + [56])) = (int_64)-1
	*(($8 + [64])) = [0]
	*($8 + [32]) = $1
	*($8 + [24]) = $7
	*($8 + [40]) = $7
	*(($8 + [68])) = [0]
	*(($8 + [72])) = [0]
	*(($8 + [76])) = [0]
	*($8 + [80]) = $7
	*(($8 + [88])) = $7
	*(($8 + [96])) = (int_64)-1
	*(($8 + [104])) = [0]
	*(($8 + [108])) = [0]
	*(($8 + [112])) = [0]
	*($8 + [120]) = $7
	*(($8 + [128])) = $7
	*(($8 + [136])) = (int_64)-1
	*(($8 + [144])) = [0]
	*(($8 + [148])) = [0]
	*(($8 + [152])) = [0]
	*(($8 + [156])) = [0]
	*($8 + [160]) = $7
	*(($8 + [168])) = $7
	*(($8 + [176])) = (int_64)-1
	*(($8 + [184])) = [0]
	*(($8 + [188])) = [0]
	*(($8 + [192])) = [0]
	*(($8 + [196])) = [0]
	*($8 + [200]) = $7
	*(($8 + [208])) = $7
	*(($8 + [216])) = (int_64)-1
	*(($8 + [224])) = [0]
	*(($8 + [228])) = [0]
	*(($8 + [232])) = [0]
	*(($8 + [236])) = [0]
	*($8 + [240]) = $7
	*(($8 + [248])) = $7
	*(($8 + [256])) = (int_64)-1
	*(($8 + [264])) = [0]
	*(($8 + [268])) = [0]
	*(($8 + [272])) = [0]
	*(($8 + [276])) = [0]
	*($8 + [280]) = $7
	*(($8 + [288])) = $7
	*(($8 + [296])) = (int_64)-1
	*(($8 + [304])) = [0]
	*(($8 + [308])) = [0]
	*(($8 + [312])) = [0]
	*($8 + [320]) = [0]
	CALL $53(($8 + [24]))
	CALL $57(($8 + [328]), ($8 + [24]))
	if ( *($8 + [336]) ){ goto $label$1 }
	if ( ((int_64)*($8 + [24]) == (int_64)$1) ){ goto $label$1 }
	$6 = *(($8 + [344]))
	$0 = *($8 + [340])
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$3 }
	$0 = $6
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$6), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($8 + [340])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($8 + [344])) = $0
	CALL $291($0)
	
.LABEL $label$4
	*($8 + [16]) = [0]
	*($8 + [8]) = (int_64)0
	$0 = (*($3 + [4]) - *($3))
	$6 = int_32($0 >> [3])
	if ( ($6 == 0) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$5 }
	$0 = CALL $290($0)
	*(($8 + [16])) = ($0 + ($6 << [3]))
	*($8 + [8]) = $0
	*($8 + [12]) = $0
	$3 = *($3)
	$6 = (*(($3 + [4])) - $3)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($0, $3, $6)
	*($8 + [12]) = (*($8 + [12]) + $6)
	
.LABEL $label$6
	CALL $225(($8 + [24]), $1, $2, ($8 + [8]), $4, $5)
	$0 = *($8 + [8])
	if ( ($0 == 0) ){ goto $label$7 }
	*($8 + [12]) = $0
	CALL $291($0)
	
.LABEL $label$7
	CALL $54(($8 + [24]))
	*([0] + [4]) = ($8 + [368])
	return (unreachable)
	
.LABEL $label$5
	CALL $296(($8 + [8]))
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [368])
	*([0] + [4]) = $6
	$5 = *($0)
	*(($6 + [48])) = $5
	*(($6 + [56])) = (int_64)-1
	*(($6 + [64])) = [0]
	*($6 + [32]) = $1
	*($6 + [24]) = $5
	*($6 + [40]) = $5
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	*(($6 + [76])) = [0]
	*($6 + [80]) = $5
	*(($6 + [88])) = $5
	*(($6 + [96])) = (int_64)-1
	*(($6 + [104])) = [0]
	*(($6 + [108])) = [0]
	*(($6 + [112])) = [0]
	*($6 + [120]) = $5
	*(($6 + [128])) = $5
	*(($6 + [136])) = (int_64)-1
	*(($6 + [144])) = [0]
	*(($6 + [148])) = [0]
	*(($6 + [152])) = [0]
	*(($6 + [156])) = [0]
	*($6 + [160]) = $5
	*(($6 + [168])) = $5
	*(($6 + [176])) = (int_64)-1
	*(($6 + [184])) = [0]
	*(($6 + [188])) = [0]
	*(($6 + [192])) = [0]
	*(($6 + [196])) = [0]
	*($6 + [200]) = $5
	*(($6 + [208])) = $5
	*(($6 + [216])) = (int_64)-1
	*(($6 + [224])) = [0]
	*(($6 + [228])) = [0]
	*(($6 + [232])) = [0]
	*(($6 + [236])) = [0]
	*($6 + [240]) = $5
	*(($6 + [248])) = $5
	*(($6 + [256])) = (int_64)-1
	*(($6 + [264])) = [0]
	*(($6 + [268])) = [0]
	*(($6 + [272])) = [0]
	*(($6 + [276])) = [0]
	*($6 + [280]) = $5
	*(($6 + [288])) = $5
	*(($6 + [296])) = (int_64)-1
	*(($6 + [304])) = [0]
	*(($6 + [308])) = [0]
	*(($6 + [312])) = [0]
	*($6 + [320]) = [0]
	CALL $53(($6 + [24]))
	CALL $57(($6 + [328]), ($6 + [24]))
	if ( *($6 + [336]) ){ goto $label$1 }
	if ( ((int_64)*($6 + [24]) == (int_64)$1) ){ goto $label$1 }
	$4 = *(($6 + [344]))
	$0 = *($6 + [340])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$3 }
	$0 = $4
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$4), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($6 + [340])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [344])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $297(($6 + [8]), $3)
	CALL $228(($6 + [24]), $1, $2, ($6 + [8]))
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $291(*($6 + [16]))
	
.LABEL $label$5
	CALL $54(($6 + [24]))
	*([0] + [4]) = ($6 + [368])
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [368])
	*([0] + [4]) = $8
	$7 = *($0)
	*(($8 + [48])) = $7
	*(($8 + [56])) = (int_64)-1
	*(($8 + [64])) = [0]
	*($8 + [32]) = $1
	*($8 + [24]) = $7
	*($8 + [40]) = $7
	*(($8 + [68])) = [0]
	*(($8 + [72])) = [0]
	*(($8 + [76])) = [0]
	*($8 + [80]) = $7
	*(($8 + [88])) = $7
	*(($8 + [96])) = (int_64)-1
	*(($8 + [104])) = [0]
	*(($8 + [108])) = [0]
	*(($8 + [112])) = [0]
	*($8 + [120]) = $7
	*(($8 + [128])) = $7
	*(($8 + [136])) = (int_64)-1
	*(($8 + [144])) = [0]
	*(($8 + [148])) = [0]
	*(($8 + [152])) = [0]
	*(($8 + [156])) = [0]
	*($8 + [160]) = $7
	*(($8 + [168])) = $7
	*(($8 + [176])) = (int_64)-1
	*(($8 + [184])) = [0]
	*(($8 + [188])) = [0]
	*(($8 + [192])) = [0]
	*(($8 + [196])) = [0]
	*($8 + [200]) = $7
	*(($8 + [208])) = $7
	*(($8 + [216])) = (int_64)-1
	*(($8 + [224])) = [0]
	*(($8 + [228])) = [0]
	*(($8 + [232])) = [0]
	*(($8 + [236])) = [0]
	*($8 + [240]) = $7
	*(($8 + [248])) = $7
	*(($8 + [256])) = (int_64)-1
	*(($8 + [264])) = [0]
	*(($8 + [268])) = [0]
	*(($8 + [272])) = [0]
	*(($8 + [276])) = [0]
	*($8 + [280]) = $7
	*(($8 + [288])) = $7
	*(($8 + [296])) = (int_64)-1
	*(($8 + [304])) = [0]
	*(($8 + [308])) = [0]
	*(($8 + [312])) = [0]
	*($8 + [320]) = [0]
	CALL $53(($8 + [24]))
	CALL $57(($8 + [328]), ($8 + [24]))
	if ( *($8 + [336]) ){ goto $label$1 }
	if ( ((int_64)*($8 + [24]) == (int_64)$1) ){ goto $label$1 }
	$6 = *(($8 + [344]))
	$0 = *($8 + [340])
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$3 }
	$0 = $6
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$6), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($8 + [340])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($8 + [344])) = $0
	CALL $291($0)
	
.LABEL $label$4
	*($8 + [16]) = [0]
	*($8 + [8]) = (int_64)0
	$0 = (*($3 + [4]) - *($3))
	$6 = int_32($0 >> [3])
	if ( ($6 == 0) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$5 }
	$0 = CALL $290($0)
	*(($8 + [16])) = ($0 + ($6 << [3]))
	*($8 + [8]) = $0
	*($8 + [12]) = $0
	$3 = *($3)
	$6 = (*(($3 + [4])) - $3)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($0, $3, $6)
	*($8 + [12]) = (*($8 + [12]) + $6)
	
.LABEL $label$6
	CALL $220(($8 + [24]), $1, $2, ($8 + [8]), $4, $5)
	$0 = *($8 + [8])
	if ( ($0 == 0) ){ goto $label$7 }
	*($8 + [12]) = $0
	CALL $291($0)
	
.LABEL $label$7
	CALL $54(($8 + [24]))
	*([0] + [4]) = ($8 + [368])
	return (unreachable)
	
.LABEL $label$5
	CALL $296(($8 + [8]))
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	*(($2 = $3) + [60]) = $0
	*($2 + [48]) = *($1)
	*($2 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [36]) = [0]
	*($2 + [40]) = (int_64)0
	*($2 + [68]) = $1
	*($2 + [64]) = $1
	*($2 + [72]) = ($1 + $0)
	*($2 + [80]) = ($2 + [64])
	*($2 + [88]) = ($2 + [8])
	CALL $223(($2 + [88]), ($2 + [80]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [68]) = ($2 + [48])
	*($2 + [64]) = ($2 + [60])
	CALL $224(($2 + [64]), ($2 + [8]))
	$1 = *(($2 + [24]))
	if ( ($1 == 0) ){ goto $label$5 }
	*(($2 + [28])) = $1
	CALL $291($1)
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [96])
	return [1]
}

void .FUNC $27 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [352])
	*([0] + [4]) = $7
	$6 = *($0)
	*(($7 + [32])) = $6
	*(($7 + [40])) = (int_64)-1
	*(($7 + [48])) = [0]
	*($7 + [16]) = $1
	*($7 + [8]) = $6
	*($7 + [24]) = $6
	*(($7 + [52])) = [0]
	*(($7 + [56])) = [0]
	*(($7 + [60])) = [0]
	*($7 + [64]) = $6
	*(($7 + [72])) = $6
	*(($7 + [80])) = (int_64)-1
	*(($7 + [88])) = [0]
	*(($7 + [92])) = [0]
	*(($7 + [96])) = [0]
	*($7 + [104]) = $6
	*(($7 + [112])) = $6
	*(($7 + [120])) = (int_64)-1
	*(($7 + [128])) = [0]
	*(($7 + [132])) = [0]
	*(($7 + [136])) = [0]
	*(($7 + [140])) = [0]
	*($7 + [144]) = $6
	*(($7 + [152])) = $6
	*(($7 + [160])) = (int_64)-1
	*(($7 + [168])) = [0]
	*(($7 + [172])) = [0]
	*(($7 + [176])) = [0]
	*(($7 + [180])) = [0]
	*($7 + [184]) = $6
	*(($7 + [192])) = $6
	*(($7 + [200])) = (int_64)-1
	*(($7 + [208])) = [0]
	*(($7 + [212])) = [0]
	*(($7 + [216])) = [0]
	*(($7 + [220])) = [0]
	*($7 + [224]) = $6
	*(($7 + [232])) = $6
	*(($7 + [240])) = (int_64)-1
	*(($7 + [248])) = [0]
	*(($7 + [252])) = [0]
	*(($7 + [256])) = [0]
	*(($7 + [260])) = [0]
	*($7 + [264]) = $6
	*(($7 + [272])) = $6
	*(($7 + [280])) = (int_64)-1
	*(($7 + [288])) = [0]
	*(($7 + [292])) = [0]
	*(($7 + [296])) = [0]
	*($7 + [304]) = [0]
	CALL $53(($7 + [8]))
	CALL $57(($7 + [312]), ($7 + [8]))
	if ( *($7 + [320]) ){ goto $label$1 }
	if ( ((int_64)*($7 + [8]) == (int_64)$1) ){ goto $label$1 }
	$5 = *(($7 + [328]))
	$0 = *($7 + [324])
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$3 }
	$0 = $5
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$5), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($7 + [324])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($7 + [328])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $215(($7 + [8]), $1, $2, $3, $4)
	CALL $54(($7 + [8]))
	*([0] + [4]) = ($7 + [352])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [28]) = [0]
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	*($2 + [64]) = ($2 + [48])
	*($2 + [72]) = $2
	CALL $218(($2 + [72]), ($2 + [64]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $219(($2 + [48]), $2)
	$1 = *(($2 + [16]))
	if ( ($1 == 0) ){ goto $label$5 }
	*(($2 + [20])) = $1
	CALL $291($1)
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [80])
	return [1]
}

void .FUNC $232 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$4 = *(($0 + [80]))
	$8 = *(($0 + [84]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [56])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $88($6, $8)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1232])
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$5 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $87($6, $8)
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	
.LABEL $label$7
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [1264])
	CALL eosio_assert(((int_64)*($7 + [48]) == (int_64)$1), [2368])
	CALL $297(($9 + [16]), $3)
	$5 = *($9 + [16])
	CALL eosio_assert(((( *($9 + [20]) ? uint_32($5 >> [1]) : ($5 & [1]) ) + [-2]) <= [149]), [2832])
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL $291(*($9 + [24]))
	
.LABEL $label$9
	$1 = *($0 + [8])
	*($9 + [8]) = $3
	CALL eosio_assert($8, [688])
	CALL $233($6, $7, $1, ($9 + [8]))
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $300 ()
{
	(unreachable)
}

void .FUNC $280 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $290([56])) + [40]) = $1
	CALL $281(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [44])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $144(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $291($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [848])
	*($5 + [48]) = ($5 + [32])
	*($5 + [44]) = $5
	*($5 + [40]) = $5
	*($5 + [56]) = ($5 + [40])
	*($5 + [68]) = ($1 + [8])
	*($5 + [64]) = $1
	*($5 + [72]) = ($1 + [16])
	*($5 + [76]) = ($1 + [24])
	CALL $92(($5 + [64]), ($5 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [384])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [384])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [384])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [384])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	CALL $106(*($1), *($0 + [24]))
	CALL $106(*($1), *($0 + [28]))
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $72($2, ($3 + [4]))
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy(($3 + [16]), *($2 + [4]), [1])
	$4 = (*($2 + [4]) + [1])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [384])
	CALL memcpy(($3 + [24]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $72($2, ($3 + [4]))
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy(($3 + [16]), *($2 + [4]), [1])
	$4 = (*($2 + [4]) + [1])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)$4), [384])
	CALL memcpy(($3 + [17]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [384])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [384])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [384])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [384])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [64])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [384])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $290(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $296($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $291($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $291($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *(($2 + [100]))
	if ( ($3 == 0) ){ goto $label$4 }
	*(($2 + [104])) = $3
	CALL $291($3)
	
.LABEL $label$4
	$3 = *(($2 + [68]))
	if ( ($3 == 0) ){ goto $label$5 }
	*(($2 + [72])) = $3
	CALL $291($3)
	
.LABEL $label$5
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $291(*(($2 + [40])))
	
.LABEL $label$6
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$7 }
	CALL $291(*(($2 + [28])))
	
.LABEL $label$7
	CALL $291($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $291($2)
	
.LABEL $label$8
	return $0
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $290(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $296($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $105(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [400])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $62($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [384])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $107($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $295($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $290($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $295($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $291($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $292($7)
	return (unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $110(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [240])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $111(*($1), *($0 + [36]))
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $112(*($1), *($0 + [44]))
	CALL $113(*($1), *($0 + [48]))
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [240])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [240])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [60])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [240])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	*(($7 = *($1))) = (*($7) + [8])
	*(($7 = *($1))) = (*($7) + [8])
	*(($7 = *($1))) = (*($7) + [1])
	*(($7 = *($1))) = (*($7) + [8])
	$7 = *($2)
	$2 = *($0 + [16])
	$6 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ))
	$3 = *($1)
	$7 = *($3)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	*($3) = $7
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $7)
	
.LABEL $label$2
	*(($7 = *($1))) = (*($7) + [8])
	*(($7 = *($1))) = (*($7) + [1])
	*(($7 = *($1))) = (*($7) + [8])
	*(($7 = *($1))) = (*($7) + [1])
	$3 = *($7)
	$7 = *($0 + [36])
	$2 = *($7 + [4])
	$5 = ($2 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [5]))
	$4 = *($1)
	$7 = *($4)
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$4 }
	$7 = ((((int_32)uint_32(($5 + [-32]) >> [5]) * (int_32)[25]) + $7) + [25])
	
.LABEL $label$4
	*($4) = $7
	*(($7 = *($1))) = (*($7) + [1])
	$3 = *($7)
	$7 = *($0 + [44])
	$2 = *($7 + [4])
	$5 = ($2 - $3)
	$6 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[24]))
	$4 = *($1)
	$7 = *($4)
	
.LOOP $label$5:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	$2 = ($5 + [-24])
	$7 = ((($2 - ((uint_32)$2 % (uint_32)[24])) + $7) + [24])
	
.LABEL $label$6
	*($4) = $7
	$2 = *($7)
	$7 = *($0 + [48])
	$0 = *($7 + [4])
	$4 = ($0 - $2)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$3 = *($1)
	$7 = *($3)
	
.LOOP $label$7:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$8 }
	$7 = (($4 & [-16]) + $7)
	
.LABEL $label$8
	*($3) = $7
	*(($7 = *($1))) = (*($7) + [1])
	*(($7 = *($1))) = (*($7) + [4])
	*(($7 = *($1))) = (*($7) + [4])
}

void .FUNC $212 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$20 = (*([0] + [4]) - [128])
	*([0] + [4]) = $20
	*(($21 = $20) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($21 + [24]) = *($1 + [48])
	*($21 + [32]) = *($1 + [8])
	*($21 + [16]) = *($1)
	*($1 + [64]) = *(*($3))
	CALL eosio_assert([1], [848])
	*($21 + [48]) = [0]
	*($21) = ($21 + [48])
	$5 = ($1 + [8])
	*($21 + [60]) = $5
	*($21 + [56]) = $1
	$7 = ($1 + [10])
	*($21 + [64]) = $7
	$8 = ($1 + [12])
	*($21 + [68]) = $8
	$9 = ($1 + [14])
	*($21 + [72]) = $9
	$10 = ($1 + [16])
	*($21 + [76]) = $10
	$11 = ($1 + [20])
	*($21 + [80]) = $11
	$12 = ($1 + [32])
	*($21 + [84]) = $12
	$4 = ($1 + [48])
	*($21 + [88]) = $4
	$13 = ($1 + [56])
	*($21 + [92]) = $13
	$6 = ($1 + [64])
	*($21 + [96]) = $6
	$14 = ($1 + [96])
	*($21 + [100]) = $14
	$15 = ($1 + [116])
	*($21 + [104]) = $15
	$16 = ($1 + [120])
	*($21 + [108]) = $16
	$17 = ($1 + [136])
	*($21 + [112]) = $17
	$18 = ($1 + [140])
	*($21 + [116]) = $18
	$19 = ($1 + [144])
	*($21 + [120]) = $19
	CALL $179(($21 + [56]), $21)
	$3 = *($21 + [48])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$20 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$20 = ($20 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $20
	
.LABEL $label$1
	*($21 + [4]) = $20
	*($21) = $20
	*($21 + [8]) = ($20 + $3)
	*($21 + [48]) = $21
	*($21 + [60]) = $5
	*($21 + [64]) = $7
	*($21 + [68]) = $8
	*($21 + [72]) = $9
	*($21 + [76]) = $10
	*($21 + [80]) = $11
	*($21 + [56]) = $1
	*($21 + [84]) = $12
	*($21 + [88]) = $4
	*($21 + [92]) = $13
	*($21 + [96]) = $6
	*($21 + [100]) = $14
	*($21 + [104]) = $15
	*($21 + [108]) = $16
	*($21 + [112]) = $17
	*($21 + [116]) = $18
	*($21 + [120]) = $19
	CALL $180(($21 + [56]), ($21 + [48]))
	CALL db_update_i64(*($1 + [152]), *($21 + [40]), $20, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($20)
	
.LABEL $label$3
	$20 = ($0 + [36])
	$2 = *($21 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($21 + [60]) = $1
	*($21 + [56]) = $0
	*($21 + [68]) = $1
	*($21 + [64]) = ($21 + [24])
	*($21 + [72]) = ($21 + [16])
	*($21 + [76]) = ($21 + [40])
	*($21 + [48]) = ($21 + [56])
	CALL $213(($21 + [48]), $20, ($20 + [1]))
	*([0] + [4]) = ($21 + [128])
}

void .FUNC $231 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $297($5, ($1 + [16]))
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $297(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($5 + [16])), (int_32 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $291(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $291(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $219 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	*($11) = (int_64)0
	$8 = [0]
	*($11 + [8]) = [0]
	$3 = *($1 + [8])
	$2 = *($1)
	$9 = (*(($1 + [20])) - *($1 + [16]))
	$6 = int_32($9 >> [3])
	if ( ($6 == 0) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	$9 = CALL $290($9)
	*(($11 + [8])) = ($9 + ($6 << [3]))
	*($11) = $9
	*($11 + [4]) = $9
	$6 = *(($1 + [16]))
	$8 = (*(($1 + [20])) - $6)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($9, $6, $8)
	$8 = ($9 + $8)
	*($11 + [4]) = $8
	goto $label$4 
	
.LABEL $label$6
	$9 = [0]
	$10 = [0]
	$7 = [0]
	goto $label$3 
	
.LABEL $label$5
	$8 = $9
	
.LABEL $label$4
	$10 = $9
	$7 = $9
	
.LABEL $label$3
	$5 = *($1 + [29])
	$4 = *($1 + [28])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$6 = (*(*($0)) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($6) + $1))
	
.LABEL $label$7
	*($11 + [24]) = [0]
	*($11 + [16]) = (int_64)0
	$0 = ($8 - $7)
	$7 = int_32($0 >> [3])
	if ( ($7 == 0) ){ goto $label$8 }
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$1 }
	$0 = CALL $290($0)
	*(($11 + [24])) = ($0 + ($7 << [3]))
	*($11 + [16]) = $0
	*($11 + [20]) = $0
	$8 = ($8 - $10)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($0, $9, $8)
	*($11 + [20]) = ($0 + $8)
	
.LABEL $label$8
	CALL void $6((int_32 $2), (int_64 $3), (int_64 ($11 + [16])), (int_32 ($4 & [255])), (int_32 ($5 & [255])), (int_32 $1))
	$1 = *($11 + [16])
	if ( ($1 == 0) ){ goto $label$9 }
	*($11 + [20]) = $1
	CALL $291($1)
	
.LABEL $label$9
	$1 = *($11)
	if ( ($1 == 0) ){ goto $label$10 }
	*($11 + [4]) = $1
	CALL $291($1)
	
.LABEL $label$10
	*([0] + [4]) = ($11 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $296($11)
	
.LABEL $label$1
	CALL $296(($11 + [16]))
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [80])
	*([0] + [4]) = $4
	*(($3 = $4) + [60]) = $0
	*($3 + [48]) = *($1)
	*($3 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [64]) = $1
	$4 = ($1 + $0)
	*($3 + [72]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [384])
	CALL memcpy(($3 + [8]), $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [384])
	CALL memcpy((($3 + [8]) + [8]), $2, [8])
	*($3 + [68]) = ($1 + [16])
	CALL $106(($3 + [64]), (($3 + [8]) + [16]))
	CALL eosio_assert(((uint_32)(*($3 + [72]) - *($3 + [68])) > (uint_32)[7]), [384])
	CALL memcpy(($3 + [40]), *($3 + [68]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $190(($3 + [64]), ($3 + [8]))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL $291(*(($3 + [32])))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [80])
	return [1]
}

void .FUNC $39 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [368])
	*([0] + [4]) = $8
	$7 = *($0)
	*(($8 + [48])) = $7
	*(($8 + [56])) = (int_64)-1
	*(($8 + [64])) = [0]
	*($8 + [32]) = $1
	*($8 + [24]) = $7
	*($8 + [40]) = $7
	*(($8 + [68])) = [0]
	*(($8 + [72])) = [0]
	*(($8 + [76])) = [0]
	*($8 + [80]) = $7
	*(($8 + [88])) = $7
	*(($8 + [96])) = (int_64)-1
	*(($8 + [104])) = [0]
	*(($8 + [108])) = [0]
	*(($8 + [112])) = [0]
	*($8 + [120]) = $7
	*(($8 + [128])) = $7
	*(($8 + [136])) = (int_64)-1
	*(($8 + [144])) = [0]
	*(($8 + [148])) = [0]
	*(($8 + [152])) = [0]
	*(($8 + [156])) = [0]
	*($8 + [160]) = $7
	*(($8 + [168])) = $7
	*(($8 + [176])) = (int_64)-1
	*(($8 + [184])) = [0]
	*(($8 + [188])) = [0]
	*(($8 + [192])) = [0]
	*(($8 + [196])) = [0]
	*($8 + [200]) = $7
	*(($8 + [208])) = $7
	*(($8 + [216])) = (int_64)-1
	*(($8 + [224])) = [0]
	*(($8 + [228])) = [0]
	*(($8 + [232])) = [0]
	*(($8 + [236])) = [0]
	*($8 + [240]) = $7
	*(($8 + [248])) = $7
	*(($8 + [256])) = (int_64)-1
	*(($8 + [264])) = [0]
	*(($8 + [268])) = [0]
	*(($8 + [272])) = [0]
	*(($8 + [276])) = [0]
	*($8 + [280]) = $7
	*(($8 + [288])) = $7
	*(($8 + [296])) = (int_64)-1
	*(($8 + [304])) = [0]
	*(($8 + [308])) = [0]
	*(($8 + [312])) = [0]
	*($8 + [320]) = [0]
	CALL $53(($8 + [24]))
	CALL $57(($8 + [328]), ($8 + [24]))
	if ( *($8 + [336]) ){ goto $label$1 }
	if ( ((int_64)*($8 + [24]) == (int_64)$1) ){ goto $label$1 }
	$6 = *(($8 + [344]))
	$0 = *($8 + [340])
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$3 }
	$0 = $6
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$6), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($8 + [340])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($8 + [344])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $297(($8 + [8]), $3)
	CALL $185(($8 + [24]), $1, $2, ($8 + [8]), $4, $5)
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $291(*($8 + [16]))
	
.LABEL $label$5
	CALL $54(($8 + [24]))
	*([0] + [4]) = ($8 + [368])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	*(($2 = $3) + [60]) = $0
	*($2 + [48]) = *($1)
	*($2 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = [0]
	*($2 + [68]) = $1
	*($2 + [64]) = $1
	*($2 + [72]) = ($1 + $0)
	*($2 + [80]) = ($2 + [64])
	*($2 + [88]) = $2
	CALL $191(($2 + [88]), ($2 + [80]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [68]) = ($2 + [48])
	*($2 + [64]) = ($2 + [60])
	CALL $192(($2 + [64]), $2)
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $291(*(($2 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [96])
	return [1]
}

void .FUNC $37 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [368])
	*([0] + [4]) = $7
	$6 = *($0)
	*(($7 + [48])) = $6
	*(($7 + [56])) = (int_64)-1
	*(($7 + [64])) = [0]
	*($7 + [32]) = $1
	*($7 + [24]) = $6
	*($7 + [40]) = $6
	*(($7 + [68])) = [0]
	*(($7 + [72])) = [0]
	*(($7 + [76])) = [0]
	*($7 + [80]) = $6
	*(($7 + [88])) = $6
	*(($7 + [96])) = (int_64)-1
	*(($7 + [104])) = [0]
	*(($7 + [108])) = [0]
	*(($7 + [112])) = [0]
	*($7 + [120]) = $6
	*(($7 + [128])) = $6
	*(($7 + [136])) = (int_64)-1
	*(($7 + [144])) = [0]
	*(($7 + [148])) = [0]
	*(($7 + [152])) = [0]
	*(($7 + [156])) = [0]
	*($7 + [160]) = $6
	*(($7 + [168])) = $6
	*(($7 + [176])) = (int_64)-1
	*(($7 + [184])) = [0]
	*(($7 + [188])) = [0]
	*(($7 + [192])) = [0]
	*(($7 + [196])) = [0]
	*($7 + [200]) = $6
	*(($7 + [208])) = $6
	*(($7 + [216])) = (int_64)-1
	*(($7 + [224])) = [0]
	*(($7 + [228])) = [0]
	*(($7 + [232])) = [0]
	*(($7 + [236])) = [0]
	*($7 + [240]) = $6
	*(($7 + [248])) = $6
	*(($7 + [256])) = (int_64)-1
	*(($7 + [264])) = [0]
	*(($7 + [268])) = [0]
	*(($7 + [272])) = [0]
	*(($7 + [276])) = [0]
	*($7 + [280]) = $6
	*(($7 + [288])) = $6
	*(($7 + [296])) = (int_64)-1
	*(($7 + [304])) = [0]
	*(($7 + [308])) = [0]
	*(($7 + [312])) = [0]
	*($7 + [320]) = [0]
	CALL $53(($7 + [24]))
	CALL $57(($7 + [328]), ($7 + [24]))
	if ( *($7 + [336]) ){ goto $label$1 }
	if ( ((int_64)*($7 + [24]) == (int_64)$1) ){ goto $label$1 }
	$5 = *(($7 + [344]))
	$0 = *($7 + [340])
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$3 }
	$0 = $5
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$5), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($7 + [340])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($7 + [344])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $297(($7 + [8]), $3)
	CALL $170(($7 + [24]), $1, $2, ($7 + [8]), $4)
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $291(*($7 + [16]))
	
.LABEL $label$5
	CALL $54(($7 + [24]))
	*([0] + [4]) = ($7 + [368])
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [352])
	*([0] + [4]) = $5
	$4 = *($0)
	*(($5 + [32])) = $4
	*(($5 + [40])) = (int_64)-1
	*(($5 + [48])) = [0]
	*($5 + [16]) = $1
	*($5 + [8]) = $4
	*($5 + [24]) = $4
	*(($5 + [52])) = [0]
	*(($5 + [56])) = [0]
	*(($5 + [60])) = [0]
	*($5 + [64]) = $4
	*(($5 + [72])) = $4
	*(($5 + [80])) = (int_64)-1
	*(($5 + [88])) = [0]
	*(($5 + [92])) = [0]
	*(($5 + [96])) = [0]
	*($5 + [104]) = $4
	*(($5 + [112])) = $4
	*(($5 + [120])) = (int_64)-1
	*(($5 + [128])) = [0]
	*(($5 + [132])) = [0]
	*(($5 + [136])) = [0]
	*(($5 + [140])) = [0]
	*($5 + [144]) = $4
	*(($5 + [152])) = $4
	*(($5 + [160])) = (int_64)-1
	*(($5 + [168])) = [0]
	*(($5 + [172])) = [0]
	*(($5 + [176])) = [0]
	*(($5 + [180])) = [0]
	*($5 + [184]) = $4
	*(($5 + [192])) = $4
	*(($5 + [200])) = (int_64)-1
	*(($5 + [208])) = [0]
	*(($5 + [212])) = [0]
	*(($5 + [216])) = [0]
	*(($5 + [220])) = [0]
	*($5 + [224]) = $4
	*(($5 + [232])) = $4
	*(($5 + [240])) = (int_64)-1
	*(($5 + [248])) = [0]
	*(($5 + [252])) = [0]
	*(($5 + [256])) = [0]
	*(($5 + [260])) = [0]
	*($5 + [264]) = $4
	*(($5 + [272])) = $4
	*(($5 + [280])) = (int_64)-1
	*(($5 + [288])) = [0]
	*(($5 + [292])) = [0]
	*(($5 + [296])) = [0]
	*($5 + [304]) = [0]
	CALL $53(($5 + [8]))
	CALL $57(($5 + [312]), ($5 + [8]))
	if ( *($5 + [320]) ){ goto $label$1 }
	if ( ((int_64)*($5 + [8]) == (int_64)$1) ){ goto $label$1 }
	$3 = *(($5 + [328]))
	$0 = *($5 + [324])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$3 }
	$0 = $3
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$3), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($5 + [324])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($5 + [328])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $198(($5 + [8]), $1, $2)
	CALL $54(($5 + [8]))
	*([0] + [4]) = ($5 + [352])
}

void .FUNC $35 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [368])
	*([0] + [4]) = $8
	$7 = *($0)
	*(($8 + [48])) = $7
	*(($8 + [56])) = (int_64)-1
	*(($8 + [64])) = [0]
	*($8 + [32]) = $1
	*($8 + [24]) = $7
	*($8 + [40]) = $7
	*(($8 + [68])) = [0]
	*(($8 + [72])) = [0]
	*(($8 + [76])) = [0]
	*($8 + [80]) = $7
	*(($8 + [88])) = $7
	*(($8 + [96])) = (int_64)-1
	*(($8 + [104])) = [0]
	*(($8 + [108])) = [0]
	*(($8 + [112])) = [0]
	*($8 + [120]) = $7
	*(($8 + [128])) = $7
	*(($8 + [136])) = (int_64)-1
	*(($8 + [144])) = [0]
	*(($8 + [148])) = [0]
	*(($8 + [152])) = [0]
	*(($8 + [156])) = [0]
	*($8 + [160]) = $7
	*(($8 + [168])) = $7
	*(($8 + [176])) = (int_64)-1
	*(($8 + [184])) = [0]
	*(($8 + [188])) = [0]
	*(($8 + [192])) = [0]
	*(($8 + [196])) = [0]
	*($8 + [200]) = $7
	*(($8 + [208])) = $7
	*(($8 + [216])) = (int_64)-1
	*(($8 + [224])) = [0]
	*(($8 + [228])) = [0]
	*(($8 + [232])) = [0]
	*(($8 + [236])) = [0]
	*($8 + [240]) = $7
	*(($8 + [248])) = $7
	*(($8 + [256])) = (int_64)-1
	*(($8 + [264])) = [0]
	*(($8 + [268])) = [0]
	*(($8 + [272])) = [0]
	*(($8 + [276])) = [0]
	*($8 + [280]) = $7
	*(($8 + [288])) = $7
	*(($8 + [296])) = (int_64)-1
	*(($8 + [304])) = [0]
	*(($8 + [308])) = [0]
	*(($8 + [312])) = [0]
	*($8 + [320]) = [0]
	CALL $53(($8 + [24]))
	CALL $57(($8 + [328]), ($8 + [24]))
	if ( *($8 + [336]) ){ goto $label$1 }
	if ( ((int_64)*($8 + [24]) == (int_64)$1) ){ goto $label$1 }
	$6 = *(($8 + [344]))
	$0 = *($8 + [340])
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$3 }
	$0 = $6
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$6), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($8 + [340])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($8 + [344])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $297(($8 + [8]), $3)
	CALL $193(($8 + [24]), $1, $2, ($8 + [8]), $4, $5)
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $291(*($8 + [16]))
	
.LABEL $label$5
	CALL $54(($8 + [24]))
	*([0] + [4]) = ($8 + [368])
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [352])
	*([0] + [4]) = $6
	$5 = *($0)
	*(($6 + [32])) = $5
	*(($6 + [40])) = (int_64)-1
	*(($6 + [48])) = [0]
	*($6 + [16]) = $1
	*($6 + [8]) = $5
	*($6 + [24]) = $5
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = $5
	*(($6 + [72])) = $5
	*(($6 + [80])) = (int_64)-1
	*(($6 + [88])) = [0]
	*(($6 + [92])) = [0]
	*(($6 + [96])) = [0]
	*($6 + [104]) = $5
	*(($6 + [112])) = $5
	*(($6 + [120])) = (int_64)-1
	*(($6 + [128])) = [0]
	*(($6 + [132])) = [0]
	*(($6 + [136])) = [0]
	*(($6 + [140])) = [0]
	*($6 + [144]) = $5
	*(($6 + [152])) = $5
	*(($6 + [160])) = (int_64)-1
	*(($6 + [168])) = [0]
	*(($6 + [172])) = [0]
	*(($6 + [176])) = [0]
	*(($6 + [180])) = [0]
	*($6 + [184]) = $5
	*(($6 + [192])) = $5
	*(($6 + [200])) = (int_64)-1
	*(($6 + [208])) = [0]
	*(($6 + [212])) = [0]
	*(($6 + [216])) = [0]
	*(($6 + [220])) = [0]
	*($6 + [224]) = $5
	*(($6 + [232])) = $5
	*(($6 + [240])) = (int_64)-1
	*(($6 + [248])) = [0]
	*(($6 + [252])) = [0]
	*(($6 + [256])) = [0]
	*(($6 + [260])) = [0]
	*($6 + [264]) = $5
	*(($6 + [272])) = $5
	*(($6 + [280])) = (int_64)-1
	*(($6 + [288])) = [0]
	*(($6 + [292])) = [0]
	*(($6 + [296])) = [0]
	*($6 + [304]) = [0]
	CALL $53(($6 + [8]))
	CALL $57(($6 + [312]), ($6 + [8]))
	if ( *($6 + [320]) ){ goto $label$1 }
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$1 }
	$4 = *(($6 + [328]))
	$0 = *($6 + [324])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$3 }
	$0 = $4
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$4), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($6 + [324])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [328])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $204(($6 + [8]), $1, $2, $3)
	CALL $54(($6 + [8]))
	*([0] + [4]) = ($6 + [352])
}

void .FUNC $33 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [352])
	*([0] + [4]) = $6
	$5 = *($0)
	*(($6 + [32])) = $5
	*(($6 + [40])) = (int_64)-1
	*(($6 + [48])) = [0]
	*($6 + [16]) = $1
	*($6 + [8]) = $5
	*($6 + [24]) = $5
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = $5
	*(($6 + [72])) = $5
	*(($6 + [80])) = (int_64)-1
	*(($6 + [88])) = [0]
	*(($6 + [92])) = [0]
	*(($6 + [96])) = [0]
	*($6 + [104]) = $5
	*(($6 + [112])) = $5
	*(($6 + [120])) = (int_64)-1
	*(($6 + [128])) = [0]
	*(($6 + [132])) = [0]
	*(($6 + [136])) = [0]
	*(($6 + [140])) = [0]
	*($6 + [144]) = $5
	*(($6 + [152])) = $5
	*(($6 + [160])) = (int_64)-1
	*(($6 + [168])) = [0]
	*(($6 + [172])) = [0]
	*(($6 + [176])) = [0]
	*(($6 + [180])) = [0]
	*($6 + [184]) = $5
	*(($6 + [192])) = $5
	*(($6 + [200])) = (int_64)-1
	*(($6 + [208])) = [0]
	*(($6 + [212])) = [0]
	*(($6 + [216])) = [0]
	*(($6 + [220])) = [0]
	*($6 + [224]) = $5
	*(($6 + [232])) = $5
	*(($6 + [240])) = (int_64)-1
	*(($6 + [248])) = [0]
	*(($6 + [252])) = [0]
	*(($6 + [256])) = [0]
	*(($6 + [260])) = [0]
	*($6 + [264]) = $5
	*(($6 + [272])) = $5
	*(($6 + [280])) = (int_64)-1
	*(($6 + [288])) = [0]
	*(($6 + [292])) = [0]
	*(($6 + [296])) = [0]
	*($6 + [304]) = [0]
	CALL $53(($6 + [8]))
	CALL $57(($6 + [312]), ($6 + [8]))
	if ( *($6 + [320]) ){ goto $label$1 }
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$1 }
	$4 = *(($6 + [328]))
	$0 = *($6 + [324])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$3 }
	$0 = $4
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$4), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($6 + [324])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [328])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $201(($6 + [8]), $1, $2, $3)
	CALL $54(($6 + [8]))
	*([0] + [4]) = ($6 + [352])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$7 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($9 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [384])
	CALL memcpy(($8 + [8]), $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [384])
	$9 = (($8 + [8]) + [8])
	CALL memcpy($9, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [384])
	$5 = (($8 + [8]) + [16])
	CALL memcpy($5, ($6 + [16]), [1])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$6 = *($5)
	$4 = *($9)
	$3 = *($8 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$7 = *((*($1) + $7))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $4), (int_64 ($6 & [255])), (int_32 $7))
	*([0] + [4]) = ($8 + [32])
	return [1]
}

void .FUNC $31 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [352])
	*([0] + [4]) = $6
	$5 = *($0)
	*(($6 + [32])) = $5
	*(($6 + [40])) = (int_64)-1
	*(($6 + [48])) = [0]
	*($6 + [16]) = $1
	*($6 + [8]) = $5
	*($6 + [24]) = $5
	*(($6 + [52])) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = $5
	*(($6 + [72])) = $5
	*(($6 + [80])) = (int_64)-1
	*(($6 + [88])) = [0]
	*(($6 + [92])) = [0]
	*(($6 + [96])) = [0]
	*($6 + [104]) = $5
	*(($6 + [112])) = $5
	*(($6 + [120])) = (int_64)-1
	*(($6 + [128])) = [0]
	*(($6 + [132])) = [0]
	*(($6 + [136])) = [0]
	*(($6 + [140])) = [0]
	*($6 + [144]) = $5
	*(($6 + [152])) = $5
	*(($6 + [160])) = (int_64)-1
	*(($6 + [168])) = [0]
	*(($6 + [172])) = [0]
	*(($6 + [176])) = [0]
	*(($6 + [180])) = [0]
	*($6 + [184]) = $5
	*(($6 + [192])) = $5
	*(($6 + [200])) = (int_64)-1
	*(($6 + [208])) = [0]
	*(($6 + [212])) = [0]
	*(($6 + [216])) = [0]
	*(($6 + [220])) = [0]
	*($6 + [224]) = $5
	*(($6 + [232])) = $5
	*(($6 + [240])) = (int_64)-1
	*(($6 + [248])) = [0]
	*(($6 + [252])) = [0]
	*(($6 + [256])) = [0]
	*(($6 + [260])) = [0]
	*($6 + [264]) = $5
	*(($6 + [272])) = $5
	*(($6 + [280])) = (int_64)-1
	*(($6 + [288])) = [0]
	*(($6 + [292])) = [0]
	*(($6 + [296])) = [0]
	*($6 + [304]) = [0]
	CALL $53(($6 + [8]))
	CALL $57(($6 + [312]), ($6 + [8]))
	if ( *($6 + [320]) ){ goto $label$1 }
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$1 }
	$4 = *(($6 + [328]))
	$0 = *($6 + [324])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	$0 = ($0 + [8])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$3 }
	$0 = $4
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$0 != (int_32)$4), [1216])
	
.LABEL $label$1
	CALL require_auth($1)
	$0 = *($6 + [324])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($6 + [328])) = $0
	CALL $291($0)
	
.LABEL $label$4
	CALL $207(($6 + [8]), $1, $2, $3)
	CALL $54(($6 + [8]))
	*([0] + [4]) = ($6 + [352])
}

void .FUNC $215 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($10 + [24]) = $3
	*($10 + [16]) = $4
	$5 = *(($0 + [80]))
	$9 = *(($0 + [84]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [56])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$4 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$7), [256])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $88($7, $9)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$7), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1232])
	$5 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$5 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$6:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$5 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$7 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$8 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [148]) == (int_32)$7), [256])
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $87($7, $9)
	CALL eosio_assert(((int_32)*($8 + [148]) == (int_32)$7), [256])
	
.LABEL $label$7
	$9 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($9, [1264])
	CALL eosio_assert(((int_64)*($8 + [48]) == (int_64)$1), [2368])
	CALL eosio_assert((uint_64)($3 <= (int_64)5001), [2656])
	CALL eosio_assert((int_64)(((uint_64)$3 % (uint_64)(int_64)100) == 0), [2688])
	CALL eosio_assert((uint_64)($4 <= (int_64)999901), [2736])
	CALL eosio_assert((int_64)(((uint_64)$4 % (uint_64)(int_64)100) == 0), [2768])
	$1 = *($0 + [8])
	*($10 + [12]) = ($10 + [16])
	*($10 + [8]) = ($10 + [24])
	CALL eosio_assert($9, [688])
	CALL $216($7, $8, $1, ($10 + [8]))
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $214 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [384])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $217 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $216 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [128])
	*([0] + [4]) = $22
	*(($21 = $22) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($21 + [24]) = *($1 + [48])
	*($21 + [32]) = *($1 + [8])
	*($21 + [16]) = *($1)
	*($1 + [120]) = *(*($3))
	*(($1 + [128])) = *(*($3 + [4]))
	CALL eosio_assert([1], [848])
	*($21 + [48]) = [0]
	*($21) = ($21 + [48])
	$5 = ($1 + [8])
	*($21 + [60]) = $5
	*($21 + [56]) = $1
	$6 = ($1 + [10])
	*($21 + [64]) = $6
	$7 = ($1 + [12])
	*($21 + [68]) = $7
	$8 = ($1 + [14])
	*($21 + [72]) = $8
	$9 = ($1 + [16])
	*($21 + [76]) = $9
	$10 = ($1 + [20])
	*($21 + [80]) = $10
	$11 = ($1 + [32])
	*($21 + [84]) = $11
	$4 = ($1 + [48])
	*($21 + [88]) = $4
	$12 = ($1 + [56])
	*($21 + [92]) = $12
	$13 = ($1 + [64])
	*($21 + [96]) = $13
	$14 = ($1 + [96])
	*($21 + [100]) = $14
	$15 = ($1 + [116])
	*($21 + [104]) = $15
	$16 = ($1 + [120])
	*($21 + [108]) = $16
	$17 = ($1 + [136])
	*($21 + [112]) = $17
	$18 = ($1 + [140])
	*($21 + [116]) = $18
	$19 = ($1 + [144])
	*($21 + [120]) = $19
	CALL $179(($21 + [56]), $21)
	$20 = *($21 + [48])
	if ( ($20 <= [513]) ){ goto $label$2 }
	$3 = CALL malloc($20)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($22 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$1
	*($21 + [4]) = $3
	*($21) = $3
	*($21 + [8]) = ($3 + $20)
	*($21 + [48]) = $21
	*($21 + [60]) = $5
	*($21 + [64]) = $6
	*($21 + [68]) = $7
	*($21 + [72]) = $8
	*($21 + [76]) = $9
	*($21 + [80]) = $10
	*($21 + [56]) = $1
	*($21 + [84]) = $11
	*($21 + [88]) = $4
	*($21 + [92]) = $12
	*($21 + [96]) = $13
	*($21 + [100]) = $14
	*($21 + [104]) = $15
	*($21 + [108]) = $16
	*($21 + [112]) = $17
	*($21 + [116]) = $18
	*($21 + [120]) = $19
	CALL $180(($21 + [56]), ($21 + [48]))
	CALL db_update_i64(*($1 + [152]), *($21 + [40]), $3, $20)
	if ( ($20 <= [513]) ){ goto $label$3 }
	CALL free($3)
	
.LABEL $label$3
	$3 = ($0 + [36])
	$2 = *($21 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($21 + [60]) = $1
	*($21 + [56]) = $0
	*($21 + [68]) = $1
	*($21 + [64]) = ($21 + [24])
	*($21 + [72]) = ($21 + [16])
	*($21 + [76]) = ($21 + [40])
	*($21 + [48]) = ($21 + [56])
	CALL $217(($21 + [48]), $3, ($3 + [1]))
	*([0] + [4]) = ($21 + [128])
}

void .FUNC $211 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($9 + [31]) = $3
	$4 = *(($0 + [80]))
	$8 = *(($0 + [84]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [56])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $88($6, $8)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$6), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1232])
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$5 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $87($6, $8)
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$6), [256])
	
.LABEL $label$7
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [1264])
	CALL eosio_assert(((int_64)*($7 + [48]) == (int_64)$1), [2368])
	CALL eosio_assert(((int_32)($3 | [1]) == (int_32)[1]), [2400])
	if ( ($3 == 0) ){ goto $label$10 }
	*($9 + [24]) = [0]
	*($9 + [16]) = (int_64)0
	$5 = (*(($7 + [72])) - *(($7 + [68])))
	$3 = int_32($5 >> [3])
	if ( ($3 == 0) ){ goto $label$11 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$9 }
	$5 = CALL $290($5)
	*(($9 + [24])) = ($5 + ($3 << [3]))
	*($9 + [16]) = $5
	*($9 + [20]) = $5
	$4 = *(($7 + [68]))
	$3 = (*(($7 + [72])) - $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($5, $4, $3)
	*($9 + [20]) = ($5 + $3)
	
.LABEL $label$11
	CALL $208(($9 + [16]))
	$5 = *($9 + [16])
	if ( ($5 == 0) ){ goto $label$12 }
	*($9 + [20]) = $5
	CALL $291($5)
	
.LABEL $label$12
	CALL eosio_assert((((*(($7 + [80])) + [-2]) & [255]) <= [10]), [2432])
	$1 = *(($7 + [88]))
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)-10000) <= (int_64)90001), [2592])
	CALL eosio_assert((int_64)(((uint_64)$1 % (uint_64)(int_64)1000) == 0), [2624])
	
.LABEL $label$10
	$1 = *($0 + [8])
	*($9 + [8]) = ($9 + [31])
	CALL eosio_assert($8, [688])
	CALL $212($6, $7, $1, ($9 + [8]))
	*([0] + [4]) = ($9 + [32])
	return (unreachable)
	
.LABEL $label$9
	CALL $296(($9 + [16]))
}

void .FUNC $210 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $198 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$5 = *(($0 + [80]))
	$8 = *(($0 + [84]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$3 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [56])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$4), [256])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $88($4, $8)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$4), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1232])
	$6 = *(($0 + [120]))
	$8 = *(($0 + [124]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$5 }
	$7 = ($8 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$5 }
	$8 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [96])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$8 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$5), [256])
	goto $label$7 
	
.LABEL $label$8
	$7 = CALL db_find_i64(*(($0 + [96])), *(($0 + [104])), (int_64)7343588593878171648, $2)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$9 }
	$7 = CALL $135($5, $7)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$5), [256])
	goto $label$7 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$7
	*($9 + [4]) = $7
	*($9) = $5
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [2256])
	CALL eosio_assert(((int_32)*($7 + [33]) != (int_32)[1]), [2288])
	CALL eosio_assert(((int_64)*($7 + [16]) == (int_64)$1), [2336])
	$1 = *($7 + [8])
	$6 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$10 }
	$7 = ($8 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$11:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$10 }
	$8 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$13 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$4), [256])
	goto $label$12 
	
.LABEL $label$13
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$12 }
	$7 = CALL $87($4, $8)
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$4), [256])
	
.LABEL $label$12
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [1264])
	$1 = *($0 + [8])
	*($9 + [8]) = $9
	CALL eosio_assert($8, [688])
	CALL $199($4, $7, $1, ($9 + [8]))
	$1 = *($9)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$4 = ((int_32)$7) != (int_32)[0]
	CALL eosio_assert($4), [416])
	CALL eosio_assert($4, [464])
	$4 = CALL db_next_i64(*($7 + [44]), ($9 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$14 }
	CALL $135((CASTING uint_32)(uint_64 $1), $4)
	
.LABEL $label$14
	CALL $136($5, $7)
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $199 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$20 = (*([0] + [4]) - [128])
	*([0] + [4]) = $20
	*(($21 = $20) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($21 + [24]) = *($1 + [48])
	*($21 + [32]) = *($1 + [8])
	*($21 + [16]) = *($1)
	$5 = ($1 + [8])
	$4 = ($1 + [48])
	$3 = *(*(*($3) + [4]) + [33])
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$3 }
	if ( $3 ){ goto $label$1 }
	$3 = ($1 + [10])
	goto $label$2 
	
.LABEL $label$3
	$3 = ($1 + [14])
	
.LABEL $label$2
	*($3) = (*($3) + [65535])
	
.LABEL $label$1
	CALL eosio_assert([1], [848])
	*($21 + [48]) = [0]
	*($21) = ($21 + [48])
	*($21 + [60]) = $5
	*($21 + [56]) = $1
	$6 = ($1 + [10])
	*($21 + [64]) = $6
	$7 = ($1 + [12])
	*($21 + [68]) = $7
	$8 = ($1 + [14])
	*($21 + [72]) = $8
	$9 = ($1 + [16])
	*($21 + [76]) = $9
	$10 = ($1 + [20])
	*($21 + [80]) = $10
	$11 = ($1 + [32])
	*($21 + [84]) = $11
	*($21 + [88]) = $4
	$12 = ($1 + [56])
	*($21 + [92]) = $12
	$13 = ($1 + [64])
	*($21 + [96]) = $13
	$14 = ($1 + [96])
	*($21 + [100]) = $14
	$15 = ($1 + [116])
	*($21 + [104]) = $15
	$16 = ($1 + [120])
	*($21 + [108]) = $16
	$17 = ($1 + [136])
	*($21 + [112]) = $17
	$18 = ($1 + [140])
	*($21 + [116]) = $18
	$19 = ($1 + [144])
	*($21 + [120]) = $19
	CALL $179(($21 + [56]), $21)
	$3 = *($21 + [48])
	if ( ($3 <= [513]) ){ goto $label$5 }
	$20 = CALL malloc($3)
	goto $label$4 
	
.LABEL $label$5
	$20 = ($20 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $20
	
.LABEL $label$4
	*($21 + [4]) = $20
	*($21) = $20
	*($21 + [8]) = ($20 + $3)
	*($21 + [48]) = $21
	*($21 + [60]) = $5
	*($21 + [64]) = $6
	*($21 + [68]) = $7
	*($21 + [72]) = $8
	*($21 + [76]) = $9
	*($21 + [80]) = $10
	*($21 + [56]) = $1
	*($21 + [84]) = $11
	*($21 + [88]) = $4
	*($21 + [92]) = $12
	*($21 + [96]) = $13
	*($21 + [100]) = $14
	*($21 + [104]) = $15
	*($21 + [108]) = $16
	*($21 + [112]) = $17
	*($21 + [116]) = $18
	*($21 + [120]) = $19
	CALL $180(($21 + [56]), ($21 + [48]))
	CALL db_update_i64(*($1 + [152]), *($21 + [40]), $20, $3)
	if ( ($3 <= [513]) ){ goto $label$6 }
	CALL free($20)
	
.LABEL $label$6
	$20 = ($0 + [36])
	$2 = *($21 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($21 + [60]) = $1
	*($21 + [56]) = $0
	*($21 + [68]) = $1
	*($21 + [64]) = ($21 + [24])
	*($21 + [72]) = ($21 + [16])
	*($21 + [76]) = ($21 + [40])
	*($21 + [48]) = ($21 + [56])
	CALL $200(($21 + [48]), $20, ($20 + [1]))
	*([0] + [4]) = ($21 + [128])
}

void .FUNC $196 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [48])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [156])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)7343588134136840192, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [156]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7343588134136840193, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [160])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $197 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	$23 = *($0 + [4])
	*($1) = *(*($23))
	*($1 + [8]) = *(*($23 + [4]))
	$2 = *($0)
	*($1 + [16]) = [0]
	*($1 + [24]) = *(*($23 + [8]))
	$6 = ($1 + [32])
	CALL $293($6, *($23 + [12]))
	*($1 + [48]) = *(*($23 + [16]))
	*($1 + [56]) = *((*(*($23 + [20]) + [4]) + [80]))
	*($1 + [64]) = *((*(*($23 + [20]) + [4]) + [88]))
	$23 = *(*($23 + [24]))
	*($1 + [116]) = [0]
	*($1 + [72]) = $23
	*($1 + [120]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [124]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [300])
	*(($23 = $22) + [24]) = [0]
	*($23 + [8]) = ($23 + [24])
	$3 = ($1 + [8])
	*($23 + [36]) = $3
	*($23 + [32]) = $1
	$4 = ($1 + [16])
	*($23 + [40]) = $4
	$5 = ($1 + [24])
	*($23 + [44]) = $5
	*($23 + [48]) = $6
	$7 = ($1 + [48])
	*($23 + [52]) = $7
	$8 = ($1 + [56])
	*($23 + [56]) = $8
	$9 = ($1 + [64])
	*($23 + [60]) = $9
	$10 = ($1 + [72])
	*($23 + [64]) = $10
	$14 = ($1 + [76])
	*($23 + [68]) = $14
	$15 = ($1 + [88])
	*($23 + [72]) = $15
	$16 = ($1 + [92])
	*($23 + [76]) = $16
	$17 = ($1 + [104])
	*($23 + [80]) = $17
	$11 = ($1 + [116])
	*($23 + [84]) = $11
	$12 = ($1 + [120])
	*($23 + [88]) = $12
	$13 = ($1 + [124])
	*($23 + [92]) = $13
	CALL $108(($23 + [32]), ($23 + [8]))
	$18 = *($23 + [24])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($18)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($18 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($23 + [12]) = $22
	*($23 + [8]) = $22
	*($23 + [16]) = ($22 + $18)
	*($23 + [24]) = ($23 + [8])
	*($23 + [36]) = $3
	*($23 + [32]) = $1
	*($23 + [40]) = $4
	*($23 + [44]) = $5
	*($23 + [48]) = $6
	*($23 + [52]) = $7
	*($23 + [56]) = $8
	*($23 + [60]) = $9
	*($23 + [64]) = $10
	*($23 + [68]) = $14
	*($23 + [72]) = $15
	*($23 + [76]) = $16
	*($23 + [80]) = $17
	*($23 + [84]) = $11
	*($23 + [88]) = $12
	*($23 + [92]) = $13
	CALL $109(($23 + [32]), ($23 + [24]))
	$19 = *($1)
	*($1 + [132]) = CALL db_store_i64(*($2 + [8]), (int_64)-6228196809676685312, *(*($0 + [8])), $19, $22, $18)
	if ( ($18 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($19 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$19 + (int_64)1) : ((uint_64)$19 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$19 = *(($2 + [8]))
	$20 = *(*(($0 + [8])))
	$21 = *($1)
	*($23 + [32]) = *(($1 + [8]))
	*($1 + [136]) = CALL db_idx64_store($19, (int_64)-6228196809676685312, $20, $21, ($23 + [32]))
	*([0] + [4]) = ($23 + [96])
}

void .FUNC $194 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [912])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $290([144])) + [40]) = [0]
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [76]) = [0]
	*($3 + [80]) = [0]
	*($3 + [84]) = [0]
	*($3 + [92]) = [0]
	*($3 + [96]) = [0]
	*($3 + [100]) = [0]
	*($3 + [104]) = [0]
	*($3 + [108]) = [0]
	*($3 + [112]) = [0]
	*($3 + [128]) = $1
	CALL $197(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [132])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $116(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [104])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [108])) = $1
	CALL $291($1)
	
.LABEL $label$4
	$1 = *($3 + [92])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [96])) = $1
	CALL $291($1)
	
.LABEL $label$5
	$1 = *($3 + [76])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [80])) = $1
	CALL $291($1)
	
.LABEL $label$6
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $291(*(($3 + [40])))
	
.LABEL $label$7
	CALL $291($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $195 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [128])
	*([0] + [4]) = $21
	*(($22 = $21) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [148]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [784])
	*($22 + [24]) = *($1 + [48])
	*($22 + [32]) = *($1 + [8])
	$2 = *($1)
	*($22 + [16]) = $2
	*($1 + [140]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [144]) = (*($1 + [144]) + [1])
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [848])
	*($22 + [48]) = [0]
	*($22) = ($22 + [48])
	$5 = ($1 + [8])
	*($22 + [60]) = $5
	*($22 + [56]) = $1
	$8 = ($1 + [10])
	*($22 + [64]) = $8
	$9 = ($1 + [12])
	*($22 + [68]) = $9
	$10 = ($1 + [14])
	*($22 + [72]) = $10
	$11 = ($1 + [16])
	*($22 + [76]) = $11
	$12 = ($1 + [20])
	*($22 + [80]) = $12
	$13 = ($1 + [32])
	*($22 + [84]) = $13
	$4 = ($1 + [48])
	*($22 + [88]) = $4
	$14 = ($1 + [56])
	*($22 + [92]) = $14
	$15 = ($1 + [64])
	*($22 + [96]) = $15
	$16 = ($1 + [96])
	*($22 + [100]) = $16
	$17 = ($1 + [116])
	*($22 + [104]) = $17
	$18 = ($1 + [120])
	*($22 + [108]) = $18
	$19 = ($1 + [136])
	*($22 + [112]) = $19
	$6 = ($1 + [140])
	*($22 + [116]) = $6
	$7 = ($1 + [144])
	*($22 + [120]) = $7
	CALL $179(($22 + [56]), $22)
	$20 = *($22 + [48])
	if ( ($20 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($20)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $20)
	*($22 + [48]) = $22
	*($22 + [60]) = $5
	*($22 + [64]) = $8
	*($22 + [68]) = $9
	*($22 + [72]) = $10
	*($22 + [76]) = $11
	*($22 + [80]) = $12
	*($22 + [56]) = $1
	*($22 + [84]) = $13
	*($22 + [88]) = $4
	*($22 + [92]) = $14
	*($22 + [96]) = $15
	*($22 + [100]) = $16
	*($22 + [104]) = $17
	*($22 + [108]) = $18
	*($22 + [112]) = $19
	*($22 + [116]) = $6
	*($22 + [120]) = $7
	CALL $180(($22 + [56]), ($22 + [48]))
	CALL db_update_i64(*($1 + [152]), *($22 + [40]), $21, $20)
	if ( ($20 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	$21 = ($0 + [36])
	$2 = *($22 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($22 + [60]) = $1
	*($22 + [56]) = $0
	*($22 + [68]) = $1
	*($22 + [64]) = ($22 + [24])
	*($22 + [72]) = ($22 + [16])
	*($22 + [76]) = ($22 + [40])
	*($22 + [48]) = ($22 + [56])
	CALL $196(($22 + [48]), $21, ($21 + [1]))
	*([0] + [4]) = ($22 + [128])
}

void .FUNC $192 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $297($7, ($1 + [16]))
	$5 = *($1 + [40])
	$4 = *($1 + [32])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*(*($0)) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $297(($7 + [16]), $7)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($7 + [16])), (int_32 $4), (int_64 ($5 & [255])), (int_32 $1))
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $291(*($7 + [24]))
	
.LABEL $label$2
	if ( ((*($7) & [1]) == 0) ){ goto $label$3 }
	CALL $291(*($7 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $193 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [160])
	*([0] + [4]) = $12
	*($12 + [152]) = $1
	*($12 + [144]) = $2
	*($12 + [136]) = $4
	*($12 + [135]) = $5
	$11 = *(($0 + [80]))
	$10 = *(($0 + [84]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$1 }
	$5 = ($10 + [-24])
	$6 = ([0] - $11)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$10 = $5
	$8 = ($5 + [-24])
	$5 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [56])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$4 }
	$11 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$5), [256])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$8 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $88($5, $8)
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$5), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [1232])
	$7 = *(($0 + [40]))
	$10 = *(($0 + [44]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$5 }
	$5 = ($10 + [-24])
	$6 = ([0] - $7)
	
.LOOP $label$6:
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$5 }
	$10 = $5
	$8 = ($5 + [-24])
	$5 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [16])
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$8 }
	$5 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [148]) == (int_32)$6), [256])
	goto $label$7 
	
.LABEL $label$8
	$5 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7343588134136840192, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	$5 = CALL $87($6, $5)
	CALL eosio_assert(((int_32)*($5 + [148]) == (int_32)$6), [256])
	goto $label$7 
	
.LABEL $label$9
	$5 = [0]
	
.LABEL $label$7
	*($12 + [124]) = $5
	*($12 + [120]) = $6
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1264])
	*($0 + [296]) = *($5 + [8])
	*(($12 + [112])) = [0]
	*($12 + [96]) = (int_64)-1
	*($12 + [104]) = (int_64)0
	$2 = *($0)
	*($12 + [80]) = $2
	*($12 + [88]) = $2
	*($12 + [116]) = [0]
	*($12 + [72]) = ($12 + [80])
	CALL $160(($12 + [64]), ($12 + [72]), ($12 + [144]))
	$5 = *($12 + [68])
	if ( ($5 == 0) ){ goto $label$11 }
	
.LOOP $label$12:
	if ( ((int_64)*($5 + [8]) != (int_64)*($12 + [144])) ){ goto $label$11 }
	if ( ((int_64)*($5 + [16]) != (int_64)*($12 + [152])) ){ goto $label$13 }
	$8 = [1]
	if ( ((int_32)*($5 + [33]) == (int_32)[1]) ){ goto $label$10 }
	
.LABEL $label$13
	CALL $161(($12 + [64]))
	$5 = *($12 + [68])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$11
	$8 = [0]
	
.LABEL $label$10
	CALL eosio_assert($8, [1776])
	CALL eosio_assert(((int_32)*(*($12 + [124]) + [64]) == (int_32)[1]), [2192])
	CALL $297(($12 + [48]), $3)
	$5 = *($12 + [48])
	CALL eosio_assert(((( *($12 + [52]) ? uint_32($5 >> [1]) : ($5 & [1]) ) + [-2]) <= [29]), [2000])
	if ( ((*($12 + [48]) & [1]) == 0) ){ goto $label$14 }
	CALL $291(*($12 + [56]))
	
.LABEL $label$14
	$2 = *($12 + [136])
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)-100) <= (int_64)999801), [2032])
	CALL eosio_assert((*($12 + [135]) <= [10]), [2224])
	CALL eosio_assert(((uint_64)*($11 + [16]) >= (uint_64)$2), [1328])
	$4 = *([0] + [24])
	$1 = *($12 + [152])
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$15 }
	$9 = (int_64)
	CALL $89($0, $1, $9((int_64)0 - $2)))
	CALL $90($0, $1, [4], $9, (int_64)0, (int_64)0)
	$1 = *($0)
	
.LABEL $label$15
	if ( ((int_64)$1 == (int_64)$4) ){ goto $label$16 }
	CALL $89($0, $4, $2)
	CALL $90($0, $4, [4], $2, (int_64)0, (int_64)0)
	
.LABEL $label$16
	$5 = ($0 + [216])
	$8 = ($0 + [232])
	$2 = *($8)
	if ( ((int_64)$2 != (int_64)-1) ){ goto $label$17 }
	$2 = (int_64)0
	$10 = CALL db_lowerbound_i64(*($5), *(($0 + [224])), (int_64)-6228196809676685312, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$18 }
	CALL $80($5, $10)
	*($12 + [12]) = [0]
	*($12 + [8]) = $5
	$2 = *(*(CALL $174(($12 + [8])) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	*(($0 + [232])) = $2
	
.LABEL $label$17
	CALL eosio_assert((uint_64)($2 <= (int_64)-2), [976])
	*($12 + [40]) = *($8)
	$2 = *($0)
	*($12 + [20]) = $3
	*($12 + [12]) = ($12 + [144])
	*($12 + [8]) = ($12 + [40])
	*($12 + [16]) = ($12 + [152])
	*($12 + [24]) = ($12 + [136])
	*($12 + [28]) = ($12 + [120])
	*($12 + [32]) = ($12 + [135])
	CALL $194($12, $5, $2, ($12 + [8]))
	$2 = *($0 + [8])
	$5 = *($12 + [124])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [688])
	CALL $195($6, $5, $2, ($12 + [8]))
	CALL $177($0, *($12 + [40]))
	$0 = *($12 + [104])
	if ( ($0 == 0) ){ goto $label$19 }
	$10 = ($12 + [108])
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$23 }
	CALL $291($8)
	
.LABEL $label$23
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($12 + [104]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $0
	
.LABEL $label$20
	*($10) = $0
	CALL $291($5)
	
.LABEL $label$19
	*([0] + [4]) = ($12 + [160])
}

void .FUNC $190 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $297($6, ($1 + [16]))
	$4 = *($1 + [32])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $297(($6 + [16]), $6)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($6 + [16])), (int_32 $4), (int_64 $1))
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $291(*($6 + [24]))
	
.LABEL $label$2
	if ( ((*($6) & [1]) == 0) ){ goto $label$3 }
	CALL $291(*($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $191 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [384])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [384])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $106(*($1), ($2 + [16]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [384])
	CALL memcpy(($2 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [384])
	CALL memcpy(($2 + [40]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
}