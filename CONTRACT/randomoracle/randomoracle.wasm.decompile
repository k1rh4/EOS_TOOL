(data (i32.const 4) "py\00\00")
(data (i32.const 16) "cannot increment end iterator\00")
(data (i32.const 48) "error reading iterator\00")
(data (i32.const 80) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 144) "invalid symbol name\00")
(data (i32.const 176) "read\00")
(data (i32.const 192) "get\00")
(data (i32.const 208) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 272) "window already exists.\00")
(data (i32.const 304) "cannot create objects in table of another contract\00")
(data (i32.const 368) "write\00")
(data (i32.const 384) "cannot pass end iterator to erase\00")
(data (i32.const 432) "%x\00")
(data (i32.const 448) "object passed to erase is not in multi_index\00")
(data (i32.const 496) "cannot erase objects in table of another contract\00")
(data (i32.const 560) "attempt to remove object that was not in multi_index\00")
(data (i32.const 624) "%lld%s%s\00")
(data (i32.const 640) "%02x\00")
(data (i32.const 656) "%s%lld%s%lld%lld\00")
(data (i32.const 688) "|\00")
(data (i32.const 692) "\0e\00\00\00\0f\00\00\00")
(data (i32.const 704) "T = \00")
(data (i32.const 720) "static const char *boost::detail::ctti<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> > >::n() [T = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]\00")
(data (i32.const 944) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1008) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1056) "contract already initialized.\00")
(data (i32.const 1088) "initseed must be 64 size string.\00")
(data (i32.const 1136) "contract has not been initialized yet.\00")
(data (i32.const 1184) "datafeeder not exists.\00")
(data (i32.const 1216) "active\00")
(data (i32.const 1232) "octtothemoon\00")
(data (i32.const 1248) "transfer\00")
(data (i32.const 1264) "Sorry that you have not passed our review.\00")
(data (i32.const 1312) "object passed to modify is not in multi_index\00")
(data (i32.const 1360) "cannot modify objects in table of another contract\00")
(data (i32.const 1424) "attempt to subtract asset with different symbol\00")
(data (i32.const 1472) "subtraction underflow\00")
(data (i32.const 1504) "subtraction overflow\00")
(data (i32.const 1536) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1600) "window not exists.\00")
(data (i32.const 1632) "order not exists.\00")
(data (i32.const 1664) "Recede your cost OCT, you must implement the deliver action properly.\00")
(data (i32.const 1744) "you can\'t make order for now.\00")
(data (i32.const 1776) "same order already exists.\00")
(data (i32.const 1808) "serial number must be a 32 size string.\00")
(data (i32.const 1856) "caller must be account.\00")
(data (i32.const 1888) "you can\'t make commit for now.\00")
(data (i32.const 1920) "you must register datafeeder first.\00")
(data (i32.const 1968) "you can\'t make commit cause you are not a datafeeder yet.\00")
(data (i32.const 2032) "hm must be 64 size string.\00")
(data (i32.const 2064) "commits is full, try other window.\00")
(data (i32.const 2112) "your hm deos not match round % 0xffff.\00")
(data (i32.const 2160) "you already commit to this window.\00")
(data (i32.const 2208) "you can\'t make reveal for now.\00")
(data (i32.const 2240) "you can\'t make reveal cause you are not a datafeeder yet.\00")
(data (i32.const 2304) "msg must be 64 size string.\00")
(data (i32.const 2336) "commits is not full yet.\00")
(data (i32.const 2368) "reveal doesn\'t match commit.\00")
(data (i32.const 2400) "processorder\00")
(data (i32.const 2416) "process is not available yet.\00")
(data (i32.const 2448) "deliver\00")
(data (i32.const 2464) "you can\'t process order for now.\00")
(data (i32.const 2512) "invalid token transfer.\00")
(data (i32.const 2544) "quantity must be positive.\00")
(data (i32.const 2576) "REGISTER:\00")
(data (i32.const 2592) "you can\'t register datefeeder for now.\00")
(data (i32.const 2640) "valid quantity failed.\00")
(data (i32.const 2672) "you have already submitted your registery application, just wait for a while.\00")
(data (i32.const 2752) "attempt to add asset with different symbol\00")
(data (i32.const 2800) "addition underflow\00")
(data (i32.const 2832) "addition overflow\00")
(data (i32.const 2864) "ORDER:\00")
(data (i32.const 2880) "not enough OCT to make order for random.\00")
(data (i32.const 2928) "wrong format memo of make order of random.\00")
(data (i32.const 2976) "only OCT support.\00")
(data (i32.const 3008) "you can\'t logout for now.\00")
(data (i32.const 3040) "you have not registered for datafeeder yet.\00")
(data (i32.const 3088) "you must claim your rewards first before logout.\00")
(data (i32.const 3152) "Thank you for been a datafeeder, hope to see you again.\00")
(data (i32.const 3216) "patrol\00")
(data (i32.const 3232) "onerror\00")
(data (i32.const 3248) "eosio\00")
(data (i32.const 3264) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 11728) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 11824) "stoi\00")
(data (i32.const 11840) ": no conversion\00")
(data (i32.const 11856) ": out of range\00")
(data (i32.const 11888) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 12352) "0123456789ABCDEF")
(data (i32.const 12368) "-+   0X0x\00")
(data (i32.const 12384) "(null)\00")
(data (i32.const 12400) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 12432) "inf\00")
(data (i32.const 12448) "INF\00")
(data (i32.const 12464) "nan\00")
(data (i32.const 12480) "NAN\00")
(data (i32.const 12496) ".\00")
(data (i32.const 12512) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 12608) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 14416) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 14688) "\00\01\02\04\07\03\06\05\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$11))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "cancel_deferred" (func $fimport$13 (param i32) (result i32)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "db_end_i64" (func $fimport$16 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$22 (param i32)))
(import "env" "db_store_i64" (func $fimport$23 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$24 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$25 (param i32 i32)))
(import "env" "is_account" (func $fimport$26 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$27 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$30 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$31 (param i64)))
(import "env" "require_auth2" (func $fimport$32 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$33 (param i64)))
(import "env" "send_deferred" (func $fimport$34 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$35 (param i32 i32)))
(import "env" "sha256" (func $fimport$36 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN6randomC2Ey" (func $5))
(export "_ZN6random11order_equalERK5orderS2_" (func $6))
(export "_ZN6random11order_existERK5order" (func $7))
(export "_ZN6random14gen_one_windowEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $14))
(export "_ZN6random18erase_lower_windowEyyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $24))
(export "_ZN6random13new_prerandomERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi" (func $26))
(export "_ZN6random13hexDec2StringEi" (func $27))
(export "_ZN6random12window_countEv" (func $28))
(export "_ZN6random6cal_hmEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_" (func $29))
(export "_ZN6random8xor_codeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_" (func $30))
(export "_Z13binary2stringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $31))
(export "_ZN6random10cal_randomERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyS8_yy" (func $32))
(export "_ZN6random16parse_memo_orderERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6_Ry" (func $33))
(export "_ZN6random19parse_memo_registerERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6_S9_" (func $47))
(export "_ZN6random19check_window_activeEm" (func $48))
(export "_ZN6random4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $54))
(export "_ZN6random8reviewdfEyc" (func $57))
(export "_ZN6random8closewndEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $69))
(export "_ZN6random8closeordEyb" (func $70))
(export "_ZN6random10make_orderEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyN5eosio5assetE" (func $73))
(export "_ZN6random10makecommitEyyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $77))
(export "_ZN6random10makerevealEyyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $81))
(export "_ZN6random12processorderEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyyS8_" (func $93))
(export "_ZN6random8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $100))
(export "_ZN6random6logoutEy" (func $102))
(export "_ZN6random7deliverEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyS6_" (func $103))
(export "_ZN6random6patrolEm" (func $104))
(export "_ZN6random6foobarEv" (func $106))
(export "apply" (func $107))
(export "malloc" (func $128))
(export "free" (func $131))
(export "_ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $149))
(export "__errno_location" (func $157))
(export "snprintf" (func $158))
(export "vsnprintf" (func $159))
(export "vfprintf" (func $161))
(export "__lockfile" (func $163))
(export "__unlockfile" (func $164))
(export "__fwritex" (func $165))
(export "strerror" (func $167))
(export "strnlen" (func $168))
(export "wctomb" (func $169))
(export "__signbitl" (func $170))
(export "__fpclassifyl" (func $171))
(export "frexpl" (func $172))
(export "wcrtomb" (func $173))
(export "memchr" (func $174))
(export "__lctrans" (func $175))
(export "__lctrans_impl" (func $176))
(export "__mo_lookup" (func $177))
(export "strcmp" (func $178))
(export "__towrite" (func $179))
(export "strtoll" (func $180))
(export "__shlim" (func $181))
(export "__intscan" (func $182))
(export "__shgetc" (func $183))
(export "__uflow" (func $184))
(export "__toread" (func $185))
(export "strtol" (func $186))
(export "strlen" (func $187))
(export "memcmp" (func $188))
(table $0 16 16 anyfunc)
(elem (i32.const 0) $189 $81 $69 $57 $54 $102 $77 $100 $70 $104 $93 $103 $106 $160 $43 $44)



int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC _ZN6random11order_equalERK5orderS2_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = [0]
	if ( ((int_64)*($1 + [8]) != (int_64)*($2 + [8])) ){ goto $label$5 }
	$6 = ($6 & [1])
	$6 = *($2 + [16])
	$3 = ($6 & [1])
	$6 = *($1 + [16])
	$4 = uint_32($6 >> [1])
	$5 = ( *(($1 + [20])) ? $4 : $3 )
	if ( ((int_32)$5 != (int_32)( *(($2 + [20])) ? uint_32($6 >> [1]) : $6 )) ){ goto $label$5 }
	$2 = ( *(($2 + [24])) ? (($2 + [16]) + [1]) : $6 )
	$6 = (($1 + [16]) + [1])
	if ( $3 ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$3 }
	$1 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_32)*($6) != (int_32)*($2)) ){ goto $label$1 }
	$7 = [1]
	$2 = ($2 + [1])
	$6 = ($6 + [1])
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$6 }
	
.LABEL $label$5
	return $7
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	return (CALL memcmp(( *(($1 + [24])) ? $6 : $3 ), $2, $5) == 0)
	
.LABEL $label$3
	return [1]
	
.LABEL $label$2
	return [1]
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC _ZN6random11order_existERK5order (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$9 = [0]
	$6 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)-6497942495177998336, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($1 + [17])
	$2 = ($0 + [48])
	$4 = CALL $8($2, $6)
	$7 = ($1 + [8])
	
.LOOP $label$3:
	if ( ((int_64)*($4 + [8]) != (int_64)*($7)) ){ goto $label$4 }
	$6 = ($0 & [1])
	$0 = *(($1 + [16]))
	$8 = ($0 & [1])
	$0 = *($4 + [16])
	$9 = uint_32($0 >> [1])
	$5 = ( *(($4 + [20])) ? $9 : $8 )
	if ( ((int_32)$5 != (int_32)( *(($1 + [20])) ? uint_32($0 >> [1]) : $6 )) ){ goto $label$4 }
	$0 = (($4 + [16]) + [1])
	$6 = ( *(($1 + [24])) ? $3 : $6 )
	if ( ($8 == 0) ){ goto $label$5 }
	$9 = [1]
	if ( ($5 == 0) ){ goto $label$1 }
	if ( (CALL memcmp(( *(($4 + [24])) ? $0 : $8 ), $6, $5) == 0) ){ goto $label$1 }
	goto $label$4 
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$2 }
	$8 = ([0] - $9)
	
.LOOP $label$6:
	if ( ((int_32)*($0) != (int_32)*($6)) ){ goto $label$4 }
	$9 = [1]
	$6 = ($6 + [1])
	$0 = ($0 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([1], [16])
	$0 = CALL db_next_i64(*($4 + [88]), ($10 + [8]))
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$7 }
	$4 = CALL $8($2, $0)
	goto $label$3 
	
.LABEL $label$7
	$9 = [0]
	goto $label$1 
	
.LABEL $label$2
	$9 = [1]
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [16])
	return $9
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC _ZN6randomC2Ey (int_32 $0, int_64 $1)
{
	*($0 + [8]) = $1
	*($0) = $1
	*(($0 + [16])) = $1
	*(($0 + [24])) = (int_64)-1
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = [0]
	*($0 + [48]) = $1
	*(($0 + [56])) = $1
	*(($0 + [64])) = (int_64)-1
	*(($0 + [72])) = [0]
	*(($0 + [76])) = [0]
	*(($0 + [80])) = [0]
	*($0 + [88]) = $1
	*(($0 + [96])) = $1
	*(($0 + [104])) = (int_64)-1
	*(($0 + [112])) = [0]
	*(($0 + [116])) = [0]
	*(($0 + [120])) = [0]
	*($0 + [128]) = $1
	*(($0 + [136])) = $1
	*(($0 + [144])) = (int_64)-1
	*(($0 + [152])) = [0]
	*(($0 + [156])) = [0]
	*(($0 + [160])) = [0]
	*($0 + [168]) = $1
	*(($0 + [176])) = $1
	*(($0 + [184])) = (int_64)-1
	*(($0 + [192])) = [0]
	*(($0 + [196])) = [0]
	*(($0 + [200])) = [0]
	return $0
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $155($4, ($1 + [8]))
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $155(($4 + [16]), $4)
	CALL void $1((int_32 $2), (int_64 ($4 + [16])), (int_32 $0))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $137(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $137(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

void .FUNC $189 ()
{
	(unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [48])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $135([80])
	$4 = CALL $51($6)
	*($6 + [68]) = $0
	CALL $52(($8 + [32]), $4)
	*($6 + [72]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [72])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $53(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $137($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN6random19check_window_activeEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	$2 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	CALL $49(($0 + [168]), $2)
	$2 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)-6497942495177998336, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	if ( (($1 - (CASTING uint_32)(uint_64 ((uint_64)*(CALL $8(($0 + [48]), $2) + [56]) / (uint_64)(int_64)1000))) <= [121]) ){ goto $label$1 }
	$2 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-2042775575138926592, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = ($0 + [8])
	$2 = CALL $15($1, $2)
	if ( (int_32((*(($2 + [24])) - *($2 + [20])) >> [5]) <= [6]) ){ goto $label$1 }
	*($3 + [8]) = (CASTING uint_64)(uint_32 $1)
	CALL _ZN6random14gen_one_windowEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, ((int_64)*(*(CALL $50(($3 + [8])) + [4])) + (int_64)1), ($2 + [8]))
	CALL eosio_assert([1], [384])
	CALL eosio_assert([1], [16])
	$0 = CALL db_next_i64(*($2 + [36]), ($3 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	CALL $15($1, $0)
	
.LABEL $label$2
	CALL $25($1, $2)
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2)
{
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$4 }
	$0 = [0]
	
.LOOP $label$5:
	$2 = [-3]
	
.LOOP $label$7:
	if ( ((int_32)*((($0 + $2) + [762])) != (int_32)*(($2 + [707]))) ){ goto $label$6 }
	if ( ($2 == 0) ){ goto $label$3 }
	$2 = ($2 + [1])
	if ( ((int_32)($0 + $2) != (int_32)[180]) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$6
	$2 = [183]
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[183]) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	CALL $46($0, $1, $2)
	return 
	
.LABEL $label$3
	$2 = $0
	goto $label$1 
	
.LABEL $label$2
	$2 = [183]
	
.LABEL $label$1
	*($1 + [4]) = [0]
	*($1) = ( [759] ? ($2 + [763]) : ((int_32)$2 == (int_32)[183]) )
}

int_32 .FUNC $42 (int_32 $0)
{
	return [0]
}

int_32 .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6) = $1
	$5 = [0]
	if ( CALL $42($6) ){ goto $label$1 }
	*($6 + [16]) = [0]
	$5 = *($1 + [8])
	*($6 + [24]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$3 }
	$4 = ($6 + [16])
	$3 = $1
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $136($5)
	*($6 + [16]) = $4
	$3 = *($1)
	
.LABEL $label$2
	CALL memcpy($4, $3, $5)
	*($6 + [28]) = *($1 + [12])
	*(($1 = CALL $135([16]))) = [0]
	$5 = *((($6 + [16]) + [8]))
	*($1 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$5 }
	$4 = ($6 + [16])
	$3 = $1
	goto $label$4 
	
.LABEL $label$5
	$3 = CALL $136($5)
	*($1) = $3
	$5 = *(($1 + [8]))
	$4 = *($6 + [16])
	
.LABEL $label$4
	CALL memcpy($3, $4, $5)
	*($2) = $1
	*($1 + [12]) = *(($6 + [28]))
	$5 = [1]
	if ( (*(($6 + [24])) <= [9]) ){ goto $label$1 }
	$1 = *($6 + [16])
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $138($1)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
	return $5
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5) = [0]
	$2 = *($1 + [8])
	*($5 + [8]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$2 }
	$4 = $5
	$3 = $1
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL $136($2)
	*($5) = $4
	$3 = *($1)
	
.LABEL $label$1
	CALL memcpy($4, $3, $2)
	*($5 + [12]) = *($1 + [12])
	*($5 + [16]) = [0]
	$1 = *(($5 + [8]))
	*($5 + [24]) = $1
	$2 = ($0 + [4])
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $5
	$3 = ($5 + [16])
	goto $label$3 
	
.LABEL $label$4
	$3 = CALL $136($1)
	*($5 + [16]) = $3
	$4 = *($5)
	
.LABEL $label$3
	CALL memcpy($3, $4, $1)
	*($5 + [28]) = *(($5 + [12]))
	$1 = CALL $41([692], ($5 + [16]), $2)
	if ( (*((($5 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$2 = *($5 + [16])
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $138($2)
	
.LABEL $label$5
	if ( (*(($5 + [8])) <= [9]) ){ goto $label$6 }
	$2 = *($5)
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $138($2)
	
.LABEL $label$6
	*($0) = ( [692] ? [0] : $1 )
	*([0] + [4]) = ($5 + [32])
}

void .FUNC _ZN6random19parse_memo_registerERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6_S9_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$4 = *($1)
	if ( (( *($1 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) == 0) ){ goto $label$2 }
	$5 = [0]
	*($7 + [32]) = [0]
	*($7 + [24]) = (int_64)0
	$4 = CALL strlen([688])
	*($7 + [16]) = $4
	*($7 + [8]) = [0]
	if ( ((uint_32)$4 >= (uint_32)[9]) ){ goto $label$5 }
	$6 = ($7 + [8])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = CALL $136($4)
	*($7 + [8]) = $6
	
.LABEL $label$4
	CALL memmove($6, [688], $4)
	$5 = *(($7 + [16]))
	
.LABEL $label$3
	CALL $132($6, ($6 + $5), ($7 + [40]))
	CALL $34(($7 + [24]), $1, ($7 + [8]), [1])
	if ( (*(($7 + [16])) <= [9]) ){ goto $label$6 }
	$1 = *($7 + [8])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $138($1)
	
.LABEL $label$6
	$6 = *($7 + [24])
	if ( (((int_32)(*($7 + [28]) - $6) / (int_32)[12]) <= [2]) ){ goto $label$7 }
	CALL $140($2, $6)
	$1 = *($7 + [24])
	if ( ((uint_32)((int_32)(*($7 + [28]) - $1) / (int_32)[12]) <= (uint_32)[1]) ){ goto $label$1 }
	CALL $140($3, ($1 + [12]))
	$6 = *($7 + [24])
	
.LABEL $label$7
	if ( ($6 == 0) ){ goto $label$2 }
	$1 = *($7 + [28])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$9 }
	$4 = ([0] - $6)
	$1 = ($1 + [-12])
	
.LOOP $label$10:
	if ( ((*($1) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($1 + [8])))
	
.LABEL $label$11
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $4) != (int_32)[-12]) ){ goto $label$10 }
	$1 = *($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	$1 = $6
	
.LABEL $label$8
	*($7 + [28]) = $6
	CALL $137($1)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $154(($7 + [24]))
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((uint_32)$2 > (uint_32)[3]) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$13
	$3 = *($0)
	*(($2 = CALL $135([16]))) = [0]
	$5 = *($3 + [8])
	*($2 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$8 }
	$0 = $3
	$4 = $2
	goto $label$7 
	
.LABEL $label$12
	$3 = [0]
	
.LOOP $label$14:
	$2 = [-3]
	
.LOOP $label$16:
	if ( ((int_32)*((($3 + $2) + [762])) != (int_32)*(($2 + [707]))) ){ goto $label$15 }
	if ( ($2 == 0) ){ goto $label$6 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[180]) ){ goto $label$16 }
	goto $label$4 
	
.LABEL $label$15
	$2 = [183]
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[183]) ){ goto $label$14 }
	goto $label$3 
	
.LABEL $label$11
	*($1) = *($0)
	*($0) = [0]
	return 
	
.LABEL $label$10
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$17 }
	if ( (*($2 + [8]) <= [9]) ){ goto $label$18 }
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$18 }
	CALL $138($3)
	
.LABEL $label$18
	CALL $137($2)
	
.LABEL $label$17
	*($1) = [0]
	return 
	
.LABEL $label$9
	$5 = *($1)
	$3 = [0]
	
.LOOP $label$19:
	$2 = [-3]
	
.LOOP $label$21:
	if ( ((int_32)*((($3 + $2) + [762])) != (int_32)*(($2 + [707]))) ){ goto $label$20 }
	if ( ($2 == 0) ){ goto $label$5 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[180]) ){ goto $label$21 }
	goto $label$2 
	
.LABEL $label$20
	$2 = [183]
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[183]) ){ goto $label$19 }
	goto $label$1 
	
.LABEL $label$8
	$4 = CALL $136($5)
	*($2) = $4
	$5 = *(($2 + [8]))
	$0 = *($3)
	
.LABEL $label$7
	CALL memcpy($4, $0, $5)
	*($1) = $2
	*($2 + [12]) = *($3 + [12])
	return 
	
.LABEL $label$6
	$2 = $3
	goto $label$3 
	
.LABEL $label$5
	$2 = $3
	goto $label$1 
	
.LABEL $label$4
	$2 = [183]
	
.LABEL $label$3
	*($1 + [4]) = [0]
	*($1) = ( [759] ? ($2 + [763]) : ((int_32)$2 == (int_32)[183]) )
	return 
	
.LABEL $label$2
	$2 = [183]
	
.LABEL $label$1
	$3 = ( [759] ? ($2 + [763]) : ((int_32)$2 == (int_32)[183]) )
	$2 = *($5)
	if ( ($2 == 0) ){ goto $label$23 }
	$5 = ($5 + [1])
	
.LOOP $label$24:
	if ( ((int_32)($2 & [255]) != (int_32)*($3)) ){ goto $label$22 }
	$3 = ($3 + [1])
	$2 = *($5)
	$5 = ($5 + [1])
	if ( $2 ){ goto $label$24 }
	
.LABEL $label$23
	$2 = [0]
	
.LABEL $label$22
	*($1) = ( *($0) ? [0] : ((int_32)($2 & [255]) == (int_32)*($3)) )
	$2
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	*($12) = [0]
	$8 = *($1 + [8])
	*($12 + [8]) = $8
	if ( ((uint_32)$8 > (uint_32)[8]) ){ goto $label$2 }
	$11 = $12
	$10 = $1
	goto $label$1 
	
.LABEL $label$2
	$11 = CALL $136($8)
	*($12) = $11
	$10 = *($1)
	
.LABEL $label$1
	CALL memcpy($11, $10, $8)
	$4 = *(($12 + [8]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$5 }
	$5 = ($12 + $4)
	
.LOOP $label$6:
	$7 = *($2)
	$10 = $12
	$8 = $4
	if ( ($8 == 0) ){ goto $label$7 }
	
.LOOP $label$8:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$9 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$9
	$8 = $11
	if ( $8 ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$10 }
	if ( ((int_32)*($10) <= (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$10
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$5 = *($12)
	$6 = ($5 + $4)
	
.LOOP $label$11:
	$7 = *($2)
	$10 = $5
	$8 = $4
	if ( ($8 == 0) ){ goto $label$12 }
	
.LOOP $label$13:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$14 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$14
	$8 = $11
	if ( $8 ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$15 }
	if ( ((int_32)*($10) <= (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$15
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$4
	$2 = $3
	
.LABEL $label$3
	if ( ($4 <= [9]) ){ goto $label$16 }
	$8 = *($12)
	if ( ($8 == 0) ){ goto $label$16 }
	CALL $138($8)
	
.LABEL $label$16
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$19 }
	if ( (*($1 + [12]) == 0) ){ goto $label$18 }
	$4 = ($2 + [1])
	goto $label$17 
	
.LABEL $label$19
	$2 = $3
	$4 = $3
	goto $label$17 
	
.LABEL $label$18
	$5 = *(($1 + [8]))
	if ( ((uint_32)$5 >= (uint_32)[9]) ){ goto $label$20 }
	$6 = ($1 + $5)
	$4 = $2
	
.LOOP $label$21:
	$7 = *($4)
	$10 = $1
	$8 = $5
	if ( ($8 == 0) ){ goto $label$22 }
	
.LOOP $label$23:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$24 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$24
	$8 = $11
	if ( $8 ){ goto $label$23 }
	
.LABEL $label$22
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$17 }
	if ( ((int_32)*($10) > (int_32)$7) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$21 }
	goto $label$17 
	
.LABEL $label$20
	$6 = *($1)
	$1 = ($6 + $5)
	$4 = $2
	
.LOOP $label$25:
	$7 = *($4)
	$10 = $6
	$8 = $5
	if ( ($8 == 0) ){ goto $label$26 }
	
.LOOP $label$27:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$28 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$28
	$8 = $11
	if ( $8 ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$17 }
	if ( ((int_32)*($10) > (int_32)$7) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$25 }
	
.LABEL $label$17
	*($0 + [4]) = $4
	*($0) = $2
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL $45($0, *($1), $2, $3)
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [12512])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [12608]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [12608]
	return .LABEL $label$1
}

void .FUNC $166 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

void .FUNC __unlockfile (int_32 $0)
{
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

int_32 .FUNC $162 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [11888]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $166(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [12368]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [12400]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [12406] ? [12401] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [12370] ? [12368] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [12403]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $157()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [12368]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [12368]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [12352])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [12368])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [12384] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [12368]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [12464] ? [12480] : $30 ) ? ( [12432] ? [12448] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [12368]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [12369]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [12368] ? [12373] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [12352])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [12352])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [12352])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([12496], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([12496], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([12496], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $166(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $166(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $166(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $166(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $166(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $166(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $166(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $166(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $166(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $162([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $162($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $162($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC $160 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [48])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $135([112])
	$4 = CALL $66($6)
	*($6 + [96]) = $0
	CALL $67(($8 + [32]), $4)
	*($6 + [100]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [100])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $68(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [84]) & [1]) == 0) ){ goto $label$10 }
	CALL $137(*(($4 + [92])))
	
.LABEL $label$10
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($4 + [80])))
	
.LABEL $label$11
	CALL $137($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [368])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [368])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [368])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $20(*($1), ($0 + [32]))
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [36]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1008])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-2042775575138926592)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [944])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [944])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $15(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $51 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [80])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [144])
	*(($2 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [80])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [144])
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [80])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [144])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [176])
	CALL memcpy(($3 + [13]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [56]) = ((int_32)*($3 + [13]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [176])
	CALL memcpy(($3 + [14]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [57]) = ((int_32)*($3 + [14]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [176])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [58]) = ((int_32)*($3 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [176])
	CALL memcpy(($1 + [60]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [176])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $135(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $153($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $137($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $137($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN6random4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	$2 = ($0 + [168])
	$3 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $49($2, $3)
	goto $label$1 
	
.LABEL $label$2
	$5 = *($0)
	*($7 + [8]) = $0
	*($7 + [40]) = $5
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$14()), [304])
	*($7 + [16]) = $2
	*($7 + [20]) = ($7 + [8])
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $135([80])
	CALL $51($3)
	*($3 + [68]) = $2
	CALL $55(($7 + [16]), $3)
	*($7 + [32]) = $3
	$5 = *($3)
	*($7 + [16]) = $5
	$4 = *($3 + [72])
	*($7 + [12]) = $4
	$6 = ($0 + [196])
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [200]))) ){ goto $label$4 }
	*($2 + [8]) = $5
	*($2 + [16]) = $4
	*($7 + [32]) = [0]
	*($2) = $3
	*($6) = ($2 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $53(($0 + [192]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$3
	$2 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $137($2)
	
.LABEL $label$1
	$2 = [1]
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-2042775575138926592, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	CALL $15(($0 + [8]), $3)
	$2 = [0]
	
.LABEL $label$5
	CALL eosio_assert($2, [1056])
	$2 = *($1)
	if ( ($2 & [1]) ){ goto $label$7 }
	$2 = uint_32($2 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$2 = *($1 + [4])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$2 == (int_32)[64]), [1088])
	CALL _ZN6random14gen_one_windowEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, (int_64)1, $1)
	CALL _ZN6random14gen_one_windowEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, (int_64)2, $1)
	CALL _ZN6random14gen_one_windowEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, (int_64)3, $1)
	CALL _ZN6random14gen_one_windowEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, (int_64)4, $1)
	CALL _ZN6random14gen_one_windowEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, (int_64)5, $1)
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	*($1) = *(*(*($0 + [4])))
	$2 = *($0)
	CALL eosio_assert([1], [80])
	$3 = (int_64)5522255
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [144])
	*(($1 + [16])) = (int_64)1413697284
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*(($1 + [32])) = (int_64)1413697284
	*($1 + [40]) = (int_64)0
	*(($1 + [48])) = (int_64)1413697284
	*($1 + [56]) = [1]
	*($1 + [57]) = [1]
	*($1 + [58]) = [1]
	*($1 + [60]) = [0]
	*($1 + [64]) = [0]
	$5 = $7
	$4 = ($5 + [-80])
	*([0] + [4]) = $4
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($5 + [-13])
	CALL $56($6, $1)
	$3 = *($1)
	*($1 + [72]) = CALL db_store_i64(*($2 + [8]), (int_64)4982871454518345728, *(*($0 + [8])), $3, $4, [67])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	*($3 + [13]) = *($1 + [56])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [368])
	CALL memcpy(*($0 + [4]), ($3 + [13]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($3 + [14]) = *($1 + [57])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [368])
	CALL memcpy(*($0 + [4]), ($3 + [14]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [58])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [368])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [60]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC _ZN6random8reviewdfEyc (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [176])
	*([0] + [4]) = $18
	*($18 + [63]) = $2
	CALL require_auth(*($0))
	$3 = ($0 + [168])
	$9 = [0]
	$10 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $49($3, $10)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [1136])
	$4 = *(($0 + [152]))
	$11 = *(($0 + [156]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$2 }
	$10 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$3:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$2 }
	$11 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$5 = ($0 + [128])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$5 }
	$11 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [96]) == (int_32)$5), [208])
	goto $label$4 
	
.LABEL $label$5
	$11 = [0]
	$10 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)5310418688377470976, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	$11 = CALL $58($5, $10)
	CALL eosio_assert(((int_32)*($11 + [96]) == (int_32)$5), [208])
	
.LABEL $label$4
	$4 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($4, [1184])
	if ( ($2 == 0) ){ goto $label$8 }
	$13 = *($0)
	*($18 + [96]) = ($18 + [63])
	CALL $62($5, $11, $13, ($18 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$7 = *($0)
	$13 = (int_64)0
	$12 = (int_64)59
	$10 = [1216]
	$14 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$14 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$6 = ($6 + [165])
	goto $label$12 
	
.LABEL $label$14
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$10
	$10 = ($10 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$9 }
	$13 = (int_64)0
	$15 = (int_64)59
	$10 = [1232]
	$16 = (int_64)0
	
.LOOP $label$15:
	$12 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$16 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$6 = ($6 + [165])
	goto $label$17 
	
.LABEL $label$18
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$16
	$10 = ($10 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$16 = ((int_64)$12 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$15 }
	$13 = (int_64)0
	$12 = (int_64)59
	$10 = [1248]
	$17 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$24 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$6 = ($6 + [165])
	goto $label$22 
	
.LABEL $label$24
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$20
	$10 = ($10 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$17 = ((int_64)$15 | (int_64)$17)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$19 }
	*(($18 + [8])) = [0]
	*($18) = (int_64)0
	$10 = CALL strlen([1264])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$6 }
	$6 = ($11 + [8])
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$27 }
	*($18) = ($10 << [1])
	$2 = ($18 | [1])
	if ( $10 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$8 = (($10 + [16]) & [-16])
	$2 = CALL $135($8)
	*($18) = ($8 | [1])
	*($18 + [8]) = $2
	*($18 + [4]) = $10
	
.LABEL $label$26
	CALL memcpy($2, [1264], $10)
	
.LABEL $label$25
	*(($2 + $10)) = [0]
	*($18 + [104]) = $1
	*((($18 + [96]) + [28])) = *(($6 + [12]))
	*((($18 + [96]) + [24])) = *(($6 + [8]))
	*((($18 + [96]) + [20])) = *(($6 + [4]))
	*($18 + [96]) = *($0)
	*($18 + [112]) = *($6)
	$10 = ($18 + [8])
	*(($18 + [136])) = *($10)
	*($18 + [128]) = *($18)
	*($18) = [0]
	*($18 + [4]) = [0]
	*($10) = [0]
	*($18 + [16]) = $16
	*($18 + [24]) = $17
	*(($10 = CALL $135([16]))) = $7
	*($10 + [8]) = $14
	*((($18 + [16]) + [32])) = [0]
	$6 = ($10 + [16])
	*((($18 + [16]) + [24])) = $6
	*((($18 + [16]) + [20])) = $6
	*($18 + [32]) = $10
	*($18 + [44]) = [0]
	*((($18 + [16]) + [36])) = [0]
	$10 = *($18 + [128])
	$6 = ( *((($18 + [96]) + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($6 + [32])
	$13 = (CASTING uint_64)(uint_32 $6)
	$6 = (($18 + [16]) + [28])
	
.LOOP $label$28:
	$10 = ($10 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$28 }
	if ( ($10 == 0) ){ goto $label$30 }
	CALL $13($6, $10)
	$6 = *(($18 + [48]))
	$10 = *(($18 + [44]))
	goto $label$29 
	
.LABEL $label$30
	$6 = [0]
	$10 = [0]
	
.LABEL $label$29
	*($18 + [84]) = $10
	*($18 + [80]) = $10
	*($18 + [88]) = $6
	*($18 + [64]) = ($18 + [80])
	*($18 + [72]) = ($18 + [96])
	CALL $59(($18 + [72]), ($18 + [64]))
	CALL $60(($18 + [80]), ($18 + [16]))
	$10 = *($18 + [80])
	CALL send_inline($10, (*($18 + [84]) - $10))
	$10 = *($18 + [80])
	if ( ($10 == 0) ){ goto $label$31 }
	*($18 + [84]) = $10
	CALL $137($10)
	
.LABEL $label$31
	$10 = *($18 + [44])
	if ( ($10 == 0) ){ goto $label$32 }
	*(($18 + [48])) = $10
	CALL $137($10)
	
.LABEL $label$32
	$10 = *($18 + [32])
	if ( ($10 == 0) ){ goto $label$33 }
	*(($18 + [36])) = $10
	CALL $137($10)
	
.LABEL $label$33
	if ( ((*(($18 + [128])) & [1]) == 0) ){ goto $label$34 }
	CALL $137(*(($18 + [136])))
	
.LABEL $label$34
	if ( ((*($18) & [1]) == 0) ){ goto $label$35 }
	CALL $137(*(($18 + [8])))
	
.LABEL $label$35
	$15 = *($0)
	CALL eosio_assert(((int_32)*($9 + [68]) == (int_32)$3), [1312])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$14()), [1360])
	$13 = *($9)
	CALL eosio_assert(((int_64)*(($11 + [16])) == (int_64)*(($9 + [16]))), [1424])
	$12 = (int_64)
	*($9 + [8]) = $12(*($9 + [8]) - *($11 + [8])))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [1472])
	CALL eosio_assert(((int_64)*($9 + [8]) < (int_64)4611686018427387904), [1504])
	CALL eosio_assert(((int_64)$13 == (int_64)*($9)), [1536])
	*($18 + [24]) = (($18 + [96]) + [67])
	*($18 + [20]) = ($18 + [96])
	*($18 + [16]) = ($18 + [96])
	CALL $56(($18 + [16]), $9)
	CALL db_update_i64(*($9 + [72]), $15, ($18 + [96]), [67])
	$10 = ($0 + [184])
	if ( (uint_64)($13 <= *($10)) ){ goto $label$36 }
	*($10) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$36
	CALL eosio_assert($4, [384])
	CALL eosio_assert($4, [16])
	$10 = CALL db_next_i64(*($11 + [100]), ($18 + [96]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$37 }
	CALL $58($5, $10)
	
.LABEL $label$37
	CALL $61($5, $11)
	
.LABEL $label$7
	*([0] + [4]) = ($18 + [176])
	return (unreachable)
	
.LABEL $label$6
	CALL $139($18)
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC $152 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $135($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $145($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $153 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $150 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $152($1, $0, [11856])
	CALL abort()
	(unreachable)
}

void .FUNC $151 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $152($1, $0, [11840])
	CALL abort()
	(unreachable)
}

int_32 .FUNC $156 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $135($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC __errno_location ()
{
	return [11872]
}

void .FUNC $154 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $135($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [13]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

void .FUNC _ZN6random8closewndEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$6), [208])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-2042775575138926592, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $15($6, $7)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$6), [208])
	
.LABEL $label$3
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [1600])
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$6 }
	$4 = uint_32($4 >> [1])
	goto $label$5 
	
.LABEL $label$6
	$4 = *($2 + [4])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$4 == (int_32)[64]), [1088])
	*($8 + [8]) = (CASTING uint_64)(uint_32 $6)
	$1 = *(*(CALL $50(($8 + [8])) + [4]))
	CALL eosio_assert($7, [384])
	CALL eosio_assert($7, [16])
	$7 = CALL db_next_i64(*($5 + [36]), ($8 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	CALL $15($6, $7)
	
.LABEL $label$7
	CALL $25($6, $5)
	CALL _ZN6random14gen_one_windowEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, ((int_64)$1 + (int_64)1), $2)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $135(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $153($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [84]) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($1 + [92])))
	
.LABEL $label$11
	if ( ((*($1 + [72]) & [1]) == 0) ){ goto $label$12 }
	CALL $137(*(($1 + [80])))
	
.LABEL $label$12
	CALL $137($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $137($6)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [368])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [368])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [368])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [368])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [368])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $11(CALL $11($0, ($1 + [72])), ($1 + [84]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [176])
	CALL memcpy(($1 + [56]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [176])
	CALL memcpy(($1 + [60]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $66 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [80])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [144])
	*(($2 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [80])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [144])
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [80])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [144])
	*($0 + [72 align=4]) = (int_64)0
	*(($0 + [80])) = (int_64)0
	*(($0 + [88])) = (int_64)0
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [496])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [560])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [84]) & [1]) == 0) ){ goto $label$7 }
	CALL $137(*(($4 + [92])))
	
.LABEL $label$7
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$8 }
	CALL $137(*(($4 + [80])))
	
.LABEL $label$8
	CALL $137($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [84]) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($4 + [92])))
	
.LABEL $label$11
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$12 }
	CALL $137(*(($4 + [80])))
	
.LABEL $label$12
	CALL $137($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [100]))
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $13($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [368])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [368])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $65(CALL $64($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $20(CALL $20($0, ($1 + [72])), ($1 + [84]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [60]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [1312])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1360])
	*($1 + [56]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1536])
	$3 = *($1 + [72])
	$5 = ( *(($1 + [76])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [69])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [84])
	$5 = ( *(($1 + [88])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = ($5 + $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $3)
	CALL $63($8, $1)
	CALL db_update_i64(*($1 + [100]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $137($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $137($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $137($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $137($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $137($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $137($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $137($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $137($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [1312])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1360])
	*($1 + [64]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1536])
	$3 = *($1 + [16])
	$5 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [56])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [72])
	$5 = ( *(($1 + [76])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = ($5 + $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $3)
	CALL $76($8, $1)
	CALL db_update_i64(*($1 + [88]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $89($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $13($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $90($4, $1)
	CALL $92(CALL $91(CALL $91($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$8 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $135(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $153($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	$3 = [0]
	*(($5 = ($9 + [24]))) = [0]
	$2 = CALL $135([16])
	*($9 + [16]) = $2
	$7 = ($2 + [16])
	*($5) = $7
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $7
	*($9 + [28]) = [0]
	*(($2 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	*($10 + [16]) = [0]
	*($10 + [24]) = ($10 + [16])
	*($10) = $4
	$1 = ((int_32)$8 * (int_32)[40])
	CALL $83($10, ($10 + [24]))
	$8 = *($10 + [16])
	if ( ($8 == 0) ){ goto $label$6 }
	$5 = ($9 + [28])
	CALL $13($5, $8)
	$3 = *($2)
	$2 = *($5)
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	
.LABEL $label$5
	$5 = ($6 + $1)
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $3
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	$3 = ($9 + [40])
	CALL $84(($10 + [24]), ($10 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$9:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($8 = ($9 + [-16]))) = [0]
	$4 = ($2 + [-4])
	*($1) = *($4)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($8) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($4) = (int_64)0
	*(($8 = ($9 + [-4]))) = [0]
	$4 = ($2 + [8])
	*($1) = *($4)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($8) = *($1)
	*($1) = [0]
	*($4) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$9 }
	$2 = *(($0 + [4]))
	$8 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$8 = $2
	
.LABEL $label$7
	*($0) = $9
	*(($0 + [4])) = $3
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$10 }
	$1 = ([0] - $8)
	$9 = ($2 + [-24])
	
.LOOP $label$11:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$12 }
	*(($9 + [16])) = $2
	CALL $137($2)
	
.LABEL $label$12
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [4])) = $2
	CALL $137($2)
	
.LABEL $label$13
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $137($8)
	
.LABEL $label$14
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [368])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	CALL $20(*($1), ($0 + [8]))
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [368])
	CALL memcpy(*($2 + [4]), ($0 + [24]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [368])
	CALL memcpy(*($2 + [4]), ($0 + [32]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $20(*($1), ($0 + [40]))
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	*(($2 = *($1))) = (*($2) + [8])
	$0 = *($2 + [8])
	$2 = *($0)
	$5 = (CASTING uint_64)(uint_32 ( *(($2 + [12])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $0
	$4 = *(($2 + [8]))
	$4 = ( *(($2 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$2 }
	*($3) = ($4 + $0)
	
.LABEL $label$2
	*(($0 = *($1))) = (*($0) + [8])
	*(($0 = *($1))) = (*($0) + [8])
	$0 = *($2 + [40])
	$5 = (CASTING uint_64)(uint_32 ( *(($2 + [44])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$1 = *($1)
	$0 = *($1)
	
.LOOP $label$3:
	$0 = ($0 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($1) = $0
	$2 = *(($2 + [40]))
	$2 = ( *(($2 + [44])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($1) = ($2 + $0)
	
.LABEL $label$4
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1312])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1360])
	$4 = *($1)
	$8 = $4
	$3 = *($3)
	$5 = ($1 + [20])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$1 }
	CALL $80($5, *($3), *($3 + [4]))
	$8 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$8), [1536])
	$3 = *($1 + [8])
	$7 = *(($1 + [12]))
	*($9) = [8]
	$7 = ( $7 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	$6 = ($1 + [8])
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($9) = $3
	CALL $19($9, $5)
	$7 = *($9)
	if ( ($7 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($9) = $3
	*($9 + [8]) = ($3 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [368])
	CALL memcpy($3, $1, [8])
	*($9 + [4]) = ($3 + [8])
	CALL $21(CALL $20($9, $6), $5)
	CALL db_update_i64(*($1 + [36]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

void .FUNC _ZN6random10makerevealEyyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_64 $30
	int_64 $31
	int_64 $32
	int_64 $33
	int_32 $34
	int_32 $35
	$35 = (*([0] + [4]) - [288])
	*([0] + [4]) = $35
	CALL require_auth($1)
	$29 = [0]
	$28 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$28 < (int_32)[0]) ){ goto $label$1 }
	$29 = CALL $49(($0 + [168]), $28)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$29 != (int_32)[0]), [1136])
	CALL eosio_assert(*($29 + [56]), [2208])
	$24 = *(($0 + [152]))
	$26 = *(($0 + [156]))
	if ( ((int_32)$26 == (int_32)$24) ){ goto $label$2 }
	$29 = ($26 + [-24])
	$25 = ([0] - $24)
	
.LOOP $label$3:
	if ( ((int_64)*(*($29)) == (int_64)$1) ){ goto $label$2 }
	$26 = $29
	$28 = ($29 + [-24])
	$29 = $28
	if ( ((int_32)($28 + $25) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$28 = ($0 + [128])
	if ( ((int_32)$26 == (int_32)$24) ){ goto $label$5 }
	$29 = *(($26 + [-24]))
	CALL eosio_assert(((int_32)*($29 + [96]) == (int_32)$28), [208])
	goto $label$4 
	
.LABEL $label$5
	$29 = [0]
	$26 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)5310418688377470976, $1)
	if ( ((int_32)$26 < (int_32)[0]) ){ goto $label$4 }
	$29 = CALL $58($28, $26)
	CALL eosio_assert(((int_32)*($29 + [96]) == (int_32)$28), [208])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$29 != (int_32)[0]), [1920])
	CALL eosio_assert(((int_32)*($29 + [56]) == (int_32)[1]), [2240])
	$24 = *(($0 + [32]))
	$26 = *(($0 + [36]))
	if ( ((int_32)$26 == (int_32)$24) ){ goto $label$6 }
	$29 = ($26 + [-24])
	$25 = ([0] - $24)
	
.LOOP $label$7:
	if ( ((int_64)*(*($29)) == (int_64)$2) ){ goto $label$6 }
	$26 = $29
	$28 = ($29 + [-24])
	$29 = $28
	if ( ((int_32)($28 + $25) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$4 = ($0 + [8])
	if ( ((int_32)$26 == (int_32)$24) ){ goto $label$9 }
	$5 = *(($26 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$4), [208])
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	$29 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-2042775575138926592, $2)
	if ( ((int_32)$29 < (int_32)[0]) ){ goto $label$8 }
	$5 = CALL $15($4, $29)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$4), [208])
	
.LABEL $label$8
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [1600])
	$29 = *($3)
	if ( ($29 & [1]) ){ goto $label$11 }
	$29 = uint_32($29 >> [1])
	goto $label$10 
	
.LABEL $label$11
	$29 = *($3 + [4])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$29 == (int_32)[64]), [2304])
	$24 = [0]
	*($35 + [248]) = [0]
	*($35 + [240]) = (int_64)0
	$25 = [0]
	$29 = [0]
	$26 = (*(($5 + [24])) - *($5 + [20]))
	$28 = int_32($26 >> [5])
	if ( ($28 == 0) ){ goto $label$13 }
	if ( ((uint_32)$28 >= (uint_32)[134217728]) ){ goto $label$12 }
	$25 = CALL $135($26)
	*((($35 + [240]) + [8])) = ($25 + ($28 << [5]))
	*($35 + [244]) = $25
	*($35 + [240]) = $25
	$26 = *(($5 + [24]))
	$28 = *(($5 + [20]))
	if ( ((int_32)$28 == (int_32)$26) ){ goto $label$14 }
	$29 = $25
	
.LOOP $label$15:
	*($29) = *($28)
	CALL $155(($29 + [8]), ($28 + [8]))
	CALL $155(($29 + [20]), ($28 + [20]))
	$29 = ($29 + [32])
	*($35 + [244]) = $29
	$28 = ($28 + [32])
	if ( ((int_32)$28 != (int_32)$26) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$29 = $25
	
.LABEL $label$13
	CALL eosio_assert(((uint_32)int_32(($29 - $25) >> [5]) > (uint_32)[5]), [2336])
	CALL _ZN6random6cal_hmEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_(($35 + [224]), $35, $2, ($5 + [8]), $3)
	$7 = *($35 + [244])
	$29 = *($35 + [240])
	if ( ((int_32)$29 == (int_32)$7) ){ goto $label$17 }
	$8 = (($35 + [224]) | [1])
	$27 = [0]
	$24 = [0]
	
.LOOP $label$18:
	if ( ((int_64)*($29) != (int_64)$1) ){ goto $label$19 }
	$28 = ($28 & [1])
	$28 = *($29 + [8])
	$26 = ($28 & [1])
	$28 = *($35 + [224])
	$10 = uint_32($28 >> [1])
	$25 = ( *($35 + [228]) ? $10 : $26 )
	if ( ((int_32)$25 != (int_32)( *(($29 + [12])) ? uint_32($28 >> [1]) : $28 )) ){ goto $label$19 }
	$28 = ( *(($29 + [16])) ? (($29 + [8]) + [1]) : $28 )
	if ( $26 ){ goto $label$21 }
	if ( ($25 == 0) ){ goto $label$20 }
	$25 = ([0] - $10)
	$26 = $8
	
.LOOP $label$22:
	if ( ((int_32)*($26) != (int_32)*($28)) ){ goto $label$19 }
	$28 = ($28 + [1])
	$26 = ($26 + [1])
	$25 = ($25 + [1])
	if ( $25 ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	if ( ($25 == 0) ){ goto $label$20 }
	if ( CALL memcmp(( *((($35 + [224]) + [8])) ? $8 : $26 ), $28, $25) ){ goto $label$19 }
	
.LABEL $label$20
	CALL $140(($29 + [20]), $3)
	$27 = [1]
	
.LABEL $label$19
	$28 = *($29 + [20])
	if ( ($28 & [1]) ){ goto $label$24 }
	$28 = uint_32($28 >> [1])
	goto $label$23 
	
.LABEL $label$24
	$28 = *(($29 + [24]))
	
.LABEL $label$23
	$24 = (((int_32)$28 != (int_32)[0]) + $24)
	$29 = ($29 + [32])
	if ( ((int_32)$29 != (int_32)$7) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$27 = [0]
	
.LABEL $label$16
	CALL eosio_assert(($27 & [1]), [2368])
	*($35 + [96]) = (CASTING uint_64)(uint_32 $4)
	$29 = CALL $50(($35 + [96]))
	if ( ((int_32)$24 != (int_32)[6]) ){ goto $label$28 }
	$9 = *(*($29 + [4]))
	*($35 + [216]) = [0]
	*($35 + [208]) = (int_64)0
	*($35 + [192]) = (int_64)0
	*($35 + [200]) = [0]
	$7 = *($35 + [244])
	$26 = *($35 + [240])
	if ( ((int_32)$26 == (int_32)$7) ){ goto $label$27 }
	$25 = (($35 + [96]) + [8])
	$29 = [0]
	$28 = [0]
	
.LOOP $label$29:
	$29 = ( $29 ? uint_32(($28 & [254]) >> [1]) : ($28 & [1]) )
	if ( ($29 == 0) ){ goto $label$33 }
	*($25) = [0]
	*($35 + [96]) = (int_64)0
	$24 = *($35 + [192])
	if ( ((int_32)$29 != (int_32)( *($35 + [196]) ? uint_32($24 >> [1]) : ($24 & [1]) )) ){ goto $label$34 }
	$29 = [0]
	
.LOOP $label$35:
	CALL $146(($35 + [96]), int_32((((int_32)*(CALL $143(($35 + [208]), $29)) ^ (int_32)*(CALL $143(($35 + [192]), $29))) << [24]) >> [24]))
	$28 = *($35 + [208])
	$29 = ($29 + [1])
	if ( ($29 <= ( *($35 + [212]) ? uint_32($28 >> [1]) : ($28 & [1]) )) ){ goto $label$35 }
	
.LABEL $label$34
	if ( ($28 & [1]) ){ goto $label$32 }
	*($35 + [208]) = [0]
	goto $label$31 
	
.LABEL $label$33
	$29 = *($35 + [192])
	if ( (( *($35 + [196]) ? uint_32($29 >> [1]) : ($29 & [1]) ) == 0) ){ goto $label$30 }
	CALL $140(($35 + [208]), ($35 + [192]))
	goto $label$30 
	
.LABEL $label$32
	*(*((($35 + [208]) + [8]))) = [0]
	*($35 + [212]) = [0]
	
.LABEL $label$31
	CALL $142(($35 + [208]), [0])
	*((($35 + [208]) + [8])) = *($25)
	*($35 + [208]) = *($35 + [96])
	
.LABEL $label$30
	CALL $140(($35 + [192]), ($26 + [20]))
	$29 = *($35 + [212])
	$28 = *($35 + [208])
	$26 = ($26 + [32])
	if ( ((int_32)$26 != (int_32)$7) ){ goto $label$29 }
	goto $label$26 
	
.LABEL $label$28
	$31 = *($0)
	*($35 + [96]) = ($35 + [240])
	CALL $82($4, $5, $31, ($35 + [96]))
	goto $label$25 
	
.LABEL $label$27
	$29 = [0]
	$28 = [0]
	
.LABEL $label$26
	*($35 + [24]) = [0]
	*($35 + [16]) = (int_64)0
	if ( (( $29 ? uint_32(($28 & [254]) >> [1]) : ($28 & [1]) ) == 0) ){ goto $label$36 }
	$29 = [0]
	
.LOOP $label$37:
	*((($35 + [96]) + [16])) = [0]
	*($35 + [104]) = (int_64)0
	*($35 + [96]) = (int_64)0
	*($35) = ((int_32)*(CALL $143(($35 + [208]), $29)) % (int_32)[16])
	CALL snprintf(($35 + [96]), [17], [432], $35)
	CALL $146(($35 + [16]), *($35 + [96]))
	$28 = *($35 + [208])
	$29 = ($29 + [1])
	if ( ($29 <= ( *($35 + [212]) ? uint_32($28 >> [1]) : ($28 & [1]) )) ){ goto $label$37 }
	
.LABEL $label$36
	if ( ($28 & [1]) ){ goto $label$39 }
	*($35 + [208]) = [0]
	goto $label$38 
	
.LABEL $label$39
	*(*(($35 + [216]))) = [0]
	*($35 + [212]) = [0]
	
.LABEL $label$38
	CALL $142(($35 + [208]), [0])
	$10 = (($35 + [16]) + [8])
	*((($35 + [208]) + [8])) = *($10)
	*($35 + [208]) = *($35 + [16])
	*($35 + [184]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	$29 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)-6497942495177998336, (int_64)0)
	if ( ((int_32)$29 < (int_32)[0]) ){ goto $label$40 }
	$24 = ($0 + [48])
	$26 = CALL $8($24, $29)
	$3 = (($35 + [16]) + [40])
	$11 = (($35 + [96]) + [36])
	$13 = ($35 + [108])
	$14 = (($35 + [96]) + [16])
	$27 = (($35 + [96]) + [20])
	$15 = (($35 + [96]) + [24])
	$16 = (($35 + [96]) + [28])
	$17 = (($35 + [96]) + [32])
	$8 = ($35 + [140])
	$18 = (($35 + [96]) + [48])
	$19 = ($35 + [148])
	$20 = (($35 + [96]) + [56])
	$25 = [0]
	
.LOOP $label$41:
	$31 = *($35 + [184])
	if ( ((uint_64)((int_64)*($26 + [56]) + (int_64)500) >= (uint_64)$31) ){ goto $label$42 }
	if ( ((uint_64)((int_64)*($26 + [64]) + (int_64)1000) >= (uint_64)$31) ){ goto $label$42 }
	$31 = (int_64)0
	*($35 + [168]) = (int_64)0
	*($35 + [160]) = ((int_64)*($26) + (int_64)*($0))
	$33 = CALL current_time()
	*($13) = [0]
	*($14) = [0]
	*($27) = [0]
	*($15) = [0]
	*($16) = [0]
	*($17) = [0]
	*($35 + [96]) = ((CASTING uint_32)(uint_64 ((uint_64)$33 / (uint_64)(int_64)1000000)) + [60])
	*($11) = [0]
	*(($7 = (($35 + [96]) + [40]))) = [0]
	*($8) = [0]
	*($18) = [0]
	*($19) = [0]
	*($20) = [0]
	$12 = *($0)
	$30 = (int_64)59
	$29 = [1216]
	$32 = (int_64)0
	
.LOOP $label$43:
	if ( ((uint_64)$31 > (uint_64)(int_64)5) ){ goto $label$48 }
	$28 = *($29)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$28 = ($28 + [165])
	goto $label$46 
	
.LABEL $label$48
	$33 = (int_64)0
	if ( ((uint_64)$31 <= (uint_64)(int_64)11) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$33 = (int_64)((int_64)(CASTING uint_64)(uint_32 $28) << (int_64)56) >> (int_64)56)
	
.LABEL $label$45
	$33 = ((int_64)((int_64)$33 & (int_64)31) << (int_64)((int_64)$30 & (int_64)4294967295))
	
.LABEL $label$44
	$29 = ($29 + [1])
	$31 = ((int_64)$31 + (int_64)1)
	$32 = ((int_64)$33 | (int_64)$32)
	$30 = ((int_64)$30 + (int_64)-5)
	if ( ((int_64)$30 != (int_64)-6) ){ goto $label$43 }
	*(($21 = (($35 + [80]) + [8]))) = $32
	*($35 + [80]) = $12
	$31 = (int_64)0
	$33 = (int_64)59
	$29 = [2400]
	$32 = (int_64)0
	
.LOOP $label$49:
	$30 = (int_64)0
	if ( ((uint_64)$31 > (uint_64)(int_64)11) ){ goto $label$50 }
	$28 = *($29)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$28 = ($28 + [165])
	goto $label$51 
	
.LABEL $label$52
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$30 = ((int_64)(CASTING uint_64)(uint_32 ($28 & [31])) << (int_64)((int_64)$33 & (int_64)4294967295))
	
.LABEL $label$50
	$29 = ($29 + [1])
	$31 = ((int_64)$31 + (int_64)1)
	$32 = ((int_64)$30 | (int_64)$32)
	$33 = ((int_64)$33 + (int_64)-5)
	if ( ((int_64)$33 != (int_64)-6) ){ goto $label$49 }
	*($35 + [72]) = $32
	*($35 + [16]) = *($26 + [8])
	CALL $155($10, ($26 + [16]))
	*((($35 + [16]) + [24])) = *($26 + [32])
	*((($35 + [16]) + [32])) = *(($26 + [56]))
	CALL $155($3, ($35 + [208]))
	$29 = *($7)
	if ( ((uint_32)$29 >= (uint_32)*($8)) ){ goto $label$56 }
	*($29 + [16 align=4]) = (int_64)0
	$31 = *($0)
	*($29 + [8]) = *($35 + [72])
	*($29) = $31
	$34 = [0]
	*(($22 = ($29 + [24]))) = [0]
	$28 = CALL $135([16])
	*($29 + [16]) = $28
	$23 = ($28 + [16])
	*($22) = $23
	*(($28 + [8])) = *($21)
	*($28) = *($35 + [80])
	*(($29 + [20])) = $23
	*($29 + [28]) = [0]
	*(($28 = ($29 + [32]))) = [0]
	*(($29 + [36])) = [0]
	*($35 + [272]) = [0]
	*($35 + [280]) = ($35 + [272])
	*($35 + [256]) = ($35 + [16])
	CALL $83(($35 + [256]), ($35 + [280]))
	$21 = *($35 + [272])
	if ( ($21 == 0) ){ goto $label$55 }
	$29 = ($29 + [28])
	CALL $13($29, $21)
	$34 = *($28)
	$29 = *($29)
	goto $label$54 
	
.LABEL $label$56
	CALL $85($11, ($35 + [80]), $0, ($35 + [72]), ($35 + [16]))
	goto $label$53 
	
.LABEL $label$55
	$29 = [0]
	
.LABEL $label$54
	*((($35 + [256]) + [8])) = $34
	*($35 + [260]) = $29
	*($35 + [256]) = $29
	*($35 + [272]) = ($35 + [256])
	*($35 + [280]) = ($35 + [16])
	CALL $84(($35 + [280]), ($35 + [272]))
	*($7) = (*($7) + [40])
	
.LABEL $label$53
	if ( ((*($3) & [1]) == 0) ){ goto $label$57 }
	CALL $137(*((($35 + [16]) + [48])))
	
.LABEL $label$57
	if ( ((*($10) & [1]) == 0) ){ goto $label$58 }
	CALL $137(*((($35 + [16]) + [16])))
	
.LABEL $label$58
	*($27) = [1]
	CALL cancel_deferred(($35 + [160]))
	CALL $86(($35 + [16]), ($35 + [96]))
	$29 = *($35 + [16])
	CALL send_deferred(($35 + [160]), $1, $29, (*($35 + [20]) - $29), [1])
	$29 = *($35 + [16])
	if ( ($29 == 0) ){ goto $label$59 }
	*($35 + [20]) = $29
	CALL $137($29)
	
.LABEL $label$59
	$31 = *($0)
	*($35 + [16]) = ($35 + [184])
	CALL $87($24, $26, $31, ($35 + [16]))
	$25 = ($25 + [1])
	CALL $88(($35 + [96]))
	
.LABEL $label$42
	CALL eosio_assert([1], [16])
	$29 = CALL db_next_i64(*($26 + [88]), ($35 + [96]))
	if ( ((int_32)$29 <= (int_32)[-1]) ){ goto $label$40 }
	$26 = CALL $8($24, $29)
	if ( ((int_32)$25 < (int_32)[3]) ){ goto $label$41 }
	
.LABEL $label$40
	CALL eosio_assert($6, [384])
	CALL eosio_assert($6, [16])
	$29 = CALL db_next_i64(*($5 + [36]), ($35 + [96]))
	if ( ((int_32)$29 < (int_32)[0]) ){ goto $label$60 }
	CALL $15($4, $29)
	
.LABEL $label$60
	CALL $25($4, $5)
	CALL _ZN6random18erase_lower_windowEyyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $2, $9, ($35 + [208]))
	if ( ((*($35 + [192]) & [1]) == 0) ){ goto $label$61 }
	CALL $137(*(($35 + [200])))
	
.LABEL $label$61
	if ( ((*($35 + [208]) & [1]) == 0) ){ goto $label$25 }
	CALL $137(*(($35 + [216])))
	
.LABEL $label$25
	if ( ((*($35 + [224]) & [1]) == 0) ){ goto $label$62 }
	CALL $137(*($35 + [232]))
	
.LABEL $label$62
	$26 = *($35 + [240])
	if ( ($26 == 0) ){ goto $label$63 }
	$29 = *($35 + [244])
	if ( ((int_32)$29 == (int_32)$26) ){ goto $label$65 }
	$28 = ([0] - $26)
	$29 = ($29 + [-24])
	
.LOOP $label$66:
	if ( ((*(($29 + [12])) & [1]) == 0) ){ goto $label$67 }
	CALL $137(*(($29 + [20])))
	
.LABEL $label$67
	if ( ((*($29) & [1]) == 0) ){ goto $label$68 }
	CALL $137(*(($29 + [8])))
	
.LABEL $label$68
	$29 = ($29 + [-32])
	if ( ((int_32)($29 + $28) != (int_32)[-24]) ){ goto $label$66 }
	$29 = *($35 + [240])
	goto $label$64 
	
.LABEL $label$65
	$29 = $26
	
.LABEL $label$64
	*($35 + [244]) = $26
	CALL $137($29)
	
.LABEL $label$63
	*([0] + [4]) = ($35 + [288])
	return (unreachable)
	
.LABEL $label$12
	CALL $153(($35 + [240]))
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = int_32(($2 - $1) >> [5])
	if ( ((uint_32)$3 <= (uint_32)int_32(($7 - $6) >> [5])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-24])
	
.LOOP $label$7:
	if ( ((*(($7 + [12])) & [1]) == 0) ){ goto $label$8 }
	CALL $137(*(($7 + [20])))
	
.LABEL $label$8
	if ( ((*($7) & [1]) == 0) ){ goto $label$9 }
	CALL $137(*(($7 + [8])))
	
.LABEL $label$9
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = int_32($5 >> [5])
	$5 = (*($0 + [4]) - $6)
	$7 = ($1 + $5)
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$11:
	*($6) = *($1)
	CALL $140(($6 + [8]), ($1 + [8]))
	CALL $140(($6 + [20]), ($1 + [20]))
	$6 = ($6 + [32])
	$1 = ($1 + [32])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$12 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$6 = ($0 + [4])
	$1 = *($6)
	
.LOOP $label$13:
	*($1) = *($7)
	CALL $155(($1 + [8]), ($7 + [8]))
	CALL $155(($1 + [20]), ($7 + [20]))
	$1 = (*($6) + [32])
	*($6) = $1
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$13 }
	goto $label$2 
	
.LABEL $label$12
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$14 }
	$7 = ([0] - $6)
	$1 = ($1 + [-24])
	
.LOOP $label$15:
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$16 }
	CALL $137(*(($1 + [20])))
	
.LABEL $label$16
	if ( ((*($1) & [1]) == 0) ){ goto $label$17 }
	CALL $137(*(($1 + [8])))
	
.LABEL $label$17
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $7) != (int_32)[-24]) ){ goto $label$15 }
	
.LABEL $label$14
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $137($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$1 }
	$6 = [134217727]
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$18 }
	$6 = $3
	$7 = int_32($7 >> [4])
	if ( ($7 <= $3) ){ goto $label$18 }
	$6 = $7
	if ( ((uint_32)$7 >= (uint_32)[134217728]) ){ goto $label$1 }
	
.LABEL $label$18
	$7 = ($6 << [5])
	$6 = CALL $135($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$19:
	*($6) = *($1)
	CALL $155(($6 + [8]), ($1 + [8]))
	CALL $155(($6 + [20]), ($1 + [20]))
	$6 = (*($7) + [32])
	*($7) = $6
	$1 = ($1 + [32])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$19 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $153($0)
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [14417])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [14417])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [14417]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [14417]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [14688]))
	$10 = *(($13 + [14417]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [14417]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [14417]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [14417]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [14417])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [14417])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

int_32 .FUNC _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = CALL strlen([11824])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($6) = ($3 << [1])
	$5 = ($6 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $135($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($5, [11824], $3)
	
.LABEL $label$4
	*(($5 + $3)) = [0]
	*($6 + [12]) = [0]
	$3 = *($0 + [8])
	$5 = *($0)
	$4 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($5 & [1]) )
	$2 = CALL strtol($3, ($6 + [12]), $2)
	$0 = CALL __errno_location()
	$5 = *($0)
	*($0) = $4
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($6 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL $137(*($6 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
	return $2
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $150($6)
	
.LABEL $label$1
	CALL $151($6)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $148 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0)
	$8 = ($7 & [1])
	if ( $8 ){ goto $label$3 }
	$5 = uint_32($7 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($5 - $1)
	$2 = ( $6 ? $2 : ($6 <= $2) )
	if ( $8 ){ goto $label$5 }
	$8 = [10]
	goto $label$4 
	
.LABEL $label$5
	$7 = *($0)
	$8 = (($7 & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)(($2 - $5) + $8) >= (uint_32)$4) ){ goto $label$6 }
	CALL $141($0, $8, ((($5 + $4) - $2) - $8), $5, $1, $2, $4, $3)
	return $0
	
.LABEL $label$6
	if ( ($7 & [1]) ){ goto $label$12 }
	$8 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$8 = *($0 + [8])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$11
	$2 = $4
	$7 = $4
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$6 = ($6 - $2)
	if ( ($6 == 0) ){ goto $label$14 }
	$7 = ($8 + $1)
	if ( ((uint_32)$2 <= (uint_32)$4) ){ goto $label$13 }
	if ( ($4 == 0) ){ goto $label$15 }
	CALL memmove($7, $3, $4)
	
.LABEL $label$15
	CALL memmove(($7 + $4), ($7 + $2), $6)
	goto $label$7 
	
.LABEL $label$14
	$7 = $4
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$13
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$17 }
	if ( ((uint_32)($8 + $5) <= (uint_32)$3) ){ goto $label$17 }
	if ( ((uint_32)($7 + $2) <= (uint_32)$3) ){ goto $label$18 }
	if ( ($2 == 0) ){ goto $label$19 }
	CALL memmove($7, $3, $2)
	
.LABEL $label$19
	$7 = ($4 - $2)
	$3 = ($3 + $4)
	$1 = ($2 + $1)
	$2 = [0]
	goto $label$16 
	
.LABEL $label$18
	$3 = ($3 + ($4 - $2))
	
.LABEL $label$17
	$7 = $4
	
.LABEL $label$16
	$4 = ($8 + $1)
	CALL memmove(($4 + $7), ($4 + $2), $6)
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL memmove(($8 + $1), $3, $7)
	$4 = $7
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	$4 = (($4 - $2) + $5)
	if ( (*($0) & [1]) ){ goto $label$21 }
	*($0) = ($4 << [1])
	goto $label$20 
	
.LABEL $label$21
	*($0 + [4]) = $4
	
.LABEL $label$20
	*(($8 + $4)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $145 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $141($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	return CALL $145($0, $1, CALL $187($1))
}

void .FUNC $147 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $135($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $137($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $147($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $141 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $135($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $137($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $141($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = ($2 & [1])
	if ( $3 ){ goto $label$3 }
	if ( ((uint_32)uint_32($2 >> [1]) > (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_32)*($0 + [4]) <= (uint_32)$1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $3 ){ goto $label$4 }
	return (($0 + [1]) + $1)
	
.LABEL $label$4
	return (*($0 + [8]) + $1)
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $135(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $137($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [496])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [560])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$7 }
	CALL $137(*(($4 + [80])))
	
.LABEL $label$7
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL $137(*(($4 + [24])))
	
.LABEL $label$8
	CALL $137($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($4 + [80])))
	
.LABEL $label$11
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $137(*(($4 + [24])))
	
.LABEL $label$12
	CALL $137($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [88]))
}

void .FUNC _ZN6random10make_orderEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [176])
	*([0] + [4]) = $9
	*($9 + [128]) = $1
	*($9 + [120]) = $3
	CALL require_auth($1)
	$6 = [0]
	$8 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $49(($0 + [168]), $5)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1136])
	if ( (*($8 + [56]) == 0) ){ goto $label$2 }
	$6 = *($8 + [58])
	
.LABEL $label$2
	CALL eosio_assert($6, [1744])
	$8 = *($2)
	if ( ($8 & [1]) ){ goto $label$4 }
	$8 = uint_32($8 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$8 = *($2 + [4])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 == (int_32)[32]), [1808])
	CALL eosio_assert(CALL $fimport$26($3), [1856])
	*((($9 + [32]) + [24])) = [0]
	*(($9 + [80])) = (int_64)1397703940
	*($9 + [40]) = (int_64)0
	*($9 + [48]) = (int_64)0
	*($9 + [64]) = (int_64)0
	*($9 + [72]) = (int_64)0
	CALL eosio_assert([1], [80])
	$7 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	
.LABEL $label$5
	CALL eosio_assert($6, [144])
	$8 = [0]
	*(($9 + [112])) = [0]
	*(($9 + [40])) = $1
	*($9 + [104]) = (int_64)0
	CALL $140(($9 + [48]), $2)
	*(($9 + [64])) = $3
	CALL eosio_assert(((int_32)CALL $7($0, ($9 + [32])) ^ (int_32)[1]), [1776])
	*($9 + [24]) = (int_64)0
	$5 = ($0 + [48])
	$6 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)-6497942495177998336, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$10 }
	CALL $8($5, $6)
	*($9 + [4]) = [0]
	*($9) = $5
	*($9 + [24]) = ((int_64)*(*(CALL $74($9) + [4])) + (int_64)1)
	
.LABEL $label$10
	$7 = *($0)
	*($9 + [8]) = $2
	*($9 + [16]) = $4
	*($9 + [4]) = ($9 + [128])
	*($9) = ($9 + [24])
	*($9 + [12]) = ($9 + [120])
	*($9 + [168]) = $7
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$14()), [304])
	*($9 + [144]) = $5
	*($9 + [148]) = $9
	*($9 + [152]) = ($9 + [168])
	*(($6 = CALL $135([96])) + [8]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24]) = [0]
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)1397703940
	CALL eosio_assert([1], [80])
	$7 = (int_64)5459781
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$2 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$2 = [0]
	
.LABEL $label$11
	CALL eosio_assert($2, [144])
	*($6 + [80]) = [0]
	*($6 + [72 align=4]) = (int_64)0
	*($6 + [84]) = $5
	CALL $75(($9 + [144]), $6)
	*($9 + [160]) = $6
	$7 = *($6)
	*($9 + [144]) = $7
	$5 = *($6 + [88])
	*($9 + [140]) = $5
	$2 = ($0 + [76])
	$8 = *($2)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [80]))) ){ goto $label$17 }
	*($8 + [8]) = $7
	*($8 + [16]) = $5
	*($9 + [160]) = [0]
	*($8) = $6
	*($2) = ($8 + [24])
	goto $label$16 
	
.LABEL $label$17
	CALL $10(($0 + [72]), ($9 + [160]), ($9 + [144]), ($9 + [140]))
	
.LABEL $label$16
	$8 = *($9 + [160])
	*($9 + [160]) = [0]
	if ( ($8 == 0) ){ goto $label$18 }
	if ( ((*($8 + [72]) & [1]) == 0) ){ goto $label$19 }
	CALL $137(*(($8 + [80])))
	
.LABEL $label$19
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$20 }
	CALL $137(*(($8 + [24])))
	
.LABEL $label$20
	CALL $137($8)
	
.LABEL $label$18
	if ( ((*($9 + [104]) & [1]) == 0) ){ goto $label$21 }
	CALL $137(*(($9 + [112])))
	
.LABEL $label$21
	if ( ((*(($9 + [48])) & [1]) == 0) ){ goto $label$22 }
	CALL $137(*(($9 + [56])))
	
.LABEL $label$22
	*([0] + [4]) = ($9 + [176])
}

void .FUNC _ZN6random8closeordEyb (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [144])
	*([0] + [4]) = $15
	CALL require_auth(*($0))
	$4 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$9 = ($8 + [-24])
	$3 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$1 }
	$8 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [48])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$8 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [84]) == (int_32)$3), [208])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-6497942495177998336, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $8($3, $9)
	CALL eosio_assert(((int_32)*($8 + [84]) == (int_32)$3), [208])
	
.LABEL $label$3
	$4 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($4, [1632])
	if ( ($2 == 0) ){ goto $label$6 }
	$5 = *($0)
	$1 = (int_64)0
	$10 = (int_64)59
	$9 = [1216]
	$11 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$12 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$6 = ($6 + [165])
	goto $label$10 
	
.LABEL $label$12
	$12 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$8
	$9 = ($9 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$7 }
	$1 = (int_64)0
	$12 = (int_64)59
	$9 = [1232]
	$13 = (int_64)0
	
.LOOP $label$13:
	$10 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$14 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$6 = ($6 + [165])
	goto $label$15 
	
.LABEL $label$16
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$14
	$9 = ($9 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$10 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$13 }
	$1 = (int_64)0
	$10 = (int_64)59
	$9 = [1248]
	$14 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$22 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [165])
	goto $label$20 
	
.LABEL $label$22
	$12 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$18
	$9 = ($9 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$17 }
	*(($15 + [16])) = [0]
	*($15 + [8]) = (int_64)0
	$9 = CALL strlen([1664])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$5 }
	$6 = ($8 + [40])
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$25 }
	*($15 + [8]) = ($9 << [1])
	$2 = (($15 + [8]) | [1])
	if ( $9 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$7 = (($9 + [16]) & [-16])
	$2 = CALL $135($7)
	*($15 + [8]) = ($7 | [1])
	*($15 + [16]) = $2
	*($15 + [12]) = $9
	
.LABEL $label$24
	CALL memcpy($2, [1664], $9)
	
.LABEL $label$23
	*(($2 + $9)) = [0]
	$1 = *($8 + [8])
	*((($15 + [24]) + [24])) = *(($6 + [8]))
	*((($15 + [24]) + [20])) = *(($6 + [4]))
	*((($15 + [24]) + [28])) = *(($6 + [12]))
	*($15 + [24]) = *($0)
	*($15 + [32]) = $1
	*($15 + [40]) = *($6)
	$9 = (($15 + [8]) + [8])
	*(($15 + [64])) = *($9)
	*($15 + [56]) = *($15 + [8])
	*($15 + [8]) = [0]
	*($15 + [12]) = [0]
	*($9) = [0]
	*($15 + [72]) = $13
	*($15 + [80]) = $14
	*(($9 = CALL $135([16]))) = $5
	*($9 + [8]) = $11
	*((($15 + [72]) + [32])) = [0]
	$6 = ($9 + [16])
	*((($15 + [72]) + [24])) = $6
	*((($15 + [72]) + [20])) = $6
	*($15 + [88]) = $9
	*($15 + [100]) = [0]
	*((($15 + [72]) + [36])) = [0]
	$9 = *($15 + [56])
	$6 = ( *((($15 + [24]) + [36])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($6 + [32])
	$1 = (CASTING uint_64)(uint_32 $6)
	$6 = (($15 + [72]) + [28])
	
.LOOP $label$26:
	$9 = ($9 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$26 }
	if ( ($9 == 0) ){ goto $label$28 }
	CALL $13($6, $9)
	$6 = *(($15 + [104]))
	$9 = *(($15 + [100]))
	goto $label$27 
	
.LABEL $label$28
	$6 = [0]
	$9 = [0]
	
.LABEL $label$27
	*($15 + [132]) = $9
	*($15 + [128]) = $9
	*($15 + [136]) = $6
	*($15 + [112]) = ($15 + [128])
	*($15 + [120]) = ($15 + [24])
	CALL $71(($15 + [120]), ($15 + [112]))
	CALL $60(($15 + [128]), ($15 + [72]))
	$9 = *($15 + [128])
	CALL send_inline($9, (*($15 + [132]) - $9))
	$9 = *($15 + [128])
	if ( ($9 == 0) ){ goto $label$29 }
	*($15 + [132]) = $9
	CALL $137($9)
	
.LABEL $label$29
	$9 = *($15 + [100])
	if ( ($9 == 0) ){ goto $label$30 }
	*(($15 + [104])) = $9
	CALL $137($9)
	
.LABEL $label$30
	$9 = *($15 + [88])
	if ( ($9 == 0) ){ goto $label$31 }
	*(($15 + [92])) = $9
	CALL $137($9)
	
.LABEL $label$31
	if ( ((*(($15 + [56])) & [1]) == 0) ){ goto $label$32 }
	CALL $137(*(($15 + [64])))
	
.LABEL $label$32
	if ( ((*($15 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $137(*(($15 + [16])))
	
.LABEL $label$6
	CALL eosio_assert($4, [384])
	CALL eosio_assert($4, [16])
	$9 = CALL db_next_i64(*($8 + [88]), ($15 + [24]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$33 }
	CALL $8($3, $9)
	
.LABEL $label$33
	CALL $72($3, $8)
	*([0] + [4]) = ($15 + [144])
	return (unreachable)
	
.LABEL $label$5
	CALL $139(($15 + [8]))
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [368])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [368])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [368])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $20(*($1), ($0 + [32]))
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $20($0, ($1 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $20($0, ($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC _ZN6random10makecommitEyyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	CALL require_auth($1)
	$8 = [0]
	$9 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $49(($0 + [168]), $9)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1136])
	CALL eosio_assert(*($8 + [56]), [1888])
	$7 = *(($0 + [152]))
	$10 = *(($0 + [156]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$2 }
	$8 = ($10 + [-24])
	$5 = ([0] - $7)
	
.LOOP $label$3:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$2 }
	$10 = $8
	$9 = ($8 + [-24])
	$8 = $9
	if ( ((int_32)($9 + $5) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$9 = ($0 + [128])
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$5 }
	$8 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$9), [208])
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	$10 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)5310418688377470976, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $58($9, $10)
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$9), [208])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1920])
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)[1]), [1968])
	$7 = *(($0 + [32]))
	$10 = *(($0 + [36]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$6 }
	$8 = ($10 + [-24])
	$5 = ([0] - $7)
	
.LOOP $label$7:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$6 }
	$10 = $8
	$9 = ($8 + [-24])
	$8 = $9
	if ( ((int_32)($9 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$4 = ($0 + [8])
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$9 }
	$7 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$4), [208])
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-2042775575138926592, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	$7 = CALL $15($4, $8)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$4), [208])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1600])
	$8 = *($3)
	if ( ($8 & [1]) ){ goto $label$11 }
	$8 = uint_32($8 >> [1])
	goto $label$10 
	
.LABEL $label$11
	$8 = *($3 + [4])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$8 == (int_32)[64]), [2032])
	$10 = [0]
	*($11 + [56]) = [0]
	*($11 + [48]) = (int_64)0
	$9 = (*(($7 + [24])) - *($7 + [20]))
	$8 = int_32($9 >> [5])
	if ( ($8 == 0) ){ goto $label$15 }
	if ( ((uint_32)$8 >= (uint_32)[134217728]) ){ goto $label$12 }
	$10 = CALL $135($9)
	*((($11 + [48]) + [8])) = ($10 + ($8 << [5]))
	*($11 + [52]) = $10
	*($11 + [48]) = $10
	$5 = *(($7 + [24]))
	$9 = *(($7 + [20]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$14 }
	$8 = $10
	
.LOOP $label$16:
	*($8) = *($9)
	CALL $155(($8 + [8]), ($9 + [8]))
	CALL $155(($8 + [20]), ($9 + [20]))
	$8 = ($8 + [32])
	*($11 + [52]) = $8
	$9 = ($9 + [32])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$16 }
	$9 = $10
	$10 = $8
	goto $label$13 
	
.LABEL $label$15
	$9 = [0]
	goto $label$13 
	
.LABEL $label$14
	$9 = $10
	
.LABEL $label$13
	CALL eosio_assert((int_32(($10 - $9) >> [5]) <= [6]), [2064])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$17 }
	
.LOOP $label$18:
	if ( ((int_64)*($9) != (int_64)$1) ){ goto $label$19 }
	CALL eosio_assert([0], [2160])
	
.LABEL $label$19
	$9 = ($9 + [32])
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$18 }
	
.LABEL $label$17
	CALL $156(($11 + [16]), $3, [0], [4], $3)
	$6 = CALL strtoll(( *($11 + [24]) ? (($11 + [16]) | [1]) : (*($11 + [16]) & [1]) ), [0], [16])
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$20 }
	CALL $137(*(($11 + [24])))
	
.LABEL $label$20
	CALL eosio_assert(((int_64)((int_64)$6 << (int_64)32) >> (int_64)32) == (int_64)((uint_64)$2 % (uint_64)(int_64)65535)), [2112])
	*((($11 + [16]) + [16])) = (int_64)0
	*(($11 + [40])) = (int_64)0
	*($11 + [24]) = (int_64)0
	*($11 + [16]) = $1
	$9 = (($11 + [16]) + [8])
	CALL $140($9, $3)
	$8 = *($11 + [52])
	if ( ((int_32)$8 == (int_32)*((($11 + [48]) + [8]))) ){ goto $label$22 }
	*($8) = *($11 + [16])
	CALL $155(($8 + [8]), $9)
	$8 = (($11 + [16]) + [20])
	CALL $155(($8 + [20]), $8)
	*($11 + [52]) = (*($11 + [52]) + [32])
	goto $label$21 
	
.LABEL $label$22
	CALL $78(($11 + [48]), ($11 + [16]))
	$8 = ($11 + [36])
	
.LABEL $label$21
	$1 = *($0)
	*($11 + [8]) = ($11 + [48])
	CALL $79($4, $7, $1, ($11 + [8]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$23 }
	CALL $137(*(($11 + [44])))
	
.LABEL $label$23
	if ( ((*(($11 + [24])) & [1]) == 0) ){ goto $label$24 }
	CALL $137(*(($11 + [32])))
	
.LABEL $label$24
	$10 = *($11 + [48])
	if ( ($10 == 0) ){ goto $label$25 }
	$8 = *($11 + [52])
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$27 }
	$9 = ([0] - $10)
	$8 = ($8 + [-24])
	
.LOOP $label$28:
	if ( ((*(($8 + [12])) & [1]) == 0) ){ goto $label$29 }
	CALL $137(*(($8 + [20])))
	
.LABEL $label$29
	if ( ((*($8) & [1]) == 0) ){ goto $label$30 }
	CALL $137(*(($8 + [8])))
	
.LABEL $label$30
	$8 = ($8 + [-32])
	if ( ((int_32)($8 + $9) != (int_32)[-24]) ){ goto $label$28 }
	$8 = *($11 + [48])
	goto $label$26 
	
.LABEL $label$27
	$8 = $10
	
.LABEL $label$26
	*($11 + [52]) = $10
	CALL $137($8)
	
.LABEL $label$25
	*([0] + [4]) = ($11 + [64])
	return (unreachable)
	
.LABEL $label$12
	CALL $153(($11 + [48]))
}

int_32 .FUNC $74 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [88]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1008])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6497942495177998336)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [944])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [944])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $8(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$5 = *($0 + [4])
	*($1) = *(*($5))
	*($1 + [8]) = *(*($5 + [4]))
	$2 = *($0)
	CALL $140(($1 + [16]), *($5 + [8]))
	*($1 + [32]) = *(*($5 + [12]))
	$5 = *($5 + [16])
	*($1 + [40]) = *($5)
	*(($1 + [48])) = *(($5 + [8]))
	$4 = CALL current_time()
	*($1 + [64]) = (int_64)0
	*($1 + [56]) = ((uint_64)$4 / (uint_64)(int_64)1000)
	$5 = *($1 + [16])
	$3 = ( *(($1 + [20])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [56])
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$3 = *($1 + [72])
	$3 = ( *(($1 + [76])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $5)
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $76($7, $1)
	$4 = *($1)
	*($1 + [88]) = CALL db_store_i64(*($2 + [8]), (int_64)-6497942495177998336, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$4 = int_32((*($0 + [4]) - $7) >> [5])
	$6 = ($4 + [1])
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	$5 = [134217727]
	$7 = (*($0 + [8]) - $7)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$7 = int_32($7 >> [4])
	$5 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$6 = CALL $135(($5 << [5]))
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $153($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($7 = ($6 + ($4 << [5])))) = *($1)
	CALL $155(($7 + [8]), ($1 + [8]))
	CALL $155(($7 + [20]), ($1 + [20]))
	$2 = ($6 + ($5 << [5]))
	$3 = ($7 + [32])
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$7 }
	$4 = ([0] - $1)
	$1 = ($5 + [-16])
	
.LOOP $label$8:
	*(($7 + [-32])) = *(($1 + [-16]))
	$5 = ($1 + [-4])
	*(($7 + [-20])) = *($5)
	$6 = ($1 + [-8])
	*(($7 + [-24])) = *($6)
	*($1) = [0]
	*($5) = [0]
	*($6) = [0]
	$5 = ($1 + [12])
	*(($7 + [-4])) = *($5)
	$6 = ($1 + [4])
	*(($7 + [-12])) = *($6)
	*($6) = [0]
	*(($1 + [8])) = [0]
	*($5) = [0]
	$7 = ($7 + [-32])
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $4) != (int_32)[-16]) ){ goto $label$8 }
	$1 = *(($0 + [4]))
	$5 = *($0)
	goto $label$6 
	
.LABEL $label$7
	$5 = $1
	
.LABEL $label$6
	*($0) = $7
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$9 }
	$7 = ([0] - $5)
	$1 = ($1 + [-24])
	
.LOOP $label$10:
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($1 + [20])))
	
.LABEL $label$11
	if ( ((*($1) & [1]) == 0) ){ goto $label$12 }
	CALL $137(*(($1 + [8])))
	
.LABEL $label$12
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $7) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ($5 == 0) ){ goto $label$13 }
	CALL $137($5)
	
.LABEL $label$13
	(unreachable)
	(unreachable)
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1312])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1360])
	$4 = *($1)
	$8 = $4
	$3 = *($3)
	$5 = ($1 + [20])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$1 }
	CALL $80($5, *($3), *($3 + [4]))
	$8 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$8), [1536])
	$3 = *($1 + [8])
	$7 = *(($1 + [12]))
	*($9) = [8]
	$7 = ( $7 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	$6 = ($1 + [8])
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($9) = $3
	CALL $19($9, $5)
	$7 = *($9)
	if ( ($7 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($9) = $3
	*($9 + [8]) = ($3 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [368])
	CALL memcpy($3, $1, [8])
	*($9 + [4]) = ($3 + [8])
	CALL $21(CALL $20($9, $6), $5)
	CALL db_update_i64(*($1 + [36]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$5 = *($0 + [4])
	*($1) = *(*($5))
	*($1 + [8]) = *(*($5 + [4]) + [8])
	$2 = *($0)
	CALL $140(($1 + [16]), (*($5 + [4]) + [16]))
	*($1 + [32]) = *(*($5 + [4]) + [32])
	$3 = *(*($5 + [8]) + [4])
	*($1 + [40]) = *($3 + [40])
	*(($1 + [48])) = *(($3 + [48]))
	*($1 + [56]) = *(*($5 + [4]) + [56])
	*($1 + [64]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	CALL $140(($1 + [72]), *($5 + [12]))
	$5 = *($1 + [16])
	$3 = ( *(($1 + [20])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [56])
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$3 = *(($1 + [72]))
	$3 = ( *(($1 + [76])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $5)
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $76($7, $1)
	$4 = *($1)
	*($1 + [88]) = CALL db_store_i64(*($2 + [8]), (int_64)-6497942569467510784, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $135(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $153($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [72]) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($1 + [80])))
	
.LABEL $label$11
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $137(*(($1 + [24])))
	
.LABEL $label$12
	CALL $137($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $137($6)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ([-16] - $6)
	$4 = (CASTING uint_64)(uint_32 $6)
	$2 = ($1 + [8])
	
.LOOP $label$1:
	$5 = ($5 + [-1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$6 = *($1 + [32])
	$6 = ( *(($1 + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$5 = ($5 - $6)
	$4 = (CASTING uint_64)(uint_32 $6)
	$3 = ($1 + [32])
	
.LOOP $label$2:
	$5 = ($5 + [-1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	$6 = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL $13($0, ([0] - $5))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	*($7) = $5
	*($7 + [8]) = $6
	CALL eosio_assert(((int_32)($6 - $5) > (int_32)[7]), [368])
	CALL memcpy($5, $1, [8])
	*($7 + [4]) = ($5 + [8])
	CALL $20($7, $2)
	CALL eosio_assert(((int_32)(*($7 + [8]) - *($7 + [4])) > (int_32)[7]), [368])
	CALL memcpy(*($7 + [4]), ($1 + [24]), [8])
	*($7 + [4]) = (*($7 + [4]) + [8])
	CALL $20($7, $3)
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [48])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $135([96])) + [8]) = (int_64)0
	*($4 + [16 align=4]) = (int_64)0
	*($4 + [24]) = [0]
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)1397703940
	CALL eosio_assert([1], [80])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [144])
	*($4 + [80]) = [0]
	*($4 + [72 align=4]) = (int_64)0
	*($4 + [84]) = $0
	CALL $9(($8 + [32]), $4)
	*($4 + [88]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [88])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $99($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$15 }
	CALL $137(*(($5 + [80])))
	
.LABEL $label$15
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL $137(*(($5 + [24])))
	
.LABEL $label$16
	CALL $137($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $96 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [88]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1008])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6497942569467510784)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [944])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [944])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $95(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [496])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [560])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$7 }
	CALL $137(*(($4 + [80])))
	
.LABEL $label$7
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL $137(*(($4 + [24])))
	
.LABEL $label$8
	CALL $137($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($4 + [80])))
	
.LABEL $label$11
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $137(*(($4 + [24])))
	
.LABEL $label$12
	CALL $137($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [88]))
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [368])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [368])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [368])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [368])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [368])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [368])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [368])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [368])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $65(CALL $64($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [368])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [368])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $65($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC _ZN6random12processorderEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyyS8_ (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [256])
	*([0] + [4]) = $22
	CALL require_auth(*($0))
	$6 = ($0 + [168])
	$16 = [0]
	$21 = [0]
	$12 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$1 }
	$21 = CALL $49($6, $12)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$21 != (int_32)[0]), [1136])
	CALL eosio_assert(*($21 + [56]), [2464])
	*((($22 + [72]) + [24])) = [0]
	*(($22 + [120])) = (int_64)1397703940
	*($22 + [80]) = (int_64)0
	*($22 + [88]) = (int_64)0
	*($22 + [104]) = (int_64)0
	*($22 + [112]) = (int_64)0
	CALL eosio_assert([1], [80])
	$18 = (int_64)5459781
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$12 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$12 = [0]
	
.LABEL $label$2
	CALL eosio_assert($12, [144])
	*(($22 + [152])) = [0]
	*(($13 = ($22 + [80]))) = $1
	*($22 + [144]) = (int_64)0
	$7 = (($22 + [72]) + [16])
	CALL $140($7, $2)
	*(($22 + [104])) = $3
	*($22 + [68]) = [0]
	$8 = ($0 + [48])
	*($22 + [64]) = $8
	$16 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)-6497942495177998336, (int_64)0)
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$11 }
	$15 = CALL $8($8, $16)
	*($22 + [68]) = $15
	*($22 + [64]) = $8
	$9 = ($7 + [1])
	
.LOOP $label$12:
	if ( ((int_64)*($13) != (int_64)*($15 + [8])) ){ goto $label$13 }
	$16 = ($16 & [1])
	$16 = *($15 + [16])
	$12 = ($16 & [1])
	$16 = *($7)
	$10 = uint_32($16 >> [1])
	$14 = ( *((($22 + [72]) + [20])) ? $10 : $12 )
	if ( ((int_32)$14 != (int_32)( *(($15 + [20])) ? uint_32($16 >> [1]) : $16 )) ){ goto $label$13 }
	$16 = ( *(($15 + [24])) ? (($15 + [16]) + [1]) : $16 )
	if ( ($12 == 0) ){ goto $label$14 }
	if ( ($14 == 0) ){ goto $label$8 }
	if ( (CALL memcmp(( *((($22 + [72]) + [24])) ? $9 : $12 ), $16, $14) == 0) ){ goto $label$9 }
	$15 = *($22 + [68])
	goto $label$13 
	
.LABEL $label$14
	if ( ($14 == 0) ){ goto $label$8 }
	$14 = ([0] - $10)
	$12 = $9
	
.LOOP $label$15:
	if ( ((int_32)*($12) != (int_32)*($16)) ){ goto $label$13 }
	$16 = ($16 + [1])
	$12 = ($12 + [1])
	$14 = ($14 + [1])
	if ( $14 ){ goto $label$15 }
	goto $label$8 
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [16])
	$16 = CALL db_next_i64(*(*($22 + [68]) + [88]), ($22 + [160]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$10 }
	$15 = CALL $8(*($22 + [64]), $16)
	*($22 + [68]) = $15
	goto $label$12 
	
.LABEL $label$11
	$15 = [0]
	*($22 + [68]) = [0]
	*($22 + [64]) = $8
	goto $label$7 
	
.LABEL $label$10
	$15 = [0]
	*($22 + [68]) = [0]
	goto $label$7 
	
.LABEL $label$9
	$15 = *($22 + [68])
	
.LABEL $label$8
	*($22 + [128]) = *($15 + [56])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [1632])
	CALL eosio_assert(((uint_64)((int_64)*($15 + [64]) + (int_64)1000) <= (uint_64)((uint_64)CALL $fimport$15() / (uint_64)(int_64)1000)), [2416])
	CALL _ZN6random10cal_randomERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyS8_yy(($22 + [48]), $22, $5, $1, $2, $3, $4)
	$11 = *($0)
	$18 = (int_64)0
	$17 = (int_64)59
	$16 = [1216]
	$19 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$18 > (uint_64)(int_64)5) ){ goto $label$21 }
	$12 = *($16)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$12 = ($12 + [165])
	goto $label$19 
	
.LABEL $label$21
	$4 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$17
	$16 = ($16 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$19 = ((int_64)$4 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$16 }
	$18 = (int_64)0
	$17 = (int_64)59
	$16 = [2448]
	$20 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$18 > (uint_64)(int_64)6) ){ goto $label$27 }
	$12 = *($16)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$12 = ($12 + [165])
	goto $label$25 
	
.LABEL $label$27
	$4 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$23
	$16 = ($16 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$20 = ((int_64)$4 | (int_64)$20)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$22 }
	*($22 + [160]) = $1
	CALL $155(($22 + [168]), $2)
	*($22 + [184]) = $3
	CALL $155(($22 + [192]), ($22 + [48]))
	*(($12 = ($22 + [32]))) = [0]
	*($22 + [16]) = $20
	*($22 + [8]) = $11
	*($22 + [24]) = (int_64)0
	*(($16 = CALL $135([16]))) = $11
	*($16 + [8]) = $19
	$15 = ($16 + [16])
	*($12) = $15
	*(($22 + [28])) = $15
	*($22 + [24]) = $16
	CALL $94(($22 + [36]), ($22 + [160]))
	CALL $60(($22 + [232]), ($22 + [8]))
	$16 = *($22 + [232])
	CALL send_inline($16, (*($22 + [236]) - $16))
	$16 = *($22 + [232])
	if ( ($16 == 0) ){ goto $label$28 }
	*($22 + [236]) = $16
	CALL $137($16)
	
.LABEL $label$28
	$16 = *($22 + [36])
	if ( ($16 == 0) ){ goto $label$29 }
	*(($22 + [40])) = $16
	CALL $137($16)
	
.LABEL $label$29
	$16 = *($22 + [24])
	if ( ($16 == 0) ){ goto $label$30 }
	*(($22 + [28])) = $16
	CALL $137($16)
	
.LABEL $label$30
	if ( ((*($22 + [192]) & [1]) == 0) ){ goto $label$31 }
	CALL $137(*(($22 + [200])))
	
.LABEL $label$31
	if ( ((*($22 + [168]) & [1]) == 0) ){ goto $label$32 }
	CALL $137(*(($22 + [176])))
	
.LABEL $label$32
	$18 = *($22 + [64])
	$16 = (CASTING uint_32)(uint_64 (uint_64)$18 >> (uint_64)(int_64)32)
	$12 = ((int_32)$16) != (int_32)[0]
	CALL eosio_assert($12), [384])
	CALL eosio_assert($12, [16])
	$12 = CALL db_next_i64(*($16 + [88]), ($22 + [160]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$33 }
	CALL $8((CASTING uint_32)(uint_64 $18), $12)
	
.LABEL $label$33
	CALL $72($8, $16)
	$14 = ($0 + [88])
	$15 = *($21 + [64])
	$16 = CALL db_lowerbound_i64(*($0 + [88]), *(($0 + [96])), (int_64)-6497942569467510784, (int_64)0)
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$34 }
	$16 = CALL $95($14, $16)
	if ( ($15 <= [20]) ){ goto $label$34 }
	
.LOOP $label$35:
	$12 = [0]
	$13 = ((int_32)$16 != (int_32)[0])
	CALL eosio_assert($13, [384])
	CALL eosio_assert($13, [16])
	$13 = CALL db_next_i64(*($16 + [88]), ($22 + [160]))
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$36 }
	$12 = CALL $95($14, $13)
	
.LABEL $label$36
	CALL $97($14, $16)
	$15 = ($15 + [-1])
	if ( ($15 <= [20]) ){ goto $label$34 }
	$16 = $12
	if ( $12 ){ goto $label$35 }
	
.LABEL $label$34
	*($22) = (int_64)1
	$16 = [0]
	$12 = ($0 + [88])
	$13 = CALL db_lowerbound_i64(*($12), *(($0 + [96])), (int_64)-6497942569467510784, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$37 }
	CALL $95($14, $13)
	*($22 + [160]) = (CASTING uint_64)(uint_32 $14)
	*($22) = ((int_64)*(*(CALL $96(($22 + [160])) + [4])) + (int_64)1)
	
.LABEL $label$37
	$18 = *($0)
	*($22 + [164]) = ($22 + [72])
	*($22 + [160]) = $22
	*($22 + [168]) = ($22 + [64])
	*($22 + [172]) = ($22 + [48])
	*($22 + [232]) = $18
	CALL eosio_assert(((int_64)*($12) == (int_64)CALL $fimport$14()), [304])
	*($22 + [8]) = $14
	*($22 + [12]) = ($22 + [160])
	*($22 + [16]) = ($22 + [232])
	*(($12 = CALL $135([96])) + [8]) = (int_64)0
	*($12 + [16 align=4]) = (int_64)0
	*($12 + [24]) = [0]
	*($12 + [32]) = (int_64)0
	*($12 + [40]) = (int_64)0
	*($12 + [48]) = (int_64)1397703940
	CALL eosio_assert([1], [80])
	$18 = (int_64)5459781
	
.LOOP $label$40:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$39 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$41 }
	
.LOOP $label$42:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$42 }
	
.LABEL $label$41
	$13 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$13 = [0]
	
.LABEL $label$38
	CALL eosio_assert($13, [144])
	*($12 + [80]) = [0]
	*($12 + [72 align=4]) = (int_64)0
	*($12 + [84]) = $14
	CALL $98(($22 + [8]), $12)
	*($22 + [248]) = $12
	$18 = *($12)
	*($22 + [8]) = $18
	$14 = *($12 + [88])
	*($22 + [244]) = $14
	$13 = ($0 + [116])
	$16 = *($13)
	if ( ((uint_32)$16 >= (uint_32)*(($0 + [120]))) ){ goto $label$44 }
	*($16 + [8]) = $18
	*($16 + [16]) = $14
	*($22 + [248]) = [0]
	*($16) = $12
	*($13) = ($16 + [24])
	goto $label$43 
	
.LABEL $label$44
	CALL $99(($0 + [112]), ($22 + [248]), ($22 + [8]), ($22 + [244]))
	
.LABEL $label$43
	$16 = *($22 + [248])
	*($22 + [248]) = [0]
	if ( ($16 == 0) ){ goto $label$45 }
	if ( ((*($16 + [72]) & [1]) == 0) ){ goto $label$46 }
	CALL $137(*(($16 + [80])))
	
.LABEL $label$46
	if ( ((*($16 + [16]) & [1]) == 0) ){ goto $label$47 }
	CALL $137(*(($16 + [24])))
	
.LABEL $label$47
	CALL $137($16)
	
.LABEL $label$45
	$4 = *($0)
	CALL eosio_assert(((int_32)*($21 + [68]) == (int_32)$6), [1312])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$14()), [1360])
	*(($21 + [64])) = ($15 + [1])
	*($21 + [60]) = (*($21 + [60]) + [1])
	$18 = *($21)
	CALL eosio_assert([1], [1536])
	*($22 + [16]) = (($22 + [160]) + [67])
	*($22 + [12]) = ($22 + [160])
	*($22 + [8]) = ($22 + [160])
	CALL $56(($22 + [8]), $21)
	CALL db_update_i64(*($21 + [72]), $4, ($22 + [160]), [67])
	$16 = ($0 + [184])
	if ( (uint_64)($18 <= *($16)) ){ goto $label$48 }
	*($16) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$48
	if ( ((*($22 + [48]) & [1]) == 0) ){ goto $label$49 }
	CALL $137(*($22 + [56]))
	
.LABEL $label$49
	if ( ((*($22 + [144]) & [1]) == 0) ){ goto $label$50 }
	CALL $137(*(($22 + [152])))
	
.LABEL $label$50
	if ( ((*(($22 + [88])) & [1]) == 0) ){ goto $label$51 }
	CALL $137(*(($22 + [96])))
	
.LABEL $label$51
	*([0] + [4]) = ($22 + [256])
}

void .FUNC $138 (int_32 $0)
{
	CALL $137($0)
}

void .FUNC $139 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $130 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11814]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11816])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11814]) = [1]
	$7 = ($7 << [16])
	*([0] + [11816]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11816])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11816]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11814]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11814]) = [1]
	$3 = ($3 << [16])
	*([0] + [11816]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11816])
	
.LABEL $label$8
	*([0] + [11816]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11712])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [11520]
	$1 = (((int_32)$2 * (int_32)[12]) + [11520])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	
.LOOP $label$1:
	$4 = ($1 + [-2])
	$3 = ($1 + [-1])
	
.LOOP $label$2:
	$5 = $0
	
.LOOP $label$4:
	$0 = ($1 - $5)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$12 }
	if ( ((int_32)$0 <= (int_32)[30]) ){ goto $label$11 }
	$12 = ($5 + uint_32($0 >> [1]))
	if ( ((int_32)$0 < (int_32)[1000]) ){ goto $label$13 }
	$0 = uint_32($0 >> [2])
	$10 = CALL $133($5, ($5 + $0), $12, ($12 + $0), $3, $2)
	goto $label$7 
	
.LABEL $label$13
	$0 = *($3)
	$6 = *($5)
	$11 = *($12)
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$16 }
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$15 }
	*($5) = $0
	*($3) = $6
	$10 = [1]
	goto $label$7 
	
.LABEL $label$16
	$10 = [0]
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$7 }
	*($12) = $0
	*($3) = $11
	$10 = [1]
	$11 = *($5)
	$0 = *($12)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$7 }
	*($5) = $0
	*($12) = $11
	goto $label$14 
	
.LABEL $label$15
	*($5) = $11
	*($12) = $6
	$10 = [1]
	$0 = *($3)
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$7 }
	*($12) = $0
	*($3) = $6
	
.LABEL $label$14
	$10 = [2]
	goto $label$7 
	
.LABEL $label$12
	goto $label$6 
	
.LABEL $label$17
	$11 = *($5)
	$0 = *($3)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*($5) = $0
	*($3) = $11
	return 
	
.LABEL $label$11
	$0 = *($5 + [2])
	$6 = *($5)
	$11 = *($5 + [1])
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$22 }
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$21 }
	*($5) = $0
	*(($5 + [2])) = $6
	goto $label$20 
	
.LABEL $label$22
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$19 }
	*(($5 + [2])) = $11
	*(($7 = ($5 + [1]))) = $0
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$18 }
	*($5) = $0
	*($7) = $6
	goto $label$18 
	
.LABEL $label$21
	*($5) = $11
	*(($11 = ($5 + [1]))) = $6
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$19 }
	*(($5 + [2])) = $6
	*($11) = $0
	
.LABEL $label$20
	$11 = $6
	goto $label$18 
	
.LABEL $label$19
	$11 = $0
	
.LABEL $label$18
	$8 = ($5 + [3])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$6 }
	$12 = [0]
	
.LOOP $label$23:
	$7 = *($8)
	if ( ((int_32)$7 >= (int_32)int_32(($11 << [24]) >> [24])) ){ goto $label$24 }
	$0 = $12
	
.LOOP $label$28:
	*((($6 = ($5 + $0)) + [3])) = $11
	if ( ((int_32)$0 == (int_32)[-2]) ){ goto $label$27 }
	$0 = ($0 + [-1])
	$11 = *(($6 + [1]))
	if ( ((int_32)$7 < (int_32)$11) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$0 = $5
	goto $label$25 
	
.LABEL $label$26
	$0 = (($5 + $0) + [3])
	
.LABEL $label$25
	*($0) = $7
	
.LABEL $label$24
	$0 = ($8 + [1])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	$12 = ($12 + [1])
	$11 = *($8)
	$8 = $0
	goto $label$23 
	
.LABEL $label$10
	$11 = *($5 + [2])
	$6 = *($5)
	$0 = *($5 + [1])
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$33 }
	if ( ((int_32)$11 >= (int_32)$0) ){ goto $label$32 }
	*($5) = $11
	*(($5 + [2])) = $6
	goto $label$31 
	
.LABEL $label$33
	if ( ((int_32)$11 >= (int_32)$0) ){ goto $label$30 }
	*(($5 + [2])) = $0
	*(($7 = ($5 + [1]))) = $11
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$29 }
	*($5) = $11
	*($7) = $6
	goto $label$29 
	
.LABEL $label$32
	*($5) = $0
	*(($0 = ($5 + [1]))) = $6
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$30 }
	*(($5 + [2])) = $6
	*($0) = $11
	
.LABEL $label$31
	$0 = $6
	goto $label$29 
	
.LABEL $label$30
	$0 = $11
	
.LABEL $label$29
	$11 = *($3)
	if ( ((int_32)$11 >= (int_32)$0) ){ goto $label$6 }
	*(($6 = ($5 + [2]))) = $11
	*($3) = $0
	$11 = ($5 + [1])
	$7 = *($11)
	$0 = *($6)
	if ( ((int_32)$0 >= (int_32)$7) ){ goto $label$6 }
	*($6) = $7
	*($11) = $0
	$11 = *($5)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*($5) = $0
	*(($5 + [1])) = $11
	return 
	
.LABEL $label$9
	CALL $133($5, ($5 + [1]), ($5 + [2]), ($5 + [3]), $3, $2)
	return 
	
.LABEL $label$8
	$0 = *($3)
	$6 = *($5)
	$11 = *($5 + [1])
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$35 }
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$34 }
	*($5) = $0
	*($3) = $6
	return 
	
.LABEL $label$35
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*(($6 = ($5 + [1]))) = $0
	*($3) = $11
	$11 = *($5)
	$0 = *($6)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*($5) = $0
	*($6) = $11
	return 
	
.LABEL $label$34
	*($5) = $11
	*(($0 = ($5 + [1]))) = $6
	$11 = *($3)
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$6 }
	*($0) = $11
	*($3) = $6
	return 
	
.LABEL $label$7
	$6 = *($12)
	$8 = *($5)
	if ( ((int_32)$8 < (int_32)$6) ){ goto $label$37 }
	$0 = $4
	
.LOOP $label$40:
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$39 }
	$11 = *($0)
	$7 = ($0 + [-1])
	$0 = $7
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$12 = ($5 + [1])
	$6 = *($3)
	if ( ((int_32)$8 < (int_32)$6) ){ goto $label$41 }
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$6 }
	$12 = ($5 + [2])
	
.LOOP $label$43:
	$0 = ($12 + [-1])
	$11 = *($0)
	if ( ((int_32)$8 < (int_32)$11) ){ goto $label$42 }
	$12 = ($12 + [1])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$43 }
	goto $label$6 
	
.LABEL $label$42
	*($0) = $6
	*($3) = $11
	
.LABEL $label$41
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$6 }
	$11 = $3
	
.LOOP $label$44:
	$0 = ($12 + [-1])
	$6 = *($5)
	
.LOOP $label$45:
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$45 }
	$12 = ($0 + [1])
	
.LOOP $label$46:
	$11 = ($11 + [-1])
	$8 = *($11)
	if ( ((int_32)$6 < (int_32)$8) ){ goto $label$46 }
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$5 }
	*($0) = $8
	*($11) = $7
	goto $label$44 
	
.LABEL $label$38
	*($5) = $11
	*(($11 = ($7 + [1]))) = $8
	$10 = ($10 + [1])
	goto $label$36 
	
.LABEL $label$37
	$11 = $3
	
.LABEL $label$36
	$9 = ($5 + [1])
	if ( ((uint_32)$9 >= (uint_32)$11) ){ goto $label$47 }
	
.LOOP $label$48:
	$0 = ($9 + [-1])
	$6 = *($12)
	
.LOOP $label$49:
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$49 }
	$9 = ($0 + [1])
	
.LOOP $label$50:
	$11 = ($11 + [-1])
	$8 = *($11)
	if ( ((int_32)$8 >= (int_32)$6) ){ goto $label$50 }
	if ( ((uint_32)$0 > (uint_32)$11) ){ goto $label$51 }
	*($0) = $8
	*($11) = $7
	$12 = ( $11 ? $12 : ((int_32)$12 == (int_32)$0) )
	$10 = ($10 + [1])
	goto $label$48 
	
.LABEL $label$51
	$9 = $0
	
.LABEL $label$47
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$52 }
	$11 = *($9)
	$0 = *($12)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$52 }
	*($9) = $0
	*($12) = $11
	$10 = ($10 + [1])
	
.LABEL $label$52
	if ( $10 ){ goto $label$54 }
	$11 = CALL $134($5, $9, $2)
	$0 = ($9 + [1])
	if ( CALL $134($0, $1, $2) ){ goto $label$53 }
	if ( $11 ){ goto $label$2 }
	
.LABEL $label$54
	if ( ((int_32)($9 - $5) >= (int_32)($1 - $9)) ){ goto $label$3 }
	CALL $132($5, $9, $2)
	$0 = ($9 + [1])
	goto $label$2 
	
.LABEL $label$53
	$1 = $9
	$0 = $5
	if ( ($11 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	return 
	
.LABEL $label$5
	$5 = $0
	goto $label$4 
	
.LABEL $label$3
	CALL $132(($9 + [1]), $1, $2)
	$1 = $9
	$0 = $5
	goto $label$1 
	$0
}

int_32 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = *($2)
	$6 = *($0)
	$8 = *($1)
	if ( ((int_32)$8 >= (int_32)$6) ){ goto $label$5 }
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$4 }
	*($0) = $7
	*($2) = $6
	$9 = [1]
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$2 }
	*($1) = $7
	*($2) = $8
	$9 = [1]
	$6 = *($0)
	$7 = *($1)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$1 }
	*($0) = $7
	*($1) = $6
	$8 = *($2)
	$9 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($0) = $8
	*($1) = $6
	$9 = [1]
	$8 = *($2)
	if ( ((int_32)$8 >= (int_32)$6) ){ goto $label$1 }
	*($1) = $8
	*($2) = $6
	$9 = [2]
	
.LABEL $label$3
	$8 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = $7
	
.LABEL $label$1
	$7 = *($3)
	if ( ((int_32)$7 >= (int_32)int_32(($8 << [24]) >> [24])) ){ goto $label$6 }
	*($2) = $7
	*($3) = $8
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$8 }
	*($1) = $8
	*($2) = $7
	$7 = *($0)
	$8 = *($1)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$7 }
	*($0) = $8
	*($1) = $7
	$9 = ($9 + [3])
	goto $label$6 
	
.LABEL $label$8
	$9 = ($9 + [1])
	goto $label$6 
	
.LABEL $label$7
	$9 = ($9 + [2])
	
.LABEL $label$6
	$7 = *($3)
	$8 = *($4)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$12 }
	*($3) = $8
	*($4) = $7
	$7 = *($2)
	$8 = *($3)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$11 }
	*($2) = $8
	*($3) = $7
	$3 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 >= (int_32)$3) ){ goto $label$10 }
	*($1) = $8
	*($2) = $3
	$8 = *($0)
	$2 = *($1)
	if ( ((int_32)$2 >= (int_32)$8) ){ goto $label$9 }
	*($0) = $2
	*($1) = $8
	$9 = ($9 + [4])
	
.LABEL $label$12
	return $9
	
.LABEL $label$11
	return ($9 + [1])
	
.LABEL $label$10
	return ($9 + [2])
	
.LABEL $label$9
	return ($9 + [3])
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($1 - $0)
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$19 }
	$8 = [1]
	goto $label$1 
	
.LABEL $label$20
	$3 = *($0)
	$4 = ($1 + [-1])
	$2 = *($4)
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$1 }
	*($0) = $2
	*($4) = $3
	goto $label$1 
	
.LABEL $label$19
	$8 = *($0 + [2])
	$2 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$15 }
	if ( ((int_32)$8 >= (int_32)$4) ){ goto $label$12 }
	*($0) = $8
	*(($0 + [2])) = $2
	goto $label$11 
	
.LABEL $label$18
	$3 = ($1 + [-1])
	$4 = *($3)
	$6 = *($0)
	$2 = *($0 + [1])
	if ( ((int_32)$2 >= (int_32)$6) ){ goto $label$14 }
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$4 }
	*($0) = $4
	*($3) = $6
	goto $label$1 
	
.LABEL $label$17
	$8 = [1]
	CALL $133($0, ($0 + [1]), ($0 + [2]), ($0 + [3]), ($1 + [-1]), $2)
	goto $label$1 
	
.LABEL $label$16
	$6 = ($1 + [-1])
	$2 = *($0 + [2])
	$3 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$3) ){ goto $label$13 }
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$8 }
	*($0) = $2
	*(($0 + [2])) = $3
	goto $label$7 
	
.LABEL $label$15
	if ( ((int_32)$8 >= (int_32)$4) ){ goto $label$10 }
	*(($0 + [2])) = $4
	*(($3 = ($0 + [1]))) = $8
	if ( ((int_32)$8 >= (int_32)$2) ){ goto $label$9 }
	*($0) = $8
	*($3) = $2
	goto $label$9 
	
.LABEL $label$14
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	$8 = [1]
	*(($6 = ($0 + [1]))) = $4
	*($3) = $2
	$2 = *($0)
	$4 = *($6)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	*($0) = $4
	$8 = [1]
	*(($0 + [1])) = $2
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$6 }
	*(($0 + [2])) = $4
	*(($5 = ($0 + [1]))) = $2
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$5 }
	*($0) = $2
	*($5) = $3
	goto $label$5 
	
.LABEL $label$12
	*($0) = $4
	*(($4 = ($0 + [1]))) = $2
	if ( ((int_32)$8 >= (int_32)$2) ){ goto $label$10 }
	*(($0 + [2])) = $2
	*($4) = $8
	
.LABEL $label$11
	$4 = $2
	goto $label$9 
	
.LABEL $label$10
	$4 = $8
	
.LABEL $label$9
	$6 = ($0 + [3])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	$5 = [0]
	$7 = [0]
	
.LOOP $label$22:
	$3 = *($6)
	if ( ((int_32)$3 >= (int_32)int_32(($4 << [24]) >> [24])) ){ goto $label$23 }
	$8 = $5
	
.LOOP $label$27:
	*((($2 = ($0 + $8)) + [3])) = $4
	if ( ((int_32)$8 == (int_32)[-2]) ){ goto $label$26 }
	$8 = ($8 + [-1])
	$4 = *(($2 + [1]))
	if ( ((int_32)$3 < (int_32)$4) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$8 = $0
	goto $label$24 
	
.LABEL $label$25
	$8 = (($0 + $8) + [3])
	
.LABEL $label$24
	*($8) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$7 == (int_32)[8]) ){ goto $label$21 }
	
.LABEL $label$23
	$4 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [1])
	$4 = *($6)
	$6 = $8
	goto $label$22 
	
.LABEL $label$21
	$8 = (((int_32)($6 + [1]) == (int_32)$1) | [0])
	goto $label$1 
	
.LABEL $label$8
	*($0) = $4
	*(($4 = ($0 + [1]))) = $3
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$6 }
	*(($0 + [2])) = $3
	*($4) = $2
	
.LABEL $label$7
	$4 = $3
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	$2 = *($6)
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$1 }
	*(($3 = ($0 + [2]))) = $2
	*($6) = $4
	$8 = [1]
	$2 = *(($0 + [1]))
	$4 = *($3)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	*($3) = $2
	$8 = [1]
	*(($0 + [1])) = $4
	$2 = *($0)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	*($0) = $4
	$8 = [1]
	*(($0 + [1])) = $2
	goto $label$1 
	
.LABEL $label$4
	*($0) = $2
	$8 = [1]
	*(($0 + [1])) = $6
	$4 = *($3)
	if ( ((int_32)$4 >= (int_32)$6) ){ goto $label$1 }
	$8 = [1]
	*(($0 + [1])) = $4
	*($3) = $6
	goto $label$1 
	
.LABEL $label$3
	$4 = [1]
	
.LABEL $label$2
	$8 = ($2 | $4)
	
.LABEL $label$1
	$4
	return ($8 & [1])
}

int_32 .FUNC $135 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11820])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $136 (int_32 $0)
{
	return CALL $135($0)
}

void .FUNC $137 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $130($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11728])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $129([3328], $0)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [48])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $135([96])) + [8]) = (int_64)0
	*($4 + [16 align=4]) = (int_64)0
	*($4 + [24]) = [0]
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)1397703940
	CALL eosio_assert([1], [80])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [144])
	*($4 + [80]) = [0]
	*($4 + [72 align=4]) = (int_64)0
	*($4 + [84]) = $0
	CALL $9(($8 + [32]), $4)
	*($4 + [88]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [88])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $10($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$15 }
	CALL $137(*(($5 + [80])))
	
.LABEL $label$15
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL $137(*(($5 + [24])))
	
.LABEL $label$16
	CALL $137($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $11($0, ($1 + [72]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $11($0, ($1 + [16]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $155(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $155(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $137(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $137(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $11(*($1), ($0 + [32]))
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	$2 = *($1)
	CALL $155(($5 + [16]), ($1 + [8]))
	$3 = *($1 + [24])
	CALL $155($5, ($1 + [32]))
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $155(($5 + [48]), ($5 + [16]))
	CALL $155(($5 + [32]), $5)
	CALL void $0((int_32 $2), (int_64 ($5 + [48])), (int_32 $3), (int_64 ($5 + [32])), (int_32 $1))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $137(*($5 + [40]))
	
.LABEL $label$2
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $137(*($5 + [56]))
	
.LABEL $label$3
	if ( ((*($5) & [1]) == 0) ){ goto $label$4 }
	CALL $137(*($5 + [8]))
	
.LABEL $label$4
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $137(*($5 + [24]))
	
.LABEL $label$5
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $120 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [20])
	if ( ($3 == 0) ){ goto $label$6 }
	$5 = ($2 + [24])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$8 }
	$4 = ([0] - $3)
	$7 = ($7 + [-24])
	
.LOOP $label$9:
	if ( ((*(($7 + [12])) & [1]) == 0) ){ goto $label$10 }
	CALL $137(*(($7 + [20])))
	
.LABEL $label$10
	if ( ((*($7) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($7 + [8])))
	
.LABEL $label$11
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$9 }
	$7 = *(($2 + [20]))
	goto $label$7 
	
.LABEL $label$8
	$7 = $3
	
.LABEL $label$7
	*($5) = $3
	CALL $137($7)
	
.LABEL $label$6
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL $137(*(($2 + [16])))
	
.LABEL $label$12
	CALL $137($2)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$4 }
	$7 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$7 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $137($7)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $155($5, ($1 + [16]))
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $155(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($5 + [16])), (int_32 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $137(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $137(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$2 = *($1)
	CALL $155(($6 + [16]), ($1 + [8]))
	$4 = *($1 + [32])
	$3 = *($1 + [24])
	CALL $155($6, ($1 + [40]))
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 $2), (int_64 ($6 + [16])), (int_32 $3), (int_64 $4), (int_64 $6), (int_32 $1))
	if ( ((*($6) & [1]) == 0) ){ goto $label$2 }
	CALL $137(*($6 + [8]))
	
.LABEL $label$2
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $137(*($6 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	CALL $11(*($1), ($0 + [8]))
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [24]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [32]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $11(*($1), ($0 + [40]))
}

void .FUNC _ZN6random14gen_one_windowEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	*($8 + [16]) = $1
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$5), [208])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-2042775575138926592, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $15($5, $7)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$5), [208])
	
.LABEL $label$3
	CALL eosio_assert(($6 == 0), [272])
	$1 = *($0)
	*($8 + [12]) = $2
	*($8 + [8]) = ($8 + [16])
	*($8 + [56]) = $1
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$14()), [304])
	*($8 + [32]) = $5
	*($8 + [36]) = ($8 + [8])
	*($8 + [40]) = ($8 + [56])
	*(($6 = CALL $135([48])) + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [32]) = $5
	CALL $16(($8 + [32]), $6)
	*($8 + [48]) = $6
	$1 = *($6)
	*($8 + [32]) = $1
	$7 = *($6 + [36])
	*($8 + [28]) = $7
	$4 = ($0 + [36])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [40]))) ){ goto $label$6 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($8 + [48]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	goto $label$5 
	
.LABEL $label$6
	CALL $17(($0 + [32]), ($8 + [48]), ($8 + [32]), ($8 + [28]))
	
.LABEL $label$5
	$7 = *($8 + [48])
	*($8 + [48]) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	$4 = *($7 + [20])
	if ( ($4 == 0) ){ goto $label$8 }
	$0 = ($7 + [24])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$10 }
	$5 = ([0] - $4)
	$6 = ($6 + [-24])
	
.LOOP $label$11:
	if ( ((*(($6 + [12])) & [1]) == 0) ){ goto $label$12 }
	CALL $137(*(($6 + [20])))
	
.LABEL $label$12
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL $137(*(($6 + [8])))
	
.LABEL $label$13
	$6 = ($6 + [-32])
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$11 }
	$6 = *(($7 + [20]))
	goto $label$9 
	
.LABEL $label$10
	$6 = $4
	
.LABEL $label$9
	*($0) = $4
	CALL $137($6)
	
.LABEL $label$8
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$14 }
	CALL $137(*(($7 + [16])))
	
.LABEL $label$14
	CALL $137($7)
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [64])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [48])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $4)
	*($8 + [36]) = $6
	*($8 + [32]) = $6
	$7 = ($6 + $4)
	*($8 + [40]) = $7
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($6)
	$7 = *(($8 + [40]))
	$6 = *($8 + [36])
	
.LABEL $label$7
	*(($4 = CALL $135([48])) + [8 align=4]) = (int_64)0
	*($4 + [16 align=4]) = (int_64)0
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [32]) = $0
	CALL eosio_assert(((uint_32)($7 - $6) > (uint_32)[7]), [176])
	CALL memcpy($4, $6, [8])
	*($8 + [36]) = ($6 + [8])
	CALL $22(CALL $11(($8 + [32]), ($4 + [8])), ($4 + [20]))
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$7 = *($4 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($6 + [8]) = $5
	*($6 + [16]) = $7
	*($8 + [24]) = [0]
	*($6) = $4
	*($1) = ($6 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $17(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$1 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [20])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($1 + [24])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	$7 = ([0] - $3)
	$6 = ($6 + [-24])
	
.LOOP $label$13:
	if ( ((*(($6 + [12])) & [1]) == 0) ){ goto $label$14 }
	CALL $137(*(($6 + [20])))
	
.LABEL $label$14
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	CALL $137(*(($6 + [8])))
	
.LABEL $label$15
	$6 = ($6 + [-32])
	if ( ((int_32)($6 + $7) != (int_32)[-24]) ){ goto $label$13 }
	$6 = *(($1 + [20]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $137($6)
	
.LABEL $label$10
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$16 }
	CALL $137(*(($1 + [16])))
	
.LABEL $label$16
	CALL $137($1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$2 = *($0)
	$3 = ($1 + [8])
	CALL $140($3, *($6 + [4]))
	*(($8 = $9)) = [8]
	$6 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [8])
	$7 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	*($8) = $6
	$4 = ($1 + [20])
	CALL $19($8, $4)
	$5 = *($8)
	if ( ($5 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($5)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	*($8) = $6
	*($8 + [8]) = ($6 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [368])
	CALL memcpy($6, $1, [8])
	*($8 + [4]) = ($6 + [8])
	CALL $21(CALL $20($8, $3), $4)
	$7 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-2042775575138926592, *(*($0 + [8])), $7, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $135(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $153($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $18(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $135(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $153($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [72]) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($1 + [80])))
	
.LABEL $label$11
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $137(*(($1 + [24])))
	
.LABEL $label$12
	CALL $137($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $137($6)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $12($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $142($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $135($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $142($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $137($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $139($7)
	return (unreachable)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [192])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $13($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [176])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $135($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $153($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $137($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$1 }
	$5 = ($0 + [8])
	
.LOOP $label$2:
	$7 = ($7 + [-24])
	*($5) = $7
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [20])
	if ( ($3 == 0) ){ goto $label$4 }
	$6 = ($2 + [24])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$4 = ([0] - $3)
	$7 = ($7 + [-24])
	
.LOOP $label$7:
	if ( ((*(($7 + [12])) & [1]) == 0) ){ goto $label$8 }
	CALL $137(*(($7 + [20])))
	
.LABEL $label$8
	if ( ((*($7) & [1]) == 0) ){ goto $label$9 }
	CALL $137(*(($7 + [8])))
	
.LABEL $label$9
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$7 }
	$7 = *(($2 + [20]))
	goto $label$5 
	
.LABEL $label$6
	$7 = $3
	
.LABEL $label$5
	*($6) = $3
	CALL $137($7)
	
.LABEL $label$4
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $137(*(($2 + [16])))
	
.LABEL $label$10
	CALL $137($2)
	
.LABEL $label$3
	$7 = *($5)
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$11 }
	CALL $137($7)
	
.LABEL $label$11
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$6 = *($1)
	$2 = *($1 + [4])
	$7 = (CASTING uint_64)(uint_32 int_32(($2 - $6) >> [5]))
	$1 = *($0)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	*($0) = $1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	$1 = ($1 + [8])
	*($0) = $1
	$3 = *($6 + [8])
	$4 = ($6 + [12])
	$7 = (CASTING uint_64)(uint_32 ( *($4) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	*($0) = $1
	$4 = *(($6 + [8]))
	$4 = ( *($4) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$5 }
	$1 = ($4 + $1)
	*($0) = $1
	
.LABEL $label$5
	$3 = ($6 + [20])
	$5 = *($3)
	$4 = ($6 + [24])
	$7 = (CASTING uint_64)(uint_32 ( *($4) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$6:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	*($0) = $1
	$4 = *($3)
	$4 = ( *($4) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($4 + $1)
	*($0) = $1
	
.LABEL $label$7
	$6 = ($6 + [32])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC strtol (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return (CASTING uint_32)(uint_64 $3)
}

int_64 .FUNC strtoll (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)-9223372036854775808)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return $3
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	*(($2 = $3) + [60]) = $0
	*($2 + [48]) = *($1)
	*($2 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = [0]
	*(($2 + [36])) = [0]
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = [0]
	*(($2 + [40])) = [0]
	*($2 + [72]) = ($1 + $0)
	*($2 + [64]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [176])
	CALL memcpy($2, $1, [8])
	*($2 + [68]) = ($1 + [8])
	CALL $11(($2 + [64]), ($2 + [8]))
	CALL eosio_assert(((uint_32)(*($2 + [72]) - *($2 + [68])) > (uint_32)[7]), [176])
	CALL memcpy(($2 + [24]), *($2 + [68]), [8])
	*($2 + [68]) = (*($2 + [68]) + [8])
	CALL $11(($2 + [64]), ($2 + [32]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [68]) = ($2 + [48])
	*($2 + [64]) = ($2 + [60])
	CALL $121(($2 + [64]), $2)
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $137(*(($2 + [40])))
	
.LABEL $label$5
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $137(*(($2 + [16])))
	
.LABEL $label$6
	*([0] + [4]) = ($2 + [80])
	return [1]
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [80])
	$3 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [144])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $122(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $123(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $137(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [176])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [176])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [176])
	CALL memcpy(($3 + [8]), $2, [8])
	*($3 + [52]) = ($1 + [16])
	CALL $11(($3 + [48]), ($3 + [16]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $126(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $137(*(($3 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [112])
	*([0] + [4]) = $3
	*(($2 = $3) + [76]) = $0
	*($2 + [64]) = *($1)
	*($2 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = [0]
	*(($2 + [52])) = [0]
	*(($2 + [56])) = [0]
	*($2 + [84]) = $1
	*($2 + [80]) = $1
	*($2 + [88]) = ($1 + $0)
	*($2 + [96]) = ($2 + [80])
	*($2 + [104]) = ($2 + [8])
	CALL $124(($2 + [104]), ($2 + [96]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [84]) = ($2 + [64])
	*($2 + [80]) = ($2 + [76])
	CALL $125(($2 + [80]), ($2 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $137(*(($2 + [56])))
	
.LABEL $label$5
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL $137(*(($2 + [24])))
	
.LABEL $label$6
	*([0] + [4]) = ($2 + [112])
	return [1]
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [176])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $11(($2 + [48]), (($2 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $127(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $137(*(($2 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [32])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($7 + [8]) = (int_64)0
	*($7 + [16]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [176])
	CALL memcpy(($7 + [8]), $4, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [176])
	CALL memcpy(($7 + [31]), ($4 + [8]), [1])
	$5 = ((int_32)*($7 + [31]) != (int_32)[0])
	*($7 + [16]) = $5
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	$5 = *((($7 + [8]) + [8]))
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *($7 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ((int_32)($5 & [255]) != (int_32)[0])), (int_32 $6))
	*([0] + [4]) = ($7 + [32])
	return [1]
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [176])
	CALL memcpy(($5 + [8]), $3, [4])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

int_32 .FUNC $119 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [196])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL $137($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($0 + [192]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $137($2)
	
.LABEL $label$1
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [156])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	if ( ((*($2 + [84]) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($2 + [92])))
	
.LABEL $label$11
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$12 }
	CALL $137(*(($2 + [80])))
	
.LABEL $label$12
	CALL $137($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$2 = *(($0 + [152]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $137($2)
	
.LABEL $label$6
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$13 }
	$3 = ($0 + [116])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$15 }
	
.LOOP $label$16:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$18 }
	CALL $137(*(($2 + [80])))
	
.LABEL $label$18
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$19 }
	CALL $137(*(($2 + [24])))
	
.LABEL $label$19
	CALL $137($2)
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$16 }
	$2 = *(($0 + [112]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $1
	
.LABEL $label$14
	*($3) = $1
	CALL $137($2)
	
.LABEL $label$13
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$20 }
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$22 }
	
.LOOP $label$23:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$24 }
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$25 }
	CALL $137(*(($2 + [80])))
	
.LABEL $label$25
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$26 }
	CALL $137(*(($2 + [24])))
	
.LABEL $label$26
	CALL $137($2)
	
.LABEL $label$24
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$23 }
	$2 = *(($0 + [72]))
	goto $label$21 
	
.LABEL $label$22
	$2 = $1
	
.LABEL $label$21
	*($3) = $1
	CALL $137($2)
	
.LABEL $label$20
	CALL $120(($0 + [32]))
	return $0
}

void .FUNC _ZN6random6cal_hmEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_ (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [336])
	*([0] + [4]) = $9
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	CALL memset(($9 + [80]), [0], [255])
	$5 = *($3 + [8])
	$6 = *($3)
	$7 = *($4 + [8])
	$8 = *($4)
	*($9 + [16]) = $2
	*($9 + [28]) = ( $7 ? ($4 + [1]) : ($8 & [1]) )
	*($9 + [24]) = ( $5 ? ($3 + [1]) : ($6 & [1]) )
	CALL snprintf(($9 + [80]), [255], [624], ($9 + [16]))
	*(($9 + [72])) = (int_64)0
	*(($9 + [64])) = (int_64)0
	*($9 + [56]) = (int_64)0
	*($9 + [48]) = (int_64)0
	CALL sha256(($9 + [80]), CALL $187(($9 + [80])), ($9 + [48]))
	$3 = ($9 + [46])
	$4 = [0]
	
.LOOP $label$1:
	*($3) = [0]
	*($9 + [44]) = [0]
	*($9) = *((($9 + [48]) + $4))
	CALL snprintf(($9 + [44]), [3], [640], $9)
	CALL $144($0, ($9 + [44]))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$1 }
	*([0] + [4]) = ($9 + [336])
}

int_32 .FUNC _ZN6random12window_countEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	$2 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-2042775575138926592, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = ($0 + [8])
	$0 = CALL $15($1, $2)
	$3 = [1]
	CALL eosio_assert([1], [16])
	$0 = CALL db_next_i64(*($0 + [36]), ($4 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$3 = [1]
	
.LOOP $label$2:
	$0 = CALL $15($1, $0)
	CALL eosio_assert([1], [16])
	$3 = ($3 + [1])
	$0 = CALL db_next_i64(*($0 + [36]), ($4 + [8]))
	if ( ((int_32)$0 >= (int_32)[0]) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [5]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [368])
	CALL memcpy(*($7), ($8 + [15]), [1])
	$6 = (*($7) + [1])
	*($7) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) > (int_32)[7]), [368])
	CALL memcpy(*($4), $7, [8])
	*($4) = (*($4) + [8])
	CALL $20($0, ($7 + [8]))
	CALL $20($0, ($7 + [20]))
	$7 = ($7 + [32])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [368])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [368])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $6) >> [5]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$2 = int_32(($6 - $4) >> [5])
	$6 = ($2 + $1)
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	$5 = [134217727]
	$7 = ($7 - $4)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$6 }
	$5 = int_32($7 >> [4])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $135(($5 << [5]))
	goto $label$1 
	
.LABEL $label$5
	$5 = $6
	$7 = $1
	
.LOOP $label$7:
	*($5) = (int_64)0
	*(($5 + [8])) = (int_64)0
	*(($5 + [16])) = (int_64)0
	*(($5 + [24])) = (int_64)0
	$5 = ($5 + [32])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($6 + ($1 << [5]))
	return (unreachable)
	
.LABEL $label$4
	$5 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $153($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($5 << [5]))
	$7 = ($7 + ($2 << [5]))
	$5 = $7
	$6 = $1
	
.LOOP $label$8:
	*($5) = (int_64)0
	*(($5 + [8])) = (int_64)0
	*(($5 + [16])) = (int_64)0
	*(($5 + [24])) = (int_64)0
	$5 = ($5 + [32])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$8 }
	$2 = ($7 + ($1 << [5]))
	$5 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$10 }
	$4 = ([0] - $5)
	$5 = ($6 + [-16])
	
.LOOP $label$11:
	*(($7 + [-32])) = *(($5 + [-16]))
	$6 = ($5 + [-4])
	*(($7 + [-20])) = *($6)
	$1 = ($5 + [-8])
	*(($7 + [-24])) = *($1)
	*($5) = [0]
	*($6) = [0]
	*($1) = [0]
	$6 = ($5 + [12])
	*(($7 + [-4])) = *($6)
	$1 = ($5 + [4])
	*(($7 + [-12])) = *($1)
	*($1) = [0]
	*(($5 + [8])) = [0]
	*($6) = [0]
	$7 = ($7 + [-32])
	$5 = ($5 + [-32])
	if ( ((int_32)($5 + $4) != (int_32)[-16]) ){ goto $label$11 }
	$5 = *(($0 + [4]))
	$6 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$6 = $5
	
.LABEL $label$9
	*($0) = $7
	*(($0 + [4])) = $2
	*(($0 + [8])) = $3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$12 }
	$7 = ([0] - $6)
	$5 = ($5 + [-24])
	
.LOOP $label$13:
	if ( ((*(($5 + [12])) & [1]) == 0) ){ goto $label$14 }
	CALL $137(*(($5 + [20])))
	
.LABEL $label$14
	if ( ((*($5) & [1]) == 0) ){ goto $label$15 }
	CALL $137(*(($5 + [8])))
	
.LABEL $label$15
	$5 = ($5 + [-32])
	if ( ((int_32)($5 + $7) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($6 == 0) ){ goto $label$16 }
	CALL $137($6)
	
.LABEL $label$16
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [192])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$6 = *($1 + [4])
	$4 = int_32(($6 - $3) >> [5])
	$7 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$7 <= (uint_32)$4) ){ goto $label$3 }
	CALL $23($1, ($7 - $4))
	$6 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$7 >= (uint_32)$4) ){ goto $label$2 }
	$7 = ($7 << [5])
	$2 = ($3 + $7)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = (([0] - $3) - $7)
	$7 = ($6 + [-24])
	
.LOOP $label$5:
	if ( ((*(($7 + [12])) & [1]) == 0) ){ goto $label$6 }
	CALL $137(*(($7 + [20])))
	
.LABEL $label$6
	if ( ((*($7) & [1]) == 0) ){ goto $label$7 }
	CALL $137(*(($7 + [8])))
	
.LABEL $label$7
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$6 = $2
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	$4 = ($0 + [4])
	
.LOOP $label$9:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - *($4)) > (uint_32)[7]), [176])
	CALL memcpy($7, *($4), [8])
	*($4) = (*($4) + [8])
	CALL $11($0, ($7 + [8]))
	CALL $11($0, ($7 + [20]))
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$9 }
	
.LABEL $label$8
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [496])
	$4 = *($0 + [24])
	$5 = ($0 + [28])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$1 }
	$2 = *($1)
	$8 = ([0] - $4)
	$10 = ($9 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$1 }
	$9 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)$4), [560])
	$8 = ($9 + [-24])
	$3 = *($5)
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = *($9)
	*($9) = [0]
	$4 = *($8)
	*($8) = $10
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = *($4 + [20])
	if ( ($5 == 0) ){ goto $label$7 }
	$7 = ($4 + [24])
	$10 = *($7)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$9 }
	$6 = ([0] - $5)
	$10 = ($10 + [-24])
	
.LOOP $label$10:
	if ( ((*(($10 + [12])) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*(($10 + [20])))
	
.LABEL $label$11
	if ( ((*($10) & [1]) == 0) ){ goto $label$12 }
	CALL $137(*(($10 + [8])))
	
.LABEL $label$12
	$10 = ($10 + [-32])
	if ( ((int_32)($10 + $6) != (int_32)[-24]) ){ goto $label$10 }
	$10 = *(($4 + [20]))
	goto $label$8 
	
.LABEL $label$9
	$10 = $5
	
.LABEL $label$8
	*($7) = $5
	CALL $137($10)
	
.LABEL $label$7
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL $137(*(($4 + [16])))
	
.LABEL $label$13
	CALL $137($4)
	
.LABEL $label$6
	*($8 + [8]) = *($9 + [8])
	*(($8 + [16])) = *(($9 + [16]))
	$8 = ($8 + [24])
	$9 = ($9 + [24])
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$5 }
	$9 = *(($0 + [28]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	$5 = *($4 + [20])
	if ( ($5 == 0) ){ goto $label$16 }
	$3 = ($4 + [24])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$18 }
	$6 = ([0] - $5)
	$10 = ($10 + [-24])
	
.LOOP $label$19:
	if ( ((*(($10 + [12])) & [1]) == 0) ){ goto $label$20 }
	CALL $137(*(($10 + [20])))
	
.LABEL $label$20
	if ( ((*($10) & [1]) == 0) ){ goto $label$21 }
	CALL $137(*(($10 + [8])))
	
.LABEL $label$21
	$10 = ($10 + [-32])
	if ( ((int_32)($10 + $6) != (int_32)[-24]) ){ goto $label$19 }
	$10 = *(($4 + [20]))
	goto $label$17 
	
.LABEL $label$18
	$10 = $5
	
.LABEL $label$17
	*($3) = $5
	CALL $137($10)
	
.LABEL $label$16
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$22 }
	CALL $137(*(($4 + [16])))
	
.LABEL $label$22
	CALL $137($4)
	
.LABEL $label$15
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC _ZN6random18erase_lower_windowEyyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$4 = ($0 + [8])
	if ( ((uint_64)$1 <= (uint_64)(int_64)5) ){ goto $label$2 }
	$6 = ($0 + [16])
	$8 = CALL db_lowerbound_i64(*($4), *($6), (int_64)-2042775575138926592, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$1 = ((int_64)$1 + (int_64)-5)
	$8 = CALL $15($4, $8)
	
.LOOP $label$3:
	if ( ((uint_64)*($8) >= (uint_64)$1) ){ goto $label$4 }
	$7 = [0]
	$5 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($5, [384])
	CALL eosio_assert($5, [16])
	$5 = CALL db_next_i64(*($8 + [36]), $9)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $15($4, $5)
	
.LABEL $label$5
	CALL $25($4, $8)
	$8 = $7
	if ( $8 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([1], [16])
	$7 = *($8 + [36])
	$8 = [0]
	$7 = CALL db_next_i64($7, $9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$8 = CALL $15($4, $7)
	
.LABEL $label$6
	if ( $8 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = ($0 + [16])
	
.LABEL $label$1
	$8 = [0]
	$7 = CALL db_lowerbound_i64(*($4), *($6), (int_64)-2042775575138926592, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $15($4, $7)
	$8 = [1]
	CALL eosio_assert([1], [16])
	$7 = CALL db_next_i64(*($7 + [36]), $9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$8 = [1]
	
.LOOP $label$8:
	$7 = CALL $15($4, $7)
	CALL eosio_assert([1], [16])
	$8 = ($8 + [1])
	$7 = CALL db_next_i64(*($7 + [36]), $9)
	if ( ((int_32)$7 >= (int_32)[0]) ){ goto $label$8 }
	
.LABEL $label$7
	$8 = ([5] - $8)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$9 }
	$1 = ((int_64)$2 + (int_64)1)
	$2 = (CASTING uint_64)(uint_32 $8)
	$4 = ($9 + [8])
	$8 = [1]
	
.LOOP $label$10:
	CALL _ZN6random13new_prerandomERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($9, $0, $3, $8)
	CALL _ZN6random14gen_one_windowEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $1, $9)
	if ( ((*($9) & [1]) == 0) ){ goto $label$11 }
	CALL $137(*($4))
	
.LABEL $label$11
	$8 = ($8 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$2 = ((int_64)$2 + (int_64)-1)
	if ( ((int_64)($2 == 0) == 0) ){ goto $label$10 }
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC _ZN6random13hexDec2StringEi (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5) = $2
	CALL snprintf(($5 + [16]), [17], [432], $5)
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	$2 = CALL strlen(($5 + [16]))
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$4 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $135($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($4, ($5 + [16]), $2)
	
.LABEL $label$2
	*(($4 + $2)) = [0]
	*([0] + [4]) = ($5 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $139($0)
}

void .FUNC _ZN6random13new_prerandomERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL $155(($5 + [16]), $2)
	$4 = *($2)
	CALL $156($5, $2, (( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) + [-1]), [1], $2)
	$2 = ((int_32)(CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji($5, [0], [16]) + $3) % (int_32)[15])
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	CALL $137(*($5 + [8]))
	
.LABEL $label$1
	CALL _ZN6random13hexDec2StringEi($5, $5, $2)
	$2 = *($5)
	$3 = ($2 & [1])
	$2 = *($5 + [16])
	$3 = ($2 & [1])
	$4 = ( *($5 + [24]) ? (($5 + [16]) | [1]) : $3 )
	CALL $155($0, CALL $148(($5 + [16]), ((($4 + ( *($5 + [20]) ? uint_32($2 >> [1]) : $3 )) + [-1]) - $4), [1], ( *($5 + [8]) ? ($5 | [1]) : $3 ), ( *($5 + [4]) ? uint_32($2 >> [1]) : $3 )))
	if ( ((*($5) & [1]) == 0) ){ goto $label$2 }
	CALL $137(*(($5 + [8])))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $137(*(($5 + [24])))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$2 = *($0)
	$5 = *($3 + [4])
	*($1 + [8]) = *($5)
	*(($1 + [16])) = *(($5 + [8]))
	CALL eosio_assert([1], [80])
	$4 = (int_64)5522255
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [144])
	*(($1 + [32])) = (int_64)1413697284
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*(($1 + [48])) = (int_64)1413697284
	*($1 + [56]) = [0]
	*($1 + [60]) = [0]
	*($1 + [64]) = (int_64)0
	CALL $140(($1 + [72]), *($3 + [8]))
	CALL $140(($1 + [84]), *($3 + [12]))
	$5 = *($1 + [72])
	$6 = ( *(($1 + [76])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [69])
	$4 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$6:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$6 }
	$6 = *(($1 + [84]))
	$6 = ( *(($1 + [88])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$5 = ($6 + $5)
	$4 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$7:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$7 }
	if ( ($5 <= [513]) ){ goto $label$9 }
	$6 = CALL malloc($5)
	goto $label$8 
	
.LABEL $label$9
	$6 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$8
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $63($7, $1)
	$4 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($2 + [8]), (int_64)5310418688377470976, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$10 }
	CALL free($6)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [16])
}

void .FUNC _ZN6random8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [224])
	*([0] + [4]) = $13
	*($13 + [104]) = $1
	$9 = *($0)
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$3 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$3 }
	CALL require_auth($1)
	$2 = *($3 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)1413697284), [2976])
	$6 = [0]
	$8 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$4 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$8 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$4
	CALL eosio_assert($8, [2512])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [2544])
	$5 = ($0 + [168])
	$10 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $49($5, $10)
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1136])
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$11 }
	$8 = uint_32($10 >> [1])
	$11 = ($4 + [1])
	goto $label$10 
	
.LABEL $label$11
	$8 = *($4 + [4])
	$11 = *($4 + [8])
	
.LABEL $label$10
	$10 = CALL strlen([2576])
	if ( ($10 == 0) ){ goto $label$17 }
	if ( ((int_32)$8 < (int_32)$10) ){ goto $label$16 }
	$7 = ($11 + $8)
	$12 = $11
	
.LOOP $label$18:
	$8 = (($8 - $10) + [1])
	if ( ($8 == 0) ){ goto $label$16 }
	$8 = CALL memchr($12, [82], $8)
	if ( ($8 == 0) ){ goto $label$16 }
	if ( (CALL memcmp($8, [2576], $10) == 0) ){ goto $label$19 }
	$12 = ($8 + [1])
	$8 = ($7 - $12)
	if ( ((int_32)$8 >= (int_32)$10) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$16 }
	if ( ((int_32)$8 != (int_32)$11) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($6 + [56]) == 0) ){ goto $label$15 }
	$10 = *($6 + [57])
	goto $label$14 
	
.LABEL $label$16
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$21 }
	$8 = uint_32($10 >> [1])
	$11 = ($4 + [1])
	goto $label$20 
	
.LABEL $label$21
	$8 = *($4 + [4])
	$11 = *($4 + [8])
	
.LABEL $label$20
	$10 = CALL strlen([2864])
	if ( ($10 == 0) ){ goto $label$12 }
	if ( ((int_32)$8 < (int_32)$10) ){ goto $label$3 }
	$7 = ($11 + $8)
	$12 = $11
	
.LOOP $label$22:
	$8 = (($8 - $10) + [1])
	if ( ($8 == 0) ){ goto $label$3 }
	$8 = CALL memchr($12, [79], $8)
	if ( ($8 == 0) ){ goto $label$3 }
	if ( (CALL memcmp($8, [2864], $10) == 0) ){ goto $label$13 }
	$12 = ($8 + [1])
	$8 = ($7 - $12)
	if ( ((int_32)$8 >= (int_32)$10) ){ goto $label$22 }
	goto $label$3 
	
.LABEL $label$15
	$10 = [0]
	
.LABEL $label$14
	CALL eosio_assert($10, [2592])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [2640])
	$11 = *(($0 + [152]))
	$12 = *(($0 + [156]))
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$23 }
	$10 = ($12 + [-24])
	$7 = ([0] - $11)
	
.LOOP $label$24:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$23 }
	$12 = $10
	$8 = ($10 + [-24])
	$10 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$24 }
	
.LABEL $label$23
	$8 = ($0 + [128])
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$26 }
	$10 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [96]) == (int_32)$8), [208])
	goto $label$25 
	
.LABEL $label$26
	$10 = [0]
	$12 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)5310418688377470976, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$25 }
	$10 = CALL $58($8, $12)
	CALL eosio_assert(((int_32)*($10 + [96]) == (int_32)$8), [208])
	
.LABEL $label$25
	CALL eosio_assert(($10 == 0), [2672])
	*($13 + [96]) = [0]
	*($13 + [88]) = (int_64)0
	*($13 + [80]) = [0]
	*($13 + [72]) = (int_64)0
	*(($13 + [120])) = [0]
	*($13 + [112]) = (int_64)0
	$10 = CALL strlen([2576])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$29 }
	*($13 + [112]) = ($10 << [1])
	$12 = (($13 + [112]) | [1])
	if ( $10 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$7 = (($10 + [16]) & [-16])
	$12 = CALL $135($7)
	*($13 + [112]) = ($7 | [1])
	*($13 + [120]) = $12
	*($13 + [116]) = $10
	
.LABEL $label$28
	CALL memcpy($12, [2576], $10)
	
.LABEL $label$27
	*(($12 + $10)) = [0]
	$10 = *($13 + [112])
	CALL $156(($13 + [56]), $4, ( *($13 + [116]) ? uint_32($10 >> [1]) : ($10 & [1]) ), [-1], $4)
	if ( ((*($13 + [112]) & [1]) == 0) ){ goto $label$30 }
	CALL $137(*($13 + [120]))
	
.LABEL $label$30
	CALL _ZN6random19parse_memo_registerERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6_S9_($13, ($13 + [56]), ($13 + [88]), ($13 + [72]))
	$2 = *($0)
	*($13 + [116]) = $3
	*($13 + [112]) = ($13 + [104])
	*($13 + [120]) = ($13 + [88])
	*($13 + [124]) = ($13 + [72])
	*($13 + [200]) = $2
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$14()), [304])
	*($13 + [208]) = $8
	*($13 + [212]) = ($13 + [112])
	*($13 + [216]) = ($13 + [200])
	$10 = CALL $135([112])
	CALL $66($10)
	*($10 + [96]) = $8
	CALL $101(($13 + [208]), $10)
	*($13 + [192]) = $10
	$2 = *($10)
	*($13 + [208]) = $2
	$4 = *($10 + [100])
	*($13 + [188]) = $4
	$12 = ($0 + [156])
	$8 = *($12)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [160]))) ){ goto $label$32 }
	*($8 + [8]) = $2
	*($8 + [16]) = $4
	*($13 + [192]) = [0]
	*($8) = $10
	*($12) = ($8 + [24])
	goto $label$31 
	
.LABEL $label$32
	CALL $68(($0 + [152]), ($13 + [192]), ($13 + [208]), ($13 + [188]))
	
.LABEL $label$31
	$10 = *($13 + [192])
	*($13 + [192]) = [0]
	if ( ($10 == 0) ){ goto $label$33 }
	if ( ((*($10 + [84]) & [1]) == 0) ){ goto $label$34 }
	CALL $137(*(($10 + [92])))
	
.LABEL $label$34
	if ( ((*($10 + [72]) & [1]) == 0) ){ goto $label$35 }
	CALL $137(*(($10 + [80])))
	
.LABEL $label$35
	CALL $137($10)
	
.LABEL $label$33
	$1 = *($0)
	CALL eosio_assert(((int_32)*($6 + [68]) == (int_32)$5), [1312])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$14()), [1360])
	$2 = *($6)
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*(($6 + [16]))), [2752])
	$9 = ((int_64)*($6 + [8]) + (int_64)*($3))
	*($6 + [8]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [2800])
	CALL eosio_assert(((int_64)*($6 + [8]) < (int_64)4611686018427387904), [2832])
	CALL eosio_assert(((int_64)$2 == (int_64)*($6)), [1536])
	*($13 + [216]) = (($13 + [112]) + [67])
	*($13 + [212]) = ($13 + [112])
	*($13 + [208]) = ($13 + [112])
	CALL $56(($13 + [208]), $6)
	CALL db_update_i64(*($6 + [72]), $1, ($13 + [112]), [67])
	$10 = ($0 + [184])
	if ( (uint_64)($2 <= *($10)) ){ goto $label$36 }
	*($10) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$36
	if ( ((*($13 + [56]) & [1]) == 0) ){ goto $label$37 }
	CALL $137(*($13 + [64]))
	
.LABEL $label$37
	if ( ((*($13 + [72]) & [1]) == 0) ){ goto $label$38 }
	CALL $137(*(($13 + [80])))
	
.LABEL $label$38
	if ( ((*($13 + [88]) & [1]) == 0) ){ goto $label$3 }
	CALL $137(*(($13 + [96])))
	goto $label$3 
	
.LABEL $label$13
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)$11) ){ goto $label$3 }
	
.LABEL $label$12
	$10 = [0]
	if ( (*($6 + [56]) == 0) ){ goto $label$39 }
	$10 = *($6 + [58])
	
.LABEL $label$39
	CALL eosio_assert($10, [1744])
	CALL eosio_assert(((int_64)*($3) > (int_64)9999), [2880])
	*($13 + [96]) = [0]
	*($13 + [88]) = (int_64)0
	*(($13 + [120])) = [0]
	*($13 + [112]) = (int_64)0
	$10 = CALL strlen([2864])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$42 }
	*($13 + [112]) = ($10 << [1])
	$8 = (($13 + [112]) | [1])
	if ( $10 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$12 = (($10 + [16]) & [-16])
	$8 = CALL $135($12)
	*($13 + [112]) = ($12 | [1])
	*($13 + [120]) = $8
	*($13 + [116]) = $10
	
.LABEL $label$41
	CALL memcpy($8, [2864], $10)
	
.LABEL $label$40
	*(($8 + $10)) = [0]
	$10 = *($13 + [112])
	CALL $156(($13 + [72]), $4, ( *($13 + [116]) ? uint_32($10 >> [1]) : ($10 & [1]) ), [-1], $4)
	if ( ((*($13 + [112]) & [1]) == 0) ){ goto $label$43 }
	CALL $137(*($13 + [120]))
	
.LABEL $label$43
	CALL eosio_assert(CALL $33($13, ($13 + [72]), ($13 + [88]), ($13 + [56])), [2928])
	$2 = *($13 + [104])
	CALL $155(($13 + [40]), ($13 + [88]))
	*((($13 + [24]) + [12])) = *(($3 + [12]))
	$10 = ($3 + [8])
	*(($8 = (($13 + [24]) + [8]))) = *($10)
	$1 = *($13 + [56])
	*($13 + [24]) = *($3)
	*((($13 + [8]) + [8])) = *($8)
	*($13 + [8]) = *($13 + [24])
	CALL _ZN6random10make_orderEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyN5eosio5assetE($0, $2, ($13 + [40]), $1, ($13 + [8]))
	if ( ((*($13 + [40]) & [1]) == 0) ){ goto $label$44 }
	CALL $137(*($13 + [48]))
	
.LABEL $label$44
	$1 = *($0)
	CALL eosio_assert(((int_32)*($6 + [68]) == (int_32)$5), [1312])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$14()), [1360])
	$2 = *($6)
	CALL eosio_assert(((int_64)*($10) == (int_64)*(($6 + [32]))), [2752])
	$9 = ((int_64)*($6 + [24]) + (int_64)*($3))
	*($6 + [24]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [2800])
	CALL eosio_assert(((int_64)*($6 + [24]) < (int_64)4611686018427387904), [2832])
	CALL eosio_assert(((int_64)*($10) == (int_64)*(($6 + [48]))), [2752])
	$9 = ((int_64)*($6 + [40]) + (int_64)*($3))
	*($6 + [40]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [2800])
	CALL eosio_assert(((int_64)*($6 + [40]) < (int_64)4611686018427387904), [2832])
	CALL eosio_assert(((int_64)$2 == (int_64)*($6)), [1536])
	*($13 + [216]) = (($13 + [112]) + [67])
	*($13 + [212]) = ($13 + [112])
	*($13 + [208]) = ($13 + [112])
	CALL $56(($13 + [208]), $6)
	CALL db_update_i64(*($6 + [72]), $1, ($13 + [112]), [67])
	$10 = ($0 + [184])
	if ( (uint_64)($2 <= *($10)) ){ goto $label$45 }
	*($10) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$45
	if ( ((*($13 + [72]) & [1]) == 0) ){ goto $label$46 }
	CALL $137(*($13 + [80]))
	
.LABEL $label$46
	if ( ((*($13 + [88]) & [1]) == 0) ){ goto $label$3 }
	CALL $137(*(($13 + [96])))
	
.LABEL $label$3
	*([0] + [4]) = ($13 + [224])
	return (unreachable)
	
.LABEL $label$2
	CALL $139(($13 + [112]))
	
.LABEL $label$1
	CALL $139(($13 + [112]))
	(unreachable)
}

void .FUNC _ZN6random7deliverEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyS6_ (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	CALL require_auth(*($0))
	CALL require_recipient($3)
}

void .FUNC _ZN6random6logoutEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [176])
	*([0] + [4]) = $18
	CALL require_auth($1)
	$2 = ($0 + [168])
	$8 = [0]
	$10 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $49($2, $10)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1136])
	CALL eosio_assert(*($8 + [56]), [3008])
	$17 = *(($0 + [152]))
	$9 = *(($0 + [156]))
	if ( ((int_32)$9 == (int_32)$17) ){ goto $label$2 }
	$10 = ($9 + [-24])
	$3 = ([0] - $17)
	
.LOOP $label$3:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$2 }
	$9 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $3) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$3 = ($0 + [128])
	if ( ((int_32)$9 == (int_32)$17) ){ goto $label$5 }
	$9 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [96]) == (int_32)$3), [208])
	goto $label$4 
	
.LABEL $label$5
	$9 = [0]
	$10 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)5310418688377470976, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	$9 = CALL $58($3, $10)
	CALL eosio_assert(((int_32)*($9 + [96]) == (int_32)$3), [208])
	
.LABEL $label$4
	$4 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($4, [3040])
	CALL eosio_assert((int_64)(*($9 + [40]) == 0), [3088])
	$5 = *($0)
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [1216]
	$13 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$11 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$6 = ($6 + [165])
	goto $label$9 
	
.LABEL $label$11
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$7
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$6 }
	$12 = (int_64)0
	$14 = (int_64)59
	$10 = [1232]
	$15 = (int_64)0
	
.LOOP $label$12:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$13 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$6 = ($6 + [165])
	goto $label$14 
	
.LABEL $label$15
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$13
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$11 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$12 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [1248]
	$16 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$21 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$6 = ($6 + [165])
	goto $label$19 
	
.LABEL $label$21
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$17
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$16 }
	*((($18 + [8]) + [8])) = [0]
	*($18 + [8]) = (int_64)0
	$10 = CALL strlen([3152])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$22 }
	$6 = ($9 + [8])
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$25 }
	*($18 + [8]) = ($10 << [1])
	$17 = (($18 + [8]) | [1])
	if ( $10 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$7 = (($10 + [16]) & [-16])
	$17 = CALL $135($7)
	*($18 + [8]) = ($7 | [1])
	*($18 + [16]) = $17
	*($18 + [12]) = $10
	
.LABEL $label$24
	CALL memcpy($17, [3152], $10)
	
.LABEL $label$23
	*(($17 + $10)) = [0]
	*($18 + [72]) = $1
	*((($18 + [64]) + [28])) = *(($6 + [12]))
	*((($18 + [64]) + [24])) = *(($6 + [8]))
	*((($18 + [64]) + [20])) = *(($6 + [4]))
	*($18 + [64]) = *($0)
	*($18 + [80]) = *($6)
	$10 = (($18 + [8]) + [8])
	*(($18 + [104])) = *($10)
	*($18 + [96]) = *($18 + [8])
	*($18 + [8]) = [0]
	*($18 + [12]) = [0]
	*($10) = [0]
	*($18 + [24]) = $15
	*($18 + [32]) = $16
	*(($10 = CALL $135([16]))) = $5
	*($10 + [8]) = $13
	*((($18 + [24]) + [32])) = [0]
	$6 = ($10 + [16])
	*((($18 + [24]) + [24])) = $6
	*((($18 + [24]) + [20])) = $6
	*($18 + [40]) = $10
	*($18 + [52]) = [0]
	*((($18 + [24]) + [36])) = [0]
	$10 = *($18 + [96])
	$6 = ( *((($18 + [64]) + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($6 + [32])
	$12 = (CASTING uint_64)(uint_32 $6)
	$6 = (($18 + [24]) + [28])
	
.LOOP $label$26:
	$10 = ($10 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$28 }
	CALL $13($6, $10)
	$6 = *(($18 + [56]))
	$10 = *(($18 + [52]))
	goto $label$27 
	
.LABEL $label$28
	$6 = [0]
	$10 = [0]
	
.LABEL $label$27
	*($18 + [164]) = $10
	*($18 + [160]) = $10
	*($18 + [168]) = $6
	*($18 + [144]) = ($18 + [160])
	*($18 + [152]) = ($18 + [64])
	CALL $59(($18 + [152]), ($18 + [144]))
	CALL $60(($18 + [160]), ($18 + [24]))
	$10 = *($18 + [160])
	CALL send_inline($10, (*($18 + [164]) - $10))
	$10 = *($18 + [160])
	if ( ($10 == 0) ){ goto $label$29 }
	*($18 + [164]) = $10
	CALL $137($10)
	
.LABEL $label$29
	$10 = *($18 + [52])
	if ( ($10 == 0) ){ goto $label$30 }
	*(($18 + [56])) = $10
	CALL $137($10)
	
.LABEL $label$30
	$10 = *($18 + [40])
	if ( ($10 == 0) ){ goto $label$31 }
	*(($18 + [44])) = $10
	CALL $137($10)
	
.LABEL $label$31
	if ( ((*(($18 + [96])) & [1]) == 0) ){ goto $label$32 }
	CALL $137(*(($18 + [104])))
	
.LABEL $label$32
	if ( ((*($18 + [8]) & [1]) == 0) ){ goto $label$33 }
	CALL $137(*(($18 + [16])))
	
.LABEL $label$33
	$14 = *($0)
	CALL eosio_assert(((int_32)*($8 + [68]) == (int_32)$2), [1312])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$14()), [1360])
	$12 = *($8)
	CALL eosio_assert(((int_64)*(($9 + [16])) == (int_64)*(($8 + [16]))), [1424])
	$11 = (int_64)
	*($8 + [8]) = $11(*($8 + [8]) - *($9 + [8])))
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [1472])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [1504])
	CALL eosio_assert(((int_64)$12 == (int_64)*($8)), [1536])
	*($18 + [32]) = (($18 + [64]) + [67])
	*($18 + [28]) = ($18 + [64])
	*($18 + [24]) = ($18 + [64])
	CALL $56(($18 + [24]), $8)
	CALL db_update_i64(*($8 + [72]), $14, ($18 + [64]), [67])
	$10 = ($0 + [184])
	if ( (uint_64)($12 <= *($10)) ){ goto $label$34 }
	*($10) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$34
	CALL eosio_assert($4, [384])
	CALL eosio_assert($4, [16])
	$10 = CALL db_next_i64(*($9 + [100]), ($18 + [64]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$35 }
	CALL $58($3, $10)
	
.LABEL $label$35
	CALL $61($3, $9)
	*([0] + [4]) = ($18 + [176])
	return (unreachable)
	
.LABEL $label$22
	CALL $139(($18 + [8]))
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $135(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $153($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $135([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $13(($8 + [28]), [4])
	$2 = *($8 + [28])
	CALL eosio_assert(((int_32)(*($2) - $2) > (int_32)[3]), [368])
	CALL memcpy($2, $4, [4])
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $137($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $137($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $137($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC _ZN6random6patrolEm (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL require_auth(*($0))
	CALL _ZN6random19check_window_activeEm($0, $1)
	$6 = (int_64)0
	*($9 + [104]) = (int_64)0
	*($9 + [96]) = ((int_64)*($0) + (int_64)-1)
	$8 = CALL current_time()
	*(($9 + [60])) = [0]
	*(($9 + [64])) = [0]
	*($9 + [44]) = [0]
	*($9 + [48]) = [0]
	*($9 + [52]) = [0]
	*($9 + [56]) = [0]
	*($9 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*($9 + [68]) = [0]
	*(($9 + [72])) = [0]
	*(($9 + [76])) = [0]
	*($9 + [80]) = [0]
	*(($9 + [84])) = [0]
	*(($9 + [88])) = [0]
	$3 = ($9 + [68])
	$2 = *($0)
	$5 = (int_64)59
	$1 = [1216]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$6 }
	$4 = *($1)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$1 = ($1 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*($9 + [24]) = $7
	*($9 + [16]) = $2
	$6 = (int_64)0
	$5 = (int_64)59
	$1 = [3216]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$12 }
	$4 = *($1)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$1 = ($1 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	*($9 + [8]) = $7
	*($9) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL $105($3, ($9 + [16]), $0, ($9 + [8]), $9)
	*(($9 + [52])) = [600]
	CALL cancel_deferred(($9 + [96]))
	$6 = *($0)
	CALL $86(($9 + [16]), ($9 + [32]))
	$1 = *($9 + [16])
	CALL send_deferred(($9 + [96]), $6, $1, (*($9 + [20]) - $1), [1])
	$1 = *($9 + [16])
	if ( ($1 == 0) ){ goto $label$13 }
	*($9 + [20]) = $1
	CALL $137($1)
	
.LABEL $label$13
	CALL $88(($9 + [32]))
	*([0] + [4]) = ($9 + [112])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [400])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [3232]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [3248]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [3264])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1248]
	$7 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [1232]
	$7 = (int_64)0
	
.LOOP $label$23:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$24 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$14 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1248]
	$7 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$32 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$3 = ($3 + [165])
	goto $label$30 
	
.LABEL $label$32
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$28
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$27 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($9 + [208])) = $0
	*(($9 + [216])) = (int_64)-1
	*(($9 + [224])) = (int_64)0
	*(($9 + [232])) = [0]
	*($9 + [200]) = $0
	*($9 + [192]) = $0
	*($9 + [240]) = $0
	*(($9 + [248])) = $0
	*(($9 + [256])) = (int_64)-1
	*(($9 + [264])) = [0]
	*(($9 + [268])) = [0]
	*(($9 + [272])) = [0]
	*($9 + [280]) = $0
	*(($9 + [288])) = $0
	*(($9 + [296])) = (int_64)-1
	*(($9 + [304])) = [0]
	*(($9 + [308])) = [0]
	*(($9 + [312])) = [0]
	*($9 + [320]) = $0
	*(($9 + [328])) = $0
	*(($9 + [336])) = (int_64)-1
	*(($9 + [344])) = [0]
	*(($9 + [348])) = [0]
	*(($9 + [352])) = [0]
	*($9 + [360]) = $0
	*(($9 + [368])) = $0
	*(($9 + [376])) = (int_64)-1
	*(($9 + [384])) = [0]
	*(($9 + [388])) = [0]
	*(($9 + [392])) = [0]
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$44 }
	if ( ((int_64)$2 > (int_64)-6218492227992158209) ){ goto $label$43 }
	if ( ((int_64)$2 == (int_64)-8279501348051877888) ){ goto $label$41 }
	if ( ((int_64)$2 == (int_64)-7953176268458541056) ){ goto $label$40 }
	if ( ((int_64)$2 != (int_64)-7953168189226729472) ){ goto $label$33 }
	*($9 + [148]) = [0]
	*($9 + [144]) = [1]
	*($9 + [40 align=4]) = *($9 + [144])
	CALL $112(($9 + [192]), ($9 + [40]))
	goto $label$33 
	
.LABEL $label$44
	if ( ((int_64)$2 > (int_64)5378122223192113151) ){ goto $label$42 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$39 }
	if ( ((int_64)$2 == (int_64)4929617858276622336) ){ goto $label$38 }
	if ( ((int_64)$2 != (int_64)4929617993568092160) ){ goto $label$33 }
	*($9 + [172]) = [0]
	*($9 + [168]) = [2]
	*($9 + [16 align=4]) = *($9 + [168])
	CALL $110(($9 + [192]), ($9 + [16]))
	goto $label$33 
	
.LABEL $label$43
	if ( ((int_64)$2 == (int_64)-6218492227992158208) ){ goto $label$37 }
	if ( ((int_64)$2 == (int_64)-5915331449955134096) ){ goto $label$36 }
	if ( ((int_64)$2 != (int_64)-4992550862678130688) ){ goto $label$33 }
	*($9 + [180]) = [0]
	*($9 + [176]) = [3]
	*($9 + [8 align=4]) = *($9 + [176])
	CALL $109(($9 + [192]), ($9 + [8]))
	goto $label$33 
	
.LABEL $label$42
	if ( ((int_64)$2 == (int_64)5378122223192113152) ){ goto $label$35 }
	if ( ((int_64)$2 == (int_64)6712742083569909760) ){ goto $label$34 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$33 }
	*($9 + [188]) = [0]
	*($9 + [184]) = [4]
	*($9) = *($9 + [184])
	CALL $108(($9 + [192]), $9)
	goto $label$33 
	
.LABEL $label$41
	*($9 + [124]) = [0]
	*($9 + [120]) = [5]
	*($9 + [64 align=4]) = *($9 + [120])
	CALL $115(($9 + [192]), ($9 + [64]))
	goto $label$33 
	
.LABEL $label$40
	*($9 + [156]) = [0]
	*($9 + [152]) = [6]
	*($9 + [32 align=4]) = *($9 + [152])
	CALL $112(($9 + [192]), ($9 + [32]))
	goto $label$33 
	
.LABEL $label$39
	*($9 + [132]) = [0]
	*($9 + [128]) = [7]
	*($9 + [56 align=4]) = *($9 + [128])
	CALL $114(($9 + [192]), ($9 + [56]))
	goto $label$33 
	
.LABEL $label$38
	*($9 + [164]) = [0]
	*($9 + [160]) = [8]
	*($9 + [24 align=4]) = *($9 + [160])
	CALL $111(($9 + [192]), ($9 + [24]))
	goto $label$33 
	
.LABEL $label$37
	*($9 + [100]) = [0]
	*($9 + [96]) = [9]
	*($9 + [88 align=4]) = *($9 + [96])
	CALL $118(($9 + [192]), ($9 + [88]))
	goto $label$33 
	
.LABEL $label$36
	*($9 + [140]) = [0]
	*($9 + [136]) = [10]
	*($9 + [48 align=4]) = *($9 + [136])
	CALL $113(($9 + [192]), ($9 + [48]))
	goto $label$33 
	
.LABEL $label$35
	*($9 + [108]) = [0]
	*($9 + [104]) = [11]
	*($9 + [80 align=4]) = *($9 + [104])
	CALL $117(($9 + [192]), ($9 + [80]))
	goto $label$33 
	
.LABEL $label$34
	*($9 + [116]) = [0]
	*($9 + [112]) = [12]
	*($9 + [72 align=4]) = *($9 + [112])
	CALL $116(($9 + [192]), ($9 + [72]))
	
.LABEL $label$33
	CALL $119(($9 + [192]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [400])
}

void .FUNC _ZN6random6foobarEv (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	$3 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$1 = ($0 + [168])
	$3 = CALL $49($1, $3)
	$4 = *($0)
	CALL eosio_assert(((int_32)*($3 + [68]) == (int_32)$1), [1312])
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1360])
	*($3 + [64]) = [1]
	$2 = *($3)
	CALL eosio_assert([1], [1536])
	*($5 + [88]) = ($5 + [67])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $56(($5 + [80]), $3)
	CALL db_update_i64(*($3 + [72]), $4, $5, [67])
	$0 = ($0 + [184])
	if ( (uint_64)($2 <= *($0)) ){ goto $label$1 }
	*($0) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [176])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [176])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [8]), [1])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7)
	$3 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 int_32(($4 << [24]) >> [24])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $11(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $155(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $155(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $137(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $137(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $137(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $135(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $153($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $137(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $137($4)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6) = [0]
	$3 = *($1 + [8])
	*($6 + [8]) = $3
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $6
	$4 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL $136($3)
	*($6) = $5
	$4 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $4, $3)
	*($6 + [12]) = *($1 + [12])
	*($0) = [0]
	*($6 + [16]) = [0]
	$1 = *(($6 + [8]))
	*($6 + [24]) = $1
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$3 = $6
	$5 = ($6 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL $136($1)
	*($6 + [16]) = $5
	$3 = *($6)
	
.LABEL $label$3
	CALL memcpy($5, $3, $1)
	*($6 + [28]) = *(($6 + [12]))
	CALL $40($0, ($6 + [16]))
	if ( (*((($6 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($6 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $138($1)
	
.LABEL $label$5
	if ( (*(($6 + [8])) <= [9]) ){ goto $label$6 }
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $138($1)
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [32])
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [8]) = [0]
	$4 = *($3 + [8])
	*($7 + [16]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($7 + [8])
	$5 = $3
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL $136($4)
	*($7 + [8]) = $6
	$5 = *($3)
	
.LABEL $label$1
	CALL memcpy($6, $5, $4)
	*($7 + [20]) = *($3 + [12])
	CALL $39($0, ($7 + [8]), [0])
	if ( (*(($7 + [16])) <= [9]) ){ goto $label$3 }
	$3 = *($7 + [8])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $138($3)
	
.LABEL $label$3
	*($0 + [16]) = $1
	*($0 + [24]) = $1
	*($0 + [28]) = $2
	*($0 + [32]) = [0]
	*(($0 + [20])) = $1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$8 }
	CALL void ($7 + [24])((int_32 ($0 + [4])), (int_32 $1), (int_32 $2), (int_32 *(($3 & [-2]) + [4])))
	$1 = *($7 + [24])
	if ( ((int_32)$1 == (int_32)*($0 + [28])) ){ goto $label$7 }
	$2 = *($7 + [28])
	goto $label$5 
	
.LABEL $label$8
	*($7 + [28]) = $2
	*($7 + [24]) = $2
	$1 = $2
	goto $label$6 
	
.LABEL $label$7
	$2 = *($7 + [28])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)*(($0 + [20])) != (int_32)$2) ){ goto $label$5 }
	*(($0 + [32])) = [1]
	
.LABEL $label$5
	*(($0 + [20])) = $1
	$1 = ($0 + [24])
	*(($0 + [16])) = *($1)
	*($1) = $2
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [16])
	*([0] + [4]) = $16
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($1 + [4])
	$3 = ($16 | [1])
	$5 = ($1 + [20])
	$6 = ($1 + [16])
	$7 = ($16 + [8])
	$8 = ($1 + [28])
	$9 = ($1 + [32])
	$10 = ($1 + [24])
	
.LOOP $label$1:
	$13 = [1]
	if ( (*($1) == 0) ){ goto $label$2 }
	$13 = ((int_32)*($9) != (int_32)[0])
	
.LABEL $label$2
	if ( (*($2) == 0) ){ goto $label$10 }
	$15 = ((int_32)*(($2 + [32])) != (int_32)[0])
	if ( ((int_32)($13 | $15) == (int_32)[1]) ){ goto $label$9 }
	$15 = *(($2 + [16]))
	$13 = *($6)
	$12 = *($5)
	if ( ((int_32)($12 - $13) != (int_32)(*(($2 + [20])) - $15)) ){ goto $label$7 }
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$11 }
	$11 = $13
	
.LOOP $label$12:
	if ( ((int_32)*($11) != (int_32)*($15)) ){ goto $label$7 }
	$15 = ($15 + [1])
	$11 = ($11 + [1])
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)*($10) != (int_32)*(($2 + [24]))) ){ goto $label$7 }
	if ( ((int_32)*($8) != (int_32)*(($2 + [28]))) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$10
	$15 = [1]
	
.LABEL $label$9
	if ( ((int_32)$13 == (int_32)$15) ){ goto $label$6 }
	
.LABEL $label$8
	$12 = *($5)
	$13 = *($6)
	
.LABEL $label$7
	*($7) = [0]
	*($16) = (int_64)0
	$11 = ($12 - $13)
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$11 > (uint_32)[10]) ){ goto $label$15 }
	*($16) = ($11 << [1])
	$14 = $3
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$15 = (($11 + [16]) & [-16])
	$14 = CALL $135($15)
	*($7) = $14
	*($16) = ($15 | [1])
	*($16 + [4]) = $11
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$13 }
	
.LABEL $label$14
	$15 = $14
	
.LOOP $label$16:
	*($15) = *($13)
	$15 = ($15 + [1])
	$13 = ($13 + [1])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$16 }
	$14 = ($14 + $11)
	
.LABEL $label$13
	*($14) = [0]
	$13 = ($0 + [4])
	$15 = *($13)
	if ( ((uint_32)$15 >= (uint_32)*(($0 + [8]))) ){ goto $label$18 }
	*($15) = *($16)
	*(($15 + [8])) = *($7)
	*($7) = [0]
	*($16) = [0]
	*($16 + [4]) = [0]
	*($13) = (*($13) + [12])
	goto $label$17 
	
.LABEL $label$18
	CALL $38($0, $16)
	if ( ((*($16) & [1]) == 0) ){ goto $label$17 }
	CALL $137(*($7))
	
.LABEL $label$17
	$13 = *($8)
	$15 = *($1)
	if ( ($15 == 0) ){ goto $label$20 }
	CALL void $16((int_32 $4), (int_32 *($10)), (int_32 $13), (int_32 *(($15 & [-2]) + [4])))
	$15 = *($16)
	if ( ((int_32)$15 == (int_32)*($8)) ){ goto $label$19 }
	$13 = *($16 + [4])
	goto $label$3 
	
.LABEL $label$20
	*($16 + [4]) = $13
	*($16) = $13
	$15 = $13
	goto $label$4 
	
.LABEL $label$19
	$13 = *($16 + [4])
	if ( ((int_32)$13 != (int_32)$15) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	*([0] + [4]) = ($16 + [16])
	return $0
	
.LABEL $label$5
	CALL $139($16)
	
.LABEL $label$4
	if ( ((int_32)*($5) != (int_32)$15) ){ goto $label$3 }
	*($9) = [1]
	
.LABEL $label$3
	*($5) = $15
	*($6) = *($10)
	*($10) = $13
	goto $label$1 
	return (unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($6) = [0]
	$4 = *($2 + [8])
	*($6 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $6
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL $136($4)
	*($6) = $5
	$2 = *($2)
	
.LABEL $label$1
	CALL memcpy($5, $2, $4)
	*($6 + [32]) = [0]
	$2 = *(($6 + [8]))
	*($6 + [40]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $6
	$5 = ($6 + [32])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL $136($2)
	*($6 + [32]) = $5
	$4 = *($6)
	
.LABEL $label$3
	CALL memcpy($5, $4, $2)
	*($6 + [16]) = [0]
	$2 = *((($6 + [32]) + [8]))
	*($6 + [24]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$6 }
	$4 = ($6 + [16])
	$5 = ($6 + [32])
	goto $label$5 
	
.LABEL $label$6
	$4 = CALL $136($2)
	*($6 + [16]) = $4
	$2 = *((($6 + [16]) + [8]))
	$5 = *($6 + [32])
	
.LABEL $label$5
	CALL memcpy($4, $5, $2)
	*($6 + [28]) = $3
	if ( (*((($6 + [32]) + [8])) <= [9]) ){ goto $label$7 }
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $138($2)
	
.LABEL $label$7
	$2 = CALL $35($0, $1, ($6 + [16]))
	if ( (*((($6 + [16]) + [8])) <= [9]) ){ goto $label$8 }
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $138($4)
	
.LABEL $label$8
	if ( (*(($6 + [8])) <= [9]) ){ goto $label$9 }
	$4 = *($6)
	if ( ($4 == 0) ){ goto $label$9 }
	CALL $138($4)
	
.LABEL $label$9
	*([0] + [4]) = ($6 + [48])
	return $2
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [272])
	*([0] + [4]) = $7
	$5 = *($1 + [8])
	$6 = *($1 + [4])
	$4 = *($1)
	*($7 + [176]) = [0]
	$3 = *($2 + [8])
	*($7 + [184]) = $3
	$1 = ($4 & [1])
	$5 = ( $5 ? ($1 + [1]) : $1 )
	$1 = ($5 + ( $6 ? uint_32($4 >> [1]) : $1 ))
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$4 = ($7 + [176])
	$6 = $2
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL $136($3)
	*($7 + [176]) = $4
	$6 = *($2)
	
.LABEL $label$1
	CALL memcpy($4, $6, $3)
	*($7 + [188]) = *($2 + [12])
	$1 = CALL $36(($7 + [192]), $5, $1, ($7 + [176]))
	$2 = [0]
	*($7 + [232]) = [0]
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	*($7 + [232]) = $3
	if ( ($3 & [1]) ){ goto $label$4 }
	CALL void ($1 + [4])((int_32 (($7 + [232]) | [4])), (int_32 [0]), (int_32 *(($3 & [-2]))))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	*((($7 + [232]) + [12])) = *(($1 + [12]))
	*($7 + [236 align=4]) = *($1 + [4 align=4])
	$2 = $3
	
.LABEL $label$3
	*($7 + [248]) = *($1 + [16 align=4])
	*($7 + [256]) = *($1 + [24])
	*($7 + [260]) = *($1 + [28])
	*($7 + [264]) = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ($2 & [1]) ){ goto $label$6 }
	$2 = *(($2 & [-2]))
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ($1 + [4])
	CALL void $3((int_32 $3), (int_32 [2]), (int_32 $2))
	
.LABEL $label$6
	*($1) = [0]
	
.LABEL $label$5
	if ( (*(($7 + [184])) <= [9]) ){ goto $label$7 }
	$1 = *($7 + [176])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $138($1)
	
.LABEL $label$7
	*(($7 + [116])) = [0]
	*($7 + [96]) = [0]
	*($7 + [124]) = [0]
	*($7 + [120]) = [0]
	*($7 + [112]) = [0]
	*($7 + [128]) = [1]
	*($7 + [136]) = [0]
	*($7 + [164]) = [0]
	*($7 + [160]) = [0]
	*($7 + [168]) = [1]
	*($7 + [152]) = *($7 + [112])
	*($7 + [40]) = [0]
	$1 = [0]
	$2 = *($7 + [232])
	if ( ($2 == 0) ){ goto $label$8 }
	*($7 + [40]) = $2
	if ( ($2 & [1]) ){ goto $label$9 }
	CALL void (($7 + [232]) | [4])((int_32 (($7 + [40]) | [4])), (int_32 [0]), (int_32 *(($2 & [-2]))))
	$1 = *($7 + [136])
	goto $label$8 
	
.LABEL $label$9
	*((($7 + [40]) + [12])) = *((($7 + [232]) + [12]))
	*($7 + [44 align=4]) = *($7 + [236 align=4])
	$1 = [0]
	
.LABEL $label$8
	*($7 + [56]) = *((($7 + [232]) + [16]))
	*($7 + [64]) = *((($7 + [232]) + [24]))
	*($7 + [68]) = *((($7 + [232]) + [28]))
	*($7 + [72]) = *((($7 + [232]) + [32]))
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	*($7) = $1
	if ( ($1 & [1]) ){ goto $label$11 }
	CALL void (($7 + [136]) | [4])((int_32 ($7 | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$10 
	
.LABEL $label$11
	*(($7 + [12])) = *((($7 + [136]) + [12]))
	*($7 + [4 align=4]) = *($7 + [140 align=4])
	
.LABEL $label$10
	*($7 + [16]) = *((($7 + [136]) + [16]))
	*($7 + [24]) = *((($7 + [136]) + [24]))
	*($7 + [28]) = *((($7 + [136]) + [28]))
	*($7 + [32]) = *((($7 + [136]) + [32]))
	$3 = CALL $37(($7 + [80]), ($7 + [40]), $7)
	$1 = *($7)
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ($1 & [1]) ){ goto $label$13 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($7 | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$13
	*($7) = [0]
	
.LABEL $label$12
	$1 = *($7 + [40])
	if ( ($1 == 0) ){ goto $label$14 }
	if ( ($1 & [1]) ){ goto $label$15 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$15 }
	$2 = (($7 + [40]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$15
	*($7 + [40]) = [0]
	
.LABEL $label$14
	$4 = *($0)
	*($0) = *($3)
	*($3) = $4
	$1 = *($0 + [4])
	*($0 + [4]) = *($3 + [4])
	*($3 + [4]) = $1
	$2 = *($0 + [8])
	*($0 + [8]) = *($3 + [8])
	*($3 + [8]) = $2
	if ( ($4 == 0) ){ goto $label$16 }
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$18 }
	$2 = ([0] - $4)
	$1 = ($1 + [-12])
	
.LOOP $label$19:
	if ( ((*($1) & [1]) == 0) ){ goto $label$20 }
	CALL $137(*(($1 + [8])))
	
.LABEL $label$20
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $2) != (int_32)[-12]) ){ goto $label$19 }
	$1 = *($3)
	goto $label$17 
	
.LABEL $label$18
	$1 = $4
	
.LABEL $label$17
	*(($3 + [4])) = $4
	CALL $137($1)
	
.LABEL $label$16
	$1 = *($7 + [136])
	if ( ($1 == 0) ){ goto $label$21 }
	if ( ($1 & [1]) ){ goto $label$22 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$22 }
	$2 = (($7 + [136]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$22
	*($7 + [136]) = [0]
	
.LABEL $label$21
	$1 = *($7 + [232])
	if ( ($1 == 0) ){ goto $label$23 }
	if ( ($1 & [1]) ){ goto $label$24 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$24 }
	$2 = (($7 + [232]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$24
	*($7 + [232]) = [0]
	
.LABEL $label$23
	*([0] + [4]) = ($7 + [272])
	return $0
}

void .FUNC _ZN6random10cal_randomERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEyS8_yy (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4, int_64 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [352])
	*([0] + [4]) = $11
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	CALL memset(($11 + [96]), [0], [255])
	$7 = *($2 + [8])
	$8 = *($2)
	$9 = *($4 + [8])
	$10 = *($4)
	*((($11 + [16]) + [32])) = $6
	*((($11 + [16]) + [24])) = $5
	*((($11 + [16]) + [16])) = ( $9 ? ($4 + [1]) : ($10 & [1]) )
	*($11 + [24]) = $3
	*($11 + [16]) = ( $7 ? ($2 + [1]) : ($8 & [1]) )
	CALL snprintf(($11 + [96]), [255], [656], ($11 + [16]))
	*((($11 + [64]) + [24])) = (int_64)0
	*((($11 + [64]) + [16])) = (int_64)0
	*($11 + [72]) = (int_64)0
	*($11 + [64]) = (int_64)0
	CALL sha256(($11 + [96]), CALL $187(($11 + [96])), ($11 + [64]))
	$2 = ($11 + [62])
	$4 = [0]
	
.LOOP $label$1:
	*($2) = [0]
	*($11 + [60]) = [0]
	*($11) = *((($11 + [64]) + $4))
	CALL snprintf(($11 + [60]), [3], [640], $11)
	CALL $144($0, ($11 + [60]))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$1 }
	*([0] + [4]) = ($11 + [352])
}

int_32 .FUNC _ZN6random16parse_memo_orderERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERS6_Ry (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	$7 = *($1)
	if ( (( *($1 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ) == 0) ){ goto $label$6 }
	$4 = [0]
	*($12 + [40]) = [0]
	*($12 + [32]) = (int_64)0
	$7 = CALL strlen([688])
	*($12 + [24]) = $7
	*($12 + [16]) = [0]
	if ( ((uint_32)$7 >= (uint_32)[9]) ){ goto $label$5 }
	$6 = ($12 + [16])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = [0]
	goto $label$2 
	
.LABEL $label$5
	$6 = CALL $136($7)
	*($12 + [16]) = $6
	
.LABEL $label$4
	CALL memmove($6, [688], $7)
	$4 = *(($12 + [24]))
	
.LABEL $label$3
	CALL $132($6, ($6 + $4), $12)
	CALL $34(($12 + [32]), $1, ($12 + [16]), [1])
	if ( (*(($12 + [24])) <= [9]) ){ goto $label$7 }
	$1 = *($12 + [16])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $138($1)
	
.LABEL $label$7
	$4 = [0]
	$6 = *($12 + [32])
	if ( (((int_32)(*($12 + [36]) - $6) / (int_32)[12]) <= [2]) ){ goto $label$8 }
	CALL $140($2, $6)
	$1 = *($2)
	if ( (( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) ) == 0) ){ goto $label$12 }
	$1 = *($12 + [32])
	if ( ((uint_32)((int_32)(*($12 + [36]) - $1) / (int_32)[12]) <= (uint_32)[1]) ){ goto $label$1 }
	CALL $155($12, ($1 + [12]))
	$2 = ($1 & [1])
	$1 = *($12)
	if ( (( *($12 + [4]) ? uint_32($1 >> [1]) : $2 ) == 0) ){ goto $label$11 }
	$1 = ( *($12 + [8]) ? ($12 | [1]) : $2 )
	$7 = [-1]
	
.LOOP $label$13:
	$6 = ($1 + $7)
	$4 = ($7 + [1])
	$7 = $4
	if ( *(($6 + [1])) ){ goto $label$13 }
	$5 = (CASTING uint_64)(uint_32 $4)
	$9 = (int_64)0
	$8 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$14:
	$11 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$5) ){ goto $label$15 }
	$7 = *($1)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$7 = ($7 + [165])
	goto $label$16 
	
.LABEL $label$17
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$19 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$18 
	
.LABEL $label$19
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$18
	$1 = ($1 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$14 }
	*($3) = $10
	$4 = [1]
	if ( $2 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$4 = [0]
	goto $label$9 
	
.LABEL $label$11
	$4 = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $137(*($12 + [8]))
	
.LABEL $label$9
	$6 = *($12 + [32])
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$2 }
	$1 = *($12 + [36])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$21 }
	$7 = ([0] - $6)
	$1 = ($1 + [-12])
	
.LOOP $label$22:
	if ( ((*($1) & [1]) == 0) ){ goto $label$23 }
	CALL $137(*(($1 + [8])))
	
.LABEL $label$23
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $7) != (int_32)[-12]) ){ goto $label$22 }
	$1 = *($12 + [32])
	goto $label$20 
	
.LABEL $label$21
	$1 = $6
	
.LABEL $label$20
	*($12 + [36]) = $6
	CALL $137($1)
	
.LABEL $label$2
	*([0] + [4]) = ($12 + [48])
	return $4
	
.LABEL $label$1
	CALL $154(($12 + [32]))
	return (unreachable)
}

void .FUNC _ZN6random8xor_codeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$6 = *($3)
	$6 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ((int_32)$4 != (int_32)( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$1 }
	if ( ($4 == 0) ){ goto $label$1 }
	$6 = [0]
	$5 = ($2 + [4])
	
.LOOP $label$2:
	CALL $146($0, int_32((((int_32)*(CALL $143($2, $6)) ^ (int_32)*(CALL $143($3, $6))) << [24]) >> [24]))
	$4 = *($2)
	$6 = ($6 + [1])
	if ( ($6 <= ( *($5) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$2 }
	
.LABEL $label$1
}

void .FUNC _Z13binary2stringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($1)
	if ( (( *($1 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) == 0) ){ goto $label$1 }
	$3 = ($1 + [4])
	$4 = [0]
	
.LOOP $label$2:
	*((($5 + [16]) + [16])) = [0]
	*($5 + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5) = ((int_32)*(CALL $143($1, $4)) % (int_32)[16])
	CALL snprintf(($5 + [16]), [17], [432], $5)
	CALL $146($0, *($5 + [16]))
	$2 = *($1)
	$4 = ($4 + [1])
	if ( ($4 <= ( *($3) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}