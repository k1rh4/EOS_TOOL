(data (i32.const 8220) "failed to allocate pages\00onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8309) "missing required authority of _code or admin\00")
(data (i32.const 8354) "singleton does not exist\00")
(data (i32.const 8379) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8430) "error reading iterator\00")
(data (i32.const 8453) "object passed to modify is not in multi_index\00")
(data (i32.const 8499) "cannot modify objects in table of another contract\00")
(data (i32.const 8550) "cannot create objects in table of another contract\00")
(data (i32.const 8601) "current admin is \00")
(data (i32.const 8619) "content is too long!\00")
(data (i32.const 8640) "content is too short!\00")
(data (i32.const 8662) "too many videos attached\00")
(data (i32.const 8687) "too many photos attached\00")
(data (i32.const 8712) "comment is too long!\00")
(data (i32.const 8733) "invalid murmur id!\00")
(data (i32.const 8752) "invalid content id!\00")
(data (i32.const 8772) "cannot follow self!\00")
(data (i32.const 8792) "cannot unfollow self\00")
(data (i32.const 8813) "cannot whisper self!\00")
(data (i32.const 8834) "read\00")
(data (i32.const 8839) "get\00")
(data (i32.const 0) "\90\"\00\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "memset" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "eosio_exit" (func $fimport$2 (param i32)))
(import "env" "action_data_size" (func $fimport$3 (result i32)))
(import "env" "read_action_data" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$7))
(import "env" "has_auth" (func $fimport$8 (param i64) (result i32)))
(import "env" "prints" (func $fimport$9 (param i32)))
(import "env" "printn" (func $fimport$10 (param i64)))
(import "env" "memmove" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$12 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$13 (param i32 i32)))
(import "env" "__multf3" (func $fimport$14 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$15 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$16 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$17 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$18 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$23 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$25 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$26 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$30 (param i64)))
(import "env" "eosio_assert_code" (func $fimport$31 (param i32 i64)))
(import "env" "db_get_i64" (func $fimport$32 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$33 (result i64)))
(import "env" "db_store_i64" (func $fimport$34 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$35 (param i32 i64 i32 i32)))
(export "apply" (func $21))
(table $0 14 14 anyfunc)
(elem (i32.const 1) $22 $24 $26 $28 $30 $32 $34 $36 $38 $40 $42 $44 $46)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 8843))
(global $global$2 i32 (i32.const 8843))


void .FUNC $38 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL require_auth($1)
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [8379])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $48($0, $4)
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [8379])
	
.LABEL $label$2
	*($3) = $1
	CALL $84($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $85($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8430])
	
.LABEL $label$5
	$2 = CALL $1($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $8([24])) + [8]) = $0
	*($5) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8834])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)3631284043040948224
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = (int_64)3631284043040948224
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $86(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $10($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $43 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [136]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [120])) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = [0]
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $5)
	*($4 + [176]) = ($4 + [88])
	*($4 + [16]) = ($4 + [104])
	CALL $58(($4 + [16]), ($4 + [176]))
	*(($3 = ($4 + [8]))) = *($4 + [96])
	*($4) = *($4 + [88])
	$3 = *($3)
	*((($4 + [144]) + [8])) = $3
	*(($6 = (($4 + [160]) + [8]))) = $3
	$7 = *($4)
	*($4 + [160]) = $7
	*($4 + [144]) = $7
	$3 = *($6)
	*((($4 + [176]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [160])
	*($4 + [32]) = $0
	*($4 + [176]) = $0
	*(($4 + [56])) = $1
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*($4 + [48]) = $1
	$3 = ($4 + [48])
	$6 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)*(CALL $48($3, $6) + [8]) == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [8379])
	goto $label$4 
	
.LABEL $label$5
	*($4 + [176]) = $1
	CALL $49($3, ($4 + [176]), $1)
	
.LABEL $label$4
	*($4 + [180]) = ($4 + [136])
	*($4 + [176]) = ($4 + [16])
	CALL $59(($4 + [176]), ($4 + [104]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$3 = *(($4 + [72]))
	if ( ($3 == 0) ){ goto $label$7 }
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $10($5)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($4 + [72]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$7
	if ( ((*($4 + [116]) & [1]) == 0) ){ goto $label$12 }
	CALL $10(*(($4 + [124])))
	
.LABEL $label$12
	$global$0 = ($4 + [192])
	return [1]
}

void .FUNC $42 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	CALL require_auth($1)
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$2 }
	$3 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$3 = *($3 + [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 == (int_32)[64]), [8752])
}

int_32 .FUNC $41 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [224])
	$global$0 = $3
	*(($4 = $3) + [168]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [112]) + [24])) = (int_64)0
	*((($4 + [112]) + [32])) = (int_64)0
	*((($4 + [112]) + [48])) = [0]
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $5)
	*($4 + [208]) = ($4 + [96])
	*($4 + [24]) = ($4 + [112])
	CALL $67(($4 + [24]), ($4 + [208]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [104])
	*($4 + [8]) = *($4 + [96])
	$3 = *($3)
	*((($4 + [176]) + [8])) = $3
	*(($6 = (($4 + [192]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [192]) = $7
	*($4 + [176]) = $7
	$3 = *($6)
	*((($4 + [208]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [192])
	*($4 + [40]) = $0
	*($4 + [208]) = $0
	*(($4 + [64])) = $1
	*((($4 + [24]) + [48])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*($4 + [56]) = $1
	$3 = (($4 + [24]) + [32])
	$6 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)*(CALL $48($3, $6) + [8]) == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [8379])
	goto $label$4 
	
.LABEL $label$5
	*($4 + [208]) = $1
	CALL $49($3, ($4 + [208]), $1)
	
.LABEL $label$4
	*($4 + [212]) = ($4 + [168])
	*($4 + [208]) = ($4 + [24])
	CALL $68(($4 + [208]), ($4 + [112]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$3 = *(($4 + [80]))
	if ( ($3 == 0) ){ goto $label$7 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $10($5)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($4 + [80]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$7
	if ( (*($4 + [152]) & [1]) ){ goto $label$16 }
	if ( (*($4 + [140]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $10(*(($4 + [160])))
	if ( ((*($4 + [140]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $10(*(($4 + [148])))
	$2 = [1]
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$2 = [1]
	if ( (*($4 + [128]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	$global$0 = ($4 + [224])
	return $2
	
.LABEL $label$12
	CALL $10(*(($4 + [136])))
	$global$0 = ($4 + [224])
	return $2
}

void .FUNC $40 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	CALL require_auth($1)
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8813])
	$6 = [1]
	$7 = ($7 & [1])
	$7 = *($4)
	$9 = ($7 & [1])
	$7 = *($3)
	$8 = uint_32($7 >> [1])
	$10 = ( *($3 + [4]) ? $8 : $9 )
	if ( ((int_32)$10 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : $7 )) ){ goto $label$2 }
	$4 = ( *($4 + [8]) ? ($4 + [1]) : $7 )
	$7 = ($3 + [1])
	if ( $9 ){ goto $label$3 }
	if ( ($10 == 0) ){ goto $label$1 }
	$3 = ([0] - $8)
	$6 = [1]
	
.LOOP $label$4:
	if ( ((int_32)*($7) != (int_32)*($4)) ){ goto $label$2 }
	$4 = ($4 + [1])
	$7 = ($7 + [1])
	$3 = ($3 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	if ( ($10 == 0) ){ goto $label$1 }
	$6 = ((int_32)CALL $16(( *($3 + [8]) ? $7 : $9 ), $4, $10) != (int_32)[0])
	
.LABEL $label$2
	CALL eosio_assert($6, [8813])
	return 
	
.LABEL $label$1
	CALL eosio_assert([0], [8813])
}

int_32 .FUNC $47 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = [0]
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $7)
	*($4 + [160]) = ($4 + [88])
	*($4 + [16]) = ($4 + [104])
	CALL $66(($4 + [16]), ($4 + [160]))
	*(($3 = ($4 + [8]))) = *($4 + [96])
	*($4) = *($4 + [88])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($8 = (($4 + [144]) + [8]))) = $3
	$9 = *($4)
	*($4 + [144]) = $9
	*($4 + [128]) = $9
	$3 = *($8)
	*((($4 + [160]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [144])
	*($4 + [32]) = $0
	*($4 + [160]) = $0
	*(($4 + [56])) = $1
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*($4 + [48]) = $1
	$3 = ($4 + [48])
	$8 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)*(CALL $48($3, $8) + [8]) == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [8379])
	goto $label$4 
	
.LABEL $label$5
	*($4 + [160]) = $1
	CALL $49($3, ($4 + [160]), $1)
	
.LABEL $label$4
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$8 = *(($4 + [120]))
	$1 = *(($4 + [112]))
	$0 = *($4 + [104])
	if ( ($5 & [1]) ){ goto $label$10 }
	CALL void $3((int_32 $0), (int_64 $1), (int_64 $8), (int_32 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL void $3((int_32 $0), (int_64 $1), (int_64 $8), (int_32 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($2)
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$3 = ($4 + [76])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL $10($7)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [72]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($3) = $5
	CALL $10($2)
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $46 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	CALL require_auth($1)
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8772])
}

int_32 .FUNC $45 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [128])) = (int_64)0
	*((($4 + [112]) + [32])) = [0]
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $5)
	*($4 + [192]) = ($4 + [96])
	*($4 + [24]) = ($4 + [112])
	CALL $62(($4 + [24]), ($4 + [192]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [104])
	*($4 + [8]) = *($4 + [96])
	$3 = *($3)
	*((($4 + [160]) + [8])) = $3
	*(($6 = (($4 + [176]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [176]) = $7
	*($4 + [160]) = $7
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [176])
	*($4 + [40]) = $0
	*($4 + [192]) = $0
	*(($4 + [64])) = $1
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*($4 + [56]) = $1
	$3 = (($4 + [24]) + [32])
	$6 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)*(CALL $48($3, $6) + [8]) == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [8379])
	goto $label$4 
	
.LABEL $label$5
	*($4 + [192]) = $1
	CALL $49($3, ($4 + [192]), $1)
	
.LABEL $label$4
	*($4 + [196]) = ($4 + [152])
	*($4 + [192]) = ($4 + [24])
	CALL $63(($4 + [192]), ($4 + [112]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$3 = *(($4 + [80]))
	if ( ($3 == 0) ){ goto $label$7 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $10($5)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($4 + [80]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$7
	$3 = *($4 + [136])
	if ( ($3 == 0) ){ goto $label$12 }
	$6 = ($4 + [140])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$16 }
	CALL $10(*(($5 + [-4])))
	
.LABEL $label$16
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$15 }
	$2 = *(($4 + [136]))
	goto $label$13 
	
.LABEL $label$14
	$2 = $3
	
.LABEL $label$13
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$12
	if ( ((*($4 + [124]) & [1]) == 0) ){ goto $label$17 }
	CALL $10(*(($4 + [132])))
	
.LABEL $label$17
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $44 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	CALL require_auth($1)
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$2 }
	$3 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$3 = *($3 + [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 == (int_32)[64]), [8752])
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $1($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $1($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $9 (int_32 $0)
{
	return CALL $8($0)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $1($1)
	
.LABEL $label$2
	*(CALL $5()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $1(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $2($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $5())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $6($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $4 (int_32 $0)
{
}

int_32 .FUNC $5 ()
{
	return [8208]
}

void .FUNC $2 (int_32 $0)
{
}

void .FUNC $3 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

void .FUNC $0 ()
{
	CALL $3()
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8220])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	CALL $14($0, $1)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $17 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $10 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

void .FUNC $11 (int_32 $0)
{
	CALL $10($0)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $7(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $7(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	return CALL $12($0, $1)
}

void .FUNC $75 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [240])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [180]) = $2
	*($3 + [176]) = $2
	*($3 + [184]) = ($2 + $4)
	*($3 + [168]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8834])
	$2 = *($3 + [180])
	
.LABEL $label$5
	CALL memcpy(($3 + [168]), $2, [8])
	*($3 + [180]) = ($2 + [8])
	*($3 + [160]) = [0]
	*($3 + [152]) = (int_64)0
	CALL $51(($3 + [176]), ($3 + [152]))
	*($3 + [144]) = [0]
	*($3 + [136]) = (int_64)0
	CALL $51(($3 + [176]), ($3 + [136]))
	$2 = *($3 + [180])
	$4 = (($3 + [176]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [8834])
	$2 = *($3 + [180])
	
.LABEL $label$6
	CALL memcpy(($3 + [132]), $2, [4])
	*($3 + [180]) = (*($3 + [180]) + [4])
	*(($2 = (($3 + [40]) + [8]))) = *($4)
	*($3 + [40]) = *($3 + [176])
	$2 = *($2)
	*((($3 + [192]) + [8])) = $2
	*(($4 = (($3 + [208]) + [8]))) = $2
	$5 = *($3 + [40])
	*($3 + [208]) = $5
	*($3 + [192]) = $5
	$2 = *($4)
	*((($3 + [224]) + [8])) = $2
	*(($3 + [80])) = $2
	*($3 + [56]) = $0
	*($3 + [64]) = $1
	$0 = *($3 + [208])
	*($3 + [72]) = $0
	*($3 + [224]) = $0
	*(($3 + [96])) = $1
	*(($3 + [104])) = (int_64)-1
	*(($3 + [112])) = (int_64)0
	*(($3 + [120])) = [0]
	*($3 + [88]) = $1
	$2 = ($3 + [88])
	$4 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	if ( ((int_32)*(CALL $48($2, $4) + [8]) == (int_32)$2) ){ goto $label$7 }
	CALL eosio_assert([0], [8379])
	goto $label$7 
	
.LABEL $label$8
	*($3 + [224]) = $1
	CALL $49($2, ($3 + [224]), $1)
	
.LABEL $label$7
	$1 = *($3 + [168])
	$2 = CALL $18(($3 + [24]), ($3 + [152]))
	$4 = CALL $18(($3 + [8]), ($3 + [136]))
	CALL require_auth($1)
	$6 = *($4)
	CALL eosio_assert((( *($4 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) <= [257]), [8712])
	$6 = *($2)
	CALL eosio_assert(((int_32)( *($2 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) == (int_32)[64]), [8733])
	if ( (*($4) & [1]) ){ goto $label$17 }
	if ( (*($2) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $10(*($4 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL $10(*($2 + [8]))
	$6 = *(($3 + [112]))
	if ( ($6 == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = *(($3 + [112]))
	if ( $6 ){ goto $label$13 }
	
.LABEL $label$14
	$2 = [1]
	if ( (*($3 + [136]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$7 = ($3 + [116])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$21 }
	CALL $10($4)
	
.LABEL $label$21
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$20 }
	$2 = *(($3 + [112]))
	goto $label$18 
	
.LABEL $label$19
	$2 = $6
	
.LABEL $label$18
	*($7) = $6
	CALL $10($2)
	$2 = [1]
	if ( ((*($3 + [136]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $10(*(($3 + [144])))
	if ( ((*($3 + [152]) & $2) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( (*($3 + [152]) & $2) ){ goto $label$9 }
	
.LABEL $label$10
	$global$0 = ($3 + [240])
	return 
	
.LABEL $label$9
	CALL $10(*(($3 + [160])))
	$global$0 = ($3 + [240])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $8($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $8(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8834])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [8834])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $51(*($1), ($0 + [12]))
	$0 = ($0 + [24])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [8834])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [4])
	*(($1 = ($1 + [4]))) = (*($1) + [4])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $18($2, ($1 + [12]))
	$6 = *($1 + [24])
	$1 = *($0 + [4])
	$7 = *($1 + [4])
	$0 = (*($0) + int_32($7 >> [1]))
	$1 = *($1)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$7 = CALL $18(($2 + [16]), $5)
	CALL void $0((int_32 $4), (int_64 $3), (int_32 $7), (int_32 $6), (int_32 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($5) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($7 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($5 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_64 .FUNC $50 (int_32 $0)
{
	int_32 $1
	$1 = *(($0 + [28]))
	if ( ((int_32)$1 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$1 = *(($1 + [-24]))
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [8379])
	
.LABEL $label$4
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $48($0, $1)
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [8379])
	
.LABEL $label$2
	return *($1)
	
.LABEL $label$1
	CALL eosio_assert([0], [8354])
	return (unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $72($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $19($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $19($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $17($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $10($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8834])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	CALL $51(*($1), ($3 + [8]))
	CALL $64(*($1), ($3 + [20]))
	CALL $64(*($1), ($3 + [32]))
	$0 = ($3 + [44])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [8834])
	$3 = *(($1 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [4])
	*(($1 = ($1 + [4]))) = (*($1) + [4])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $18(($2 + [32]), ($1 + [8]))
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$5 = (*(($1 + [24])) - *($1 + [20]))
	$6 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$7 = CALL $8($5)
	*(($2 + [24])) = ($7 + ((int_32)$6 * (int_32)[12]))
	*($2 + [16]) = $7
	*($2 + [20]) = $7
	$6 = *(($1 + [24]))
	$5 = *(($1 + [20]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $18($7, $5)
	$7 = (*($2 + [20]) + [12])
	*($2 + [20]) = $7
	$5 = ($5 + [12])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$4 }
	
.LABEL $label$3
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$5 = (*(($1 + [36])) - *($1 + [32]))
	$6 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$1 }
	$7 = CALL $8($5)
	*(($2 + [8])) = ($7 + ((int_32)$6 * (int_32)[12]))
	*($2) = $7
	*($2 + [4]) = $7
	$6 = *(($1 + [36]))
	$5 = *(($1 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $18($7, $5)
	$7 = (*($2 + [4]) + [12])
	*($2 + [4]) = $7
	$5 = ($5 + [12])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = *($1 + [44])
	$5 = *($0 + [4])
	$1 = *($5 + [4])
	$7 = (*($0) + int_32($1 >> [1]))
	$5 = *($5)
	if ( (($1 & [1]) == 0) ){ goto $label$7 }
	$5 = *((*($7) + $5))
	
.LABEL $label$7
	$1 = CALL $18(($2 + [48]), $4)
	CALL void $7((int_32 $3), (int_64 $1), (int_32 ($2 + [16])), (int_32 $2), (int_32 $6), (int_32 $5))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$8 }
	CALL $10(*($1 + [8]))
	
.LABEL $label$8
	$6 = *($2)
	if ( ($6 == 0) ){ goto $label$9 }
	$7 = *($2 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($7 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$13 }
	CALL $10(*(($7 + [-4])))
	
.LABEL $label$13
	$7 = $5
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$12 }
	$5 = *($2)
	goto $label$10 
	
.LABEL $label$11
	$5 = $6
	
.LABEL $label$10
	*($2 + [4]) = $6
	CALL $10($5)
	
.LABEL $label$9
	$6 = *($2 + [16])
	if ( ($6 == 0) ){ goto $label$14 }
	$7 = *($2 + [20])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$16 }
	
.LOOP $label$17:
	$5 = ($7 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$18 }
	CALL $10(*(($7 + [-4])))
	
.LABEL $label$18
	$7 = $5
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$17 }
	$5 = *($2 + [16])
	goto $label$15 
	
.LABEL $label$16
	$5 = $6
	
.LABEL $label$15
	*($2 + [20]) = $6
	CALL $10($5)
	
.LABEL $label$14
	if ( ((*($4) & [1]) == 0) ){ goto $label$19 }
	CALL $10(*($4 + [8]))
	
.LABEL $label$19
	$global$0 = ($2 + [64])
	return (unreachable)
	
.LABEL $label$2
	CALL $20(($2 + [16]))
	
.LABEL $label$1
	CALL $20($2)
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8834])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	CALL $51(*($1), ($3 + [8]))
	CALL $51(*($1), ($3 + [20]))
	$0 = ($3 + [32])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [8834])
	$3 = *(($1 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [4])
	*(($1 = ($1 + [4]))) = (*($1) + [4])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL require_auth(CALL $50(($0 + [32])))
	$0 = *($2)
	if ( ($0 & [1]) ){ goto $label$2 }
	$2 = uint_32($0 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 == (int_32)[64]), [8752])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8834])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [8834])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	CALL $51(*($1), ($3 + [12]))
	CALL $51(*($1), ($3 + [24]))
	CALL $64(*($1), ($3 + [36]))
	CALL $64(*($1), ($3 + [48]))
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $18(($2 + [48]), ($1 + [12]))
	$6 = CALL $18(($2 + [32]), ($1 + [24]))
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$7 = (*(($1 + [40])) - *($1 + [36]))
	$8 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$6 }
	if ( ((uint_32)$8 >= (uint_32)[357913942]) ){ goto $label$5 }
	$9 = CALL $8($7)
	*(($2 + [24])) = ($9 + ((int_32)$8 * (int_32)[12]))
	*($2 + [16]) = $9
	*($2 + [20]) = $9
	$8 = *(($1 + [40]))
	$7 = *(($1 + [36]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	CALL $18($9, $7)
	$9 = (*($2 + [20]) + [12])
	*($2 + [20]) = $9
	$7 = ($7 + [12])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$7 = (*(($1 + [52])) - *($1 + [48]))
	$8 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$8 }
	if ( ((uint_32)$8 >= (uint_32)[357913942]) ){ goto $label$4 }
	$9 = CALL $8($7)
	*(($2 + [8])) = ($9 + ((int_32)$8 * (int_32)[12]))
	*($2) = $9
	*($2 + [4]) = $9
	$8 = *(($1 + [52]))
	$7 = *(($1 + [48]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$9:
	CALL $18($9, $7)
	$9 = (*($2 + [4]) + [12])
	*($2 + [4]) = $9
	$7 = ($7 + [12])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	$7 = *($0 + [4])
	$8 = *($7 + [4])
	$9 = (*($0) + int_32($8 >> [1]))
	$7 = *($7)
	if ( (($8 & [1]) == 0) ){ goto $label$10 }
	$7 = *((*($9) + $7))
	
.LABEL $label$10
	$1 = CALL $18(($2 + [64]), $6)
	$8 = CALL $18(($2 + [80]), $5)
	CALL void $9((int_32 $4), (int_64 $3), (int_32 $8), (int_32 $1), (int_32 ($2 + [16])), (int_32 $2), (int_32 $7))
	if ( (*($2 + [64]) & [1]) ){ goto $label$12 }
	if ( (*($2 + [80]) & [1]) ){ goto $label$11 }
	goto $label$3 
	
.LABEL $label$12
	CALL $10(*($1 + [8]))
	if ( ((*($2 + [80]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$11
	CALL $10(*($8 + [8]))
	$8 = *($2)
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $20(($2 + [16]))
	
.LABEL $label$4
	CALL $20($2)
	
.LABEL $label$3
	$8 = *($2)
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$9 = *($2 + [4])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$14 }
	
.LOOP $label$15:
	$7 = ($9 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$16 }
	CALL $10(*(($9 + [-4])))
	
.LABEL $label$16
	$9 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$15 }
	$7 = *($2)
	goto $label$13 
	
.LABEL $label$14
	$7 = $8
	
.LABEL $label$13
	*($2 + [4]) = $8
	CALL $10($7)
	
.LABEL $label$1
	$8 = *($2 + [16])
	if ( ($8 == 0) ){ goto $label$17 }
	$9 = *($2 + [20])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$19 }
	
.LOOP $label$20:
	$7 = ($9 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$21 }
	CALL $10(*(($9 + [-4])))
	
.LABEL $label$21
	$9 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$20 }
	$7 = *($2 + [16])
	goto $label$18 
	
.LABEL $label$19
	$7 = $8
	
.LABEL $label$18
	*($2 + [20]) = $8
	CALL $10($7)
	
.LABEL $label$17
	if ( (*($6) & [1]) ){ goto $label$24 }
	if ( (*($5) & [1]) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL $10(*($6 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL $10(*($5 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$22
	$global$0 = ($2 + [96])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $35 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [136]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [104]) + [8])) = (int_64)0
	*((($4 + [104]) + [24])) = [0]
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $5)
	$3 = $2
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [8834])
	$3 = *($4 + [92])
	
.LABEL $label$4
	CALL memcpy(($4 + [104]), $3, [4])
	*($4 + [92]) = ($3 + [4])
	CALL $51(($4 + [88]), (($4 + [104]) | [4]))
	CALL $64(($4 + [88]), ($4 + [120]))
	*(($3 = ($4 + [8]))) = *((($4 + [88]) + [8]))
	*($4) = *($4 + [88])
	$3 = *($3)
	*((($4 + [144]) + [8])) = $3
	*(($6 = (($4 + [160]) + [8]))) = $3
	$7 = *($4)
	*($4 + [160]) = $7
	*($4 + [144]) = $7
	$3 = *($6)
	*((($4 + [176]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [160])
	*($4 + [32]) = $0
	*($4 + [176]) = $0
	*(($4 + [56])) = $1
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*($4 + [48]) = $1
	$3 = ($4 + [48])
	$6 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	if ( ((int_32)*(CALL $48($3, $6) + [8]) == (int_32)$3) ){ goto $label$5 }
	CALL eosio_assert([0], [8379])
	goto $label$5 
	
.LABEL $label$6
	*($4 + [176]) = $1
	CALL $49($3, ($4 + [176]), $1)
	
.LABEL $label$5
	*($4 + [180]) = ($4 + [136])
	*($4 + [176]) = ($4 + [16])
	CALL $65(($4 + [176]), ($4 + [104]))
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL $2($2)
	
.LABEL $label$7
	$3 = *(($4 + [72]))
	if ( ($3 == 0) ){ goto $label$8 }
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $10($5)
	
.LABEL $label$12
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($4 + [72]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LABEL $label$9
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$8
	$3 = *($4 + [120])
	if ( ($3 == 0) ){ goto $label$13 }
	$6 = ($4 + [124])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$17 }
	CALL $10(*(($5 + [-4])))
	
.LABEL $label$17
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($4 + [120]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $3
	
.LABEL $label$14
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$13
	if ( ((*($4 + [108]) & [1]) == 0) ){ goto $label$18 }
	CALL $10(*(($4 + [116])))
	
.LABEL $label$18
	$global$0 = ($4 + [192])
	return [1]
}

int_32 .FUNC $29 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [96])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8834])
	
.LABEL $label$5
	$3 = ($2 + $7)
	CALL memcpy(($4 + [72]), $2, [8])
	$8 = ($2 + [8])
	$9 = (($4 + [72]) + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8834])
	
.LABEL $label$6
	CALL memcpy($9, $8, [8])
	*(($4 + [24])) = $3
	*(($4 + [40])) = $1
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*($4 + [16]) = $2
	*(($4 + [20])) = ($2 + [16])
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [32]) = $1
	$3 = ($4 + [32])
	$8 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	if ( ((int_32)*(CALL $48($3, $8) + [8]) == (int_32)$3) ){ goto $label$7 }
	CALL eosio_assert([0], [8379])
	goto $label$7 
	
.LABEL $label$8
	*($4 + [88]) = $1
	CALL $49($3, ($4 + [88]), $1)
	
.LABEL $label$7
	$3 = ($4 + int_32($5 >> [1]))
	$1 = *(($4 + [80]))
	$0 = *($4 + [72])
	if ( ($5 & [1]) ){ goto $label$13 }
	CALL void $3((int_32 $0), (int_64 $1), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL void $3((int_32 $0), (int_64 $1), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $2($2)
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$3 = ($4 + [60])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL $10($7)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($4 + [56]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $5
	
.LABEL $label$14
	*($3) = $5
	CALL $10($2)
	
.LABEL $label$9
	$global$0 = ($4 + [96])
	return [1]
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL require_auth($1)
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8792])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $18(($2 + [16]), ($1 + [8]))
	$5 = CALL $18($2, ($1 + [20]))
	$6 = *($1 + [32])
	$1 = *($0 + [4])
	$7 = *($1 + [4])
	$0 = (*($0) + int_32($7 >> [1]))
	$1 = *($1)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$8 = CALL $18(($2 + [32]), $5)
	$7 = CALL $18(($2 + [48]), $4)
	CALL void $0((int_32 $3), (int_64 $7), (int_32 $8), (int_32 $6), (int_32 $1))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $10(*($8 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $10(*($7 + [8]))
	$1 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($5) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($4) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($5 + [8]))
	if ( ((*($4) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($4 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$1 == (int_64)6138663577826885632), [8245])
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $4([0])
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$2
	if ( ((int_64)$2 <= (int_64)-3075276122726858753) ){ goto $label$16 }
	if ( ((int_64)$2 <= (int_64)4982293889137141647) ){ goto $label$15 }
	if ( ((int_64)$2 > (int_64)6711236938050830335) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)4982293889137141648) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)5378050719298004880) ){ goto $label$4 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [1]
	*($3 + [56]) = *($3 + [144])
	CALL $23($1, $1, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$16
	if ( ((int_64)$2 > (int_64)-5004470456023341169) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-7949130065016196608) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-7704843155780950528) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-7588796973935755264) ){ goto $label$4 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [2]
	*($3 + [24]) = *($3 + [176])
	CALL $25($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)-3075276122726858752) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-2063340587758649344) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-962908303141109760) ){ goto $label$4 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [3]
	*($3 + [32]) = *($3 + [168])
	CALL $27($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)-5004470456023341168) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4995815914371913840) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-3109936999818067968) ){ goto $label$4 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [4]
	*($3 + [88]) = *($3 + [112])
	CALL $29($1, $1, ($3 + [88]))
	CALL eosio_exit([0])
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)6711236938050830336) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)7111857579562631168) ){ goto $label$4 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [5]
	*($3 + [8]) = *($3 + [192])
	CALL $31($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$12
	*($3 + [164]) = [0]
	*($3 + [160]) = [6]
	*($3 + [40]) = *($3 + [160])
	CALL $33($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	*($3 + [132]) = [0]
	*($3 + [128]) = [7]
	*($3 + [72]) = *($3 + [128])
	CALL $35($1, $1, ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$10
	*($3 + [204]) = [0]
	*($3 + [200]) = [8]
	*($3) = *($3 + [200])
	CALL $37($1, $1, $3)
	CALL eosio_exit([0])
	
.LABEL $label$9
	*($3 + [188]) = [0]
	*($3 + [184]) = [9]
	*($3 + [16]) = *($3 + [184])
	CALL $39($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$8
	*($3 + [108]) = [0]
	*($3 + [104]) = [10]
	*($3 + [96]) = *($3 + [104])
	CALL $41($1, $1, ($3 + [96]))
	CALL eosio_exit([0])
	
.LABEL $label$7
	*($3 + [156]) = [0]
	*($3 + [152]) = [11]
	*($3 + [48]) = *($3 + [152])
	CALL $43($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [140]) = [0]
	*($3 + [136]) = [12]
	*($3 + [64]) = *($3 + [136])
	CALL $45($1, $1, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [124]) = [0]
	*($3 + [120]) = [13]
	*($3 + [80]) = *($3 + [120])
	CALL $47($1, $1, ($3 + [80]))
	
.LABEL $label$4
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $20 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [136]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [128])) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $5)
	*($4 + [176]) = ($4 + [96])
	*($4 + [24]) = ($4 + [112])
	CALL $60(($4 + [24]), ($4 + [176]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [104])
	*($4 + [8]) = *($4 + [96])
	$3 = *($3)
	*((($4 + [144]) + [8])) = $3
	*(($6 = (($4 + [160]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [160]) = $7
	*($4 + [144]) = $7
	$3 = *($6)
	*((($4 + [176]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [160])
	*($4 + [40]) = $0
	*($4 + [176]) = $0
	*(($4 + [64])) = $1
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*($4 + [56]) = $1
	$3 = ($4 + [56])
	$6 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)*(CALL $48($3, $6) + [8]) == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [8379])
	goto $label$4 
	
.LABEL $label$5
	*($4 + [176]) = $1
	CALL $49($3, ($4 + [176]), $1)
	
.LABEL $label$4
	*($4 + [180]) = ($4 + [136])
	*($4 + [176]) = ($4 + [24])
	CALL $61(($4 + [176]), ($4 + [112]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$3 = *(($4 + [80]))
	if ( ($3 == 0) ){ goto $label$7 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $10($5)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($4 + [80]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$7
	if ( ((*($4 + [124]) & [1]) == 0) ){ goto $label$12 }
	CALL $10(*(($4 + [132])))
	
.LABEL $label$12
	$global$0 = ($4 + [192])
	return [1]
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	CALL require_auth($1)
	$4 = *($3)
	if ( ($4 & [1]) ){ goto $label$2 }
	$3 = uint_32($4 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$3 = *($3 + [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 == (int_32)[64]), [8752])
}

int_32 .FUNC $25 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [120])) = (int_64)0
	*((($4 + [104]) + [24])) = (int_64)0
	*((($4 + [104]) + [40])) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $5)
	*($4 + [192]) = ($4 + [88])
	*($4 + [16]) = ($4 + [104])
	CALL $52(($4 + [16]), ($4 + [192]))
	*(($3 = ($4 + [8]))) = *($4 + [96])
	*($4) = *($4 + [88])
	$3 = *($3)
	*((($4 + [160]) + [8])) = $3
	*(($6 = (($4 + [176]) + [8]))) = $3
	$7 = *($4)
	*($4 + [176]) = $7
	*($4 + [160]) = $7
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [176])
	*($4 + [32]) = $0
	*($4 + [192]) = $0
	*((($4 + [16]) + [40])) = $1
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*($4 + [48]) = $1
	$3 = ($4 + [48])
	$6 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)*(CALL $48($3, $6) + [8]) == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [8379])
	goto $label$4 
	
.LABEL $label$5
	*($4 + [192]) = $1
	CALL $49($3, ($4 + [192]), $1)
	
.LABEL $label$4
	*($4 + [196]) = ($4 + [152])
	*($4 + [192]) = ($4 + [16])
	CALL $53(($4 + [192]), ($4 + [104]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$3 = *(($4 + [72]))
	if ( ($3 == 0) ){ goto $label$7 }
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $10($5)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($4 + [72]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$7
	$3 = *($4 + [136])
	if ( ($3 == 0) ){ goto $label$12 }
	$6 = ($4 + [140])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$16 }
	CALL $10(*(($5 + [-4])))
	
.LABEL $label$16
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$15 }
	$2 = *(($4 + [136]))
	goto $label$13 
	
.LABEL $label$14
	$2 = $3
	
.LABEL $label$13
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$12
	$3 = *($4 + [124])
	if ( ($3 == 0) ){ goto $label$17 }
	$6 = ($4 + [128])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$21 }
	CALL $10(*(($5 + [-4])))
	
.LABEL $label$21
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$20 }
	$2 = *(($4 + [124]))
	goto $label$18 
	
.LABEL $label$19
	$2 = $3
	
.LABEL $label$18
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$17
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$22 }
	CALL $10(*(($4 + [120])))
	
.LABEL $label$22
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $24 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	CALL require_auth($1)
	$6 = *($2)
	if ( ($6 & [1]) ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($6 <= [257]), [8619])
	$6 = *($2)
	if ( ($6 & [1]) ){ goto $label$4 }
	$2 = uint_32($6 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$2 = *($2 + [4])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [8640])
	CALL eosio_assert((((int_32)(*($4 + [4]) - *($4)) / (int_32)[12]) <= [11]), [8662])
	CALL eosio_assert((((int_32)(*($3 + [4]) - *($3)) / (int_32)[12]) <= [11]), [8687])
}

int_32 .FUNC $27 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [128])) = (int_64)0
	*((($4 + [112]) + [24])) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [144]) = [0]
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $5)
	*($4 + [192]) = ($4 + [96])
	*($4 + [24]) = ($4 + [112])
	CALL $54(($4 + [24]), ($4 + [192]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [104])
	*($4 + [8]) = *($4 + [96])
	$3 = *($3)
	*((($4 + [160]) + [8])) = $3
	*(($6 = (($4 + [176]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [176]) = $7
	*($4 + [160]) = $7
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [176])
	*($4 + [40]) = $0
	*($4 + [192]) = $0
	*(($4 + [64])) = $1
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*($4 + [56]) = $1
	$3 = ($4 + [56])
	$6 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)*(CALL $48($3, $6) + [8]) == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [8379])
	goto $label$4 
	
.LABEL $label$5
	*($4 + [192]) = $1
	CALL $49($3, ($4 + [192]), $1)
	
.LABEL $label$4
	*($4 + [196]) = ($4 + [152])
	*($4 + [192]) = ($4 + [24])
	CALL $55(($4 + [192]), ($4 + [112]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$3 = *(($4 + [80]))
	if ( ($3 == 0) ){ goto $label$7 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $10($5)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($4 + [80]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$7
	if ( ((*($4 + [132]) & [1]) == 0) ){ goto $label$12 }
	CALL $10(*(($4 + [140])))
	
.LABEL $label$12
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$13 }
	CALL $10(*(($4 + [128])))
	
.LABEL $label$13
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $26 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	CALL require_auth($1)
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$2 }
	$3 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$3 = *($3 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($3 <= [257]), [8712])
	$3 = *($2)
	if ( ($3 & [1]) ){ goto $label$4 }
	$2 = uint_32($3 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$2 = *($2 + [4])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$2 == (int_32)[64]), [8733])
}

void .FUNC $69 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [80]) = (int_64)0
	$5 = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8834])
	
.LABEL $label$5
	CALL memcpy(($3 + [80]), $2, [8])
	*(($3 + [28])) = ($2 + [8])
	*(($3 + [32])) = $5
	*(($3 + [48])) = $1
	*(($3 + [56])) = (int_64)-1
	*(($3 + [64])) = (int_64)0
	*(($3 + [72])) = [0]
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	*($3 + [40]) = $1
	$2 = ($3 + [40])
	$4 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	if ( ((int_32)*(CALL $48($2, $4) + [8]) == (int_32)$2) ){ goto $label$6 }
	CALL eosio_assert([0], [8379])
	goto $label$6 
	
.LABEL $label$7
	*($3 + [88]) = $1
	CALL $49($2, ($3 + [88]), $1)
	
.LABEL $label$6
	$1 = *($3 + [80])
	$0 = CALL $50($2)
	$4 = [1]
	$5 = ($3 + [16])
	if ( CALL has_auth(*($5)) ){ goto $label$8 }
	$4 = CALL has_auth($0)
	
.LABEL $label$8
	CALL eosio_assert($4, [8309])
	*($3 + [88]) = $1
	CALL $49($2, ($3 + [88]), *($5))
	$5 = *(($3 + [64]))
	if ( ($5 == 0) ){ goto $label$9 }
	$6 = ($3 + [68])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$12 }
	$2 = *(($3 + [64]))
	goto $label$10 
	
.LABEL $label$11
	$2 = $5
	
.LABEL $label$10
	*($6) = $5
	CALL $10($2)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	$1 = CALL $18($2, ($1 + [40]))
	$4 = CALL $18(($2 + [16]), ($1 + [28]))
	$3 = CALL $18(($2 + [32]), ($1 + [16]))
	CALL $87($0, *($1), *($1 + [8]), $3, $4, $1)
	if ( (*($1) & [1]) ){ goto $label$5 }
	if ( (*($4) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $10(*($1 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL $10(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	CALL $10(*($3 + [8]))
	$global$0 = ($2 + [48])
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $18(($2 + [16]), ($1 + [4]))
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$5 = (*(($1 + [20])) - *($1 + [16]))
	$6 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$1 }
	$7 = CALL $8($5)
	*(($2 + [8])) = ($7 + ((int_32)$6 * (int_32)[12]))
	*($2) = $7
	*($2 + [4]) = $7
	$1 = *(($1 + [20]))
	$5 = *(($1 + [16]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $18($7, $5)
	$7 = (*($2 + [4]) + [12])
	*($2 + [4]) = $7
	$5 = ($5 + [12])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$5 = *($0 + [4])
	$1 = *($5 + [4])
	$7 = (*($0) + int_32($1 >> [1]))
	$5 = *($5)
	if ( (($1 & [1]) == 0) ){ goto $label$4 }
	$5 = *((*($7) + $5))
	
.LABEL $label$4
	$1 = CALL $18(($2 + [32]), $4)
	CALL void $7((int_32 $3), (int_32 $1), (int_32 $2), (int_32 $5))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $10(*($1 + [8]))
	
.LABEL $label$5
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$6 }
	$7 = *($2 + [4])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($7 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($7 + [-4])))
	
.LABEL $label$10
	$7 = $5
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$9 }
	$5 = *($2)
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($2 + [4]) = $1
	CALL $10($5)
	
.LABEL $label$6
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL $10(*($4 + [8]))
	
.LABEL $label$11
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $20($2)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8839])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$5 = *($1)
	$7 = *($1 + [4])
	$6 = ((int_32)($7 - $5) / (int_32)[12])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $74($1, ($2 - $6))
	$7 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$6 = ($5 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($7 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*(($7 + [-4])))
	
.LABEL $label$9
	$7 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	*(($1 + [4])) = $6
	$7 = $6
	
.LABEL $label$6
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$10:
	CALL $51($0, $2)
	$2 = ($2 + [12])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$10 }
	
.LABEL $label$3
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8834])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8834])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	CALL $51(*($1), ($3 + [16]))
	CALL $51(*($1), ($3 + [28]))
	CALL $51(*($1), ($3 + [40]))
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8834])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8834])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($4 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [8834])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [4])
	*(($1 = ($1 + [4]))) = (*($1) + [4])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$1 = CALL $18($2, ($1 + [12]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$5 = CALL $18(($2 + [16]), $1)
	CALL void $6((int_32 $4), (int_64 $3), (int_32 $5), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8834])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [8834])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $51(*($1), ($4 + [12]))
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $18(($2 + [16]), ($1 + [12]))
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$6 = (*(($1 + [28])) - *($1 + [24]))
	$7 = ((int_32)$6 / (int_32)[12])
	if ( ($6 == 0) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[357913942]) ){ goto $label$1 }
	$8 = CALL $8($6)
	*(($2 + [8])) = ($8 + ((int_32)$7 * (int_32)[12]))
	*($2) = $8
	*($2 + [4]) = $8
	$1 = *(($1 + [28]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $18($8, $6)
	$8 = (*($2 + [4]) + [12])
	*($2 + [4]) = $8
	$6 = ($6 + [12])
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$6 = *($0 + [4])
	$1 = *($6 + [4])
	$8 = (*($0) + int_32($1 >> [1]))
	$6 = *($6)
	if ( (($1 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	$1 = CALL $18(($2 + [32]), $5)
	CALL void $8((int_32 $4), (int_64 $3), (int_32 $1), (int_32 $2), (int_32 $6))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $10(*($1 + [8]))
	
.LABEL $label$5
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$6 }
	$8 = *($2 + [4])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = ($8 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($8 + [-4])))
	
.LABEL $label$10
	$8 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$9 }
	$6 = *($2)
	goto $label$7 
	
.LABEL $label$8
	$6 = $1
	
.LABEL $label$7
	*($2 + [4]) = $1
	CALL $10($6)
	
.LABEL $label$6
	if ( ((*($5) & [1]) == 0) ){ goto $label$11 }
	CALL $10(*($5 + [8]))
	
.LABEL $label$11
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $20($2)
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8834])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [8834])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $51(*($1), ($0 + [12]))
	CALL $64(*($1), ($0 + [24]))
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $8($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $20($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = ($global$0 - [48])
	$global$0 = $6
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$8 = (*($0) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($8) + $0))
	
.LABEL $label$1
	$5 = CALL $18($6, $5)
	$4 = CALL $18(($6 + [16]), $4)
	$3 = CALL $18(($6 + [32]), $3)
	CALL void $8((int_32 $1), (int_64 $2), (int_64 $3), (int_32 $4), (int_32 $5), (int_32 $0))
	if ( (*($5) & [1]) ){ goto $label$6 }
	if ( (*($4) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $10(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $10(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($3) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($6 + [48])
	return 
	
.LABEL $label$2
	CALL $10(*($3 + [8]))
	$global$0 = ($6 + [48])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $20($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [8550])
	
.LABEL $label$1
	*(($5 = CALL $8([24])) + [8]) = $1
	*($5) = (int_64)0
	*($5) = *(*($3))
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)3631284043040948224, $2, (int_64)3631284043040948224, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3631284043040948224) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)3631284043040948225
	
.LABEL $label$2
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)3631284043040948224
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)3631284043040948224
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $86(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $10($1)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8453])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8499])
	
.LABEL $label$2
	*($1) = *(*($3))
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $3, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)3631284043040948224) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)3631284043040948225
	
.LABEL $label$3
	$global$0 = $5
}

void .FUNC $83 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [272])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [212]) = $2
	*($3 + [208]) = $2
	$5 = ($2 + $4)
	*($3 + [216]) = $5
	*($3 + [200]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8834])
	$5 = *(($3 + [216]))
	$2 = *($3 + [212])
	
.LABEL $label$5
	CALL memcpy(($3 + [200]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [212]) = $2
	*($3 + [192]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8834])
	$2 = *($3 + [212])
	
.LABEL $label$6
	CALL memcpy(($3 + [192]), $2, [8])
	*($3 + [212]) = ($2 + [8])
	*($3 + [184]) = [0]
	*($3 + [176]) = (int_64)0
	CALL $51(($3 + [208]), ($3 + [176]))
	*($3 + [168]) = [0]
	*($3 + [160]) = (int_64)0
	CALL $51(($3 + [208]), ($3 + [160]))
	*($3 + [152]) = [0]
	*($3 + [144]) = (int_64)0
	CALL $51(($3 + [208]), ($3 + [144]))
	*(($2 = (($3 + [56]) + [8]))) = *((($3 + [208]) + [8]))
	*($3 + [56]) = *($3 + [208])
	$2 = *($2)
	*((($3 + [224]) + [8])) = $2
	*(($4 = (($3 + [240]) + [8]))) = $2
	$6 = *($3 + [56])
	*($3 + [240]) = $6
	*($3 + [224]) = $6
	$2 = *($4)
	*((($3 + [256]) + [8])) = $2
	*(($3 + [96])) = $2
	*($3 + [72]) = $0
	*($3 + [80]) = $1
	$0 = *($3 + [240])
	*($3 + [88]) = $0
	*($3 + [256]) = $0
	*(($3 + [112])) = $1
	*(($3 + [120])) = (int_64)-1
	*(($3 + [128])) = (int_64)0
	*(($3 + [136])) = [0]
	*($3 + [104]) = $1
	$2 = ($3 + [104])
	$4 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	if ( ((int_32)*(CALL $48($2, $4) + [8]) == (int_32)$2) ){ goto $label$7 }
	CALL eosio_assert([0], [8379])
	goto $label$7 
	
.LABEL $label$8
	*($3 + [256]) = $1
	CALL $49($2, ($3 + [256]), $1)
	
.LABEL $label$7
	$5 = CALL $18(($3 + [8]), ($3 + [144]))
	$4 = CALL $18(($3 + [24]), ($3 + [160]))
	$2 = CALL $18(($3 + [40]), ($3 + [176]))
	CALL $40(($3 + [72]), *($3 + [200]), *($3 + [192]), $2, $4, $5)
	if ( (*($5) & [1]) ){ goto $label$21 }
	if ( (*($4) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL $10(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL $10(*($4 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( (*($2) & [1]) ){ goto $label$17 }
	
.LABEL $label$18
	$5 = *(($3 + [128]))
	if ( $5 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $10(*($2 + [8]))
	$5 = *(($3 + [128]))
	if ( ($5 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$7 = ($3 + [132])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$23 }
	
.LOOP $label$24:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL $10($4)
	
.LABEL $label$25
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$24 }
	$2 = *(($3 + [128]))
	goto $label$22 
	
.LABEL $label$23
	$2 = $5
	
.LABEL $label$22
	*($7) = $5
	CALL $10($2)
	$2 = [1]
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$2 = [1]
	if ( (*($3 + [144]) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($3 + [160]) & $2) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $10(*(($3 + [152])))
	if ( ((*($3 + [160]) & $2) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $10(*(($3 + [168])))
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( (*($3 + [176]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	$global$0 = ($3 + [272])
	return 
	
.LABEL $label$9
	CALL $10(*(($3 + [184])))
	$global$0 = ($3 + [272])
}

void .FUNC $82 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [80]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8834])
	
.LABEL $label$5
	$5 = ($2 + $4)
	CALL memcpy(($3 + [80]), $2, [8])
	*($3 + [72]) = (int_64)0
	$6 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8834])
	
.LABEL $label$6
	CALL memcpy(($3 + [72]), $6, [8])
	*(($3 + [24])) = $5
	*(($3 + [40])) = $1
	*(($3 + [48])) = (int_64)-1
	*(($3 + [56])) = (int_64)0
	*(($3 + [64])) = [0]
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [16])
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [32]) = $1
	$2 = ($3 + [32])
	$4 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	if ( ((int_32)*(CALL $48($2, $4) + [8]) == (int_32)$2) ){ goto $label$7 }
	CALL eosio_assert([0], [8379])
	goto $label$7 
	
.LABEL $label$8
	*($3 + [88]) = $1
	CALL $49($2, ($3 + [88]), $1)
	
.LABEL $label$7
	$1 = *($3 + [72])
	$0 = *($3 + [80])
	CALL require_auth($0)
	CALL eosio_assert(((int_64)$0 != (int_64)$1), [8792])
	$5 = *(($3 + [56]))
	if ( ($5 == 0) ){ goto $label$9 }
	$6 = ($3 + [60])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$12 }
	$2 = *(($3 + [56]))
	goto $label$10 
	
.LABEL $label$11
	$2 = $5
	
.LABEL $label$10
	*($6) = $5
	CALL $10($2)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
}

void .FUNC $81 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [96]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8834])
	
.LABEL $label$5
	CALL memcpy(($3 + [96]), $2, [8])
	*($3 + [88]) = (int_64)0
	$5 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8834])
	
.LABEL $label$6
	$6 = ($2 + $4)
	CALL memcpy(($3 + [88]), $5, [8])
	$5 = ($2 + [16])
	if ( ((int_32)($4 & [-4]) != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [8834])
	
.LABEL $label$7
	CALL memcpy(($3 + [84]), $5, [4])
	*(($3 + [32])) = $6
	*(($3 + [48])) = $1
	*(($3 + [56])) = (int_64)-1
	*(($3 + [64])) = (int_64)0
	*(($3 + [72])) = [0]
	*($3 + [24]) = $2
	*((($3 + [8]) + [20])) = ($2 + [20])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [40]) = $1
	$2 = ($3 + [40])
	$4 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	if ( ((int_32)*(CALL $48($2, $4) + [8]) == (int_32)$2) ){ goto $label$8 }
	CALL eosio_assert([0], [8379])
	goto $label$8 
	
.LABEL $label$9
	*($3 + [104]) = $1
	CALL $49($2, ($3 + [104]), $1)
	
.LABEL $label$8
	$1 = *($3 + [88])
	$0 = *($3 + [96])
	CALL require_auth($0)
	CALL eosio_assert(((int_64)$0 != (int_64)$1), [8772])
	$5 = *(($3 + [64]))
	if ( ($5 == 0) ){ goto $label$10 }
	$6 = ($3 + [68])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL $10($4)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($3 + [64]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($6) = $5
	CALL $10($2)
	
.LABEL $label$10
	$global$0 = ($3 + [112])
}

void .FUNC $80 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [148]) = $2
	*($3 + [144]) = $2
	*($3 + [152]) = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [8834])
	$2 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [140]), $2, [4])
	*($3 + [148]) = ($2 + [4])
	*($3 + [136]) = [0]
	*($3 + [128]) = (int_64)0
	CALL $51(($3 + [144]), ($3 + [128]))
	*($3 + [120]) = [0]
	*($3 + [112]) = (int_64)0
	CALL $64(($3 + [144]), ($3 + [112]))
	*(($2 = (($3 + [24]) + [8]))) = *((($3 + [144]) + [8]))
	*($3 + [24]) = *($3 + [144])
	$2 = *($2)
	*((($3 + [160]) + [8])) = $2
	*(($4 = (($3 + [176]) + [8]))) = $2
	$5 = *($3 + [24])
	*($3 + [176]) = $5
	*($3 + [160]) = $5
	$2 = *($4)
	*((($3 + [192]) + [8])) = $2
	*(($3 + [64])) = $2
	*($3 + [40]) = $0
	*($3 + [48]) = $1
	$0 = *($3 + [176])
	*($3 + [56]) = $0
	*($3 + [192]) = $0
	*(($3 + [80])) = $1
	*(($3 + [88])) = (int_64)-1
	*(($3 + [96])) = (int_64)0
	*(($3 + [104])) = [0]
	*($3 + [72]) = $1
	$4 = ($3 + [72])
	$2 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	if ( ((int_32)*(CALL $48($4, $2) + [8]) == (int_32)$4) ){ goto $label$6 }
	CALL eosio_assert([0], [8379])
	goto $label$6 
	
.LABEL $label$7
	*($3 + [192]) = $1
	CALL $49($4, ($3 + [192]), $1)
	
.LABEL $label$6
	$2 = CALL $18(($3 + [8]), ($3 + [128]))
	CALL require_auth(CALL $50($4))
	$4 = *($2)
	CALL eosio_assert(((int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) == (int_32)[64]), [8752])
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL $10(*($2 + [8]))
	
.LABEL $label$8
	$6 = *(($3 + [96]))
	if ( ($6 == 0) ){ goto $label$9 }
	$7 = ($3 + [100])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$12 }
	$2 = *(($3 + [96]))
	goto $label$10 
	
.LABEL $label$11
	$2 = $6
	
.LABEL $label$10
	*($7) = $6
	CALL $10($2)
	
.LABEL $label$9
	$6 = *($3 + [112])
	if ( ($6 == 0) ){ goto $label$14 }
	$4 = *($3 + [116])
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($4 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$18 }
	CALL $10(*(($4 + [-4])))
	
.LABEL $label$18
	$4 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$17 }
	$2 = *($3 + [112])
	goto $label$15 
	
.LABEL $label$16
	$2 = $6
	
.LABEL $label$15
	*($3 + [116]) = $6
	CALL $10($2)
	
.LABEL $label$14
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$19 }
	CALL $10(*(($3 + [136])))
	
.LABEL $label$19
	$global$0 = ($3 + [208])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8839])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $88($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8834])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $73 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [240])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [180]) = $2
	*($3 + [176]) = $2
	*($3 + [184]) = ($2 + $4)
	*($3 + [168]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8834])
	$2 = *($3 + [180])
	
.LABEL $label$5
	CALL memcpy(($3 + [168]), $2, [8])
	*($3 + [180]) = (*($3 + [180]) + [8])
	*($3 + [160]) = [0]
	*($3 + [152]) = (int_64)0
	CALL $51(($3 + [176]), ($3 + [152]))
	*($3 + [144]) = [0]
	*($3 + [136]) = (int_64)0
	CALL $64(($3 + [176]), ($3 + [136]))
	*($3 + [128]) = [0]
	*($3 + [120]) = (int_64)0
	CALL $64(($3 + [176]), ($3 + [120]))
	$2 = *($3 + [180])
	$4 = (($3 + [176]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [8834])
	$2 = *($3 + [180])
	
.LABEL $label$6
	CALL memcpy(($3 + [116]), $2, [4])
	*($3 + [180]) = (*($3 + [180]) + [4])
	*(($2 = (($3 + [24]) + [8]))) = *($4)
	*($3 + [24]) = *($3 + [176])
	$2 = *($2)
	*((($3 + [192]) + [8])) = $2
	*(($4 = (($3 + [208]) + [8]))) = $2
	$5 = *($3 + [24])
	*($3 + [208]) = $5
	*($3 + [192]) = $5
	$2 = *($4)
	*((($3 + [224]) + [8])) = $2
	*(($3 + [64])) = $2
	*($3 + [40]) = $0
	*($3 + [48]) = $1
	$0 = *($3 + [208])
	*($3 + [56]) = $0
	*($3 + [224]) = $0
	*(($3 + [80])) = $1
	*(($3 + [88])) = (int_64)-1
	*(($3 + [96])) = (int_64)0
	*(($3 + [104])) = [0]
	*($3 + [72]) = $1
	$2 = ($3 + [72])
	$4 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	if ( ((int_32)*(CALL $48($2, $4) + [8]) == (int_32)$2) ){ goto $label$7 }
	CALL eosio_assert([0], [8379])
	goto $label$7 
	
.LABEL $label$8
	*($3 + [224]) = $1
	CALL $49($2, ($3 + [224]), $1)
	
.LABEL $label$7
	$1 = *($3 + [168])
	$2 = CALL $18(($3 + [8]), ($3 + [152]))
	CALL require_auth($1)
	$4 = *($2)
	CALL eosio_assert((( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) <= [257]), [8619])
	$4 = *($2)
	CALL eosio_assert(((int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) != (int_32)[0]), [8640])
	CALL eosio_assert((((int_32)(*($3 + [124]) - *($3 + [120])) / (int_32)[12]) <= [11]), [8662])
	CALL eosio_assert((((int_32)(*($3 + [140]) - *($3 + [136])) / (int_32)[12]) <= [11]), [8687])
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*($2 + [8]))
	
.LABEL $label$9
	$6 = *(($3 + [96]))
	if ( ($6 == 0) ){ goto $label$10 }
	$7 = ($3 + [100])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL $10($4)
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($3 + [96]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $6
	
.LABEL $label$11
	*($7) = $6
	CALL $10($2)
	
.LABEL $label$10
	$6 = *($3 + [120])
	if ( ($6 == 0) ){ goto $label$15 }
	$4 = *($3 + [124])
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$17 }
	
.LOOP $label$18:
	$2 = ($4 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$19 }
	CALL $10(*(($4 + [-4])))
	
.LABEL $label$19
	$4 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$18 }
	$2 = *($3 + [120])
	goto $label$16 
	
.LABEL $label$17
	$2 = $6
	
.LABEL $label$16
	*($3 + [124]) = $6
	CALL $10($2)
	
.LABEL $label$15
	$6 = *($3 + [136])
	if ( ($6 == 0) ){ goto $label$20 }
	$4 = *($3 + [140])
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$22 }
	
.LOOP $label$23:
	$2 = ($4 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$24 }
	CALL $10(*(($4 + [-4])))
	
.LABEL $label$24
	$4 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$23 }
	$2 = *($3 + [136])
	goto $label$21 
	
.LABEL $label$22
	$2 = $6
	
.LABEL $label$21
	*($3 + [140]) = $6
	CALL $10($2)
	
.LABEL $label$20
	if ( ((*($3 + [152]) & [1]) == 0) ){ goto $label$25 }
	CALL $10(*(($3 + [160])))
	
.LABEL $label$25
	$global$0 = ($3 + [240])
}

void .FUNC $70 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [20])) = $4
	*(($3 + [24])) = ($4 + $5)
	*(($3 + [40])) = $1
	*(($3 + [48])) = (int_64)-1
	*(($3 + [56])) = (int_64)0
	*(($3 + [64])) = [0]
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $4
	*($3 + [32]) = $1
	$4 = ($3 + [32])
	$5 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)*(CALL $48($4, $5) + [8]) == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert([0], [8379])
	goto $label$4 
	
.LABEL $label$5
	*($3 + [72]) = $1
	CALL $49($4, ($3 + [72]), $1)
	
.LABEL $label$4
	$1 = CALL $50($4)
	CALL prints([8601])
	CALL printn($1)
	$2 = *(($3 + [56]))
	if ( ($2 == 0) ){ goto $label$6 }
	$6 = ($3 + [60])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	CALL $10($5)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($3 + [56]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $2
	
.LABEL $label$7
	*($6) = $2
	CALL $10($4)
	
.LABEL $label$6
	$global$0 = ($3 + [80])
}

void .FUNC $71 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [132]) = $2
	*($3 + [128]) = $2
	*($3 + [136]) = ($2 + $4)
	*($3 + [120]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8834])
	$2 = *($3 + [132])
	
.LABEL $label$5
	CALL memcpy(($3 + [120]), $2, [8])
	*($3 + [132]) = ($2 + [8])
	*($3 + [112]) = [0]
	*($3 + [104]) = (int_64)0
	CALL $51(($3 + [128]), ($3 + [104]))
	*(($2 = (($3 + [16]) + [8]))) = *((($3 + [128]) + [8]))
	*($3 + [16]) = *($3 + [128])
	$2 = *($2)
	*((($3 + [144]) + [8])) = $2
	*(($4 = (($3 + [160]) + [8]))) = $2
	$5 = *($3 + [16])
	*($3 + [160]) = $5
	*($3 + [144]) = $5
	$2 = *($4)
	*((($3 + [176]) + [8])) = $2
	*(($3 + [56])) = $2
	*($3 + [32]) = $0
	*($3 + [40]) = $1
	$0 = *($3 + [160])
	*($3 + [48]) = $0
	*($3 + [176]) = $0
	*(($3 + [72])) = $1
	*(($3 + [80])) = (int_64)-1
	*(($3 + [88])) = (int_64)0
	*(($3 + [96])) = [0]
	*($3 + [64]) = $1
	$2 = ($3 + [64])
	$4 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	if ( ((int_32)*(CALL $48($2, $4) + [8]) == (int_32)$2) ){ goto $label$6 }
	CALL eosio_assert([0], [8379])
	goto $label$6 
	
.LABEL $label$7
	*($3 + [176]) = $1
	CALL $49($2, ($3 + [176]), $1)
	
.LABEL $label$6
	$1 = *($3 + [120])
	$2 = CALL $18($3, ($3 + [104]))
	CALL require_auth($1)
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL $10(*($2 + [8]))
	
.LABEL $label$8
	$6 = *(($3 + [88]))
	if ( ($6 == 0) ){ goto $label$9 }
	$7 = ($3 + [92])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$12 }
	$2 = *(($3 + [88]))
	goto $label$10 
	
.LABEL $label$11
	$2 = $6
	
.LABEL $label$10
	*($7) = $6
	CALL $10($2)
	
.LABEL $label$9
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$14 }
	CALL $10(*(($3 + [112])))
	
.LABEL $label$14
	$global$0 = ($3 + [192])
}

void .FUNC $76 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [256])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [196]) = $2
	*($3 + [192]) = $2
	*($3 + [200]) = ($2 + $4)
	*($3 + [184]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8834])
	$2 = *($3 + [196])
	
.LABEL $label$5
	CALL memcpy(($3 + [184]), $2, [8])
	$2 = (*($3 + [196]) + [8])
	*($3 + [196]) = $2
	$4 = (($3 + [192]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [8834])
	$2 = *($3 + [196])
	
.LABEL $label$6
	CALL memcpy(($3 + [180]), $2, [4])
	*($3 + [196]) = (*($3 + [196]) + [4])
	*($3 + [176]) = [0]
	*($3 + [168]) = (int_64)0
	CALL $51(($3 + [192]), ($3 + [168]))
	*($3 + [160]) = [0]
	*($3 + [152]) = (int_64)0
	CALL $51(($3 + [192]), ($3 + [152]))
	*($3 + [144]) = [0]
	*($3 + [136]) = (int_64)0
	CALL $64(($3 + [192]), ($3 + [136]))
	*($3 + [128]) = [0]
	*($3 + [120]) = (int_64)0
	CALL $64(($3 + [192]), ($3 + [120]))
	*(($2 = (($3 + [32]) + [8]))) = *($4)
	*($3 + [32]) = *($3 + [192])
	$2 = *($2)
	*((($3 + [208]) + [8])) = $2
	*(($4 = (($3 + [224]) + [8]))) = $2
	$5 = *($3 + [32])
	*($3 + [224]) = $5
	*($3 + [208]) = $5
	$2 = *($4)
	*((($3 + [240]) + [8])) = $2
	*(($3 + [72])) = $2
	*($3 + [48]) = $0
	*($3 + [56]) = $1
	$0 = *($3 + [224])
	*($3 + [64]) = $0
	*($3 + [240]) = $0
	*(($3 + [88])) = $1
	*(($3 + [96])) = (int_64)-1
	*(($3 + [104])) = (int_64)0
	*(($3 + [112])) = [0]
	*($3 + [80]) = $1
	$2 = ($3 + [80])
	$4 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	if ( ((int_32)*(CALL $48($2, $4) + [8]) == (int_32)$2) ){ goto $label$7 }
	CALL eosio_assert([0], [8379])
	goto $label$7 
	
.LABEL $label$8
	$1 = *(($3 + [56]))
	*($3 + [240]) = $1
	CALL $49($2, ($3 + [240]), $1)
	
.LABEL $label$7
	$1 = *($3 + [184])
	$2 = CALL $18(($3 + [16]), ($3 + [168]))
	$4 = CALL $18($3, ($3 + [152]))
	CALL require_auth($1)
	$6 = *($4)
	CALL eosio_assert((( *($4 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) <= [257]), [8712])
	$6 = *($2)
	CALL eosio_assert(((int_32)( *($2 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) == (int_32)[64]), [8752])
	CALL eosio_assert((((int_32)(*($3 + [124]) - *($3 + [120])) / (int_32)[12]) <= [11]), [8662])
	CALL eosio_assert((((int_32)(*($3 + [140]) - *($3 + [136])) / (int_32)[12]) <= [11]), [8687])
	if ( (*($4) & [1]) ){ goto $label$15 }
	if ( (*($2) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $10(*($4 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL $10(*($2 + [8]))
	$6 = *(($3 + [104]))
	if ( ($6 == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$6 = *(($3 + [104]))
	if ( $6 ){ goto $label$11 }
	
.LABEL $label$12
	$6 = *($3 + [120])
	if ( ($6 == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	$7 = ($3 + [108])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$18 }
	CALL $10($4)
	
.LABEL $label$18
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($3 + [104]))
	*($7) = $6
	CALL $10($2)
	$6 = *($3 + [120])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$16
	*($7) = $6
	CALL $10($6)
	$6 = *($3 + [120])
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$4 = *($3 + [124])
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($4 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$22 }
	CALL $10(*(($4 + [-4])))
	
.LABEL $label$22
	$4 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$21 }
	$2 = *($3 + [120])
	goto $label$19 
	
.LABEL $label$20
	$2 = $6
	
.LABEL $label$19
	*($3 + [124]) = $6
	CALL $10($2)
	
.LABEL $label$9
	$6 = *($3 + [136])
	if ( ($6 == 0) ){ goto $label$23 }
	$4 = *($3 + [140])
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$25 }
	
.LOOP $label$26:
	$2 = ($4 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$27 }
	CALL $10(*(($4 + [-4])))
	
.LABEL $label$27
	$4 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$26 }
	$2 = *($3 + [136])
	goto $label$24 
	
.LABEL $label$25
	$2 = $6
	
.LABEL $label$24
	*($3 + [140]) = $6
	CALL $10($2)
	
.LABEL $label$23
	if ( (*($3 + [152]) & [1]) ){ goto $label$30 }
	if ( (*($3 + [168]) & [1]) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	CALL $10(*(($3 + [160])))
	if ( ((*($3 + [168]) & [1]) == 0) ){ goto $label$28 }
	
.LABEL $label$29
	CALL $10(*(($3 + [176])))
	$global$0 = ($3 + [256])
	return 
	
.LABEL $label$28
	$global$0 = ($3 + [256])
}

void .FUNC $77 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [148]) = $2
	*($3 + [144]) = $2
	$5 = ($2 + $4)
	*($3 + [152]) = $5
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8834])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	if ( ((uint_32)($5 - $2) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [8834])
	$2 = *($3 + [148])
	
.LABEL $label$6
	CALL memcpy(($3 + [132]), $2, [4])
	*($3 + [148]) = ($2 + [4])
	*($3 + [128]) = [0]
	*($3 + [120]) = (int_64)0
	CALL $51(($3 + [144]), ($3 + [120]))
	$2 = *($3 + [148])
	if ( ((uint_32)(*((($3 + [144]) + [8])) - $2) > (uint_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [8834])
	$2 = *($3 + [148])
	
.LABEL $label$7
	CALL memcpy(($3 + [116]), $2, [4])
	*($3 + [148]) = (*($3 + [148]) + [4])
	*(($2 = (($3 + [24]) + [8]))) = *((($3 + [144]) + [8]))
	*($3 + [24]) = *($3 + [144])
	$2 = *($2)
	*((($3 + [160]) + [8])) = $2
	*(($4 = (($3 + [176]) + [8]))) = $2
	$6 = *($3 + [24])
	*($3 + [176]) = $6
	*($3 + [160]) = $6
	$2 = *($4)
	*((($3 + [192]) + [8])) = $2
	*(($3 + [64])) = $2
	*($3 + [40]) = $0
	*($3 + [48]) = $1
	$0 = *($3 + [176])
	*($3 + [56]) = $0
	*($3 + [192]) = $0
	*(($3 + [80])) = $1
	*(($3 + [88])) = (int_64)-1
	*(($3 + [96])) = (int_64)0
	*(($3 + [104])) = [0]
	*($3 + [72]) = $1
	$2 = ($3 + [72])
	$4 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	if ( ((int_32)*(CALL $48($2, $4) + [8]) == (int_32)$2) ){ goto $label$8 }
	CALL eosio_assert([0], [8379])
	goto $label$8 
	
.LABEL $label$9
	*($3 + [192]) = $1
	CALL $49($2, ($3 + [192]), $1)
	
.LABEL $label$8
	$1 = *($3 + [136])
	$2 = CALL $18(($3 + [8]), ($3 + [120]))
	CALL require_auth($1)
	$4 = *($2)
	CALL eosio_assert(((int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) == (int_32)[64]), [8752])
	if ( ((*($2) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*($2 + [8]))
	
.LABEL $label$10
	$5 = *(($3 + [96]))
	if ( ($5 == 0) ){ goto $label$11 }
	$7 = ($3 + [100])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $10($4)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($3 + [96]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($7) = $5
	CALL $10($2)
	
.LABEL $label$11
	if ( ((*($3 + [120]) & [1]) == 0) ){ goto $label$16 }
	CALL $10(*(($3 + [128])))
	
.LABEL $label$16
	$global$0 = ($3 + [208])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL $8(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $20($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($6 + [-4])
	*(($3 + [-4])) = *($1)
	$6 = ($6 + [-12])
	*(($3 = ($3 + [-12]))) = *($6)
	*($6) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL $10(*(($2 + [-4])))
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL $10($1)
	
.LABEL $label$14
}

int_32 .FUNC $39 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [120])) = [0]
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $7)
	$3 = $2
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8834])
	$3 = *($4 + [92])
	
.LABEL $label$4
	CALL memcpy(($4 + [104]), $3, [8])
	*($4 + [92]) = ($3 + [8])
	$8 = (($4 + [104]) + [8])
	CALL $51(($4 + [88]), $8)
	*(($3 = ($4 + [8]))) = *((($4 + [88]) + [8]))
	*($4) = *($4 + [88])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($9 = (($4 + [144]) + [8]))) = $3
	$10 = *($4)
	*($4 + [144]) = $10
	*($4 + [128]) = $10
	$3 = *($9)
	*((($4 + [160]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [144])
	*($4 + [32]) = $0
	*($4 + [160]) = $0
	*(($4 + [56])) = $1
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*($4 + [48]) = $1
	$3 = ($4 + [48])
	$9 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$6 }
	if ( ((int_32)*(CALL $48($3, $9) + [8]) == (int_32)$3) ){ goto $label$5 }
	CALL eosio_assert([0], [8379])
	goto $label$5 
	
.LABEL $label$6
	*($4 + [160]) = $1
	CALL $49($3, ($4 + [160]), $1)
	
.LABEL $label$5
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$1 = *($4 + [104])
	$8 = CALL $18(($4 + [144]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	$5 = CALL $18(($4 + [160]), $8)
	CALL void $3((int_32 $1), (int_64 $5), (int_32 $6))
	if ( (*($4 + [160]) & [1]) ){ goto $label$16 }
	if ( (*($4 + [144]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $10(*($5 + [8]))
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $10(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	
.LABEL $label$13
	$3 = *(($4 + [72]))
	if ( $3 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $2($2)
	$3 = *(($4 + [72]))
	if ( ($3 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$5 = ($4 + [76])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$18 }
	
.LOOP $label$19:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$20 }
	CALL $10($7)
	
.LABEL $label$20
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$19 }
	$2 = *(($4 + [72]))
	goto $label$17 
	
.LABEL $label$18
	$2 = $3
	
.LABEL $label$17
	*($5) = $3
	CALL $10($2)
	$2 = [1]
	if ( (*($4 + [112]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$2 = [1]
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $10(*(($4 + [120])))
	
.LABEL $label$8
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $36 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ($0 + [32])
	$4 = CALL $50($3)
	$5 = [1]
	if ( CALL has_auth(*($0 + [8])) ){ goto $label$1 }
	$5 = CALL has_auth($4)
	
.LABEL $label$1
	CALL eosio_assert($5, [8309])
	*($2 + [8]) = $1
	CALL $49($3, ($2 + [8]), *(($0 + [8])))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $37 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [96])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8834])
	
.LABEL $label$5
	CALL memcpy(($4 + [80]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = $3
	*(($4 + [48])) = $1
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $1
	$3 = ($4 + [40])
	$8 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	if ( ((int_32)*(CALL $48($3, $8) + [8]) == (int_32)$3) ){ goto $label$6 }
	CALL eosio_assert([0], [8379])
	goto $label$6 
	
.LABEL $label$7
	*($4 + [88]) = $1
	CALL $49($3, ($4 + [88]), $1)
	
.LABEL $label$6
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$1 = *($4 + [80])
	if ( ($5 & [1]) ){ goto $label$12 }
	CALL void $3((int_32 $1), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL void $3((int_32 $1), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $2($2)
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$3 = ($4 + [68])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $10($7)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$15 }
	$2 = *(($4 + [64]))
	goto $label$13 
	
.LABEL $label$14
	$2 = $5
	
.LABEL $label$13
	*($3) = $5
	CALL $10($2)
	
.LABEL $label$8
	$global$0 = ($4 + [96])
	return [1]
}

void .FUNC $78 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [132]) = $2
	*($3 + [128]) = $2
	$5 = ($2 + $4)
	*($3 + [136]) = $5
	*($3 + [120]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8834])
	$5 = *(($3 + [136]))
	$2 = *($3 + [132])
	
.LABEL $label$5
	CALL memcpy(($3 + [120]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [132]) = $2
	if ( ((uint_32)($5 - $2) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [8834])
	$2 = *($3 + [132])
	
.LABEL $label$6
	CALL memcpy(($3 + [116]), $2, [4])
	*($3 + [132]) = ($2 + [4])
	*($3 + [112]) = [0]
	*($3 + [104]) = (int_64)0
	CALL $51(($3 + [128]), ($3 + [104]))
	*(($2 = (($3 + [16]) + [8]))) = *((($3 + [128]) + [8]))
	*($3 + [16]) = *($3 + [128])
	$2 = *($2)
	*((($3 + [144]) + [8])) = $2
	*(($4 = (($3 + [160]) + [8]))) = $2
	$6 = *($3 + [16])
	*($3 + [160]) = $6
	*($3 + [144]) = $6
	$2 = *($4)
	*((($3 + [176]) + [8])) = $2
	*(($3 + [56])) = $2
	*($3 + [32]) = $0
	*($3 + [40]) = $1
	$0 = *($3 + [160])
	*($3 + [48]) = $0
	*($3 + [176]) = $0
	*(($3 + [72])) = $1
	*(($3 + [80])) = (int_64)-1
	*(($3 + [88])) = (int_64)0
	*(($3 + [96])) = [0]
	*($3 + [64]) = $1
	$2 = ($3 + [64])
	$4 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	if ( ((int_32)*(CALL $48($2, $4) + [8]) == (int_32)$2) ){ goto $label$7 }
	CALL eosio_assert([0], [8379])
	goto $label$7 
	
.LABEL $label$8
	*($3 + [176]) = $1
	CALL $49($2, ($3 + [176]), $1)
	
.LABEL $label$7
	$1 = *($3 + [120])
	$2 = CALL $18($3, ($3 + [104]))
	CALL require_auth($1)
	$4 = *($2)
	CALL eosio_assert(((int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) == (int_32)[64]), [8752])
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*($2 + [8]))
	
.LABEL $label$9
	$5 = *(($3 + [88]))
	if ( ($5 == 0) ){ goto $label$10 }
	$7 = ($3 + [92])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL $10($4)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($3 + [88]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($7) = $5
	CALL $10($2)
	
.LABEL $label$10
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$15 }
	CALL $10(*(($3 + [112])))
	
.LABEL $label$15
	$global$0 = ($3 + [192])
}

void .FUNC $79 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [148]) = $2
	*($3 + [144]) = $2
	$5 = ($2 + $4)
	*($3 + [152]) = $5
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8834])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	if ( ((uint_32)($5 - $2) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [8834])
	$2 = *($3 + [148])
	
.LABEL $label$6
	CALL memcpy(($3 + [132]), $2, [4])
	*($3 + [148]) = ($2 + [4])
	*($3 + [128]) = [0]
	*($3 + [120]) = (int_64)0
	CALL $51(($3 + [144]), ($3 + [120]))
	*($3 + [112]) = [0]
	*($3 + [104]) = (int_64)0
	CALL $64(($3 + [144]), ($3 + [104]))
	*(($2 = (($3 + [16]) + [8]))) = *((($3 + [144]) + [8]))
	*($3 + [16]) = *($3 + [144])
	$2 = *($2)
	*((($3 + [160]) + [8])) = $2
	*(($4 = (($3 + [176]) + [8]))) = $2
	$6 = *($3 + [16])
	*($3 + [176]) = $6
	*($3 + [160]) = $6
	$2 = *($4)
	*((($3 + [192]) + [8])) = $2
	*(($3 + [56])) = $2
	*($3 + [32]) = $0
	*($3 + [40]) = $1
	$0 = *($3 + [176])
	*($3 + [48]) = $0
	*($3 + [192]) = $0
	*(($3 + [72])) = $1
	*(($3 + [80])) = (int_64)-1
	*(($3 + [88])) = (int_64)0
	*(($3 + [96])) = [0]
	*($3 + [64]) = $1
	$2 = ($3 + [64])
	$4 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	if ( ((int_32)*(CALL $48($2, $4) + [8]) == (int_32)$2) ){ goto $label$7 }
	CALL eosio_assert([0], [8379])
	goto $label$7 
	
.LABEL $label$8
	*($3 + [192]) = $1
	CALL $49($2, ($3 + [192]), $1)
	
.LABEL $label$7
	$1 = *($3 + [136])
	$2 = CALL $18($3, ($3 + [120]))
	CALL require_auth($1)
	$4 = *($2)
	CALL eosio_assert(((int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) == (int_32)[64]), [8752])
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*($2 + [8]))
	
.LABEL $label$9
	$5 = *(($3 + [88]))
	if ( ($5 == 0) ){ goto $label$10 }
	$7 = ($3 + [92])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL $10($4)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($3 + [88]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($7) = $5
	CALL $10($2)
	
.LABEL $label$10
	$5 = *($3 + [104])
	if ( ($5 == 0) ){ goto $label$15 }
	$4 = *($3 + [108])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$2 = ($4 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$19 }
	CALL $10(*(($4 + [-4])))
	
.LABEL $label$19
	$4 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$18 }
	$2 = *($3 + [104])
	goto $label$16 
	
.LABEL $label$17
	$2 = $5
	
.LABEL $label$16
	*($3 + [108]) = $5
	CALL $10($2)
	
.LABEL $label$15
	if ( ((*($3 + [120]) & [1]) == 0) ){ goto $label$20 }
	CALL $10(*(($3 + [128])))
	
.LABEL $label$20
	$global$0 = ($3 + [208])
}

void .FUNC $32 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	CALL require_auth($1)
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$2 }
	$4 = uint_32($7 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($4 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($4 <= [257]), [8712])
	$4 = *($3)
	if ( ($4 & [1]) ){ goto $label$4 }
	$3 = uint_32($4 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($3 + [4])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$3 == (int_32)[64]), [8752])
	CALL eosio_assert((((int_32)(*($6 + [4]) - *($6)) / (int_32)[12]) <= [11]), [8662])
	CALL eosio_assert((((int_32)(*($5 + [4]) - *($5)) / (int_32)[12]) <= [11]), [8687])
}

int_32 .FUNC $33 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [224])
	$global$0 = $3
	*(($4 = $3) + [168]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [120])) = (int_64)0
	*((($4 + [104]) + [32])) = (int_64)0
	*((($4 + [104]) + [40])) = (int_64)0
	*((($4 + [104]) + [56])) = [0]
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $5)
	*($4 + [208]) = ($4 + [88])
	*($4 + [16]) = ($4 + [104])
	CALL $56(($4 + [16]), ($4 + [208]))
	*(($3 = ($4 + [8]))) = *($4 + [96])
	*($4) = *($4 + [88])
	$3 = *($3)
	*((($4 + [176]) + [8])) = $3
	*(($6 = (($4 + [192]) + [8]))) = $3
	$7 = *($4)
	*($4 + [192]) = $7
	*($4 + [176]) = $7
	$3 = *($6)
	*((($4 + [208]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [192])
	*($4 + [32]) = $0
	*($4 + [208]) = $0
	*((($4 + [16]) + [40])) = $1
	*(($4 + [64])) = (int_64)-1
	*((($4 + [16]) + [56])) = (int_64)0
	*(($4 + [80])) = [0]
	*($4 + [48]) = $1
	$3 = (($4 + [16]) + [32])
	$6 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)*(CALL $48($3, $6) + [8]) == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [8379])
	goto $label$4 
	
.LABEL $label$5
	$1 = *((($4 + [16]) + [8]))
	*($4 + [208]) = $1
	CALL $49($3, ($4 + [208]), $1)
	
.LABEL $label$4
	*($4 + [212]) = ($4 + [168])
	*($4 + [208]) = ($4 + [16])
	CALL $57(($4 + [208]), ($4 + [104]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$3 = *(($4 + [72]))
	if ( ($3 == 0) ){ goto $label$7 }
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $10($5)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($4 + [72]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$7
	$3 = *($4 + [152])
	if ( ($3 == 0) ){ goto $label$12 }
	$6 = ($4 + [156])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$16 }
	CALL $10(*(($5 + [-4])))
	
.LABEL $label$16
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$15 }
	$2 = *(($4 + [152]))
	goto $label$13 
	
.LABEL $label$14
	$2 = $3
	
.LABEL $label$13
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$12
	$3 = *($4 + [140])
	if ( ($3 == 0) ){ goto $label$17 }
	$6 = ($4 + [144])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$21 }
	CALL $10(*(($5 + [-4])))
	
.LABEL $label$21
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$20 }
	$2 = *(($4 + [140]))
	goto $label$18 
	
.LABEL $label$19
	$2 = $3
	
.LABEL $label$18
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$17
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$22 }
	CALL $10(*(($4 + [136])))
	
.LABEL $label$22
	if ( ((*($4 + [116]) & [1]) == 0) ){ goto $label$23 }
	CALL $10(*(($4 + [124])))
	
.LABEL $label$23
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $30 (int_32 $0)
{
	int_64 $1
	$1 = CALL $50(($0 + [32]))
	CALL prints([8601])
	CALL printn($1)
}

int_32 .FUNC $31 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $1
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $1
	$3 = ($4 + [32])
	$8 = CALL db_find_i64($1, $1, (int_64)3631284043040948224, (int_64)3631284043040948224)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)*(CALL $48($3, $8) + [8]) == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [8379])
	goto $label$4 
	
.LABEL $label$5
	*($4 + [72]) = $1
	CALL $49($3, ($4 + [72]), $1)
	
.LABEL $label$4
	$3 = ($4 + int_32($5 >> [1]))
	if ( ($5 & [1]) ){ goto $label$10 }
	CALL void $3((int_32 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL void $3((int_32 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($2)
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$3 = ($4 + [60])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL $10($7)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [56]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($3) = $5
	CALL $10($2)
	
.LABEL $label$6
	$global$0 = ($4 + [80])
	return [1]
}