(data (i32.const 4) "@e\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "transfer\00")
(data (i32.const 128) "eosio.token\00")
(data (i32.const 144) "get\00")
(data (i32.const 160) "read\00")
(data (i32.const 176) "next primary key in table is at autoincrement limit\00")
(data (i32.const 240) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 304) "cannot pass end iterator to erase\00")
(data (i32.const 352) "cannot increment end iterator\00")
(data (i32.const 384) "cannot create objects in table of another contract\00")
(data (i32.const 448) "write\00")
(data (i32.const 464) "object passed to erase is not in multi_index\00")
(data (i32.const 512) "cannot erase objects in table of another contract\00")
(data (i32.const 576) "attempt to remove object that was not in multi_index\00")
(data (i32.const 640) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 704) "cannot decrement iterator at beginning of table\00")
(data (i32.const 752) "error reading iterator\00")
(data (i32.const 784) ";\00")
(data (i32.const 800) "_\00")
(data (i32.const 832) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 896) "invalid symbol name\00")
(data (i32.const 928) "Invalid token transfer\00")
(data (i32.const 960) "Quantity must be positive\00")
(data (i32.const 9392) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 9488) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 9504) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 9520) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$12 (param i32 i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$16 (param i64)))
(import "env" "require_auth2" (func $fimport$17 (param i64 i64)))
(import "env" "sha256" (func $fimport$18 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$19 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$20 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN3ltt8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $6))
(export "_ZN3ltt5clearEv" (func $8))
(export "_ZN3ltt4rollEyyy" (func $10))
(export "_ZN3ltt9batchrollENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $12))
(export "_ZN3ltt8lttparseENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $17))
(export "_ZN3ltt6recordEyyyy" (func $18))
(export "_ZN3ltt5splitERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_" (func $25))
(export "malloc" (func $38))
(export "free" (func $41))
(export "isspace" (func $54))
(export "pow" (func $55))
(export "sqrt" (func $56))
(export "fabs" (func $57))
(export "scalbn" (func $58))
(export "atol" (func $59))
(export "llabs" (func $60))
(export "memchr" (func $61))
(export "memcmp" (func $62))
(export "strlen" (func $63))
(table $0 5 5 anyfunc)
(elem (i32.const 0) $64 $6 $8 $10 $12)



void .FUNC _ZN3ltt6recordEyyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [112])
	*([0] + [4]) = $14
	*(($14 + [40])) = [0]
	*($14 + [24]) = (int_64)-1
	$12 = (int_64)0
	*($14 + [32]) = (int_64)0
	$5 = *($0)
	*($14 + [8]) = $5
	*($14 + [16]) = $5
	$13 = CALL db_lowerbound_i64($5, $5, (int_64)-8182067306574643200, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$1 }
	CALL $19(($14 + [8]), $13)
	*($14 + [52]) = [0]
	*($14 + [48]) = ($14 + [8])
	$5 = *(*(CALL $20(($14 + [48])) + [4]))
	$12 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*(($10 = ($14 + [24]))) = $12
	CALL eosio_assert((uint_64)($12 <= (int_64)-2), [176])
	$12 = *($10)
	if ( (uint_64)($12 <= (int_64)2000) ){ goto $label$7 }
	$5 = ((int_64)$12 + (int_64)-2000)
	$6 = *(($14 + [32]))
	$8 = *(($14 + [36]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$8 }
	$13 = ($8 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$9:
	if ( ((int_64)*(*($13)) == (int_64)$5) ){ goto $label$8 }
	$8 = $13
	$9 = ($13 + [-24])
	$13 = $9
	if ( ((int_32)($9 + $7) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$11 }
	$13 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [40]) == (int_32)($14 + [8])), [240])
	if ( $13 ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$11
	$13 = CALL db_find_i64(*($14 + [8]), *(($14 + [16])), (int_64)-8182067306574643200, $5)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$7 }
	$13 = CALL $19(($14 + [8]), $13)
	CALL eosio_assert(((int_32)*($13 + [40]) == (int_32)($14 + [8])), [240])
	
.LABEL $label$10
	CALL eosio_assert([1], [304])
	CALL eosio_assert([1], [352])
	$9 = CALL db_next_i64(*($13 + [44]), ($14 + [48]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$12 }
	CALL $19(($14 + [8]), $9)
	
.LABEL $label$12
	CALL $21(($14 + [8]), $13)
	$11 = *($0)
	CALL eosio_assert(((int_64)*($14 + [8]) == (int_64)CALL $fimport$2()), [384])
	*(($13 = CALL $42([56])) + [40]) = ($14 + [8])
	*($13 + [8]) = $1
	*($13) = $12
	*($13 + [16]) = $2
	*($13 + [24]) = $3
	*($13 + [32]) = $4
	*($14 + [104]) = (($14 + [48]) + [40])
	*($14 + [100]) = ($14 + [48])
	*($14 + [96]) = ($14 + [48])
	CALL $22(($14 + [96]), $13)
	$5 = *($13)
	$8 = CALL db_store_i64(*(($14 + [16])), (int_64)-8182067306574643200, $11, $5, ($14 + [48]), [40])
	*($13 + [44]) = $8
	$9 = ($14 + [24])
	if ( (uint_64)($5 <= *($9)) ){ goto $label$13 }
	*($9) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($14 + [96]) = $13
	$5 = *($13)
	*($14 + [48]) = $5
	*($14 + [92]) = $8
	$7 = ($14 + [36])
	$9 = *($7)
	if ( ((uint_32)$9 >= (uint_32)*(($14 + [40]))) ){ goto $label$6 }
	*($9 + [8]) = $5
	*($9 + [16]) = $8
	*($14 + [96]) = [0]
	*($9) = $13
	*($7) = ($9 + [24])
	goto $label$5 
	
.LABEL $label$7
	$11 = *($0)
	CALL eosio_assert(((int_64)*($14 + [8]) == (int_64)CALL $fimport$2()), [384])
	*(($13 = CALL $42([56])) + [40]) = ($14 + [8])
	*($13 + [8]) = $1
	*($13) = $12
	*($13 + [16]) = $2
	*($13 + [24]) = $3
	*($13 + [32]) = $4
	*($14 + [104]) = (($14 + [48]) + [40])
	*($14 + [100]) = ($14 + [48])
	*($14 + [96]) = ($14 + [48])
	CALL $22(($14 + [96]), $13)
	$5 = *($13)
	$8 = CALL db_store_i64(*(($14 + [16])), (int_64)-8182067306574643200, $11, $5, ($14 + [48]), [40])
	*($13 + [44]) = $8
	if ( (uint_64)($5 <= *($10)) ){ goto $label$14 }
	*(($14 + [24])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*($14 + [96]) = $13
	$5 = *($13)
	*($14 + [48]) = $5
	*($14 + [92]) = $8
	$7 = ($14 + [36])
	$9 = *($7)
	if ( ((uint_32)$9 >= (uint_32)*(($14 + [40]))) ){ goto $label$16 }
	*($9 + [8]) = $5
	*($9 + [16]) = $8
	*($14 + [96]) = [0]
	*($9) = $13
	*($7) = ($9 + [24])
	goto $label$15 
	
.LABEL $label$16
	CALL $23(($14 + [32]), ($14 + [96]), ($14 + [48]), ($14 + [92]))
	
.LABEL $label$15
	$13 = *($14 + [96])
	*($14 + [96]) = [0]
	if ( ($13 == 0) ){ goto $label$4 }
	CALL $43($13)
	$8 = *($14 + [32])
	if ( $8 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	CALL $23(($14 + [32]), ($14 + [96]), ($14 + [48]), ($14 + [92]))
	
.LABEL $label$5
	$13 = *($14 + [96])
	*($14 + [96]) = [0]
	if ( ($13 == 0) ){ goto $label$4 }
	CALL $43($13)
	
.LABEL $label$4
	$8 = *($14 + [32])
	if ( ($8 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($14 + [36])
	$13 = *($7)
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$18 }
	
.LOOP $label$19:
	$13 = ($13 + [-24])
	$9 = *($13)
	*($13) = [0]
	if ( ($9 == 0) ){ goto $label$20 }
	CALL $43($9)
	
.LABEL $label$20
	if ( ((int_32)$8 != (int_32)$13) ){ goto $label$19 }
	$13 = *(($14 + [32]))
	goto $label$17 
	
.LABEL $label$18
	$13 = $8
	
.LABEL $label$17
	*($7) = $8
	CALL $43($13)
	
.LABEL $label$2
	*([0] + [4]) = ($14 + [112])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [752])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $42([56])) + [40]) = $0
	CALL $24(($8 + [32]), $6)
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $23(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $43($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $40($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9392])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $14(*($1), ($0 + [32]))
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $42(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $51($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $52($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $43(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $43($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [576])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $43($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $43($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

int_32 .FUNC $20 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [44]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [704])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-8182067306574643200)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [640])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [640])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $19(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $42(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $51($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $43($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $43($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN3ltt5splitERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [48])
	*([0] + [4]) = $16
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$9 = *($2)
	$15 = CALL strlen([816])
	if ( ((int_32)$15 != (int_32)( *($2 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$2 }
	if ( (CALL $50($2, [0], [-1], [816], $15) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $27(($16 + [32]), $2, $3)
	$5 = ($3 + [1])
	$15 = *($16 + [32])
	$4 = (($16 + [32]) | [1])
	$10 = ($2 & [1])
	$2 = *($3)
	$2 = ( *($3 + [4]) ? uint_32($2 >> [1]) : $10 )
	if ( ($2 == 0) ){ goto $label$6 }
	$14 = (($16 + [32]) | [4])
	$11 = ($15 & [1])
	$9 = ( *($16 + [36]) ? uint_32($15 >> [1]) : $11 )
	if ( ((int_32)$9 < (int_32)$2) ){ goto $label$4 }
	$13 = ( *($16 + [40]) ? $4 : $11 )
	$8 = ($13 + $9)
	$11 = ( *($3 + [8]) ? $5 : $10 )
	$10 = *($11)
	$15 = $13
	
.LOOP $label$8:
	$9 = (($9 - $2) + [1])
	if ( ($9 == 0) ){ goto $label$7 }
	$9 = CALL memchr($15, $10, $9)
	if ( ($9 == 0) ){ goto $label$7 }
	if ( (CALL memcmp($9, $11, $2) == 0) ){ goto $label$5 }
	$15 = ($9 + [1])
	$9 = ($8 - $15)
	if ( ((int_32)$9 >= (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	$15 = *($16 + [32])
	goto $label$4 
	
.LABEL $label$6
	$14 = (($16 + [32]) | [4])
	$2 = [0]
	goto $label$3 
	
.LABEL $label$5
	$15 = *($16 + [32])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$4 }
	$2 = ($9 - $13)
	goto $label$3 
	
.LABEL $label$4
	$2 = [-1]
	
.LABEL $label$3
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$9 }
	$6 = ( *($14) ? uint_32(($15 & [254]) >> [1]) : ($15 & [1]) )
	$12 = ($0 + [8])
	$13 = ($0 + [4])
	
.LOOP $label$10:
	CALL $53(($16 + [16]), ($16 + [32]), [0], $2, ($16 + [32]))
	$9 = *($13)
	if ( ((int_32)$9 == (int_32)*($12)) ){ goto $label$12 }
	CALL $52($9, ($16 + [16]))
	*($13) = (*($13) + [12])
	goto $label$11 
	
.LABEL $label$12
	CALL $28($0, ($16 + [16]))
	
.LABEL $label$11
	CALL $53($16, ($16 + [32]), ($2 + [1]), $6, ($16 + [32]))
	if ( (*($16 + [32]) & [1]) ){ goto $label$14 }
	*($16 + [32]) = [0]
	goto $label$13 
	
.LABEL $label$14
	*(*((($16 + [32]) + [8]))) = [0]
	*($14) = [0]
	
.LABEL $label$13
	$2 = [0]
	CALL $47(($16 + [32]), [0])
	$15 = *(($16 + [8]))
	*((($16 + [32]) + [8])) = $15
	*($16 + [32]) = *($16)
	$11 = ($9 & [1])
	$9 = *($3)
	$9 = ( *(($3 + [4])) ? uint_32($9 >> [1]) : $11 )
	if ( ($9 == 0) ){ goto $label$15 }
	$15 = ( *($14) ? uint_32($2 >> [1]) : $10 )
	$2 = *($16 + [32])
	$10 = ($2 & [1])
	$7 = ( $15 ? $4 : $10 )
	$10 = ($7 + $15)
	$2 = $10
	if ( ((int_32)$15 < (int_32)$9) ){ goto $label$16 }
	$8 = ( *(($3 + [8])) ? $5 : $11 )
	$11 = *($8)
	$2 = $7
	
.LOOP $label$18:
	$15 = (($15 - $9) + [1])
	if ( ($15 == 0) ){ goto $label$17 }
	$2 = CALL memchr($2, $11, $15)
	if ( ($2 == 0) ){ goto $label$17 }
	if ( (CALL memcmp($2, $8, $9) == 0) ){ goto $label$16 }
	$2 = ($2 + [1])
	$15 = ($10 - $2)
	if ( ((int_32)$15 >= (int_32)$9) ){ goto $label$18 }
	
.LABEL $label$17
	$2 = $10
	
.LABEL $label$16
	$2 = ( [-1] ? ($2 - $7) : ((int_32)$2 == (int_32)$10) )
	
.LABEL $label$15
	if ( ((*($16 + [16]) & [1]) == 0) ){ goto $label$19 }
	CALL $43(*((($16 + [16]) + [8])))
	
.LABEL $label$19
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$10 }
	$15 = *($16 + [32])
	
.LABEL $label$9
	if ( (($15 & [1]) == 0) ){ goto $label$1 }
	CALL $43(*(($16 + [40])))
	
.LABEL $label$1
	*([0] + [4]) = ($16 + [48])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($4 + $3)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $42($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : $5 ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $48($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $44($0)
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [2])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$4 = [1073741823]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$4 = int_32($2 >> [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $42(($4 << [2]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $51($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [2])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [2]))
	$7 = ($3 + [4])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $43($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $46($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $43 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $42 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9484])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9372])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9180]
	$1 = (((int_32)$2 * (int_32)[12]) + [9180])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9478]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9480])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9478]) = [1]
	$7 = ($7 << [16])
	*([0] + [9480]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9480])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9480]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9478]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9478]) = [1]
	$3 = ($3 << [16])
	*([0] + [9480]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9480])
	
.LABEL $label$8
	*([0] + [9480]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $42(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $43($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $42($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $43($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $46($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $44 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $51 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_64 .FUNC llabs (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

void .FUNC _ZN3ltt5clearEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	CALL require_auth(*($0))
	*(($10 + [32])) = [0]
	*($10 + [16]) = (int_64)-1
	$7 = (int_64)0
	*($10 + [24]) = (int_64)0
	$8 = *($0)
	*($10) = $8
	*($10 + [8]) = $8
	$0 = CALL db_lowerbound_i64($8, $8, (int_64)-8182067306574643200, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	CALL $19($10, $0)
	*($10 + [44]) = [0]
	*($10 + [40]) = $10
	$8 = *(*(CALL $20(($10 + [40])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*(($0 = ($10 + [16]))) = $7
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [176])
	$8 = ((int_64)*($0) + (int_64)4294967295)
	if ( ((int_32)(CASTING uint_32)(uint_64 $8) < (int_32)[0]) ){ goto $label$2 }
	$8 = (int_64)((int_64)$8 << (int_64)32) >> (int_64)32)
	$4 = ($10 + [24])
	$5 = ($10 + [28])
	$6 = ($10 + [8])
	
.LOOP $label$3:
	$1 = *($4)
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$4 }
	$0 = ($9 + [-24])
	$2 = ([0] - $1)
	
.LOOP $label$5:
	if ( ((int_64)*(*($0)) == (int_64)$8) ){ goto $label$4 }
	$9 = $0
	$3 = ($0 + [-24])
	$0 = $3
	if ( ((int_32)($3 + $2) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$7 }
	$0 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [40]) == (int_32)$10), [240])
	if ( $0 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$7
	$0 = CALL db_find_i64(*($10), *($6), (int_64)-8182067306574643200, $8)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $19($10, $0)
	CALL eosio_assert(((int_32)*($0 + [40]) == (int_32)$10), [240])
	
.LABEL $label$6
	CALL eosio_assert([1], [304])
	CALL eosio_assert([1], [352])
	$3 = CALL db_next_i64(*($0 + [44]), ($10 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	CALL $19($10, $3)
	
.LABEL $label$8
	CALL $21($10, $0)
	$0 = ((int_64)$8 > (int_64)0)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( $0 ){ goto $label$3 }
	
.LABEL $label$2
	$9 = *($10 + [24])
	if ( ($9 == 0) ){ goto $label$9 }
	$2 = ($10 + [28])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	CALL $43($3)
	
.LABEL $label$13
	if ( ((int_32)$9 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($10 + [24]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $9
	
.LABEL $label$10
	*($2) = $9
	CALL $43($0)
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN3ltt8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	$8 = *($0)
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$1 }
	$7 = [0]
	$2 = *($3)
	if ( ((uint_64)((int_64)$2 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$1 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$7 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [928])
	CALL eosio_assert(((int_64)$2 > (int_64)0), [960])
	$5 = *($4)
	if ( ($5 & [1]) ){ goto $label$8 }
	$10 = uint_32($5 >> [1])
	$9 = ($4 + [1])
	goto $label$7 
	
.LABEL $label$8
	$10 = *($4 + [4])
	$9 = *($4 + [8])
	
.LABEL $label$7
	$7 = ($9 + $10)
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$10 }
	$10 = $9
	
.LOOP $label$12:
	if ( (CALL isspace(*($10)) == 0) ){ goto $label$11 }
	$10 = ($10 + [1])
	if ( ((int_32)$7 != (int_32)$10) ){ goto $label$12 }
	$10 = $7
	
.LABEL $label$11
	$5 = *($4)
	goto $label$9 
	
.LABEL $label$10
	$10 = $9
	
.LABEL $label$9
	if ( ($5 & [1]) ){ goto $label$14 }
	$7 = ($4 + [1])
	goto $label$13 
	
.LABEL $label$14
	$7 = *($4 + [8])
	
.LABEL $label$13
	CALL $49($4, ($9 - $7), ($10 - $9))
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$17 }
	$7 = ($4 + [1])
	$9 = ($7 + uint_32($10 >> [1]))
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$7 = *($4 + [8])
	$9 = ($7 + *($4 + [4]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$15 }
	
.LABEL $label$16
	$5 = ([0] - $7)
	$10 = ($9 + [-1])
	
.LOOP $label$19:
	if ( (CALL isspace(*($10)) == 0) ){ goto $label$18 }
	$9 = $10
	$7 = ($10 + [-1])
	$10 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-1]) ){ goto $label$19 }
	
.LABEL $label$18
	$10 = *($4)
	
.LABEL $label$15
	if ( ($10 & [1]) ){ goto $label$21 }
	$7 = ($4 + [1])
	$10 = ($7 + uint_32(($10 & [254]) >> [1]))
	goto $label$20 
	
.LABEL $label$21
	$7 = *($4 + [8])
	$10 = ($7 + *($4 + [4]))
	
.LABEL $label$20
	CALL $49($4, ($9 - $7), ($10 - $9))
	*(($11 + [48])) = [0]
	*($11 + [32]) = (int_64)-1
	$2 = (int_64)0
	*($11 + [40]) = (int_64)0
	$1 = *($0)
	*($11 + [16]) = $1
	*($11 + [24]) = $1
	$10 = CALL db_lowerbound_i64($1, $1, (int_64)4849662300438998672, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$22 }
	CALL $31(($11 + [16]), $10)
	*($11 + [68]) = [0]
	*($11 + [64]) = ($11 + [16])
	$1 = *(*(CALL $32(($11 + [64])) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$22
	*(($10 = ($11 + [32]))) = $2
	CALL eosio_assert((uint_64)($2 <= (int_64)-2), [176])
	$2 = *($10)
	$1 = ((uint_64)$2 % (uint_64)(int_64)2000)
	$6 = *(($11 + [40]))
	$9 = *(($11 + [44]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$23 }
	$10 = ($9 + [-24])
	$5 = ([0] - $6)
	
.LOOP $label$24:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$23 }
	$9 = $10
	$7 = ($10 + [-24])
	$10 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$24 }
	
.LABEL $label$23
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$26 }
	$7 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($11 + [16])), [240])
	goto $label$25 
	
.LABEL $label$26
	$7 = [0]
	$10 = CALL db_find_i64(*($11 + [16]), *(($11 + [24])), (int_64)4849662300438998672, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$25 }
	$7 = CALL $31(($11 + [16]), $10)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($11 + [16])), [240])
	
.LABEL $label$25
	if ( (uint_64)($2 <= (int_64)2000) ){ goto $label$32 }
	$1 = ((int_64)$2 + (int_64)-2000)
	$6 = *(($11 + [40]))
	$9 = *(($11 + [44]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$33 }
	$10 = ($9 + [-24])
	$5 = ([0] - $6)
	
.LOOP $label$34:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$33 }
	$9 = $10
	$7 = ($10 + [-24])
	$10 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$34 }
	
.LABEL $label$33
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$31 }
	$7 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($11 + [16])), [240])
	
.LABEL $label$32
	if ( ($7 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$10 = CALL db_find_i64(*($11 + [16]), *(($11 + [24])), (int_64)4849662300438998672, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$30 }
	$7 = CALL $31(($11 + [16]), $10)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($11 + [16])), [240])
	goto $label$29 
	
.LABEL $label$30
	$1 = *($0)
	*($11 + [4]) = $4
	*($11 + [8]) = $3
	*($11) = ($11 + [16])
	*($11 + [88]) = $1
	CALL eosio_assert(((int_64)*($11 + [16]) == (int_64)CALL $fimport$2()), [384])
	*($11 + [68]) = $11
	*($11 + [64]) = ($11 + [16])
	*($11 + [72]) = ($11 + [88])
	*(($7 = CALL $42([56])) + [16]) = [0]
	*($7 + [8 align=4]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [32]) = (int_64)1398362884
	CALL eosio_assert([1], [832])
	$1 = (int_64)5462355
	$10 = [0]
	
.LOOP $label$37:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$36 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$38 }
	
.LOOP $label$39:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$36 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$39 }
	
.LABEL $label$38
	$4 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	$4 = [0]
	
.LABEL $label$35
	CALL eosio_assert($4, [896])
	*($7 + [40]) = ($11 + [16])
	CALL $36(($11 + [64]), $7)
	*($11 + [80]) = $7
	$1 = *($7)
	*($11 + [64]) = $1
	$4 = *($7 + [44])
	*($11 + [60]) = $4
	$9 = ($11 + [44])
	$10 = *($9)
	if ( ((uint_32)$10 >= (uint_32)*(($11 + [48]))) ){ goto $label$41 }
	*($10 + [8]) = $1
	*($10 + [16]) = $4
	*($11 + [80]) = [0]
	*($10) = $7
	*($9) = ($10 + [24])
	goto $label$40 
	
.LABEL $label$41
	CALL $35(($11 + [40]), ($11 + [80]), ($11 + [64]), ($11 + [60]))
	
.LABEL $label$40
	$10 = *($11 + [80])
	*($11 + [80]) = [0]
	if ( ($10 == 0) ){ goto $label$28 }
	if ( ((*($10 + [8]) & [1]) == 0) ){ goto $label$42 }
	CALL $43(*(($10 + [16])))
	
.LABEL $label$42
	CALL $43($10)
	goto $label$28 
	
.LABEL $label$29
	CALL eosio_assert([1], [304])
	CALL eosio_assert([1], [352])
	$10 = [0]
	$9 = CALL db_next_i64(*($7 + [44]), ($11 + [64]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$43 }
	CALL $31(($11 + [16]), $9)
	
.LABEL $label$43
	CALL $33(($11 + [16]), $7)
	$1 = *($0)
	*($11 + [4]) = $4
	*($11 + [8]) = $3
	*($11) = ($11 + [16])
	*($11 + [88]) = $1
	CALL eosio_assert(((int_64)*($11 + [16]) == (int_64)CALL $fimport$2()), [384])
	*($11 + [68]) = $11
	*($11 + [64]) = ($11 + [16])
	*($11 + [72]) = ($11 + [88])
	*(($7 = CALL $42([56])) + [16]) = [0]
	*($7 + [8 align=4]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [32]) = (int_64)1398362884
	CALL eosio_assert([1], [832])
	$1 = (int_64)5462355
	
.LOOP $label$45:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$44 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$46 }
	
.LOOP $label$47:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$44 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$47 }
	
.LABEL $label$46
	$4 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$45 }
	
.LABEL $label$44
	CALL eosio_assert($4, [896])
	*($7 + [40]) = ($11 + [16])
	CALL $34(($11 + [64]), $7)
	*($11 + [80]) = $7
	$1 = *($7)
	*($11 + [64]) = $1
	$4 = *($7 + [44])
	*($11 + [60]) = $4
	$9 = ($11 + [44])
	$10 = *($9)
	if ( ((uint_32)$10 >= (uint_32)*(($11 + [48]))) ){ goto $label$49 }
	*($10 + [8]) = $1
	*($10 + [16]) = $4
	*($11 + [80]) = [0]
	*($10) = $7
	*($9) = ($10 + [24])
	goto $label$48 
	
.LABEL $label$49
	CALL $35(($11 + [40]), ($11 + [80]), ($11 + [64]), ($11 + [60]))
	
.LABEL $label$48
	$10 = *($11 + [80])
	*($11 + [80]) = [0]
	if ( ($10 == 0) ){ goto $label$28 }
	if ( ((*($10 + [8]) & [1]) == 0) ){ goto $label$50 }
	CALL $43(*(($10 + [16])))
	
.LABEL $label$50
	CALL $43($10)
	$4 = *($11 + [40])
	if ( $4 ){ goto $label$27 }
	goto $label$1 
	
.LABEL $label$28
	$4 = *($11 + [40])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$27
	$9 = ($11 + [44])
	$10 = *($9)
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$52 }
	
.LOOP $label$53:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$54 }
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$55 }
	CALL $43(*(($7 + [16])))
	
.LABEL $label$55
	CALL $43($7)
	
.LABEL $label$54
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$53 }
	$10 = *(($11 + [40]))
	goto $label$51 
	
.LABEL $label$52
	$10 = $4
	
.LABEL $label$51
	*($9) = $4
	CALL $43($10)
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [96])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [832])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [896])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $29(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $30(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $43(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$23 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$29 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$35 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$3 = ($3 + [165])
	goto $label$33 
	
.LABEL $label$35
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$31
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$30 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$29
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$41 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$3 = ($3 + [165])
	goto $label$39 
	
.LABEL $label$41
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$37
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$36 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*($9 + [72]) = $0
	if ( ((int_64)$2 > (int_64)4157533696498860031) ){ goto $label$44 }
	if ( ((int_64)$2 == (int_64)-4817989584170254336) ){ goto $label$43 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$14 }
	*($9 + [68]) = [0]
	*($9 + [64]) = [1]
	*($9 + [8 align=4]) = *($9 + [64])
	CALL $7(($9 + [72]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$44
	if ( ((int_64)$2 == (int_64)4157533696498860032) ){ goto $label$42 }
	if ( ((int_64)$2 != (int_64)4923678490122780672) ){ goto $label$14 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [2]
	*($9 + [16 align=4]) = *($9 + [56])
	CALL $9(($9 + [72]), ($9 + [16]))
	goto $label$14 
	
.LABEL $label$43
	*($9 + [52]) = [0]
	*($9 + [48]) = [3]
	*($9 + [24 align=4]) = *($9 + [48])
	CALL $11(($9 + [72]), ($9 + [24]))
	goto $label$14 
	
.LABEL $label$42
	*($9 + [44]) = [0]
	*($9 + [40]) = [4]
	*($9 + [32 align=4]) = *($9 + [40])
	CALL $13(($9 + [72]), ($9 + [32]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [80])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $15($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $47($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $42($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $47($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $43($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $44($7)
	return (unreachable)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [144])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $16($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [160])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $42($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $51($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $43($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZN3ltt8lttparseENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*(($10 + [56])) = [0]
	*($10 + [48]) = (int_64)0
	$9 = CALL strlen([784])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$4 }
	*($10 + [48]) = ($9 << [1])
	$5 = (($10 + [48]) | [1])
	if ( $9 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($9 + [16]) & [-16])
	$5 = CALL $42($8)
	*($10 + [48]) = ($8 | [1])
	*($10 + [56]) = $5
	*($10 + [52]) = $9
	
.LABEL $label$3
	CALL memcpy($5, [784], $9)
	
.LABEL $label$2
	*(($5 + $9)) = [0]
	CALL _ZN3ltt5splitERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_($10, $9, $2, ($10 + [48]))
	if ( ((*($10 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $43(*($10 + [56]))
	
.LABEL $label$5
	$3 = *($10 + [4])
	$8 = *($10)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$7 }
	$4 = (($10 + [32]) | [1])
	$6 = (($10 + [32]) + [8])
	$7 = ($0 + [4])
	
.LOOP $label$8:
	CALL $52(($10 + [16]), $8)
	*($6) = [0]
	*($10 + [32]) = (int_64)0
	$9 = CALL strlen([800])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$11 }
	*($10 + [32]) = ($9 << [1])
	$5 = $4
	if ( $9 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$2 = (($9 + [16]) & [-16])
	$5 = CALL $42($2)
	*($6) = $5
	*($10 + [32]) = ($2 | [1])
	*($10 + [36]) = $9
	
.LABEL $label$10
	CALL memcpy($5, [800], $9)
	
.LABEL $label$9
	*(($5 + $9)) = [0]
	CALL _ZN3ltt5splitERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_(($10 + [48]), $9, ($10 + [16]), ($10 + [32]))
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $43(*($6))
	
.LABEL $label$12
	$2 = *($10 + [48])
	if ( ((int_32)(*($10 + [52]) - $2) != (int_32)[36]) ){ goto $label$13 }
	*(($9 = CALL $42([24]))) = (int_64)0
	*(($9 + [16])) = (int_64)0
	*(($9 + [8])) = (int_64)0
	*($10 + [32]) = $9
	$5 = *($10 + [48])
	if ( (*($5) & [1]) ){ goto $label$15 }
	$5 = ($5 + [1])
	goto $label$14 
	
.LABEL $label$15
	$5 = *($5 + [8])
	
.LABEL $label$14
	*($9) = (CASTING int_64)(int_32 CALL atol($5))
	$5 = *($10 + [48])
	if ( (*($5 + [12]) & [1]) ){ goto $label$17 }
	$5 = (($5 + [12]) + [1])
	goto $label$16 
	
.LABEL $label$17
	$5 = *(($5 + [20]))
	
.LABEL $label$16
	*($9 + [8]) = (CASTING int_64)(int_32 CALL atol($5))
	$5 = *($10 + [48])
	if ( (*($5 + [24]) & [1]) ){ goto $label$19 }
	$5 = (($5 + [24]) + [1])
	goto $label$18 
	
.LABEL $label$19
	$5 = *(($5 + [32]))
	
.LABEL $label$18
	*($9 + [16]) = (CASTING int_64)(int_32 CALL atol($5))
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)*(($0 + [8]))) ){ goto $label$21 }
	*($5) = $9
	*($7) = (*($7) + [4])
	goto $label$20 
	
.LABEL $label$21
	CALL $26($0, ($10 + [32]))
	
.LABEL $label$20
	$2 = *($10 + [48])
	
.LABEL $label$13
	if ( ($2 == 0) ){ goto $label$22 }
	$9 = *($10 + [52])
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$24 }
	$5 = ([0] - $2)
	$9 = ($9 + [-12])
	
.LOOP $label$25:
	if ( ((*($9) & [1]) == 0) ){ goto $label$26 }
	CALL $43(*(($9 + [8])))
	
.LABEL $label$26
	$9 = ($9 + [-12])
	if ( ((int_32)($9 + $5) != (int_32)[-12]) ){ goto $label$25 }
	$9 = *($10 + [48])
	goto $label$23 
	
.LABEL $label$24
	$9 = $2
	
.LABEL $label$23
	*($10 + [52]) = $2
	CALL $43($9)
	
.LABEL $label$22
	if ( ((*($10 + [16]) & [1]) == 0) ){ goto $label$27 }
	CALL $43(*((($10 + [16]) + [8])))
	
.LABEL $label$27
	$8 = ($8 + [12])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$8 }
	$8 = *($10)
	
.LABEL $label$7
	if ( ($8 == 0) ){ goto $label$28 }
	$9 = *($10 + [4])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$30 }
	$5 = ([0] - $8)
	$9 = ($9 + [-12])
	
.LOOP $label$31:
	if ( ((*($9) & [1]) == 0) ){ goto $label$32 }
	CALL $43(*(($9 + [8])))
	
.LABEL $label$32
	$9 = ($9 + [-12])
	if ( ((int_32)($9 + $5) != (int_32)[-12]) ){ goto $label$31 }
	$9 = *($10)
	goto $label$29 
	
.LABEL $label$30
	$9 = $8
	
.LABEL $label$29
	*($10 + [4]) = $8
	CALL $43($9)
	
.LABEL $label$28
	*([0] + [4]) = ($10 + [64])
	return (unreachable)
	
.LABEL $label$6
	CALL $44(($10 + [32]))
	
.LABEL $label$1
	CALL $44(($10 + [48]))
	(unreachable)
}

void .FUNC _ZN3ltt4rollEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_64 $4
	float_64 $5
	int_64 $6
	float_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	CALL require_auth(*($0))
	*($9 + [8]) = ((int_64)((int_64)((int_64)$3 * (int_64)$2) + (int_64)$1) + (int_64)(CASTING int_64)(int_32 ((int_32)CALL tapos_block_num() * (int_32)CALL $fimport$20())))
	CALL sha256(($9 + [8]), [4], ($9 + [16]))
	$4 = CALL llabs(*($9 + [16]))
	$5 = CALL pow((float_64)10, (float_64)0)
	$6 = CALL llabs(*($9 + [17]))
	$7 = CALL pow((float_64)10, (float_64)1)
	$8 = CALL llabs(*($9 + [18]))
	CALL _ZN3ltt6recordEyyyy($0, $1, $2, $3, (Rounds 0)(((float_64)(CASTING float_64)(uint_64 (Rounds 0)(((float_64)(CASTING float_64)(uint_64 (Rounds 0)(((float_64)((float_64)$5 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)$4 % (int_64)6) + (int_64)1))) + (float_64)(float_64)0))) + (float_64)((float_64)$7 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)$6 % (int_64)6) + (int_64)1)))))) + (float_64)((float_64)CALL $55((float_64)10, (float_64)2) * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)$8 % (int_64)6) + (int_64)1))))))
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [160])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [160])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [160])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

void .FUNC _ZN3ltt9batchrollENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	float_64 $6
	int_64 $7
	float_64 $8
	int_64 $9
	float_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	CALL require_auth(*($0))
	CALL $52(($12 + [8]), $1)
	CALL _ZN3ltt8lttparseENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(($12 + [24]), $0, ($12 + [8]))
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$1 }
	CALL $43(*($12 + [16]))
	
.LABEL $label$1
	$1 = CALL tapos_block_num()
	$2 = CALL tapos_block_prefix()
	$3 = *($12 + [28])
	$11 = *($12 + [24])
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$2 }
	$4 = (CASTING int_64)(int_32 ((int_32)$2 * (int_32)$1))
	
.LOOP $label$3:
	$1 = *($11)
	*($12 + [40]) = ((int_64)((int_64)*($1) + (int_64)$4) + (int_64)((int_64)*($1 + [16]) * (int_64)*($1 + [8])))
	CALL sha256(($12 + [40]), [4], ($12 + [48]))
	$5 = CALL llabs(*($12 + [48]))
	$6 = CALL pow((float_64)10, (float_64)0)
	$7 = CALL llabs(*($12 + [49]))
	$8 = CALL pow((float_64)10, (float_64)1)
	$9 = CALL llabs(*($12 + [50]))
	$10 = CALL pow((float_64)10, (float_64)2)
	CALL _ZN3ltt6recordEyyyy($0, *($1), *($1 + [8]), *($1 + [16]), (Rounds 0)(((float_64)(CASTING float_64)(uint_64 (Rounds 0)(((float_64)(CASTING float_64)(uint_64 (Rounds 0)(((float_64)((float_64)$6 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)$5 % (int_64)6) + (int_64)1))) + (float_64)(float_64)0))) + (float_64)((float_64)$8 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)$7 % (int_64)6) + (int_64)1)))))) + (float_64)((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)$9 % (int_64)6) + (int_64)1))))))
	$11 = ($11 + [4])
	if ( ((int_32)$3 != (int_32)$11) ){ goto $label$3 }
	$11 = *($12 + [24])
	
.LABEL $label$2
	if ( ($11 == 0) ){ goto $label$4 }
	*($12 + [28]) = $11
	CALL $43($11)
	
.LABEL $label$4
	*([0] + [4]) = ($12 + [80])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $14(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $52(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $52(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $43(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $43(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $43(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$7 = *($0 + [4])
	$5 = *($7)
	$6 = *($5 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)4849662300438998672, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $31($5, $3)
	*($8 + [4]) = [0]
	*($8) = $5
	$6 = *(*(CALL $32($8) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [176])
	*($1) = *(($5 + [16]))
	$3 = ($1 + [8])
	CALL $45($3, *($7 + [4]))
	$5 = *($7 + [8])
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$5 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [24])
	$6 = (CASTING uint_64)(uint_32 $7)
	$4 = ($1 + [24])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ($5 <= [513]) ){ goto $label$5 }
	$7 = CALL malloc($5)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$4
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [448])
	CALL memcpy($7, $1, [8])
	*($8 + [4]) = ($7 + [8])
	CALL $37($8, $3)
	CALL eosio_assert(((int_32)(*($8 + [8]) - *($8 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($8 + [4]), $4, [8])
	$9 = (*($8 + [4]) + [8])
	*($8 + [4]) = $9
	CALL eosio_assert(((int_32)(*($8 + [8]) - $9) > (int_32)[7]), [448])
	CALL memcpy(*($8 + [4]), ($1 + [32]), [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	$6 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)4849662300438998672, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL free($7)
	
.LABEL $label$6
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [448])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$7 = *($0 + [4])
	$5 = *($7)
	$6 = *($5 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)4849662300438998672, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $31($5, $3)
	*($8 + [4]) = [0]
	*($8) = $5
	$6 = *(*(CALL $32($8) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [176])
	*($1) = *(($5 + [16]))
	$3 = ($1 + [8])
	CALL $45($3, *($7 + [4]))
	$5 = *($7 + [8])
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$5 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [24])
	$6 = (CASTING uint_64)(uint_32 $7)
	$4 = ($1 + [24])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ($5 <= [513]) ){ goto $label$5 }
	$7 = CALL malloc($5)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$4
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [448])
	CALL memcpy($7, $1, [8])
	*($8 + [4]) = ($7 + [8])
	CALL $37($8, $3)
	CALL eosio_assert(((int_32)(*($8 + [8]) - *($8 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($8 + [4]), $4, [8])
	$9 = (*($8 + [4]) + [8])
	*($8 + [4]) = $9
	CALL eosio_assert(((int_32)(*($8 + [8]) - $9) > (int_32)[7]), [448])
	CALL memcpy(*($8 + [4]), ($1 + [32]), [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	$6 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)4849662300438998672, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL free($7)
	
.LABEL $label$6
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $42(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $51($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $43(*(($1 + [16])))
	
.LABEL $label$11
	CALL $43($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $43($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [44]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [704])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4849662300438998672)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [640])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [640])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $31(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [464])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [512])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [576])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $43(*(($4 + [16])))
	
.LABEL $label$7
	CALL $43($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $43(*(($4 + [16])))
	
.LABEL $label$10
	CALL $43($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $52(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $52(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $43(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $43(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [752])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$5 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$5 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$5
	CALL db_get_i64($1, $5, $6)
	*($9 + [36]) = $5
	*($9 + [32]) = $5
	*($9 + [40]) = ($5 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($5)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($5 = CALL $42([56])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)1398362884
	CALL eosio_assert([1], [832])
	$4 = ($5 + [32])
	$3 = ($5 + [24])
	$10 = ($5 + [8])
	$8 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [896])
	*($5 + [40]) = $0
	$7 = *($9 + [36])
	$6 = (($9 + [32]) + [8])
	CALL eosio_assert(((uint_32)(*($6) - $7) > (uint_32)[7]), [160])
	CALL memcpy($5, $7, [8])
	*($9 + [36]) = ($7 + [8])
	CALL $14(($9 + [32]), $10)
	CALL eosio_assert(((uint_32)(*($6) - *($9 + [36])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($9 + [36]), [8])
	$7 = (*($9 + [36]) + [8])
	*($9 + [36]) = $7
	CALL eosio_assert(((uint_32)(*($6) - $7) > (uint_32)[7]), [160])
	CALL memcpy($4, *($9 + [36]), [8])
	*($5 + [44]) = $1
	*($9 + [24]) = $5
	*($9 + [36]) = (*($9 + [36]) + [8])
	$8 = *($5)
	*($9 + [16]) = $8
	$7 = *($5 + [44])
	*($9 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($6 + [8]) = $8
	*($6 + [16]) = $7
	*($9 + [24]) = [0]
	*($6) = $5
	*($1) = ($6 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $35($2, ($9 + [24]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$13
	$6 = *($9 + [24])
	*($9 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL $43(*(($6 + [16])))
	
.LABEL $label$15
	CALL $43($6)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [48])
	return $5
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC atol (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$1 = [1]
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$1 = [0]
	
.LABEL $label$2
	$2 = [0]
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $3)
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $1 )
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $64 ()
{
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $39([988], $0)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $42($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $42($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC isspace (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [9504])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [9488]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [9520]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}